
build_gd32/main.elf:     file format elf32-littlearm


Disassembly of section .vectors:

08000000 <__gVectors>:
 8000000:	2000c000 	andcs	ip, r0, r0
 8000004:	08000165 	stmdaeq	r0, {r0, r2, r5, r6, r8}
 8000008:	080005f5 	stmdaeq	r0, {r0, r2, r4, r5, r6, r7, r8, sl}
 800000c:	080005f5 	stmdaeq	r0, {r0, r2, r4, r5, r6, r7, r8, sl}
 8000010:	080005f5 	stmdaeq	r0, {r0, r2, r4, r5, r6, r7, r8, sl}
 8000014:	080005f5 	stmdaeq	r0, {r0, r2, r4, r5, r6, r7, r8, sl}
 8000018:	080005f5 	stmdaeq	r0, {r0, r2, r4, r5, r6, r7, r8, sl}
	...
 800002c:	080005f5 	stmdaeq	r0, {r0, r2, r4, r5, r6, r7, r8, sl}
 8000030:	080005f5 	stmdaeq	r0, {r0, r2, r4, r5, r6, r7, r8, sl}
 8000034:	00000000 	andeq	r0, r0, r0
 8000038:	080005f5 	stmdaeq	r0, {r0, r2, r4, r5, r6, r7, r8, sl}
 800003c:	0800811d 	stmdaeq	r0, {r0, r2, r3, r4, r8, pc}
 8000040:	080005f5 	stmdaeq	r0, {r0, r2, r4, r5, r6, r7, r8, sl}
 8000044:	080005f5 	stmdaeq	r0, {r0, r2, r4, r5, r6, r7, r8, sl}
 8000048:	080005f5 	stmdaeq	r0, {r0, r2, r4, r5, r6, r7, r8, sl}
 800004c:	080005f5 	stmdaeq	r0, {r0, r2, r4, r5, r6, r7, r8, sl}
 8000050:	080005f5 	stmdaeq	r0, {r0, r2, r4, r5, r6, r7, r8, sl}
 8000054:	080005f5 	stmdaeq	r0, {r0, r2, r4, r5, r6, r7, r8, sl}
 8000058:	080005f5 	stmdaeq	r0, {r0, r2, r4, r5, r6, r7, r8, sl}
 800005c:	080005f5 	stmdaeq	r0, {r0, r2, r4, r5, r6, r7, r8, sl}
 8000060:	080005f5 	stmdaeq	r0, {r0, r2, r4, r5, r6, r7, r8, sl}
 8000064:	080005f5 	stmdaeq	r0, {r0, r2, r4, r5, r6, r7, r8, sl}
 8000068:	080005f5 	stmdaeq	r0, {r0, r2, r4, r5, r6, r7, r8, sl}
 800006c:	080005f5 	stmdaeq	r0, {r0, r2, r4, r5, r6, r7, r8, sl}
 8000070:	080005f5 	stmdaeq	r0, {r0, r2, r4, r5, r6, r7, r8, sl}
 8000074:	080005f5 	stmdaeq	r0, {r0, r2, r4, r5, r6, r7, r8, sl}
 8000078:	080005f5 	stmdaeq	r0, {r0, r2, r4, r5, r6, r7, r8, sl}
 800007c:	080005f5 	stmdaeq	r0, {r0, r2, r4, r5, r6, r7, r8, sl}
 8000080:	080005f5 	stmdaeq	r0, {r0, r2, r4, r5, r6, r7, r8, sl}
 8000084:	080005f5 	stmdaeq	r0, {r0, r2, r4, r5, r6, r7, r8, sl}
 8000088:	080005f5 	stmdaeq	r0, {r0, r2, r4, r5, r6, r7, r8, sl}
 800008c:	080005f5 	stmdaeq	r0, {r0, r2, r4, r5, r6, r7, r8, sl}
 8000090:	080005f5 	stmdaeq	r0, {r0, r2, r4, r5, r6, r7, r8, sl}
 8000094:	080005f5 	stmdaeq	r0, {r0, r2, r4, r5, r6, r7, r8, sl}
 8000098:	080005f5 	stmdaeq	r0, {r0, r2, r4, r5, r6, r7, r8, sl}
 800009c:	080005f5 	stmdaeq	r0, {r0, r2, r4, r5, r6, r7, r8, sl}
 80000a0:	080005f5 	stmdaeq	r0, {r0, r2, r4, r5, r6, r7, r8, sl}
 80000a4:	080005f5 	stmdaeq	r0, {r0, r2, r4, r5, r6, r7, r8, sl}
 80000a8:	080005f5 	stmdaeq	r0, {r0, r2, r4, r5, r6, r7, r8, sl}
 80000ac:	080005f5 	stmdaeq	r0, {r0, r2, r4, r5, r6, r7, r8, sl}
 80000b0:	08002e91 	stmdaeq	r0, {r0, r4, r7, r9, sl, fp, sp}
 80000b4:	08002f41 	stmdaeq	r0, {r0, r6, r8, r9, sl, fp, sp}
 80000b8:	08002fa9 	stmdaeq	r0, {r0, r3, r5, r7, r8, r9, sl, fp, sp}
 80000bc:	080005f5 	stmdaeq	r0, {r0, r2, r4, r5, r6, r7, r8, sl}
 80000c0:	080005f5 	stmdaeq	r0, {r0, r2, r4, r5, r6, r7, r8, sl}
 80000c4:	080005f5 	stmdaeq	r0, {r0, r2, r4, r5, r6, r7, r8, sl}
 80000c8:	080005f5 	stmdaeq	r0, {r0, r2, r4, r5, r6, r7, r8, sl}
 80000cc:	080005f5 	stmdaeq	r0, {r0, r2, r4, r5, r6, r7, r8, sl}
 80000d0:	080005f5 	stmdaeq	r0, {r0, r2, r4, r5, r6, r7, r8, sl}
 80000d4:	00000000 	andeq	r0, r0, r0
 80000d8:	080005f5 	stmdaeq	r0, {r0, r2, r4, r5, r6, r7, r8, sl}
 80000dc:	08002c9d 	stmdaeq	r0, {r0, r2, r3, r4, r7, sl, fp, sp}
 80000e0:	080005f5 	stmdaeq	r0, {r0, r2, r4, r5, r6, r7, r8, sl}
 80000e4:	080005f5 	stmdaeq	r0, {r0, r2, r4, r5, r6, r7, r8, sl}
 80000e8:	080005f5 	stmdaeq	r0, {r0, r2, r4, r5, r6, r7, r8, sl}
 80000ec:	080005f5 	stmdaeq	r0, {r0, r2, r4, r5, r6, r7, r8, sl}
 80000f0:	080005f5 	stmdaeq	r0, {r0, r2, r4, r5, r6, r7, r8, sl}
 80000f4:	080005f5 	stmdaeq	r0, {r0, r2, r4, r5, r6, r7, r8, sl}
 80000f8:	080005f5 	stmdaeq	r0, {r0, r2, r4, r5, r6, r7, r8, sl}
 80000fc:	080005f5 	stmdaeq	r0, {r0, r2, r4, r5, r6, r7, r8, sl}
 8000100:	080005f5 	stmdaeq	r0, {r0, r2, r4, r5, r6, r7, r8, sl}
 8000104:	080005f5 	stmdaeq	r0, {r0, r2, r4, r5, r6, r7, r8, sl}
 8000108:	080005f5 	stmdaeq	r0, {r0, r2, r4, r5, r6, r7, r8, sl}
 800010c:	080005f5 	stmdaeq	r0, {r0, r2, r4, r5, r6, r7, r8, sl}
 8000110:	080005f5 	stmdaeq	r0, {r0, r2, r4, r5, r6, r7, r8, sl}
 8000114:	080005f5 	stmdaeq	r0, {r0, r2, r4, r5, r6, r7, r8, sl}
 8000118:	080005f5 	stmdaeq	r0, {r0, r2, r4, r5, r6, r7, r8, sl}
 800011c:	08002fbd 	stmdaeq	r0, {r0, r2, r3, r4, r5, r7, r8, r9, sl, fp, sp}
 8000120:	080005f5 	stmdaeq	r0, {r0, r2, r4, r5, r6, r7, r8, sl}
 8000124:	080005f5 	stmdaeq	r0, {r0, r2, r4, r5, r6, r7, r8, sl}
 8000128:	080005f5 	stmdaeq	r0, {r0, r2, r4, r5, r6, r7, r8, sl}
 800012c:	080005f5 	stmdaeq	r0, {r0, r2, r4, r5, r6, r7, r8, sl}

Disassembly of section .text:

08000130 <console_init>:
 8000130:	b508      	push	{r3, lr}
 8000132:	f007 ff95 	bl	8008060 <uart0_init>
 8000136:	4804      	ldr	r0, [pc, #16]	; (8000148 <console_init+0x18>)
 8000138:	f007 ffc2 	bl	80080c0 <uart0_puts>
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <console_init+0x1c>)
 800013e:	f007 ffbf 	bl	80080c0 <uart0_puts>
 8000142:	2000      	movs	r0, #0
 8000144:	bd08      	pop	{r3, pc}
 8000146:	bf00      	nop
 8000148:	0800b784 	stmdaeq	r0, {r2, r7, r8, r9, sl, ip, sp, pc}
 800014c:	0800b78a 	stmdaeq	r0, {r1, r3, r7, r8, r9, sl, ip, sp, pc}
 8000150:	0800b8d0 	stmdaeq	r0, {r4, r6, r7, fp, ip, sp, pc}
 8000154:	20000000 	andcs	r0, r0, r0
 8000158:	200000e4 	andcs	r0, r0, r4, ror #1
 800015c:	200000e8 	andcs	r0, r0, r8, ror #1
 8000160:	20007824 	andcs	r7, r0, r4, lsr #16

08000164 <Reset_Handler>:
 8000164:	2100      	movs	r1, #0
 8000166:	e003      	b.n	8000170 <DataInit>

08000168 <CopyData>:
 8000168:	4b0a      	ldr	r3, [pc, #40]	; (8000194 <Zerobss+0x10>)
 800016a:	585b      	ldr	r3, [r3, r1]
 800016c:	5043      	str	r3, [r0, r1]
 800016e:	3104      	adds	r1, #4

08000170 <DataInit>:
 8000170:	4809      	ldr	r0, [pc, #36]	; (8000198 <Zerobss+0x14>)
 8000172:	4b0a      	ldr	r3, [pc, #40]	; (800019c <Zerobss+0x18>)
 8000174:	1842      	adds	r2, r0, r1
 8000176:	429a      	cmp	r2, r3
 8000178:	d3f6      	bcc.n	8000168 <CopyData>
 800017a:	4a09      	ldr	r2, [pc, #36]	; (80001a0 <Zerobss+0x1c>)
 800017c:	e002      	b.n	8000184 <Zerobss>

0800017e <FillZerobss>:
 800017e:	2300      	movs	r3, #0
 8000180:	f842 3b04 	str.w	r3, [r2], #4

08000184 <Zerobss>:
 8000184:	4b07      	ldr	r3, [pc, #28]	; (80001a4 <Zerobss+0x20>)
 8000186:	429a      	cmp	r2, r3
 8000188:	d3f9      	bcc.n	800017e <FillZerobss>
 800018a:	f007 ffcf 	bl	800812c <SystemInit>
 800018e:	f000 fb23 	bl	80007d8 <main>
 8000192:	4770      	bx	lr
 8000194:	0800b8d0 	stmdaeq	r0, {r4, r6, r7, fp, ip, sp, pc}
 8000198:	20000000 	andcs	r0, r0, r0
 800019c:	200000e4 	andcs	r0, r0, r4, ror #1
 80001a0:	200000e8 	andcs	r0, r0, r8, ror #1
 80001a4:	20007824 	andcs	r7, r0, r4, lsr #16

080001a8 <__aeabi_d2f>:
 80001a8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80001ac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80001b0:	bf24      	itt	cs
 80001b2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80001b6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80001ba:	d90d      	bls.n	80001d8 <__aeabi_d2f+0x30>
 80001bc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80001c0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80001c4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80001c8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80001cc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80001d0:	bf08      	it	eq
 80001d2:	f020 0001 	biceq.w	r0, r0, #1
 80001d6:	4770      	bx	lr
 80001d8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80001dc:	d121      	bne.n	8000222 <__aeabi_d2f+0x7a>
 80001de:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80001e2:	bfbc      	itt	lt
 80001e4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80001e8:	4770      	bxlt	lr
 80001ea:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80001ee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80001f2:	f1c2 0218 	rsb	r2, r2, #24
 80001f6:	f1c2 0c20 	rsb	ip, r2, #32
 80001fa:	fa10 f30c 	lsls.w	r3, r0, ip
 80001fe:	fa20 f002 	lsr.w	r0, r0, r2
 8000202:	bf18      	it	ne
 8000204:	f040 0001 	orrne.w	r0, r0, #1
 8000208:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800020c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000210:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000214:	ea40 000c 	orr.w	r0, r0, ip
 8000218:	fa23 f302 	lsr.w	r3, r3, r2
 800021c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000220:	e7cc      	b.n	80001bc <__aeabi_d2f+0x14>
 8000222:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000226:	d107      	bne.n	8000238 <__aeabi_d2f+0x90>
 8000228:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 800022c:	bf1e      	ittt	ne
 800022e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000232:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000236:	4770      	bxne	lr
 8000238:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 800023c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000240:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000244:	4770      	bx	lr
 8000246:	bf00      	nop

08000248 <__aeabi_uldivmod>:
 8000248:	b953      	cbnz	r3, 8000260 <__aeabi_uldivmod+0x18>
 800024a:	b94a      	cbnz	r2, 8000260 <__aeabi_uldivmod+0x18>
 800024c:	2900      	cmp	r1, #0
 800024e:	bf08      	it	eq
 8000250:	2800      	cmpeq	r0, #0
 8000252:	bf1c      	itt	ne
 8000254:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000258:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 800025c:	f000 b80c 	b.w	8000278 <__aeabi_idiv0>
 8000260:	f1ad 0c08 	sub.w	ip, sp, #8
 8000264:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000268:	f001 fb1c 	bl	80018a4 <__udivmoddi4>
 800026c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000270:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000274:	b004      	add	sp, #16
 8000276:	4770      	bx	lr

08000278 <__aeabi_idiv0>:
 8000278:	4770      	bx	lr
 800027a:	bf00      	nop

0800027c <__aeabi_drsub>:
 800027c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000280:	e002      	b.n	8000288 <__adddf3>
 8000282:	bf00      	nop

08000284 <__aeabi_dsub>:
 8000284:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000288 <__adddf3>:
 8000288:	b530      	push	{r4, r5, lr}
 800028a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800028e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000292:	ea94 0f05 	teq	r4, r5
 8000296:	bf08      	it	eq
 8000298:	ea90 0f02 	teqeq	r0, r2
 800029c:	bf1f      	itttt	ne
 800029e:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a2:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002a6:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002aa:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002ae:	f000 80e2 	beq.w	8000476 <__adddf3+0x1ee>
 80002b2:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002b6:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ba:	bfb8      	it	lt
 80002bc:	426d      	neglt	r5, r5
 80002be:	dd0c      	ble.n	80002da <__adddf3+0x52>
 80002c0:	442c      	add	r4, r5
 80002c2:	ea80 0202 	eor.w	r2, r0, r2
 80002c6:	ea81 0303 	eor.w	r3, r1, r3
 80002ca:	ea82 0000 	eor.w	r0, r2, r0
 80002ce:	ea83 0101 	eor.w	r1, r3, r1
 80002d2:	ea80 0202 	eor.w	r2, r0, r2
 80002d6:	ea81 0303 	eor.w	r3, r1, r3
 80002da:	2d36      	cmp	r5, #54	; 0x36
 80002dc:	bf88      	it	hi
 80002de:	bd30      	pophi	{r4, r5, pc}
 80002e0:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002e8:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002ec:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f0:	d002      	beq.n	80002f8 <__adddf3+0x70>
 80002f2:	4240      	negs	r0, r0
 80002f4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002f8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002fc:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000300:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x84>
 8000306:	4252      	negs	r2, r2
 8000308:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800030c:	ea94 0f05 	teq	r4, r5
 8000310:	f000 80a7 	beq.w	8000462 <__adddf3+0x1da>
 8000314:	f1a4 0401 	sub.w	r4, r4, #1
 8000318:	f1d5 0e20 	rsbs	lr, r5, #32
 800031c:	db0d      	blt.n	800033a <__adddf3+0xb2>
 800031e:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000322:	fa22 f205 	lsr.w	r2, r2, r5
 8000326:	1880      	adds	r0, r0, r2
 8000328:	f141 0100 	adc.w	r1, r1, #0
 800032c:	fa03 f20e 	lsl.w	r2, r3, lr
 8000330:	1880      	adds	r0, r0, r2
 8000332:	fa43 f305 	asr.w	r3, r3, r5
 8000336:	4159      	adcs	r1, r3
 8000338:	e00e      	b.n	8000358 <__adddf3+0xd0>
 800033a:	f1a5 0520 	sub.w	r5, r5, #32
 800033e:	f10e 0e20 	add.w	lr, lr, #32
 8000342:	2a01      	cmp	r2, #1
 8000344:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000348:	bf28      	it	cs
 800034a:	f04c 0c02 	orrcs.w	ip, ip, #2
 800034e:	fa43 f305 	asr.w	r3, r3, r5
 8000352:	18c0      	adds	r0, r0, r3
 8000354:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000358:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800035c:	d507      	bpl.n	800036e <__adddf3+0xe6>
 800035e:	f04f 0e00 	mov.w	lr, #0
 8000362:	f1dc 0c00 	rsbs	ip, ip, #0
 8000366:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036a:	eb6e 0101 	sbc.w	r1, lr, r1
 800036e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000372:	d31b      	bcc.n	80003ac <__adddf3+0x124>
 8000374:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000378:	d30c      	bcc.n	8000394 <__adddf3+0x10c>
 800037a:	0849      	lsrs	r1, r1, #1
 800037c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000380:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000384:	f104 0401 	add.w	r4, r4, #1
 8000388:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800038c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000390:	f080 809a 	bcs.w	80004c8 <__adddf3+0x240>
 8000394:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000398:	bf08      	it	eq
 800039a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800039e:	f150 0000 	adcs.w	r0, r0, #0
 80003a2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003a6:	ea41 0105 	orr.w	r1, r1, r5
 80003aa:	bd30      	pop	{r4, r5, pc}
 80003ac:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b0:	4140      	adcs	r0, r0
 80003b2:	eb41 0101 	adc.w	r1, r1, r1
 80003b6:	3c01      	subs	r4, #1
 80003b8:	bf28      	it	cs
 80003ba:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003be:	d2e9      	bcs.n	8000394 <__adddf3+0x10c>
 80003c0:	f091 0f00 	teq	r1, #0
 80003c4:	bf04      	itt	eq
 80003c6:	4601      	moveq	r1, r0
 80003c8:	2000      	moveq	r0, #0
 80003ca:	fab1 f381 	clz	r3, r1
 80003ce:	bf08      	it	eq
 80003d0:	3320      	addeq	r3, #32
 80003d2:	f1a3 030b 	sub.w	r3, r3, #11
 80003d6:	f1b3 0220 	subs.w	r2, r3, #32
 80003da:	da0c      	bge.n	80003f6 <__adddf3+0x16e>
 80003dc:	320c      	adds	r2, #12
 80003de:	dd08      	ble.n	80003f2 <__adddf3+0x16a>
 80003e0:	f102 0c14 	add.w	ip, r2, #20
 80003e4:	f1c2 020c 	rsb	r2, r2, #12
 80003e8:	fa01 f00c 	lsl.w	r0, r1, ip
 80003ec:	fa21 f102 	lsr.w	r1, r1, r2
 80003f0:	e00c      	b.n	800040c <__adddf3+0x184>
 80003f2:	f102 0214 	add.w	r2, r2, #20
 80003f6:	bfd8      	it	le
 80003f8:	f1c2 0c20 	rsble	ip, r2, #32
 80003fc:	fa01 f102 	lsl.w	r1, r1, r2
 8000400:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000404:	bfdc      	itt	le
 8000406:	ea41 010c 	orrle.w	r1, r1, ip
 800040a:	4090      	lslle	r0, r2
 800040c:	1ae4      	subs	r4, r4, r3
 800040e:	bfa2      	ittt	ge
 8000410:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000414:	4329      	orrge	r1, r5
 8000416:	bd30      	popge	{r4, r5, pc}
 8000418:	ea6f 0404 	mvn.w	r4, r4
 800041c:	3c1f      	subs	r4, #31
 800041e:	da1c      	bge.n	800045a <__adddf3+0x1d2>
 8000420:	340c      	adds	r4, #12
 8000422:	dc0e      	bgt.n	8000442 <__adddf3+0x1ba>
 8000424:	f104 0414 	add.w	r4, r4, #20
 8000428:	f1c4 0220 	rsb	r2, r4, #32
 800042c:	fa20 f004 	lsr.w	r0, r0, r4
 8000430:	fa01 f302 	lsl.w	r3, r1, r2
 8000434:	ea40 0003 	orr.w	r0, r0, r3
 8000438:	fa21 f304 	lsr.w	r3, r1, r4
 800043c:	ea45 0103 	orr.w	r1, r5, r3
 8000440:	bd30      	pop	{r4, r5, pc}
 8000442:	f1c4 040c 	rsb	r4, r4, #12
 8000446:	f1c4 0220 	rsb	r2, r4, #32
 800044a:	fa20 f002 	lsr.w	r0, r0, r2
 800044e:	fa01 f304 	lsl.w	r3, r1, r4
 8000452:	ea40 0003 	orr.w	r0, r0, r3
 8000456:	4629      	mov	r1, r5
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	fa21 f004 	lsr.w	r0, r1, r4
 800045e:	4629      	mov	r1, r5
 8000460:	bd30      	pop	{r4, r5, pc}
 8000462:	f094 0f00 	teq	r4, #0
 8000466:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046a:	bf06      	itte	eq
 800046c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000470:	3401      	addeq	r4, #1
 8000472:	3d01      	subne	r5, #1
 8000474:	e74e      	b.n	8000314 <__adddf3+0x8c>
 8000476:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047a:	bf18      	it	ne
 800047c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000480:	d029      	beq.n	80004d6 <__adddf3+0x24e>
 8000482:	ea94 0f05 	teq	r4, r5
 8000486:	bf08      	it	eq
 8000488:	ea90 0f02 	teqeq	r0, r2
 800048c:	d005      	beq.n	800049a <__adddf3+0x212>
 800048e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000492:	bf04      	itt	eq
 8000494:	4619      	moveq	r1, r3
 8000496:	4610      	moveq	r0, r2
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	ea91 0f03 	teq	r1, r3
 800049e:	bf1e      	ittt	ne
 80004a0:	2100      	movne	r1, #0
 80004a2:	2000      	movne	r0, #0
 80004a4:	bd30      	popne	{r4, r5, pc}
 80004a6:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004aa:	d105      	bne.n	80004b8 <__adddf3+0x230>
 80004ac:	0040      	lsls	r0, r0, #1
 80004ae:	4149      	adcs	r1, r1
 80004b0:	bf28      	it	cs
 80004b2:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004b6:	bd30      	pop	{r4, r5, pc}
 80004b8:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004bc:	bf3c      	itt	cc
 80004be:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c2:	bd30      	popcc	{r4, r5, pc}
 80004c4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004c8:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004cc:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d0:	f04f 0000 	mov.w	r0, #0
 80004d4:	bd30      	pop	{r4, r5, pc}
 80004d6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004da:	bf1a      	itte	ne
 80004dc:	4619      	movne	r1, r3
 80004de:	4610      	movne	r0, r2
 80004e0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e4:	bf1c      	itt	ne
 80004e6:	460b      	movne	r3, r1
 80004e8:	4602      	movne	r2, r0
 80004ea:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004ee:	bf06      	itte	eq
 80004f0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f4:	ea91 0f03 	teqeq	r1, r3
 80004f8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004fc:	bd30      	pop	{r4, r5, pc}
 80004fe:	bf00      	nop

08000500 <__aeabi_ui2d>:
 8000500:	f090 0f00 	teq	r0, #0
 8000504:	bf04      	itt	eq
 8000506:	2100      	moveq	r1, #0
 8000508:	4770      	bxeq	lr
 800050a:	b530      	push	{r4, r5, lr}
 800050c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000510:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000514:	f04f 0500 	mov.w	r5, #0
 8000518:	f04f 0100 	mov.w	r1, #0
 800051c:	e750      	b.n	80003c0 <__adddf3+0x138>
 800051e:	bf00      	nop

08000520 <__aeabi_i2d>:
 8000520:	f090 0f00 	teq	r0, #0
 8000524:	bf04      	itt	eq
 8000526:	2100      	moveq	r1, #0
 8000528:	4770      	bxeq	lr
 800052a:	b530      	push	{r4, r5, lr}
 800052c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000530:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000534:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000538:	bf48      	it	mi
 800053a:	4240      	negmi	r0, r0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e73e      	b.n	80003c0 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_f2d>:
 8000544:	0042      	lsls	r2, r0, #1
 8000546:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054a:	ea4f 0131 	mov.w	r1, r1, rrx
 800054e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000552:	bf1f      	itttt	ne
 8000554:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000558:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 800055c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000560:	4770      	bxne	lr
 8000562:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000566:	bf08      	it	eq
 8000568:	4770      	bxeq	lr
 800056a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800056e:	bf04      	itt	eq
 8000570:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000574:	4770      	bxeq	lr
 8000576:	b530      	push	{r4, r5, lr}
 8000578:	f44f 7460 	mov.w	r4, #896	; 0x380
 800057c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000580:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000584:	e71c      	b.n	80003c0 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_ul2d>:
 8000588:	ea50 0201 	orrs.w	r2, r0, r1
 800058c:	bf08      	it	eq
 800058e:	4770      	bxeq	lr
 8000590:	b530      	push	{r4, r5, lr}
 8000592:	f04f 0500 	mov.w	r5, #0
 8000596:	e00a      	b.n	80005ae <__aeabi_l2d+0x16>

08000598 <__aeabi_l2d>:
 8000598:	ea50 0201 	orrs.w	r2, r0, r1
 800059c:	bf08      	it	eq
 800059e:	4770      	bxeq	lr
 80005a0:	b530      	push	{r4, r5, lr}
 80005a2:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005a6:	d502      	bpl.n	80005ae <__aeabi_l2d+0x16>
 80005a8:	4240      	negs	r0, r0
 80005aa:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005ae:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b2:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005b6:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ba:	f43f aed8 	beq.w	800036e <__adddf3+0xe6>
 80005be:	f04f 0203 	mov.w	r2, #3
 80005c2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c6:	bf18      	it	ne
 80005c8:	3203      	addne	r2, #3
 80005ca:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ce:	bf18      	it	ne
 80005d0:	3203      	addne	r2, #3
 80005d2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005d6:	f1c2 0320 	rsb	r3, r2, #32
 80005da:	fa00 fc03 	lsl.w	ip, r0, r3
 80005de:	fa20 f002 	lsr.w	r0, r0, r2
 80005e2:	fa01 fe03 	lsl.w	lr, r1, r3
 80005e6:	ea40 000e 	orr.w	r0, r0, lr
 80005ea:	fa21 f102 	lsr.w	r1, r1, r2
 80005ee:	4414      	add	r4, r2
 80005f0:	e6bd      	b.n	800036e <__adddf3+0xe6>
 80005f2:	bf00      	nop

080005f4 <ADC0_1_IRQHandler>:
 80005f4:	e7fe      	b.n	80005f4 <ADC0_1_IRQHandler>

080005f6 <PixelDmxStartStop::~PixelDmxStartStop()>:
 80005f6:	4770      	bx	lr

080005f8 <PixelDmxStartStop::Start()>:
 80005f8:	4b01      	ldr	r3, [pc, #4]	; (8000600 <PixelDmxStartStop::Start()+0x8>)
 80005fa:	2204      	movs	r2, #4
 80005fc:	611a      	str	r2, [r3, #16]
 80005fe:	4770      	bx	lr
 8000600:	40011000 	andmi	r1, r1, r0

08000604 <PixelDmxStartStop::Stop()>:
 8000604:	4b01      	ldr	r3, [pc, #4]	; (800060c <PixelDmxStartStop::Stop()+0x8>)
 8000606:	2204      	movs	r2, #4
 8000608:	615a      	str	r2, [r3, #20]
 800060a:	4770      	bx	lr
 800060c:	40011000 	andmi	r1, r1, r0

08000610 <PixelDmxStartStop::~PixelDmxStartStop()>:
 8000610:	b510      	push	{r4, lr}
 8000612:	4604      	mov	r4, r0
 8000614:	f007 fb63 	bl	8007cde <operator delete(void*)>
 8000618:	4620      	mov	r0, r4
 800061a:	bd10      	pop	{r4, pc}

0800061c <RDMResponder::PersonalityUpdate(LightSet*)>:
 800061c:	b570      	push	{r4, r5, r6, lr}
 800061e:	4e0a      	ldr	r6, [pc, #40]	; (8000648 <RDMResponder::PersonalityUpdate(LightSet*)+0x2c>)
 8000620:	4604      	mov	r4, r0
 8000622:	6830      	ldr	r0, [r6, #0]
 8000624:	4281      	cmp	r1, r0
 8000626:	460d      	mov	r5, r1
 8000628:	d007      	beq.n	800063a <RDMResponder::PersonalityUpdate(LightSet*)+0x1e>
 800062a:	6803      	ldr	r3, [r0, #0]
 800062c:	2100      	movs	r1, #0
 800062e:	68db      	ldr	r3, [r3, #12]
 8000630:	4798      	blx	r3
 8000632:	4b06      	ldr	r3, [pc, #24]	; (800064c <RDMResponder::PersonalityUpdate(LightSet*)+0x30>)
 8000634:	6035      	str	r5, [r6, #0]
 8000636:	2200      	movs	r2, #0
 8000638:	701a      	strb	r2, [r3, #0]
 800063a:	f894 10a9 	ldrb.w	r1, [r4, #169]	; 0xa9
 800063e:	4620      	mov	r0, r4
 8000640:	f000 fbfa 	bl	8000e38 <RDMResponder::PersonalityUpdate(unsigned int)>
 8000644:	bd70      	pop	{r4, r5, r6, pc}
 8000646:	bf00      	nop
 8000648:	20000208 	andcs	r0, r0, r8, lsl #4
 800064c:	20000204 	andcs	r0, r0, r4, lsl #4

08000650 <RDMResponder::DmxStartAddressUpdate()>:
 8000650:	b508      	push	{r3, lr}
 8000652:	f890 20ab 	ldrb.w	r2, [r0, #171]	; 0xab
 8000656:	f890 10ac 	ldrb.w	r1, [r0, #172]	; 0xac
 800065a:	eb01 2102 	add.w	r1, r1, r2, lsl #8
 800065e:	b289      	uxth	r1, r1
 8000660:	f000 fbd6 	bl	8000e10 <RDMResponder::DmxStartAddressUpdate(unsigned short)>
 8000664:	bd08      	pop	{r3, pc}

08000666 <Display::ClearLine(unsigned char) [clone .isra.0]>:
 8000666:	b110      	cbz	r0, 800066e <Display::ClearLine(unsigned char) [clone .isra.0]+0x8>
 8000668:	6803      	ldr	r3, [r0, #0]
 800066a:	691b      	ldr	r3, [r3, #16]
 800066c:	4718      	bx	r3
 800066e:	4770      	bx	lr

08000670 <RDMResponder::~RDMResponder()>:
 8000670:	4b0e      	ldr	r3, [pc, #56]	; (80006ac <RDMResponder::~RDMResponder()+0x3c>)
 8000672:	b510      	push	{r4, lr}
 8000674:	4604      	mov	r4, r0
 8000676:	f840 3b8c 	str.w	r3, [r0], #140
 800067a:	f002 f9a3 	bl	80029c4 <RDMSubDevices::~RDMSubDevices()>
 800067e:	f104 0084 	add.w	r0, r4, #132	; 0x84
 8000682:	f001 fb67 	bl	8001d54 <RDMSensors::~RDMSensors()>
 8000686:	2300      	movs	r3, #0
 8000688:	2201      	movs	r2, #1
 800068a:	4619      	mov	r1, r3
 800068c:	f104 00cc 	add.w	r0, r4, #204	; 0xcc
 8000690:	f002 fdae 	bl	80031f0 <Dmx::SetPortDirection(unsigned int, dmx::PortDirection, bool)>
 8000694:	4b06      	ldr	r3, [pc, #24]	; (80006b0 <RDMResponder::~RDMResponder()+0x40>)
 8000696:	6818      	ldr	r0, [r3, #0]
 8000698:	6803      	ldr	r3, [r0, #0]
 800069a:	2100      	movs	r1, #0
 800069c:	68db      	ldr	r3, [r3, #12]
 800069e:	4798      	blx	r3
 80006a0:	4b04      	ldr	r3, [pc, #16]	; (80006b4 <RDMResponder::~RDMResponder()+0x44>)
 80006a2:	2200      	movs	r2, #0
 80006a4:	701a      	strb	r2, [r3, #0]
 80006a6:	4620      	mov	r0, r4
 80006a8:	bd10      	pop	{r4, pc}
 80006aa:	bf00      	nop
 80006ac:	08009c84 	stmdaeq	r0, {r2, r7, sl, fp, ip, pc}
 80006b0:	20000208 	andcs	r0, r0, r8, lsl #4
 80006b4:	20000204 	andcs	r0, r0, r4, lsl #4

080006b8 <RDMResponder::~RDMResponder()>:
 80006b8:	b510      	push	{r4, lr}
 80006ba:	4604      	mov	r4, r0
 80006bc:	f7ff ffd8 	bl	8000670 <RDMResponder::~RDMResponder()>
 80006c0:	4620      	mov	r0, r4
 80006c2:	f007 fb0c 	bl	8007cde <operator delete(void*)>
 80006c6:	4620      	mov	r0, r4
 80006c8:	bd10      	pop	{r4, pc}

080006ca <Display::Printf(unsigned char, char const*, ...)>:
 80006ca:	b40c      	push	{r2, r3}
 80006cc:	b570      	push	{r4, r5, r6, lr}
 80006ce:	6984      	ldr	r4, [r0, #24]
 80006d0:	b08a      	sub	sp, #40	; 0x28
 80006d2:	4605      	mov	r5, r0
 80006d4:	460e      	mov	r6, r1
 80006d6:	b174      	cbz	r4, 80006f6 <Display::Printf(unsigned char, char const*, ...)+0x2c>
 80006d8:	ab0f      	add	r3, sp, #60	; 0x3c
 80006da:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80006dc:	9301      	str	r3, [sp, #4]
 80006de:	2120      	movs	r1, #32
 80006e0:	a802      	add	r0, sp, #8
 80006e2:	f001 f8c7 	bl	8001874 <vsnprintf>
 80006e6:	4604      	mov	r4, r0
 80006e8:	69a8      	ldr	r0, [r5, #24]
 80006ea:	6803      	ldr	r3, [r0, #0]
 80006ec:	aa02      	add	r2, sp, #8
 80006ee:	69dd      	ldr	r5, [r3, #28]
 80006f0:	4631      	mov	r1, r6
 80006f2:	b2a3      	uxth	r3, r4
 80006f4:	47a8      	blx	r5
 80006f6:	4620      	mov	r0, r4
 80006f8:	b00a      	add	sp, #40	; 0x28
 80006fa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80006fe:	b002      	add	sp, #8
 8000700:	4770      	bx	lr
	...

08000704 <Display::SetSleep(bool)>:
 8000704:	b538      	push	{r3, r4, r5, lr}
 8000706:	4604      	mov	r4, r0
 8000708:	6980      	ldr	r0, [r0, #24]
 800070a:	460d      	mov	r5, r1
 800070c:	b138      	cbz	r0, 800071e <Display::SetSleep(bool)+0x1a>
 800070e:	6803      	ldr	r3, [r0, #0]
 8000710:	7421      	strb	r1, [r4, #16]
 8000712:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000714:	4798      	blx	r3
 8000716:	b915      	cbnz	r5, 800071e <Display::SetSleep(bool)+0x1a>
 8000718:	4b01      	ldr	r3, [pc, #4]	; (8000720 <Display::SetSleep(bool)+0x1c>)
 800071a:	681b      	ldr	r3, [r3, #0]
 800071c:	6063      	str	r3, [r4, #4]
 800071e:	bd38      	pop	{r3, r4, r5, pc}
 8000720:	2000181c 	andcs	r1, r0, ip, lsl r8

08000724 <RDMPersonality::RDMPersonality(char const*, LightSet*)>:
 8000724:	2300      	movs	r3, #0
 8000726:	b570      	push	{r4, r5, r6, lr}
 8000728:	4604      	mov	r4, r0
 800072a:	460e      	mov	r6, r1
 800072c:	6043      	str	r3, [r0, #4]
 800072e:	6283      	str	r3, [r0, #40]	; 0x28
 8000730:	4615      	mov	r5, r2
 8000732:	b972      	cbnz	r2, 8000752 <RDMPersonality::RDMPersonality(char const*, LightSet*)+0x2e>
 8000734:	8002      	strh	r2, [r0, #0]
 8000736:	f104 0208 	add.w	r2, r4, #8
 800073a:	1e71      	subs	r1, r6, #1
 800073c:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8000740:	2300      	movs	r3, #0
 8000742:	62a3      	str	r3, [r4, #40]	; 0x28
 8000744:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8000748:	b10b      	cbz	r3, 800074e <RDMPersonality::RDMPersonality(char const*, LightSet*)+0x2a>
 800074a:	4290      	cmp	r0, r2
 800074c:	d108      	bne.n	8000760 <RDMPersonality::RDMPersonality(char const*, LightSet*)+0x3c>
 800074e:	4620      	mov	r0, r4
 8000750:	bd70      	pop	{r4, r5, r6, pc}
 8000752:	6813      	ldr	r3, [r2, #0]
 8000754:	4610      	mov	r0, r2
 8000756:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000758:	4798      	blx	r3
 800075a:	6065      	str	r5, [r4, #4]
 800075c:	8020      	strh	r0, [r4, #0]
 800075e:	e7ea      	b.n	8000736 <RDMPersonality::RDMPersonality(char const*, LightSet*)+0x12>
 8000760:	f802 3b01 	strb.w	r3, [r2], #1
 8000764:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000766:	3301      	adds	r3, #1
 8000768:	e7eb      	b.n	8000742 <RDMPersonality::RDMPersonality(char const*, LightSet*)+0x1e>
	...

0800076c <display::timeout::gpio_init()>:
 800076c:	b510      	push	{r4, lr}
 800076e:	f240 6003 	movw	r0, #1539	; 0x603
 8000772:	f007 ff3b 	bl	80085ec <rcu_periph_clock_enable>
 8000776:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800077a:	4803      	ldr	r0, [pc, #12]	; (8000788 <display::timeout::gpio_init()+0x1c>)
 800077c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000780:	2203      	movs	r2, #3
 8000782:	2148      	movs	r1, #72	; 0x48
 8000784:	f007 be9a 	b.w	80084bc <gpio_init>
 8000788:	40010c00 	andmi	r0, r1, r0, lsl #24

0800078c <display::timeout::gpio_renew()>:
 800078c:	4b03      	ldr	r3, [pc, #12]	; (800079c <display::timeout::gpio_renew()+0x10>)
 800078e:	f8d3 0c08 	ldr.w	r0, [r3, #3080]	; 0xc08
 8000792:	f480 4080 	eor.w	r0, r0, #16384	; 0x4000
 8000796:	f3c0 3080 	ubfx	r0, r0, #14, #1
 800079a:	4770      	bx	lr
 800079c:	40010000 	andmi	r0, r1, r0

080007a0 <is_config_mode()>:
 80007a0:	b508      	push	{r3, lr}
 80007a2:	f240 6002 	movw	r0, #1538	; 0x602
 80007a6:	f007 ff21 	bl	80085ec <rcu_periph_clock_enable>
 80007aa:	2340      	movs	r3, #64	; 0x40
 80007ac:	2203      	movs	r2, #3
 80007ae:	4806      	ldr	r0, [pc, #24]	; (80007c8 <is_config_mode()+0x28>)
 80007b0:	2148      	movs	r1, #72	; 0x48
 80007b2:	f007 fe83 	bl	80084bc <gpio_init>
 80007b6:	2140      	movs	r1, #64	; 0x40
 80007b8:	4803      	ldr	r0, [pc, #12]	; (80007c8 <is_config_mode()+0x28>)
 80007ba:	f007 fed9 	bl	8008570 <gpio_input_bit_get>
 80007be:	fab0 f080 	clz	r0, r0
 80007c2:	0940      	lsrs	r0, r0, #5
 80007c4:	bd08      	pop	{r3, pc}
 80007c6:	bf00      	nop
 80007c8:	40010800 	andmi	r0, r1, r0, lsl #16

080007cc <Hardware::RebootHandler()>:
 80007cc:	4b01      	ldr	r3, [pc, #4]	; (80007d4 <Hardware::RebootHandler()+0x8>)
 80007ce:	6818      	ldr	r0, [r3, #0]
 80007d0:	f005 be86 	b.w	80064e0 <WS28xx::Blackout()>
 80007d4:	20000698 	mulcs	r0, r8, r6

080007d8 <main>:
 80007d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80007dc:	f5ad 7d63 	sub.w	sp, sp, #908	; 0x38c
 80007e0:	a815      	add	r0, sp, #84	; 0x54
 80007e2:	f007 f869 	bl	80078b8 <Hardware::Hardware()>
 80007e6:	a819      	add	r0, sp, #100	; 0x64
 80007e8:	f005 ff0c 	bl	8006604 <Network::Network()>
 80007ec:	a821      	add	r0, sp, #132	; 0x84
 80007ee:	f007 f80d 	bl	800780c <LedBlink::LedBlink()>
 80007f2:	a866      	add	r0, sp, #408	; 0x198
 80007f4:	f005 ff2c 	bl	8006650 <DisplayUdf::DisplayUdf()>
 80007f8:	4bb4      	ldr	r3, [pc, #720]	; (8000acc <main+0x2f4>)
 80007fa:	4ab5      	ldr	r2, [pc, #724]	; (8000ad0 <main+0x2f8>)
 80007fc:	49b5      	ldr	r1, [pc, #724]	; (8000ad4 <main+0x2fc>)
 80007fe:	a806      	add	r0, sp, #24
 8000800:	f006 ffbe 	bl	8007780 <FirmwareVersion::FirmwareVersion(char const*, char const*, char const*)>
 8000804:	a808      	add	r0, sp, #32
 8000806:	f006 f8a1 	bl	800694c <ConfigStore::ConfigStore()>
 800080a:	2101      	movs	r1, #1
 800080c:	a821      	add	r0, sp, #132	; 0x84
 800080e:	f007 f81f 	bl	8007850 <LedBlink::SetMode(ledblink::Mode)>
 8000812:	f7ff ffc5 	bl	80007a0 <is_config_mode()>
 8000816:	2100      	movs	r1, #0
 8000818:	4606      	mov	r6, r0
 800081a:	a806      	add	r0, sp, #24
 800081c:	f006 ffe8 	bl	80077f0 <FirmwareVersion::Print(char const*)>
 8000820:	22aa      	movs	r2, #170	; 0xaa
 8000822:	2303      	movs	r3, #3
 8000824:	e9cd 3240 	strd	r3, r2, [sp, #256]	; 0x100
 8000828:	2106      	movs	r1, #6
 800082a:	2300      	movs	r3, #0
 800082c:	e9cd 1342 	strd	r1, r3, [sp, #264]	; 0x108
 8000830:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
 8000834:	9344      	str	r3, [sp, #272]	; 0x110
 8000836:	f44f 7380 	mov.w	r3, #256	; 0x100
 800083a:	f8ad 3114 	strh.w	r3, [sp, #276]	; 0x114
 800083e:	4ba6      	ldr	r3, [pc, #664]	; (8000ad8 <main+0x300>)
 8000840:	9346      	str	r3, [sp, #280]	; 0x118
 8000842:	a80f      	add	r0, sp, #60	; 0x3c
 8000844:	2301      	movs	r3, #1
 8000846:	e9cd 3347 	strd	r3, r3, [sp, #284]	; 0x11c
 800084a:	9249      	str	r2, [sp, #292]	; 0x124
 800084c:	f8ad 312c 	strh.w	r3, [sp, #300]	; 0x12c
 8000850:	f006 faaa 	bl	8006da8 <StorePixelDmx::StorePixelDmx()>
 8000854:	a90f      	add	r1, sp, #60	; 0x3c
 8000856:	a827      	add	r0, sp, #156	; 0x9c
 8000858:	f004 fb7e 	bl	8004f58 <PixelDmxParams::PixelDmxParams(PixelDmxParamsStore*)>
 800085c:	a827      	add	r0, sp, #156	; 0x9c
 800085e:	f004 fb91 	bl	8004f84 <PixelDmxParams::Load()>
 8000862:	b130      	cbz	r0, 8000872 <main+0x9a>
 8000864:	a827      	add	r0, sp, #156	; 0x9c
 8000866:	a940      	add	r1, sp, #256	; 0x100
 8000868:	f004 fb98 	bl	8004f9c <PixelDmxParams::Set(PixelDmxConfiguration*)>
 800086c:	a827      	add	r0, sp, #156	; 0x9c
 800086e:	f004 fbd2 	bl	8005016 <PixelDmxParams::Dump()>
 8000872:	ab1d      	add	r3, sp, #116	; 0x74
 8000874:	aa09      	add	r2, sp, #36	; 0x24
 8000876:	2101      	movs	r1, #1
 8000878:	a840      	add	r0, sp, #256	; 0x100
 800087a:	f004 f9c1 	bl	8004c00 <PixelDmxConfiguration::Validate(unsigned int, unsigned int&, pixeldmxconfiguration::PortInfo&)>
 800087e:	9b4a      	ldr	r3, [sp, #296]	; 0x128
 8000880:	2b01      	cmp	r3, #1
 8000882:	d90a      	bls.n	800089a <main+0xc2>
 8000884:	9948      	ldr	r1, [sp, #288]	; 0x120
 8000886:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8000888:	ebb2 2f41 	cmp.w	r2, r1, lsl #9
 800088c:	ea4f 2341 	mov.w	r3, r1, lsl #9
 8000890:	bf8c      	ite	hi
 8000892:	23aa      	movhi	r3, #170	; 0xaa
 8000894:	fbb3 f3f2 	udivls	r3, r3, r2
 8000898:	9341      	str	r3, [sp, #260]	; 0x104
 800089a:	4f90      	ldr	r7, [pc, #576]	; (8000adc <main+0x304>)
 800089c:	a940      	add	r1, sp, #256	; 0x100
 800089e:	a88e      	add	r0, sp, #568	; 0x238
 80008a0:	f004 fb20 	bl	8004ee4 <WS28xxDmx::WS28xxDmx(PixelDmxConfiguration&)>
 80008a4:	4b8e      	ldr	r3, [pc, #568]	; (8000ae0 <main+0x308>)
 80008a6:	930a      	str	r3, [sp, #40]	; 0x28
 80008a8:	2203      	movs	r2, #3
 80008aa:	2304      	movs	r3, #4
 80008ac:	2110      	movs	r1, #16
 80008ae:	4638      	mov	r0, r7
 80008b0:	f10d 0940 	add.w	r9, sp, #64	; 0x40
 80008b4:	f8cd 9288 	str.w	r9, [sp, #648]	; 0x288
 80008b8:	f007 fe00 	bl	80084bc <gpio_init>
 80008bc:	2304      	movs	r3, #4
 80008be:	617b      	str	r3, [r7, #20]
 80008c0:	ac0a      	add	r4, sp, #40	; 0x28
 80008c2:	94a3      	str	r4, [sp, #652]	; 0x28c
 80008c4:	2101      	movs	r1, #1
 80008c6:	f89d 40b0 	ldrb.w	r4, [sp, #176]	; 0xb0
 80008ca:	a807      	add	r0, sp, #28
 80008cc:	f004 fd9c 	bl	8005408 <PixelPatterns::PixelPatterns(unsigned int)>
 80008d0:	4b84      	ldr	r3, [pc, #528]	; (8000ae4 <main+0x30c>)
 80008d2:	2c05      	cmp	r4, #5
 80008d4:	601c      	str	r4, [r3, #0]
 80008d6:	f340 81e8 	ble.w	8000caa <main+0x4d2>
 80008da:	4649      	mov	r1, r9
 80008dc:	a80b      	add	r0, sp, #44	; 0x2c
 80008de:	f004 fbb7 	bl	8005050 <PixelDmxParamsRdm::PixelDmxParamsRdm(PixelDmxStore*)>
 80008e2:	a80c      	add	r0, sp, #48	; 0x30
 80008e4:	f006 faf8 	bl	8006ed8 <StoreRDMSensors::StoreRDMSensors()>
 80008e8:	a90c      	add	r1, sp, #48	; 0x30
 80008ea:	a858      	add	r0, sp, #352	; 0x160
 80008ec:	f001 fb4e 	bl	8001f8c <RDMSensorsParams::RDMSensorsParams(RDMSensorsParamsStore*)>
 80008f0:	a858      	add	r0, sp, #352	; 0x160
 80008f2:	f001 fb4d 	bl	8001f90 <RDMSensorsParams::Load()>
 80008f6:	b128      	cbz	r0, 8000904 <main+0x12c>
 80008f8:	a858      	add	r0, sp, #352	; 0x160
 80008fa:	f001 fb6d 	bl	8001fd8 <RDMSensorsParams::Set()>
 80008fe:	a858      	add	r0, sp, #352	; 0x160
 8000900:	f001 fb52 	bl	8001fa8 <RDMSensorsParams::Dump()>
 8000904:	a80d      	add	r0, sp, #52	; 0x34
 8000906:	f006 fb1d 	bl	8006f44 <StoreRDMSubDevices::StoreRDMSubDevices()>
 800090a:	a90d      	add	r1, sp, #52	; 0x34
 800090c:	a87a      	add	r0, sp, #488	; 0x1e8
 800090e:	f002 f928 	bl	8002b62 <RDMSubDevicesParams::RDMSubDevicesParams(RDMSubDevicesParamsStore*)>
 8000912:	a87a      	add	r0, sp, #488	; 0x1e8
 8000914:	f002 f927 	bl	8002b66 <RDMSubDevicesParams::Load()>
 8000918:	b128      	cbz	r0, 8000926 <main+0x14e>
 800091a:	a87a      	add	r0, sp, #488	; 0x1e8
 800091c:	f002 f930 	bl	8002b80 <RDMSubDevicesParams::Set()>
 8000920:	a87a      	add	r0, sp, #488	; 0x1e8
 8000922:	f002 f92c 	bl	8002b7e <RDMSubDevicesParams::Dump()>
 8000926:	9840      	ldr	r0, [sp, #256]	; 0x100
 8000928:	f004 fce8 	bl	80052fc <PixelType::GetType(pixel::Type)>
 800092c:	9005      	str	r0, [sp, #20]
 800092e:	9842      	ldr	r0, [sp, #264]	; 0x108
 8000930:	9d41      	ldr	r5, [sp, #260]	; 0x104
 8000932:	f8dd 8120 	ldr.w	r8, [sp, #288]	; 0x120
 8000936:	f004 fced 	bl	8005314 <PixelType::GetMap(pixel::Map)>
 800093a:	9b05      	ldr	r3, [sp, #20]
 800093c:	4a6a      	ldr	r2, [pc, #424]	; (8000ae8 <main+0x310>)
 800093e:	9500      	str	r5, [sp, #0]
 8000940:	e9cd 8001 	strd	r8, r0, [sp, #4]
 8000944:	211f      	movs	r1, #31
 8000946:	a82e      	add	r0, sp, #184	; 0xb8
 8000948:	f000 ff7c 	bl	8001844 <snprintf>
 800094c:	202c      	movs	r0, #44	; 0x2c
 800094e:	f007 f9ca 	bl	8007ce6 <operator new(unsigned int)>
 8000952:	aa8e      	add	r2, sp, #568	; 0x238
 8000954:	a92e      	add	r1, sp, #184	; 0xb8
 8000956:	4605      	mov	r5, r0
 8000958:	f7ff fee4 	bl	8000724 <RDMPersonality::RDMPersonality(char const*, LightSet*)>
 800095c:	202c      	movs	r0, #44	; 0x2c
 800095e:	9511      	str	r5, [sp, #68]	; 0x44
 8000960:	f007 f9c1 	bl	8007ce6 <operator new(unsigned int)>
 8000964:	4961      	ldr	r1, [pc, #388]	; (8000aec <main+0x314>)
 8000966:	aa0b      	add	r2, sp, #44	; 0x2c
 8000968:	4605      	mov	r5, r0
 800096a:	f7ff fedb 	bl	8000724 <RDMPersonality::RDMPersonality(char const*, LightSet*)>
 800096e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8000970:	9512      	str	r5, [sp, #72]	; 0x48
 8000972:	a8d8      	add	r0, sp, #864	; 0x360
 8000974:	f8d3 8004 	ldr.w	r8, [r3, #4]
 8000978:	ada5      	add	r5, sp, #660	; 0x294
 800097a:	f002 fc67 	bl	800324c <Dmx::Dmx()>
 800097e:	4b5c      	ldr	r3, [pc, #368]	; (8000af0 <main+0x318>)
 8000980:	2202      	movs	r2, #2
 8000982:	a911      	add	r1, sp, #68	; 0x44
 8000984:	4628      	mov	r0, r5
 8000986:	f8c3 8000 	str.w	r8, [r3]
 800098a:	f002 fe79 	bl	8003680 <RDMDeviceResponder::RDMDeviceResponder(RDMPersonality**, unsigned int)>
 800098e:	2101      	movs	r1, #1
 8000990:	a8df      	add	r0, sp, #892	; 0x37c
 8000992:	f003 f860 	bl	8003a56 <RDMHandler::RDMHandler(bool)>
 8000996:	4b57      	ldr	r3, [pc, #348]	; (8000af4 <main+0x31c>)
 8000998:	93a5      	str	r3, [sp, #660]	; 0x294
 800099a:	4b57      	ldr	r3, [pc, #348]	; (8000af8 <main+0x320>)
 800099c:	4628      	mov	r0, r5
 800099e:	601d      	str	r5, [r3, #0]
 80009a0:	f002 febc 	bl	800371c <RDMDeviceResponder::Init()>
 80009a4:	a813      	add	r0, sp, #76	; 0x4c
 80009a6:	f006 fa5f 	bl	8006e68 <StoreRDMDevice::StoreRDMDevice()>
 80009aa:	a913      	add	r1, sp, #76	; 0x4c
 80009ac:	a84c      	add	r0, sp, #304	; 0x130
 80009ae:	f002 fdf5 	bl	800359c <RDMDeviceParams::RDMDeviceParams(RDMDeviceParamsStore*)>
 80009b2:	a84c      	add	r0, sp, #304	; 0x130
 80009b4:	f002 fe04 	bl	80035c0 <RDMDeviceParams::Load()>
 80009b8:	b130      	cbz	r0, 80009c8 <main+0x1f0>
 80009ba:	a84c      	add	r0, sp, #304	; 0x130
 80009bc:	a9a6      	add	r1, sp, #664	; 0x298
 80009be:	f002 fe0a 	bl	80035d6 <RDMDeviceParams::Set(RDMDevice*)>
 80009c2:	a84c      	add	r0, sp, #304	; 0x130
 80009c4:	f002 fe3e 	bl	8003644 <RDMDeviceParams::Dump()>
 80009c8:	ab14      	add	r3, sp, #80	; 0x50
 80009ca:	93c4      	str	r3, [sp, #784]	; 0x310
 80009cc:	2301      	movs	r3, #1
 80009ce:	461a      	mov	r2, r3
 80009d0:	2100      	movs	r1, #0
 80009d2:	a8d8      	add	r0, sp, #864	; 0x360
 80009d4:	f002 fc0c 	bl	80031f0 <Dmx::SetPortDirection(unsigned int, dmx::PortDirection, bool)>
 80009d8:	2e00      	cmp	r6, #0
 80009da:	f040 8147 	bne.w	8000c6c <main+0x494>
 80009de:	1e23      	subs	r3, r4, #0
 80009e0:	bf18      	it	ne
 80009e2:	2301      	movne	r3, #1
 80009e4:	f8df 8130 	ldr.w	r8, [pc, #304]	; 8000b18 <main+0x340>
 80009e8:	4628      	mov	r0, r5
 80009ea:	f888 3000 	strb.w	r3, [r8]
 80009ee:	f002 ff29 	bl	8003844 <RDMDeviceResponder::Print()>
 80009f2:	f898 1000 	ldrb.w	r1, [r8]
 80009f6:	4a41      	ldr	r2, [pc, #260]	; (8000afc <main+0x324>)
 80009f8:	4b41      	ldr	r3, [pc, #260]	; (8000b00 <main+0x328>)
 80009fa:	4842      	ldr	r0, [pc, #264]	; (8000b04 <main+0x32c>)
 80009fc:	2900      	cmp	r1, #0
 80009fe:	bf14      	ite	ne
 8000a00:	4611      	movne	r1, r2
 8000a02:	4619      	moveq	r1, r3
 8000a04:	f000 ff0e 	bl	8001824 <printf>
 8000a08:	2e00      	cmp	r6, #0
 8000a0a:	f040 814a 	bne.w	8000ca2 <main+0x4ca>
 8000a0e:	a88f      	add	r0, sp, #572	; 0x23c
 8000a10:	f004 f93a 	bl	8004c88 <PixelDmxConfiguration::Print()>
 8000a14:	b13c      	cbz	r4, 8000a26 <main+0x24e>
 8000a16:	4620      	mov	r0, r4
 8000a18:	f004 fd16 	bl	8005448 <PixelPatterns::GetName(pixelpatterns::Pattern)>
 8000a1c:	4622      	mov	r2, r4
 8000a1e:	4601      	mov	r1, r0
 8000a20:	4839      	ldr	r0, [pc, #228]	; (8000b08 <main+0x330>)
 8000a22:	f000 feff 	bl	8001824 <printf>
 8000a26:	4939      	ldr	r1, [pc, #228]	; (8000b0c <main+0x334>)
 8000a28:	a866      	add	r0, sp, #408	; 0x198
 8000a2a:	f005 fe23 	bl	8006674 <DisplayUdf::SetTitle(char const*, ...)>
 8000a2e:	2203      	movs	r2, #3
 8000a30:	2102      	movs	r1, #2
 8000a32:	a866      	add	r0, sp, #408	; 0x198
 8000a34:	f005 fe31 	bl	800669a <DisplayUdf::Set(unsigned char, displayudf::Labels)>
 8000a38:	220d      	movs	r2, #13
 8000a3a:	2106      	movs	r1, #6
 8000a3c:	a866      	add	r0, sp, #408	; 0x198
 8000a3e:	f005 fe2c 	bl	800669a <DisplayUdf::Set(unsigned char, displayudf::Labels)>
 8000a42:	9840      	ldr	r0, [sp, #256]	; 0x100
 8000a44:	f004 fc5a 	bl	80052fc <PixelType::GetType(pixel::Type)>
 8000a48:	9005      	str	r0, [sp, #20]
 8000a4a:	9842      	ldr	r0, [sp, #264]	; 0x108
 8000a4c:	f8dd 8104 	ldr.w	r8, [sp, #260]	; 0x104
 8000a50:	f8dd 9120 	ldr.w	r9, [sp, #288]	; 0x120
 8000a54:	f004 fc5e 	bl	8005314 <PixelType::GetMap(pixel::Map)>
 8000a58:	9b05      	ldr	r3, [sp, #20]
 8000a5a:	4a2d      	ldr	r2, [pc, #180]	; (8000b10 <main+0x338>)
 8000a5c:	f8cd 8000 	str.w	r8, [sp]
 8000a60:	2107      	movs	r1, #7
 8000a62:	e9cd 9001 	strd	r9, r0, [sp, #4]
 8000a66:	a866      	add	r0, sp, #408	; 0x198
 8000a68:	f7ff fe2f 	bl	80006ca <Display::Printf(unsigned char, char const*, ...)>
 8000a6c:	a80e      	add	r0, sp, #56	; 0x38
 8000a6e:	f006 f897 	bl	8006ba0 <StoreDisplayUdf::StoreDisplayUdf()>
 8000a72:	a90e      	add	r1, sp, #56	; 0x38
 8000a74:	a836      	add	r0, sp, #216	; 0xd8
 8000a76:	f005 fe7b 	bl	8006770 <DisplayUdfParams::DisplayUdfParams(DisplayUdfParamsStore*)>
 8000a7a:	a836      	add	r0, sp, #216	; 0xd8
 8000a7c:	f005 fe85 	bl	800678a <DisplayUdfParams::Load()>
 8000a80:	b130      	cbz	r0, 8000a90 <main+0x2b8>
 8000a82:	a836      	add	r0, sp, #216	; 0xd8
 8000a84:	a966      	add	r1, sp, #408	; 0x198
 8000a86:	f005 fe8c 	bl	80067a2 <DisplayUdfParams::Set(DisplayUdf*)>
 8000a8a:	a836      	add	r0, sp, #216	; 0xd8
 8000a8c:	f005 febc 	bl	8006808 <DisplayUdfParams::Dump()>
 8000a90:	a866      	add	r0, sp, #408	; 0x198
 8000a92:	f005 fe1b 	bl	80066cc <DisplayUdf::Show()>
 8000a96:	2e00      	cmp	r6, #0
 8000a98:	f000 80ea 	beq.w	8000c70 <main+0x498>
 8000a9c:	986c      	ldr	r0, [sp, #432]	; 0x1b0
 8000a9e:	2103      	movs	r1, #3
 8000aa0:	f7ff fde1 	bl	8000666 <Display::ClearLine(unsigned char) [clone .isra.0]>
 8000aa4:	986c      	ldr	r0, [sp, #432]	; 0x1b0
 8000aa6:	2104      	movs	r1, #4
 8000aa8:	f7ff fddd 	bl	8000666 <Display::ClearLine(unsigned char) [clone .isra.0]>
 8000aac:	986c      	ldr	r0, [sp, #432]	; 0x1b0
 8000aae:	2800      	cmp	r0, #0
 8000ab0:	d03a      	beq.n	8000b28 <main+0x350>
 8000ab2:	7904      	ldrb	r4, [r0, #4]
 8000ab4:	4917      	ldr	r1, [pc, #92]	; (8000b14 <main+0x33c>)
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	429c      	cmp	r4, r3
 8000aba:	f103 0301 	add.w	r3, r3, #1
 8000abe:	dd2d      	ble.n	8000b1c <main+0x344>
 8000ac0:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8000ac4:	2a00      	cmp	r2, #0
 8000ac6:	d1f7      	bne.n	8000ab8 <main+0x2e0>
 8000ac8:	e028      	b.n	8000b1c <main+0x344>
 8000aca:	bf00      	nop
 8000acc:	08009822 	stmdaeq	r0, {r1, r5, fp, ip, pc}
 8000ad0:	0800982b 	stmdaeq	r0, {r0, r1, r3, r5, fp, ip, pc}
 8000ad4:	080098d0 	stmdaeq	r0, {r4, r6, r7, fp, ip, pc}
 8000ad8:	080098d4 	stmdaeq	r0, {r2, r4, r6, r7, fp, ip, pc}
 8000adc:	40011000 	andmi	r1, r1, r0
 8000ae0:	080098c0 	stmdaeq	r0, {r6, r7, fp, ip, pc}
 8000ae4:	20000690 	mulcs	r0, r0, r6
 8000ae8:	08009837 	stmdaeq	r0, {r0, r1, r2, r4, r5, fp, ip, pc}
 8000aec:	08009846 	stmdaeq	r0, {r1, r2, r6, fp, ip, pc}
 8000af0:	20000208 	andcs	r0, r0, r8, lsl #4
 8000af4:	080098a8 	stmdaeq	r0, {r3, r5, r7, fp, ip, pc}
 8000af8:	200001f8 	strdcs	r0, [r0], -r8
 8000afc:	08009805 	stmdaeq	r0, {r0, r2, fp, ip, pc}
 8000b00:	0800980e 	stmdaeq	r0, {r1, r2, r3, fp, ip, pc}
 8000b04:	08009852 	stmdaeq	r0, {r1, r4, r6, fp, ip, pc}
 8000b08:	0800985e 	stmdaeq	r0, {r1, r2, r3, r4, r6, fp, ip, pc}
 8000b0c:	08009876 	stmdaeq	r0, {r1, r2, r4, r5, r6, fp, ip, pc}
 8000b10:	0800988c 	stmdaeq	r0, {r2, r3, r7, fp, ip, pc}
 8000b14:	08009816 	stmdaeq	r0, {r1, r2, r4, fp, ip, pc}
 8000b18:	2000020c 	andcs	r0, r0, ip, lsl #4
 8000b1c:	6802      	ldr	r2, [r0, #0]
 8000b1e:	b2db      	uxtb	r3, r3
 8000b20:	69d4      	ldr	r4, [r2, #28]
 8000b22:	4a6b      	ldr	r2, [pc, #428]	; (8000cd0 <main+0x4f8>)
 8000b24:	2104      	movs	r1, #4
 8000b26:	47a0      	blx	r4
 8000b28:	986c      	ldr	r0, [sp, #432]	; 0x1b0
 8000b2a:	2105      	movs	r1, #5
 8000b2c:	f7ff fd9b 	bl	8000666 <Display::ClearLine(unsigned char) [clone .isra.0]>
 8000b30:	2102      	movs	r1, #2
 8000b32:	a821      	add	r0, sp, #132	; 0x84
 8000b34:	f006 fe8c 	bl	8007850 <LedBlink::SetMode(ledblink::Mode)>
 8000b38:	2102      	movs	r1, #2
 8000b3a:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8000b3e:	f007 fc93 	bl	8008468 <fwdgt_config>
 8000b42:	2801      	cmp	r0, #1
 8000b44:	bf0c      	ite	eq
 8000b46:	2301      	moveq	r3, #1
 8000b48:	2300      	movne	r3, #0
 8000b4a:	f88d 3060 	strb.w	r3, [sp, #96]	; 0x60
 8000b4e:	d101      	bne.n	8000b54 <main+0x37c>
 8000b50:	f007 fc7a 	bl	8008448 <fwdgt_enable>
 8000b54:	4e5f      	ldr	r6, [pc, #380]	; (8000cd4 <main+0x4fc>)
 8000b56:	4c60      	ldr	r4, [pc, #384]	; (8000cd8 <main+0x500>)
 8000b58:	f007 fc7e 	bl	8008458 <fwdgt_counter_reload>
 8000b5c:	4628      	mov	r0, r5
 8000b5e:	f001 f86d 	bl	8001c3c <RDMResponder::Run()>
 8000b62:	a808      	add	r0, sp, #32
 8000b64:	f005 ff9a 	bl	8006a9c <ConfigStore::Flash()>
 8000b68:	6833      	ldr	r3, [r6, #0]
 8000b6a:	b113      	cbz	r3, 8000b72 <main+0x39a>
 8000b6c:	a807      	add	r0, sp, #28
 8000b6e:	f004 fe8b 	bl	8005888 <PixelPatterns::Run()>
 8000b72:	9a6b      	ldr	r2, [sp, #428]	; 0x1ac
 8000b74:	b16a      	cbz	r2, 8000b92 <main+0x3ba>
 8000b76:	f89d 31a8 	ldrb.w	r3, [sp, #424]	; 0x1a8
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	f040 808a 	bne.w	8000c94 <main+0x4bc>
 8000b80:	6823      	ldr	r3, [r4, #0]
 8000b82:	9967      	ldr	r1, [sp, #412]	; 0x19c
 8000b84:	1a5b      	subs	r3, r3, r1
 8000b86:	429a      	cmp	r2, r3
 8000b88:	d203      	bcs.n	8000b92 <main+0x3ba>
 8000b8a:	2101      	movs	r1, #1
 8000b8c:	a866      	add	r0, sp, #408	; 0x198
 8000b8e:	f7ff fdb9 	bl	8000704 <Display::SetSleep(bool)>
 8000b92:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8000b94:	2a00      	cmp	r2, #0
 8000b96:	d0df      	beq.n	8000b58 <main+0x380>
 8000b98:	6823      	ldr	r3, [r4, #0]
 8000b9a:	9926      	ldr	r1, [sp, #152]	; 0x98
 8000b9c:	1a5b      	subs	r3, r3, r1
 8000b9e:	429a      	cmp	r2, r3
 8000ba0:	d8da      	bhi.n	8000b58 <main+0x380>
 8000ba2:	6823      	ldr	r3, [r4, #0]
 8000ba4:	9326      	str	r3, [sp, #152]	; 0x98
 8000ba6:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8000ba8:	2b01      	cmp	r3, #1
 8000baa:	f083 0201 	eor.w	r2, r3, #1
 8000bae:	bf18      	it	ne
 8000bb0:	2301      	movne	r3, #1
 8000bb2:	9225      	str	r2, [sp, #148]	; 0x94
 8000bb4:	bf14      	ite	ne
 8000bb6:	613b      	strne	r3, [r7, #16]
 8000bb8:	617b      	streq	r3, [r7, #20]
 8000bba:	e7cd      	b.n	8000b58 <main+0x380>
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	2264      	movs	r2, #100	; 0x64
 8000bc0:	4619      	mov	r1, r3
 8000bc2:	a807      	add	r0, sp, #28
 8000bc4:	f004 fc4c 	bl	8005460 <PixelPatterns::RainbowCycle(unsigned int, unsigned int, pixelpatterns::Direction)>
 8000bc8:	e687      	b.n	80008da <main+0x102>
 8000bca:	2200      	movs	r2, #0
 8000bcc:	2364      	movs	r3, #100	; 0x64
 8000bce:	e9cd 3200 	strd	r3, r2, [sp]
 8000bd2:	4611      	mov	r1, r2
 8000bd4:	4b41      	ldr	r3, [pc, #260]	; (8000cdc <main+0x504>)
 8000bd6:	a807      	add	r0, sp, #28
 8000bd8:	f004 fc56 	bl	8005488 <PixelPatterns::TheaterChase(unsigned int, unsigned int, unsigned int, unsigned int, pixelpatterns::Direction)>
 8000bdc:	e67d      	b.n	80008da <main+0x102>
 8000bde:	2100      	movs	r1, #0
 8000be0:	4a3e      	ldr	r2, [pc, #248]	; (8000cdc <main+0x504>)
 8000be2:	9100      	str	r1, [sp, #0]
 8000be4:	2364      	movs	r3, #100	; 0x64
 8000be6:	a807      	add	r0, sp, #28
 8000be8:	f004 fc6a 	bl	80054c0 <PixelPatterns::ColourWipe(unsigned int, unsigned int, unsigned int, pixelpatterns::Direction)>
 8000bec:	e675      	b.n	80008da <main+0x102>
 8000bee:	2364      	movs	r3, #100	; 0x64
 8000bf0:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 8000bf4:	2100      	movs	r1, #0
 8000bf6:	a807      	add	r0, sp, #28
 8000bf8:	f004 fc7c 	bl	80054f4 <PixelPatterns::Scanner(unsigned int, unsigned int, unsigned int)>
 8000bfc:	e66d      	b.n	80008da <main+0x102>
 8000bfe:	2200      	movs	r2, #0
 8000c00:	2364      	movs	r3, #100	; 0x64
 8000c02:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8000c06:	230a      	movs	r3, #10
 8000c08:	9300      	str	r3, [sp, #0]
 8000c0a:	4611      	mov	r1, r2
 8000c0c:	4b33      	ldr	r3, [pc, #204]	; (8000cdc <main+0x504>)
 8000c0e:	a807      	add	r0, sp, #28
 8000c10:	f004 fca2 	bl	8005558 <PixelPatterns::Fade(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, pixelpatterns::Direction)>
 8000c14:	e661      	b.n	80008da <main+0x102>
 8000c16:	4b32      	ldr	r3, [pc, #200]	; (8000ce0 <main+0x508>)
 8000c18:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8000cf0 <main+0x518>
 8000c1c:	f8df b0c4 	ldr.w	fp, [pc, #196]	; 8000ce4 <main+0x50c>
 8000c20:	2500      	movs	r5, #0
 8000c22:	61dd      	str	r5, [r3, #28]
 8000c24:	46a8      	mov	r8, r5
 8000c26:	f8da 3000 	ldr.w	r3, [sl]
 8000c2a:	429d      	cmp	r5, r3
 8000c2c:	d308      	bcc.n	8000c40 <main+0x468>
 8000c2e:	f008 faa5 	bl	800917c <gd32_spi_dma_tx_is_active()>
 8000c32:	2800      	cmp	r0, #0
 8000c34:	d1fb      	bne.n	8000c2e <main+0x456>
 8000c36:	4b2b      	ldr	r3, [pc, #172]	; (8000ce4 <main+0x50c>)
 8000c38:	6818      	ldr	r0, [r3, #0]
 8000c3a:	f005 fc35 	bl	80064a8 <WS28xx::Update()>
 8000c3e:	e64c      	b.n	80008da <main+0x102>
 8000c40:	f8db 0000 	ldr.w	r0, [fp]
 8000c44:	6803      	ldr	r3, [r0, #0]
 8000c46:	2b07      	cmp	r3, #7
 8000c48:	d008      	beq.n	8000c5c <main+0x484>
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	f8cd 8000 	str.w	r8, [sp]
 8000c50:	461a      	mov	r2, r3
 8000c52:	4629      	mov	r1, r5
 8000c54:	f004 fe40 	bl	80058d8 <WS28xx::SetPixel(unsigned int, unsigned char, unsigned char, unsigned char)>
 8000c58:	3501      	adds	r5, #1
 8000c5a:	e7e4      	b.n	8000c26 <main+0x44e>
 8000c5c:	2300      	movs	r3, #0
 8000c5e:	e9cd 8800 	strd	r8, r8, [sp]
 8000c62:	461a      	mov	r2, r3
 8000c64:	4629      	mov	r1, r5
 8000c66:	f005 fab1 	bl	80061cc <WS28xx::SetPixel(unsigned int, unsigned char, unsigned char, unsigned char, unsigned char)>
 8000c6a:	e7f5      	b.n	8000c58 <main+0x480>
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	e6b9      	b.n	80009e4 <main+0x20c>
 8000c70:	2c00      	cmp	r4, #0
 8000c72:	f43f af5d 	beq.w	8000b30 <main+0x358>
 8000c76:	986c      	ldr	r0, [sp, #432]	; 0x1b0
 8000c78:	2106      	movs	r1, #6
 8000c7a:	f7ff fcf4 	bl	8000666 <Display::ClearLine(unsigned char) [clone .isra.0]>
 8000c7e:	4620      	mov	r0, r4
 8000c80:	f004 fbe2 	bl	8005448 <PixelPatterns::GetName(pixelpatterns::Pattern)>
 8000c84:	4a18      	ldr	r2, [pc, #96]	; (8000ce8 <main+0x510>)
 8000c86:	9400      	str	r4, [sp, #0]
 8000c88:	4603      	mov	r3, r0
 8000c8a:	2106      	movs	r1, #6
 8000c8c:	a866      	add	r0, sp, #408	; 0x198
 8000c8e:	f7ff fd1c 	bl	80006ca <Display::Printf(unsigned char, char const*, ...)>
 8000c92:	e74d      	b.n	8000b30 <main+0x358>
 8000c94:	f7ff fd7a 	bl	800078c <display::timeout::gpio_renew()>
 8000c98:	2800      	cmp	r0, #0
 8000c9a:	f43f af7a 	beq.w	8000b92 <main+0x3ba>
 8000c9e:	2100      	movs	r1, #0
 8000ca0:	e774      	b.n	8000b8c <main+0x3b4>
 8000ca2:	4812      	ldr	r0, [pc, #72]	; (8000cec <main+0x514>)
 8000ca4:	f000 fdf6 	bl	8001894 <puts>
 8000ca8:	e6bd      	b.n	8000a26 <main+0x24e>
 8000caa:	2c05      	cmp	r4, #5
 8000cac:	f63f ae15 	bhi.w	80008da <main+0x102>
 8000cb0:	a301      	add	r3, pc, #4	; (adr r3, 8000cb8 <main+0x4e0>)
 8000cb2:	f853 f024 	ldr.w	pc, [r3, r4, lsl #2]
 8000cb6:	bf00      	nop
 8000cb8:	08000c17 	stmdaeq	r0, {r0, r1, r2, r4, sl, fp}
 8000cbc:	08000bbd 	stmdaeq	r0, {r0, r2, r3, r4, r5, r7, r8, r9, fp}
 8000cc0:	08000bcb 	stmdaeq	r0, {r0, r1, r3, r6, r7, r8, r9, fp}
 8000cc4:	08000bdf 	stmdaeq	r0, {r0, r1, r2, r3, r4, r6, r7, r8, r9, fp}
 8000cc8:	08000bef 	stmdaeq	r0, {r0, r1, r2, r3, r5, r6, r7, r8, r9, fp}
 8000ccc:	08000bff 	stmdaeq	r0, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, fp}
 8000cd0:	08009816 	stmdaeq	r0, {r1, r2, r4, fp, ip, pc}
 8000cd4:	20000690 	mulcs	r0, r0, r6
 8000cd8:	2000181c 	andcs	r1, r0, ip, lsl r8
 8000cdc:	00646464 	rsbeq	r6, r4, r4, ror #8
 8000ce0:	2000065c 	andcs	r0, r0, ip, asr r6
 8000ce4:	20000688 	andcs	r0, r0, r8, lsl #13
 8000ce8:	08009899 	stmdaeq	r0, {r0, r3, r4, r7, fp, ip, pc}
 8000cec:	08009846 	stmdaeq	r0, {r1, r2, r6, fp, ip, pc}
 8000cf0:	20000684 	andcs	r0, r0, r4, lsl #13

08000cf4 <Display::ClearLine(unsigned char) [clone .isra.0]>:
 8000cf4:	b110      	cbz	r0, 8000cfc <Display::ClearLine(unsigned char) [clone .isra.0]+0x8>
 8000cf6:	6803      	ldr	r3, [r0, #0]
 8000cf8:	691b      	ldr	r3, [r3, #16]
 8000cfa:	4718      	bx	r3
 8000cfc:	4770      	bx	lr

08000cfe <Display::TextStatus(char const*)>:
 8000cfe:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8000d02:	4604      	mov	r4, r0
 8000d04:	6980      	ldr	r0, [r0, #24]
 8000d06:	460d      	mov	r5, r1
 8000d08:	2800      	cmp	r0, #0
 8000d0a:	d032      	beq.n	8000d72 <Display::TextStatus(char const*)+0x74>
 8000d0c:	7946      	ldrb	r6, [r0, #5]
 8000d0e:	6803      	ldr	r3, [r0, #0]
 8000d10:	f890 8004 	ldrb.w	r8, [r0, #4]
 8000d14:	6a1b      	ldr	r3, [r3, #32]
 8000d16:	1e72      	subs	r2, r6, #1
 8000d18:	b2d2      	uxtb	r2, r2
 8000d1a:	9201      	str	r2, [sp, #4]
 8000d1c:	2100      	movs	r1, #0
 8000d1e:	4798      	blx	r3
 8000d20:	9a01      	ldr	r2, [sp, #4]
 8000d22:	2700      	movs	r7, #0
 8000d24:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 8000d28:	45b8      	cmp	r8, r7
 8000d2a:	69a0      	ldr	r0, [r4, #24]
 8000d2c:	d818      	bhi.n	8000d60 <Display::TextStatus(char const*)+0x62>
 8000d2e:	b118      	cbz	r0, 8000d38 <Display::TextStatus(char const*)+0x3a>
 8000d30:	6803      	ldr	r3, [r0, #0]
 8000d32:	2100      	movs	r1, #0
 8000d34:	6a1b      	ldr	r3, [r3, #32]
 8000d36:	4798      	blx	r3
 8000d38:	69a0      	ldr	r0, [r4, #24]
 8000d3a:	b1d0      	cbz	r0, 8000d72 <Display::TextStatus(char const*)+0x74>
 8000d3c:	7901      	ldrb	r1, [r0, #4]
 8000d3e:	2300      	movs	r3, #0
 8000d40:	5cea      	ldrb	r2, [r5, r3]
 8000d42:	b11a      	cbz	r2, 8000d4c <Display::TextStatus(char const*)+0x4e>
 8000d44:	1c5a      	adds	r2, r3, #1
 8000d46:	4299      	cmp	r1, r3
 8000d48:	4613      	mov	r3, r2
 8000d4a:	dcf9      	bgt.n	8000d40 <Display::TextStatus(char const*)+0x42>
 8000d4c:	6802      	ldr	r2, [r0, #0]
 8000d4e:	69d4      	ldr	r4, [r2, #28]
 8000d50:	b2db      	uxtb	r3, r3
 8000d52:	462a      	mov	r2, r5
 8000d54:	4631      	mov	r1, r6
 8000d56:	46a4      	mov	ip, r4
 8000d58:	b002      	add	sp, #8
 8000d5a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8000d5e:	4760      	bx	ip
 8000d60:	b128      	cbz	r0, 8000d6e <Display::TextStatus(char const*)+0x70>
 8000d62:	6803      	ldr	r3, [r0, #0]
 8000d64:	9201      	str	r2, [sp, #4]
 8000d66:	695b      	ldr	r3, [r3, #20]
 8000d68:	2120      	movs	r1, #32
 8000d6a:	4798      	blx	r3
 8000d6c:	9a01      	ldr	r2, [sp, #4]
 8000d6e:	3701      	adds	r7, #1
 8000d70:	e7da      	b.n	8000d28 <Display::TextStatus(char const*)+0x2a>
 8000d72:	b002      	add	sp, #8
 8000d74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08000d78 <PixelDmxParamsRdm::Display(unsigned char const*)>:
 8000d78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000d7c:	4d1f      	ldr	r5, [pc, #124]	; (8000dfc <PixelDmxParamsRdm::Display(unsigned char const*)+0x84>)
 8000d7e:	7908      	ldrb	r0, [r1, #4]
 8000d80:	682e      	ldr	r6, [r5, #0]
 8000d82:	b086      	sub	sp, #24
 8000d84:	460c      	mov	r4, r1
 8000d86:	bb30      	cbnz	r0, 8000dd6 <PixelDmxParamsRdm::Display(unsigned char const*)+0x5e>
 8000d88:	69b0      	ldr	r0, [r6, #24]
 8000d8a:	2106      	movs	r1, #6
 8000d8c:	f7ff ffb2 	bl	8000cf4 <Display::ClearLine(unsigned char) [clone .isra.0]>
 8000d90:	7820      	ldrb	r0, [r4, #0]
 8000d92:	682e      	ldr	r6, [r5, #0]
 8000d94:	f004 fab2 	bl	80052fc <PixelType::GetType(pixel::Type)>
 8000d98:	9005      	str	r0, [sp, #20]
 8000d9a:	78e0      	ldrb	r0, [r4, #3]
 8000d9c:	7867      	ldrb	r7, [r4, #1]
 8000d9e:	f894 8002 	ldrb.w	r8, [r4, #2]
 8000da2:	f004 fab7 	bl	8005314 <PixelType::GetMap(pixel::Map)>
 8000da6:	9b05      	ldr	r3, [sp, #20]
 8000da8:	4a15      	ldr	r2, [pc, #84]	; (8000e00 <PixelDmxParamsRdm::Display(unsigned char const*)+0x88>)
 8000daa:	9700      	str	r7, [sp, #0]
 8000dac:	e9cd 8001 	strd	r8, r0, [sp, #4]
 8000db0:	2107      	movs	r1, #7
 8000db2:	4630      	mov	r0, r6
 8000db4:	f7ff fc89 	bl	80006ca <Display::Printf(unsigned char, char const*, ...)>
 8000db8:	7963      	ldrb	r3, [r4, #5]
 8000dba:	2bff      	cmp	r3, #255	; 0xff
 8000dbc:	4b11      	ldr	r3, [pc, #68]	; (8000e04 <PixelDmxParamsRdm::Display(unsigned char const*)+0x8c>)
 8000dbe:	d113      	bne.n	8000de8 <PixelDmxParamsRdm::Display(unsigned char const*)+0x70>
 8000dc0:	781a      	ldrb	r2, [r3, #0]
 8000dc2:	b92a      	cbnz	r2, 8000dd0 <PixelDmxParamsRdm::Display(unsigned char const*)+0x58>
 8000dc4:	2201      	movs	r2, #1
 8000dc6:	4910      	ldr	r1, [pc, #64]	; (8000e08 <PixelDmxParamsRdm::Display(unsigned char const*)+0x90>)
 8000dc8:	6828      	ldr	r0, [r5, #0]
 8000dca:	701a      	strb	r2, [r3, #0]
 8000dcc:	f7ff ff97 	bl	8000cfe <Display::TextStatus(char const*)>
 8000dd0:	b006      	add	sp, #24
 8000dd2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000dd6:	f004 fb37 	bl	8005448 <PixelPatterns::GetName(pixelpatterns::Pattern)>
 8000dda:	4a0c      	ldr	r2, [pc, #48]	; (8000e0c <PixelDmxParamsRdm::Display(unsigned char const*)+0x94>)
 8000ddc:	4603      	mov	r3, r0
 8000dde:	2106      	movs	r1, #6
 8000de0:	4630      	mov	r0, r6
 8000de2:	f7ff fc72 	bl	80006ca <Display::Printf(unsigned char, char const*, ...)>
 8000de6:	e7d3      	b.n	8000d90 <PixelDmxParamsRdm::Display(unsigned char const*)+0x18>
 8000de8:	2200      	movs	r2, #0
 8000dea:	701a      	strb	r2, [r3, #0]
 8000dec:	682b      	ldr	r3, [r5, #0]
 8000dee:	6998      	ldr	r0, [r3, #24]
 8000df0:	2108      	movs	r1, #8
 8000df2:	b006      	add	sp, #24
 8000df4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8000df8:	f7ff bf7c 	b.w	8000cf4 <Display::ClearLine(unsigned char) [clone .isra.0]>
 8000dfc:	200006a0 	andcs	r0, r0, r0, lsr #13
 8000e00:	080099da 	stmdaeq	r0, {r1, r3, r4, r6, r7, r8, fp, ip, pc}
 8000e04:	200000e8 	andcs	r0, r0, r8, ror #1
 8000e08:	080099ef 	stmdaeq	r0, {r0, r1, r2, r3, r5, r6, r7, r8, fp, ip, pc}
 8000e0c:	080099d4 	stmdaeq	r0, {r2, r4, r6, r7, r8, fp, ip, pc}

08000e10 <RDMResponder::DmxStartAddressUpdate(unsigned short)>:
 8000e10:	4b01      	ldr	r3, [pc, #4]	; (8000e18 <RDMResponder::DmxStartAddressUpdate(unsigned short)+0x8>)
 8000e12:	6818      	ldr	r0, [r3, #0]
 8000e14:	f005 bc5a 	b.w	80066cc <DisplayUdf::Show()>
 8000e18:	200006a0 	andcs	r0, r0, r0, lsr #13

08000e1c <rdm::device::responder::factorydefaults()>:
 8000e1c:	4b02      	ldr	r3, [pc, #8]	; (8000e28 <rdm::device::responder::factorydefaults()+0xc>)
 8000e1e:	210b      	movs	r1, #11
 8000e20:	6818      	ldr	r0, [r3, #0]
 8000e22:	f005 bdb7 	b.w	8006994 <ConfigStore::ResetSetList(configstore::Store)>
 8000e26:	bf00      	nop
 8000e28:	200016b8 			; <UNDEFINED> instruction: 0x200016b8

08000e2c <Display::ClearLine(unsigned char) [clone .isra.0]>:
 8000e2c:	b110      	cbz	r0, 8000e34 <Display::ClearLine(unsigned char) [clone .isra.0]+0x8>
 8000e2e:	6803      	ldr	r3, [r0, #0]
 8000e30:	691b      	ldr	r3, [r3, #16]
 8000e32:	4718      	bx	r3
 8000e34:	4770      	bx	lr
	...

08000e38 <RDMResponder::PersonalityUpdate(unsigned int)>:
 8000e38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000e3c:	4c30      	ldr	r4, [pc, #192]	; (8000f00 <RDMResponder::PersonalityUpdate(unsigned int)+0xc8>)
 8000e3e:	4e31      	ldr	r6, [pc, #196]	; (8000f04 <RDMResponder::PersonalityUpdate(unsigned int)+0xcc>)
 8000e40:	6823      	ldr	r3, [r4, #0]
 8000e42:	b086      	sub	sp, #24
 8000e44:	6998      	ldr	r0, [r3, #24]
 8000e46:	460d      	mov	r5, r1
 8000e48:	2107      	movs	r1, #7
 8000e4a:	f7ff ffef 	bl	8000e2c <Display::ClearLine(unsigned char) [clone .isra.0]>
 8000e4e:	6833      	ldr	r3, [r6, #0]
 8000e50:	6827      	ldr	r7, [r4, #0]
 8000e52:	6858      	ldr	r0, [r3, #4]
 8000e54:	f004 fa52 	bl	80052fc <PixelType::GetType(pixel::Type)>
 8000e58:	6832      	ldr	r2, [r6, #0]
 8000e5a:	9005      	str	r0, [sp, #20]
 8000e5c:	68d0      	ldr	r0, [r2, #12]
 8000e5e:	6896      	ldr	r6, [r2, #8]
 8000e60:	f8d2 8024 	ldr.w	r8, [r2, #36]	; 0x24
 8000e64:	f004 fa56 	bl	8005314 <PixelType::GetMap(pixel::Map)>
 8000e68:	9b05      	ldr	r3, [sp, #20]
 8000e6a:	4a27      	ldr	r2, [pc, #156]	; (8000f08 <RDMResponder::PersonalityUpdate(unsigned int)+0xd0>)
 8000e6c:	9600      	str	r6, [sp, #0]
 8000e6e:	e9cd 8001 	strd	r8, r0, [sp, #4]
 8000e72:	2107      	movs	r1, #7
 8000e74:	4638      	mov	r0, r7
 8000e76:	f7ff fc28 	bl	80006ca <Display::Printf(unsigned char, char const*, ...)>
 8000e7a:	6820      	ldr	r0, [r4, #0]
 8000e7c:	f005 fc26 	bl	80066cc <DisplayUdf::Show()>
 8000e80:	2d01      	cmp	r5, #1
 8000e82:	d115      	bne.n	8000eb0 <RDMResponder::PersonalityUpdate(unsigned int)+0x78>
 8000e84:	4b21      	ldr	r3, [pc, #132]	; (8000f0c <RDMResponder::PersonalityUpdate(unsigned int)+0xd4>)
 8000e86:	681d      	ldr	r5, [r3, #0]
 8000e88:	b17d      	cbz	r5, 8000eaa <RDMResponder::PersonalityUpdate(unsigned int)+0x72>
 8000e8a:	6823      	ldr	r3, [r4, #0]
 8000e8c:	2106      	movs	r1, #6
 8000e8e:	6998      	ldr	r0, [r3, #24]
 8000e90:	f7ff ffcc 	bl	8000e2c <Display::ClearLine(unsigned char) [clone .isra.0]>
 8000e94:	4628      	mov	r0, r5
 8000e96:	6824      	ldr	r4, [r4, #0]
 8000e98:	f004 fad6 	bl	8005448 <PixelPatterns::GetName(pixelpatterns::Pattern)>
 8000e9c:	4a1c      	ldr	r2, [pc, #112]	; (8000f10 <RDMResponder::PersonalityUpdate(unsigned int)+0xd8>)
 8000e9e:	9500      	str	r5, [sp, #0]
 8000ea0:	4603      	mov	r3, r0
 8000ea2:	2106      	movs	r1, #6
 8000ea4:	4620      	mov	r0, r4
 8000ea6:	f7ff fc10 	bl	80006ca <Display::Printf(unsigned char, char const*, ...)>
 8000eaa:	b006      	add	sp, #24
 8000eac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000eb0:	2d02      	cmp	r5, #2
 8000eb2:	d1fa      	bne.n	8000eaa <RDMResponder::PersonalityUpdate(unsigned int)+0x72>
 8000eb4:	6823      	ldr	r3, [r4, #0]
 8000eb6:	2103      	movs	r1, #3
 8000eb8:	6998      	ldr	r0, [r3, #24]
 8000eba:	f7ff ffb7 	bl	8000e2c <Display::ClearLine(unsigned char) [clone .isra.0]>
 8000ebe:	6823      	ldr	r3, [r4, #0]
 8000ec0:	2104      	movs	r1, #4
 8000ec2:	6998      	ldr	r0, [r3, #24]
 8000ec4:	f7ff ffb2 	bl	8000e2c <Display::ClearLine(unsigned char) [clone .isra.0]>
 8000ec8:	6823      	ldr	r3, [r4, #0]
 8000eca:	6998      	ldr	r0, [r3, #24]
 8000ecc:	b180      	cbz	r0, 8000ef0 <RDMResponder::PersonalityUpdate(unsigned int)+0xb8>
 8000ece:	7905      	ldrb	r5, [r0, #4]
 8000ed0:	4910      	ldr	r1, [pc, #64]	; (8000f14 <RDMResponder::PersonalityUpdate(unsigned int)+0xdc>)
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	42ab      	cmp	r3, r5
 8000ed6:	f103 0301 	add.w	r3, r3, #1
 8000eda:	da03      	bge.n	8000ee4 <RDMResponder::PersonalityUpdate(unsigned int)+0xac>
 8000edc:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8000ee0:	2a00      	cmp	r2, #0
 8000ee2:	d1f7      	bne.n	8000ed4 <RDMResponder::PersonalityUpdate(unsigned int)+0x9c>
 8000ee4:	6802      	ldr	r2, [r0, #0]
 8000ee6:	b2db      	uxtb	r3, r3
 8000ee8:	69d5      	ldr	r5, [r2, #28]
 8000eea:	4a0a      	ldr	r2, [pc, #40]	; (8000f14 <RDMResponder::PersonalityUpdate(unsigned int)+0xdc>)
 8000eec:	2104      	movs	r1, #4
 8000eee:	47a8      	blx	r5
 8000ef0:	6823      	ldr	r3, [r4, #0]
 8000ef2:	6998      	ldr	r0, [r3, #24]
 8000ef4:	2105      	movs	r1, #5
 8000ef6:	b006      	add	sp, #24
 8000ef8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8000efc:	f7ff bf96 	b.w	8000e2c <Display::ClearLine(unsigned char) [clone .isra.0]>
 8000f00:	200006a0 	andcs	r0, r0, r0, lsr #13
 8000f04:	20000650 	andcs	r0, r0, r0, asr r6
 8000f08:	0800988c 	stmdaeq	r0, {r2, r3, r7, fp, ip, pc}
 8000f0c:	20000690 	mulcs	r0, r0, r6
 8000f10:	08009899 	stmdaeq	r0, {r0, r3, r4, r7, fp, ip, pc}
 8000f14:	08009816 	stmdaeq	r0, {r1, r2, r4, fp, ip, pc}

08000f18 <PixelTestPattern::SetPattern(pixelpatterns::Pattern)>:
 8000f18:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000f1a:	2905      	cmp	r1, #5
 8000f1c:	b085      	sub	sp, #20
 8000f1e:	dc57      	bgt.n	8000fd0 <PixelTestPattern::SetPattern(pixelpatterns::Pattern)+0xb8>
 8000f20:	4b2d      	ldr	r3, [pc, #180]	; (8000fd8 <PixelTestPattern::SetPattern(pixelpatterns::Pattern)+0xc0>)
 8000f22:	6019      	str	r1, [r3, #0]
 8000f24:	2905      	cmp	r1, #5
 8000f26:	d809      	bhi.n	8000f3c <PixelTestPattern::SetPattern(pixelpatterns::Pattern)+0x24>
 8000f28:	e8df f001 	tbb	[pc, r1]
 8000f2c:	130a032c 	movwne	r0, #41772	; 0xa32c
 8000f30:	2300211a 	movwcs	r2, #282	; 0x11a
 8000f34:	2264      	movs	r2, #100	; 0x64
 8000f36:	4619      	mov	r1, r3
 8000f38:	f004 fa92 	bl	8005460 <PixelPatterns::RainbowCycle(unsigned int, unsigned int, pixelpatterns::Direction)>
 8000f3c:	2001      	movs	r0, #1
 8000f3e:	e048      	b.n	8000fd2 <PixelTestPattern::SetPattern(pixelpatterns::Pattern)+0xba>
 8000f40:	2200      	movs	r2, #0
 8000f42:	2364      	movs	r3, #100	; 0x64
 8000f44:	e9cd 3200 	strd	r3, r2, [sp]
 8000f48:	4611      	mov	r1, r2
 8000f4a:	4b24      	ldr	r3, [pc, #144]	; (8000fdc <PixelTestPattern::SetPattern(pixelpatterns::Pattern)+0xc4>)
 8000f4c:	f004 fa9c 	bl	8005488 <PixelPatterns::TheaterChase(unsigned int, unsigned int, unsigned int, unsigned int, pixelpatterns::Direction)>
 8000f50:	e7f4      	b.n	8000f3c <PixelTestPattern::SetPattern(pixelpatterns::Pattern)+0x24>
 8000f52:	2100      	movs	r1, #0
 8000f54:	4a21      	ldr	r2, [pc, #132]	; (8000fdc <PixelTestPattern::SetPattern(pixelpatterns::Pattern)+0xc4>)
 8000f56:	9100      	str	r1, [sp, #0]
 8000f58:	2364      	movs	r3, #100	; 0x64
 8000f5a:	f004 fab1 	bl	80054c0 <PixelPatterns::ColourWipe(unsigned int, unsigned int, unsigned int, pixelpatterns::Direction)>
 8000f5e:	e7ed      	b.n	8000f3c <PixelTestPattern::SetPattern(pixelpatterns::Pattern)+0x24>
 8000f60:	2364      	movs	r3, #100	; 0x64
 8000f62:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 8000f66:	2100      	movs	r1, #0
 8000f68:	f004 fac4 	bl	80054f4 <PixelPatterns::Scanner(unsigned int, unsigned int, unsigned int)>
 8000f6c:	e7e6      	b.n	8000f3c <PixelTestPattern::SetPattern(pixelpatterns::Pattern)+0x24>
 8000f6e:	2200      	movs	r2, #0
 8000f70:	2364      	movs	r3, #100	; 0x64
 8000f72:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8000f76:	230a      	movs	r3, #10
 8000f78:	9300      	str	r3, [sp, #0]
 8000f7a:	4611      	mov	r1, r2
 8000f7c:	4b17      	ldr	r3, [pc, #92]	; (8000fdc <PixelTestPattern::SetPattern(pixelpatterns::Pattern)+0xc4>)
 8000f7e:	f004 faeb 	bl	8005558 <PixelPatterns::Fade(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, pixelpatterns::Direction)>
 8000f82:	e7db      	b.n	8000f3c <PixelTestPattern::SetPattern(pixelpatterns::Pattern)+0x24>
 8000f84:	4b16      	ldr	r3, [pc, #88]	; (8000fe0 <PixelTestPattern::SetPattern(pixelpatterns::Pattern)+0xc8>)
 8000f86:	4e17      	ldr	r6, [pc, #92]	; (8000fe4 <PixelTestPattern::SetPattern(pixelpatterns::Pattern)+0xcc>)
 8000f88:	4f17      	ldr	r7, [pc, #92]	; (8000fe8 <PixelTestPattern::SetPattern(pixelpatterns::Pattern)+0xd0>)
 8000f8a:	2400      	movs	r4, #0
 8000f8c:	61dc      	str	r4, [r3, #28]
 8000f8e:	4625      	mov	r5, r4
 8000f90:	6833      	ldr	r3, [r6, #0]
 8000f92:	429c      	cmp	r4, r3
 8000f94:	d308      	bcc.n	8000fa8 <PixelTestPattern::SetPattern(pixelpatterns::Pattern)+0x90>
 8000f96:	f008 f8f1 	bl	800917c <gd32_spi_dma_tx_is_active()>
 8000f9a:	2800      	cmp	r0, #0
 8000f9c:	d1fb      	bne.n	8000f96 <PixelTestPattern::SetPattern(pixelpatterns::Pattern)+0x7e>
 8000f9e:	4b12      	ldr	r3, [pc, #72]	; (8000fe8 <PixelTestPattern::SetPattern(pixelpatterns::Pattern)+0xd0>)
 8000fa0:	6818      	ldr	r0, [r3, #0]
 8000fa2:	f005 fa81 	bl	80064a8 <WS28xx::Update()>
 8000fa6:	e7c9      	b.n	8000f3c <PixelTestPattern::SetPattern(pixelpatterns::Pattern)+0x24>
 8000fa8:	6838      	ldr	r0, [r7, #0]
 8000faa:	6803      	ldr	r3, [r0, #0]
 8000fac:	2b07      	cmp	r3, #7
 8000fae:	d007      	beq.n	8000fc0 <PixelTestPattern::SetPattern(pixelpatterns::Pattern)+0xa8>
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	9500      	str	r5, [sp, #0]
 8000fb4:	461a      	mov	r2, r3
 8000fb6:	4621      	mov	r1, r4
 8000fb8:	f004 fc8e 	bl	80058d8 <WS28xx::SetPixel(unsigned int, unsigned char, unsigned char, unsigned char)>
 8000fbc:	3401      	adds	r4, #1
 8000fbe:	e7e7      	b.n	8000f90 <PixelTestPattern::SetPattern(pixelpatterns::Pattern)+0x78>
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	e9cd 5500 	strd	r5, r5, [sp]
 8000fc6:	461a      	mov	r2, r3
 8000fc8:	4621      	mov	r1, r4
 8000fca:	f005 f8ff 	bl	80061cc <WS28xx::SetPixel(unsigned int, unsigned char, unsigned char, unsigned char, unsigned char)>
 8000fce:	e7f5      	b.n	8000fbc <PixelTestPattern::SetPattern(pixelpatterns::Pattern)+0xa4>
 8000fd0:	2000      	movs	r0, #0
 8000fd2:	b005      	add	sp, #20
 8000fd4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000fd6:	bf00      	nop
 8000fd8:	20000690 	mulcs	r0, r0, r6
 8000fdc:	00646464 	rsbeq	r6, r4, r4, ror #8
 8000fe0:	2000065c 	andcs	r0, r0, ip, asr r6
 8000fe4:	20000684 	andcs	r0, r0, r4, lsl #13
 8000fe8:	20000688 	andcs	r0, r0, r8, lsl #13

08000fec <rdm::selftest::Get()>:
 8000fec:	4b01      	ldr	r3, [pc, #4]	; (8000ff4 <rdm::selftest::Get()+0x8>)
 8000fee:	7818      	ldrb	r0, [r3, #0]
 8000ff0:	4770      	bx	lr
 8000ff2:	bf00      	nop
 8000ff4:	20000690 	mulcs	r0, r0, r6

08000ff8 <rdm::selftest::Set(unsigned char)>:
 8000ff8:	4b14      	ldr	r3, [pc, #80]	; (800104c <rdm::selftest::Set(unsigned char)+0x54>)
 8000ffa:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8000ffc:	4601      	mov	r1, r0
 8000ffe:	4604      	mov	r4, r0
 8001000:	6818      	ldr	r0, [r3, #0]
 8001002:	f7ff ff89 	bl	8000f18 <PixelTestPattern::SetPattern(pixelpatterns::Pattern)>
 8001006:	4605      	mov	r5, r0
 8001008:	b1b0      	cbz	r0, 8001038 <rdm::selftest::Set(unsigned char)+0x40>
 800100a:	4b11      	ldr	r3, [pc, #68]	; (8001050 <rdm::selftest::Set(unsigned char)+0x58>)
 800100c:	b1bc      	cbz	r4, 800103e <rdm::selftest::Set(unsigned char)+0x46>
 800100e:	4e11      	ldr	r6, [pc, #68]	; (8001054 <rdm::selftest::Set(unsigned char)+0x5c>)
 8001010:	2201      	movs	r2, #1
 8001012:	701a      	strb	r2, [r3, #0]
 8001014:	6833      	ldr	r3, [r6, #0]
 8001016:	6998      	ldr	r0, [r3, #24]
 8001018:	b118      	cbz	r0, 8001022 <rdm::selftest::Set(unsigned char)+0x2a>
 800101a:	6803      	ldr	r3, [r0, #0]
 800101c:	2106      	movs	r1, #6
 800101e:	691b      	ldr	r3, [r3, #16]
 8001020:	4798      	blx	r3
 8001022:	4620      	mov	r0, r4
 8001024:	6836      	ldr	r6, [r6, #0]
 8001026:	f004 fa0f 	bl	8005448 <PixelPatterns::GetName(pixelpatterns::Pattern)>
 800102a:	4a0b      	ldr	r2, [pc, #44]	; (8001058 <rdm::selftest::Set(unsigned char)+0x60>)
 800102c:	9400      	str	r4, [sp, #0]
 800102e:	4603      	mov	r3, r0
 8001030:	2106      	movs	r1, #6
 8001032:	4630      	mov	r0, r6
 8001034:	f7ff fb49 	bl	80006ca <Display::Printf(unsigned char, char const*, ...)>
 8001038:	4628      	mov	r0, r5
 800103a:	b002      	add	sp, #8
 800103c:	bd70      	pop	{r4, r5, r6, pc}
 800103e:	701c      	strb	r4, [r3, #0]
 8001040:	4b06      	ldr	r3, [pc, #24]	; (800105c <rdm::selftest::Set(unsigned char)+0x64>)
 8001042:	6818      	ldr	r0, [r3, #0]
 8001044:	f005 fb42 	bl	80066cc <DisplayUdf::Show()>
 8001048:	e7f6      	b.n	8001038 <rdm::selftest::Set(unsigned char)+0x40>
 800104a:	bf00      	nop
 800104c:	2000068c 	andcs	r0, r0, ip, lsl #13
 8001050:	2000020c 	andcs	r0, r0, ip, lsl #4
 8001054:	200016f0 	strdcs	r1, [r0], -r0
 8001058:	08009899 	stmdaeq	r0, {r0, r3, r4, r7, fp, ip, pc}
 800105c:	200006a0 	andcs	r0, r0, r0, lsr #13

08001060 <rdm::selftest::GetDescription(unsigned char, unsigned int&)>:
 8001060:	b510      	push	{r4, lr}
 8001062:	460c      	mov	r4, r1
 8001064:	f004 f9f0 	bl	8005448 <PixelPatterns::GetName(pixelpatterns::Pattern)>
 8001068:	b140      	cbz	r0, 800107c <rdm::selftest::GetDescription(unsigned char, unsigned int&)+0x1c>
 800106a:	4602      	mov	r2, r0
 800106c:	4613      	mov	r3, r2
 800106e:	3201      	adds	r2, #1
 8001070:	7819      	ldrb	r1, [r3, #0]
 8001072:	2900      	cmp	r1, #0
 8001074:	d1fa      	bne.n	800106c <rdm::selftest::GetDescription(unsigned char, unsigned int&)+0xc>
 8001076:	1a1b      	subs	r3, r3, r0
 8001078:	6023      	str	r3, [r4, #0]
 800107a:	bd10      	pop	{r4, pc}
 800107c:	4603      	mov	r3, r0
 800107e:	e7fb      	b.n	8001078 <rdm::selftest::GetDescription(unsigned char, unsigned int&)+0x18>

08001080 <PixelTestPattern::SetPattern(pixelpatterns::Pattern) [clone .isra.0]>:
 8001080:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001082:	2905      	cmp	r1, #5
 8001084:	b085      	sub	sp, #20
 8001086:	dc18      	bgt.n	80010ba <PixelTestPattern::SetPattern(pixelpatterns::Pattern) [clone .isra.0]+0x3a>
 8001088:	4b2e      	ldr	r3, [pc, #184]	; (8001144 <PixelTestPattern::SetPattern(pixelpatterns::Pattern) [clone .isra.0]+0xc4>)
 800108a:	6019      	str	r1, [r3, #0]
 800108c:	2905      	cmp	r1, #5
 800108e:	d814      	bhi.n	80010ba <PixelTestPattern::SetPattern(pixelpatterns::Pattern) [clone .isra.0]+0x3a>
 8001090:	e8df f001 	tbb	[pc, r1]
 8001094:	150b0330 	strne	r0, [fp, #-816]	; 0xfffffcd0
 8001098:	2300251c 	movwcs	r2, #1308	; 0x51c
 800109c:	2264      	movs	r2, #100	; 0x64
 800109e:	4619      	mov	r1, r3
 80010a0:	b005      	add	sp, #20
 80010a2:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 80010a6:	f004 b9db 	b.w	8005460 <PixelPatterns::RainbowCycle(unsigned int, unsigned int, pixelpatterns::Direction)>
 80010aa:	2364      	movs	r3, #100	; 0x64
 80010ac:	2200      	movs	r2, #0
 80010ae:	e9cd 3200 	strd	r3, r2, [sp]
 80010b2:	4611      	mov	r1, r2
 80010b4:	4b24      	ldr	r3, [pc, #144]	; (8001148 <PixelTestPattern::SetPattern(pixelpatterns::Pattern) [clone .isra.0]+0xc8>)
 80010b6:	f004 f9e7 	bl	8005488 <PixelPatterns::TheaterChase(unsigned int, unsigned int, unsigned int, unsigned int, pixelpatterns::Direction)>
 80010ba:	b005      	add	sp, #20
 80010bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80010be:	2100      	movs	r1, #0
 80010c0:	4a21      	ldr	r2, [pc, #132]	; (8001148 <PixelTestPattern::SetPattern(pixelpatterns::Pattern) [clone .isra.0]+0xc8>)
 80010c2:	9100      	str	r1, [sp, #0]
 80010c4:	2364      	movs	r3, #100	; 0x64
 80010c6:	f004 f9fb 	bl	80054c0 <PixelPatterns::ColourWipe(unsigned int, unsigned int, unsigned int, pixelpatterns::Direction)>
 80010ca:	e7f6      	b.n	80010ba <PixelTestPattern::SetPattern(pixelpatterns::Pattern) [clone .isra.0]+0x3a>
 80010cc:	2364      	movs	r3, #100	; 0x64
 80010ce:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 80010d2:	2100      	movs	r1, #0
 80010d4:	b005      	add	sp, #20
 80010d6:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 80010da:	f004 ba0b 	b.w	80054f4 <PixelPatterns::Scanner(unsigned int, unsigned int, unsigned int)>
 80010de:	2200      	movs	r2, #0
 80010e0:	2364      	movs	r3, #100	; 0x64
 80010e2:	e9cd 3201 	strd	r3, r2, [sp, #4]
 80010e6:	230a      	movs	r3, #10
 80010e8:	9300      	str	r3, [sp, #0]
 80010ea:	4611      	mov	r1, r2
 80010ec:	4b16      	ldr	r3, [pc, #88]	; (8001148 <PixelTestPattern::SetPattern(pixelpatterns::Pattern) [clone .isra.0]+0xc8>)
 80010ee:	f004 fa33 	bl	8005558 <PixelPatterns::Fade(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, pixelpatterns::Direction)>
 80010f2:	e7e2      	b.n	80010ba <PixelTestPattern::SetPattern(pixelpatterns::Pattern) [clone .isra.0]+0x3a>
 80010f4:	4b15      	ldr	r3, [pc, #84]	; (800114c <PixelTestPattern::SetPattern(pixelpatterns::Pattern) [clone .isra.0]+0xcc>)
 80010f6:	4e16      	ldr	r6, [pc, #88]	; (8001150 <PixelTestPattern::SetPattern(pixelpatterns::Pattern) [clone .isra.0]+0xd0>)
 80010f8:	4f16      	ldr	r7, [pc, #88]	; (8001154 <PixelTestPattern::SetPattern(pixelpatterns::Pattern) [clone .isra.0]+0xd4>)
 80010fa:	2400      	movs	r4, #0
 80010fc:	61dc      	str	r4, [r3, #28]
 80010fe:	4625      	mov	r5, r4
 8001100:	6833      	ldr	r3, [r6, #0]
 8001102:	429c      	cmp	r4, r3
 8001104:	d30a      	bcc.n	800111c <PixelTestPattern::SetPattern(pixelpatterns::Pattern) [clone .isra.0]+0x9c>
 8001106:	f008 f839 	bl	800917c <gd32_spi_dma_tx_is_active()>
 800110a:	2800      	cmp	r0, #0
 800110c:	d1fb      	bne.n	8001106 <PixelTestPattern::SetPattern(pixelpatterns::Pattern) [clone .isra.0]+0x86>
 800110e:	4b11      	ldr	r3, [pc, #68]	; (8001154 <PixelTestPattern::SetPattern(pixelpatterns::Pattern) [clone .isra.0]+0xd4>)
 8001110:	6818      	ldr	r0, [r3, #0]
 8001112:	b005      	add	sp, #20
 8001114:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8001118:	f005 b9c6 	b.w	80064a8 <WS28xx::Update()>
 800111c:	6838      	ldr	r0, [r7, #0]
 800111e:	6803      	ldr	r3, [r0, #0]
 8001120:	2b07      	cmp	r3, #7
 8001122:	d007      	beq.n	8001134 <PixelTestPattern::SetPattern(pixelpatterns::Pattern) [clone .isra.0]+0xb4>
 8001124:	2300      	movs	r3, #0
 8001126:	9500      	str	r5, [sp, #0]
 8001128:	461a      	mov	r2, r3
 800112a:	4621      	mov	r1, r4
 800112c:	f004 fbd4 	bl	80058d8 <WS28xx::SetPixel(unsigned int, unsigned char, unsigned char, unsigned char)>
 8001130:	3401      	adds	r4, #1
 8001132:	e7e5      	b.n	8001100 <PixelTestPattern::SetPattern(pixelpatterns::Pattern) [clone .isra.0]+0x80>
 8001134:	2300      	movs	r3, #0
 8001136:	e9cd 5500 	strd	r5, r5, [sp]
 800113a:	461a      	mov	r2, r3
 800113c:	4621      	mov	r1, r4
 800113e:	f005 f845 	bl	80061cc <WS28xx::SetPixel(unsigned int, unsigned char, unsigned char, unsigned char, unsigned char)>
 8001142:	e7f5      	b.n	8001130 <PixelTestPattern::SetPattern(pixelpatterns::Pattern) [clone .isra.0]+0xb0>
 8001144:	20000690 	mulcs	r0, r0, r6
 8001148:	00646464 	rsbeq	r6, r4, r4, ror #8
 800114c:	2000065c 	andcs	r0, r0, ip, asr r6
 8001150:	20000684 	andcs	r0, r0, r4, lsl #13
 8001154:	20000688 	andcs	r0, r0, r8, lsl #13

08001158 <RDMIdentify::On(rdm::identify::Mode)>:
 8001158:	29ff      	cmp	r1, #255	; 0xff
 800115a:	b510      	push	{r4, lr}
 800115c:	d10f      	bne.n	800117e <RDMIdentify::On(rdm::identify::Mode)+0x26>
 800115e:	4b08      	ldr	r3, [pc, #32]	; (8001180 <RDMIdentify::On(rdm::identify::Mode)+0x28>)
 8001160:	781a      	ldrb	r2, [r3, #0]
 8001162:	b962      	cbnz	r2, 800117e <RDMIdentify::On(rdm::identify::Mode)+0x26>
 8001164:	2401      	movs	r4, #1
 8001166:	701c      	strb	r4, [r3, #0]
 8001168:	4b06      	ldr	r3, [pc, #24]	; (8001184 <RDMIdentify::On(rdm::identify::Mode)+0x2c>)
 800116a:	681a      	ldr	r2, [r3, #0]
 800116c:	4b06      	ldr	r3, [pc, #24]	; (8001188 <RDMIdentify::On(rdm::identify::Mode)+0x30>)
 800116e:	601a      	str	r2, [r3, #0]
 8001170:	4b06      	ldr	r3, [pc, #24]	; (800118c <RDMIdentify::On(rdm::identify::Mode)+0x34>)
 8001172:	2105      	movs	r1, #5
 8001174:	6818      	ldr	r0, [r3, #0]
 8001176:	f7ff ff83 	bl	8001080 <PixelTestPattern::SetPattern(pixelpatterns::Pattern) [clone .isra.0]>
 800117a:	4b05      	ldr	r3, [pc, #20]	; (8001190 <RDMIdentify::On(rdm::identify::Mode)+0x38>)
 800117c:	701c      	strb	r4, [r3, #0]
 800117e:	bd10      	pop	{r4, pc}
 8001180:	200000e9 	andcs	r0, r0, r9, ror #1
 8001184:	20000690 	mulcs	r0, r0, r6
 8001188:	200000ec 	andcs	r0, r0, ip, ror #1
 800118c:	2000068c 	andcs	r0, r0, ip, lsl #13
 8001190:	2000020c 	andcs	r0, r0, ip, lsl #4

08001194 <RDMIdentify::Off(rdm::identify::Mode)>:
 8001194:	4b09      	ldr	r3, [pc, #36]	; (80011bc <RDMIdentify::Off(rdm::identify::Mode)+0x28>)
 8001196:	781a      	ldrb	r2, [r3, #0]
 8001198:	b510      	push	{r4, lr}
 800119a:	b16a      	cbz	r2, 80011b8 <RDMIdentify::Off(rdm::identify::Mode)+0x24>
 800119c:	2200      	movs	r2, #0
 800119e:	701a      	strb	r2, [r3, #0]
 80011a0:	4c07      	ldr	r4, [pc, #28]	; (80011c0 <RDMIdentify::Off(rdm::identify::Mode)+0x2c>)
 80011a2:	4b08      	ldr	r3, [pc, #32]	; (80011c4 <RDMIdentify::Off(rdm::identify::Mode)+0x30>)
 80011a4:	6821      	ldr	r1, [r4, #0]
 80011a6:	6818      	ldr	r0, [r3, #0]
 80011a8:	f7ff ff6a 	bl	8001080 <PixelTestPattern::SetPattern(pixelpatterns::Pattern) [clone .isra.0]>
 80011ac:	6823      	ldr	r3, [r4, #0]
 80011ae:	4a06      	ldr	r2, [pc, #24]	; (80011c8 <RDMIdentify::Off(rdm::identify::Mode)+0x34>)
 80011b0:	3b00      	subs	r3, #0
 80011b2:	bf18      	it	ne
 80011b4:	2301      	movne	r3, #1
 80011b6:	7013      	strb	r3, [r2, #0]
 80011b8:	bd10      	pop	{r4, pc}
 80011ba:	bf00      	nop
 80011bc:	200000e9 	andcs	r0, r0, r9, ror #1
 80011c0:	200000ec 	andcs	r0, r0, ip, ror #1
 80011c4:	2000068c 	andcs	r0, r0, ip, lsl #13
 80011c8:	2000020c 	andcs	r0, r0, ip, lsl #4

080011cc <RDMSlotInfo::GetCategoryTextUndefined(unsigned short, unsigned int&)>:
 80011cc:	2805      	cmp	r0, #5
 80011ce:	d814      	bhi.n	80011fa <RDMSlotInfo::GetCategoryTextUndefined(unsigned short, unsigned int&)+0x2e>
 80011d0:	e8df f000 	tbb	[pc, r0]
 80011d4:	0a071603 	beq	81c69e8 <__exidx_end+0x1bb118>
 80011d8:	480b100d 	stmdami	fp, {r0, r2, r3, ip}
 80011dc:	2304      	movs	r3, #4
 80011de:	600b      	str	r3, [r1, #0]
 80011e0:	4770      	bx	lr
 80011e2:	480a      	ldr	r0, [pc, #40]	; (800120c <RDMSlotInfo::GetCategoryTextUndefined(unsigned short, unsigned int&)+0x40>)
 80011e4:	230e      	movs	r3, #14
 80011e6:	e7fa      	b.n	80011de <RDMSlotInfo::GetCategoryTextUndefined(unsigned short, unsigned int&)+0x12>
 80011e8:	4809      	ldr	r0, [pc, #36]	; (8001210 <RDMSlotInfo::GetCategoryTextUndefined(unsigned short, unsigned int&)+0x44>)
 80011ea:	2303      	movs	r3, #3
 80011ec:	e7f7      	b.n	80011de <RDMSlotInfo::GetCategoryTextUndefined(unsigned short, unsigned int&)+0x12>
 80011ee:	4809      	ldr	r0, [pc, #36]	; (8001214 <RDMSlotInfo::GetCategoryTextUndefined(unsigned short, unsigned int&)+0x48>)
 80011f0:	230c      	movs	r3, #12
 80011f2:	e7f4      	b.n	80011de <RDMSlotInfo::GetCategoryTextUndefined(unsigned short, unsigned int&)+0x12>
 80011f4:	4808      	ldr	r0, [pc, #32]	; (8001218 <RDMSlotInfo::GetCategoryTextUndefined(unsigned short, unsigned int&)+0x4c>)
 80011f6:	2307      	movs	r3, #7
 80011f8:	e7f1      	b.n	80011de <RDMSlotInfo::GetCategoryTextUndefined(unsigned short, unsigned int&)+0x12>
 80011fa:	4808      	ldr	r0, [pc, #32]	; (800121c <RDMSlotInfo::GetCategoryTextUndefined(unsigned short, unsigned int&)+0x50>)
 80011fc:	2309      	movs	r3, #9
 80011fe:	e7ee      	b.n	80011de <RDMSlotInfo::GetCategoryTextUndefined(unsigned short, unsigned int&)+0x12>
 8001200:	4807      	ldr	r0, [pc, #28]	; (8001220 <RDMSlotInfo::GetCategoryTextUndefined(unsigned short, unsigned int&)+0x54>)
 8001202:	2305      	movs	r3, #5
 8001204:	e7eb      	b.n	80011de <RDMSlotInfo::GetCategoryTextUndefined(unsigned short, unsigned int&)+0x12>
 8001206:	bf00      	nop
 8001208:	080099fa 	stmdaeq	r0, {r1, r3, r4, r5, r6, r7, r8, fp, ip, pc}
 800120c:	080099ff 	stmdaeq	r0, {r0, r1, r2, r3, r4, r5, r6, r7, r8, fp, ip, pc}
 8001210:	08009a0e 	stmdaeq	r0, {r1, r2, r3, r9, fp, ip, pc}
 8001214:	08009a12 	stmdaeq	r0, {r1, r4, r9, fp, ip, pc}
 8001218:	08009a1f 	stmdaeq	r0, {r0, r1, r2, r3, r4, r9, fp, ip, pc}
 800121c:	08009a27 	stmdaeq	r0, {r0, r1, r2, r5, r9, fp, ip, pc}
 8001220:	08009a08 	stmdaeq	r0, {r3, r9, fp, ip, pc}

08001224 <RDMSoftwareVersion::GetVersion()>:
 8001224:	4800      	ldr	r0, [pc, #0]	; (8001228 <RDMSoftwareVersion::GetVersion()+0x4>)
 8001226:	4770      	bx	lr
 8001228:	08009a31 	stmdaeq	r0, {r0, r4, r5, r9, fp, ip, pc}

0800122c <RDMSoftwareVersion::GetVersionLength()>:
 800122c:	2003      	movs	r0, #3
 800122e:	4770      	bx	lr

08001230 <RDMSoftwareVersion::GetVersionId()>:
 8001230:	4800      	ldr	r0, [pc, #0]	; (8001234 <RDMSoftwareVersion::GetVersionId()+0x4>)
 8001232:	4770      	bx	lr
 8001234:	639dd746 	orrsvs	sp, sp, #18350080	; 0x1180000

08001238 <_itostr>:
 8001238:	b5f0      	push	{r4, r5, r6, r7, lr}
 800123a:	0fc7      	lsrs	r7, r0, #31
 800123c:	b091      	sub	sp, #68	; 0x44
 800123e:	bf18      	it	ne
 8001240:	4240      	negne	r0, r0
 8001242:	f10d 043f 	add.w	r4, sp, #63	; 0x3f
 8001246:	b9c8      	cbnz	r0, 800127c <_itostr+0x44>
 8001248:	2330      	movs	r3, #48	; 0x30
 800124a:	f88d 303f 	strb.w	r3, [sp, #63]	; 0x3f
 800124e:	f10d 033e 	add.w	r3, sp, #62	; 0x3e
 8001252:	b132      	cbz	r2, 8001262 <_itostr+0x2a>
 8001254:	4668      	mov	r0, sp
 8001256:	2530      	movs	r5, #48	; 0x30
 8001258:	1ae6      	subs	r6, r4, r3
 800125a:	4296      	cmp	r6, r2
 800125c:	da01      	bge.n	8001262 <_itostr+0x2a>
 800125e:	4283      	cmp	r3, r0
 8001260:	d81c      	bhi.n	800129c <_itostr+0x64>
 8001262:	b117      	cbz	r7, 800126a <_itostr+0x32>
 8001264:	222d      	movs	r2, #45	; 0x2d
 8001266:	f803 2901 	strb.w	r2, [r3], #-1
 800126a:	3301      	adds	r3, #1
 800126c:	1ae0      	subs	r0, r4, r3
 800126e:	3901      	subs	r1, #1
 8001270:	aa10      	add	r2, sp, #64	; 0x40
 8001272:	4293      	cmp	r3, r2
 8001274:	d315      	bcc.n	80012a2 <_itostr+0x6a>
 8001276:	3001      	adds	r0, #1
 8001278:	b011      	add	sp, #68	; 0x44
 800127a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800127c:	4623      	mov	r3, r4
 800127e:	250a      	movs	r5, #10
 8001280:	46ec      	mov	ip, sp
 8001282:	fb90 f6f5 	sdiv	r6, r0, r5
 8001286:	fb05 0016 	mls	r0, r5, r6, r0
 800128a:	3030      	adds	r0, #48	; 0x30
 800128c:	f803 0901 	strb.w	r0, [r3], #-1
 8001290:	4630      	mov	r0, r6
 8001292:	2e00      	cmp	r6, #0
 8001294:	d0dd      	beq.n	8001252 <_itostr+0x1a>
 8001296:	4563      	cmp	r3, ip
 8001298:	d1f3      	bne.n	8001282 <_itostr+0x4a>
 800129a:	e7da      	b.n	8001252 <_itostr+0x1a>
 800129c:	f803 5901 	strb.w	r5, [r3], #-1
 80012a0:	e7da      	b.n	8001258 <_itostr+0x20>
 80012a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80012a6:	f801 2f01 	strb.w	r2, [r1, #1]!
 80012aa:	e7e1      	b.n	8001270 <_itostr+0x38>

080012ac <_xputch>:
 80012ac:	4603      	mov	r3, r0
 80012ae:	b410      	push	{r4}
 80012b0:	4c09      	ldr	r4, [pc, #36]	; (80012d8 <_xputch+0x2c>)
 80012b2:	68da      	ldr	r2, [r3, #12]
 80012b4:	4608      	mov	r0, r1
 80012b6:	6821      	ldr	r1, [r4, #0]
 80012b8:	3201      	adds	r2, #1
 80012ba:	60da      	str	r2, [r3, #12]
 80012bc:	b141      	cbz	r1, 80012d0 <_xputch+0x24>
 80012be:	691b      	ldr	r3, [r3, #16]
 80012c0:	429a      	cmp	r2, r3
 80012c2:	da02      	bge.n	80012ca <_xputch+0x1e>
 80012c4:	1c4b      	adds	r3, r1, #1
 80012c6:	6023      	str	r3, [r4, #0]
 80012c8:	7008      	strb	r0, [r1, #0]
 80012ca:	f85d 4b04 	ldr.w	r4, [sp], #4
 80012ce:	4770      	bx	lr
 80012d0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80012d4:	f006 ba50 	b.w	8007778 <console_putc>
 80012d8:	200000f0 	strdcs	r0, [r0], -r0	; <UNPREDICTABLE>

080012dc <_format_int>:
 80012dc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80012e0:	4698      	mov	r8, r3
 80012e2:	b091      	sub	sp, #68	; 0x44
 80012e4:	ea52 0308 	orrs.w	r3, r2, r8
 80012e8:	4606      	mov	r6, r0
 80012ea:	4617      	mov	r7, r2
 80012ec:	f10d 053f 	add.w	r5, sp, #63	; 0x3f
 80012f0:	d133      	bne.n	800135a <_format_int+0x7e>
 80012f2:	2330      	movs	r3, #48	; 0x30
 80012f4:	f88d 303f 	strb.w	r3, [sp, #63]	; 0x3f
 80012f8:	f10d 043e 	add.w	r4, sp, #62	; 0x3e
 80012fc:	6833      	ldr	r3, [r6, #0]
 80012fe:	07d8      	lsls	r0, r3, #31
 8001300:	d507      	bpl.n	8001312 <_format_int+0x36>
 8001302:	6871      	ldr	r1, [r6, #4]
 8001304:	466a      	mov	r2, sp
 8001306:	2030      	movs	r0, #48	; 0x30
 8001308:	1b2f      	subs	r7, r5, r4
 800130a:	428f      	cmp	r7, r1
 800130c:	da01      	bge.n	8001312 <_format_int+0x36>
 800130e:	4294      	cmp	r4, r2
 8001310:	d839      	bhi.n	8001386 <_format_int+0xaa>
 8001312:	0699      	lsls	r1, r3, #26
 8001314:	d507      	bpl.n	8001326 <_format_int+0x4a>
 8001316:	68b1      	ldr	r1, [r6, #8]
 8001318:	466a      	mov	r2, sp
 800131a:	2030      	movs	r0, #48	; 0x30
 800131c:	1b2f      	subs	r7, r5, r4
 800131e:	428f      	cmp	r7, r1
 8001320:	da01      	bge.n	8001326 <_format_int+0x4a>
 8001322:	4294      	cmp	r4, r2
 8001324:	d832      	bhi.n	800138c <_format_int+0xb0>
 8001326:	071a      	lsls	r2, r3, #28
 8001328:	bf44      	itt	mi
 800132a:	222d      	movmi	r2, #45	; 0x2d
 800132c:	f804 2901 	strbmi.w	r2, [r4], #-1
 8001330:	065b      	lsls	r3, r3, #25
 8001332:	d407      	bmi.n	8001344 <_format_int+0x68>
 8001334:	68b2      	ldr	r2, [r6, #8]
 8001336:	466b      	mov	r3, sp
 8001338:	2120      	movs	r1, #32
 800133a:	1b28      	subs	r0, r5, r4
 800133c:	4290      	cmp	r0, r2
 800133e:	da01      	bge.n	8001344 <_format_int+0x68>
 8001340:	429c      	cmp	r4, r3
 8001342:	d826      	bhi.n	8001392 <_format_int+0xb6>
 8001344:	1b2d      	subs	r5, r5, r4
 8001346:	3401      	adds	r4, #1
 8001348:	ab10      	add	r3, sp, #64	; 0x40
 800134a:	429c      	cmp	r4, r3
 800134c:	d324      	bcc.n	8001398 <_format_int+0xbc>
 800134e:	68b3      	ldr	r3, [r6, #8]
 8001350:	42ab      	cmp	r3, r5
 8001352:	dc27      	bgt.n	80013a4 <_format_int+0xc8>
 8001354:	b011      	add	sp, #68	; 0x44
 8001356:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800135a:	462c      	mov	r4, r5
 800135c:	46e9      	mov	r9, sp
 800135e:	4638      	mov	r0, r7
 8001360:	4641      	mov	r1, r8
 8001362:	220a      	movs	r2, #10
 8001364:	2300      	movs	r3, #0
 8001366:	f7fe ff6f 	bl	8000248 <__aeabi_uldivmod>
 800136a:	3230      	adds	r2, #48	; 0x30
 800136c:	f804 2901 	strb.w	r2, [r4], #-1
 8001370:	463a      	mov	r2, r7
 8001372:	4643      	mov	r3, r8
 8001374:	2a0a      	cmp	r2, #10
 8001376:	f173 0300 	sbcs.w	r3, r3, #0
 800137a:	4607      	mov	r7, r0
 800137c:	4688      	mov	r8, r1
 800137e:	d3bd      	bcc.n	80012fc <_format_int+0x20>
 8001380:	454c      	cmp	r4, r9
 8001382:	d1ec      	bne.n	800135e <_format_int+0x82>
 8001384:	e7ba      	b.n	80012fc <_format_int+0x20>
 8001386:	f804 0901 	strb.w	r0, [r4], #-1
 800138a:	e7bd      	b.n	8001308 <_format_int+0x2c>
 800138c:	f804 0901 	strb.w	r0, [r4], #-1
 8001390:	e7c4      	b.n	800131c <_format_int+0x40>
 8001392:	f804 1901 	strb.w	r1, [r4], #-1
 8001396:	e7d0      	b.n	800133a <_format_int+0x5e>
 8001398:	f814 1b01 	ldrb.w	r1, [r4], #1
 800139c:	4630      	mov	r0, r6
 800139e:	f7ff ff85 	bl	80012ac <_xputch>
 80013a2:	e7d1      	b.n	8001348 <_format_int+0x6c>
 80013a4:	2120      	movs	r1, #32
 80013a6:	4630      	mov	r0, r6
 80013a8:	f7ff ff80 	bl	80012ac <_xputch>
 80013ac:	3501      	adds	r5, #1
 80013ae:	e7ce      	b.n	800134e <_format_int+0x72>

080013b0 <_format_hex>:
 80013b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80013b2:	b091      	sub	sp, #68	; 0x44
 80013b4:	6804      	ldr	r4, [r0, #0]
 80013b6:	4606      	mov	r6, r0
 80013b8:	f10d 023f 	add.w	r2, sp, #63	; 0x3f
 80013bc:	bb61      	cbnz	r1, 8001418 <_format_hex+0x68>
 80013be:	2330      	movs	r3, #48	; 0x30
 80013c0:	f88d 303f 	strb.w	r3, [sp, #63]	; 0x3f
 80013c4:	f10d 033e 	add.w	r3, sp, #62	; 0x3e
 80013c8:	07e5      	lsls	r5, r4, #31
 80013ca:	d507      	bpl.n	80013dc <_format_hex+0x2c>
 80013cc:	6870      	ldr	r0, [r6, #4]
 80013ce:	4669      	mov	r1, sp
 80013d0:	2530      	movs	r5, #48	; 0x30
 80013d2:	1ad7      	subs	r7, r2, r3
 80013d4:	4287      	cmp	r7, r0
 80013d6:	da01      	bge.n	80013dc <_format_hex+0x2c>
 80013d8:	428b      	cmp	r3, r1
 80013da:	d831      	bhi.n	8001440 <_format_hex+0x90>
 80013dc:	06a0      	lsls	r0, r4, #26
 80013de:	d507      	bpl.n	80013f0 <_format_hex+0x40>
 80013e0:	68b0      	ldr	r0, [r6, #8]
 80013e2:	4669      	mov	r1, sp
 80013e4:	2530      	movs	r5, #48	; 0x30
 80013e6:	1ad7      	subs	r7, r2, r3
 80013e8:	4287      	cmp	r7, r0
 80013ea:	da01      	bge.n	80013f0 <_format_hex+0x40>
 80013ec:	428b      	cmp	r3, r1
 80013ee:	d82a      	bhi.n	8001446 <_format_hex+0x96>
 80013f0:	0661      	lsls	r1, r4, #25
 80013f2:	d407      	bmi.n	8001404 <_format_hex+0x54>
 80013f4:	68b0      	ldr	r0, [r6, #8]
 80013f6:	4669      	mov	r1, sp
 80013f8:	2420      	movs	r4, #32
 80013fa:	1ad5      	subs	r5, r2, r3
 80013fc:	4285      	cmp	r5, r0
 80013fe:	da01      	bge.n	8001404 <_format_hex+0x54>
 8001400:	428b      	cmp	r3, r1
 8001402:	d823      	bhi.n	800144c <_format_hex+0x9c>
 8001404:	1ad5      	subs	r5, r2, r3
 8001406:	1c5c      	adds	r4, r3, #1
 8001408:	ab10      	add	r3, sp, #64	; 0x40
 800140a:	429c      	cmp	r4, r3
 800140c:	d321      	bcc.n	8001452 <_format_hex+0xa2>
 800140e:	68b3      	ldr	r3, [r6, #8]
 8001410:	429d      	cmp	r5, r3
 8001412:	db24      	blt.n	800145e <_format_hex+0xae>
 8001414:	b011      	add	sp, #68	; 0x44
 8001416:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001418:	f014 0f02 	tst.w	r4, #2
 800141c:	bf0c      	ite	eq
 800141e:	2757      	moveq	r7, #87	; 0x57
 8001420:	2737      	movne	r7, #55	; 0x37
 8001422:	4613      	mov	r3, r2
 8001424:	466d      	mov	r5, sp
 8001426:	f001 000f 	and.w	r0, r1, #15
 800142a:	2809      	cmp	r0, #9
 800142c:	bf94      	ite	ls
 800142e:	3030      	addls	r0, #48	; 0x30
 8001430:	19c0      	addhi	r0, r0, r7
 8001432:	0909      	lsrs	r1, r1, #4
 8001434:	f803 0901 	strb.w	r0, [r3], #-1
 8001438:	d0c6      	beq.n	80013c8 <_format_hex+0x18>
 800143a:	42ab      	cmp	r3, r5
 800143c:	d1f3      	bne.n	8001426 <_format_hex+0x76>
 800143e:	e7c3      	b.n	80013c8 <_format_hex+0x18>
 8001440:	f803 5901 	strb.w	r5, [r3], #-1
 8001444:	e7c5      	b.n	80013d2 <_format_hex+0x22>
 8001446:	f803 5901 	strb.w	r5, [r3], #-1
 800144a:	e7cc      	b.n	80013e6 <_format_hex+0x36>
 800144c:	f803 4901 	strb.w	r4, [r3], #-1
 8001450:	e7d3      	b.n	80013fa <_format_hex+0x4a>
 8001452:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001456:	4630      	mov	r0, r6
 8001458:	f7ff ff28 	bl	80012ac <_xputch>
 800145c:	e7d4      	b.n	8001408 <_format_hex+0x58>
 800145e:	2120      	movs	r1, #32
 8001460:	4630      	mov	r0, r6
 8001462:	f7ff ff23 	bl	80012ac <_xputch>
 8001466:	3501      	adds	r5, #1
 8001468:	e7d1      	b.n	800140e <_format_hex+0x5e>
	...

0800146c <_vprintf>:
 800146c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001470:	f04f 0800 	mov.w	r8, #0
 8001474:	b096      	sub	sp, #88	; 0x58
 8001476:	e9cd 8004 	strd	r8, r0, [sp, #16]
 800147a:	4614      	mov	r4, r2
 800147c:	af06      	add	r7, sp, #24
 800147e:	780b      	ldrb	r3, [r1, #0]
 8001480:	b91b      	cbnz	r3, 800148a <_vprintf+0x1e>
 8001482:	9804      	ldr	r0, [sp, #16]
 8001484:	b016      	add	sp, #88	; 0x58
 8001486:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800148a:	2b25      	cmp	r3, #37	; 0x25
 800148c:	f101 0601 	add.w	r6, r1, #1
 8001490:	d005      	beq.n	800149e <_vprintf+0x32>
 8001492:	4619      	mov	r1, r3
 8001494:	a801      	add	r0, sp, #4
 8001496:	f7ff ff09 	bl	80012ac <_xputch>
 800149a:	4631      	mov	r1, r6
 800149c:	e7ef      	b.n	800147e <_vprintf+0x12>
 800149e:	784b      	ldrb	r3, [r1, #1]
 80014a0:	f8cd 800c 	str.w	r8, [sp, #12]
 80014a4:	2b30      	cmp	r3, #48	; 0x30
 80014a6:	e9cd 8801 	strd	r8, r8, [sp, #4]
 80014aa:	d129      	bne.n	8001500 <_vprintf+0x94>
 80014ac:	2320      	movs	r3, #32
 80014ae:	9301      	str	r3, [sp, #4]
 80014b0:	1c8e      	adds	r6, r1, #2
 80014b2:	2200      	movs	r2, #0
 80014b4:	4635      	mov	r5, r6
 80014b6:	4613      	mov	r3, r2
 80014b8:	f04f 0c0a 	mov.w	ip, #10
 80014bc:	7829      	ldrb	r1, [r5, #0]
 80014be:	f1a1 0030 	sub.w	r0, r1, #48	; 0x30
 80014c2:	2809      	cmp	r0, #9
 80014c4:	462e      	mov	r6, r5
 80014c6:	f105 0501 	add.w	r5, r5, #1
 80014ca:	d91d      	bls.n	8001508 <_vprintf+0x9c>
 80014cc:	b12a      	cbz	r2, 80014da <_vprintf+0x6e>
 80014ce:	9303      	str	r3, [sp, #12]
 80014d0:	b11b      	cbz	r3, 80014da <_vprintf+0x6e>
 80014d2:	9b01      	ldr	r3, [sp, #4]
 80014d4:	f043 0310 	orr.w	r3, r3, #16
 80014d8:	9301      	str	r3, [sp, #4]
 80014da:	292e      	cmp	r1, #46	; 0x2e
 80014dc:	d123      	bne.n	8001526 <_vprintf+0xba>
 80014de:	7873      	ldrb	r3, [r6, #1]
 80014e0:	2b2a      	cmp	r3, #42	; 0x2a
 80014e2:	d015      	beq.n	8001510 <_vprintf+0xa4>
 80014e4:	2100      	movs	r1, #0
 80014e6:	1c70      	adds	r0, r6, #1
 80014e8:	460a      	mov	r2, r1
 80014ea:	250a      	movs	r5, #10
 80014ec:	7803      	ldrb	r3, [r0, #0]
 80014ee:	3b30      	subs	r3, #48	; 0x30
 80014f0:	2b09      	cmp	r3, #9
 80014f2:	4606      	mov	r6, r0
 80014f4:	f100 0001 	add.w	r0, r0, #1
 80014f8:	d958      	bls.n	80015ac <_vprintf+0x140>
 80014fa:	b181      	cbz	r1, 800151e <_vprintf+0xb2>
 80014fc:	9202      	str	r2, [sp, #8]
 80014fe:	e00e      	b.n	800151e <_vprintf+0xb2>
 8001500:	2b2d      	cmp	r3, #45	; 0x2d
 8001502:	d1d6      	bne.n	80014b2 <_vprintf+0x46>
 8001504:	2340      	movs	r3, #64	; 0x40
 8001506:	e7d2      	b.n	80014ae <_vprintf+0x42>
 8001508:	fb0c 0303 	mla	r3, ip, r3, r0
 800150c:	2201      	movs	r2, #1
 800150e:	e7d5      	b.n	80014bc <_vprintf+0x50>
 8001510:	f854 3b04 	ldr.w	r3, [r4], #4
 8001514:	2b00      	cmp	r3, #0
 8001516:	bfb8      	it	lt
 8001518:	425b      	neglt	r3, r3
 800151a:	3602      	adds	r6, #2
 800151c:	9302      	str	r3, [sp, #8]
 800151e:	9b01      	ldr	r3, [sp, #4]
 8001520:	f043 0301 	orr.w	r3, r3, #1
 8001524:	9301      	str	r3, [sp, #4]
 8001526:	7833      	ldrb	r3, [r6, #0]
 8001528:	2b6c      	cmp	r3, #108	; 0x6c
 800152a:	bf04      	itt	eq
 800152c:	3601      	addeq	r6, #1
 800152e:	9b01      	ldreq	r3, [sp, #4]
 8001530:	7831      	ldrb	r1, [r6, #0]
 8001532:	bf04      	itt	eq
 8001534:	f043 0304 	orreq.w	r3, r3, #4
 8001538:	9301      	streq	r3, [sp, #4]
 800153a:	2958      	cmp	r1, #88	; 0x58
 800153c:	f000 8169 	beq.w	8001812 <_vprintf+0x3a6>
 8001540:	f1a1 0363 	sub.w	r3, r1, #99	; 0x63
 8001544:	b2da      	uxtb	r2, r3
 8001546:	2a15      	cmp	r2, #21
 8001548:	d8a4      	bhi.n	8001494 <_vprintf+0x28>
 800154a:	2b15      	cmp	r3, #21
 800154c:	d8a2      	bhi.n	8001494 <_vprintf+0x28>
 800154e:	a201      	add	r2, pc, #4	; (adr r2, 8001554 <_vprintf+0xe8>)
 8001550:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001554:	080015b5 	stmdaeq	r0, {r0, r2, r4, r5, r7, r8, sl, ip}
 8001558:	080015c7 	stmdaeq	r0, {r0, r1, r2, r6, r7, r8, sl, ip}
 800155c:	08001495 	stmdaeq	r0, {r0, r2, r4, r7, sl, ip}
 8001560:	080015fd 	stmdaeq	r0, {r0, r2, r3, r4, r5, r6, r7, r8, sl, ip}
 8001564:	08001495 	stmdaeq	r0, {r0, r2, r4, r7, sl, ip}
 8001568:	08001495 	stmdaeq	r0, {r0, r2, r4, r7, sl, ip}
 800156c:	080015c7 	stmdaeq	r0, {r0, r1, r2, r6, r7, r8, sl, ip}
 8001570:	08001495 	stmdaeq	r0, {r0, r2, r4, r7, sl, ip}
 8001574:	08001495 	stmdaeq	r0, {r0, r2, r4, r7, sl, ip}
 8001578:	08001495 	stmdaeq	r0, {r0, r2, r4, r7, sl, ip}
 800157c:	08001495 	stmdaeq	r0, {r0, r2, r4, r7, sl, ip}
 8001580:	08001495 	stmdaeq	r0, {r0, r2, r4, r7, sl, ip}
 8001584:	08001495 	stmdaeq	r0, {r0, r2, r4, r7, sl, ip}
 8001588:	08001755 	stmdaeq	r0, {r0, r2, r4, r6, r8, r9, sl, ip}
 800158c:	08001495 	stmdaeq	r0, {r0, r2, r4, r7, sl, ip}
 8001590:	08001495 	stmdaeq	r0, {r0, r2, r4, r7, sl, ip}
 8001594:	0800177d 	stmdaeq	r0, {r0, r2, r3, r4, r5, r6, r8, r9, sl, ip}
 8001598:	08001495 	stmdaeq	r0, {r0, r2, r4, r7, sl, ip}
 800159c:	080017f3 	stmdaeq	r0, {r0, r1, r4, r5, r6, r7, r8, r9, sl, ip}
 80015a0:	08001495 	stmdaeq	r0, {r0, r2, r4, r7, sl, ip}
 80015a4:	08001495 	stmdaeq	r0, {r0, r2, r4, r7, sl, ip}
 80015a8:	0800181b 	stmdaeq	r0, {r0, r1, r3, r4, fp, ip}
 80015ac:	fb05 3202 	mla	r2, r5, r2, r3
 80015b0:	2101      	movs	r1, #1
 80015b2:	e79b      	b.n	80014ec <_vprintf+0x80>
 80015b4:	4625      	mov	r5, r4
 80015b6:	a801      	add	r0, sp, #4
 80015b8:	f855 1b04 	ldr.w	r1, [r5], #4
 80015bc:	f7ff fe76 	bl	80012ac <_xputch>
 80015c0:	3601      	adds	r6, #1
 80015c2:	462c      	mov	r4, r5
 80015c4:	e769      	b.n	800149a <_vprintf+0x2e>
 80015c6:	9901      	ldr	r1, [sp, #4]
 80015c8:	074d      	lsls	r5, r1, #29
 80015ca:	bf4b      	itete	mi
 80015cc:	3407      	addmi	r4, #7
 80015ce:	4625      	movpl	r5, r4
 80015d0:	f024 0407 	bicmi.w	r4, r4, #7
 80015d4:	f855 2b04 	ldrpl.w	r2, [r5], #4
 80015d8:	bf45      	ittet	mi
 80015da:	6863      	ldrmi	r3, [r4, #4]
 80015dc:	4625      	movmi	r5, r4
 80015de:	17d3      	asrpl	r3, r2, #31
 80015e0:	f855 2b08 	ldrmi.w	r2, [r5], #8
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	da05      	bge.n	80015f4 <_vprintf+0x188>
 80015e8:	f041 0108 	orr.w	r1, r1, #8
 80015ec:	4252      	negs	r2, r2
 80015ee:	9101      	str	r1, [sp, #4]
 80015f0:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80015f4:	a801      	add	r0, sp, #4
 80015f6:	f7ff fe71 	bl	80012dc <_format_int>
 80015fa:	e7e1      	b.n	80015c0 <_vprintf+0x154>
 80015fc:	3407      	adds	r4, #7
 80015fe:	f024 0507 	bic.w	r5, r4, #7
 8001602:	e8f5 0102 	ldrd	r0, r1, [r5], #8
 8001606:	f7fe fdcf 	bl	80001a8 <__aeabi_d2f>
 800160a:	9b01      	ldr	r3, [sp, #4]
 800160c:	ee07 0a90 	vmov	s15, r0
 8001610:	07dc      	lsls	r4, r3, #31
 8001612:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001616:	bf4c      	ite	mi
 8001618:	9c02      	ldrmi	r4, [sp, #8]
 800161a:	2406      	movpl	r4, #6
 800161c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001620:	bf48      	it	mi
 8001622:	eef1 7a67 	vnegmi.f32	s15, s15
 8001626:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800162a:	bf4a      	itet	mi
 800162c:	f10d 0a19 	addmi.w	sl, sp, #25
 8001630:	46ba      	movpl	sl, r7
 8001632:	232d      	movmi	r3, #45	; 0x2d
 8001634:	ee17 0a10 	vmov	r0, s14
 8001638:	f04f 0200 	mov.w	r2, #0
 800163c:	4651      	mov	r1, sl
 800163e:	bf48      	it	mi
 8001640:	f88d 3018 	strbmi.w	r3, [sp, #24]
 8001644:	f7ff fdf8 	bl	8001238 <_itostr>
 8001648:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800164c:	232e      	movs	r3, #46	; 0x2e
 800164e:	f80a 3000 	strb.w	r3, [sl, r0]
 8001652:	eb0a 0900 	add.w	r9, sl, r0
 8001656:	230a      	movs	r3, #10
 8001658:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800165c:	1c62      	adds	r2, r4, #1
 800165e:	f109 0901 	add.w	r9, r9, #1
 8001662:	4619      	mov	r1, r3
 8001664:	2c00      	cmp	r4, #0
 8001666:	dc3d      	bgt.n	80016e4 <_vprintf+0x278>
 8001668:	ee07 3a10 	vmov	s14, r3
 800166c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8001670:	4649      	mov	r1, r9
 8001672:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001676:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800167a:	ee17 0a90 	vmov	r0, s15
 800167e:	f7ff fddb 	bl	8001238 <_itostr>
 8001682:	4448      	add	r0, r9
 8001684:	1bc0      	subs	r0, r0, r7
 8001686:	1e44      	subs	r4, r0, #1
 8001688:	193a      	adds	r2, r7, r4
 800168a:	5d3b      	ldrb	r3, [r7, r4]
 800168c:	2b34      	cmp	r3, #52	; 0x34
 800168e:	d911      	bls.n	80016b4 <_vprintf+0x248>
 8001690:	f812 1c01 	ldrb.w	r1, [r2, #-1]
 8001694:	292e      	cmp	r1, #46	; 0x2e
 8001696:	f102 33ff 	add.w	r3, r2, #4294967295	; 0xffffffff
 800169a:	d029      	beq.n	80016f0 <_vprintf+0x284>
 800169c:	469c      	mov	ip, r3
 800169e:	f04f 0e30 	mov.w	lr, #48	; 0x30
 80016a2:	4663      	mov	r3, ip
 80016a4:	f81c 1901 	ldrb.w	r1, [ip], #-1
 80016a8:	2939      	cmp	r1, #57	; 0x39
 80016aa:	d01e      	beq.n	80016ea <_vprintf+0x27e>
 80016ac:	292e      	cmp	r1, #46	; 0x2e
 80016ae:	d01f      	beq.n	80016f0 <_vprintf+0x284>
 80016b0:	3101      	adds	r1, #1
 80016b2:	7019      	strb	r1, [r3, #0]
 80016b4:	f104 0358 	add.w	r3, r4, #88	; 0x58
 80016b8:	446b      	add	r3, sp
 80016ba:	f813 3c41 	ldrb.w	r3, [r3, #-65]
 80016be:	2b2e      	cmp	r3, #46	; 0x2e
 80016c0:	bf08      	it	eq
 80016c2:	f104 34ff 	addeq.w	r4, r4, #4294967295	; 0xffffffff
 80016c6:	46a1      	mov	r9, r4
 80016c8:	9b03      	ldr	r3, [sp, #12]
 80016ca:	4599      	cmp	r9, r3
 80016cc:	db3b      	blt.n	8001746 <_vprintf+0x2da>
 80016ce:	46b9      	mov	r9, r7
 80016d0:	2c00      	cmp	r4, #0
 80016d2:	f77f af75 	ble.w	80015c0 <_vprintf+0x154>
 80016d6:	f819 1b01 	ldrb.w	r1, [r9], #1
 80016da:	a801      	add	r0, sp, #4
 80016dc:	f7ff fde6 	bl	80012ac <_xputch>
 80016e0:	3c01      	subs	r4, #1
 80016e2:	e7f5      	b.n	80016d0 <_vprintf+0x264>
 80016e4:	434b      	muls	r3, r1
 80016e6:	3c01      	subs	r4, #1
 80016e8:	e7bc      	b.n	8001664 <_vprintf+0x1f8>
 80016ea:	f88c e001 	strb.w	lr, [ip, #1]
 80016ee:	e7d8      	b.n	80016a2 <_vprintf+0x236>
 80016f0:	3b01      	subs	r3, #1
 80016f2:	f04f 0c30 	mov.w	ip, #48	; 0x30
 80016f6:	7819      	ldrb	r1, [r3, #0]
 80016f8:	2939      	cmp	r1, #57	; 0x39
 80016fa:	d112      	bne.n	8001722 <_vprintf+0x2b6>
 80016fc:	42bb      	cmp	r3, r7
 80016fe:	d20d      	bcs.n	800171c <_vprintf+0x2b0>
 8001700:	1c5c      	adds	r4, r3, #1
 8001702:	1c99      	adds	r1, r3, #2
 8001704:	428c      	cmp	r4, r1
 8001706:	eba2 0203 	sub.w	r2, r2, r3
 800170a:	d913      	bls.n	8001734 <_vprintf+0x2c8>
 800170c:	4619      	mov	r1, r3
 800170e:	441a      	add	r2, r3
 8001710:	428a      	cmp	r2, r1
 8001712:	d10b      	bne.n	800172c <_vprintf+0x2c0>
 8001714:	2231      	movs	r2, #49	; 0x31
 8001716:	705a      	strb	r2, [r3, #1]
 8001718:	4604      	mov	r4, r0
 800171a:	e7cb      	b.n	80016b4 <_vprintf+0x248>
 800171c:	f803 c901 	strb.w	ip, [r3], #-1
 8001720:	e7e9      	b.n	80016f6 <_vprintf+0x28a>
 8001722:	42bb      	cmp	r3, r7
 8001724:	d3ec      	bcc.n	8001700 <_vprintf+0x294>
 8001726:	292d      	cmp	r1, #45	; 0x2d
 8001728:	d0ea      	beq.n	8001700 <_vprintf+0x294>
 800172a:	e7c1      	b.n	80016b0 <_vprintf+0x244>
 800172c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8001730:	704c      	strb	r4, [r1, #1]
 8001732:	e7ed      	b.n	8001710 <_vprintf+0x2a4>
 8001734:	4414      	add	r4, r2
 8001736:	440a      	add	r2, r1
 8001738:	428a      	cmp	r2, r1
 800173a:	d0eb      	beq.n	8001714 <_vprintf+0x2a8>
 800173c:	f814 cd01 	ldrb.w	ip, [r4, #-1]!
 8001740:	f802 cd01 	strb.w	ip, [r2, #-1]!
 8001744:	e7f8      	b.n	8001738 <_vprintf+0x2cc>
 8001746:	2120      	movs	r1, #32
 8001748:	a801      	add	r0, sp, #4
 800174a:	f7ff fdaf 	bl	80012ac <_xputch>
 800174e:	f109 0901 	add.w	r9, r9, #1
 8001752:	e7b9      	b.n	80016c8 <_vprintf+0x25c>
 8001754:	4625      	mov	r5, r4
 8001756:	2308      	movs	r3, #8
 8001758:	f855 4b04 	ldr.w	r4, [r5], #4
 800175c:	9303      	str	r3, [sp, #12]
 800175e:	2130      	movs	r1, #48	; 0x30
 8001760:	2320      	movs	r3, #32
 8001762:	a801      	add	r0, sp, #4
 8001764:	9301      	str	r3, [sp, #4]
 8001766:	f7ff fda1 	bl	80012ac <_xputch>
 800176a:	2178      	movs	r1, #120	; 0x78
 800176c:	a801      	add	r0, sp, #4
 800176e:	f7ff fd9d 	bl	80012ac <_xputch>
 8001772:	4621      	mov	r1, r4
 8001774:	a801      	add	r0, sp, #4
 8001776:	f7ff fe1b 	bl	80013b0 <_format_hex>
 800177a:	e721      	b.n	80015c0 <_vprintf+0x154>
 800177c:	4625      	mov	r5, r4
 800177e:	2400      	movs	r4, #0
 8001780:	f855 9b04 	ldr.w	r9, [r5], #4
 8001784:	f819 3004 	ldrb.w	r3, [r9, r4]
 8001788:	b993      	cbnz	r3, 80017b0 <_vprintf+0x344>
 800178a:	9b01      	ldr	r3, [sp, #4]
 800178c:	07d9      	lsls	r1, r3, #31
 800178e:	d503      	bpl.n	8001798 <_vprintf+0x32c>
 8001790:	9b02      	ldr	r3, [sp, #8]
 8001792:	429c      	cmp	r4, r3
 8001794:	bfa8      	it	ge
 8001796:	461c      	movge	r4, r3
 8001798:	9b01      	ldr	r3, [sp, #4]
 800179a:	065a      	lsls	r2, r3, #25
 800179c:	f104 0a01 	add.w	sl, r4, #1
 80017a0:	d403      	bmi.n	80017aa <_vprintf+0x33e>
 80017a2:	9b03      	ldr	r3, [sp, #12]
 80017a4:	429c      	cmp	r4, r3
 80017a6:	db05      	blt.n	80017b4 <_vprintf+0x348>
 80017a8:	4654      	mov	r4, sl
 80017aa:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 80017ae:	e00d      	b.n	80017cc <_vprintf+0x360>
 80017b0:	3401      	adds	r4, #1
 80017b2:	e7e7      	b.n	8001784 <_vprintf+0x318>
 80017b4:	2120      	movs	r1, #32
 80017b6:	a801      	add	r0, sp, #4
 80017b8:	f7ff fd78 	bl	80012ac <_xputch>
 80017bc:	4654      	mov	r4, sl
 80017be:	e7eb      	b.n	8001798 <_vprintf+0x32c>
 80017c0:	a801      	add	r0, sp, #4
 80017c2:	f7ff fd73 	bl	80012ac <_xputch>
 80017c6:	9b02      	ldr	r3, [sp, #8]
 80017c8:	3b01      	subs	r3, #1
 80017ca:	9302      	str	r3, [sp, #8]
 80017cc:	9b01      	ldr	r3, [sp, #4]
 80017ce:	07db      	lsls	r3, r3, #31
 80017d0:	d501      	bpl.n	80017d6 <_vprintf+0x36a>
 80017d2:	9b02      	ldr	r3, [sp, #8]
 80017d4:	b11b      	cbz	r3, 80017de <_vprintf+0x372>
 80017d6:	f819 1f01 	ldrb.w	r1, [r9, #1]!
 80017da:	2900      	cmp	r1, #0
 80017dc:	d1f0      	bne.n	80017c0 <_vprintf+0x354>
 80017de:	9b03      	ldr	r3, [sp, #12]
 80017e0:	429c      	cmp	r4, r3
 80017e2:	f6bf aeed 	bge.w	80015c0 <_vprintf+0x154>
 80017e6:	2120      	movs	r1, #32
 80017e8:	a801      	add	r0, sp, #4
 80017ea:	f7ff fd5f 	bl	80012ac <_xputch>
 80017ee:	3401      	adds	r4, #1
 80017f0:	e7f5      	b.n	80017de <_vprintf+0x372>
 80017f2:	9b01      	ldr	r3, [sp, #4]
 80017f4:	f013 0304 	ands.w	r3, r3, #4
 80017f8:	bf1d      	ittte	ne
 80017fa:	3407      	addne	r4, #7
 80017fc:	f024 0407 	bicne.w	r4, r4, #7
 8001800:	4625      	movne	r5, r4
 8001802:	4625      	moveq	r5, r4
 8001804:	bf1a      	itte	ne
 8001806:	f855 2b08 	ldrne.w	r2, [r5], #8
 800180a:	6863      	ldrne	r3, [r4, #4]
 800180c:	f855 2b04 	ldreq.w	r2, [r5], #4
 8001810:	e6f0      	b.n	80015f4 <_vprintf+0x188>
 8001812:	9b01      	ldr	r3, [sp, #4]
 8001814:	f043 0302 	orr.w	r3, r3, #2
 8001818:	9301      	str	r3, [sp, #4]
 800181a:	4625      	mov	r5, r4
 800181c:	f855 1b04 	ldr.w	r1, [r5], #4
 8001820:	e7a8      	b.n	8001774 <_vprintf+0x308>
 8001822:	bf00      	nop

08001824 <printf>:
 8001824:	b40f      	push	{r0, r1, r2, r3}
 8001826:	b507      	push	{r0, r1, r2, lr}
 8001828:	aa04      	add	r2, sp, #16
 800182a:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 800182e:	f852 1b04 	ldr.w	r1, [r2], #4
 8001832:	9201      	str	r2, [sp, #4]
 8001834:	f7ff fe1a 	bl	800146c <_vprintf>
 8001838:	b003      	add	sp, #12
 800183a:	f85d eb04 	ldr.w	lr, [sp], #4
 800183e:	b004      	add	sp, #16
 8001840:	4770      	bx	lr
	...

08001844 <snprintf>:
 8001844:	b40c      	push	{r2, r3}
 8001846:	b513      	push	{r0, r1, r4, lr}
 8001848:	4c09      	ldr	r4, [pc, #36]	; (8001870 <snprintf+0x2c>)
 800184a:	aa04      	add	r2, sp, #16
 800184c:	460b      	mov	r3, r1
 800184e:	6020      	str	r0, [r4, #0]
 8001850:	f852 1b04 	ldr.w	r1, [r2], #4
 8001854:	9201      	str	r2, [sp, #4]
 8001856:	4618      	mov	r0, r3
 8001858:	f7ff fe08 	bl	800146c <_vprintf>
 800185c:	6822      	ldr	r2, [r4, #0]
 800185e:	2300      	movs	r3, #0
 8001860:	7013      	strb	r3, [r2, #0]
 8001862:	6023      	str	r3, [r4, #0]
 8001864:	b002      	add	sp, #8
 8001866:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800186a:	b002      	add	sp, #8
 800186c:	4770      	bx	lr
 800186e:	bf00      	nop
 8001870:	200000f0 	strdcs	r0, [r0], -r0	; <UNPREDICTABLE>

08001874 <vsnprintf>:
 8001874:	b538      	push	{r3, r4, r5, lr}
 8001876:	4c06      	ldr	r4, [pc, #24]	; (8001890 <vsnprintf+0x1c>)
 8001878:	4605      	mov	r5, r0
 800187a:	4608      	mov	r0, r1
 800187c:	4611      	mov	r1, r2
 800187e:	461a      	mov	r2, r3
 8001880:	6025      	str	r5, [r4, #0]
 8001882:	f7ff fdf3 	bl	800146c <_vprintf>
 8001886:	6822      	ldr	r2, [r4, #0]
 8001888:	2300      	movs	r3, #0
 800188a:	7013      	strb	r3, [r2, #0]
 800188c:	6023      	str	r3, [r4, #0]
 800188e:	bd38      	pop	{r3, r4, r5, pc}
 8001890:	200000f0 	strdcs	r0, [r0], -r0	; <UNPREDICTABLE>

08001894 <puts>:
 8001894:	b508      	push	{r3, lr}
 8001896:	f005 ff71 	bl	800777c <console_puts>
 800189a:	200a      	movs	r0, #10
 800189c:	f005 ff6c 	bl	8007778 <console_putc>
 80018a0:	2001      	movs	r0, #1
 80018a2:	bd08      	pop	{r3, pc}

080018a4 <__udivmoddi4>:
 80018a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80018a8:	9e08      	ldr	r6, [sp, #32]
 80018aa:	460d      	mov	r5, r1
 80018ac:	4604      	mov	r4, r0
 80018ae:	460f      	mov	r7, r1
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d14a      	bne.n	800194a <__udivmoddi4+0xa6>
 80018b4:	428a      	cmp	r2, r1
 80018b6:	4694      	mov	ip, r2
 80018b8:	d965      	bls.n	8001986 <__udivmoddi4+0xe2>
 80018ba:	fab2 f382 	clz	r3, r2
 80018be:	b143      	cbz	r3, 80018d2 <__udivmoddi4+0x2e>
 80018c0:	fa02 fc03 	lsl.w	ip, r2, r3
 80018c4:	f1c3 0220 	rsb	r2, r3, #32
 80018c8:	409f      	lsls	r7, r3
 80018ca:	fa20 f202 	lsr.w	r2, r0, r2
 80018ce:	4317      	orrs	r7, r2
 80018d0:	409c      	lsls	r4, r3
 80018d2:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80018d6:	fa1f f58c 	uxth.w	r5, ip
 80018da:	fbb7 f1fe 	udiv	r1, r7, lr
 80018de:	0c22      	lsrs	r2, r4, #16
 80018e0:	fb0e 7711 	mls	r7, lr, r1, r7
 80018e4:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80018e8:	fb01 f005 	mul.w	r0, r1, r5
 80018ec:	4290      	cmp	r0, r2
 80018ee:	d90a      	bls.n	8001906 <__udivmoddi4+0x62>
 80018f0:	eb1c 0202 	adds.w	r2, ip, r2
 80018f4:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 80018f8:	f080 811c 	bcs.w	8001b34 <__udivmoddi4+0x290>
 80018fc:	4290      	cmp	r0, r2
 80018fe:	f240 8119 	bls.w	8001b34 <__udivmoddi4+0x290>
 8001902:	3902      	subs	r1, #2
 8001904:	4462      	add	r2, ip
 8001906:	1a12      	subs	r2, r2, r0
 8001908:	b2a4      	uxth	r4, r4
 800190a:	fbb2 f0fe 	udiv	r0, r2, lr
 800190e:	fb0e 2210 	mls	r2, lr, r0, r2
 8001912:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8001916:	fb00 f505 	mul.w	r5, r0, r5
 800191a:	42a5      	cmp	r5, r4
 800191c:	d90a      	bls.n	8001934 <__udivmoddi4+0x90>
 800191e:	eb1c 0404 	adds.w	r4, ip, r4
 8001922:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8001926:	f080 8107 	bcs.w	8001b38 <__udivmoddi4+0x294>
 800192a:	42a5      	cmp	r5, r4
 800192c:	f240 8104 	bls.w	8001b38 <__udivmoddi4+0x294>
 8001930:	4464      	add	r4, ip
 8001932:	3802      	subs	r0, #2
 8001934:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8001938:	1b64      	subs	r4, r4, r5
 800193a:	2100      	movs	r1, #0
 800193c:	b11e      	cbz	r6, 8001946 <__udivmoddi4+0xa2>
 800193e:	40dc      	lsrs	r4, r3
 8001940:	2300      	movs	r3, #0
 8001942:	e9c6 4300 	strd	r4, r3, [r6]
 8001946:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800194a:	428b      	cmp	r3, r1
 800194c:	d908      	bls.n	8001960 <__udivmoddi4+0xbc>
 800194e:	2e00      	cmp	r6, #0
 8001950:	f000 80ed 	beq.w	8001b2e <__udivmoddi4+0x28a>
 8001954:	2100      	movs	r1, #0
 8001956:	e9c6 0500 	strd	r0, r5, [r6]
 800195a:	4608      	mov	r0, r1
 800195c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001960:	fab3 f183 	clz	r1, r3
 8001964:	2900      	cmp	r1, #0
 8001966:	d149      	bne.n	80019fc <__udivmoddi4+0x158>
 8001968:	42ab      	cmp	r3, r5
 800196a:	d302      	bcc.n	8001972 <__udivmoddi4+0xce>
 800196c:	4282      	cmp	r2, r0
 800196e:	f200 80f8 	bhi.w	8001b62 <__udivmoddi4+0x2be>
 8001972:	1a84      	subs	r4, r0, r2
 8001974:	eb65 0203 	sbc.w	r2, r5, r3
 8001978:	2001      	movs	r0, #1
 800197a:	4617      	mov	r7, r2
 800197c:	2e00      	cmp	r6, #0
 800197e:	d0e2      	beq.n	8001946 <__udivmoddi4+0xa2>
 8001980:	e9c6 4700 	strd	r4, r7, [r6]
 8001984:	e7df      	b.n	8001946 <__udivmoddi4+0xa2>
 8001986:	b902      	cbnz	r2, 800198a <__udivmoddi4+0xe6>
 8001988:	deff      	udf	#255	; 0xff
 800198a:	fab2 f382 	clz	r3, r2
 800198e:	2b00      	cmp	r3, #0
 8001990:	f040 8090 	bne.w	8001ab4 <__udivmoddi4+0x210>
 8001994:	1a8a      	subs	r2, r1, r2
 8001996:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800199a:	fa1f fe8c 	uxth.w	lr, ip
 800199e:	2101      	movs	r1, #1
 80019a0:	fbb2 f5f7 	udiv	r5, r2, r7
 80019a4:	fb07 2015 	mls	r0, r7, r5, r2
 80019a8:	0c22      	lsrs	r2, r4, #16
 80019aa:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80019ae:	fb0e f005 	mul.w	r0, lr, r5
 80019b2:	4290      	cmp	r0, r2
 80019b4:	d908      	bls.n	80019c8 <__udivmoddi4+0x124>
 80019b6:	eb1c 0202 	adds.w	r2, ip, r2
 80019ba:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 80019be:	d202      	bcs.n	80019c6 <__udivmoddi4+0x122>
 80019c0:	4290      	cmp	r0, r2
 80019c2:	f200 80cb 	bhi.w	8001b5c <__udivmoddi4+0x2b8>
 80019c6:	4645      	mov	r5, r8
 80019c8:	1a12      	subs	r2, r2, r0
 80019ca:	b2a4      	uxth	r4, r4
 80019cc:	fbb2 f0f7 	udiv	r0, r2, r7
 80019d0:	fb07 2210 	mls	r2, r7, r0, r2
 80019d4:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80019d8:	fb0e fe00 	mul.w	lr, lr, r0
 80019dc:	45a6      	cmp	lr, r4
 80019de:	d908      	bls.n	80019f2 <__udivmoddi4+0x14e>
 80019e0:	eb1c 0404 	adds.w	r4, ip, r4
 80019e4:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 80019e8:	d202      	bcs.n	80019f0 <__udivmoddi4+0x14c>
 80019ea:	45a6      	cmp	lr, r4
 80019ec:	f200 80bb 	bhi.w	8001b66 <__udivmoddi4+0x2c2>
 80019f0:	4610      	mov	r0, r2
 80019f2:	eba4 040e 	sub.w	r4, r4, lr
 80019f6:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80019fa:	e79f      	b.n	800193c <__udivmoddi4+0x98>
 80019fc:	f1c1 0720 	rsb	r7, r1, #32
 8001a00:	408b      	lsls	r3, r1
 8001a02:	fa22 fc07 	lsr.w	ip, r2, r7
 8001a06:	ea4c 0c03 	orr.w	ip, ip, r3
 8001a0a:	fa05 f401 	lsl.w	r4, r5, r1
 8001a0e:	fa20 f307 	lsr.w	r3, r0, r7
 8001a12:	40fd      	lsrs	r5, r7
 8001a14:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8001a18:	4323      	orrs	r3, r4
 8001a1a:	fbb5 f8f9 	udiv	r8, r5, r9
 8001a1e:	fa1f fe8c 	uxth.w	lr, ip
 8001a22:	fb09 5518 	mls	r5, r9, r8, r5
 8001a26:	0c1c      	lsrs	r4, r3, #16
 8001a28:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8001a2c:	fb08 f50e 	mul.w	r5, r8, lr
 8001a30:	42a5      	cmp	r5, r4
 8001a32:	fa02 f201 	lsl.w	r2, r2, r1
 8001a36:	fa00 f001 	lsl.w	r0, r0, r1
 8001a3a:	d90b      	bls.n	8001a54 <__udivmoddi4+0x1b0>
 8001a3c:	eb1c 0404 	adds.w	r4, ip, r4
 8001a40:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8001a44:	f080 8088 	bcs.w	8001b58 <__udivmoddi4+0x2b4>
 8001a48:	42a5      	cmp	r5, r4
 8001a4a:	f240 8085 	bls.w	8001b58 <__udivmoddi4+0x2b4>
 8001a4e:	f1a8 0802 	sub.w	r8, r8, #2
 8001a52:	4464      	add	r4, ip
 8001a54:	1b64      	subs	r4, r4, r5
 8001a56:	b29d      	uxth	r5, r3
 8001a58:	fbb4 f3f9 	udiv	r3, r4, r9
 8001a5c:	fb09 4413 	mls	r4, r9, r3, r4
 8001a60:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8001a64:	fb03 fe0e 	mul.w	lr, r3, lr
 8001a68:	45a6      	cmp	lr, r4
 8001a6a:	d908      	bls.n	8001a7e <__udivmoddi4+0x1da>
 8001a6c:	eb1c 0404 	adds.w	r4, ip, r4
 8001a70:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8001a74:	d26c      	bcs.n	8001b50 <__udivmoddi4+0x2ac>
 8001a76:	45a6      	cmp	lr, r4
 8001a78:	d96a      	bls.n	8001b50 <__udivmoddi4+0x2ac>
 8001a7a:	3b02      	subs	r3, #2
 8001a7c:	4464      	add	r4, ip
 8001a7e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8001a82:	fba3 9502 	umull	r9, r5, r3, r2
 8001a86:	eba4 040e 	sub.w	r4, r4, lr
 8001a8a:	42ac      	cmp	r4, r5
 8001a8c:	46c8      	mov	r8, r9
 8001a8e:	46ae      	mov	lr, r5
 8001a90:	d356      	bcc.n	8001b40 <__udivmoddi4+0x29c>
 8001a92:	d053      	beq.n	8001b3c <__udivmoddi4+0x298>
 8001a94:	b156      	cbz	r6, 8001aac <__udivmoddi4+0x208>
 8001a96:	ebb0 0208 	subs.w	r2, r0, r8
 8001a9a:	eb64 040e 	sbc.w	r4, r4, lr
 8001a9e:	fa04 f707 	lsl.w	r7, r4, r7
 8001aa2:	40ca      	lsrs	r2, r1
 8001aa4:	40cc      	lsrs	r4, r1
 8001aa6:	4317      	orrs	r7, r2
 8001aa8:	e9c6 7400 	strd	r7, r4, [r6]
 8001aac:	4618      	mov	r0, r3
 8001aae:	2100      	movs	r1, #0
 8001ab0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001ab4:	f1c3 0120 	rsb	r1, r3, #32
 8001ab8:	fa02 fc03 	lsl.w	ip, r2, r3
 8001abc:	fa20 f201 	lsr.w	r2, r0, r1
 8001ac0:	fa25 f101 	lsr.w	r1, r5, r1
 8001ac4:	409d      	lsls	r5, r3
 8001ac6:	432a      	orrs	r2, r5
 8001ac8:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8001acc:	fa1f fe8c 	uxth.w	lr, ip
 8001ad0:	fbb1 f0f7 	udiv	r0, r1, r7
 8001ad4:	fb07 1510 	mls	r5, r7, r0, r1
 8001ad8:	0c11      	lsrs	r1, r2, #16
 8001ada:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8001ade:	fb00 f50e 	mul.w	r5, r0, lr
 8001ae2:	428d      	cmp	r5, r1
 8001ae4:	fa04 f403 	lsl.w	r4, r4, r3
 8001ae8:	d908      	bls.n	8001afc <__udivmoddi4+0x258>
 8001aea:	eb1c 0101 	adds.w	r1, ip, r1
 8001aee:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8001af2:	d22f      	bcs.n	8001b54 <__udivmoddi4+0x2b0>
 8001af4:	428d      	cmp	r5, r1
 8001af6:	d92d      	bls.n	8001b54 <__udivmoddi4+0x2b0>
 8001af8:	3802      	subs	r0, #2
 8001afa:	4461      	add	r1, ip
 8001afc:	1b49      	subs	r1, r1, r5
 8001afe:	b292      	uxth	r2, r2
 8001b00:	fbb1 f5f7 	udiv	r5, r1, r7
 8001b04:	fb07 1115 	mls	r1, r7, r5, r1
 8001b08:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8001b0c:	fb05 f10e 	mul.w	r1, r5, lr
 8001b10:	4291      	cmp	r1, r2
 8001b12:	d908      	bls.n	8001b26 <__udivmoddi4+0x282>
 8001b14:	eb1c 0202 	adds.w	r2, ip, r2
 8001b18:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8001b1c:	d216      	bcs.n	8001b4c <__udivmoddi4+0x2a8>
 8001b1e:	4291      	cmp	r1, r2
 8001b20:	d914      	bls.n	8001b4c <__udivmoddi4+0x2a8>
 8001b22:	3d02      	subs	r5, #2
 8001b24:	4462      	add	r2, ip
 8001b26:	1a52      	subs	r2, r2, r1
 8001b28:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8001b2c:	e738      	b.n	80019a0 <__udivmoddi4+0xfc>
 8001b2e:	4631      	mov	r1, r6
 8001b30:	4630      	mov	r0, r6
 8001b32:	e708      	b.n	8001946 <__udivmoddi4+0xa2>
 8001b34:	4639      	mov	r1, r7
 8001b36:	e6e6      	b.n	8001906 <__udivmoddi4+0x62>
 8001b38:	4610      	mov	r0, r2
 8001b3a:	e6fb      	b.n	8001934 <__udivmoddi4+0x90>
 8001b3c:	4548      	cmp	r0, r9
 8001b3e:	d2a9      	bcs.n	8001a94 <__udivmoddi4+0x1f0>
 8001b40:	ebb9 0802 	subs.w	r8, r9, r2
 8001b44:	eb65 0e0c 	sbc.w	lr, r5, ip
 8001b48:	3b01      	subs	r3, #1
 8001b4a:	e7a3      	b.n	8001a94 <__udivmoddi4+0x1f0>
 8001b4c:	4645      	mov	r5, r8
 8001b4e:	e7ea      	b.n	8001b26 <__udivmoddi4+0x282>
 8001b50:	462b      	mov	r3, r5
 8001b52:	e794      	b.n	8001a7e <__udivmoddi4+0x1da>
 8001b54:	4640      	mov	r0, r8
 8001b56:	e7d1      	b.n	8001afc <__udivmoddi4+0x258>
 8001b58:	46d0      	mov	r8, sl
 8001b5a:	e77b      	b.n	8001a54 <__udivmoddi4+0x1b0>
 8001b5c:	3d02      	subs	r5, #2
 8001b5e:	4462      	add	r2, ip
 8001b60:	e732      	b.n	80019c8 <__udivmoddi4+0x124>
 8001b62:	4608      	mov	r0, r1
 8001b64:	e70a      	b.n	800197c <__udivmoddi4+0xd8>
 8001b66:	4464      	add	r4, ip
 8001b68:	3802      	subs	r0, #2
 8001b6a:	e742      	b.n	80019f2 <__udivmoddi4+0x14e>

08001b6c <DMXReceiver::Run(short&)>:
 8001b6c:	4b23      	ldr	r3, [pc, #140]	; (8001bfc <DMXReceiver::Run(short&)+0x90>)
 8001b6e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8001b70:	460d      	mov	r5, r1
 8001b72:	7819      	ldrb	r1, [r3, #0]
 8001b74:	4606      	mov	r6, r0
 8001b76:	b121      	cbz	r1, 8001b82 <DMXReceiver::Run(short&)+0x16>
 8001b78:	2400      	movs	r4, #0
 8001b7a:	802c      	strh	r4, [r5, #0]
 8001b7c:	4620      	mov	r0, r4
 8001b7e:	b002      	add	sp, #8
 8001b80:	bd70      	pop	{r4, r5, r6, pc}
 8001b82:	9101      	str	r1, [sp, #4]
 8001b84:	f001 fc52 	bl	800342c <Dmx::GetUpdatesPerSecond(unsigned int)>
 8001b88:	9901      	ldr	r1, [sp, #4]
 8001b8a:	4604      	mov	r4, r0
 8001b8c:	b998      	cbnz	r0, 8001bb6 <DMXReceiver::Run(short&)+0x4a>
 8001b8e:	4e1c      	ldr	r6, [pc, #112]	; (8001c00 <DMXReceiver::Run(short&)+0x94>)
 8001b90:	7833      	ldrb	r3, [r6, #0]
 8001b92:	b15b      	cbz	r3, 8001bac <DMXReceiver::Run(short&)+0x40>
 8001b94:	4b1b      	ldr	r3, [pc, #108]	; (8001c04 <DMXReceiver::Run(short&)+0x98>)
 8001b96:	6818      	ldr	r0, [r3, #0]
 8001b98:	6803      	ldr	r3, [r0, #0]
 8001b9a:	4621      	mov	r1, r4
 8001b9c:	68db      	ldr	r3, [r3, #12]
 8001b9e:	4798      	blx	r3
 8001ba0:	4b19      	ldr	r3, [pc, #100]	; (8001c08 <DMXReceiver::Run(short&)+0x9c>)
 8001ba2:	7034      	strb	r4, [r6, #0]
 8001ba4:	6818      	ldr	r0, [r3, #0]
 8001ba6:	2102      	movs	r1, #2
 8001ba8:	f005 fe52 	bl	8007850 <LedBlink::SetMode(ledblink::Mode)>
 8001bac:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001bb0:	802b      	strh	r3, [r5, #0]
 8001bb2:	2400      	movs	r4, #0
 8001bb4:	e7e2      	b.n	8001b7c <DMXReceiver::Run(short&)+0x10>
 8001bb6:	4630      	mov	r0, r6
 8001bb8:	9101      	str	r1, [sp, #4]
 8001bba:	f001 fc23 	bl	8003404 <Dmx::GetDmxAvailable(unsigned int)>
 8001bbe:	2800      	cmp	r0, #0
 8001bc0:	d0da      	beq.n	8001b78 <DMXReceiver::Run(short&)+0xc>
 8001bc2:	4e10      	ldr	r6, [pc, #64]	; (8001c04 <DMXReceiver::Run(short&)+0x98>)
 8001bc4:	f8d0 3204 	ldr.w	r3, [r0, #516]	; 0x204
 8001bc8:	802b      	strh	r3, [r5, #0]
 8001bca:	1c44      	adds	r4, r0, #1
 8001bcc:	6830      	ldr	r0, [r6, #0]
 8001bce:	9901      	ldr	r1, [sp, #4]
 8001bd0:	6802      	ldr	r2, [r0, #0]
 8001bd2:	b29b      	uxth	r3, r3
 8001bd4:	6915      	ldr	r5, [r2, #16]
 8001bd6:	4622      	mov	r2, r4
 8001bd8:	47a8      	blx	r5
 8001bda:	4d09      	ldr	r5, [pc, #36]	; (8001c00 <DMXReceiver::Run(short&)+0x94>)
 8001bdc:	7829      	ldrb	r1, [r5, #0]
 8001bde:	2900      	cmp	r1, #0
 8001be0:	d1cc      	bne.n	8001b7c <DMXReceiver::Run(short&)+0x10>
 8001be2:	6830      	ldr	r0, [r6, #0]
 8001be4:	6803      	ldr	r3, [r0, #0]
 8001be6:	689b      	ldr	r3, [r3, #8]
 8001be8:	4798      	blx	r3
 8001bea:	2301      	movs	r3, #1
 8001bec:	702b      	strb	r3, [r5, #0]
 8001bee:	4b06      	ldr	r3, [pc, #24]	; (8001c08 <DMXReceiver::Run(short&)+0x9c>)
 8001bf0:	2103      	movs	r1, #3
 8001bf2:	6818      	ldr	r0, [r3, #0]
 8001bf4:	f005 fe2c 	bl	8007850 <LedBlink::SetMode(ledblink::Mode)>
 8001bf8:	e7c0      	b.n	8001b7c <DMXReceiver::Run(short&)+0x10>
 8001bfa:	bf00      	nop
 8001bfc:	2000020c 	andcs	r0, r0, ip, lsl #4
 8001c00:	20000204 	andcs	r0, r0, r4, lsl #4
 8001c04:	20000208 	andcs	r0, r0, r8, lsl #4
 8001c08:	200017dc 	ldrdcs	r1, [r0], -ip

08001c0c <RDMResponder::HandleResponse(unsigned char*)>:
 8001c0c:	780a      	ldrb	r2, [r1, #0]
 8001c0e:	2acc      	cmp	r2, #204	; 0xcc
 8001c10:	b510      	push	{r4, lr}
 8001c12:	d107      	bne.n	8001c24 <RDMResponder::HandleResponse(unsigned char*)+0x18>
 8001c14:	788c      	ldrb	r4, [r1, #2]
 8001c16:	3402      	adds	r4, #2
 8001c18:	4622      	mov	r2, r4
 8001c1a:	2000      	movs	r0, #0
 8001c1c:	f001 fc66 	bl	80034ec <Rdm::SendRawRespondMessage(unsigned int, unsigned char const*, unsigned int)>
 8001c20:	4620      	mov	r0, r4
 8001c22:	bd10      	pop	{r4, pc}
 8001c24:	2afe      	cmp	r2, #254	; 0xfe
 8001c26:	d105      	bne.n	8001c34 <RDMResponder::HandleResponse(unsigned char*)+0x28>
 8001c28:	2218      	movs	r2, #24
 8001c2a:	2000      	movs	r0, #0
 8001c2c:	f001 fc72 	bl	8003514 <Rdm::SendDiscoveryRespondMessage(unsigned int, unsigned char const*, unsigned int)>
 8001c30:	2418      	movs	r4, #24
 8001c32:	e7f5      	b.n	8001c20 <RDMResponder::HandleResponse(unsigned char*)+0x14>
 8001c34:	f06f 0402 	mvn.w	r4, #2
 8001c38:	e7f2      	b.n	8001c20 <RDMResponder::HandleResponse(unsigned char*)+0x14>
	...

08001c3c <RDMResponder::Run()>:
 8001c3c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8001c3e:	4604      	mov	r4, r0
 8001c40:	f10d 0106 	add.w	r1, sp, #6
 8001c44:	30cc      	adds	r0, #204	; 0xcc
 8001c46:	f7ff ff91 	bl	8001b6c <DMXReceiver::Run(short&)>
 8001c4a:	4e1f      	ldr	r6, [pc, #124]	; (8001cc8 <RDMResponder::Run()+0x8c>)
 8001c4c:	4601      	mov	r1, r0
 8001c4e:	6830      	ldr	r0, [r6, #0]
 8001c50:	8883      	ldrh	r3, [r0, #4]
 8001c52:	b153      	cbz	r3, 8001c6a <RDMResponder::Run()+0x2e>
 8001c54:	f9bd 2006 	ldrsh.w	r2, [sp, #6]
 8001c58:	1c53      	adds	r3, r2, #1
 8001c5a:	d120      	bne.n	8001c9e <RDMResponder::Run()+0x62>
 8001c5c:	4d1b      	ldr	r5, [pc, #108]	; (8001ccc <RDMResponder::Run()+0x90>)
 8001c5e:	782b      	ldrb	r3, [r5, #0]
 8001c60:	b11b      	cbz	r3, 8001c6a <RDMResponder::Run()+0x2e>
 8001c62:	f000 ff31 	bl	8002ac8 <RDMSubDevices::Stop()>
 8001c66:	2300      	movs	r3, #0
 8001c68:	702b      	strb	r3, [r5, #0]
 8001c6a:	2000      	movs	r0, #0
 8001c6c:	f000 ffee 	bl	8002c4c <Rdm::Receive(unsigned int)>
 8001c70:	b198      	cbz	r0, 8001c9a <RDMResponder::Run()+0x5e>
 8001c72:	7803      	ldrb	r3, [r0, #0]
 8001c74:	2bcc      	cmp	r3, #204	; 0xcc
 8001c76:	d120      	bne.n	8001cba <RDMResponder::Run()+0x7e>
 8001c78:	7d03      	ldrb	r3, [r0, #20]
 8001c7a:	2b20      	cmp	r3, #32
 8001c7c:	d003      	beq.n	8001c86 <RDMResponder::Run()+0x4a>
 8001c7e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8001c82:	2b10      	cmp	r3, #16
 8001c84:	d11c      	bne.n	8001cc0 <RDMResponder::Run()+0x84>
 8001c86:	1c41      	adds	r1, r0, #1
 8001c88:	4a11      	ldr	r2, [pc, #68]	; (8001cd0 <RDMResponder::Run()+0x94>)
 8001c8a:	f104 00e8 	add.w	r0, r4, #232	; 0xe8
 8001c8e:	f002 fdb9 	bl	8004804 <RDMHandler::HandleData(unsigned char const*, unsigned char*)>
 8001c92:	490f      	ldr	r1, [pc, #60]	; (8001cd0 <RDMResponder::Run()+0x94>)
 8001c94:	4620      	mov	r0, r4
 8001c96:	f7ff ffb9 	bl	8001c0c <RDMResponder::HandleResponse(unsigned char*)>
 8001c9a:	b002      	add	sp, #8
 8001c9c:	bd70      	pop	{r4, r5, r6, pc}
 8001c9e:	2900      	cmp	r1, #0
 8001ca0:	d0e3      	beq.n	8001c6a <RDMResponder::Run()+0x2e>
 8001ca2:	4d0a      	ldr	r5, [pc, #40]	; (8001ccc <RDMResponder::Run()+0x90>)
 8001ca4:	b292      	uxth	r2, r2
 8001ca6:	f000 ff1f 	bl	8002ae8 <RDMSubDevices::SetData(unsigned char const*, unsigned int)>
 8001caa:	782b      	ldrb	r3, [r5, #0]
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d1dc      	bne.n	8001c6a <RDMResponder::Run()+0x2e>
 8001cb0:	6830      	ldr	r0, [r6, #0]
 8001cb2:	f000 fef9 	bl	8002aa8 <RDMSubDevices::Start()>
 8001cb6:	2301      	movs	r3, #1
 8001cb8:	e7d6      	b.n	8001c68 <RDMResponder::Run()+0x2c>
 8001cba:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001cbe:	e7ec      	b.n	8001c9a <RDMResponder::Run()+0x5e>
 8001cc0:	f06f 0001 	mvn.w	r0, #1
 8001cc4:	e7e9      	b.n	8001c9a <RDMResponder::Run()+0x5e>
 8001cc6:	bf00      	nop
 8001cc8:	20000200 	andcs	r0, r0, r0, lsl #4
 8001ccc:	200001f5 	strdcs	r0, [r0], -r5
 8001cd0:	200000f4 	strdcs	r0, [r0], -r4

08001cd4 <CpuTemperature::Initialize()>:
 8001cd4:	2001      	movs	r0, #1
 8001cd6:	4770      	bx	lr

08001cd8 <CpuTemperature::~CpuTemperature()>:
 8001cd8:	4770      	bx	lr

08001cda <CpuTemperature::GetValue()>:
 8001cda:	b508      	push	{r3, lr}
 8001cdc:	f007 f80e 	bl	8008cfc <gd32_adc_gettemp()>
 8001ce0:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8001ce4:	ee10 3a10 	vmov	r3, s0
 8001ce8:	b218      	sxth	r0, r3
 8001cea:	bd08      	pop	{r3, pc}

08001cec <CpuTemperature::~CpuTemperature()>:
 8001cec:	b510      	push	{r4, lr}
 8001cee:	4604      	mov	r4, r0
 8001cf0:	f005 fff5 	bl	8007cde <operator delete(void*)>
 8001cf4:	4620      	mov	r0, r4
 8001cf6:	bd10      	pop	{r4, pc}

08001cf8 <RDMSensors::RDMSensors()>:
 8001cf8:	4b12      	ldr	r3, [pc, #72]	; (8001d44 <RDMSensors::RDMSensors()+0x4c>)
 8001cfa:	b570      	push	{r4, r5, r6, lr}
 8001cfc:	2600      	movs	r6, #0
 8001cfe:	4604      	mov	r4, r0
 8001d00:	6018      	str	r0, [r3, #0]
 8001d02:	6006      	str	r6, [r0, #0]
 8001d04:	7106      	strb	r6, [r0, #4]
 8001d06:	2040      	movs	r0, #64	; 0x40
 8001d08:	f005 ffef 	bl	8007cea <operator new[](unsigned int)>
 8001d0c:	6020      	str	r0, [r4, #0]
 8001d0e:	2040      	movs	r0, #64	; 0x40
 8001d10:	f005 ffe9 	bl	8007ce6 <operator new(unsigned int)>
 8001d14:	7921      	ldrb	r1, [r4, #4]
 8001d16:	4605      	mov	r5, r0
 8001d18:	f000 fad8 	bl	80022cc <RDMSensor::RDMSensor(unsigned char)>
 8001d1c:	4b0a      	ldr	r3, [pc, #40]	; (8001d48 <RDMSensors::RDMSensors()+0x50>)
 8001d1e:	602b      	str	r3, [r5, #0]
 8001d20:	4b0a      	ldr	r3, [pc, #40]	; (8001d4c <RDMSensors::RDMSensors()+0x54>)
 8001d22:	60ab      	str	r3, [r5, #8]
 8001d24:	3354      	adds	r3, #84	; 0x54
 8001d26:	60eb      	str	r3, [r5, #12]
 8001d28:	4628      	mov	r0, r5
 8001d2a:	2355      	movs	r3, #85	; 0x55
 8001d2c:	4908      	ldr	r1, [pc, #32]	; (8001d50 <RDMSensors::RDMSensors()+0x58>)
 8001d2e:	822b      	strh	r3, [r5, #16]
 8001d30:	71ee      	strb	r6, [r5, #7]
 8001d32:	f000 fadd 	bl	80022f0 <RDMSensor::SetDescription(char const*)>
 8001d36:	4629      	mov	r1, r5
 8001d38:	4620      	mov	r0, r4
 8001d3a:	f000 f85b 	bl	8001df4 <RDMSensors::Add(RDMSensor*)>
 8001d3e:	4620      	mov	r0, r4
 8001d40:	bd70      	pop	{r4, r5, r6, pc}
 8001d42:	bf00      	nop
 8001d44:	200001fc 	strdcs	r0, [r0], -ip
 8001d48:	08009a44 	stmdaeq	r0, {r2, r6, r9, fp, ip, pc}
 8001d4c:	ffd80001 			; <UNDEFINED> instruction: 0xffd80001
 8001d50:	08009a35 	stmdaeq	r0, {r0, r2, r4, r5, r9, fp, ip, pc}

08001d54 <RDMSensors::~RDMSensors()>:
 8001d54:	b570      	push	{r4, r5, r6, lr}
 8001d56:	2500      	movs	r5, #0
 8001d58:	4604      	mov	r4, r0
 8001d5a:	462e      	mov	r6, r5
 8001d5c:	7923      	ldrb	r3, [r4, #4]
 8001d5e:	6820      	ldr	r0, [r4, #0]
 8001d60:	42ab      	cmp	r3, r5
 8001d62:	d804      	bhi.n	8001d6e <RDMSensors::~RDMSensors()+0x1a>
 8001d64:	b108      	cbz	r0, 8001d6a <RDMSensors::~RDMSensors()+0x16>
 8001d66:	f005 ffbc 	bl	8007ce2 <operator delete[](void*)>
 8001d6a:	4620      	mov	r0, r4
 8001d6c:	bd70      	pop	{r4, r5, r6, pc}
 8001d6e:	f850 0025 	ldr.w	r0, [r0, r5, lsl #2]
 8001d72:	b128      	cbz	r0, 8001d80 <RDMSensors::~RDMSensors()+0x2c>
 8001d74:	6803      	ldr	r3, [r0, #0]
 8001d76:	685b      	ldr	r3, [r3, #4]
 8001d78:	4798      	blx	r3
 8001d7a:	6823      	ldr	r3, [r4, #0]
 8001d7c:	f843 6025 	str.w	r6, [r3, r5, lsl #2]
 8001d80:	3501      	adds	r5, #1
 8001d82:	e7eb      	b.n	8001d5c <RDMSensors::~RDMSensors()+0x8>

08001d84 <RDMSensors::GetDefintion(unsigned char)>:
 8001d84:	6803      	ldr	r3, [r0, #0]
 8001d86:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
 8001d8a:	3006      	adds	r0, #6
 8001d8c:	4770      	bx	lr

08001d8e <RDMSensors::GetValues(unsigned char)>:
 8001d8e:	6803      	ldr	r3, [r0, #0]
 8001d90:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
 8001d94:	f000 baba 	b.w	800230c <RDMSensor::GetValues()>

08001d98 <RDMSensors::SetValues(unsigned char)>:
 8001d98:	29ff      	cmp	r1, #255	; 0xff
 8001d9a:	b538      	push	{r3, r4, r5, lr}
 8001d9c:	4604      	mov	r4, r0
 8001d9e:	d010      	beq.n	8001dc2 <RDMSensors::SetValues(unsigned char)+0x2a>
 8001da0:	6803      	ldr	r3, [r0, #0]
 8001da2:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
 8001da6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001daa:	f000 bac4 	b.w	8002336 <RDMSensor::SetValues()>
 8001dae:	6823      	ldr	r3, [r4, #0]
 8001db0:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8001db4:	f000 fabf 	bl	8002336 <RDMSensor::SetValues()>
 8001db8:	3501      	adds	r5, #1
 8001dba:	7923      	ldrb	r3, [r4, #4]
 8001dbc:	42ab      	cmp	r3, r5
 8001dbe:	d8f6      	bhi.n	8001dae <RDMSensors::SetValues(unsigned char)+0x16>
 8001dc0:	bd38      	pop	{r3, r4, r5, pc}
 8001dc2:	2500      	movs	r5, #0
 8001dc4:	e7f9      	b.n	8001dba <RDMSensors::SetValues(unsigned char)+0x22>

08001dc6 <RDMSensors::SetRecord(unsigned char)>:
 8001dc6:	29ff      	cmp	r1, #255	; 0xff
 8001dc8:	b538      	push	{r3, r4, r5, lr}
 8001dca:	4604      	mov	r4, r0
 8001dcc:	d010      	beq.n	8001df0 <RDMSensors::SetRecord(unsigned char)+0x2a>
 8001dce:	6803      	ldr	r3, [r0, #0]
 8001dd0:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
 8001dd4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001dd8:	f000 bab7 	b.w	800234a <RDMSensor::Record()>
 8001ddc:	6823      	ldr	r3, [r4, #0]
 8001dde:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8001de2:	f000 fab2 	bl	800234a <RDMSensor::Record()>
 8001de6:	3501      	adds	r5, #1
 8001de8:	7923      	ldrb	r3, [r4, #4]
 8001dea:	42ab      	cmp	r3, r5
 8001dec:	d8f6      	bhi.n	8001ddc <RDMSensors::SetRecord(unsigned char)+0x16>
 8001dee:	bd38      	pop	{r3, r4, r5, pc}
 8001df0:	2500      	movs	r5, #0
 8001df2:	e7f9      	b.n	8001de8 <RDMSensors::SetRecord(unsigned char)+0x22>

08001df4 <RDMSensors::Add(RDMSensor*)>:
 8001df4:	6803      	ldr	r3, [r0, #0]
 8001df6:	b510      	push	{r4, lr}
 8001df8:	b143      	cbz	r3, 8001e0c <RDMSensors::Add(RDMSensor*)+0x18>
 8001dfa:	7902      	ldrb	r2, [r0, #4]
 8001dfc:	2a10      	cmp	r2, #16
 8001dfe:	d005      	beq.n	8001e0c <RDMSensors::Add(RDMSensor*)+0x18>
 8001e00:	1c54      	adds	r4, r2, #1
 8001e02:	7104      	strb	r4, [r0, #4]
 8001e04:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8001e08:	2001      	movs	r0, #1
 8001e0a:	bd10      	pop	{r4, pc}
 8001e0c:	2000      	movs	r0, #0
 8001e0e:	e7fc      	b.n	8001e0a <RDMSensors::Add(RDMSensor*)+0x16>

08001e10 <RDMSensorBH170::Initialize()>:
 8001e10:	f890 0048 	ldrb.w	r0, [r0, #72]	; 0x48
 8001e14:	4770      	bx	lr

08001e16 <RDMSensorMCP9808::Initialize()>:
 8001e16:	f890 0048 	ldrb.w	r0, [r0, #72]	; 0x48
 8001e1a:	4770      	bx	lr

08001e1c <RDMSensorHTU21DHumidity::Initialize()>:
 8001e1c:	f890 0048 	ldrb.w	r0, [r0, #72]	; 0x48
 8001e20:	4770      	bx	lr

08001e22 <RDMSensorHTU21DTemperature::Initialize()>:
 8001e22:	f890 0048 	ldrb.w	r0, [r0, #72]	; 0x48
 8001e26:	4770      	bx	lr

08001e28 <RDMSensorINA219Current::Initialize()>:
 8001e28:	f890 0048 	ldrb.w	r0, [r0, #72]	; 0x48
 8001e2c:	4770      	bx	lr

08001e2e <RDMSensorINA219Power::Initialize()>:
 8001e2e:	f890 0048 	ldrb.w	r0, [r0, #72]	; 0x48
 8001e32:	4770      	bx	lr

08001e34 <RDMSensorINA219Voltage::Initialize()>:
 8001e34:	f890 0048 	ldrb.w	r0, [r0, #72]	; 0x48
 8001e38:	4770      	bx	lr

08001e3a <RDMSensorSI7021Humidity::Initialize()>:
 8001e3a:	f890 0048 	ldrb.w	r0, [r0, #72]	; 0x48
 8001e3e:	4770      	bx	lr

08001e40 <RDMSensorSI7021Temperature::Initialize()>:
 8001e40:	f890 0048 	ldrb.w	r0, [r0, #72]	; 0x48
 8001e44:	4770      	bx	lr

08001e46 <RDMSensorSI7021Temperature::GetValue()>:
 8001e46:	b508      	push	{r3, lr}
 8001e48:	3040      	adds	r0, #64	; 0x40
 8001e4a:	f000 fd8d 	bl	8002968 <sensor::SI7021::GetTemperature()>
 8001e4e:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8001e52:	ee10 3a10 	vmov	r3, s0
 8001e56:	b218      	sxth	r0, r3
 8001e58:	bd08      	pop	{r3, pc}

08001e5a <RDMSensorSI7021Humidity::GetValue()>:
 8001e5a:	b508      	push	{r3, lr}
 8001e5c:	3040      	adds	r0, #64	; 0x40
 8001e5e:	f000 fd97 	bl	8002990 <sensor::SI7021::GetHumidity()>
 8001e62:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8001e66:	ee10 3a10 	vmov	r3, s0
 8001e6a:	b218      	sxth	r0, r3
 8001e6c:	bd08      	pop	{r3, pc}
	...

08001e70 <RDMSensorINA219Voltage::GetValue()>:
 8001e70:	b508      	push	{r3, lr}
 8001e72:	3040      	adds	r0, #64	; 0x40
 8001e74:	f000 fc84 	bl	8002780 <sensor::INA219::GetBusVoltage()>
 8001e78:	eddf 7a04 	vldr	s15, [pc, #16]	; 8001e8c <RDMSensorINA219Voltage::GetValue()+0x1c>
 8001e7c:	ee20 0a27 	vmul.f32	s0, s0, s15
 8001e80:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8001e84:	ee10 3a10 	vmov	r3, s0
 8001e88:	b218      	sxth	r0, r3
 8001e8a:	bd08      	pop	{r3, pc}
 8001e8c:	447a0000 	ldrbtmi	r0, [sl], #-0

08001e90 <RDMSensorINA219Power::GetValue()>:
 8001e90:	b508      	push	{r3, lr}
 8001e92:	3040      	adds	r0, #64	; 0x40
 8001e94:	f000 fc82 	bl	800279c <sensor::INA219::GetBusPower()>
 8001e98:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8001e9c:	ee10 3a10 	vmov	r3, s0
 8001ea0:	b218      	sxth	r0, r3
 8001ea2:	bd08      	pop	{r3, pc}

08001ea4 <RDMSensorINA219Current::GetValue()>:
 8001ea4:	b508      	push	{r3, lr}
 8001ea6:	3040      	adds	r0, #64	; 0x40
 8001ea8:	f000 fc4e 	bl	8002748 <sensor::INA219::GetShuntCurrent()>
 8001eac:	eddf 7a04 	vldr	s15, [pc, #16]	; 8001ec0 <RDMSensorINA219Current::GetValue()+0x1c>
 8001eb0:	ee20 0a27 	vmul.f32	s0, s0, s15
 8001eb4:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8001eb8:	ee10 3a10 	vmov	r3, s0
 8001ebc:	b218      	sxth	r0, r3
 8001ebe:	bd08      	pop	{r3, pc}
 8001ec0:	447a0000 	ldrbtmi	r0, [sl], #-0

08001ec4 <RDMSensorHTU21DTemperature::GetValue()>:
 8001ec4:	b508      	push	{r3, lr}
 8001ec6:	3040      	adds	r0, #64	; 0x40
 8001ec8:	f000 fb1e 	bl	8002508 <sensor::HTU21D::GetTemperature()>
 8001ecc:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8001ed0:	ee10 3a10 	vmov	r3, s0
 8001ed4:	b218      	sxth	r0, r3
 8001ed6:	bd08      	pop	{r3, pc}

08001ed8 <RDMSensorHTU21DHumidity::GetValue()>:
 8001ed8:	b508      	push	{r3, lr}
 8001eda:	3040      	adds	r0, #64	; 0x40
 8001edc:	f000 fb28 	bl	8002530 <sensor::HTU21D::GetHumidity()>
 8001ee0:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8001ee4:	ee10 3a10 	vmov	r3, s0
 8001ee8:	b218      	sxth	r0, r3
 8001eea:	bd08      	pop	{r3, pc}

08001eec <RDMSensorMCP9808::GetValue()>:
 8001eec:	b508      	push	{r3, lr}
 8001eee:	3040      	adds	r0, #64	; 0x40
 8001ef0:	f000 fcc4 	bl	800287c <sensor::MCP9808::Get()>
 8001ef4:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8001ef8:	ee10 3a10 	vmov	r3, s0
 8001efc:	b218      	sxth	r0, r3
 8001efe:	bd08      	pop	{r3, pc}

08001f00 <RDMSensorBH170::GetValue()>:
 8001f00:	b508      	push	{r3, lr}
 8001f02:	3040      	adds	r0, #64	; 0x40
 8001f04:	f000 fa7a 	bl	80023fc <sensor::BH170::Get()>
 8001f08:	f3c0 000e 	ubfx	r0, r0, #0, #15
 8001f0c:	bd08      	pop	{r3, pc}

08001f0e <RDMSensorSI7021Temperature::~RDMSensorSI7021Temperature()>:
 8001f0e:	4770      	bx	lr

08001f10 <RDMSensorSI7021Temperature::~RDMSensorSI7021Temperature()>:
 8001f10:	b510      	push	{r4, lr}
 8001f12:	4604      	mov	r4, r0
 8001f14:	f005 fee3 	bl	8007cde <operator delete(void*)>
 8001f18:	4620      	mov	r0, r4
 8001f1a:	bd10      	pop	{r4, pc}

08001f1c <RDMSensorSI7021Humidity::~RDMSensorSI7021Humidity()>:
 8001f1c:	4770      	bx	lr

08001f1e <RDMSensorSI7021Humidity::~RDMSensorSI7021Humidity()>:
 8001f1e:	b510      	push	{r4, lr}
 8001f20:	4604      	mov	r4, r0
 8001f22:	f005 fedc 	bl	8007cde <operator delete(void*)>
 8001f26:	4620      	mov	r0, r4
 8001f28:	bd10      	pop	{r4, pc}

08001f2a <RDMSensorINA219Voltage::~RDMSensorINA219Voltage()>:
 8001f2a:	4770      	bx	lr

08001f2c <RDMSensorINA219Voltage::~RDMSensorINA219Voltage()>:
 8001f2c:	b510      	push	{r4, lr}
 8001f2e:	4604      	mov	r4, r0
 8001f30:	f005 fed5 	bl	8007cde <operator delete(void*)>
 8001f34:	4620      	mov	r0, r4
 8001f36:	bd10      	pop	{r4, pc}

08001f38 <RDMSensorINA219Power::~RDMSensorINA219Power()>:
 8001f38:	4770      	bx	lr

08001f3a <RDMSensorINA219Power::~RDMSensorINA219Power()>:
 8001f3a:	b510      	push	{r4, lr}
 8001f3c:	4604      	mov	r4, r0
 8001f3e:	f005 fece 	bl	8007cde <operator delete(void*)>
 8001f42:	4620      	mov	r0, r4
 8001f44:	bd10      	pop	{r4, pc}

08001f46 <RDMSensorINA219Current::~RDMSensorINA219Current()>:
 8001f46:	4770      	bx	lr

08001f48 <RDMSensorINA219Current::~RDMSensorINA219Current()>:
 8001f48:	b510      	push	{r4, lr}
 8001f4a:	4604      	mov	r4, r0
 8001f4c:	f005 fec7 	bl	8007cde <operator delete(void*)>
 8001f50:	4620      	mov	r0, r4
 8001f52:	bd10      	pop	{r4, pc}

08001f54 <RDMSensorHTU21DTemperature::~RDMSensorHTU21DTemperature()>:
 8001f54:	4770      	bx	lr

08001f56 <RDMSensorHTU21DTemperature::~RDMSensorHTU21DTemperature()>:
 8001f56:	b510      	push	{r4, lr}
 8001f58:	4604      	mov	r4, r0
 8001f5a:	f005 fec0 	bl	8007cde <operator delete(void*)>
 8001f5e:	4620      	mov	r0, r4
 8001f60:	bd10      	pop	{r4, pc}

08001f62 <RDMSensorHTU21DHumidity::~RDMSensorHTU21DHumidity()>:
 8001f62:	4770      	bx	lr

08001f64 <RDMSensorHTU21DHumidity::~RDMSensorHTU21DHumidity()>:
 8001f64:	b510      	push	{r4, lr}
 8001f66:	4604      	mov	r4, r0
 8001f68:	f005 feb9 	bl	8007cde <operator delete(void*)>
 8001f6c:	4620      	mov	r0, r4
 8001f6e:	bd10      	pop	{r4, pc}

08001f70 <RDMSensorMCP9808::~RDMSensorMCP9808()>:
 8001f70:	4770      	bx	lr

08001f72 <RDMSensorMCP9808::~RDMSensorMCP9808()>:
 8001f72:	b510      	push	{r4, lr}
 8001f74:	4604      	mov	r4, r0
 8001f76:	f005 feb2 	bl	8007cde <operator delete(void*)>
 8001f7a:	4620      	mov	r0, r4
 8001f7c:	bd10      	pop	{r4, pc}

08001f7e <RDMSensorBH170::~RDMSensorBH170()>:
 8001f7e:	4770      	bx	lr

08001f80 <RDMSensorBH170::~RDMSensorBH170()>:
 8001f80:	b510      	push	{r4, lr}
 8001f82:	4604      	mov	r4, r0
 8001f84:	f005 feab 	bl	8007cde <operator delete(void*)>
 8001f88:	4620      	mov	r0, r4
 8001f8a:	bd10      	pop	{r4, pc}

08001f8c <RDMSensorsParams::RDMSensorsParams(RDMSensorsParamsStore*)>:
 8001f8c:	6001      	str	r1, [r0, #0]
 8001f8e:	4770      	bx	lr

08001f90 <RDMSensorsParams::Load()>:
 8001f90:	b508      	push	{r3, lr}
 8001f92:	2300      	movs	r3, #0
 8001f94:	4601      	mov	r1, r0
 8001f96:	6043      	str	r3, [r0, #4]
 8001f98:	6800      	ldr	r0, [r0, #0]
 8001f9a:	b120      	cbz	r0, 8001fa6 <RDMSensorsParams::Load()+0x16>
 8001f9c:	6803      	ldr	r3, [r0, #0]
 8001f9e:	3104      	adds	r1, #4
 8001fa0:	68db      	ldr	r3, [r3, #12]
 8001fa2:	4798      	blx	r3
 8001fa4:	2001      	movs	r0, #1
 8001fa6:	bd08      	pop	{r3, pc}

08001fa8 <RDMSensorsParams::Dump()>:
 8001fa8:	4770      	bx	lr
	...

08001fac <RDMSensorsParams::Add(RDMSensor*)>:
 8001fac:	b538      	push	{r3, r4, r5, lr}
 8001fae:	680b      	ldr	r3, [r1, #0]
 8001fb0:	4608      	mov	r0, r1
 8001fb2:	689b      	ldr	r3, [r3, #8]
 8001fb4:	460c      	mov	r4, r1
 8001fb6:	4798      	blx	r3
 8001fb8:	4605      	mov	r5, r0
 8001fba:	b130      	cbz	r0, 8001fca <RDMSensorsParams::Add(RDMSensor*)+0x1e>
 8001fbc:	4b05      	ldr	r3, [pc, #20]	; (8001fd4 <RDMSensorsParams::Add(RDMSensor*)+0x28>)
 8001fbe:	4621      	mov	r1, r4
 8001fc0:	6818      	ldr	r0, [r3, #0]
 8001fc2:	f7ff ff17 	bl	8001df4 <RDMSensors::Add(RDMSensor*)>
 8001fc6:	4628      	mov	r0, r5
 8001fc8:	bd38      	pop	{r3, r4, r5, pc}
 8001fca:	6823      	ldr	r3, [r4, #0]
 8001fcc:	4620      	mov	r0, r4
 8001fce:	685b      	ldr	r3, [r3, #4]
 8001fd0:	4798      	blx	r3
 8001fd2:	e7f8      	b.n	8001fc6 <RDMSensorsParams::Add(RDMSensor*)+0x1a>
 8001fd4:	200001fc 	strdcs	r0, [r0], -ip

08001fd8 <RDMSensorsParams::Set()>:
 8001fd8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001fdc:	f8df b2e8 	ldr.w	fp, [pc, #744]	; 80022c8 <RDMSensorsParams::Set()+0x2f0>
 8001fe0:	4605      	mov	r5, r0
 8001fe2:	4607      	mov	r7, r0
 8001fe4:	f04f 0800 	mov.w	r8, #0
 8001fe8:	686b      	ldr	r3, [r5, #4]
 8001fea:	4543      	cmp	r3, r8
 8001fec:	d801      	bhi.n	8001ff2 <RDMSensorsParams::Set()+0x1a>
 8001fee:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001ff2:	4b9b      	ldr	r3, [pc, #620]	; (8002260 <RDMSensorsParams::Set()+0x288>)
 8001ff4:	7a7e      	ldrb	r6, [r7, #9]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	791c      	ldrb	r4, [r3, #4]
 8001ffa:	7a3b      	ldrb	r3, [r7, #8]
 8001ffc:	2b04      	cmp	r3, #4
 8001ffe:	d827      	bhi.n	8002050 <RDMSensorsParams::Set()+0x78>
 8002000:	e8df f013 	tbh	[pc, r3, lsl #1]
 8002004:	002a0005 	eoreq	r0, sl, r5
 8002008:	00d5006b 	sbcseq	r0, r5, fp, rrx
 800200c:	204c00f0 	strdcs	r0, [ip], #-0
 8002010:	f005 fe69 	bl	8007ce6 <operator new(unsigned int)>
 8002014:	4621      	mov	r1, r4
 8002016:	4681      	mov	r9, r0
 8002018:	f000 f958 	bl	80022cc <RDMSensor::RDMSensor(unsigned char)>
 800201c:	4631      	mov	r1, r6
 800201e:	f109 0040 	add.w	r0, r9, #64	; 0x40
 8002022:	f000 f9b7 	bl	8002394 <sensor::BH170::BH170(unsigned char)>
 8002026:	4b8f      	ldr	r3, [pc, #572]	; (8002264 <RDMSensorsParams::Set()+0x28c>)
 8002028:	f8c9 3000 	str.w	r3, [r9]
 800202c:	2318      	movs	r3, #24
 800202e:	f889 3007 	strb.w	r3, [r9, #7]
 8002032:	241a      	movs	r4, #26
 8002034:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8002038:	e9c9 4302 	strd	r4, r3, [r9, #8]
 800203c:	498a      	ldr	r1, [pc, #552]	; (8002268 <RDMSensorsParams::Set()+0x290>)
 800203e:	f8a9 3010 	strh.w	r3, [r9, #16]
 8002042:	4648      	mov	r0, r9
 8002044:	f000 f954 	bl	80022f0 <RDMSensor::SetDescription(char const*)>
 8002048:	4649      	mov	r1, r9
 800204a:	4628      	mov	r0, r5
 800204c:	f7ff ffae 	bl	8001fac <RDMSensorsParams::Add(RDMSensor*)>
 8002050:	f108 0801 	add.w	r8, r8, #1
 8002054:	3703      	adds	r7, #3
 8002056:	e7c7      	b.n	8001fe8 <RDMSensorsParams::Set()+0x10>
 8002058:	204c      	movs	r0, #76	; 0x4c
 800205a:	f005 fe44 	bl	8007ce6 <operator new(unsigned int)>
 800205e:	4621      	mov	r1, r4
 8002060:	4682      	mov	sl, r0
 8002062:	f000 f933 	bl	80022cc <RDMSensor::RDMSensor(unsigned char)>
 8002066:	4631      	mov	r1, r6
 8002068:	f10a 0040 	add.w	r0, sl, #64	; 0x40
 800206c:	f000 f9ea 	bl	8002444 <sensor::HTU21D::HTU21D(unsigned char)>
 8002070:	4a7e      	ldr	r2, [pc, #504]	; (800226c <RDMSensorsParams::Set()+0x294>)
 8002072:	f8ca 2000 	str.w	r2, [sl]
 8002076:	221f      	movs	r2, #31
 8002078:	f88a 2007 	strb.w	r2, [sl, #7]
 800207c:	f04f 0900 	mov.w	r9, #0
 8002080:	2264      	movs	r2, #100	; 0x64
 8002082:	497b      	ldr	r1, [pc, #492]	; (8002270 <RDMSensorsParams::Set()+0x298>)
 8002084:	f8aa 2010 	strh.w	r2, [sl, #16]
 8002088:	4650      	mov	r0, sl
 800208a:	e9ca 9202 	strd	r9, r2, [sl, #8]
 800208e:	f000 f92f 	bl	80022f0 <RDMSensor::SetDescription(char const*)>
 8002092:	4651      	mov	r1, sl
 8002094:	4628      	mov	r0, r5
 8002096:	f7ff ff89 	bl	8001fac <RDMSensorsParams::Add(RDMSensor*)>
 800209a:	2800      	cmp	r0, #0
 800209c:	d0d8      	beq.n	8002050 <RDMSensorsParams::Set()+0x78>
 800209e:	204c      	movs	r0, #76	; 0x4c
 80020a0:	f005 fe21 	bl	8007ce6 <operator new(unsigned int)>
 80020a4:	1c61      	adds	r1, r4, #1
 80020a6:	4682      	mov	sl, r0
 80020a8:	b2c9      	uxtb	r1, r1
 80020aa:	f000 f90f 	bl	80022cc <RDMSensor::RDMSensor(unsigned char)>
 80020ae:	4631      	mov	r1, r6
 80020b0:	f10a 0040 	add.w	r0, sl, #64	; 0x40
 80020b4:	f000 f9c6 	bl	8002444 <sensor::HTU21D::HTU21D(unsigned char)>
 80020b8:	4b6e      	ldr	r3, [pc, #440]	; (8002274 <RDMSensorsParams::Set()+0x29c>)
 80020ba:	4a6f      	ldr	r2, [pc, #444]	; (8002278 <RDMSensorsParams::Set()+0x2a0>)
 80020bc:	f8ca 2000 	str.w	r2, [sl]
 80020c0:	e9ca 3b02 	strd	r3, fp, [sl, #8]
 80020c4:	227d      	movs	r2, #125	; 0x7d
 80020c6:	496d      	ldr	r1, [pc, #436]	; (800227c <RDMSensorsParams::Set()+0x2a4>)
 80020c8:	f88a 9007 	strb.w	r9, [sl, #7]
 80020cc:	f8aa 2010 	strh.w	r2, [sl, #16]
 80020d0:	4650      	mov	r0, sl
 80020d2:	f000 f90d 	bl	80022f0 <RDMSensor::SetDescription(char const*)>
 80020d6:	4651      	mov	r1, sl
 80020d8:	e7b7      	b.n	800204a <RDMSensorsParams::Set()+0x72>
 80020da:	2060      	movs	r0, #96	; 0x60
 80020dc:	f005 fe03 	bl	8007ce6 <operator new(unsigned int)>
 80020e0:	4621      	mov	r1, r4
 80020e2:	4682      	mov	sl, r0
 80020e4:	f000 f8f2 	bl	80022cc <RDMSensor::RDMSensor(unsigned char)>
 80020e8:	4631      	mov	r1, r6
 80020ea:	f10a 0040 	add.w	r0, sl, #64	; 0x40
 80020ee:	f000 fae9 	bl	80026c4 <sensor::INA219::INA219(unsigned char)>
 80020f2:	4a63      	ldr	r2, [pc, #396]	; (8002280 <RDMSensorsParams::Set()+0x2a8>)
 80020f4:	f8ca 2000 	str.w	r2, [sl]
 80020f8:	4a62      	ldr	r2, [pc, #392]	; (8002284 <RDMSensorsParams::Set()+0x2ac>)
 80020fa:	f8ca 2008 	str.w	r2, [sl, #8]
 80020fe:	f202 42cb 	addw	r2, r2, #1227	; 0x4cb
 8002102:	f8ca 200c 	str.w	r2, [sl, #12]
 8002106:	f04f 0902 	mov.w	r9, #2
 800210a:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800210e:	495e      	ldr	r1, [pc, #376]	; (8002288 <RDMSensorsParams::Set()+0x2b0>)
 8002110:	f88a 9007 	strb.w	r9, [sl, #7]
 8002114:	4650      	mov	r0, sl
 8002116:	f8aa 2010 	strh.w	r2, [sl, #16]
 800211a:	f000 f8e9 	bl	80022f0 <RDMSensor::SetDescription(char const*)>
 800211e:	4651      	mov	r1, sl
 8002120:	4628      	mov	r0, r5
 8002122:	f7ff ff43 	bl	8001fac <RDMSensorsParams::Add(RDMSensor*)>
 8002126:	2800      	cmp	r0, #0
 8002128:	d092      	beq.n	8002050 <RDMSensorsParams::Set()+0x78>
 800212a:	2060      	movs	r0, #96	; 0x60
 800212c:	f005 fddb 	bl	8007ce6 <operator new(unsigned int)>
 8002130:	1c61      	adds	r1, r4, #1
 8002132:	4682      	mov	sl, r0
 8002134:	b2c9      	uxtb	r1, r1
 8002136:	f000 f8c9 	bl	80022cc <RDMSensor::RDMSensor(unsigned char)>
 800213a:	4631      	mov	r1, r6
 800213c:	f10a 0040 	add.w	r0, sl, #64	; 0x40
 8002140:	f000 fac0 	bl	80026c4 <sensor::INA219::INA219(unsigned char)>
 8002144:	4a51      	ldr	r2, [pc, #324]	; (800228c <RDMSensorsParams::Set()+0x2b4>)
 8002146:	f8ca 2000 	str.w	r2, [sl]
 800214a:	4a51      	ldr	r2, [pc, #324]	; (8002290 <RDMSensorsParams::Set()+0x2b8>)
 800214c:	f8ca 2008 	str.w	r2, [sl, #8]
 8002150:	f46f 7131 	mvn.w	r1, #708	; 0x2c4
 8002154:	440a      	add	r2, r1
 8002156:	f8ca 200c 	str.w	r2, [sl, #12]
 800215a:	2240      	movs	r2, #64	; 0x40
 800215c:	f8aa 2010 	strh.w	r2, [sl, #16]
 8002160:	4650      	mov	r0, sl
 8002162:	494c      	ldr	r1, [pc, #304]	; (8002294 <RDMSensorsParams::Set()+0x2bc>)
 8002164:	f88a 9007 	strb.w	r9, [sl, #7]
 8002168:	f000 f8c2 	bl	80022f0 <RDMSensor::SetDescription(char const*)>
 800216c:	4651      	mov	r1, sl
 800216e:	4628      	mov	r0, r5
 8002170:	f7ff ff1c 	bl	8001fac <RDMSensorsParams::Add(RDMSensor*)>
 8002174:	2060      	movs	r0, #96	; 0x60
 8002176:	f005 fdb6 	bl	8007ce6 <operator new(unsigned int)>
 800217a:	eb04 0109 	add.w	r1, r4, r9
 800217e:	4682      	mov	sl, r0
 8002180:	b2c9      	uxtb	r1, r1
 8002182:	f000 f8a3 	bl	80022cc <RDMSensor::RDMSensor(unsigned char)>
 8002186:	4631      	mov	r1, r6
 8002188:	f10a 0040 	add.w	r0, sl, #64	; 0x40
 800218c:	f000 fa9a 	bl	80026c4 <sensor::INA219::INA219(unsigned char)>
 8002190:	4a41      	ldr	r2, [pc, #260]	; (8002298 <RDMSensorsParams::Set()+0x2c0>)
 8002192:	4842      	ldr	r0, [pc, #264]	; (800229c <RDMSensorsParams::Set()+0x2c4>)
 8002194:	f8ca 2000 	str.w	r2, [sl]
 8002198:	4a41      	ldr	r2, [pc, #260]	; (80022a0 <RDMSensorsParams::Set()+0x2c8>)
 800219a:	4942      	ldr	r1, [pc, #264]	; (80022a4 <RDMSensorsParams::Set()+0x2cc>)
 800219c:	f88a 9007 	strb.w	r9, [sl, #7]
 80021a0:	e9ca 0202 	strd	r0, r2, [sl, #8]
 80021a4:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
 80021a8:	f8aa 2010 	strh.w	r2, [sl, #16]
 80021ac:	e790      	b.n	80020d0 <RDMSensorsParams::Set()+0xf8>
 80021ae:	204c      	movs	r0, #76	; 0x4c
 80021b0:	f005 fd99 	bl	8007ce6 <operator new(unsigned int)>
 80021b4:	4621      	mov	r1, r4
 80021b6:	4681      	mov	r9, r0
 80021b8:	f000 f888 	bl	80022cc <RDMSensor::RDMSensor(unsigned char)>
 80021bc:	4631      	mov	r1, r6
 80021be:	f109 0040 	add.w	r0, r9, #64	; 0x40
 80021c2:	f000 fb1d 	bl	8002800 <sensor::MCP9808::MCP9808(unsigned char)>
 80021c6:	4b38      	ldr	r3, [pc, #224]	; (80022a8 <RDMSensorsParams::Set()+0x2d0>)
 80021c8:	f8c9 3000 	str.w	r3, [r9]
 80021cc:	2300      	movs	r3, #0
 80021ce:	4a37      	ldr	r2, [pc, #220]	; (80022ac <RDMSensorsParams::Set()+0x2d4>)
 80021d0:	f889 3007 	strb.w	r3, [r9, #7]
 80021d4:	4b36      	ldr	r3, [pc, #216]	; (80022b0 <RDMSensorsParams::Set()+0x2d8>)
 80021d6:	4937      	ldr	r1, [pc, #220]	; (80022b4 <RDMSensorsParams::Set()+0x2dc>)
 80021d8:	e9c9 2302 	strd	r2, r3, [r9, #8]
 80021dc:	2328      	movs	r3, #40	; 0x28
 80021de:	f8a9 3010 	strh.w	r3, [r9, #16]
 80021e2:	e72e      	b.n	8002042 <RDMSensorsParams::Set()+0x6a>
 80021e4:	204c      	movs	r0, #76	; 0x4c
 80021e6:	f005 fd7e 	bl	8007ce6 <operator new(unsigned int)>
 80021ea:	4621      	mov	r1, r4
 80021ec:	4682      	mov	sl, r0
 80021ee:	f000 f86d 	bl	80022cc <RDMSensor::RDMSensor(unsigned char)>
 80021f2:	4631      	mov	r1, r6
 80021f4:	f10a 0040 	add.w	r0, sl, #64	; 0x40
 80021f8:	f000 fb54 	bl	80028a4 <sensor::SI7021::SI7021(unsigned char)>
 80021fc:	4a2e      	ldr	r2, [pc, #184]	; (80022b8 <RDMSensorsParams::Set()+0x2e0>)
 80021fe:	f8ca 2000 	str.w	r2, [sl]
 8002202:	221f      	movs	r2, #31
 8002204:	f88a 2007 	strb.w	r2, [sl, #7]
 8002208:	f04f 0900 	mov.w	r9, #0
 800220c:	2264      	movs	r2, #100	; 0x64
 800220e:	492b      	ldr	r1, [pc, #172]	; (80022bc <RDMSensorsParams::Set()+0x2e4>)
 8002210:	f8aa 2010 	strh.w	r2, [sl, #16]
 8002214:	4650      	mov	r0, sl
 8002216:	e9ca 9202 	strd	r9, r2, [sl, #8]
 800221a:	f000 f869 	bl	80022f0 <RDMSensor::SetDescription(char const*)>
 800221e:	4651      	mov	r1, sl
 8002220:	4628      	mov	r0, r5
 8002222:	f7ff fec3 	bl	8001fac <RDMSensorsParams::Add(RDMSensor*)>
 8002226:	2800      	cmp	r0, #0
 8002228:	f43f af12 	beq.w	8002050 <RDMSensorsParams::Set()+0x78>
 800222c:	204c      	movs	r0, #76	; 0x4c
 800222e:	f005 fd5a 	bl	8007ce6 <operator new(unsigned int)>
 8002232:	1c61      	adds	r1, r4, #1
 8002234:	4682      	mov	sl, r0
 8002236:	b2c9      	uxtb	r1, r1
 8002238:	f000 f848 	bl	80022cc <RDMSensor::RDMSensor(unsigned char)>
 800223c:	4631      	mov	r1, r6
 800223e:	f10a 0040 	add.w	r0, sl, #64	; 0x40
 8002242:	f000 fb2f 	bl	80028a4 <sensor::SI7021::SI7021(unsigned char)>
 8002246:	4a1e      	ldr	r2, [pc, #120]	; (80022c0 <RDMSensorsParams::Set()+0x2e8>)
 8002248:	4b0a      	ldr	r3, [pc, #40]	; (8002274 <RDMSensorsParams::Set()+0x29c>)
 800224a:	f8ca 2000 	str.w	r2, [sl]
 800224e:	227d      	movs	r2, #125	; 0x7d
 8002250:	e9ca 3b02 	strd	r3, fp, [sl, #8]
 8002254:	491b      	ldr	r1, [pc, #108]	; (80022c4 <RDMSensorsParams::Set()+0x2ec>)
 8002256:	f88a 9007 	strb.w	r9, [sl, #7]
 800225a:	f8aa 2010 	strh.w	r2, [sl, #16]
 800225e:	e737      	b.n	80020d0 <RDMSensorsParams::Set()+0xf8>
 8002260:	200001fc 	strdcs	r0, [r0], -ip
 8002264:	08009a5c 	stmdaeq	r0, {r2, r3, r4, r6, r9, fp, ip, pc}
 8002268:	08009b2c 	stmdaeq	r0, {r2, r3, r5, r8, r9, fp, ip, pc}
 800226c:	08009a8c 	stmdaeq	r0, {r2, r3, r7, r9, fp, ip, pc}
 8002270:	08009b4e 	stmdaeq	r0, {r1, r2, r3, r6, r8, r9, fp, ip, pc}
 8002274:	ffd80001 			; <UNDEFINED> instruction: 0xffd80001
 8002278:	08009aa4 	stmdaeq	r0, {r2, r5, r7, r9, fp, ip, pc}
 800227c:	08009b3a 	stmdaeq	r0, {r1, r3, r4, r5, r8, r9, fp, ip, pc}
 8002280:	08009abc 	stmdaeq	r0, {r2, r3, r4, r5, r7, r9, fp, ip, pc}
 8002284:	f8300305 			; <UNDEFINED> instruction: 0xf8300305
 8002288:	08009b66 	stmdaeq	r0, {r1, r2, r5, r6, r8, r9, fp, ip, pc}
 800228c:	08009ad4 	stmdaeq	r0, {r2, r4, r6, r7, r9, fp, ip, pc}
 8002290:	ffc00305 			; <UNDEFINED> instruction: 0xffc00305
 8002294:	08009b60 	stmdaeq	r0, {r5, r6, r8, r9, fp, ip, pc}
 8002298:	08009aec 	stmdaeq	r0, {r2, r3, r5, r6, r7, r9, fp, ip, pc}
 800229c:	83000305 	movwhi	r0, #773	; 0x305
 80022a0:	83007d00 	movwhi	r7, #3328	; 0xd00
 80022a4:	08009b6e 	stmdaeq	r0, {r1, r2, r3, r5, r6, r8, r9, fp, ip, pc}
 80022a8:	08009a74 	stmdaeq	r0, {r2, r4, r5, r6, r9, fp, ip, pc}
 80022ac:	ffec0001 			; <UNDEFINED> instruction: 0xffec0001
 80022b0:	00120064 	andseq	r0, r2, r4, rrx
 80022b4:	08009b9c 	stmdaeq	r0, {r2, r3, r4, r7, r8, r9, fp, ip, pc}
 80022b8:	08009b04 	stmdaeq	r0, {r2, r8, r9, fp, ip, pc}
 80022bc:	08009b8a 	stmdaeq	r0, {r1, r3, r7, r8, r9, fp, ip, pc}
 80022c0:	08009b1c 	stmdaeq	r0, {r2, r3, r4, r8, r9, fp, ip, pc}
 80022c4:	08009b76 	stmdaeq	r0, {r1, r2, r4, r5, r6, r8, r9, fp, ip, pc}
 80022c8:	ffd8007d 			; <UNDEFINED> instruction: 0xffd8007d

080022cc <RDMSensor::RDMSensor(unsigned char)>:
 80022cc:	4a07      	ldr	r2, [pc, #28]	; (80022ec <RDMSensor::RDMSensor(unsigned char)+0x20>)
 80022ce:	6002      	str	r2, [r0, #0]
 80022d0:	2203      	movs	r2, #3
 80022d2:	f880 2033 	strb.w	r2, [r0, #51]	; 0x33
 80022d6:	f647 72ff 	movw	r2, #32767	; 0x7fff
 80022da:	86c2      	strh	r2, [r0, #54]	; 0x36
 80022dc:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80022e0:	7101      	strb	r1, [r0, #4]
 80022e2:	7181      	strb	r1, [r0, #6]
 80022e4:	f880 103c 	strb.w	r1, [r0, #60]	; 0x3c
 80022e8:	8702      	strh	r2, [r0, #56]	; 0x38
 80022ea:	4770      	bx	lr
 80022ec:	08009bb8 	stmdaeq	r0, {r3, r4, r5, r7, r8, r9, fp, ip, pc}

080022f0 <RDMSensor::SetDescription(char const*)>:
 80022f0:	b510      	push	{r4, lr}
 80022f2:	2300      	movs	r3, #0
 80022f4:	f100 0411 	add.w	r4, r0, #17
 80022f8:	5cca      	ldrb	r2, [r1, r3]
 80022fa:	b122      	cbz	r2, 8002306 <RDMSensor::SetDescription(char const*)+0x16>
 80022fc:	3301      	adds	r3, #1
 80022fe:	2b20      	cmp	r3, #32
 8002300:	f804 2f01 	strb.w	r2, [r4, #1]!
 8002304:	d1f8      	bne.n	80022f8 <RDMSensor::SetDescription(char const*)+0x8>
 8002306:	f880 3032 	strb.w	r3, [r0, #50]	; 0x32
 800230a:	bd10      	pop	{r4, pc}

0800230c <RDMSensor::GetValues()>:
 800230c:	6803      	ldr	r3, [r0, #0]
 800230e:	b510      	push	{r4, lr}
 8002310:	68db      	ldr	r3, [r3, #12]
 8002312:	4604      	mov	r4, r0
 8002314:	4798      	blx	r3
 8002316:	f9b4 3036 	ldrsh.w	r3, [r4, #54]	; 0x36
 800231a:	86a0      	strh	r0, [r4, #52]	; 0x34
 800231c:	4283      	cmp	r3, r0
 800231e:	bfa8      	it	ge
 8002320:	4603      	movge	r3, r0
 8002322:	86e3      	strh	r3, [r4, #54]	; 0x36
 8002324:	f9b4 3038 	ldrsh.w	r3, [r4, #56]	; 0x38
 8002328:	4283      	cmp	r3, r0
 800232a:	bfb8      	it	lt
 800232c:	4603      	movlt	r3, r0
 800232e:	8723      	strh	r3, [r4, #56]	; 0x38
 8002330:	f104 0034 	add.w	r0, r4, #52	; 0x34
 8002334:	bd10      	pop	{r4, pc}

08002336 <RDMSensor::SetValues()>:
 8002336:	6803      	ldr	r3, [r0, #0]
 8002338:	b510      	push	{r4, lr}
 800233a:	68db      	ldr	r3, [r3, #12]
 800233c:	4604      	mov	r4, r0
 800233e:	4798      	blx	r3
 8002340:	86a0      	strh	r0, [r4, #52]	; 0x34
 8002342:	86e0      	strh	r0, [r4, #54]	; 0x36
 8002344:	8720      	strh	r0, [r4, #56]	; 0x38
 8002346:	8760      	strh	r0, [r4, #58]	; 0x3a
 8002348:	bd10      	pop	{r4, pc}

0800234a <RDMSensor::Record()>:
 800234a:	6803      	ldr	r3, [r0, #0]
 800234c:	b510      	push	{r4, lr}
 800234e:	68db      	ldr	r3, [r3, #12]
 8002350:	4604      	mov	r4, r0
 8002352:	4798      	blx	r3
 8002354:	f9b4 3036 	ldrsh.w	r3, [r4, #54]	; 0x36
 8002358:	86a0      	strh	r0, [r4, #52]	; 0x34
 800235a:	4283      	cmp	r3, r0
 800235c:	bfa8      	it	ge
 800235e:	4603      	movge	r3, r0
 8002360:	86e3      	strh	r3, [r4, #54]	; 0x36
 8002362:	f9b4 3038 	ldrsh.w	r3, [r4, #56]	; 0x38
 8002366:	8760      	strh	r0, [r4, #58]	; 0x3a
 8002368:	4283      	cmp	r3, r0
 800236a:	bfb8      	it	lt
 800236c:	4603      	movlt	r3, r0
 800236e:	8723      	strh	r3, [r4, #56]	; 0x38
 8002370:	bd10      	pop	{r4, pc}

08002372 <HAL_I2C::Write(char)>:
 8002372:	b513      	push	{r0, r1, r4, lr}
 8002374:	4604      	mov	r4, r0
 8002376:	7800      	ldrb	r0, [r0, #0]
 8002378:	f88d 1007 	strb.w	r1, [sp, #7]
 800237c:	f006 fd44 	bl	8008e08 <gd32_i2c_set_address>
 8002380:	6860      	ldr	r0, [r4, #4]
 8002382:	f006 fd39 	bl	8008df8 <gd32_i2c_set_baudrate>
 8002386:	2101      	movs	r1, #1
 8002388:	f10d 0007 	add.w	r0, sp, #7
 800238c:	f006 fd42 	bl	8008e14 <gd32_i2c_write>
 8002390:	b002      	add	sp, #8
 8002392:	bd10      	pop	{r4, pc}

08002394 <sensor::BH170::BH170(unsigned char)>:
 8002394:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002396:	1e0c      	subs	r4, r1, #0
 8002398:	bf08      	it	eq
 800239a:	2423      	moveq	r4, #35	; 0x23
 800239c:	4f16      	ldr	r7, [pc, #88]	; (80023f8 <sensor::BH170::BH170(unsigned char)+0x64>)
 800239e:	7004      	strb	r4, [r0, #0]
 80023a0:	2600      	movs	r6, #0
 80023a2:	6047      	str	r7, [r0, #4]
 80023a4:	7206      	strb	r6, [r0, #8]
 80023a6:	4605      	mov	r5, r0
 80023a8:	4620      	mov	r0, r4
 80023aa:	f006 fd2d 	bl	8008e08 <gd32_i2c_set_address>
 80023ae:	4638      	mov	r0, r7
 80023b0:	f006 fd22 	bl	8008df8 <gd32_i2c_set_baudrate>
 80023b4:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 80023b8:	2b07      	cmp	r3, #7
 80023ba:	d902      	bls.n	80023c2 <sensor::BH170::BH170(unsigned char)+0x2e>
 80023bc:	3c50      	subs	r4, #80	; 0x50
 80023be:	2c0f      	cmp	r4, #15
 80023c0:	d814      	bhi.n	80023ec <sensor::BH170::BH170(unsigned char)+0x58>
 80023c2:	2101      	movs	r1, #1
 80023c4:	f10d 0007 	add.w	r0, sp, #7
 80023c8:	f006 fd8a 	bl	8008ee0 <gd32_i2c_read>
 80023cc:	fab0 f080 	clz	r0, r0
 80023d0:	0940      	lsrs	r0, r0, #5
 80023d2:	7228      	strb	r0, [r5, #8]
 80023d4:	b138      	cbz	r0, 80023e6 <sensor::BH170::BH170(unsigned char)+0x52>
 80023d6:	2101      	movs	r1, #1
 80023d8:	4628      	mov	r0, r5
 80023da:	f7ff ffca 	bl	8002372 <HAL_I2C::Write(char)>
 80023de:	2110      	movs	r1, #16
 80023e0:	4628      	mov	r0, r5
 80023e2:	f7ff ffc6 	bl	8002372 <HAL_I2C::Write(char)>
 80023e6:	4628      	mov	r0, r5
 80023e8:	b003      	add	sp, #12
 80023ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80023ec:	4631      	mov	r1, r6
 80023ee:	4630      	mov	r0, r6
 80023f0:	f006 fd10 	bl	8008e14 <gd32_i2c_write>
 80023f4:	e7ea      	b.n	80023cc <sensor::BH170::BH170(unsigned char)+0x38>
 80023f6:	bf00      	nop
 80023f8:	00061a80 	andeq	r1, r6, r0, lsl #21

080023fc <sensor::BH170::Get()>:
 80023fc:	b513      	push	{r0, r1, r4, lr}
 80023fe:	4604      	mov	r4, r0
 8002400:	2300      	movs	r3, #0
 8002402:	7800      	ldrb	r0, [r0, #0]
 8002404:	f8ad 3004 	strh.w	r3, [sp, #4]
 8002408:	f006 fcfe 	bl	8008e08 <gd32_i2c_set_address>
 800240c:	6860      	ldr	r0, [r4, #4]
 800240e:	f006 fcf3 	bl	8008df8 <gd32_i2c_set_baudrate>
 8002412:	2102      	movs	r1, #2
 8002414:	a801      	add	r0, sp, #4
 8002416:	f006 fd63 	bl	8008ee0 <gd32_i2c_read>
 800241a:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 800241e:	eddf 6a08 	vldr	s13, [pc, #32]	; 8002440 <sensor::BH170::Get()+0x44>
 8002422:	ba5b      	rev16	r3, r3
 8002424:	b29b      	uxth	r3, r3
 8002426:	ee07 3a90 	vmov	s15, r3
 800242a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800242e:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8002432:	eefc 7ac7 	vcvt.u32.f32	s15, s14
 8002436:	ee17 3a90 	vmov	r3, s15
 800243a:	b298      	uxth	r0, r3
 800243c:	b002      	add	sp, #8
 800243e:	bd10      	pop	{r4, pc}
 8002440:	3f99999a 	svccc	0x0099999a

08002444 <sensor::HTU21D::HTU21D(unsigned char)>:
 8002444:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002446:	1e0c      	subs	r4, r1, #0
 8002448:	bf08      	it	eq
 800244a:	2440      	moveq	r4, #64	; 0x40
 800244c:	4f11      	ldr	r7, [pc, #68]	; (8002494 <sensor::HTU21D::HTU21D(unsigned char)+0x50>)
 800244e:	7004      	strb	r4, [r0, #0]
 8002450:	2600      	movs	r6, #0
 8002452:	6047      	str	r7, [r0, #4]
 8002454:	7206      	strb	r6, [r0, #8]
 8002456:	4605      	mov	r5, r0
 8002458:	4620      	mov	r0, r4
 800245a:	f006 fcd5 	bl	8008e08 <gd32_i2c_set_address>
 800245e:	4638      	mov	r0, r7
 8002460:	f006 fcca 	bl	8008df8 <gd32_i2c_set_baudrate>
 8002464:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8002468:	2b07      	cmp	r3, #7
 800246a:	d902      	bls.n	8002472 <sensor::HTU21D::HTU21D(unsigned char)+0x2e>
 800246c:	3c50      	subs	r4, #80	; 0x50
 800246e:	2c0f      	cmp	r4, #15
 8002470:	d80b      	bhi.n	800248a <sensor::HTU21D::HTU21D(unsigned char)+0x46>
 8002472:	2101      	movs	r1, #1
 8002474:	f10d 0007 	add.w	r0, sp, #7
 8002478:	f006 fd32 	bl	8008ee0 <gd32_i2c_read>
 800247c:	fab0 f380 	clz	r3, r0
 8002480:	095b      	lsrs	r3, r3, #5
 8002482:	4628      	mov	r0, r5
 8002484:	722b      	strb	r3, [r5, #8]
 8002486:	b003      	add	sp, #12
 8002488:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800248a:	4631      	mov	r1, r6
 800248c:	4630      	mov	r0, r6
 800248e:	f006 fcc1 	bl	8008e14 <gd32_i2c_write>
 8002492:	e7f3      	b.n	800247c <sensor::HTU21D::HTU21D(unsigned char)+0x38>
 8002494:	00061a80 	andeq	r1, r6, r0, lsl #21

08002498 <sensor::HTU21D::ReadRaw(unsigned char)>:
 8002498:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800249a:	4604      	mov	r4, r0
 800249c:	7800      	ldrb	r0, [r0, #0]
 800249e:	f88d 1004 	strb.w	r1, [sp, #4]
 80024a2:	f006 fcb1 	bl	8008e08 <gd32_i2c_set_address>
 80024a6:	6860      	ldr	r0, [r4, #4]
 80024a8:	f006 fca6 	bl	8008df8 <gd32_i2c_set_baudrate>
 80024ac:	2101      	movs	r1, #1
 80024ae:	a801      	add	r0, sp, #4
 80024b0:	f006 fcb0 	bl	8008e14 <gd32_i2c_write>
 80024b4:	4b13      	ldr	r3, [pc, #76]	; (8002504 <sensor::HTU21D::ReadRaw(unsigned char)+0x6c>)
 80024b6:	881b      	ldrh	r3, [r3, #0]
 80024b8:	f8ad 3004 	strh.w	r3, [sp, #4]
 80024bc:	2300      	movs	r3, #0
 80024be:	f88d 3006 	strb.w	r3, [sp, #6]
 80024c2:	2508      	movs	r5, #8
 80024c4:	2100      	movs	r1, #0
 80024c6:	f242 7010 	movw	r0, #10000	; 0x2710
 80024ca:	f006 ff61 	bl	8009390 <udelay(unsigned int, unsigned int)>
 80024ce:	7820      	ldrb	r0, [r4, #0]
 80024d0:	f006 fc9a 	bl	8008e08 <gd32_i2c_set_address>
 80024d4:	6860      	ldr	r0, [r4, #4]
 80024d6:	f006 fc8f 	bl	8008df8 <gd32_i2c_set_baudrate>
 80024da:	2103      	movs	r1, #3
 80024dc:	a801      	add	r0, sp, #4
 80024de:	f006 fcff 	bl	8008ee0 <gd32_i2c_read>
 80024e2:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80024e6:	f003 0303 	and.w	r3, r3, #3
 80024ea:	2b02      	cmp	r3, #2
 80024ec:	d001      	beq.n	80024f2 <sensor::HTU21D::ReadRaw(unsigned char)+0x5a>
 80024ee:	3d01      	subs	r5, #1
 80024f0:	d1e8      	bne.n	80024c4 <sensor::HTU21D::ReadRaw(unsigned char)+0x2c>
 80024f2:	f8bd 0004 	ldrh.w	r0, [sp, #4]
 80024f6:	ba40      	rev16	r0, r0
 80024f8:	f020 0003 	bic.w	r0, r0, #3
 80024fc:	b280      	uxth	r0, r0
 80024fe:	b003      	add	sp, #12
 8002500:	bd30      	pop	{r4, r5, pc}
 8002502:	bf00      	nop
 8002504:	080097dc 	stmdaeq	r0, {r2, r3, r4, r6, r7, r8, r9, sl, ip, pc}

08002508 <sensor::HTU21D::GetTemperature()>:
 8002508:	b508      	push	{r3, lr}
 800250a:	21f3      	movs	r1, #243	; 0xf3
 800250c:	f7ff ffc4 	bl	8002498 <sensor::HTU21D::ReadRaw(unsigned char)>
 8002510:	ee07 0a90 	vmov	s15, r0
 8002514:	ed9f 7a04 	vldr	s14, [pc, #16]	; 8002528 <sensor::HTU21D::GetTemperature()+0x20>
 8002518:	ed9f 0a04 	vldr	s0, [pc, #16]	; 800252c <sensor::HTU21D::GetTemperature()+0x24>
 800251c:	eefb 7ac8 	vcvt.f32.u32	s15, s15, #16
 8002520:	eea7 0a87 	vfma.f32	s0, s15, s14
 8002524:	bd08      	pop	{r3, pc}
 8002526:	bf00      	nop
 8002528:	432fb852 			; <UNDEFINED> instruction: 0x432fb852
 800252c:	c23b6666 	eorsgt	r6, fp, #106954752	; 0x6600000

08002530 <sensor::HTU21D::GetHumidity()>:
 8002530:	b508      	push	{r3, lr}
 8002532:	21f5      	movs	r1, #245	; 0xf5
 8002534:	f7ff ffb0 	bl	8002498 <sensor::HTU21D::ReadRaw(unsigned char)>
 8002538:	ee07 0a90 	vmov	s15, r0
 800253c:	ed9f 7a04 	vldr	s14, [pc, #16]	; 8002550 <sensor::HTU21D::GetHumidity()+0x20>
 8002540:	eefb 7ac8 	vcvt.f32.u32	s15, s15, #16
 8002544:	eeb9 0a08 	vmov.f32	s0, #152	; 0xc0c00000 -6.0
 8002548:	eea7 0a87 	vfma.f32	s0, s15, s14
 800254c:	bd08      	pop	{r3, pc}
 800254e:	bf00      	nop
 8002550:	42fa0000 	rscsmi	r0, sl, #0

08002554 <HAL_I2C::WriteRegister(unsigned char, unsigned short)>:
 8002554:	b513      	push	{r0, r1, r4, lr}
 8002556:	4604      	mov	r4, r0
 8002558:	0a13      	lsrs	r3, r2, #8
 800255a:	7800      	ldrb	r0, [r0, #0]
 800255c:	f88d 1004 	strb.w	r1, [sp, #4]
 8002560:	f88d 3005 	strb.w	r3, [sp, #5]
 8002564:	f88d 2006 	strb.w	r2, [sp, #6]
 8002568:	f006 fc4e 	bl	8008e08 <gd32_i2c_set_address>
 800256c:	6860      	ldr	r0, [r4, #4]
 800256e:	f006 fc43 	bl	8008df8 <gd32_i2c_set_baudrate>
 8002572:	2103      	movs	r1, #3
 8002574:	a801      	add	r0, sp, #4
 8002576:	f006 fc4d 	bl	8008e14 <gd32_i2c_write>
 800257a:	b002      	add	sp, #8
 800257c:	bd10      	pop	{r4, pc}

0800257e <HAL_I2C::ReadRegister16DelayUs(unsigned char, unsigned int)>:
 800257e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8002580:	4604      	mov	r4, r0
 8002582:	2600      	movs	r6, #0
 8002584:	7800      	ldrb	r0, [r0, #0]
 8002586:	f8ad 6004 	strh.w	r6, [sp, #4]
 800258a:	4615      	mov	r5, r2
 800258c:	f88d 1004 	strb.w	r1, [sp, #4]
 8002590:	f006 fc3a 	bl	8008e08 <gd32_i2c_set_address>
 8002594:	6860      	ldr	r0, [r4, #4]
 8002596:	f006 fc2f 	bl	8008df8 <gd32_i2c_set_baudrate>
 800259a:	2101      	movs	r1, #1
 800259c:	a801      	add	r0, sp, #4
 800259e:	f006 fc39 	bl	8008e14 <gd32_i2c_write>
 80025a2:	4631      	mov	r1, r6
 80025a4:	4628      	mov	r0, r5
 80025a6:	f006 fef3 	bl	8009390 <udelay(unsigned int, unsigned int)>
 80025aa:	2102      	movs	r1, #2
 80025ac:	a801      	add	r0, sp, #4
 80025ae:	f006 fc97 	bl	8008ee0 <gd32_i2c_read>
 80025b2:	f8bd 0004 	ldrh.w	r0, [sp, #4]
 80025b6:	ba40      	rev16	r0, r0
 80025b8:	b280      	uxth	r0, r0
 80025ba:	b002      	add	sp, #8
 80025bc:	bd70      	pop	{r4, r5, r6, pc}
	...

080025c0 <sensor::INA219::Configure(sensor::ina219::Config&)>:
 80025c0:	880b      	ldrh	r3, [r1, #0]
 80025c2:	b510      	push	{r4, lr}
 80025c4:	b1d3      	cbz	r3, 80025fc <sensor::INA219::Configure(sensor::ina219::Config&)+0x3c>
 80025c6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80025ca:	d102      	bne.n	80025d2 <sensor::INA219::Configure(sensor::ina219::Config&)+0x12>
 80025cc:	f04f 4284 	mov.w	r2, #1107296256	; 0x42000000
 80025d0:	6182      	str	r2, [r0, #24]
 80025d2:	884a      	ldrh	r2, [r1, #2]
 80025d4:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 80025d8:	d019      	beq.n	800260e <sensor::INA219::Configure(sensor::ina219::Config&)+0x4e>
 80025da:	d812      	bhi.n	8002602 <sensor::INA219::Configure(sensor::ina219::Config&)+0x42>
 80025dc:	b1da      	cbz	r2, 8002616 <sensor::INA219::Configure(sensor::ina219::Config&)+0x56>
 80025de:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 80025e2:	d016      	beq.n	8002612 <sensor::INA219::Configure(sensor::ina219::Config&)+0x52>
 80025e4:	431a      	orrs	r2, r3
 80025e6:	888b      	ldrh	r3, [r1, #4]
 80025e8:	431a      	orrs	r2, r3
 80025ea:	88cb      	ldrh	r3, [r1, #6]
 80025ec:	431a      	orrs	r2, r3
 80025ee:	890b      	ldrh	r3, [r1, #8]
 80025f0:	431a      	orrs	r2, r3
 80025f2:	b292      	uxth	r2, r2
 80025f4:	2100      	movs	r1, #0
 80025f6:	f7ff ffad 	bl	8002554 <HAL_I2C::WriteRegister(unsigned char, unsigned short)>
 80025fa:	bd10      	pop	{r4, pc}
 80025fc:	f04f 4283 	mov.w	r2, #1098907648	; 0x41800000
 8002600:	e7e6      	b.n	80025d0 <sensor::INA219::Configure(sensor::ina219::Config&)+0x10>
 8002602:	f5b2 5fc0 	cmp.w	r2, #6144	; 0x1800
 8002606:	d1ed      	bne.n	80025e4 <sensor::INA219::Configure(sensor::ina219::Config&)+0x24>
 8002608:	4c04      	ldr	r4, [pc, #16]	; (800261c <sensor::INA219::Configure(sensor::ina219::Config&)+0x5c>)
 800260a:	6144      	str	r4, [r0, #20]
 800260c:	e7ea      	b.n	80025e4 <sensor::INA219::Configure(sensor::ina219::Config&)+0x24>
 800260e:	4c04      	ldr	r4, [pc, #16]	; (8002620 <sensor::INA219::Configure(sensor::ina219::Config&)+0x60>)
 8002610:	e7fb      	b.n	800260a <sensor::INA219::Configure(sensor::ina219::Config&)+0x4a>
 8002612:	4c04      	ldr	r4, [pc, #16]	; (8002624 <sensor::INA219::Configure(sensor::ina219::Config&)+0x64>)
 8002614:	e7f9      	b.n	800260a <sensor::INA219::Configure(sensor::ina219::Config&)+0x4a>
 8002616:	4c04      	ldr	r4, [pc, #16]	; (8002628 <sensor::INA219::Configure(sensor::ina219::Config&)+0x68>)
 8002618:	e7f7      	b.n	800260a <sensor::INA219::Configure(sensor::ina219::Config&)+0x4a>
 800261a:	bf00      	nop
 800261c:	3ea3d70a 	cdpcc	7, 10, cr13, cr3, cr10, {0}
 8002620:	3e23d70a 	cdpcc	7, 2, cr13, cr3, cr10, {0}
 8002624:	3da3d70a 	stccc	7, cr13, [r3, #40]!	; 0x28
 8002628:	3d23d70a 	stccc	7, cr13, [r3, #-40]!	; 0xffffffd8

0800262c <sensor::INA219::Calibrate(float, float)>:
 800262c:	ed9f 7a21 	vldr	s14, [pc, #132]	; 80026b4 <sensor::INA219::Calibrate(float, float)+0x88>
 8002630:	eddf 6a21 	vldr	s13, [pc, #132]	; 80026b8 <sensor::INA219::Calibrate(float, float)+0x8c>
 8002634:	ed80 0a07 	vstr	s0, [r0, #28]
 8002638:	eec0 7a87 	vdiv.f32	s15, s1, s14
 800263c:	b508      	push	{r3, lr}
 800263e:	2105      	movs	r1, #5
 8002640:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 80026bc <sensor::INA219::Calibrate(float, float)+0x90>
 8002644:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002648:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800264c:	ee17 3a90 	vmov	r3, s15
 8002650:	b29b      	uxth	r3, r3
 8002652:	ee07 3a90 	vmov	s15, r3
 8002656:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800265a:	eec7 5a87 	vdiv.f32	s11, s15, s14
 800265e:	ee85 6aa6 	vdiv.f32	s12, s11, s13
 8002662:	eebd 7ac6 	vcvt.s32.f32	s14, s12
 8002666:	eef8 7ac7 	vcvt.f32.s32	s15, s14
 800266a:	eeb4 6a67 	vcmp.f32	s12, s15
 800266e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002672:	bf1f      	itttt	ne
 8002674:	ee17 3a10 	vmovne	r3, s14
 8002678:	3301      	addne	r3, #1
 800267a:	ee07 3a10 	vmovne	s14, r3
 800267e:	eef8 7ac7 	vcvtne.f32.s32	s15, s14
 8002682:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8002686:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800268a:	ee27 7a87 	vmul.f32	s14, s15, s14
 800268e:	ee27 0a80 	vmul.f32	s0, s15, s0
 8002692:	ed80 7a04 	vstr	s14, [r0, #16]
 8002696:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 80026c0 <sensor::INA219::Calibrate(float, float)+0x94>
 800269a:	edc0 7a03 	vstr	s15, [r0, #12]
 800269e:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80026a2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80026a6:	ee17 3a90 	vmov	r3, s15
 80026aa:	b29a      	uxth	r2, r3
 80026ac:	f7ff ff52 	bl	8002554 <HAL_I2C::WriteRegister(unsigned char, unsigned short)>
 80026b0:	bd08      	pop	{r3, pc}
 80026b2:	bf00      	nop
 80026b4:	46fffe00 	ldrbtmi	pc, [pc], r0, lsl #28	; <UNPREDICTABLE>
 80026b8:	38d1b717 	ldmcc	r1, {r0, r1, r2, r4, r8, r9, sl, ip, sp, pc}^
 80026bc:	4cbebc20 	ldcmi	12, cr11, [lr], #128	; 0x80
 80026c0:	3d27c5ac 	cfstr32cc	mvfx12, [r7, #-688]!	; 0xfffffd50

080026c4 <sensor::INA219::INA219(unsigned char)>:
 80026c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80026c6:	1e0c      	subs	r4, r1, #0
 80026c8:	bf08      	it	eq
 80026ca:	2440      	moveq	r4, #64	; 0x40
 80026cc:	4f1b      	ldr	r7, [pc, #108]	; (800273c <sensor::INA219::INA219(unsigned char)+0x78>)
 80026ce:	7004      	strb	r4, [r0, #0]
 80026d0:	2600      	movs	r6, #0
 80026d2:	b085      	sub	sp, #20
 80026d4:	6047      	str	r7, [r0, #4]
 80026d6:	7206      	strb	r6, [r0, #8]
 80026d8:	4605      	mov	r5, r0
 80026da:	4620      	mov	r0, r4
 80026dc:	f006 fb94 	bl	8008e08 <gd32_i2c_set_address>
 80026e0:	4638      	mov	r0, r7
 80026e2:	f006 fb89 	bl	8008df8 <gd32_i2c_set_baudrate>
 80026e6:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 80026ea:	2b07      	cmp	r3, #7
 80026ec:	d902      	bls.n	80026f4 <sensor::INA219::INA219(unsigned char)+0x30>
 80026ee:	3c50      	subs	r4, #80	; 0x50
 80026f0:	2c0f      	cmp	r4, #15
 80026f2:	d81d      	bhi.n	8002730 <sensor::INA219::INA219(unsigned char)+0x6c>
 80026f4:	2101      	movs	r1, #1
 80026f6:	a801      	add	r0, sp, #4
 80026f8:	f006 fbf2 	bl	8008ee0 <gd32_i2c_read>
 80026fc:	fab0 f080 	clz	r0, r0
 8002700:	0940      	lsrs	r0, r0, #5
 8002702:	7228      	strb	r0, [r5, #8]
 8002704:	b188      	cbz	r0, 800272a <sensor::INA219::INA219(unsigned char)+0x66>
 8002706:	4a0e      	ldr	r2, [pc, #56]	; (8002740 <sensor::INA219::INA219(unsigned char)+0x7c>)
 8002708:	6810      	ldr	r0, [r2, #0]
 800270a:	6851      	ldr	r1, [r2, #4]
 800270c:	8912      	ldrh	r2, [r2, #8]
 800270e:	ab01      	add	r3, sp, #4
 8002710:	c303      	stmia	r3!, {r0, r1}
 8002712:	4628      	mov	r0, r5
 8002714:	801a      	strh	r2, [r3, #0]
 8002716:	a901      	add	r1, sp, #4
 8002718:	f7ff ff52 	bl	80025c0 <sensor::INA219::Configure(sensor::ina219::Config&)>
 800271c:	ed9f 0a09 	vldr	s0, [pc, #36]	; 8002744 <sensor::INA219::INA219(unsigned char)+0x80>
 8002720:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 8002724:	4628      	mov	r0, r5
 8002726:	f7ff ff81 	bl	800262c <sensor::INA219::Calibrate(float, float)>
 800272a:	4628      	mov	r0, r5
 800272c:	b005      	add	sp, #20
 800272e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002730:	4631      	mov	r1, r6
 8002732:	4630      	mov	r0, r6
 8002734:	f006 fb6e 	bl	8008e14 <gd32_i2c_write>
 8002738:	e7e0      	b.n	80026fc <sensor::INA219::INA219(unsigned char)+0x38>
 800273a:	bf00      	nop
 800273c:	00061a80 	andeq	r1, r6, r0, lsl #21
 8002740:	080097e0 	stmdaeq	r0, {r5, r6, r7, r8, r9, sl, ip, pc}
 8002744:	3dcccccd 	stclcc	12, cr12, [ip, #820]	; 0x334

08002748 <sensor::INA219::GetShuntCurrent()>:
 8002748:	b510      	push	{r4, lr}
 800274a:	f44f 7248 	mov.w	r2, #800	; 0x320
 800274e:	2104      	movs	r1, #4
 8002750:	4604      	mov	r4, r0
 8002752:	f7ff ff14 	bl	800257e <HAL_I2C::ReadRegister16DelayUs(unsigned char, unsigned int)>
 8002756:	ee07 0a90 	vmov	s15, r0
 800275a:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 800275e:	edd4 7a03 	vldr	s15, [r4, #12]
 8002762:	ee20 0a27 	vmul.f32	s0, s0, s15
 8002766:	bd10      	pop	{r4, pc}

08002768 <sensor::INA219::GetBusVoltageRaw()>:
 8002768:	b508      	push	{r3, lr}
 800276a:	f44f 7248 	mov.w	r2, #800	; 0x320
 800276e:	2102      	movs	r1, #2
 8002770:	f7ff ff05 	bl	800257e <HAL_I2C::ReadRegister16DelayUs(unsigned char, unsigned int)>
 8002774:	f340 004f 	sbfx	r0, r0, #1, #16
 8002778:	f020 0003 	bic.w	r0, r0, #3
 800277c:	bd08      	pop	{r3, pc}
	...

08002780 <sensor::INA219::GetBusVoltage()>:
 8002780:	b508      	push	{r3, lr}
 8002782:	f7ff fff1 	bl	8002768 <sensor::INA219::GetBusVoltageRaw()>
 8002786:	ee07 0a90 	vmov	s15, r0
 800278a:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 800278e:	eddf 7a02 	vldr	s15, [pc, #8]	; 8002798 <sensor::INA219::GetBusVoltage()+0x18>
 8002792:	ee20 0a27 	vmul.f32	s0, s0, s15
 8002796:	bd08      	pop	{r3, pc}
 8002798:	3a83126f 	bcc	60c715c <__heap_size+0x60c615c>

0800279c <sensor::INA219::GetBusPower()>:
 800279c:	b510      	push	{r4, lr}
 800279e:	f44f 7248 	mov.w	r2, #800	; 0x320
 80027a2:	2103      	movs	r1, #3
 80027a4:	4604      	mov	r4, r0
 80027a6:	f7ff feea 	bl	800257e <HAL_I2C::ReadRegister16DelayUs(unsigned char, unsigned int)>
 80027aa:	ee07 0a90 	vmov	s15, r0
 80027ae:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 80027b2:	edd4 7a04 	vldr	s15, [r4, #16]
 80027b6:	ee20 0a27 	vmul.f32	s0, s0, s15
 80027ba:	bd10      	pop	{r4, pc}

080027bc <HAL_I2C::ReadRegister16(unsigned char)>:
 80027bc:	b513      	push	{r0, r1, r4, lr}
 80027be:	4604      	mov	r4, r0
 80027c0:	7800      	ldrb	r0, [r0, #0]
 80027c2:	f88d 1000 	strb.w	r1, [sp]
 80027c6:	f006 fb1f 	bl	8008e08 <gd32_i2c_set_address>
 80027ca:	6860      	ldr	r0, [r4, #4]
 80027cc:	f006 fb14 	bl	8008df8 <gd32_i2c_set_baudrate>
 80027d0:	2101      	movs	r1, #1
 80027d2:	4668      	mov	r0, sp
 80027d4:	f006 fb1e 	bl	8008e14 <gd32_i2c_write>
 80027d8:	2300      	movs	r3, #0
 80027da:	7820      	ldrb	r0, [r4, #0]
 80027dc:	f8ad 3004 	strh.w	r3, [sp, #4]
 80027e0:	f006 fb12 	bl	8008e08 <gd32_i2c_set_address>
 80027e4:	6860      	ldr	r0, [r4, #4]
 80027e6:	f006 fb07 	bl	8008df8 <gd32_i2c_set_baudrate>
 80027ea:	2102      	movs	r1, #2
 80027ec:	a801      	add	r0, sp, #4
 80027ee:	f006 fb77 	bl	8008ee0 <gd32_i2c_read>
 80027f2:	f8bd 0004 	ldrh.w	r0, [sp, #4]
 80027f6:	ba40      	rev16	r0, r0
 80027f8:	b280      	uxth	r0, r0
 80027fa:	b002      	add	sp, #8
 80027fc:	bd10      	pop	{r4, pc}
	...

08002800 <sensor::MCP9808::MCP9808(unsigned char)>:
 8002800:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002802:	1e0d      	subs	r5, r1, #0
 8002804:	bf08      	it	eq
 8002806:	2518      	moveq	r5, #24
 8002808:	4f1b      	ldr	r7, [pc, #108]	; (8002878 <sensor::MCP9808::MCP9808(unsigned char)+0x78>)
 800280a:	7005      	strb	r5, [r0, #0]
 800280c:	2600      	movs	r6, #0
 800280e:	6047      	str	r7, [r0, #4]
 8002810:	7206      	strb	r6, [r0, #8]
 8002812:	4604      	mov	r4, r0
 8002814:	4628      	mov	r0, r5
 8002816:	f006 faf7 	bl	8008e08 <gd32_i2c_set_address>
 800281a:	4638      	mov	r0, r7
 800281c:	f006 faec 	bl	8008df8 <gd32_i2c_set_baudrate>
 8002820:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
 8002824:	2b07      	cmp	r3, #7
 8002826:	d902      	bls.n	800282e <sensor::MCP9808::MCP9808(unsigned char)+0x2e>
 8002828:	3d50      	subs	r5, #80	; 0x50
 800282a:	2d0f      	cmp	r5, #15
 800282c:	d81f      	bhi.n	800286e <sensor::MCP9808::MCP9808(unsigned char)+0x6e>
 800282e:	2101      	movs	r1, #1
 8002830:	f10d 0007 	add.w	r0, sp, #7
 8002834:	f006 fb54 	bl	8008ee0 <gd32_i2c_read>
 8002838:	fab0 f080 	clz	r0, r0
 800283c:	0940      	lsrs	r0, r0, #5
 800283e:	7220      	strb	r0, [r4, #8]
 8002840:	b190      	cbz	r0, 8002868 <sensor::MCP9808::MCP9808(unsigned char)+0x68>
 8002842:	2106      	movs	r1, #6
 8002844:	4620      	mov	r0, r4
 8002846:	f7ff ffb9 	bl	80027bc <HAL_I2C::ReadRegister16(unsigned char)>
 800284a:	2854      	cmp	r0, #84	; 0x54
 800284c:	bf0c      	ite	eq
 800284e:	2301      	moveq	r3, #1
 8002850:	2300      	movne	r3, #0
 8002852:	7223      	strb	r3, [r4, #8]
 8002854:	d108      	bne.n	8002868 <sensor::MCP9808::MCP9808(unsigned char)+0x68>
 8002856:	2107      	movs	r1, #7
 8002858:	4620      	mov	r0, r4
 800285a:	f7ff ffaf 	bl	80027bc <HAL_I2C::ReadRegister16(unsigned char)>
 800285e:	f5a0 6380 	sub.w	r3, r0, #1024	; 0x400
 8002862:	4258      	negs	r0, r3
 8002864:	4158      	adcs	r0, r3
 8002866:	7220      	strb	r0, [r4, #8]
 8002868:	4620      	mov	r0, r4
 800286a:	b003      	add	sp, #12
 800286c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800286e:	4631      	mov	r1, r6
 8002870:	4630      	mov	r0, r6
 8002872:	f006 facf 	bl	8008e14 <gd32_i2c_write>
 8002876:	e7df      	b.n	8002838 <sensor::MCP9808::MCP9808(unsigned char)+0x38>
 8002878:	00061a80 	andeq	r1, r6, r0, lsl #21

0800287c <sensor::MCP9808::Get()>:
 800287c:	b508      	push	{r3, lr}
 800287e:	2105      	movs	r1, #5
 8002880:	f7ff ff9c 	bl	80027bc <HAL_I2C::ReadRegister16(unsigned char)>
 8002884:	f3c0 030b 	ubfx	r3, r0, #0, #12
 8002888:	ee00 3a10 	vmov	s0, r3
 800288c:	04c3      	lsls	r3, r0, #19
 800288e:	eeba 0ace 	vcvt.f32.s32	s0, s0, #4
 8002892:	bf44      	itt	mi
 8002894:	eddf 7a02 	vldrmi	s15, [pc, #8]	; 80028a0 <sensor::MCP9808::Get()+0x24>
 8002898:	ee30 0a67 	vsubmi.f32	s0, s0, s15
 800289c:	bd08      	pop	{r3, pc}
 800289e:	bf00      	nop
 80028a0:	43800000 	orrmi	r0, r0, #0

080028a4 <sensor::SI7021::SI7021(unsigned char)>:
 80028a4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80028a6:	1e0c      	subs	r4, r1, #0
 80028a8:	bf08      	it	eq
 80028aa:	2440      	moveq	r4, #64	; 0x40
 80028ac:	4f11      	ldr	r7, [pc, #68]	; (80028f4 <sensor::SI7021::SI7021(unsigned char)+0x50>)
 80028ae:	7004      	strb	r4, [r0, #0]
 80028b0:	2600      	movs	r6, #0
 80028b2:	6047      	str	r7, [r0, #4]
 80028b4:	7206      	strb	r6, [r0, #8]
 80028b6:	4605      	mov	r5, r0
 80028b8:	4620      	mov	r0, r4
 80028ba:	f006 faa5 	bl	8008e08 <gd32_i2c_set_address>
 80028be:	4638      	mov	r0, r7
 80028c0:	f006 fa9a 	bl	8008df8 <gd32_i2c_set_baudrate>
 80028c4:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 80028c8:	2b07      	cmp	r3, #7
 80028ca:	d902      	bls.n	80028d2 <sensor::SI7021::SI7021(unsigned char)+0x2e>
 80028cc:	3c50      	subs	r4, #80	; 0x50
 80028ce:	2c0f      	cmp	r4, #15
 80028d0:	d80b      	bhi.n	80028ea <sensor::SI7021::SI7021(unsigned char)+0x46>
 80028d2:	2101      	movs	r1, #1
 80028d4:	f10d 0007 	add.w	r0, sp, #7
 80028d8:	f006 fb02 	bl	8008ee0 <gd32_i2c_read>
 80028dc:	fab0 f380 	clz	r3, r0
 80028e0:	095b      	lsrs	r3, r3, #5
 80028e2:	4628      	mov	r0, r5
 80028e4:	722b      	strb	r3, [r5, #8]
 80028e6:	b003      	add	sp, #12
 80028e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80028ea:	4631      	mov	r1, r6
 80028ec:	4630      	mov	r0, r6
 80028ee:	f006 fa91 	bl	8008e14 <gd32_i2c_write>
 80028f2:	e7f3      	b.n	80028dc <sensor::SI7021::SI7021(unsigned char)+0x38>
 80028f4:	00061a80 	andeq	r1, r6, r0, lsl #21

080028f8 <sensor::SI7021::ReadRaw(unsigned char)>:
 80028f8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80028fa:	4604      	mov	r4, r0
 80028fc:	7800      	ldrb	r0, [r0, #0]
 80028fe:	f88d 1004 	strb.w	r1, [sp, #4]
 8002902:	f006 fa81 	bl	8008e08 <gd32_i2c_set_address>
 8002906:	6860      	ldr	r0, [r4, #4]
 8002908:	f006 fa76 	bl	8008df8 <gd32_i2c_set_baudrate>
 800290c:	2101      	movs	r1, #1
 800290e:	a801      	add	r0, sp, #4
 8002910:	f006 fa80 	bl	8008e14 <gd32_i2c_write>
 8002914:	4b13      	ldr	r3, [pc, #76]	; (8002964 <sensor::SI7021::ReadRaw(unsigned char)+0x6c>)
 8002916:	881b      	ldrh	r3, [r3, #0]
 8002918:	f8ad 3004 	strh.w	r3, [sp, #4]
 800291c:	2300      	movs	r3, #0
 800291e:	f88d 3006 	strb.w	r3, [sp, #6]
 8002922:	2508      	movs	r5, #8
 8002924:	2100      	movs	r1, #0
 8002926:	f242 7010 	movw	r0, #10000	; 0x2710
 800292a:	f006 fd31 	bl	8009390 <udelay(unsigned int, unsigned int)>
 800292e:	7820      	ldrb	r0, [r4, #0]
 8002930:	f006 fa6a 	bl	8008e08 <gd32_i2c_set_address>
 8002934:	6860      	ldr	r0, [r4, #4]
 8002936:	f006 fa5f 	bl	8008df8 <gd32_i2c_set_baudrate>
 800293a:	2103      	movs	r1, #3
 800293c:	a801      	add	r0, sp, #4
 800293e:	f006 facf 	bl	8008ee0 <gd32_i2c_read>
 8002942:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8002946:	f003 0303 	and.w	r3, r3, #3
 800294a:	2b02      	cmp	r3, #2
 800294c:	d001      	beq.n	8002952 <sensor::SI7021::ReadRaw(unsigned char)+0x5a>
 800294e:	3d01      	subs	r5, #1
 8002950:	d1e8      	bne.n	8002924 <sensor::SI7021::ReadRaw(unsigned char)+0x2c>
 8002952:	f8bd 0004 	ldrh.w	r0, [sp, #4]
 8002956:	ba40      	rev16	r0, r0
 8002958:	f020 0003 	bic.w	r0, r0, #3
 800295c:	b280      	uxth	r0, r0
 800295e:	b003      	add	sp, #12
 8002960:	bd30      	pop	{r4, r5, pc}
 8002962:	bf00      	nop
 8002964:	080097ea 	stmdaeq	r0, {r1, r3, r5, r6, r7, r8, r9, sl, ip, pc}

08002968 <sensor::SI7021::GetTemperature()>:
 8002968:	b508      	push	{r3, lr}
 800296a:	21f3      	movs	r1, #243	; 0xf3
 800296c:	f7ff ffc4 	bl	80028f8 <sensor::SI7021::ReadRaw(unsigned char)>
 8002970:	ee07 0a90 	vmov	s15, r0
 8002974:	ed9f 7a04 	vldr	s14, [pc, #16]	; 8002988 <sensor::SI7021::GetTemperature()+0x20>
 8002978:	ed9f 0a04 	vldr	s0, [pc, #16]	; 800298c <sensor::SI7021::GetTemperature()+0x24>
 800297c:	eefb 7ac8 	vcvt.f32.u32	s15, s15, #16
 8002980:	eea7 0a87 	vfma.f32	s0, s15, s14
 8002984:	bd08      	pop	{r3, pc}
 8002986:	bf00      	nop
 8002988:	432fb852 			; <UNDEFINED> instruction: 0x432fb852
 800298c:	c23b6666 	eorsgt	r6, fp, #106954752	; 0x6600000

08002990 <sensor::SI7021::GetHumidity()>:
 8002990:	b508      	push	{r3, lr}
 8002992:	21f5      	movs	r1, #245	; 0xf5
 8002994:	f7ff ffb0 	bl	80028f8 <sensor::SI7021::ReadRaw(unsigned char)>
 8002998:	ee07 0a90 	vmov	s15, r0
 800299c:	ed9f 7a04 	vldr	s14, [pc, #16]	; 80029b0 <sensor::SI7021::GetHumidity()+0x20>
 80029a0:	eefb 7ac8 	vcvt.f32.u32	s15, s15, #16
 80029a4:	eeb9 0a08 	vmov.f32	s0, #152	; 0xc0c00000 -6.0
 80029a8:	eea7 0a87 	vfma.f32	s0, s15, s14
 80029ac:	bd08      	pop	{r3, pc}
 80029ae:	bf00      	nop
 80029b0:	42fa0000 	rscsmi	r0, sl, #0

080029b4 <RDMSubDevices::RDMSubDevices()>:
 80029b4:	2200      	movs	r2, #0
 80029b6:	6002      	str	r2, [r0, #0]
 80029b8:	8082      	strh	r2, [r0, #4]
 80029ba:	4a01      	ldr	r2, [pc, #4]	; (80029c0 <RDMSubDevices::RDMSubDevices()+0xc>)
 80029bc:	6010      	str	r0, [r2, #0]
 80029be:	4770      	bx	lr
 80029c0:	20000200 	andcs	r0, r0, r0, lsl #4

080029c4 <RDMSubDevices::~RDMSubDevices()>:
 80029c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80029c6:	2500      	movs	r5, #0
 80029c8:	4604      	mov	r4, r0
 80029ca:	462e      	mov	r6, r5
 80029cc:	88a3      	ldrh	r3, [r4, #4]
 80029ce:	6820      	ldr	r0, [r4, #0]
 80029d0:	42ab      	cmp	r3, r5
 80029d2:	d804      	bhi.n	80029de <RDMSubDevices::~RDMSubDevices()+0x1a>
 80029d4:	b108      	cbz	r0, 80029da <RDMSubDevices::~RDMSubDevices()+0x16>
 80029d6:	f005 f984 	bl	8007ce2 <operator delete[](void*)>
 80029da:	4620      	mov	r0, r4
 80029dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80029de:	f850 0025 	ldr.w	r0, [r0, r5, lsl #2]
 80029e2:	00af      	lsls	r7, r5, #2
 80029e4:	b110      	cbz	r0, 80029ec <RDMSubDevices::~RDMSubDevices()+0x28>
 80029e6:	6803      	ldr	r3, [r0, #0]
 80029e8:	685b      	ldr	r3, [r3, #4]
 80029ea:	4798      	blx	r3
 80029ec:	6823      	ldr	r3, [r4, #0]
 80029ee:	3501      	adds	r5, #1
 80029f0:	51de      	str	r6, [r3, r7]
 80029f2:	e7eb      	b.n	80029cc <RDMSubDevices::~RDMSubDevices()+0x8>

080029f4 <RDMSubDevices::GetInfo(unsigned short)>:
 80029f4:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 80029f8:	6803      	ldr	r3, [r0, #0]
 80029fa:	3901      	subs	r1, #1
 80029fc:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
 8002a00:	3010      	adds	r0, #16
 8002a02:	4770      	bx	lr

08002a04 <RDMSubDevices::GetLabel(unsigned short, TRDMDeviceInfoData*)>:
 8002a04:	f101 4380 	add.w	r3, r1, #1073741824	; 0x40000000
 8002a08:	6800      	ldr	r0, [r0, #0]
 8002a0a:	3b01      	subs	r3, #1
 8002a0c:	4611      	mov	r1, r2
 8002a0e:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 8002a12:	f000 b8c2 	b.w	8002b9a <RDMSubDevice::GetLabel(TRDMDeviceInfoData*)>

08002a16 <RDMSubDevices::SetLabel(unsigned short, char const*, unsigned char)>:
 8002a16:	b410      	push	{r4}
 8002a18:	460c      	mov	r4, r1
 8002a1a:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
 8002a1e:	3c01      	subs	r4, #1
 8002a20:	6800      	ldr	r0, [r0, #0]
 8002a22:	4611      	mov	r1, r2
 8002a24:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 8002a28:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002a2c:	461a      	mov	r2, r3
 8002a2e:	f000 b8c9 	b.w	8002bc4 <RDMSubDevice::SetLabel(char const*, unsigned char)>

08002a32 <RDMSubDevices::GetDmxStartAddress(unsigned short)>:
 8002a32:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 8002a36:	6803      	ldr	r3, [r0, #0]
 8002a38:	3901      	subs	r1, #1
 8002a3a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8002a3e:	8a58      	ldrh	r0, [r3, #18]
 8002a40:	4770      	bx	lr

08002a42 <RDMSubDevices::SetDmxStartAddress(unsigned short, unsigned short)>:
 8002a42:	f101 4380 	add.w	r3, r1, #1073741824	; 0x40000000
 8002a46:	6800      	ldr	r0, [r0, #0]
 8002a48:	3b01      	subs	r3, #1
 8002a4a:	4611      	mov	r1, r2
 8002a4c:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 8002a50:	f000 b897 	b.w	8002b82 <RDMSubDevice::SetDmxStartAddress(unsigned short)>

08002a54 <RDMSubDevices::GetDmxFootPrint(unsigned short)>:
 8002a54:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 8002a58:	6803      	ldr	r3, [r0, #0]
 8002a5a:	3901      	subs	r1, #1
 8002a5c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8002a60:	8a18      	ldrh	r0, [r3, #16]
 8002a62:	4770      	bx	lr

08002a64 <RDMSubDevices::GetPersonalityCurrent(unsigned short)>:
 8002a64:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 8002a68:	6803      	ldr	r3, [r0, #0]
 8002a6a:	3901      	subs	r1, #1
 8002a6c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8002a70:	7d18      	ldrb	r0, [r3, #20]
 8002a72:	4770      	bx	lr

08002a74 <RDMSubDevices::SetPersonalityCurrent(unsigned short, unsigned char)>:
 8002a74:	f101 4380 	add.w	r3, r1, #1073741824	; 0x40000000
 8002a78:	6800      	ldr	r0, [r0, #0]
 8002a7a:	3b01      	subs	r3, #1
 8002a7c:	4611      	mov	r1, r2
 8002a7e:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 8002a82:	f000 b8ae 	b.w	8002be2 <RDMSubDevice::SetPersonalityCurrent(unsigned char)>

08002a86 <RDMSubDevices::GetPersonalityCount(unsigned short)>:
 8002a86:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 8002a8a:	6803      	ldr	r3, [r0, #0]
 8002a8c:	3901      	subs	r1, #1
 8002a8e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8002a92:	7d58      	ldrb	r0, [r3, #21]
 8002a94:	4770      	bx	lr

08002a96 <RDMSubDevices::GetPersonality(unsigned short, unsigned char)>:
 8002a96:	f101 4380 	add.w	r3, r1, #1073741824	; 0x40000000
 8002a9a:	6800      	ldr	r0, [r0, #0]
 8002a9c:	3b01      	subs	r3, #1
 8002a9e:	4611      	mov	r1, r2
 8002aa0:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 8002aa4:	f000 b872 	b.w	8002b8c <RDMSubDevice::GetPersonality(unsigned char)>

08002aa8 <RDMSubDevices::Start()>:
 8002aa8:	b538      	push	{r3, r4, r5, lr}
 8002aaa:	4605      	mov	r5, r0
 8002aac:	2400      	movs	r4, #0
 8002aae:	88ab      	ldrh	r3, [r5, #4]
 8002ab0:	42a3      	cmp	r3, r4
 8002ab2:	d800      	bhi.n	8002ab6 <RDMSubDevices::Start()+0xe>
 8002ab4:	bd38      	pop	{r3, r4, r5, pc}
 8002ab6:	682b      	ldr	r3, [r5, #0]
 8002ab8:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8002abc:	b110      	cbz	r0, 8002ac4 <RDMSubDevices::Start()+0x1c>
 8002abe:	6803      	ldr	r3, [r0, #0]
 8002ac0:	68db      	ldr	r3, [r3, #12]
 8002ac2:	4798      	blx	r3
 8002ac4:	3401      	adds	r4, #1
 8002ac6:	e7f2      	b.n	8002aae <RDMSubDevices::Start()+0x6>

08002ac8 <RDMSubDevices::Stop()>:
 8002ac8:	b538      	push	{r3, r4, r5, lr}
 8002aca:	4605      	mov	r5, r0
 8002acc:	2400      	movs	r4, #0
 8002ace:	88ab      	ldrh	r3, [r5, #4]
 8002ad0:	42a3      	cmp	r3, r4
 8002ad2:	d800      	bhi.n	8002ad6 <RDMSubDevices::Stop()+0xe>
 8002ad4:	bd38      	pop	{r3, r4, r5, pc}
 8002ad6:	682b      	ldr	r3, [r5, #0]
 8002ad8:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8002adc:	b110      	cbz	r0, 8002ae4 <RDMSubDevices::Stop()+0x1c>
 8002ade:	6803      	ldr	r3, [r0, #0]
 8002ae0:	691b      	ldr	r3, [r3, #16]
 8002ae2:	4798      	blx	r3
 8002ae4:	3401      	adds	r4, #1
 8002ae6:	e7f2      	b.n	8002ace <RDMSubDevices::Stop()+0x6>

08002ae8 <RDMSubDevices::SetData(unsigned char const*, unsigned int)>:
 8002ae8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002aea:	4605      	mov	r5, r0
 8002aec:	460f      	mov	r7, r1
 8002aee:	4616      	mov	r6, r2
 8002af0:	2400      	movs	r4, #0
 8002af2:	88ab      	ldrh	r3, [r5, #4]
 8002af4:	42a3      	cmp	r3, r4
 8002af6:	d800      	bhi.n	8002afa <RDMSubDevices::SetData(unsigned char const*, unsigned int)+0x12>
 8002af8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002afa:	682b      	ldr	r3, [r5, #0]
 8002afc:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8002b00:	b158      	cbz	r0, 8002b1a <RDMSubDevices::SetData(unsigned char const*, unsigned int)+0x32>
 8002b02:	8a43      	ldrh	r3, [r0, #18]
 8002b04:	8a02      	ldrh	r2, [r0, #16]
 8002b06:	4413      	add	r3, r2
 8002b08:	b29b      	uxth	r3, r3
 8002b0a:	3b01      	subs	r3, #1
 8002b0c:	42b3      	cmp	r3, r6
 8002b0e:	d804      	bhi.n	8002b1a <RDMSubDevices::SetData(unsigned char const*, unsigned int)+0x32>
 8002b10:	6803      	ldr	r3, [r0, #0]
 8002b12:	4632      	mov	r2, r6
 8002b14:	695b      	ldr	r3, [r3, #20]
 8002b16:	4639      	mov	r1, r7
 8002b18:	4798      	blx	r3
 8002b1a:	3401      	adds	r4, #1
 8002b1c:	e7e9      	b.n	8002af2 <RDMSubDevices::SetData(unsigned char const*, unsigned int)+0xa>

08002b1e <RDMSubDevices::GetFactoryDefaults()>:
 8002b1e:	b538      	push	{r3, r4, r5, lr}
 8002b20:	4605      	mov	r5, r0
 8002b22:	2400      	movs	r4, #0
 8002b24:	88ab      	ldrh	r3, [r5, #4]
 8002b26:	42a3      	cmp	r3, r4
 8002b28:	d801      	bhi.n	8002b2e <RDMSubDevices::GetFactoryDefaults()+0x10>
 8002b2a:	2001      	movs	r0, #1
 8002b2c:	e009      	b.n	8002b42 <RDMSubDevices::GetFactoryDefaults()+0x24>
 8002b2e:	682b      	ldr	r3, [r5, #0]
 8002b30:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8002b34:	b908      	cbnz	r0, 8002b3a <RDMSubDevices::GetFactoryDefaults()+0x1c>
 8002b36:	3401      	adds	r4, #1
 8002b38:	e7f4      	b.n	8002b24 <RDMSubDevices::GetFactoryDefaults()+0x6>
 8002b3a:	f000 f87a 	bl	8002c32 <RDMSubDevice::GetFactoryDefaults()>
 8002b3e:	2800      	cmp	r0, #0
 8002b40:	d1f9      	bne.n	8002b36 <RDMSubDevices::GetFactoryDefaults()+0x18>
 8002b42:	bd38      	pop	{r3, r4, r5, pc}

08002b44 <RDMSubDevices::SetFactoryDefaults()>:
 8002b44:	b538      	push	{r3, r4, r5, lr}
 8002b46:	4605      	mov	r5, r0
 8002b48:	2400      	movs	r4, #0
 8002b4a:	88ab      	ldrh	r3, [r5, #4]
 8002b4c:	42a3      	cmp	r3, r4
 8002b4e:	d800      	bhi.n	8002b52 <RDMSubDevices::SetFactoryDefaults()+0xe>
 8002b50:	bd38      	pop	{r3, r4, r5, pc}
 8002b52:	682b      	ldr	r3, [r5, #0]
 8002b54:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8002b58:	b108      	cbz	r0, 8002b5e <RDMSubDevices::SetFactoryDefaults()+0x1a>
 8002b5a:	f000 f844 	bl	8002be6 <RDMSubDevice::SetFactoryDefaults()>
 8002b5e:	3401      	adds	r4, #1
 8002b60:	e7f3      	b.n	8002b4a <RDMSubDevices::SetFactoryDefaults()+0x6>

08002b62 <RDMSubDevicesParams::RDMSubDevicesParams(RDMSubDevicesParamsStore*)>:
 8002b62:	6001      	str	r1, [r0, #0]
 8002b64:	4770      	bx	lr

08002b66 <RDMSubDevicesParams::Load()>:
 8002b66:	b508      	push	{r3, lr}
 8002b68:	2300      	movs	r3, #0
 8002b6a:	4601      	mov	r1, r0
 8002b6c:	6043      	str	r3, [r0, #4]
 8002b6e:	6800      	ldr	r0, [r0, #0]
 8002b70:	b120      	cbz	r0, 8002b7c <RDMSubDevicesParams::Load()+0x16>
 8002b72:	6803      	ldr	r3, [r0, #0]
 8002b74:	3104      	adds	r1, #4
 8002b76:	68db      	ldr	r3, [r3, #12]
 8002b78:	4798      	blx	r3
 8002b7a:	2001      	movs	r0, #1
 8002b7c:	bd08      	pop	{r3, pc}

08002b7e <RDMSubDevicesParams::Dump()>:
 8002b7e:	4770      	bx	lr

08002b80 <RDMSubDevicesParams::Set()>:
 8002b80:	4770      	bx	lr

08002b82 <RDMSubDevice::SetDmxStartAddress(unsigned short)>:
 8002b82:	6803      	ldr	r3, [r0, #0]
 8002b84:	8241      	strh	r1, [r0, #18]
 8002b86:	699b      	ldr	r3, [r3, #24]
 8002b88:	2100      	movs	r1, #0
 8002b8a:	4718      	bx	r3

08002b8c <RDMSubDevice::GetPersonality(unsigned char)>:
 8002b8c:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 8002b90:	6843      	ldr	r3, [r0, #4]
 8002b92:	3901      	subs	r1, #1
 8002b94:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
 8002b98:	4770      	bx	lr

08002b9a <RDMSubDevice::GetLabel(TRDMDeviceInfoData*)>:
 8002b9a:	f100 0316 	add.w	r3, r0, #22
 8002b9e:	600b      	str	r3, [r1, #0]
 8002ba0:	f890 3036 	ldrb.w	r3, [r0, #54]	; 0x36
 8002ba4:	710b      	strb	r3, [r1, #4]
 8002ba6:	4770      	bx	lr

08002ba8 <RDMSubDevice::SetLabel(char const*)>:
 8002ba8:	b510      	push	{r4, lr}
 8002baa:	2300      	movs	r3, #0
 8002bac:	f100 0415 	add.w	r4, r0, #21
 8002bb0:	5cca      	ldrb	r2, [r1, r3]
 8002bb2:	b122      	cbz	r2, 8002bbe <RDMSubDevice::SetLabel(char const*)+0x16>
 8002bb4:	3301      	adds	r3, #1
 8002bb6:	2b20      	cmp	r3, #32
 8002bb8:	f804 2f01 	strb.w	r2, [r4, #1]!
 8002bbc:	d1f8      	bne.n	8002bb0 <RDMSubDevice::SetLabel(char const*)+0x8>
 8002bbe:	f880 3036 	strb.w	r3, [r0, #54]	; 0x36
 8002bc2:	bd10      	pop	{r4, pc}

08002bc4 <RDMSubDevice::SetLabel(char const*, unsigned char)>:
 8002bc4:	b530      	push	{r4, r5, lr}
 8002bc6:	2300      	movs	r3, #0
 8002bc8:	f100 0415 	add.w	r4, r0, #21
 8002bcc:	429a      	cmp	r2, r3
 8002bce:	d905      	bls.n	8002bdc <RDMSubDevice::SetLabel(char const*, unsigned char)+0x18>
 8002bd0:	5ccd      	ldrb	r5, [r1, r3]
 8002bd2:	f804 5f01 	strb.w	r5, [r4, #1]!
 8002bd6:	3301      	adds	r3, #1
 8002bd8:	2b20      	cmp	r3, #32
 8002bda:	d1f7      	bne.n	8002bcc <RDMSubDevice::SetLabel(char const*, unsigned char)+0x8>
 8002bdc:	f880 3036 	strb.w	r3, [r0, #54]	; 0x36
 8002be0:	bd30      	pop	{r4, r5, pc}

08002be2 <RDMSubDevice::SetPersonalityCurrent(unsigned char)>:
 8002be2:	7501      	strb	r1, [r0, #20]
 8002be4:	4770      	bx	lr

08002be6 <RDMSubDevice::SetFactoryDefaults()>:
 8002be6:	7a03      	ldrb	r3, [r0, #8]
 8002be8:	b510      	push	{r4, lr}
 8002bea:	b94b      	cbnz	r3, 8002c00 <RDMSubDevice::SetFactoryDefaults()+0x1a>
 8002bec:	f100 0138 	add.w	r1, r0, #56	; 0x38
 8002bf0:	f7ff ffda 	bl	8002ba8 <RDMSubDevice::SetLabel(char const*)>
 8002bf4:	8983      	ldrh	r3, [r0, #12]
 8002bf6:	8243      	strh	r3, [r0, #18]
 8002bf8:	7b83      	ldrb	r3, [r0, #14]
 8002bfa:	7503      	strb	r3, [r0, #20]
 8002bfc:	2301      	movs	r3, #1
 8002bfe:	7203      	strb	r3, [r0, #8]
 8002c00:	bd10      	pop	{r4, pc}

08002c02 <RDMSubDevice::CalculateChecksum()>:
 8002c02:	b510      	push	{r4, lr}
 8002c04:	8a43      	ldrh	r3, [r0, #18]
 8002c06:	7d02      	ldrb	r2, [r0, #20]
 8002c08:	f890 4036 	ldrb.w	r4, [r0, #54]	; 0x36
 8002c0c:	4413      	add	r3, r2
 8002c0e:	f100 0215 	add.w	r2, r0, #21
 8002c12:	f1c0 20ff 	rsb	r0, r0, #4278255360	; 0xff00ff00
 8002c16:	f500 007f 	add.w	r0, r0, #16711680	; 0xff0000
 8002c1a:	b29b      	uxth	r3, r3
 8002c1c:	30eb      	adds	r0, #235	; 0xeb
 8002c1e:	1881      	adds	r1, r0, r2
 8002c20:	428c      	cmp	r4, r1
 8002c22:	d801      	bhi.n	8002c28 <RDMSubDevice::CalculateChecksum()+0x26>
 8002c24:	4618      	mov	r0, r3
 8002c26:	bd10      	pop	{r4, pc}
 8002c28:	f812 1f01 	ldrb.w	r1, [r2, #1]!
 8002c2c:	440b      	add	r3, r1
 8002c2e:	b29b      	uxth	r3, r3
 8002c30:	e7f5      	b.n	8002c1e <RDMSubDevice::CalculateChecksum()+0x1c>

08002c32 <RDMSubDevice::GetFactoryDefaults()>:
 8002c32:	7a03      	ldrb	r3, [r0, #8]
 8002c34:	b510      	push	{r4, lr}
 8002c36:	4604      	mov	r4, r0
 8002c38:	b133      	cbz	r3, 8002c48 <RDMSubDevice::GetFactoryDefaults()+0x16>
 8002c3a:	f7ff ffe2 	bl	8002c02 <RDMSubDevice::CalculateChecksum()>
 8002c3e:	8963      	ldrh	r3, [r4, #10]
 8002c40:	4283      	cmp	r3, r0
 8002c42:	bf1c      	itt	ne
 8002c44:	2300      	movne	r3, #0
 8002c46:	7223      	strbne	r3, [r4, #8]
 8002c48:	7a20      	ldrb	r0, [r4, #8]
 8002c4a:	bd10      	pop	{r4, pc}

08002c4c <Rdm::Receive(unsigned int)>:
 8002c4c:	4b02      	ldr	r3, [pc, #8]	; (8002c58 <Rdm::Receive(unsigned int)+0xc>)
 8002c4e:	4601      	mov	r1, r0
 8002c50:	6818      	ldr	r0, [r3, #0]
 8002c52:	f000 bc39 	b.w	80034c8 <Dmx::RdmReceive(unsigned int)>
 8002c56:	bf00      	nop
 8002c58:	2000063c 	andcs	r0, r0, ip, lsr r6

08002c5c <Rdm::SendRaw(unsigned int, unsigned char const*, unsigned int)>:
 8002c5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002c60:	4d0d      	ldr	r5, [pc, #52]	; (8002c98 <Rdm::SendRaw(unsigned int, unsigned char const*, unsigned int)+0x3c>)
 8002c62:	2300      	movs	r3, #0
 8002c64:	4604      	mov	r4, r0
 8002c66:	460e      	mov	r6, r1
 8002c68:	4617      	mov	r7, r2
 8002c6a:	4601      	mov	r1, r0
 8002c6c:	461a      	mov	r2, r3
 8002c6e:	6828      	ldr	r0, [r5, #0]
 8002c70:	f000 fabe 	bl	80031f0 <Dmx::SetPortDirection(unsigned int, dmx::PortDirection, bool)>
 8002c74:	463b      	mov	r3, r7
 8002c76:	4632      	mov	r2, r6
 8002c78:	6828      	ldr	r0, [r5, #0]
 8002c7a:	4621      	mov	r1, r4
 8002c7c:	f000 fbde 	bl	800343c <Dmx::RdmSendRaw(unsigned int, unsigned char const*, unsigned int)>
 8002c80:	2100      	movs	r1, #0
 8002c82:	2004      	movs	r0, #4
 8002c84:	f006 fb84 	bl	8009390 <udelay(unsigned int, unsigned int)>
 8002c88:	2301      	movs	r3, #1
 8002c8a:	6828      	ldr	r0, [r5, #0]
 8002c8c:	4621      	mov	r1, r4
 8002c8e:	461a      	mov	r2, r3
 8002c90:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002c94:	f000 baac 	b.w	80031f0 <Dmx::SetPortDirection(unsigned int, dmx::PortDirection, bool)>
 8002c98:	2000063c 	andcs	r0, r0, ip, lsr r6

08002c9c <USART2_IRQHandler>:
 8002c9c:	4977      	ldr	r1, [pc, #476]	; (8002e7c <USART2_IRQHandler+0x1e0>)
 8002c9e:	b510      	push	{r4, lr}
 8002ca0:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8002ca4:	2408      	movs	r4, #8
 8002ca6:	f8c1 4c10 	str.w	r4, [r1, #3088]	; 0xc10
 8002caa:	f8d2 3800 	ldr.w	r3, [r2, #2048]	; 0x800
 8002cae:	f013 0f02 	tst.w	r3, #2
 8002cb2:	4b73      	ldr	r3, [pc, #460]	; (8002e80 <USART2_IRQHandler+0x1e4>)
 8002cb4:	d018      	beq.n	8002ce8 <USART2_IRQHandler+0x4c>
 8002cb6:	f8d2 0800 	ldr.w	r0, [r2, #2048]	; 0x800
 8002cba:	f020 0002 	bic.w	r0, r0, #2
 8002cbe:	f8c2 0800 	str.w	r0, [r2, #2048]	; 0x800
 8002cc2:	f8d2 2804 	ldr.w	r2, [r2, #2052]	; 0x804
 8002cc6:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8002cca:	b962      	cbnz	r2, 8002ce6 <USART2_IRQHandler+0x4a>
 8002ccc:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8002cd0:	2201      	movs	r2, #1
 8002cd2:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
 8002cd6:	2310      	movs	r3, #16
 8002cd8:	f8c1 4c14 	str.w	r4, [r1, #3092]	; 0xc14
 8002cdc:	f8c1 3c14 	str.w	r3, [r1, #3092]	; 0xc14
 8002ce0:	2320      	movs	r3, #32
 8002ce2:	f8c1 3c14 	str.w	r3, [r1, #3092]	; 0xc14
 8002ce6:	bd10      	pop	{r4, pc}
 8002ce8:	f8d2 2804 	ldr.w	r2, [r2, #2052]	; 0x804
 8002cec:	f8d3 020c 	ldr.w	r0, [r3, #524]	; 0x20c
 8002cf0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002cf4:	2807      	cmp	r0, #7
 8002cf6:	f200 80bc 	bhi.w	8002e72 <USART2_IRQHandler+0x1d6>
 8002cfa:	e8df f000 	tbb	[pc, r0]
 8002cfe:	41ba1804 			; <UNDEFINED> instruction: 0x41ba1804
 8002d02:	a1807056 	orrge	r7, r0, r6, asr r0
 8002d06:	701a      	strb	r2, [r3, #0]
 8002d08:	2107      	movs	r1, #7
 8002d0a:	2201      	movs	r2, #1
 8002d0c:	f8c3 120c 	str.w	r1, [r3, #524]	; 0x20c
 8002d10:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8002d14:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002d18:	4a5a      	ldr	r2, [pc, #360]	; (8002e84 <USART2_IRQHandler+0x1e8>)
 8002d1a:	f8d3 3424 	ldr.w	r3, [r3, #1060]	; 0x424
 8002d1e:	b29b      	uxth	r3, r3
 8002d20:	8193      	strh	r3, [r2, #12]
 8002d22:	4b56      	ldr	r3, [pc, #344]	; (8002e7c <USART2_IRQHandler+0x1e0>)
 8002d24:	2210      	movs	r2, #16
 8002d26:	f8c3 2c10 	str.w	r2, [r3, #3088]	; 0xc10
 8002d2a:	2220      	movs	r2, #32
 8002d2c:	e017      	b.n	8002d5e <USART2_IRQHandler+0xc2>
 8002d2e:	b11a      	cbz	r2, 8002d38 <USART2_IRQHandler+0x9c>
 8002d30:	2acc      	cmp	r2, #204	; 0xcc
 8002d32:	d01b      	beq.n	8002d6c <USART2_IRQHandler+0xd0>
 8002d34:	2200      	movs	r2, #0
 8002d36:	e05f      	b.n	8002df8 <USART2_IRQHandler+0x15c>
 8002d38:	701a      	strb	r2, [r3, #0]
 8002d3a:	2201      	movs	r2, #1
 8002d3c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8002d40:	4a50      	ldr	r2, [pc, #320]	; (8002e84 <USART2_IRQHandler+0x1e8>)
 8002d42:	6851      	ldr	r1, [r2, #4]
 8002d44:	3101      	adds	r1, #1
 8002d46:	6051      	str	r1, [r2, #4]
 8002d48:	2103      	movs	r1, #3
 8002d4a:	f8c3 120c 	str.w	r1, [r3, #524]	; 0x20c
 8002d4e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002d52:	f8d3 3424 	ldr.w	r3, [r3, #1060]	; 0x424
 8002d56:	b29b      	uxth	r3, r3
 8002d58:	8193      	strh	r3, [r2, #12]
 8002d5a:	4b48      	ldr	r3, [pc, #288]	; (8002e7c <USART2_IRQHandler+0x1e0>)
 8002d5c:	2210      	movs	r2, #16
 8002d5e:	f8c3 2c10 	str.w	r2, [r3, #3088]	; 0xc10
 8002d62:	4b46      	ldr	r3, [pc, #280]	; (8002e7c <USART2_IRQHandler+0x1e0>)
 8002d64:	2208      	movs	r2, #8
 8002d66:	f8c3 2c14 	str.w	r2, [r3, #3092]	; 0xc14
 8002d6a:	e7bc      	b.n	8002ce6 <USART2_IRQHandler+0x4a>
 8002d6c:	701a      	strb	r2, [r3, #0]
 8002d6e:	f8a3 2208 	strh.w	r2, [r3, #520]	; 0x208
 8002d72:	2201      	movs	r2, #1
 8002d74:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8002d78:	2204      	movs	r2, #4
 8002d7a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
 8002d7e:	e7ec      	b.n	8002d5a <USART2_IRQHandler+0xbe>
 8002d80:	f8d3 1204 	ldr.w	r1, [r3, #516]	; 0x204
 8002d84:	545a      	strb	r2, [r3, r1]
 8002d86:	1c4a      	adds	r2, r1, #1
 8002d88:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 8002d8c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8002d90:	d95e      	bls.n	8002e50 <USART2_IRQHandler+0x1b4>
 8002d92:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002d96:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8002d9a:	2200      	movs	r2, #0
 8002d9c:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
 8002da0:	4b36      	ldr	r3, [pc, #216]	; (8002e7c <USART2_IRQHandler+0x1e0>)
 8002da2:	2210      	movs	r2, #16
 8002da4:	f8c3 2c14 	str.w	r2, [r3, #3092]	; 0xc14
 8002da8:	e7db      	b.n	8002d62 <USART2_IRQHandler+0xc6>
 8002daa:	f8d3 1204 	ldr.w	r1, [r3, #516]	; 0x204
 8002dae:	f8b3 4208 	ldrh.w	r4, [r3, #520]	; 0x208
 8002db2:	545a      	strb	r2, [r3, r1]
 8002db4:	1c48      	adds	r0, r1, #1
 8002db6:	3917      	subs	r1, #23
 8002db8:	4422      	add	r2, r4
 8002dba:	29e9      	cmp	r1, #233	; 0xe9
 8002dbc:	f8c3 0204 	str.w	r0, [r3, #516]	; 0x204
 8002dc0:	f8a3 2208 	strh.w	r2, [r3, #520]	; 0x208
 8002dc4:	d807      	bhi.n	8002dd6 <USART2_IRQHandler+0x13a>
 8002dc6:	789a      	ldrb	r2, [r3, #2]
 8002dc8:	4290      	cmp	r0, r2
 8002dca:	d104      	bne.n	8002dd6 <USART2_IRQHandler+0x13a>
 8002dcc:	2205      	movs	r2, #5
 8002dce:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
 8002dd2:	4b2a      	ldr	r3, [pc, #168]	; (8002e7c <USART2_IRQHandler+0x1e0>)
 8002dd4:	e7a9      	b.n	8002d2a <USART2_IRQHandler+0x8e>
 8002dd6:	f5b0 7f81 	cmp.w	r0, #258	; 0x102
 8002dda:	d3c2      	bcc.n	8002d62 <USART2_IRQHandler+0xc6>
 8002ddc:	e7aa      	b.n	8002d34 <USART2_IRQHandler+0x98>
 8002dde:	f8d3 1204 	ldr.w	r1, [r3, #516]	; 0x204
 8002de2:	545a      	strb	r2, [r3, r1]
 8002de4:	3101      	adds	r1, #1
 8002de6:	f8c3 1204 	str.w	r1, [r3, #516]	; 0x204
 8002dea:	f8b3 1208 	ldrh.w	r1, [r3, #520]	; 0x208
 8002dee:	eba1 2202 	sub.w	r2, r1, r2, lsl #8
 8002df2:	f8a3 2208 	strh.w	r2, [r3, #520]	; 0x208
 8002df6:	2206      	movs	r2, #6
 8002df8:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
 8002dfc:	e7b1      	b.n	8002d62 <USART2_IRQHandler+0xc6>
 8002dfe:	2020      	movs	r0, #32
 8002e00:	f8c1 0c14 	str.w	r0, [r1, #3092]	; 0xc14
 8002e04:	f8b3 4208 	ldrh.w	r4, [r3, #520]	; 0x208
 8002e08:	f8d3 0204 	ldr.w	r0, [r3, #516]	; 0x204
 8002e0c:	541a      	strb	r2, [r3, r0]
 8002e0e:	1aa2      	subs	r2, r4, r2
 8002e10:	b292      	uxth	r2, r2
 8002e12:	f8a3 2208 	strh.w	r2, [r3, #520]	; 0x208
 8002e16:	b912      	cbnz	r2, 8002e1e <USART2_IRQHandler+0x182>
 8002e18:	785a      	ldrb	r2, [r3, #1]
 8002e1a:	2a01      	cmp	r2, #1
 8002e1c:	d003      	beq.n	8002e26 <USART2_IRQHandler+0x18a>
 8002e1e:	2200      	movs	r2, #0
 8002e20:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8002e24:	e786      	b.n	8002d34 <USART2_IRQHandler+0x98>
 8002e26:	3001      	adds	r0, #1
 8002e28:	4a17      	ldr	r2, [pc, #92]	; (8002e88 <USART2_IRQHandler+0x1ec>)
 8002e2a:	f440 4080 	orr.w	r0, r0, #16384	; 0x4000
 8002e2e:	f8c3 0204 	str.w	r0, [r3, #516]	; 0x204
 8002e32:	6850      	ldr	r0, [r2, #4]
 8002e34:	4a15      	ldr	r2, [pc, #84]	; (8002e8c <USART2_IRQHandler+0x1f0>)
 8002e36:	6010      	str	r0, [r2, #0]
 8002e38:	2210      	movs	r2, #16
 8002e3a:	f8c1 2c14 	str.w	r2, [r1, #3092]	; 0xc14
 8002e3e:	e779      	b.n	8002d34 <USART2_IRQHandler+0x98>
 8002e40:	f8d3 1204 	ldr.w	r1, [r3, #516]	; 0x204
 8002e44:	2917      	cmp	r1, #23
 8002e46:	bf9e      	ittt	ls
 8002e48:	545a      	strbls	r2, [r3, r1]
 8002e4a:	3101      	addls	r1, #1
 8002e4c:	f8c3 1204 	strls.w	r1, [r3, #516]	; 0x204
 8002e50:	480c      	ldr	r0, [pc, #48]	; (8002e84 <USART2_IRQHandler+0x1e8>)
 8002e52:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8002e56:	f8d1 2424 	ldr.w	r2, [r1, #1060]	; 0x424
 8002e5a:	8983      	ldrh	r3, [r0, #12]
 8002e5c:	b29b      	uxth	r3, r3
 8002e5e:	b292      	uxth	r2, r2
 8002e60:	f1c3 0304 	rsb	r3, r3, #4
 8002e64:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 8002e68:	b29b      	uxth	r3, r3
 8002e6a:	8182      	strh	r2, [r0, #12]
 8002e6c:	f8c1 3434 	str.w	r3, [r1, #1076]	; 0x434
 8002e70:	e777      	b.n	8002d62 <USART2_IRQHandler+0xc6>
 8002e72:	2200      	movs	r2, #0
 8002e74:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8002e78:	e7be      	b.n	8002df8 <USART2_IRQHandler+0x15c>
 8002e7a:	bf00      	nop
 8002e7c:	40010000 	andmi	r0, r1, r0
 8002e80:	20000210 	andcs	r0, r0, r0, lsl r2
 8002e84:	20000628 	andcs	r0, r0, r8, lsr #12
 8002e88:	e0001000 	and	r1, r0, r0
 8002e8c:	20000640 	andcs	r0, r0, r0, asr #12

08002e90 <TIMER1_IRQHandler>:
 8002e90:	b538      	push	{r3, r4, r5, lr}
 8002e92:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002e96:	4a24      	ldr	r2, [pc, #144]	; (8002f28 <TIMER1_IRQHandler+0x98>)
 8002e98:	691c      	ldr	r4, [r3, #16]
 8002e9a:	4924      	ldr	r1, [pc, #144]	; (8002f2c <TIMER1_IRQHandler+0x9c>)
 8002e9c:	8813      	ldrh	r3, [r2, #0]
 8002e9e:	2008      	movs	r0, #8
 8002ea0:	f8c1 0c10 	str.w	r0, [r1, #3088]	; 0xc10
 8002ea4:	07a1      	lsls	r1, r4, #30
 8002ea6:	b29b      	uxth	r3, r3
 8002ea8:	d51b      	bpl.n	8002ee2 <TIMER1_IRQHandler+0x52>
 8002eaa:	07dd      	lsls	r5, r3, #31
 8002eac:	d50f      	bpl.n	8002ece <TIMER1_IRQHandler+0x3e>
 8002eae:	8813      	ldrh	r3, [r2, #0]
 8002eb0:	4d1f      	ldr	r5, [pc, #124]	; (8002f30 <TIMER1_IRQHandler+0xa0>)
 8002eb2:	b29b      	uxth	r3, r3
 8002eb4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002eb8:	8013      	strh	r3, [r2, #0]
 8002eba:	2110      	movs	r1, #16
 8002ebc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002ec0:	2203      	movs	r2, #3
 8002ec2:	4628      	mov	r0, r5
 8002ec4:	f005 fafa 	bl	80084bc <gpio_init>
 8002ec8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002ecc:	616b      	str	r3, [r5, #20]
 8002ece:	4621      	mov	r1, r4
 8002ed0:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8002ed4:	f005 fdc3 	bl	8008a5e <timer_interrupt_flag_clear>
 8002ed8:	4b14      	ldr	r3, [pc, #80]	; (8002f2c <TIMER1_IRQHandler+0x9c>)
 8002eda:	2208      	movs	r2, #8
 8002edc:	f8c3 2c14 	str.w	r2, [r3, #3092]	; 0xc14
 8002ee0:	bd38      	pop	{r3, r4, r5, pc}
 8002ee2:	0760      	lsls	r0, r4, #29
 8002ee4:	d509      	bpl.n	8002efa <TIMER1_IRQHandler+0x6a>
 8002ee6:	05d9      	lsls	r1, r3, #23
 8002ee8:	d5f1      	bpl.n	8002ece <TIMER1_IRQHandler+0x3e>
 8002eea:	4811      	ldr	r0, [pc, #68]	; (8002f30 <TIMER1_IRQHandler+0xa0>)
 8002eec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002ef0:	2203      	movs	r2, #3
 8002ef2:	2118      	movs	r1, #24
 8002ef4:	f005 fae2 	bl	80084bc <gpio_init>
 8002ef8:	e7e9      	b.n	8002ece <TIMER1_IRQHandler+0x3e>
 8002efa:	0722      	lsls	r2, r4, #28
 8002efc:	d5e7      	bpl.n	8002ece <TIMER1_IRQHandler+0x3e>
 8002efe:	05db      	lsls	r3, r3, #23
 8002f00:	d5e5      	bpl.n	8002ece <TIMER1_IRQHandler+0x3e>
 8002f02:	4b0c      	ldr	r3, [pc, #48]	; (8002f34 <TIMER1_IRQHandler+0xa4>)
 8002f04:	480c      	ldr	r0, [pc, #48]	; (8002f38 <TIMER1_IRQHandler+0xa8>)
 8002f06:	69da      	ldr	r2, [r3, #28]
 8002f08:	f022 0201 	bic.w	r2, r2, #1
 8002f0c:	61da      	str	r2, [r3, #28]
 8002f0e:	4a0b      	ldr	r2, [pc, #44]	; (8002f3c <TIMER1_IRQHandler+0xac>)
 8002f10:	629a      	str	r2, [r3, #40]	; 0x28
 8002f12:	f8b2 2202 	ldrh.w	r2, [r2, #514]	; 0x202
 8002f16:	621a      	str	r2, [r3, #32]
 8002f18:	69da      	ldr	r2, [r3, #28]
 8002f1a:	f042 0201 	orr.w	r2, r2, #1
 8002f1e:	61da      	str	r2, [r3, #28]
 8002f20:	2180      	movs	r1, #128	; 0x80
 8002f22:	f005 fe6f 	bl	8008c04 <usart_dma_transmit_config>
 8002f26:	e7d2      	b.n	8002ece <TIMER1_IRQHandler+0x3e>
 8002f28:	20000638 	andcs	r0, r0, r8, lsr r6
 8002f2c:	40010000 	andmi	r0, r1, r0
 8002f30:	40011000 	andmi	r1, r1, r0
 8002f34:	40020000 	andmi	r0, r2, r0
 8002f38:	40004800 	andmi	r4, r0, r0, lsl #16
 8002f3c:	20000420 	andcs	r0, r0, r0, lsr #8

08002f40 <TIMER2_IRQHandler>:
 8002f40:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002f44:	f8d3 1410 	ldr.w	r1, [r3, #1040]	; 0x410
 8002f48:	078b      	lsls	r3, r1, #30
 8002f4a:	d511      	bpl.n	8002f70 <TIMER2_IRQHandler+0x30>
 8002f4c:	4b13      	ldr	r3, [pc, #76]	; (8002f9c <TIMER2_IRQHandler+0x5c>)
 8002f4e:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8002f52:	2a03      	cmp	r2, #3
 8002f54:	d10f      	bne.n	8002f76 <TIMER2_IRQHandler+0x36>
 8002f56:	2200      	movs	r2, #0
 8002f58:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
 8002f5c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8002f60:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002f64:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8002f68:	4b0d      	ldr	r3, [pc, #52]	; (8002fa0 <TIMER2_IRQHandler+0x60>)
 8002f6a:	2210      	movs	r2, #16
 8002f6c:	f8c3 2c14 	str.w	r2, [r3, #3092]	; 0xc14
 8002f70:	480c      	ldr	r0, [pc, #48]	; (8002fa4 <TIMER2_IRQHandler+0x64>)
 8002f72:	f005 bd74 	b.w	8008a5e <timer_interrupt_flag_clear>
 8002f76:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8002f7a:	2a07      	cmp	r2, #7
 8002f7c:	d1f8      	bne.n	8002f70 <TIMER2_IRQHandler+0x30>
 8002f7e:	2200      	movs	r2, #0
 8002f80:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
 8002f84:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8002f88:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002f8c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8002f90:	4b03      	ldr	r3, [pc, #12]	; (8002fa0 <TIMER2_IRQHandler+0x60>)
 8002f92:	2210      	movs	r2, #16
 8002f94:	f8c3 2c14 	str.w	r2, [r3, #3092]	; 0xc14
 8002f98:	2220      	movs	r2, #32
 8002f9a:	e7e7      	b.n	8002f6c <TIMER2_IRQHandler+0x2c>
 8002f9c:	20000210 	andcs	r0, r0, r0, lsl r2
 8002fa0:	40010000 	andmi	r0, r1, r0
 8002fa4:	40000400 	andmi	r0, r0, r0, lsl #8

08002fa8 <TIMER3_IRQHandler>:
 8002fa8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002fac:	4802      	ldr	r0, [pc, #8]	; (8002fb8 <TIMER3_IRQHandler+0x10>)
 8002fae:	f8d3 1810 	ldr.w	r1, [r3, #2064]	; 0x810
 8002fb2:	f005 bd54 	b.w	8008a5e <timer_interrupt_flag_clear>
 8002fb6:	bf00      	nop
 8002fb8:	40000800 	andmi	r0, r0, r0, lsl #16

08002fbc <TIMER6_IRQHandler>:
 8002fbc:	4b05      	ldr	r3, [pc, #20]	; (8002fd4 <TIMER6_IRQHandler+0x18>)
 8002fbe:	4806      	ldr	r0, [pc, #24]	; (8002fd8 <TIMER6_IRQHandler+0x1c>)
 8002fc0:	685a      	ldr	r2, [r3, #4]
 8002fc2:	6899      	ldr	r1, [r3, #8]
 8002fc4:	1a52      	subs	r2, r2, r1
 8002fc6:	601a      	str	r2, [r3, #0]
 8002fc8:	685a      	ldr	r2, [r3, #4]
 8002fca:	609a      	str	r2, [r3, #8]
 8002fcc:	2101      	movs	r1, #1
 8002fce:	f005 bd46 	b.w	8008a5e <timer_interrupt_flag_clear>
 8002fd2:	bf00      	nop
 8002fd4:	20000628 	andcs	r0, r0, r8, lsr #12
 8002fd8:	40001400 	andmi	r1, r0, r0, lsl #8

08002fdc <Dmx::ClearData(unsigned int)>:
 8002fdc:	4a0a      	ldr	r2, [pc, #40]	; (8003008 <Dmx::ClearData(unsigned int)+0x2c>)
 8002fde:	f44f 7301 	mov.w	r3, #516	; 0x204
 8002fe2:	fb03 2301 	mla	r3, r3, r1, r2
 8002fe6:	b510      	push	{r4, lr}
 8002fe8:	f203 2002 	addw	r0, r3, #514	; 0x202
 8002fec:	2400      	movs	r4, #0
 8002fee:	f823 4b02 	strh.w	r4, [r3], #2
 8002ff2:	4283      	cmp	r3, r0
 8002ff4:	d1fb      	bne.n	8002fee <Dmx::ClearData(unsigned int)+0x12>
 8002ff6:	f44f 7301 	mov.w	r3, #516	; 0x204
 8002ffa:	fb03 2101 	mla	r1, r3, r1, r2
 8002ffe:	f240 2301 	movw	r3, #513	; 0x201
 8003002:	f8a1 3202 	strh.w	r3, [r1, #514]	; 0x202
 8003006:	bd10      	pop	{r4, pc}
 8003008:	20000420 	andcs	r0, r0, r0, lsr #8

0800300c <Dmx::StartData(unsigned int, unsigned int)>:
 800300c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800300e:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 8003012:	b085      	sub	sp, #20
 8003014:	6943      	ldr	r3, [r0, #20]
 8003016:	460c      	mov	r4, r1
 8003018:	4615      	mov	r5, r2
 800301a:	2b00      	cmp	r3, #0
 800301c:	d168      	bne.n	80030f0 <Dmx::StartData(unsigned int, unsigned int)+0xe4>
 800301e:	4e46      	ldr	r6, [pc, #280]	; (8003138 <Dmx::StartData(unsigned int, unsigned int)+0x12c>)
 8003020:	8834      	ldrh	r4, [r6, #0]
 8003022:	b2a4      	uxth	r4, r4
 8003024:	2c00      	cmp	r4, #0
 8003026:	d157      	bne.n	80030d8 <Dmx::StartData(unsigned int, unsigned int)+0xcc>
 8003028:	f44f 60e0 	mov.w	r0, #1792	; 0x700
 800302c:	f005 fade 	bl	80085ec <rcu_periph_clock_enable>
 8003030:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8003034:	f005 fc6a 	bl	800890c <timer_deinit>
 8003038:	4b40      	ldr	r3, [pc, #256]	; (800313c <Dmx::StartData(unsigned int, unsigned int)+0x130>)
 800303a:	f88d 400c 	strb.w	r4, [sp, #12]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	9302      	str	r3, [sp, #8]
 8003042:	4669      	mov	r1, sp
 8003044:	2377      	movs	r3, #119	; 0x77
 8003046:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800304a:	e9cd 3400 	strd	r3, r4, [sp]
 800304e:	f005 fcbf 	bl	80089d0 <timer_init>
 8003052:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003056:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800305a:	f005 fd03 	bl	8008a64 <timer_flag_clear>
 800305e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003062:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8003066:	f005 fcfa 	bl	8008a5e <timer_interrupt_flag_clear>
 800306a:	2210      	movs	r2, #16
 800306c:	4621      	mov	r1, r4
 800306e:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8003072:	f005 fcfa 	bl	8008a6a <timer_channel_output_mode_config>
 8003076:	2210      	movs	r2, #16
 8003078:	2101      	movs	r1, #1
 800307a:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800307e:	f005 fcf4 	bl	8008a6a <timer_channel_output_mode_config>
 8003082:	4f2f      	ldr	r7, [pc, #188]	; (8003140 <Dmx::StartData(unsigned int, unsigned int)+0x134>)
 8003084:	2210      	movs	r2, #16
 8003086:	2102      	movs	r1, #2
 8003088:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800308c:	f005 fced 	bl	8008a6a <timer_channel_output_mode_config>
 8003090:	4622      	mov	r2, r4
 8003092:	4621      	mov	r1, r4
 8003094:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8003098:	f005 fd0d 	bl	8008ab6 <timer_channel_output_pulse_value_config>
 800309c:	683a      	ldr	r2, [r7, #0]
 800309e:	2101      	movs	r1, #1
 80030a0:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80030a4:	f005 fd07 	bl	8008ab6 <timer_channel_output_pulse_value_config>
 80030a8:	4b26      	ldr	r3, [pc, #152]	; (8003144 <Dmx::StartData(unsigned int, unsigned int)+0x138>)
 80030aa:	683a      	ldr	r2, [r7, #0]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	2102      	movs	r1, #2
 80030b0:	441a      	add	r2, r3
 80030b2:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80030b6:	f005 fcfe 	bl	8008ab6 <timer_channel_output_pulse_value_config>
 80030ba:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80030be:	210e      	movs	r1, #14
 80030c0:	f005 fcc9 	bl	8008a56 <timer_interrupt_enable>
 80030c4:	4b20      	ldr	r3, [pc, #128]	; (8003148 <Dmx::StartData(unsigned int, unsigned int)+0x13c>)
 80030c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80030ca:	f883 431c 	strb.w	r4, [r3, #796]	; 0x31c
 80030ce:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80030d2:	601a      	str	r2, [r3, #0]
 80030d4:	f005 fcba 	bl	8008a4c <timer_enable>
 80030d8:	8831      	ldrh	r1, [r6, #0]
 80030da:	2201      	movs	r2, #1
 80030dc:	fa02 f305 	lsl.w	r3, r2, r5
 80030e0:	430b      	orrs	r3, r1
 80030e2:	b29b      	uxth	r3, r3
 80030e4:	8033      	strh	r3, [r6, #0]
 80030e6:	4b19      	ldr	r3, [pc, #100]	; (800314c <Dmx::StartData(unsigned int, unsigned int)+0x140>)
 80030e8:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80030ec:	b005      	add	sp, #20
 80030ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80030f0:	4b17      	ldr	r3, [pc, #92]	; (8003150 <Dmx::StartData(unsigned int, unsigned int)+0x144>)
 80030f2:	f44f 7204 	mov.w	r2, #528	; 0x210
 80030f6:	fb02 3305 	mla	r3, r2, r5, r3
 80030fa:	2200      	movs	r2, #0
 80030fc:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
 8003100:	2107      	movs	r1, #7
 8003102:	4620      	mov	r0, r4
 8003104:	f005 fd84 	bl	8008c10 <usart_flag_get>
 8003108:	2800      	cmp	r0, #0
 800310a:	d0f9      	beq.n	8003100 <Dmx::StartData(unsigned int, unsigned int)+0xf4>
 800310c:	4911      	ldr	r1, [pc, #68]	; (8003154 <Dmx::StartData(unsigned int, unsigned int)+0x148>)
 800310e:	4620      	mov	r0, r4
 8003110:	f005 fda0 	bl	8008c54 <usart_interrupt_flag_clear>
 8003114:	f240 3105 	movw	r1, #773	; 0x305
 8003118:	4620      	mov	r0, r4
 800311a:	f005 fd8f 	bl	8008c3c <usart_interrupt_enable>
 800311e:	4b0b      	ldr	r3, [pc, #44]	; (800314c <Dmx::StartData(unsigned int, unsigned int)+0x140>)
 8003120:	2202      	movs	r2, #2
 8003122:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8003126:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800312a:	f8d2 340c 	ldr.w	r3, [r2, #1036]	; 0x40c
 800312e:	f043 0302 	orr.w	r3, r3, #2
 8003132:	f8c2 340c 	str.w	r3, [r2, #1036]	; 0x40c
 8003136:	e7d9      	b.n	80030ec <Dmx::StartData(unsigned int, unsigned int)+0xe0>
 8003138:	20000638 	andcs	r0, r0, r8, lsr r6
 800313c:	20000000 	andcs	r0, r0, r0
 8003140:	20000008 	andcs	r0, r0, r8
 8003144:	20000004 	andcs	r0, r0, r4
 8003148:	e000e100 	and	lr, r0, r0, lsl #2
 800314c:	20000624 	andcs	r0, r0, r4, lsr #12
 8003150:	20000210 	andcs	r0, r0, r0, lsl r2
 8003154:	00050305 	andeq	r0, r5, r5, lsl #6

08003158 <Dmx::StopData(unsigned int, unsigned int)>:
 8003158:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800315c:	4f21      	ldr	r7, [pc, #132]	; (80031e4 <Dmx::StopData(unsigned int, unsigned int)+0x8c>)
 800315e:	f857 3022 	ldr.w	r3, [r7, r2, lsl #2]
 8003162:	4688      	mov	r8, r1
 8003164:	4614      	mov	r4, r2
 8003166:	b323      	cbz	r3, 80031b2 <Dmx::StopData(unsigned int, unsigned int)+0x5a>
 8003168:	6943      	ldr	r3, [r0, #20]
 800316a:	bb23      	cbnz	r3, 80031b6 <Dmx::StopData(unsigned int, unsigned int)+0x5e>
 800316c:	4d1e      	ldr	r5, [pc, #120]	; (80031e8 <Dmx::StopData(unsigned int, unsigned int)+0x90>)
 800316e:	882b      	ldrh	r3, [r5, #0]
 8003170:	2601      	movs	r6, #1
 8003172:	fa06 f202 	lsl.w	r2, r6, r2
 8003176:	b29b      	uxth	r3, r3
 8003178:	ea23 0302 	bic.w	r3, r3, r2
 800317c:	802b      	strh	r3, [r5, #0]
 800317e:	f3bf 8f5f 	dmb	sy
 8003182:	882b      	ldrh	r3, [r5, #0]
 8003184:	f104 0208 	add.w	r2, r4, #8
 8003188:	b29b      	uxth	r3, r3
 800318a:	4096      	lsls	r6, r2
 800318c:	ea36 0303 	bics.w	r3, r6, r3
 8003190:	d105      	bne.n	800319e <Dmx::StopData(unsigned int, unsigned int)+0x46>
 8003192:	2107      	movs	r1, #7
 8003194:	4640      	mov	r0, r8
 8003196:	f005 fd3b 	bl	8008c10 <usart_flag_get>
 800319a:	2801      	cmp	r0, #1
 800319c:	d1f9      	bne.n	8003192 <Dmx::StopData(unsigned int, unsigned int)+0x3a>
 800319e:	882b      	ldrh	r3, [r5, #0]
 80031a0:	b29b      	uxth	r3, r3
 80031a2:	ea23 0306 	bic.w	r3, r3, r6
 80031a6:	802b      	strh	r3, [r5, #0]
 80031a8:	f3bf 8f4f 	dsb	sy
 80031ac:	2300      	movs	r3, #0
 80031ae:	f847 3024 	str.w	r3, [r7, r4, lsl #2]
 80031b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80031b6:	f240 3105 	movw	r1, #773	; 0x305
 80031ba:	4640      	mov	r0, r8
 80031bc:	f005 fd48 	bl	8008c50 <usart_interrupt_disable>
 80031c0:	4b0a      	ldr	r3, [pc, #40]	; (80031ec <Dmx::StopData(unsigned int, unsigned int)+0x94>)
 80031c2:	f44f 7204 	mov.w	r2, #528	; 0x210
 80031c6:	fb02 3304 	mla	r3, r2, r4, r3
 80031ca:	2200      	movs	r2, #0
 80031cc:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
 80031d0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80031d4:	f8d2 340c 	ldr.w	r3, [r2, #1036]	; 0x40c
 80031d8:	f023 0302 	bic.w	r3, r3, #2
 80031dc:	f8c2 340c 	str.w	r3, [r2, #1036]	; 0x40c
 80031e0:	e7e4      	b.n	80031ac <Dmx::StopData(unsigned int, unsigned int)+0x54>
 80031e2:	bf00      	nop
 80031e4:	20000624 	andcs	r0, r0, r4, lsr #12
 80031e8:	20000638 	andcs	r0, r0, r8, lsr r6
 80031ec:	20000210 	andcs	r0, r0, r0, lsl r2

080031f0 <Dmx::SetPortDirection(unsigned int, dmx::PortDirection, bool)>:
 80031f0:	b570      	push	{r4, r5, r6, lr}
 80031f2:	461d      	mov	r5, r3
 80031f4:	6943      	ldr	r3, [r0, #20]
 80031f6:	4293      	cmp	r3, r2
 80031f8:	4606      	mov	r6, r0
 80031fa:	4614      	mov	r4, r2
 80031fc:	d014      	beq.n	8003228 <Dmx::SetPortDirection(unsigned int, dmx::PortDirection, bool)+0x38>
 80031fe:	6142      	str	r2, [r0, #20]
 8003200:	4910      	ldr	r1, [pc, #64]	; (8003244 <Dmx::SetPortDirection(unsigned int, dmx::PortDirection, bool)+0x54>)
 8003202:	2200      	movs	r2, #0
 8003204:	f7ff ffa8 	bl	8003158 <Dmx::StopData(unsigned int, unsigned int)>
 8003208:	b934      	cbnz	r4, 8003218 <Dmx::SetPortDirection(unsigned int, dmx::PortDirection, bool)+0x28>
 800320a:	4b0f      	ldr	r3, [pc, #60]	; (8003248 <Dmx::SetPortDirection(unsigned int, dmx::PortDirection, bool)+0x58>)
 800320c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003210:	f8c3 2c10 	str.w	r2, [r3, #3088]	; 0xc10
 8003214:	b94d      	cbnz	r5, 800322a <Dmx::SetPortDirection(unsigned int, dmx::PortDirection, bool)+0x3a>
 8003216:	bd70      	pop	{r4, r5, r6, pc}
 8003218:	2c01      	cmp	r4, #1
 800321a:	d1fb      	bne.n	8003214 <Dmx::SetPortDirection(unsigned int, dmx::PortDirection, bool)+0x24>
 800321c:	4b0a      	ldr	r3, [pc, #40]	; (8003248 <Dmx::SetPortDirection(unsigned int, dmx::PortDirection, bool)+0x58>)
 800321e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003222:	f8c3 2c14 	str.w	r2, [r3, #3092]	; 0xc14
 8003226:	e7f5      	b.n	8003214 <Dmx::SetPortDirection(unsigned int, dmx::PortDirection, bool)+0x24>
 8003228:	b135      	cbz	r5, 8003238 <Dmx::SetPortDirection(unsigned int, dmx::PortDirection, bool)+0x48>
 800322a:	4630      	mov	r0, r6
 800322c:	4905      	ldr	r1, [pc, #20]	; (8003244 <Dmx::SetPortDirection(unsigned int, dmx::PortDirection, bool)+0x54>)
 800322e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8003232:	2200      	movs	r2, #0
 8003234:	f7ff beea 	b.w	800300c <Dmx::StartData(unsigned int, unsigned int)>
 8003238:	462a      	mov	r2, r5
 800323a:	4902      	ldr	r1, [pc, #8]	; (8003244 <Dmx::SetPortDirection(unsigned int, dmx::PortDirection, bool)+0x54>)
 800323c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8003240:	f7ff bf8a 	b.w	8003158 <Dmx::StopData(unsigned int, unsigned int)>
 8003244:	40004800 	andmi	r4, r0, r0, lsl #16
 8003248:	40010000 	andmi	r0, r1, r0

0800324c <Dmx::Dmx()>:
 800324c:	225c      	movs	r2, #92	; 0x5c
 800324e:	230c      	movs	r3, #12
 8003250:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003254:	e9c0 2300 	strd	r2, r3, [r0]
 8003258:	f246 13a8 	movw	r3, #25000	; 0x61a8
 800325c:	e9c0 3302 	strd	r3, r3, [r0, #8]
 8003260:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003264:	8203      	strh	r3, [r0, #16]
 8003266:	4b5b      	ldr	r3, [pc, #364]	; (80033d4 <Dmx::Dmx()+0x188>)
 8003268:	4e5b      	ldr	r6, [pc, #364]	; (80033d8 <Dmx::Dmx()+0x18c>)
 800326a:	6018      	str	r0, [r3, #0]
 800326c:	4b5b      	ldr	r3, [pc, #364]	; (80033dc <Dmx::Dmx()+0x190>)
 800326e:	f8df 8190 	ldr.w	r8, [pc, #400]	; 8003400 <Dmx::Dmx()+0x1b4>
 8003272:	2400      	movs	r4, #0
 8003274:	b08b      	sub	sp, #44	; 0x2c
 8003276:	4605      	mov	r5, r0
 8003278:	801c      	strh	r4, [r3, #0]
 800327a:	2203      	movs	r2, #3
 800327c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003280:	4857      	ldr	r0, [pc, #348]	; (80033e0 <Dmx::Dmx()+0x194>)
 8003282:	2110      	movs	r1, #16
 8003284:	f005 f91a 	bl	80084bc <gpio_init>
 8003288:	4621      	mov	r1, r4
 800328a:	4628      	mov	r0, r5
 800328c:	f7ff fea6 	bl	8002fdc <Dmx::ClearData(unsigned int)>
 8003290:	4b54      	ldr	r3, [pc, #336]	; (80033e4 <Dmx::Dmx()+0x198>)
 8003292:	2201      	movs	r2, #1
 8003294:	4621      	mov	r1, r4
 8003296:	601c      	str	r4, [r3, #0]
 8003298:	4628      	mov	r0, r5
 800329a:	4623      	mov	r3, r4
 800329c:	f7ff ffa8 	bl	80031f0 <Dmx::SetPortDirection(unsigned int, dmx::PortDirection, bool)>
 80032a0:	4b51      	ldr	r3, [pc, #324]	; (80033e8 <Dmx::Dmx()+0x19c>)
 80032a2:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 80032a6:	f8c3 420c 	str.w	r4, [r3, #524]	; 0x20c
 80032aa:	f005 f99f 	bl	80085ec <rcu_periph_clock_enable>
 80032ae:	f240 5001 	movw	r0, #1281	; 0x501
 80032b2:	f005 f99b 	bl	80085ec <rcu_periph_clock_enable>
 80032b6:	484d      	ldr	r0, [pc, #308]	; (80033ec <Dmx::Dmx()+0x1a0>)
 80032b8:	2101      	movs	r1, #1
 80032ba:	f004 fff3 	bl	80082a4 <dma_deinit>
 80032be:	4b4c      	ldr	r3, [pc, #304]	; (80033f0 <Dmx::Dmx()+0x1a4>)
 80032c0:	484a      	ldr	r0, [pc, #296]	; (80033ec <Dmx::Dmx()+0x1a0>)
 80032c2:	9406      	str	r4, [sp, #24]
 80032c4:	2701      	movs	r7, #1
 80032c6:	e9cd 3403 	strd	r3, r4, [sp, #12]
 80032ca:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80032ce:	aa03      	add	r2, sp, #12
 80032d0:	9308      	str	r3, [sp, #32]
 80032d2:	4639      	mov	r1, r7
 80032d4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80032d8:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
 80032dc:	f88d 7026 	strb.w	r7, [sp, #38]	; 0x26
 80032e0:	f005 f808 	bl	80082f4 <dma_init>
 80032e4:	4639      	mov	r1, r7
 80032e6:	4841      	ldr	r0, [pc, #260]	; (80033ec <Dmx::Dmx()+0x1a0>)
 80032e8:	f005 f83e 	bl	8008368 <dma_circulation_disable>
 80032ec:	4639      	mov	r1, r7
 80032ee:	483f      	ldr	r0, [pc, #252]	; (80033ec <Dmx::Dmx()+0x1a0>)
 80032f0:	f005 f84a 	bl	8008388 <dma_memory_to_memory_disable>
 80032f4:	f240 7001 	movw	r0, #1793	; 0x701
 80032f8:	f005 f978 	bl	80085ec <rcu_periph_clock_enable>
 80032fc:	4630      	mov	r0, r6
 80032fe:	f005 fb05 	bl	800890c <timer_deinit>
 8003302:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
 8003306:	2377      	movs	r3, #119	; 0x77
 8003308:	a903      	add	r1, sp, #12
 800330a:	4630      	mov	r0, r6
 800330c:	e9cd 3403 	strd	r3, r4, [sp, #12]
 8003310:	f8cd 9014 	str.w	r9, [sp, #20]
 8003314:	f88d 4018 	strb.w	r4, [sp, #24]
 8003318:	f005 fb5a 	bl	80089d0 <timer_init>
 800331c:	4649      	mov	r1, r9
 800331e:	4630      	mov	r0, r6
 8003320:	f005 fba0 	bl	8008a64 <timer_flag_clear>
 8003324:	4649      	mov	r1, r9
 8003326:	4630      	mov	r0, r6
 8003328:	f005 fb99 	bl	8008a5e <timer_interrupt_flag_clear>
 800332c:	4621      	mov	r1, r4
 800332e:	4630      	mov	r0, r6
 8003330:	2210      	movs	r2, #16
 8003332:	f005 fb9a 	bl	8008a6a <timer_channel_output_mode_config>
 8003336:	4639      	mov	r1, r7
 8003338:	4630      	mov	r0, r6
 800333a:	2210      	movs	r2, #16
 800333c:	f005 fb95 	bl	8008a6a <timer_channel_output_mode_config>
 8003340:	4630      	mov	r0, r6
 8003342:	2210      	movs	r2, #16
 8003344:	2102      	movs	r1, #2
 8003346:	f005 fb90 	bl	8008a6a <timer_channel_output_mode_config>
 800334a:	2210      	movs	r2, #16
 800334c:	2103      	movs	r1, #3
 800334e:	4630      	mov	r0, r6
 8003350:	f005 fb8b 	bl	8008a6a <timer_channel_output_mode_config>
 8003354:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8003358:	f888 431d 	strb.w	r4, [r8, #797]	; 0x31d
 800335c:	4630      	mov	r0, r6
 800335e:	f8c8 3000 	str.w	r3, [r8]
 8003362:	f005 fb73 	bl	8008a4c <timer_enable>
 8003366:	f240 7005 	movw	r0, #1797	; 0x705
 800336a:	f005 f93f 	bl	80085ec <rcu_periph_clock_enable>
 800336e:	4821      	ldr	r0, [pc, #132]	; (80033f4 <Dmx::Dmx()+0x1a8>)
 8003370:	f005 facc 	bl	800890c <timer_deinit>
 8003374:	f642 63df 	movw	r3, #11999	; 0x2edf
 8003378:	f8ad 300c 	strh.w	r3, [sp, #12]
 800337c:	a903      	add	r1, sp, #12
 800337e:	f242 7310 	movw	r3, #10000	; 0x2710
 8003382:	481c      	ldr	r0, [pc, #112]	; (80033f4 <Dmx::Dmx()+0x1a8>)
 8003384:	9305      	str	r3, [sp, #20]
 8003386:	f005 fb23 	bl	80089d0 <timer_init>
 800338a:	4649      	mov	r1, r9
 800338c:	4819      	ldr	r0, [pc, #100]	; (80033f4 <Dmx::Dmx()+0x1a8>)
 800338e:	f005 fb69 	bl	8008a64 <timer_flag_clear>
 8003392:	4649      	mov	r1, r9
 8003394:	4817      	ldr	r0, [pc, #92]	; (80033f4 <Dmx::Dmx()+0x1a8>)
 8003396:	f005 fb62 	bl	8008a5e <timer_interrupt_flag_clear>
 800339a:	4639      	mov	r1, r7
 800339c:	4815      	ldr	r0, [pc, #84]	; (80033f4 <Dmx::Dmx()+0x1a8>)
 800339e:	f005 fb5a 	bl	8008a56 <timer_interrupt_enable>
 80033a2:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 80033a6:	f888 4337 	strb.w	r4, [r8, #823]	; 0x337
 80033aa:	4812      	ldr	r0, [pc, #72]	; (80033f4 <Dmx::Dmx()+0x1a8>)
 80033ac:	f8c8 3004 	str.w	r3, [r8, #4]
 80033b0:	f005 fb4c 	bl	8008a4c <timer_enable>
 80033b4:	2302      	movs	r3, #2
 80033b6:	9300      	str	r3, [sp, #0]
 80033b8:	490f      	ldr	r1, [pc, #60]	; (80033f8 <Dmx::Dmx()+0x1ac>)
 80033ba:	4810      	ldr	r0, [pc, #64]	; (80033fc <Dmx::Dmx()+0x1b0>)
 80033bc:	4623      	mov	r3, r4
 80033be:	2208      	movs	r2, #8
 80033c0:	f005 fee6 	bl	8009190 <gd32_uart_begin>
 80033c4:	2380      	movs	r3, #128	; 0x80
 80033c6:	4628      	mov	r0, r5
 80033c8:	f8c8 3004 	str.w	r3, [r8, #4]
 80033cc:	b00b      	add	sp, #44	; 0x2c
 80033ce:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80033d2:	bf00      	nop
 80033d4:	2000063c 	andcs	r0, r0, ip, lsr r6
 80033d8:	40000400 	andmi	r0, r0, r0, lsl #8
 80033dc:	20000638 	andcs	r0, r0, r8, lsr r6
 80033e0:	40010c00 	andmi	r0, r1, r0, lsl #24
 80033e4:	20000624 	andcs	r0, r0, r4, lsr #12
 80033e8:	20000210 	andcs	r0, r0, r0, lsl r2
 80033ec:	40020000 	andmi	r0, r2, r0
 80033f0:	40004804 	andmi	r4, r0, r4, lsl #16
 80033f4:	40001400 	andmi	r1, r0, r0, lsl #8
 80033f8:	0003d090 	muleq	r3, r0, r0
 80033fc:	40004800 	andmi	r4, r0, r0, lsl #16
 8003400:	e000e100 	and	lr, r0, r0, lsl #2

08003404 <Dmx::GetDmxAvailable(unsigned int)>:
 8003404:	4b08      	ldr	r3, [pc, #32]	; (8003428 <Dmx::GetDmxAvailable(unsigned int)+0x24>)
 8003406:	f44f 7204 	mov.w	r2, #528	; 0x210
 800340a:	fb02 3101 	mla	r1, r2, r1, r3
 800340e:	f8d1 3204 	ldr.w	r3, [r1, #516]	; 0x204
 8003412:	f413 4000 	ands.w	r0, r3, #32768	; 0x8000
 8003416:	bf1f      	itttt	ne
 8003418:	f423 4300 	bicne.w	r3, r3, #32768	; 0x8000
 800341c:	f103 33ff 	addne.w	r3, r3, #4294967295	; 0xffffffff
 8003420:	f8c1 3204 	strne.w	r3, [r1, #516]	; 0x204
 8003424:	4608      	movne	r0, r1
 8003426:	4770      	bx	lr
 8003428:	20000210 	andcs	r0, r0, r0, lsl r2

0800342c <Dmx::GetUpdatesPerSecond(unsigned int)>:
 800342c:	f3bf 8f5f 	dmb	sy
 8003430:	4b01      	ldr	r3, [pc, #4]	; (8003438 <Dmx::GetUpdatesPerSecond(unsigned int)+0xc>)
 8003432:	0109      	lsls	r1, r1, #4
 8003434:	5858      	ldr	r0, [r3, r1]
 8003436:	4770      	bx	lr
 8003438:	20000628 	andcs	r0, r0, r8, lsr #12

0800343c <Dmx::RdmSendRaw(unsigned int, unsigned char const*, unsigned int)>:
 800343c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800343e:	4e20      	ldr	r6, [pc, #128]	; (80034c0 <Dmx::RdmSendRaw(unsigned int, unsigned char const*, unsigned int)+0x84>)
 8003440:	4614      	mov	r4, r2
 8003442:	461d      	mov	r5, r3
 8003444:	2106      	movs	r1, #6
 8003446:	4630      	mov	r0, r6
 8003448:	f005 fbe2 	bl	8008c10 <usart_flag_get>
 800344c:	2800      	cmp	r0, #0
 800344e:	d0f9      	beq.n	8003444 <Dmx::RdmSendRaw(unsigned int, unsigned char const*, unsigned int)+0x8>
 8003450:	4e1c      	ldr	r6, [pc, #112]	; (80034c4 <Dmx::RdmSendRaw(unsigned int, unsigned char const*, unsigned int)+0x88>)
 8003452:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003456:	2203      	movs	r2, #3
 8003458:	4630      	mov	r0, r6
 800345a:	f44f 6780 	mov.w	r7, #1024	; 0x400
 800345e:	2110      	movs	r1, #16
 8003460:	f005 f82c 	bl	80084bc <gpio_init>
 8003464:	6177      	str	r7, [r6, #20]
 8003466:	2100      	movs	r1, #0
 8003468:	20b0      	movs	r0, #176	; 0xb0
 800346a:	f005 ff91 	bl	8009390 <udelay(unsigned int, unsigned int)>
 800346e:	463b      	mov	r3, r7
 8003470:	4630      	mov	r0, r6
 8003472:	2203      	movs	r2, #3
 8003474:	2118      	movs	r1, #24
 8003476:	f005 f821 	bl	80084bc <gpio_init>
 800347a:	2100      	movs	r1, #0
 800347c:	200c      	movs	r0, #12
 800347e:	f005 ff87 	bl	8009390 <udelay(unsigned int, unsigned int)>
 8003482:	4425      	add	r5, r4
 8003484:	f5a6 4648 	sub.w	r6, r6, #51200	; 0xc800
 8003488:	f04f 2740 	mov.w	r7, #1073758208	; 0x40004000
 800348c:	42ac      	cmp	r4, r5
 800348e:	d109      	bne.n	80034a4 <Dmx::RdmSendRaw(unsigned int, unsigned char const*, unsigned int)+0x68>
 8003490:	4c0b      	ldr	r4, [pc, #44]	; (80034c0 <Dmx::RdmSendRaw(unsigned int, unsigned char const*, unsigned int)+0x84>)
 8003492:	f04f 2540 	mov.w	r5, #1073758208	; 0x40004000
 8003496:	2106      	movs	r1, #6
 8003498:	4620      	mov	r0, r4
 800349a:	f005 fbb9 	bl	8008c10 <usart_flag_get>
 800349e:	2801      	cmp	r0, #1
 80034a0:	d10b      	bne.n	80034ba <Dmx::RdmSendRaw(unsigned int, unsigned char const*, unsigned int)+0x7e>
 80034a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80034a4:	2107      	movs	r1, #7
 80034a6:	4630      	mov	r0, r6
 80034a8:	f005 fbb2 	bl	8008c10 <usart_flag_get>
 80034ac:	2800      	cmp	r0, #0
 80034ae:	d0f9      	beq.n	80034a4 <Dmx::RdmSendRaw(unsigned int, unsigned char const*, unsigned int)+0x68>
 80034b0:	f814 3b01 	ldrb.w	r3, [r4], #1
 80034b4:	f8c7 3804 	str.w	r3, [r7, #2052]	; 0x804
 80034b8:	e7e8      	b.n	800348c <Dmx::RdmSendRaw(unsigned int, unsigned char const*, unsigned int)+0x50>
 80034ba:	f8d5 3804 	ldr.w	r3, [r5, #2052]	; 0x804
 80034be:	e7ea      	b.n	8003496 <Dmx::RdmSendRaw(unsigned int, unsigned char const*, unsigned int)+0x5a>
 80034c0:	40004800 	andmi	r4, r0, r0, lsl #16
 80034c4:	40011000 	andmi	r1, r1, r0

080034c8 <Dmx::RdmReceive(unsigned int)>:
 80034c8:	4b07      	ldr	r3, [pc, #28]	; (80034e8 <Dmx::RdmReceive(unsigned int)+0x20>)
 80034ca:	f44f 7204 	mov.w	r2, #528	; 0x210
 80034ce:	fb02 3101 	mla	r1, r2, r1, r3
 80034d2:	f8d1 3204 	ldr.w	r3, [r1, #516]	; 0x204
 80034d6:	f413 4080 	ands.w	r0, r3, #16384	; 0x4000
 80034da:	bf1e      	ittt	ne
 80034dc:	2300      	movne	r3, #0
 80034de:	f8c1 3204 	strne.w	r3, [r1, #516]	; 0x204
 80034e2:	4608      	movne	r0, r1
 80034e4:	4770      	bx	lr
 80034e6:	bf00      	nop
 80034e8:	20000210 	andcs	r0, r0, r0, lsl r2

080034ec <Rdm::SendRawRespondMessage(unsigned int, unsigned char const*, unsigned int)>:
 80034ec:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80034ee:	4b08      	ldr	r3, [pc, #32]	; (8003510 <Rdm::SendRawRespondMessage(unsigned int, unsigned char const*, unsigned int)+0x24>)
 80034f0:	9201      	str	r2, [sp, #4]
 80034f2:	4604      	mov	r4, r0
 80034f4:	460d      	mov	r5, r1
 80034f6:	20c8      	movs	r0, #200	; 0xc8
 80034f8:	6819      	ldr	r1, [r3, #0]
 80034fa:	f005 ff49 	bl	8009390 <udelay(unsigned int, unsigned int)>
 80034fe:	9a01      	ldr	r2, [sp, #4]
 8003500:	4629      	mov	r1, r5
 8003502:	4620      	mov	r0, r4
 8003504:	b003      	add	sp, #12
 8003506:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800350a:	f7ff bba7 	b.w	8002c5c <Rdm::SendRaw(unsigned int, unsigned char const*, unsigned int)>
 800350e:	bf00      	nop
 8003510:	20000640 	andcs	r0, r0, r0, asr #12

08003514 <Rdm::SendDiscoveryRespondMessage(unsigned int, unsigned char const*, unsigned int)>:
 8003514:	4b1d      	ldr	r3, [pc, #116]	; (800358c <Rdm::SendDiscoveryRespondMessage(unsigned int, unsigned char const*, unsigned int)+0x78>)
 8003516:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800351a:	4606      	mov	r6, r0
 800351c:	460c      	mov	r4, r1
 800351e:	20c8      	movs	r0, #200	; 0xc8
 8003520:	6819      	ldr	r1, [r3, #0]
 8003522:	4f1b      	ldr	r7, [pc, #108]	; (8003590 <Rdm::SendDiscoveryRespondMessage(unsigned int, unsigned char const*, unsigned int)+0x7c>)
 8003524:	4615      	mov	r5, r2
 8003526:	f005 ff33 	bl	8009390 <udelay(unsigned int, unsigned int)>
 800352a:	2300      	movs	r3, #0
 800352c:	4631      	mov	r1, r6
 800352e:	6838      	ldr	r0, [r7, #0]
 8003530:	4e18      	ldr	r6, [pc, #96]	; (8003594 <Rdm::SendDiscoveryRespondMessage(unsigned int, unsigned char const*, unsigned int)+0x80>)
 8003532:	461a      	mov	r2, r3
 8003534:	f7ff fe5c 	bl	80031f0 <Dmx::SetPortDirection(unsigned int, dmx::PortDirection, bool)>
 8003538:	4425      	add	r5, r4
 800353a:	f04f 2840 	mov.w	r8, #1073758208	; 0x40004000
 800353e:	42ac      	cmp	r4, r5
 8003540:	d115      	bne.n	800356e <Rdm::SendDiscoveryRespondMessage(unsigned int, unsigned char const*, unsigned int)+0x5a>
 8003542:	4d14      	ldr	r5, [pc, #80]	; (8003594 <Rdm::SendDiscoveryRespondMessage(unsigned int, unsigned char const*, unsigned int)+0x80>)
 8003544:	f04f 2640 	mov.w	r6, #1073758208	; 0x40004000
 8003548:	2106      	movs	r1, #6
 800354a:	4628      	mov	r0, r5
 800354c:	f005 fb60 	bl	8008c10 <usart_flag_get>
 8003550:	2801      	cmp	r0, #1
 8003552:	4604      	mov	r4, r0
 8003554:	d116      	bne.n	8003584 <Rdm::SendDiscoveryRespondMessage(unsigned int, unsigned char const*, unsigned int)+0x70>
 8003556:	2100      	movs	r1, #0
 8003558:	2004      	movs	r0, #4
 800355a:	f005 ff19 	bl	8009390 <udelay(unsigned int, unsigned int)>
 800355e:	6838      	ldr	r0, [r7, #0]
 8003560:	4623      	mov	r3, r4
 8003562:	4622      	mov	r2, r4
 8003564:	2100      	movs	r1, #0
 8003566:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800356a:	f7ff be41 	b.w	80031f0 <Dmx::SetPortDirection(unsigned int, dmx::PortDirection, bool)>
 800356e:	2107      	movs	r1, #7
 8003570:	4630      	mov	r0, r6
 8003572:	f005 fb4d 	bl	8008c10 <usart_flag_get>
 8003576:	2800      	cmp	r0, #0
 8003578:	d0f9      	beq.n	800356e <Rdm::SendDiscoveryRespondMessage(unsigned int, unsigned char const*, unsigned int)+0x5a>
 800357a:	f814 3b01 	ldrb.w	r3, [r4], #1
 800357e:	f8c8 3804 	str.w	r3, [r8, #2052]	; 0x804
 8003582:	e7dc      	b.n	800353e <Rdm::SendDiscoveryRespondMessage(unsigned int, unsigned char const*, unsigned int)+0x2a>
 8003584:	f8d6 3804 	ldr.w	r3, [r6, #2052]	; 0x804
 8003588:	e7de      	b.n	8003548 <Rdm::SendDiscoveryRespondMessage(unsigned int, unsigned char const*, unsigned int)+0x34>
 800358a:	bf00      	nop
 800358c:	20000640 	andcs	r0, r0, r0, asr #12
 8003590:	2000063c 	andcs	r0, r0, ip, lsr r6
 8003594:	40004800 	andmi	r4, r0, r0, lsl #16

08003598 <memcpy.isra.0>:
 8003598:	f004 bc1a 	b.w	8007dd0 <memcpy>

0800359c <RDMDeviceParams::RDMDeviceParams(RDMDeviceParamsStore*)>:
 800359c:	b510      	push	{r4, lr}
 800359e:	6001      	str	r1, [r0, #0]
 80035a0:	2100      	movs	r1, #0
 80035a2:	4604      	mov	r4, r0
 80035a4:	6041      	str	r1, [r0, #4]
 80035a6:	2220      	movs	r2, #32
 80035a8:	3008      	adds	r0, #8
 80035aa:	f004 fc33 	bl	8007e14 <memset>
 80035ae:	4b03      	ldr	r3, [pc, #12]	; (80035bc <RDMDeviceParams::RDMDeviceParams(RDMDeviceParamsStore*)+0x20>)
 80035b0:	62a3      	str	r3, [r4, #40]	; 0x28
 80035b2:	237f      	movs	r3, #127	; 0x7f
 80035b4:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
 80035b8:	4620      	mov	r0, r4
 80035ba:	bd10      	pop	{r4, pc}
 80035bc:	ff7fff00 			; <UNDEFINED> instruction: 0xff7fff00

080035c0 <RDMDeviceParams::Load()>:
 80035c0:	4601      	mov	r1, r0
 80035c2:	6800      	ldr	r0, [r0, #0]
 80035c4:	b130      	cbz	r0, 80035d4 <RDMDeviceParams::Load()+0x14>
 80035c6:	b508      	push	{r3, lr}
 80035c8:	6803      	ldr	r3, [r0, #0]
 80035ca:	3104      	adds	r1, #4
 80035cc:	68db      	ldr	r3, [r3, #12]
 80035ce:	4798      	blx	r3
 80035d0:	2001      	movs	r0, #1
 80035d2:	bd08      	pop	{r3, pc}
 80035d4:	4770      	bx	lr

080035d6 <RDMDeviceParams::Set(RDMDevice*)>:
 80035d6:	6843      	ldr	r3, [r0, #4]
 80035d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80035dc:	460c      	mov	r4, r1
 80035de:	07d9      	lsls	r1, r3, #31
 80035e0:	4605      	mov	r5, r0
 80035e2:	d518      	bpl.n	8003616 <RDMDeviceParams::Set(RDMDevice*)+0x40>
 80035e4:	f890 6028 	ldrb.w	r6, [r0, #40]	; 0x28
 80035e8:	7823      	ldrb	r3, [r4, #0]
 80035ea:	2e20      	cmp	r6, #32
 80035ec:	f100 0108 	add.w	r1, r0, #8
 80035f0:	bf28      	it	cs
 80035f2:	2620      	movcs	r6, #32
 80035f4:	b1f3      	cbz	r3, 8003634 <RDMDeviceParams::Set(RDMDevice*)+0x5e>
 80035f6:	f104 070b 	add.w	r7, r4, #11
 80035fa:	4638      	mov	r0, r7
 80035fc:	4632      	mov	r2, r6
 80035fe:	f7ff ffcb 	bl	8003598 <memcpy.isra.0>
 8003602:	6fa0      	ldr	r0, [r4, #120]	; 0x78
 8003604:	f884 602b 	strb.w	r6, [r4, #43]	; 0x2b
 8003608:	b128      	cbz	r0, 8003616 <RDMDeviceParams::Set(RDMDevice*)+0x40>
 800360a:	6802      	ldr	r2, [r0, #0]
 800360c:	4639      	mov	r1, r7
 800360e:	f8d2 8008 	ldr.w	r8, [r2, #8]
 8003612:	4632      	mov	r2, r6
 8003614:	47c0      	blx	r8
 8003616:	686b      	ldr	r3, [r5, #4]
 8003618:	079a      	lsls	r2, r3, #30
 800361a:	bf44      	itt	mi
 800361c:	f8b5 2029 	ldrhmi.w	r2, [r5, #41]	; 0x29
 8003620:	f8a4 204e 	strhmi.w	r2, [r4, #78]	; 0x4e
 8003624:	075b      	lsls	r3, r3, #29
 8003626:	bf44      	itt	mi
 8003628:	f8b5 302b 	ldrhmi.w	r3, [r5, #43]	; 0x2b
 800362c:	f8a4 3050 	strhmi.w	r3, [r4, #80]	; 0x50
 8003630:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003634:	4632      	mov	r2, r6
 8003636:	f104 0052 	add.w	r0, r4, #82	; 0x52
 800363a:	f7ff ffad 	bl	8003598 <memcpy.isra.0>
 800363e:	f884 6072 	strb.w	r6, [r4, #114]	; 0x72
 8003642:	e7e8      	b.n	8003616 <RDMDeviceParams::Set(RDMDevice*)+0x40>

08003644 <RDMDeviceParams::Dump()>:
 8003644:	4770      	bx	lr

08003646 <RDMDeviceResponder::PersonalityUpdate(LightSet*)>:
 8003646:	4770      	bx	lr

08003648 <RDMDeviceResponder::DmxStartAddressUpdate()>:
 8003648:	4770      	bx	lr
	...

0800364c <RDMDeviceResponder::~RDMDeviceResponder()>:
 800364c:	b510      	push	{r4, lr}
 800364e:	4b06      	ldr	r3, [pc, #24]	; (8003668 <RDMDeviceResponder::~RDMDeviceResponder()+0x1c>)
 8003650:	4604      	mov	r4, r0
 8003652:	f840 3b8c 	str.w	r3, [r0], #140
 8003656:	f7ff f9b5 	bl	80029c4 <RDMSubDevices::~RDMSubDevices()>
 800365a:	f104 0084 	add.w	r0, r4, #132	; 0x84
 800365e:	f7fe fb79 	bl	8001d54 <RDMSensors::~RDMSensors()>
 8003662:	4620      	mov	r0, r4
 8003664:	bd10      	pop	{r4, pc}
 8003666:	bf00      	nop
 8003668:	08009c84 	stmdaeq	r0, {r2, r7, sl, fp, ip, pc}

0800366c <RDMDeviceResponder::~RDMDeviceResponder()>:
 800366c:	b510      	push	{r4, lr}
 800366e:	4604      	mov	r4, r0
 8003670:	f7ff ffec 	bl	800364c <RDMDeviceResponder::~RDMDeviceResponder()>
 8003674:	4620      	mov	r0, r4
 8003676:	f004 fb32 	bl	8007cde <operator delete(void*)>
 800367a:	4620      	mov	r0, r4
 800367c:	bd10      	pop	{r4, pc}
	...

08003680 <RDMDeviceResponder::RDMDeviceResponder(RDMPersonality**, unsigned int)>:
 8003680:	b570      	push	{r4, r5, r6, lr}
 8003682:	4604      	mov	r4, r0
 8003684:	3004      	adds	r0, #4
 8003686:	460e      	mov	r6, r1
 8003688:	4615      	mov	r5, r2
 800368a:	f001 fa03 	bl	8004a94 <RDMDevice::RDMDevice()>
 800368e:	4620      	mov	r0, r4
 8003690:	4b20      	ldr	r3, [pc, #128]	; (8003714 <RDMDeviceResponder::RDMDeviceResponder(RDMPersonality**, unsigned int)+0x94>)
 8003692:	f840 3b80 	str.w	r3, [r0], #128
 8003696:	f001 f9bd 	bl	8004a14 <RDMIdentify::RDMIdentify()>
 800369a:	f104 0084 	add.w	r0, r4, #132	; 0x84
 800369e:	f7fe fb2b 	bl	8001cf8 <RDMSensors::RDMSensors()>
 80036a2:	f104 008c 	add.w	r0, r4, #140	; 0x8c
 80036a6:	f7ff f985 	bl	80029b4 <RDMSubDevices::RDMSubDevices()>
 80036aa:	4b1b      	ldr	r3, [pc, #108]	; (8003718 <RDMDeviceResponder::RDMDeviceResponder(RDMPersonality**, unsigned int)+0x98>)
 80036ac:	f8c4 6094 	str.w	r6, [r4, #148]	; 0x94
 80036b0:	601c      	str	r4, [r3, #0]
 80036b2:	2365      	movs	r3, #101	; 0x65
 80036b4:	f884 30c3 	strb.w	r3, [r4, #195]	; 0xc3
 80036b8:	f44f 73b7 	mov.w	r3, #366	; 0x16e
 80036bc:	f8c4 30c4 	str.w	r3, [r4, #196]	; 0xc4
 80036c0:	2301      	movs	r3, #1
 80036c2:	f8a4 30c8 	strh.w	r3, [r4, #200]	; 0xc8
 80036c6:	f104 02b0 	add.w	r2, r4, #176	; 0xb0
 80036ca:	f104 039d 	add.w	r3, r4, #157	; 0x9d
 80036ce:	2100      	movs	r1, #0
 80036d0:	4293      	cmp	r3, r2
 80036d2:	d119      	bne.n	8003708 <RDMDeviceResponder::RDMDeviceResponder(RDMPersonality**, unsigned int)+0x88>
 80036d4:	f104 02c3 	add.w	r2, r4, #195	; 0xc3
 80036d8:	2100      	movs	r1, #0
 80036da:	4293      	cmp	r3, r2
 80036dc:	d117      	bne.n	800370e <RDMDeviceResponder::RDMDeviceResponder(RDMPersonality**, unsigned int)+0x8e>
 80036de:	f884 50aa 	strb.w	r5, [r4, #170]	; 0xaa
 80036e2:	f7fd fd9f 	bl	8001224 <RDMSoftwareVersion::GetVersion()>
 80036e6:	f8c4 0098 	str.w	r0, [r4, #152]	; 0x98
 80036ea:	f7fd fd9f 	bl	800122c <RDMSoftwareVersion::GetVersionLength()>
 80036ee:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 80036f2:	f884 009c 	strb.w	r0, [r4, #156]	; 0x9c
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	685b      	ldr	r3, [r3, #4]
 80036fa:	b91b      	cbnz	r3, 8003704 <RDMDeviceResponder::RDMDeviceResponder(RDMPersonality**, unsigned int)+0x84>
 80036fc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003700:	f8a4 30c8 	strh.w	r3, [r4, #200]	; 0xc8
 8003704:	4620      	mov	r0, r4
 8003706:	bd70      	pop	{r4, r5, r6, pc}
 8003708:	f803 1b01 	strb.w	r1, [r3], #1
 800370c:	e7e0      	b.n	80036d0 <RDMDeviceResponder::RDMDeviceResponder(RDMPersonality**, unsigned int)+0x50>
 800370e:	f803 1b01 	strb.w	r1, [r3], #1
 8003712:	e7e2      	b.n	80036da <RDMDeviceResponder::RDMDeviceResponder(RDMPersonality**, unsigned int)+0x5a>
 8003714:	08009c84 	stmdaeq	r0, {r2, r7, sl, fp, ip, pc}
 8003718:	20000644 	andcs	r0, r0, r4, asr #12

0800371c <RDMDeviceResponder::Init()>:
 800371c:	b570      	push	{r4, r5, r6, lr}
 800371e:	2301      	movs	r3, #1
 8003720:	4604      	mov	r4, r0
 8003722:	7103      	strb	r3, [r0, #4]
 8003724:	f894 2076 	ldrb.w	r2, [r4, #118]	; 0x76
 8003728:	2a20      	cmp	r2, #32
 800372a:	bf28      	it	cs
 800372c:	2220      	movcs	r2, #32
 800372e:	3056      	adds	r0, #86	; 0x56
 8003730:	f104 010f 	add.w	r1, r4, #15
 8003734:	4613      	mov	r3, r2
 8003736:	3b01      	subs	r3, #1
 8003738:	d25d      	bcs.n	80037f6 <RDMDeviceResponder::Init()+0xda>
 800373a:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 800373c:	f884 202f 	strb.w	r2, [r4, #47]	; 0x2f
 8003740:	b110      	cbz	r0, 8003748 <RDMDeviceResponder::Init()+0x2c>
 8003742:	6803      	ldr	r3, [r0, #0]
 8003744:	689b      	ldr	r3, [r3, #8]
 8003746:	4798      	blx	r3
 8003748:	f06f 050d 	mvn.w	r5, #13
 800374c:	f894 3076 	ldrb.w	r3, [r4, #118]	; 0x76
 8003750:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
 8003754:	f104 020e 	add.w	r2, r4, #14
 8003758:	1b2d      	subs	r5, r5, r4
 800375a:	18a9      	adds	r1, r5, r2
 800375c:	4288      	cmp	r0, r1
 800375e:	d84f      	bhi.n	8003800 <RDMDeviceResponder::Init()+0xe4>
 8003760:	f8a4 3078 	strh.w	r3, [r4, #120]	; 0x78
 8003764:	f7fd fd64 	bl	8001230 <RDMSoftwareVersion::GetVersionId()>
 8003768:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
 800376c:	f884 30a2 	strb.w	r3, [r4, #162]	; 0xa2
 8003770:	2201      	movs	r2, #1
 8003772:	f884 209d 	strb.w	r2, [r4, #157]	; 0x9d
 8003776:	2200      	movs	r2, #0
 8003778:	f8a4 209e 	strh.w	r2, [r4, #158]	; 0x9e
 800377c:	f884 20a0 	strb.w	r2, [r4, #160]	; 0xa0
 8003780:	0a1a      	lsrs	r2, r3, #8
 8003782:	0e03      	lsrs	r3, r0, #24
 8003784:	f884 30a3 	strb.w	r3, [r4, #163]	; 0xa3
 8003788:	0c03      	lsrs	r3, r0, #16
 800378a:	f884 30a4 	strb.w	r3, [r4, #164]	; 0xa4
 800378e:	0a03      	lsrs	r3, r0, #8
 8003790:	f884 30a5 	strb.w	r3, [r4, #165]	; 0xa5
 8003794:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8003798:	f884 20a1 	strb.w	r2, [r4, #161]	; 0xa1
 800379c:	f884 00a6 	strb.w	r0, [r4, #166]	; 0xa6
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	f8b4 6090 	ldrh.w	r6, [r4, #144]	; 0x90
 80037a6:	685d      	ldr	r5, [r3, #4]
 80037a8:	bb7d      	cbnz	r5, 800380a <RDMDeviceResponder::Init()+0xee>
 80037aa:	f8b4 00c8 	ldrh.w	r0, [r4, #200]	; 0xc8
 80037ae:	f884 50a7 	strb.w	r5, [r4, #167]	; 0xa7
 80037b2:	0a03      	lsrs	r3, r0, #8
 80037b4:	f884 50a8 	strb.w	r5, [r4, #168]	; 0xa8
 80037b8:	f884 30ab 	strb.w	r3, [r4, #171]	; 0xab
 80037bc:	2301      	movs	r3, #1
 80037be:	f884 30a9 	strb.w	r3, [r4, #169]	; 0xa9
 80037c2:	0a33      	lsrs	r3, r6, #8
 80037c4:	b2c0      	uxtb	r0, r0
 80037c6:	f884 30ad 	strb.w	r3, [r4, #173]	; 0xad
 80037ca:	f894 3088 	ldrb.w	r3, [r4, #136]	; 0x88
 80037ce:	f884 30af 	strb.w	r3, [r4, #175]	; 0xaf
 80037d2:	f884 00ac 	strb.w	r0, [r4, #172]	; 0xac
 80037d6:	f884 60ae 	strb.w	r6, [r4, #174]	; 0xae
 80037da:	f104 039d 	add.w	r3, r4, #157	; 0x9d
 80037de:	f104 02b0 	add.w	r2, r4, #176	; 0xb0
 80037e2:	4293      	cmp	r3, r2
 80037e4:	d12a      	bne.n	800383c <RDMDeviceResponder::Init()+0x120>
 80037e6:	f894 30ac 	ldrb.w	r3, [r4, #172]	; 0xac
 80037ea:	f894 20a9 	ldrb.w	r2, [r4, #169]	; 0xa9
 80037ee:	4413      	add	r3, r2
 80037f0:	f8a4 30c6 	strh.w	r3, [r4, #198]	; 0xc6
 80037f4:	bd70      	pop	{r4, r5, r6, pc}
 80037f6:	f810 5b01 	ldrb.w	r5, [r0], #1
 80037fa:	f800 5c48 	strb.w	r5, [r0, #-72]
 80037fe:	e79a      	b.n	8003736 <RDMDeviceResponder::Init()+0x1a>
 8003800:	f812 1f01 	ldrb.w	r1, [r2, #1]!
 8003804:	440b      	add	r3, r1
 8003806:	b29b      	uxth	r3, r3
 8003808:	e7a7      	b.n	800375a <RDMDeviceResponder::Init()+0x3e>
 800380a:	682b      	ldr	r3, [r5, #0]
 800380c:	4628      	mov	r0, r5
 800380e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003810:	4798      	blx	r3
 8003812:	0a00      	lsrs	r0, r0, #8
 8003814:	f884 00a7 	strb.w	r0, [r4, #167]	; 0xa7
 8003818:	682b      	ldr	r3, [r5, #0]
 800381a:	4628      	mov	r0, r5
 800381c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800381e:	4798      	blx	r3
 8003820:	f884 00a8 	strb.w	r0, [r4, #168]	; 0xa8
 8003824:	682b      	ldr	r3, [r5, #0]
 8003826:	4628      	mov	r0, r5
 8003828:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800382a:	4798      	blx	r3
 800382c:	0a00      	lsrs	r0, r0, #8
 800382e:	f884 00ab 	strb.w	r0, [r4, #171]	; 0xab
 8003832:	682b      	ldr	r3, [r5, #0]
 8003834:	4628      	mov	r0, r5
 8003836:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003838:	4798      	blx	r3
 800383a:	e7bf      	b.n	80037bc <RDMDeviceResponder::Init()+0xa0>
 800383c:	f813 1b01 	ldrb.w	r1, [r3], #1
 8003840:	7499      	strb	r1, [r3, #18]
 8003842:	e7ce      	b.n	80037e2 <RDMDeviceResponder::Init()+0xc6>

08003844 <RDMDeviceResponder::Print()>:
 8003844:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003846:	4604      	mov	r4, r0
 8003848:	3004      	adds	r0, #4
 800384a:	f001 f997 	bl	8004b7c <RDMDevice::Print()>
 800384e:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8003852:	481c      	ldr	r0, [pc, #112]	; (80038c4 <RDMDeviceResponder::Print()+0x80>)
 8003854:	681d      	ldr	r5, [r3, #0]
 8003856:	6aae      	ldr	r6, [r5, #40]	; 0x28
 8003858:	f7fd ffe4 	bl	8001824 <printf>
 800385c:	f894 209e 	ldrb.w	r2, [r4, #158]	; 0x9e
 8003860:	f894 109d 	ldrb.w	r1, [r4, #157]	; 0x9d
 8003864:	4818      	ldr	r0, [pc, #96]	; (80038c8 <RDMDeviceResponder::Print()+0x84>)
 8003866:	f7fd ffdd 	bl	8001824 <printf>
 800386a:	f894 30ac 	ldrb.w	r3, [r4, #172]	; 0xac
 800386e:	f894 10ab 	ldrb.w	r1, [r4, #171]	; 0xab
 8003872:	4816      	ldr	r0, [pc, #88]	; (80038cc <RDMDeviceResponder::Print()+0x88>)
 8003874:	eb03 2101 	add.w	r1, r3, r1, lsl #8
 8003878:	f7fd ffd4 	bl	8001824 <printf>
 800387c:	f894 30a8 	ldrb.w	r3, [r4, #168]	; 0xa8
 8003880:	f894 10a7 	ldrb.w	r1, [r4, #167]	; 0xa7
 8003884:	4812      	ldr	r0, [pc, #72]	; (80038d0 <RDMDeviceResponder::Print()+0x8c>)
 8003886:	eb03 2101 	add.w	r1, r3, r1, lsl #8
 800388a:	3508      	adds	r5, #8
 800388c:	f7fd ffca 	bl	8001824 <printf>
 8003890:	f894 20aa 	ldrb.w	r2, [r4, #170]	; 0xaa
 8003894:	f894 10a9 	ldrb.w	r1, [r4, #169]	; 0xa9
 8003898:	9500      	str	r5, [sp, #0]
 800389a:	b2f3      	uxtb	r3, r6
 800389c:	480d      	ldr	r0, [pc, #52]	; (80038d4 <RDMDeviceResponder::Print()+0x90>)
 800389e:	f7fd ffc1 	bl	8001824 <printf>
 80038a2:	f894 10ad 	ldrb.w	r1, [r4, #173]	; 0xad
 80038a6:	f894 30ae 	ldrb.w	r3, [r4, #174]	; 0xae
 80038aa:	480b      	ldr	r0, [pc, #44]	; (80038d8 <RDMDeviceResponder::Print()+0x94>)
 80038ac:	eb03 2101 	add.w	r1, r3, r1, lsl #8
 80038b0:	f7fd ffb8 	bl	8001824 <printf>
 80038b4:	f894 10af 	ldrb.w	r1, [r4, #175]	; 0xaf
 80038b8:	4808      	ldr	r0, [pc, #32]	; (80038dc <RDMDeviceResponder::Print()+0x98>)
 80038ba:	b002      	add	sp, #8
 80038bc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80038c0:	f7fd bfb0 	b.w	8001824 <printf>
 80038c4:	08009bc8 	stmdaeq	r0, {r3, r6, r7, r8, r9, fp, ip, pc}
 80038c8:	08009be5 	stmdaeq	r0, {r0, r2, r5, r6, r7, r8, r9, fp, ip, pc}
 80038cc:	08009bfe 	stmdaeq	r0, {r1, r2, r3, r4, r5, r6, r7, r8, r9, fp, ip, pc}
 80038d0:	08009c16 	stmdaeq	r0, {r1, r2, r4, sl, fp, ip, pc}
 80038d4:	08009c2e 	stmdaeq	r0, {r1, r2, r3, r5, sl, fp, ip, pc}
 80038d8:	08009c4c 	stmdaeq	r0, {r2, r3, r6, sl, fp, ip, pc}
 80038dc:	08009c64 	stmdaeq	r0, {r2, r5, r6, sl, fp, ip, pc}

080038e0 <memcmp>:
 80038e0:	b510      	push	{r4, lr}
 80038e2:	3901      	subs	r1, #1
 80038e4:	4402      	add	r2, r0
 80038e6:	4290      	cmp	r0, r2
 80038e8:	d101      	bne.n	80038ee <memcmp+0xe>
 80038ea:	2000      	movs	r0, #0
 80038ec:	e005      	b.n	80038fa <memcmp+0x1a>
 80038ee:	7803      	ldrb	r3, [r0, #0]
 80038f0:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80038f4:	42a3      	cmp	r3, r4
 80038f6:	d001      	beq.n	80038fc <memcmp+0x1c>
 80038f8:	1b18      	subs	r0, r3, r4
 80038fa:	bd10      	pop	{r4, pc}
 80038fc:	3001      	adds	r0, #1
 80038fe:	e7f2      	b.n	80038e6 <memcmp+0x6>

08003900 <RDMDeviceResponder::GetSlotInfo(unsigned short, unsigned short, lightset::SlotInfo&) [clone .part.0]>:
 8003900:	f890 30a9 	ldrb.w	r3, [r0, #169]	; 0xa9
 8003904:	f8d0 0094 	ldr.w	r0, [r0, #148]	; 0x94
 8003908:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800390c:	3b01      	subs	r3, #1
 800390e:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8003912:	6858      	ldr	r0, [r3, #4]
 8003914:	6803      	ldr	r3, [r0, #0]
 8003916:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003918:	4718      	bx	r3

0800391a <memcpy.isra.0>:
 800391a:	3801      	subs	r0, #1
 800391c:	440a      	add	r2, r1
 800391e:	4291      	cmp	r1, r2
 8003920:	d100      	bne.n	8003924 <memcpy.isra.0+0xa>
 8003922:	4770      	bx	lr
 8003924:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003928:	f800 3f01 	strb.w	r3, [r0, #1]!
 800392c:	e7f7      	b.n	800391e <memcpy.isra.0+0x4>

0800392e <RDMDevice::SetLabel(TRDMDeviceInfoData const*)>:
 800392e:	b570      	push	{r4, r5, r6, lr}
 8003930:	790d      	ldrb	r5, [r1, #4]
 8003932:	7803      	ldrb	r3, [r0, #0]
 8003934:	6809      	ldr	r1, [r1, #0]
 8003936:	2d20      	cmp	r5, #32
 8003938:	4604      	mov	r4, r0
 800393a:	bf28      	it	cs
 800393c:	2520      	movcs	r5, #32
 800393e:	b18b      	cbz	r3, 8003964 <RDMDevice::SetLabel(TRDMDeviceInfoData const*)+0x36>
 8003940:	f100 060b 	add.w	r6, r0, #11
 8003944:	4630      	mov	r0, r6
 8003946:	462a      	mov	r2, r5
 8003948:	f7ff ffe7 	bl	800391a <memcpy.isra.0>
 800394c:	6fa0      	ldr	r0, [r4, #120]	; 0x78
 800394e:	f884 502b 	strb.w	r5, [r4, #43]	; 0x2b
 8003952:	b168      	cbz	r0, 8003970 <RDMDevice::SetLabel(TRDMDeviceInfoData const*)+0x42>
 8003954:	6802      	ldr	r2, [r0, #0]
 8003956:	6894      	ldr	r4, [r2, #8]
 8003958:	4631      	mov	r1, r6
 800395a:	462a      	mov	r2, r5
 800395c:	4623      	mov	r3, r4
 800395e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8003962:	4718      	bx	r3
 8003964:	462a      	mov	r2, r5
 8003966:	3052      	adds	r0, #82	; 0x52
 8003968:	f7ff ffd7 	bl	800391a <memcpy.isra.0>
 800396c:	f884 5072 	strb.w	r5, [r4, #114]	; 0x72
 8003970:	bd70      	pop	{r4, r5, r6, pc}

08003972 <RDMDeviceResponder::SetDmxStartAddress(unsigned short, unsigned short)>:
 8003972:	b570      	push	{r4, r5, r6, lr}
 8003974:	4604      	mov	r4, r0
 8003976:	1e50      	subs	r0, r2, #1
 8003978:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 800397c:	4615      	mov	r5, r2
 800397e:	d221      	bcs.n	80039c4 <RDMDeviceResponder::SetDmxStartAddress(unsigned short, unsigned short)+0x52>
 8003980:	b129      	cbz	r1, 800398e <RDMDeviceResponder::SetDmxStartAddress(unsigned short, unsigned short)+0x1c>
 8003982:	f104 008c 	add.w	r0, r4, #140	; 0x8c
 8003986:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800398a:	f7ff b85a 	b.w	8002a42 <RDMSubDevices::SetDmxStartAddress(unsigned short, unsigned short)>
 800398e:	f894 30a9 	ldrb.w	r3, [r4, #169]	; 0xa9
 8003992:	f8d4 2094 	ldr.w	r2, [r4, #148]	; 0x94
 8003996:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800399a:	3b01      	subs	r3, #1
 800399c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80039a0:	6858      	ldr	r0, [r3, #4]
 80039a2:	b178      	cbz	r0, 80039c4 <RDMDeviceResponder::SetDmxStartAddress(unsigned short, unsigned short)+0x52>
 80039a4:	6803      	ldr	r3, [r0, #0]
 80039a6:	4629      	mov	r1, r5
 80039a8:	6a1b      	ldr	r3, [r3, #32]
 80039aa:	4798      	blx	r3
 80039ac:	b120      	cbz	r0, 80039b8 <RDMDeviceResponder::SetDmxStartAddress(unsigned short, unsigned short)+0x46>
 80039ae:	0a2b      	lsrs	r3, r5, #8
 80039b0:	f884 30ab 	strb.w	r3, [r4, #171]	; 0xab
 80039b4:	f884 50ac 	strb.w	r5, [r4, #172]	; 0xac
 80039b8:	6823      	ldr	r3, [r4, #0]
 80039ba:	4620      	mov	r0, r4
 80039bc:	68db      	ldr	r3, [r3, #12]
 80039be:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80039c2:	4718      	bx	r3
 80039c4:	bd70      	pop	{r4, r5, r6, pc}

080039c6 <RDMDeviceResponder::GetPersonality(unsigned short, unsigned char)>:
 80039c6:	b111      	cbz	r1, 80039ce <RDMDeviceResponder::GetPersonality(unsigned short, unsigned char)+0x8>
 80039c8:	308c      	adds	r0, #140	; 0x8c
 80039ca:	f7ff b864 	b.w	8002a96 <RDMSubDevices::GetPersonality(unsigned short, unsigned char)>
 80039ce:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 80039d2:	f8d0 3094 	ldr.w	r3, [r0, #148]	; 0x94
 80039d6:	3a01      	subs	r2, #1
 80039d8:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 80039dc:	4770      	bx	lr

080039de <RDMDeviceResponder::GetPersonalityCount(unsigned short)>:
 80039de:	b111      	cbz	r1, 80039e6 <RDMDeviceResponder::GetPersonalityCount(unsigned short)+0x8>
 80039e0:	308c      	adds	r0, #140	; 0x8c
 80039e2:	f7ff b850 	b.w	8002a86 <RDMSubDevices::GetPersonalityCount(unsigned short)>
 80039e6:	f890 00aa 	ldrb.w	r0, [r0, #170]	; 0xaa
 80039ea:	4770      	bx	lr

080039ec <RDMDeviceResponder::SetPersonalityCurrent(unsigned short, unsigned char)>:
 80039ec:	b570      	push	{r4, r5, r6, lr}
 80039ee:	4604      	mov	r4, r0
 80039f0:	b121      	cbz	r1, 80039fc <RDMDeviceResponder::SetPersonalityCurrent(unsigned short, unsigned char)+0x10>
 80039f2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80039f6:	308c      	adds	r0, #140	; 0x8c
 80039f8:	f7ff b83c 	b.w	8002a74 <RDMSubDevices::SetPersonalityCurrent(unsigned short, unsigned char)>
 80039fc:	f884 20a9 	strb.w	r2, [r4, #169]	; 0xa9
 8003a00:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 8003a04:	f8d0 3094 	ldr.w	r3, [r0, #148]	; 0x94
 8003a08:	3a01      	subs	r2, #1
 8003a0a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003a0e:	685d      	ldr	r5, [r3, #4]
 8003a10:	b305      	cbz	r5, 8003a54 <RDMDeviceResponder::SetPersonalityCurrent(unsigned short, unsigned char)+0x68>
 8003a12:	682b      	ldr	r3, [r5, #0]
 8003a14:	4628      	mov	r0, r5
 8003a16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a18:	4798      	blx	r3
 8003a1a:	0a00      	lsrs	r0, r0, #8
 8003a1c:	f884 00a7 	strb.w	r0, [r4, #167]	; 0xa7
 8003a20:	682b      	ldr	r3, [r5, #0]
 8003a22:	4628      	mov	r0, r5
 8003a24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a26:	4798      	blx	r3
 8003a28:	f884 00a8 	strb.w	r0, [r4, #168]	; 0xa8
 8003a2c:	682b      	ldr	r3, [r5, #0]
 8003a2e:	4628      	mov	r0, r5
 8003a30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a32:	4798      	blx	r3
 8003a34:	0a00      	lsrs	r0, r0, #8
 8003a36:	f884 00ab 	strb.w	r0, [r4, #171]	; 0xab
 8003a3a:	682b      	ldr	r3, [r5, #0]
 8003a3c:	4628      	mov	r0, r5
 8003a3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a40:	4798      	blx	r3
 8003a42:	6823      	ldr	r3, [r4, #0]
 8003a44:	f884 00ac 	strb.w	r0, [r4, #172]	; 0xac
 8003a48:	4629      	mov	r1, r5
 8003a4a:	4620      	mov	r0, r4
 8003a4c:	689b      	ldr	r3, [r3, #8]
 8003a4e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8003a52:	4718      	bx	r3
 8003a54:	bd70      	pop	{r4, r5, r6, pc}

08003a56 <RDMHandler::RDMHandler(bool)>:
 8003a56:	2200      	movs	r2, #0
 8003a58:	e9c0 2201 	strd	r2, r2, [r0, #4]
 8003a5c:	7001      	strb	r1, [r0, #0]
 8003a5e:	7042      	strb	r2, [r0, #1]
 8003a60:	4770      	bx	lr

08003a62 <RDMHandler::HandleString(char const*, unsigned int)>:
 8003a62:	6883      	ldr	r3, [r0, #8]
 8003a64:	f803 2f17 	strb.w	r2, [r3, #23]!
 8003a68:	440a      	add	r2, r1
 8003a6a:	4291      	cmp	r1, r2
 8003a6c:	d100      	bne.n	8003a70 <RDMHandler::HandleString(char const*, unsigned int)+0xe>
 8003a6e:	4770      	bx	lr
 8003a70:	f811 0b01 	ldrb.w	r0, [r1], #1
 8003a74:	f803 0f01 	strb.w	r0, [r3, #1]!
 8003a78:	e7f7      	b.n	8003a6a <RDMHandler::HandleString(char const*, unsigned int)+0x8>
	...

08003a7c <RDMHandler::CreateRespondMessage(unsigned char, unsigned short)>:
 8003a7c:	b570      	push	{r4, r5, r6, lr}
 8003a7e:	e9d0 4301 	ldrd	r4, r3, [r0, #4]
 8003a82:	25cc      	movs	r5, #204	; 0xcc
 8003a84:	701d      	strb	r5, [r3, #0]
 8003a86:	7825      	ldrb	r5, [r4, #0]
 8003a88:	705d      	strb	r5, [r3, #1]
 8003a8a:	7ba5      	ldrb	r5, [r4, #14]
 8003a8c:	73dd      	strb	r5, [r3, #15]
 8003a8e:	2500      	movs	r5, #0
 8003a90:	745d      	strb	r5, [r3, #17]
 8003a92:	7c65      	ldrb	r5, [r4, #17]
 8003a94:	749d      	strb	r5, [r3, #18]
 8003a96:	7ca5      	ldrb	r5, [r4, #18]
 8003a98:	74dd      	strb	r5, [r3, #19]
 8003a9a:	7ce5      	ldrb	r5, [r4, #19]
 8003a9c:	3501      	adds	r5, #1
 8003a9e:	751d      	strb	r5, [r3, #20]
 8003aa0:	7d25      	ldrb	r5, [r4, #20]
 8003aa2:	755d      	strb	r5, [r3, #21]
 8003aa4:	7d65      	ldrb	r5, [r4, #21]
 8003aa6:	759d      	strb	r5, [r3, #22]
 8003aa8:	b119      	cbz	r1, 8003ab2 <RDMHandler::CreateRespondMessage(unsigned char, unsigned short)+0x36>
 8003aaa:	1e4d      	subs	r5, r1, #1
 8003aac:	2d01      	cmp	r5, #1
 8003aae:	d921      	bls.n	8003af4 <RDMHandler::CreateRespondMessage(unsigned char, unsigned short)+0x78>
 8003ab0:	bd70      	pop	{r4, r5, r6, pc}
 8003ab2:	7dda      	ldrb	r2, [r3, #23]
 8003ab4:	7419      	strb	r1, [r3, #16]
 8003ab6:	3218      	adds	r2, #24
 8003ab8:	709a      	strb	r2, [r3, #2]
 8003aba:	4a15      	ldr	r2, [pc, #84]	; (8003b10 <RDMHandler::CreateRespondMessage(unsigned char, unsigned short)+0x94>)
 8003abc:	6812      	ldr	r2, [r2, #0]
 8003abe:	1de1      	adds	r1, r4, #7
 8003ac0:	1c9d      	adds	r5, r3, #2
 8003ac2:	3204      	adds	r2, #4
 8003ac4:	340d      	adds	r4, #13
 8003ac6:	f811 6f01 	ldrb.w	r6, [r1, #1]!
 8003aca:	f805 6f01 	strb.w	r6, [r5, #1]!
 8003ace:	42a1      	cmp	r1, r4
 8003ad0:	f812 6f01 	ldrb.w	r6, [r2, #1]!
 8003ad4:	71ae      	strb	r6, [r5, #6]
 8003ad6:	d1f6      	bne.n	8003ac6 <RDMHandler::CreateRespondMessage(unsigned char, unsigned short)+0x4a>
 8003ad8:	2200      	movs	r2, #0
 8003ada:	6884      	ldr	r4, [r0, #8]
 8003adc:	7899      	ldrb	r1, [r3, #2]
 8003ade:	4613      	mov	r3, r2
 8003ae0:	428a      	cmp	r2, r1
 8003ae2:	eb04 0502 	add.w	r5, r4, r2
 8003ae6:	d30e      	bcc.n	8003b06 <RDMHandler::CreateRespondMessage(unsigned char, unsigned short)+0x8a>
 8003ae8:	0a1a      	lsrs	r2, r3, #8
 8003aea:	702a      	strb	r2, [r5, #0]
 8003aec:	6882      	ldr	r2, [r0, #8]
 8003aee:	440a      	add	r2, r1
 8003af0:	7053      	strb	r3, [r2, #1]
 8003af2:	e7dd      	b.n	8003ab0 <RDMHandler::CreateRespondMessage(unsigned char, unsigned short)+0x34>
 8003af4:	7419      	strb	r1, [r3, #16]
 8003af6:	2102      	movs	r1, #2
 8003af8:	251a      	movs	r5, #26
 8003afa:	75d9      	strb	r1, [r3, #23]
 8003afc:	0a11      	lsrs	r1, r2, #8
 8003afe:	709d      	strb	r5, [r3, #2]
 8003b00:	7619      	strb	r1, [r3, #24]
 8003b02:	765a      	strb	r2, [r3, #25]
 8003b04:	e7d9      	b.n	8003aba <RDMHandler::CreateRespondMessage(unsigned char, unsigned short)+0x3e>
 8003b06:	5ca5      	ldrb	r5, [r4, r2]
 8003b08:	442b      	add	r3, r5
 8003b0a:	b29b      	uxth	r3, r3
 8003b0c:	3201      	adds	r2, #1
 8003b0e:	e7e7      	b.n	8003ae0 <RDMHandler::CreateRespondMessage(unsigned char, unsigned short)+0x64>
 8003b10:	20000644 	andcs	r0, r0, r4, asr #12

08003b14 <RDMHandler::RespondMessageAck()>:
 8003b14:	6843      	ldr	r3, [r0, #4]
 8003b16:	7d9a      	ldrb	r2, [r3, #22]
 8003b18:	b90a      	cbnz	r2, 8003b1e <RDMHandler::RespondMessageAck()+0xa>
 8003b1a:	2218      	movs	r2, #24
 8003b1c:	705a      	strb	r2, [r3, #1]
 8003b1e:	2200      	movs	r2, #0
 8003b20:	4611      	mov	r1, r2
 8003b22:	f7ff bfab 	b.w	8003a7c <RDMHandler::CreateRespondMessage(unsigned char, unsigned short)>
	...

08003b28 <RDMHandler::GetSupportedParameters(unsigned short)>:
 8003b28:	4b18      	ldr	r3, [pc, #96]	; (8003b8c <RDMHandler::GetSupportedParameters(unsigned short)+0x64>)
 8003b2a:	4a19      	ldr	r2, [pc, #100]	; (8003b90 <RDMHandler::GetSupportedParameters(unsigned short)+0x68>)
 8003b2c:	2900      	cmp	r1, #0
 8003b2e:	bf08      	it	eq
 8003b30:	461a      	moveq	r2, r3
 8003b32:	b4f0      	push	{r4, r5, r6, r7}
 8003b34:	bf14      	ite	ne
 8003b36:	2108      	movne	r1, #8
 8003b38:	211e      	moveq	r1, #30
 8003b3a:	2518      	movs	r5, #24
 8003b3c:	4614      	mov	r4, r2
 8003b3e:	fb05 2501 	mla	r5, r5, r1, r2
 8003b42:	2300      	movs	r3, #0
 8003b44:	7d66      	ldrb	r6, [r4, #21]
 8003b46:	b10e      	cbz	r6, 8003b4c <RDMHandler::GetSupportedParameters(unsigned short)+0x24>
 8003b48:	3301      	adds	r3, #1
 8003b4a:	b2db      	uxtb	r3, r3
 8003b4c:	3418      	adds	r4, #24
 8003b4e:	42ac      	cmp	r4, r5
 8003b50:	d1f8      	bne.n	8003b44 <RDMHandler::GetSupportedParameters(unsigned short)+0x1c>
 8003b52:	6886      	ldr	r6, [r0, #8]
 8003b54:	005b      	lsls	r3, r3, #1
 8003b56:	75f3      	strb	r3, [r6, #23]
 8003b58:	230c      	movs	r3, #12
 8003b5a:	4359      	muls	r1, r3
 8003b5c:	2300      	movs	r3, #0
 8003b5e:	461c      	mov	r4, r3
 8003b60:	f102 0c15 	add.w	ip, r2, #21
 8003b64:	f81c 5013 	ldrb.w	r5, [ip, r3, lsl #1]
 8003b68:	b14d      	cbz	r5, 8003b7e <RDMHandler::GetSupportedParameters(unsigned short)+0x56>
 8003b6a:	f832 5013 	ldrh.w	r5, [r2, r3, lsl #1]
 8003b6e:	eb06 0744 	add.w	r7, r6, r4, lsl #1
 8003b72:	0a2d      	lsrs	r5, r5, #8
 8003b74:	763d      	strb	r5, [r7, #24]
 8003b76:	f832 5013 	ldrh.w	r5, [r2, r3, lsl #1]
 8003b7a:	767d      	strb	r5, [r7, #25]
 8003b7c:	3401      	adds	r4, #1
 8003b7e:	330c      	adds	r3, #12
 8003b80:	4299      	cmp	r1, r3
 8003b82:	d1ef      	bne.n	8003b64 <RDMHandler::GetSupportedParameters(unsigned short)+0x3c>
 8003b84:	bcf0      	pop	{r4, r5, r6, r7}
 8003b86:	f7ff bfc5 	b.w	8003b14 <RDMHandler::RespondMessageAck()>
 8003b8a:	bf00      	nop
 8003b8c:	08009cb0 	stmdaeq	r0, {r4, r5, r7, sl, fp, ip, pc}
 8003b90:	08009f80 	stmdaeq	r0, {r7, r8, r9, sl, fp, ip, pc}

08003b94 <RDMHandler::GetDeviceInfo(unsigned short)>:
 8003b94:	b538      	push	{r3, r4, r5, lr}
 8003b96:	4b18      	ldr	r3, [pc, #96]	; (8003bf8 <RDMHandler::GetDeviceInfo(unsigned short)+0x64>)
 8003b98:	4605      	mov	r5, r0
 8003b9a:	681c      	ldr	r4, [r3, #0]
 8003b9c:	b349      	cbz	r1, 8003bf2 <RDMHandler::GetDeviceInfo(unsigned short)+0x5e>
 8003b9e:	f104 008c 	add.w	r0, r4, #140	; 0x8c
 8003ba2:	f7fe ff27 	bl	80029f4 <RDMSubDevices::GetInfo(unsigned short)>
 8003ba6:	b1b8      	cbz	r0, 8003bd8 <RDMHandler::GetDeviceInfo(unsigned short)+0x44>
 8003ba8:	8803      	ldrh	r3, [r0, #0]
 8003baa:	0a1b      	lsrs	r3, r3, #8
 8003bac:	f884 30ba 	strb.w	r3, [r4, #186]	; 0xba
 8003bb0:	8803      	ldrh	r3, [r0, #0]
 8003bb2:	f884 30bb 	strb.w	r3, [r4, #187]	; 0xbb
 8003bb6:	7903      	ldrb	r3, [r0, #4]
 8003bb8:	f884 30bc 	strb.w	r3, [r4, #188]	; 0xbc
 8003bbc:	7943      	ldrb	r3, [r0, #5]
 8003bbe:	f884 30bd 	strb.w	r3, [r4, #189]	; 0xbd
 8003bc2:	8843      	ldrh	r3, [r0, #2]
 8003bc4:	0a1b      	lsrs	r3, r3, #8
 8003bc6:	f884 30be 	strb.w	r3, [r4, #190]	; 0xbe
 8003bca:	8843      	ldrh	r3, [r0, #2]
 8003bcc:	f884 30bf 	strb.w	r3, [r4, #191]	; 0xbf
 8003bd0:	f890 3027 	ldrb.w	r3, [r0, #39]	; 0x27
 8003bd4:	f884 30c2 	strb.w	r3, [r4, #194]	; 0xc2
 8003bd8:	f104 01b0 	add.w	r1, r4, #176	; 0xb0
 8003bdc:	68a8      	ldr	r0, [r5, #8]
 8003bde:	2213      	movs	r2, #19
 8003be0:	75c2      	strb	r2, [r0, #23]
 8003be2:	3018      	adds	r0, #24
 8003be4:	f7ff fe99 	bl	800391a <memcpy.isra.0>
 8003be8:	4628      	mov	r0, r5
 8003bea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003bee:	f7ff bf91 	b.w	8003b14 <RDMHandler::RespondMessageAck()>
 8003bf2:	f104 019d 	add.w	r1, r4, #157	; 0x9d
 8003bf6:	e7f1      	b.n	8003bdc <RDMHandler::GetDeviceInfo(unsigned short)+0x48>
 8003bf8:	20000644 	andcs	r0, r0, r4, asr #12

08003bfc <RDMHandler::GetFactoryDefaults(unsigned short)>:
 8003bfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003bfe:	6886      	ldr	r6, [r0, #8]
 8003c00:	2301      	movs	r3, #1
 8003c02:	75f3      	strb	r3, [r6, #23]
 8003c04:	4b1c      	ldr	r3, [pc, #112]	; (8003c78 <RDMHandler::GetFactoryDefaults(unsigned short)+0x7c>)
 8003c06:	681c      	ldr	r4, [r3, #0]
 8003c08:	f894 30c5 	ldrb.w	r3, [r4, #197]	; 0xc5
 8003c0c:	4605      	mov	r5, r0
 8003c0e:	b37b      	cbz	r3, 8003c70 <RDMHandler::GetFactoryDefaults(unsigned short)+0x74>
 8003c10:	f06f 0c0d 	mvn.w	ip, #13
 8003c14:	f8b4 1078 	ldrh.w	r1, [r4, #120]	; 0x78
 8003c18:	f894 3076 	ldrb.w	r3, [r4, #118]	; 0x76
 8003c1c:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
 8003c20:	f104 020e 	add.w	r2, r4, #14
 8003c24:	ebac 0c04 	sub.w	ip, ip, r4
 8003c28:	eb0c 0702 	add.w	r7, ip, r2
 8003c2c:	4287      	cmp	r7, r0
 8003c2e:	d30a      	bcc.n	8003c46 <RDMHandler::GetFactoryDefaults(unsigned short)+0x4a>
 8003c30:	4299      	cmp	r1, r3
 8003c32:	d00d      	beq.n	8003c50 <RDMHandler::GetFactoryDefaults(unsigned short)+0x54>
 8003c34:	2300      	movs	r3, #0
 8003c36:	f884 30c5 	strb.w	r3, [r4, #197]	; 0xc5
 8003c3a:	7633      	strb	r3, [r6, #24]
 8003c3c:	4628      	mov	r0, r5
 8003c3e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8003c42:	f7ff bf67 	b.w	8003b14 <RDMHandler::RespondMessageAck()>
 8003c46:	f812 7f01 	ldrb.w	r7, [r2, #1]!
 8003c4a:	443b      	add	r3, r7
 8003c4c:	b29b      	uxth	r3, r3
 8003c4e:	e7eb      	b.n	8003c28 <RDMHandler::GetFactoryDefaults(unsigned short)+0x2c>
 8003c50:	f894 30ac 	ldrb.w	r3, [r4, #172]	; 0xac
 8003c54:	f894 10a9 	ldrb.w	r1, [r4, #169]	; 0xa9
 8003c58:	f8b4 20c6 	ldrh.w	r2, [r4, #198]	; 0xc6
 8003c5c:	440b      	add	r3, r1
 8003c5e:	429a      	cmp	r2, r3
 8003c60:	d1e8      	bne.n	8003c34 <RDMHandler::GetFactoryDefaults(unsigned short)+0x38>
 8003c62:	f104 008c 	add.w	r0, r4, #140	; 0x8c
 8003c66:	f7fe ff5a 	bl	8002b1e <RDMSubDevices::GetFactoryDefaults()>
 8003c6a:	4603      	mov	r3, r0
 8003c6c:	2800      	cmp	r0, #0
 8003c6e:	d0e2      	beq.n	8003c36 <RDMHandler::GetFactoryDefaults(unsigned short)+0x3a>
 8003c70:	f894 30c5 	ldrb.w	r3, [r4, #197]	; 0xc5
 8003c74:	e7e1      	b.n	8003c3a <RDMHandler::GetFactoryDefaults(unsigned short)+0x3e>
 8003c76:	bf00      	nop
 8003c78:	20000644 	andcs	r0, r0, r4, asr #12

08003c7c <RDMHandler::GetProductDetailIdList(unsigned short)>:
 8003c7c:	4b05      	ldr	r3, [pc, #20]	; (8003c94 <RDMHandler::GetProductDetailIdList(unsigned short)+0x18>)
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	f8b3 2054 	ldrh.w	r2, [r3, #84]	; 0x54
 8003c84:	6883      	ldr	r3, [r0, #8]
 8003c86:	2102      	movs	r1, #2
 8003c88:	75d9      	strb	r1, [r3, #23]
 8003c8a:	0a11      	lsrs	r1, r2, #8
 8003c8c:	7619      	strb	r1, [r3, #24]
 8003c8e:	765a      	strb	r2, [r3, #25]
 8003c90:	f7ff bf40 	b.w	8003b14 <RDMHandler::RespondMessageAck()>
 8003c94:	20000644 	andcs	r0, r0, r4, asr #12

08003c98 <RDMHandler::GetDeviceModelDescription(unsigned short)>:
 8003c98:	b510      	push	{r4, lr}
 8003c9a:	4905      	ldr	r1, [pc, #20]	; (8003cb0 <RDMHandler::GetDeviceModelDescription(unsigned short)+0x18>)
 8003c9c:	4604      	mov	r4, r0
 8003c9e:	220a      	movs	r2, #10
 8003ca0:	f7ff fedf 	bl	8003a62 <RDMHandler::HandleString(char const*, unsigned int)>
 8003ca4:	4620      	mov	r0, r4
 8003ca6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003caa:	f7ff bf33 	b.w	8003b14 <RDMHandler::RespondMessageAck()>
 8003cae:	bf00      	nop
 8003cb0:	08009c94 	stmdaeq	r0, {r2, r4, r7, sl, fp, ip, pc}

08003cb4 <RDMHandler::GetManufacturerLabel(unsigned short)>:
 8003cb4:	b510      	push	{r4, lr}
 8003cb6:	4b06      	ldr	r3, [pc, #24]	; (8003cd0 <RDMHandler::GetManufacturerLabel(unsigned short)+0x1c>)
 8003cb8:	6819      	ldr	r1, [r3, #0]
 8003cba:	4604      	mov	r4, r0
 8003cbc:	f891 2050 	ldrb.w	r2, [r1, #80]	; 0x50
 8003cc0:	3130      	adds	r1, #48	; 0x30
 8003cc2:	f7ff fece 	bl	8003a62 <RDMHandler::HandleString(char const*, unsigned int)>
 8003cc6:	4620      	mov	r0, r4
 8003cc8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003ccc:	f7ff bf22 	b.w	8003b14 <RDMHandler::RespondMessageAck()>
 8003cd0:	20000644 	andcs	r0, r0, r4, asr #12

08003cd4 <RDMHandler::GetDeviceLabel(unsigned short)>:
 8003cd4:	4b0d      	ldr	r3, [pc, #52]	; (8003d0c <RDMHandler::GetDeviceLabel(unsigned short)+0x38>)
 8003cd6:	b513      	push	{r0, r1, r4, lr}
 8003cd8:	4604      	mov	r4, r0
 8003cda:	6818      	ldr	r0, [r3, #0]
 8003cdc:	b171      	cbz	r1, 8003cfc <RDMHandler::GetDeviceLabel(unsigned short)+0x28>
 8003cde:	466a      	mov	r2, sp
 8003ce0:	308c      	adds	r0, #140	; 0x8c
 8003ce2:	f7fe fe8f 	bl	8002a04 <RDMSubDevices::GetLabel(unsigned short, TRDMDeviceInfoData*)>
 8003ce6:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8003cea:	9900      	ldr	r1, [sp, #0]
 8003cec:	4620      	mov	r0, r4
 8003cee:	f7ff feb8 	bl	8003a62 <RDMHandler::HandleString(char const*, unsigned int)>
 8003cf2:	4620      	mov	r0, r4
 8003cf4:	f7ff ff0e 	bl	8003b14 <RDMHandler::RespondMessageAck()>
 8003cf8:	b002      	add	sp, #8
 8003cfa:	bd10      	pop	{r4, pc}
 8003cfc:	f100 030f 	add.w	r3, r0, #15
 8003d00:	9300      	str	r3, [sp, #0]
 8003d02:	f890 302f 	ldrb.w	r3, [r0, #47]	; 0x2f
 8003d06:	f88d 3004 	strb.w	r3, [sp, #4]
 8003d0a:	e7ec      	b.n	8003ce6 <RDMHandler::GetDeviceLabel(unsigned short)+0x12>
 8003d0c:	20000644 	andcs	r0, r0, r4, asr #12

08003d10 <RDMHandler::GetSoftwareVersionLabel(unsigned short)>:
 8003d10:	b510      	push	{r4, lr}
 8003d12:	4b07      	ldr	r3, [pc, #28]	; (8003d30 <RDMHandler::GetSoftwareVersionLabel(unsigned short)+0x20>)
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	4604      	mov	r4, r0
 8003d18:	f893 209c 	ldrb.w	r2, [r3, #156]	; 0x9c
 8003d1c:	f8d3 1098 	ldr.w	r1, [r3, #152]	; 0x98
 8003d20:	f7ff fe9f 	bl	8003a62 <RDMHandler::HandleString(char const*, unsigned int)>
 8003d24:	4620      	mov	r0, r4
 8003d26:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003d2a:	f7ff bef3 	b.w	8003b14 <RDMHandler::RespondMessageAck()>
 8003d2e:	bf00      	nop
 8003d30:	20000644 	andcs	r0, r0, r4, asr #12

08003d34 <RDMHandler::GetIdentifyDevice(unsigned short)>:
 8003d34:	6883      	ldr	r3, [r0, #8]
 8003d36:	2201      	movs	r2, #1
 8003d38:	75da      	strb	r2, [r3, #23]
 8003d3a:	4a02      	ldr	r2, [pc, #8]	; (8003d44 <RDMHandler::GetIdentifyDevice(unsigned short)+0x10>)
 8003d3c:	7812      	ldrb	r2, [r2, #0]
 8003d3e:	761a      	strb	r2, [r3, #24]
 8003d40:	f7ff bee8 	b.w	8003b14 <RDMHandler::RespondMessageAck()>
 8003d44:	20000648 	andcs	r0, r0, r8, asr #12

08003d48 <RDMHandler::GetLanguage(unsigned short)>:
 8003d48:	b510      	push	{r4, lr}
 8003d4a:	4b06      	ldr	r3, [pc, #24]	; (8003d64 <RDMHandler::GetLanguage(unsigned short)+0x1c>)
 8003d4c:	6819      	ldr	r1, [r3, #0]
 8003d4e:	4604      	mov	r4, r0
 8003d50:	2202      	movs	r2, #2
 8003d52:	31c3      	adds	r1, #195	; 0xc3
 8003d54:	f7ff fe85 	bl	8003a62 <RDMHandler::HandleString(char const*, unsigned int)>
 8003d58:	4620      	mov	r0, r4
 8003d5a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003d5e:	f7ff bed9 	b.w	8003b14 <RDMHandler::RespondMessageAck()>
 8003d62:	bf00      	nop
 8003d64:	20000644 	andcs	r0, r0, r4, asr #12

08003d68 <RDMHandler::GetPersonality(unsigned short)>:
 8003d68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d6a:	4f0d      	ldr	r7, [pc, #52]	; (8003da0 <RDMHandler::GetPersonality(unsigned short)+0x38>)
 8003d6c:	4604      	mov	r4, r0
 8003d6e:	460e      	mov	r6, r1
 8003d70:	6838      	ldr	r0, [r7, #0]
 8003d72:	b189      	cbz	r1, 8003d98 <RDMHandler::GetPersonality(unsigned short)+0x30>
 8003d74:	308c      	adds	r0, #140	; 0x8c
 8003d76:	f7fe fe75 	bl	8002a64 <RDMSubDevices::GetPersonalityCurrent(unsigned short)>
 8003d7a:	4605      	mov	r5, r0
 8003d7c:	6838      	ldr	r0, [r7, #0]
 8003d7e:	4631      	mov	r1, r6
 8003d80:	f7ff fe2d 	bl	80039de <RDMDeviceResponder::GetPersonalityCount(unsigned short)>
 8003d84:	68a3      	ldr	r3, [r4, #8]
 8003d86:	2202      	movs	r2, #2
 8003d88:	7658      	strb	r0, [r3, #25]
 8003d8a:	75da      	strb	r2, [r3, #23]
 8003d8c:	761d      	strb	r5, [r3, #24]
 8003d8e:	4620      	mov	r0, r4
 8003d90:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8003d94:	f7ff bebe 	b.w	8003b14 <RDMHandler::RespondMessageAck()>
 8003d98:	f890 50a9 	ldrb.w	r5, [r0, #169]	; 0xa9
 8003d9c:	e7ee      	b.n	8003d7c <RDMHandler::GetPersonality(unsigned short)+0x14>
 8003d9e:	bf00      	nop
 8003da0:	20000644 	andcs	r0, r0, r4, asr #12

08003da4 <RDMHandler::GetDmxStartAddress(unsigned short)>:
 8003da4:	4b0d      	ldr	r3, [pc, #52]	; (8003ddc <RDMHandler::GetDmxStartAddress(unsigned short)+0x38>)
 8003da6:	b510      	push	{r4, lr}
 8003da8:	4604      	mov	r4, r0
 8003daa:	6818      	ldr	r0, [r3, #0]
 8003dac:	b169      	cbz	r1, 8003dca <RDMHandler::GetDmxStartAddress(unsigned short)+0x26>
 8003dae:	308c      	adds	r0, #140	; 0x8c
 8003db0:	f7fe fe3f 	bl	8002a32 <RDMSubDevices::GetDmxStartAddress(unsigned short)>
 8003db4:	68a3      	ldr	r3, [r4, #8]
 8003db6:	2202      	movs	r2, #2
 8003db8:	75da      	strb	r2, [r3, #23]
 8003dba:	0a02      	lsrs	r2, r0, #8
 8003dbc:	7658      	strb	r0, [r3, #25]
 8003dbe:	761a      	strb	r2, [r3, #24]
 8003dc0:	4620      	mov	r0, r4
 8003dc2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003dc6:	f7ff bea5 	b.w	8003b14 <RDMHandler::RespondMessageAck()>
 8003dca:	f890 20ab 	ldrb.w	r2, [r0, #171]	; 0xab
 8003dce:	f890 30ac 	ldrb.w	r3, [r0, #172]	; 0xac
 8003dd2:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8003dd6:	b298      	uxth	r0, r3
 8003dd8:	e7ec      	b.n	8003db4 <RDMHandler::GetDmxStartAddress(unsigned short)+0x10>
 8003dda:	bf00      	nop
 8003ddc:	20000644 	andcs	r0, r0, r4, asr #12

08003de0 <RDMHandler::GetDeviceHours(unsigned short)>:
 8003de0:	4b07      	ldr	r3, [pc, #28]	; (8003e00 <RDMHandler::GetDeviceHours(unsigned short)+0x20>)
 8003de2:	681a      	ldr	r2, [r3, #0]
 8003de4:	4b07      	ldr	r3, [pc, #28]	; (8003e04 <RDMHandler::GetDeviceHours(unsigned short)+0x24>)
 8003de6:	fbb2 f2f3 	udiv	r2, r2, r3
 8003dea:	6883      	ldr	r3, [r0, #8]
 8003dec:	2104      	movs	r1, #4
 8003dee:	75d9      	strb	r1, [r3, #23]
 8003df0:	2100      	movs	r1, #0
 8003df2:	7619      	strb	r1, [r3, #24]
 8003df4:	7659      	strb	r1, [r3, #25]
 8003df6:	0a11      	lsrs	r1, r2, #8
 8003df8:	7699      	strb	r1, [r3, #26]
 8003dfa:	76da      	strb	r2, [r3, #27]
 8003dfc:	f7ff be8a 	b.w	8003b14 <RDMHandler::RespondMessageAck()>
 8003e00:	2000181c 	andcs	r1, r0, ip, lsl r8
 8003e04:	0036ee80 	eorseq	lr, r6, r0, lsl #29

08003e08 <RDMHandler::GetDisplayInvert(unsigned short)>:
 8003e08:	6882      	ldr	r2, [r0, #8]
 8003e0a:	2301      	movs	r3, #1
 8003e0c:	75d3      	strb	r3, [r2, #23]
 8003e0e:	4b04      	ldr	r3, [pc, #16]	; (8003e20 <RDMHandler::GetDisplayInvert(unsigned short)+0x18>)
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	699b      	ldr	r3, [r3, #24]
 8003e14:	b103      	cbz	r3, 8003e18 <RDMHandler::GetDisplayInvert(unsigned short)+0x10>
 8003e16:	79db      	ldrb	r3, [r3, #7]
 8003e18:	7613      	strb	r3, [r2, #24]
 8003e1a:	f7ff be7b 	b.w	8003b14 <RDMHandler::RespondMessageAck()>
 8003e1e:	bf00      	nop
 8003e20:	200016f0 	strdcs	r1, [r0], -r0

08003e24 <RDMHandler::GetDisplayLevel(unsigned short)>:
 8003e24:	6882      	ldr	r2, [r0, #8]
 8003e26:	2301      	movs	r3, #1
 8003e28:	75d3      	strb	r3, [r2, #23]
 8003e2a:	4b04      	ldr	r3, [pc, #16]	; (8003e3c <RDMHandler::GetDisplayLevel(unsigned short)+0x18>)
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	699b      	ldr	r3, [r3, #24]
 8003e30:	b103      	cbz	r3, 8003e34 <RDMHandler::GetDisplayLevel(unsigned short)+0x10>
 8003e32:	799b      	ldrb	r3, [r3, #6]
 8003e34:	7613      	strb	r3, [r2, #24]
 8003e36:	f7ff be6d 	b.w	8003b14 <RDMHandler::RespondMessageAck()>
 8003e3a:	bf00      	nop
 8003e3c:	200016f0 	strdcs	r1, [r0], -r0

08003e40 <RDMHandler::GetRealTimeClock(unsigned short)>:
 8003e40:	b510      	push	{r4, lr}
 8003e42:	4b10      	ldr	r3, [pc, #64]	; (8003e84 <RDMHandler::GetRealTimeClock(unsigned short)+0x44>)
 8003e44:	b08a      	sub	sp, #40	; 0x28
 8003e46:	4604      	mov	r4, r0
 8003e48:	a901      	add	r1, sp, #4
 8003e4a:	6818      	ldr	r0, [r3, #0]
 8003e4c:	f003 fda3 	bl	8007996 <Hardware::GetTime(tm*)>
 8003e50:	9a06      	ldr	r2, [sp, #24]
 8003e52:	68a3      	ldr	r3, [r4, #8]
 8003e54:	f202 726c 	addw	r2, r2, #1900	; 0x76c
 8003e58:	f3c2 2107 	ubfx	r1, r2, #8, #8
 8003e5c:	765a      	strb	r2, [r3, #25]
 8003e5e:	9a05      	ldr	r2, [sp, #20]
 8003e60:	7619      	strb	r1, [r3, #24]
 8003e62:	3201      	adds	r2, #1
 8003e64:	769a      	strb	r2, [r3, #26]
 8003e66:	9a04      	ldr	r2, [sp, #16]
 8003e68:	76da      	strb	r2, [r3, #27]
 8003e6a:	9a03      	ldr	r2, [sp, #12]
 8003e6c:	771a      	strb	r2, [r3, #28]
 8003e6e:	9a02      	ldr	r2, [sp, #8]
 8003e70:	775a      	strb	r2, [r3, #29]
 8003e72:	9a01      	ldr	r2, [sp, #4]
 8003e74:	779a      	strb	r2, [r3, #30]
 8003e76:	2207      	movs	r2, #7
 8003e78:	75da      	strb	r2, [r3, #23]
 8003e7a:	4620      	mov	r0, r4
 8003e7c:	f7ff fe4a 	bl	8003b14 <RDMHandler::RespondMessageAck()>
 8003e80:	b00a      	add	sp, #40	; 0x28
 8003e82:	bd10      	pop	{r4, pc}
 8003e84:	200017e0 	andcs	r1, r0, r0, ror #15

08003e88 <RDMHandler::GetPowerState(unsigned short)>:
 8003e88:	6883      	ldr	r3, [r0, #8]
 8003e8a:	2201      	movs	r2, #1
 8003e8c:	75da      	strb	r2, [r3, #23]
 8003e8e:	22ff      	movs	r2, #255	; 0xff
 8003e90:	761a      	strb	r2, [r3, #24]
 8003e92:	f7ff be3f 	b.w	8003b14 <RDMHandler::RespondMessageAck()>

08003e96 <RDMHandler::GetPerformSelfTest(unsigned short)>:
 8003e96:	b538      	push	{r3, r4, r5, lr}
 8003e98:	6885      	ldr	r5, [r0, #8]
 8003e9a:	2301      	movs	r3, #1
 8003e9c:	75eb      	strb	r3, [r5, #23]
 8003e9e:	4604      	mov	r4, r0
 8003ea0:	f7fd f8a4 	bl	8000fec <rdm::selftest::Get()>
 8003ea4:	3800      	subs	r0, #0
 8003ea6:	bf18      	it	ne
 8003ea8:	2001      	movne	r0, #1
 8003eaa:	7628      	strb	r0, [r5, #24]
 8003eac:	4620      	mov	r0, r4
 8003eae:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003eb2:	f7ff be2f 	b.w	8003b14 <RDMHandler::RespondMessageAck()>
	...

08003eb8 <RDMHandler::GetBootSoftwareVersionLabel(unsigned short)>:
 8003eb8:	b510      	push	{r4, lr}
 8003eba:	4905      	ldr	r1, [pc, #20]	; (8003ed0 <RDMHandler::GetBootSoftwareVersionLabel(unsigned short)+0x18>)
 8003ebc:	4604      	mov	r4, r0
 8003ebe:	2208      	movs	r2, #8
 8003ec0:	f7ff fdcf 	bl	8003a62 <RDMHandler::HandleString(char const*, unsigned int)>
 8003ec4:	4620      	mov	r0, r4
 8003ec6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003eca:	f7ff be23 	b.w	8003b14 <RDMHandler::RespondMessageAck()>
 8003ece:	bf00      	nop
 8003ed0:	08009c9f 	stmdaeq	r0, {r0, r1, r2, r3, r4, r7, sl, fp, ip, pc}

08003ed4 <RDMHandler::GetSlotInfo(unsigned short)>:
 8003ed4:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8003ed8:	f8df 8084 	ldr.w	r8, [pc, #132]	; 8003f60 <RDMHandler::GetSlotInfo(unsigned short)+0x8c>
 8003edc:	6887      	ldr	r7, [r0, #8]
 8003ede:	4606      	mov	r6, r0
 8003ee0:	4689      	mov	r9, r1
 8003ee2:	f8d8 0000 	ldr.w	r0, [r8]
 8003ee6:	b1b9      	cbz	r1, 8003f18 <RDMHandler::GetSlotInfo(unsigned short)+0x44>
 8003ee8:	308c      	adds	r0, #140	; 0x8c
 8003eea:	f7fe fdb3 	bl	8002a54 <RDMSubDevices::GetDmxFootPrint(unsigned short)>
 8003eee:	282e      	cmp	r0, #46	; 0x2e
 8003ef0:	bf28      	it	cs
 8003ef2:	202e      	movcs	r0, #46	; 0x2e
 8003ef4:	f04f 0a00 	mov.w	sl, #0
 8003ef8:	b285      	uxth	r5, r0
 8003efa:	4654      	mov	r4, sl
 8003efc:	fa1f f18a 	uxth.w	r1, sl
 8003f00:	42a9      	cmp	r1, r5
 8003f02:	d311      	bcc.n	8003f28 <RDMHandler::GetSlotInfo(unsigned short)+0x54>
 8003f04:	b2e4      	uxtb	r4, r4
 8003f06:	75fc      	strb	r4, [r7, #23]
 8003f08:	3418      	adds	r4, #24
 8003f0a:	70bc      	strb	r4, [r7, #2]
 8003f0c:	4630      	mov	r0, r6
 8003f0e:	f7ff fe01 	bl	8003b14 <RDMHandler::RespondMessageAck()>
 8003f12:	b002      	add	sp, #8
 8003f14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003f18:	f890 30a7 	ldrb.w	r3, [r0, #167]	; 0xa7
 8003f1c:	f890 00a8 	ldrb.w	r0, [r0, #168]	; 0xa8
 8003f20:	eb00 2303 	add.w	r3, r0, r3, lsl #8
 8003f24:	b298      	uxth	r0, r3
 8003f26:	e7e2      	b.n	8003eee <RDMHandler::GetSlotInfo(unsigned short)+0x1a>
 8003f28:	f1b9 0f00 	cmp.w	r9, #0
 8003f2c:	d115      	bne.n	8003f5a <RDMHandler::GetSlotInfo(unsigned short)+0x86>
 8003f2e:	f8d8 0000 	ldr.w	r0, [r8]
 8003f32:	aa01      	add	r2, sp, #4
 8003f34:	f7ff fce4 	bl	8003900 <RDMDeviceResponder::GetSlotInfo(unsigned short, unsigned short, lightset::SlotInfo&) [clone .part.0]>
 8003f38:	b178      	cbz	r0, 8003f5a <RDMHandler::GetSlotInfo(unsigned short)+0x86>
 8003f3a:	193a      	adds	r2, r7, r4
 8003f3c:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8003f40:	f8bd 1004 	ldrh.w	r1, [sp, #4]
 8003f44:	7693      	strb	r3, [r2, #26]
 8003f46:	1d23      	adds	r3, r4, #4
 8003f48:	443b      	add	r3, r7
 8003f4a:	0a08      	lsrs	r0, r1, #8
 8003f4c:	f882 9018 	strb.w	r9, [r2, #24]
 8003f50:	f882 a019 	strb.w	sl, [r2, #25]
 8003f54:	76d0      	strb	r0, [r2, #27]
 8003f56:	3405      	adds	r4, #5
 8003f58:	7619      	strb	r1, [r3, #24]
 8003f5a:	f10a 0a01 	add.w	sl, sl, #1
 8003f5e:	e7cd      	b.n	8003efc <RDMHandler::GetSlotInfo(unsigned short)+0x28>
 8003f60:	20000644 	andcs	r0, r0, r4, asr #12

08003f64 <RDMHandler::RespondMessageNack(unsigned short)>:
 8003f64:	460a      	mov	r2, r1
 8003f66:	2102      	movs	r1, #2
 8003f68:	f7ff bd88 	b.w	8003a7c <RDMHandler::CreateRespondMessage(unsigned char, unsigned short)>

08003f6c <RDMHandler::SetResetDevice(bool, unsigned short)>:
 8003f6c:	b510      	push	{r4, lr}
 8003f6e:	6843      	ldr	r3, [r0, #4]
 8003f70:	7d9a      	ldrb	r2, [r3, #22]
 8003f72:	2a01      	cmp	r2, #1
 8003f74:	4604      	mov	r4, r0
 8003f76:	d004      	beq.n	8003f82 <RDMHandler::SetResetDevice(bool, unsigned short)+0x16>
 8003f78:	2101      	movs	r1, #1
 8003f7a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003f7e:	f7ff bff1 	b.w	8003f64 <RDMHandler::RespondMessageNack(unsigned short)>
 8003f82:	7ddb      	ldrb	r3, [r3, #23]
 8003f84:	2b01      	cmp	r3, #1
 8003f86:	d003      	beq.n	8003f90 <RDMHandler::SetResetDevice(bool, unsigned short)+0x24>
 8003f88:	2bff      	cmp	r3, #255	; 0xff
 8003f8a:	d001      	beq.n	8003f90 <RDMHandler::SetResetDevice(bool, unsigned short)+0x24>
 8003f8c:	2106      	movs	r1, #6
 8003f8e:	e7f4      	b.n	8003f7a <RDMHandler::SetResetDevice(bool, unsigned short)+0xe>
 8003f90:	68a2      	ldr	r2, [r4, #8]
 8003f92:	2100      	movs	r1, #0
 8003f94:	2bff      	cmp	r3, #255	; 0xff
 8003f96:	75d1      	strb	r1, [r2, #23]
 8003f98:	d102      	bne.n	8003fa0 <RDMHandler::SetResetDevice(bool, unsigned short)+0x34>
 8003f9a:	2104      	movs	r1, #4
 8003f9c:	4620      	mov	r0, r4
 8003f9e:	e7ec      	b.n	8003f7a <RDMHandler::SetResetDevice(bool, unsigned short)+0xe>
 8003fa0:	4b03      	ldr	r3, [pc, #12]	; (8003fb0 <RDMHandler::SetResetDevice(bool, unsigned short)+0x44>)
 8003fa2:	6818      	ldr	r0, [r3, #0]
 8003fa4:	f003 fd0e 	bl	80079c4 <Hardware::Reboot()>
 8003fa8:	2800      	cmp	r0, #0
 8003faa:	d0f6      	beq.n	8003f9a <RDMHandler::SetResetDevice(bool, unsigned short)+0x2e>
 8003fac:	bd10      	pop	{r4, pc}
 8003fae:	bf00      	nop
 8003fb0:	200017e0 	andcs	r1, r0, r0, ror #15

08003fb4 <RDMHandler::SetIdentifyDevice(bool, unsigned short)>:
 8003fb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003fb6:	6843      	ldr	r3, [r0, #4]
 8003fb8:	460d      	mov	r5, r1
 8003fba:	7d99      	ldrb	r1, [r3, #22]
 8003fbc:	2901      	cmp	r1, #1
 8003fbe:	4604      	mov	r4, r0
 8003fc0:	d004      	beq.n	8003fcc <RDMHandler::SetIdentifyDevice(bool, unsigned short)+0x18>
 8003fc2:	2101      	movs	r1, #1
 8003fc4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8003fc8:	f7ff bfcc 	b.w	8003f64 <RDMHandler::RespondMessageNack(unsigned short)>
 8003fcc:	7ddb      	ldrb	r3, [r3, #23]
 8003fce:	2b01      	cmp	r3, #1
 8003fd0:	d901      	bls.n	8003fd6 <RDMHandler::SetIdentifyDevice(bool, unsigned short)+0x22>
 8003fd2:	2106      	movs	r1, #6
 8003fd4:	e7f6      	b.n	8003fc4 <RDMHandler::SetIdentifyDevice(bool, unsigned short)+0x10>
 8003fd6:	4a12      	ldr	r2, [pc, #72]	; (8004020 <RDMHandler::SetIdentifyDevice(bool, unsigned short)+0x6c>)
 8003fd8:	4f12      	ldr	r7, [pc, #72]	; (8004024 <RDMHandler::SetIdentifyDevice(bool, unsigned short)+0x70>)
 8003fda:	6816      	ldr	r6, [r2, #0]
 8003fdc:	4a12      	ldr	r2, [pc, #72]	; (8004028 <RDMHandler::SetIdentifyDevice(bool, unsigned short)+0x74>)
 8003fde:	6810      	ldr	r0, [r2, #0]
 8003fe0:	4a12      	ldr	r2, [pc, #72]	; (800402c <RDMHandler::SetIdentifyDevice(bool, unsigned short)+0x78>)
 8003fe2:	b983      	cbnz	r3, 8004006 <RDMHandler::SetIdentifyDevice(bool, unsigned short)+0x52>
 8003fe4:	2102      	movs	r1, #2
 8003fe6:	7013      	strb	r3, [r2, #0]
 8003fe8:	f003 fc32 	bl	8007850 <LedBlink::SetMode(ledblink::Mode)>
 8003fec:	7839      	ldrb	r1, [r7, #0]
 8003fee:	b111      	cbz	r1, 8003ff6 <RDMHandler::SetIdentifyDevice(bool, unsigned short)+0x42>
 8003ff0:	4630      	mov	r0, r6
 8003ff2:	f7fd f8cf 	bl	8001194 <RDMIdentify::Off(rdm::identify::Mode)>
 8003ff6:	b98d      	cbnz	r5, 800401c <RDMHandler::SetIdentifyDevice(bool, unsigned short)+0x68>
 8003ff8:	68a3      	ldr	r3, [r4, #8]
 8003ffa:	75dd      	strb	r5, [r3, #23]
 8003ffc:	4620      	mov	r0, r4
 8003ffe:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8004002:	f7ff bd87 	b.w	8003b14 <RDMHandler::RespondMessageAck()>
 8004006:	7011      	strb	r1, [r2, #0]
 8004008:	2104      	movs	r1, #4
 800400a:	f003 fc21 	bl	8007850 <LedBlink::SetMode(ledblink::Mode)>
 800400e:	7839      	ldrb	r1, [r7, #0]
 8004010:	2900      	cmp	r1, #0
 8004012:	d0f0      	beq.n	8003ff6 <RDMHandler::SetIdentifyDevice(bool, unsigned short)+0x42>
 8004014:	4630      	mov	r0, r6
 8004016:	f7fd f89f 	bl	8001158 <RDMIdentify::On(rdm::identify::Mode)>
 800401a:	e7ec      	b.n	8003ff6 <RDMHandler::SetIdentifyDevice(bool, unsigned short)+0x42>
 800401c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800401e:	bf00      	nop
 8004020:	2000064c 	andcs	r0, r0, ip, asr #12
 8004024:	20000649 	andcs	r0, r0, r9, asr #12
 8004028:	200017dc 	ldrdcs	r1, [r0], -ip
 800402c:	20000648 	andcs	r0, r0, r8, asr #12

08004030 <RDMHandler::SetLanguage(bool, unsigned short)>:
 8004030:	b470      	push	{r4, r5, r6}
 8004032:	6842      	ldr	r2, [r0, #4]
 8004034:	7d94      	ldrb	r4, [r2, #22]
 8004036:	2c02      	cmp	r4, #2
 8004038:	4603      	mov	r3, r0
 800403a:	d003      	beq.n	8004044 <RDMHandler::SetLanguage(bool, unsigned short)+0x14>
 800403c:	2101      	movs	r1, #1
 800403e:	bc70      	pop	{r4, r5, r6}
 8004040:	f7ff bf90 	b.w	8003f64 <RDMHandler::RespondMessageNack(unsigned short)>
 8004044:	4c0b      	ldr	r4, [pc, #44]	; (8004074 <RDMHandler::SetLanguage(bool, unsigned short)+0x44>)
 8004046:	7dd6      	ldrb	r6, [r2, #23]
 8004048:	6824      	ldr	r4, [r4, #0]
 800404a:	f894 50c3 	ldrb.w	r5, [r4, #195]	; 0xc3
 800404e:	42ae      	cmp	r6, r5
 8004050:	d104      	bne.n	800405c <RDMHandler::SetLanguage(bool, unsigned short)+0x2c>
 8004052:	7e15      	ldrb	r5, [r2, #24]
 8004054:	f894 20c4 	ldrb.w	r2, [r4, #196]	; 0xc4
 8004058:	4295      	cmp	r5, r2
 800405a:	d002      	beq.n	8004062 <RDMHandler::SetLanguage(bool, unsigned short)+0x32>
 800405c:	2106      	movs	r1, #6
 800405e:	4618      	mov	r0, r3
 8004060:	e7ed      	b.n	800403e <RDMHandler::SetLanguage(bool, unsigned short)+0xe>
 8004062:	b921      	cbnz	r1, 800406e <RDMHandler::SetLanguage(bool, unsigned short)+0x3e>
 8004064:	6883      	ldr	r3, [r0, #8]
 8004066:	75d9      	strb	r1, [r3, #23]
 8004068:	bc70      	pop	{r4, r5, r6}
 800406a:	f7ff bd53 	b.w	8003b14 <RDMHandler::RespondMessageAck()>
 800406e:	bc70      	pop	{r4, r5, r6}
 8004070:	4770      	bx	lr
 8004072:	bf00      	nop
 8004074:	20000644 	andcs	r0, r0, r4, asr #12

08004078 <RDMHandler::GetBootSoftwareVersionId(unsigned short)>:
 8004078:	6842      	ldr	r2, [r0, #4]
 800407a:	7d92      	ldrb	r2, [r2, #22]
 800407c:	b112      	cbz	r2, 8004084 <RDMHandler::GetBootSoftwareVersionId(unsigned short)+0xc>
 800407e:	2101      	movs	r1, #1
 8004080:	f7ff bf70 	b.w	8003f64 <RDMHandler::RespondMessageNack(unsigned short)>
 8004084:	6883      	ldr	r3, [r0, #8]
 8004086:	2104      	movs	r1, #4
 8004088:	75d9      	strb	r1, [r3, #23]
 800408a:	761a      	strb	r2, [r3, #24]
 800408c:	765a      	strb	r2, [r3, #25]
 800408e:	769a      	strb	r2, [r3, #26]
 8004090:	76da      	strb	r2, [r3, #27]
 8004092:	f7ff bd3f 	b.w	8003b14 <RDMHandler::RespondMessageAck()>
	...

08004098 <RDMHandler::SetPersonality(bool, unsigned short)>:
 8004098:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800409a:	6843      	ldr	r3, [r0, #4]
 800409c:	4611      	mov	r1, r2
 800409e:	7d9a      	ldrb	r2, [r3, #22]
 80040a0:	2a01      	cmp	r2, #1
 80040a2:	4604      	mov	r4, r0
 80040a4:	d005      	beq.n	80040b2 <RDMHandler::SetPersonality(bool, unsigned short)+0x1a>
 80040a6:	2101      	movs	r1, #1
 80040a8:	b002      	add	sp, #8
 80040aa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80040ae:	f7ff bf59 	b.w	8003f64 <RDMHandler::RespondMessageNack(unsigned short)>
 80040b2:	4e0d      	ldr	r6, [pc, #52]	; (80040e8 <RDMHandler::SetPersonality(bool, unsigned short)+0x50>)
 80040b4:	7ddd      	ldrb	r5, [r3, #23]
 80040b6:	6830      	ldr	r0, [r6, #0]
 80040b8:	9101      	str	r1, [sp, #4]
 80040ba:	f7ff fc90 	bl	80039de <RDMDeviceResponder::GetPersonalityCount(unsigned short)>
 80040be:	b115      	cbz	r5, 80040c6 <RDMHandler::SetPersonality(bool, unsigned short)+0x2e>
 80040c0:	4285      	cmp	r5, r0
 80040c2:	9901      	ldr	r1, [sp, #4]
 80040c4:	d902      	bls.n	80040cc <RDMHandler::SetPersonality(bool, unsigned short)+0x34>
 80040c6:	2106      	movs	r1, #6
 80040c8:	4620      	mov	r0, r4
 80040ca:	e7ed      	b.n	80040a8 <RDMHandler::SetPersonality(bool, unsigned short)+0x10>
 80040cc:	6830      	ldr	r0, [r6, #0]
 80040ce:	462a      	mov	r2, r5
 80040d0:	f7ff fc8c 	bl	80039ec <RDMDeviceResponder::SetPersonalityCurrent(unsigned short, unsigned char)>
 80040d4:	68a3      	ldr	r3, [r4, #8]
 80040d6:	2200      	movs	r2, #0
 80040d8:	4620      	mov	r0, r4
 80040da:	75da      	strb	r2, [r3, #23]
 80040dc:	b002      	add	sp, #8
 80040de:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80040e2:	f7ff bd17 	b.w	8003b14 <RDMHandler::RespondMessageAck()>
 80040e6:	bf00      	nop
 80040e8:	20000644 	andcs	r0, r0, r4, asr #12

080040ec <RDMHandler::GetPersonalityDescription(unsigned short)>:
 80040ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80040f0:	6843      	ldr	r3, [r0, #4]
 80040f2:	f8df 9078 	ldr.w	r9, [pc, #120]	; 800416c <RDMHandler::GetPersonalityDescription(unsigned short)+0x80>
 80040f6:	7dde      	ldrb	r6, [r3, #23]
 80040f8:	4604      	mov	r4, r0
 80040fa:	f8d9 0000 	ldr.w	r0, [r9]
 80040fe:	460f      	mov	r7, r1
 8004100:	f7ff fc6d 	bl	80039de <RDMDeviceResponder::GetPersonalityCount(unsigned short)>
 8004104:	b10e      	cbz	r6, 800410a <RDMHandler::GetPersonalityDescription(unsigned short)+0x1e>
 8004106:	4286      	cmp	r6, r0
 8004108:	d905      	bls.n	8004116 <RDMHandler::GetPersonalityDescription(unsigned short)+0x2a>
 800410a:	4620      	mov	r0, r4
 800410c:	2106      	movs	r1, #6
 800410e:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004112:	f7ff bf27 	b.w	8003f64 <RDMHandler::RespondMessageNack(unsigned short)>
 8004116:	4632      	mov	r2, r6
 8004118:	4639      	mov	r1, r7
 800411a:	f8d9 0000 	ldr.w	r0, [r9]
 800411e:	f7ff fc52 	bl	80039c6 <RDMDeviceResponder::GetPersonality(unsigned short, unsigned char)>
 8004122:	8803      	ldrh	r3, [r0, #0]
 8004124:	68a5      	ldr	r5, [r4, #8]
 8004126:	f8d9 0000 	ldr.w	r0, [r9]
 800412a:	76ab      	strb	r3, [r5, #26]
 800412c:	0a1a      	lsrs	r2, r3, #8
 800412e:	766a      	strb	r2, [r5, #25]
 8004130:	4639      	mov	r1, r7
 8004132:	762e      	strb	r6, [r5, #24]
 8004134:	4632      	mov	r2, r6
 8004136:	f7ff fc46 	bl	80039c6 <RDMDeviceResponder::GetPersonality(unsigned short, unsigned char)>
 800413a:	f105 081b 	add.w	r8, r5, #27
 800413e:	1dc1      	adds	r1, r0, #7
 8004140:	2300      	movs	r3, #0
 8004142:	6a86      	ldr	r6, [r0, #40]	; 0x28
 8004144:	42b3      	cmp	r3, r6
 8004146:	b2da      	uxtb	r2, r3
 8004148:	d203      	bcs.n	8004152 <RDMHandler::GetPersonalityDescription(unsigned short)+0x66>
 800414a:	3301      	adds	r3, #1
 800414c:	2b21      	cmp	r3, #33	; 0x21
 800414e:	d107      	bne.n	8004160 <RDMHandler::GetPersonalityDescription(unsigned short)+0x74>
 8004150:	2220      	movs	r2, #32
 8004152:	3203      	adds	r2, #3
 8004154:	75ea      	strb	r2, [r5, #23]
 8004156:	4620      	mov	r0, r4
 8004158:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800415c:	f7ff bcda 	b.w	8003b14 <RDMHandler::RespondMessageAck()>
 8004160:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8004164:	f808 2b01 	strb.w	r2, [r8], #1
 8004168:	e7eb      	b.n	8004142 <RDMHandler::GetPersonalityDescription(unsigned short)+0x56>
 800416a:	bf00      	nop
 800416c:	20000644 	andcs	r0, r0, r4, asr #12

08004170 <RDMHandler::SetDmxStartAddress(bool, unsigned short)>:
 8004170:	b538      	push	{r3, r4, r5, lr}
 8004172:	6843      	ldr	r3, [r0, #4]
 8004174:	460d      	mov	r5, r1
 8004176:	4611      	mov	r1, r2
 8004178:	7d9a      	ldrb	r2, [r3, #22]
 800417a:	2a02      	cmp	r2, #2
 800417c:	4604      	mov	r4, r0
 800417e:	d004      	beq.n	800418a <RDMHandler::SetDmxStartAddress(bool, unsigned short)+0x1a>
 8004180:	2101      	movs	r1, #1
 8004182:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004186:	f7ff beed 	b.w	8003f64 <RDMHandler::RespondMessageNack(unsigned short)>
 800418a:	7dda      	ldrb	r2, [r3, #23]
 800418c:	7e1b      	ldrb	r3, [r3, #24]
 800418e:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8004192:	b29a      	uxth	r2, r3
 8004194:	1e53      	subs	r3, r2, #1
 8004196:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800419a:	d301      	bcc.n	80041a0 <RDMHandler::SetDmxStartAddress(bool, unsigned short)+0x30>
 800419c:	2106      	movs	r1, #6
 800419e:	e7f0      	b.n	8004182 <RDMHandler::SetDmxStartAddress(bool, unsigned short)+0x12>
 80041a0:	4b06      	ldr	r3, [pc, #24]	; (80041bc <RDMHandler::SetDmxStartAddress(bool, unsigned short)+0x4c>)
 80041a2:	6818      	ldr	r0, [r3, #0]
 80041a4:	f7ff fbe5 	bl	8003972 <RDMDeviceResponder::SetDmxStartAddress(unsigned short, unsigned short)>
 80041a8:	b935      	cbnz	r5, 80041b8 <RDMHandler::SetDmxStartAddress(bool, unsigned short)+0x48>
 80041aa:	68a3      	ldr	r3, [r4, #8]
 80041ac:	75dd      	strb	r5, [r3, #23]
 80041ae:	4620      	mov	r0, r4
 80041b0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80041b4:	f7ff bcae 	b.w	8003b14 <RDMHandler::RespondMessageAck()>
 80041b8:	bd38      	pop	{r3, r4, r5, pc}
 80041ba:	bf00      	nop
 80041bc:	20000644 	andcs	r0, r0, r4, asr #12

080041c0 <RDMHandler::GetSensorDefinition(unsigned short)>:
 80041c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80041c2:	6843      	ldr	r3, [r0, #4]
 80041c4:	7dde      	ldrb	r6, [r3, #23]
 80041c6:	2eff      	cmp	r6, #255	; 0xff
 80041c8:	4605      	mov	r5, r0
 80041ca:	d004      	beq.n	80041d6 <RDMHandler::GetSensorDefinition(unsigned short)+0x16>
 80041cc:	4b25      	ldr	r3, [pc, #148]	; (8004264 <RDMHandler::GetSensorDefinition(unsigned short)+0xa4>)
 80041ce:	6818      	ldr	r0, [r3, #0]
 80041d0:	7903      	ldrb	r3, [r0, #4]
 80041d2:	42b3      	cmp	r3, r6
 80041d4:	d805      	bhi.n	80041e2 <RDMHandler::GetSensorDefinition(unsigned short)+0x22>
 80041d6:	4628      	mov	r0, r5
 80041d8:	2106      	movs	r1, #6
 80041da:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80041de:	f7ff bec1 	b.w	8003f64 <RDMHandler::RespondMessageNack(unsigned short)>
 80041e2:	4631      	mov	r1, r6
 80041e4:	68ac      	ldr	r4, [r5, #8]
 80041e6:	f7fd fdcd 	bl	8001d84 <RDMSensors::GetDefintion(unsigned char)>
 80041ea:	7802      	ldrb	r2, [r0, #0]
 80041ec:	42b2      	cmp	r2, r6
 80041ee:	4603      	mov	r3, r0
 80041f0:	d1f1      	bne.n	80041d6 <RDMHandler::GetSensorDefinition(unsigned short)+0x16>
 80041f2:	7622      	strb	r2, [r4, #24]
 80041f4:	7842      	ldrb	r2, [r0, #1]
 80041f6:	7662      	strb	r2, [r4, #25]
 80041f8:	7882      	ldrb	r2, [r0, #2]
 80041fa:	76a2      	strb	r2, [r4, #26]
 80041fc:	78c2      	ldrb	r2, [r0, #3]
 80041fe:	76e2      	strb	r2, [r4, #27]
 8004200:	f990 2005 	ldrsb.w	r2, [r0, #5]
 8004204:	7722      	strb	r2, [r4, #28]
 8004206:	8882      	ldrh	r2, [r0, #4]
 8004208:	7762      	strb	r2, [r4, #29]
 800420a:	f990 2007 	ldrsb.w	r2, [r0, #7]
 800420e:	77a2      	strb	r2, [r4, #30]
 8004210:	88c2      	ldrh	r2, [r0, #6]
 8004212:	77e2      	strb	r2, [r4, #31]
 8004214:	f990 2009 	ldrsb.w	r2, [r0, #9]
 8004218:	f884 2020 	strb.w	r2, [r4, #32]
 800421c:	8902      	ldrh	r2, [r0, #8]
 800421e:	f884 2021 	strb.w	r2, [r4, #33]	; 0x21
 8004222:	f990 200b 	ldrsb.w	r2, [r0, #11]
 8004226:	f884 2022 	strb.w	r2, [r4, #34]	; 0x22
 800422a:	8942      	ldrh	r2, [r0, #10]
 800422c:	f884 2023 	strb.w	r2, [r4, #35]	; 0x23
 8004230:	4621      	mov	r1, r4
 8004232:	f890 202d 	ldrb.w	r2, [r0, #45]	; 0x2d
 8004236:	f801 2f24 	strb.w	r2, [r1, #36]!
 800423a:	300b      	adds	r0, #11
 800423c:	220d      	movs	r2, #13
 800423e:	f893 702c 	ldrb.w	r7, [r3, #44]	; 0x2c
 8004242:	f1a2 060d 	sub.w	r6, r2, #13
 8004246:	42b7      	cmp	r7, r6
 8004248:	dc05      	bgt.n	8004256 <RDMHandler::GetSensorDefinition(unsigned short)+0x96>
 800424a:	75e2      	strb	r2, [r4, #23]
 800424c:	4628      	mov	r0, r5
 800424e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8004252:	f7ff bc5f 	b.w	8003b14 <RDMHandler::RespondMessageAck()>
 8004256:	f810 6f01 	ldrb.w	r6, [r0, #1]!
 800425a:	f801 6f01 	strb.w	r6, [r1, #1]!
 800425e:	3201      	adds	r2, #1
 8004260:	e7ed      	b.n	800423e <RDMHandler::GetSensorDefinition(unsigned short)+0x7e>
 8004262:	bf00      	nop
 8004264:	200001fc 	strdcs	r0, [r0], -ip

08004268 <RDMHandler::GetSensorValue(unsigned short)>:
 8004268:	b570      	push	{r4, r5, r6, lr}
 800426a:	6843      	ldr	r3, [r0, #4]
 800426c:	7d9a      	ldrb	r2, [r3, #22]
 800426e:	2a01      	cmp	r2, #1
 8004270:	4605      	mov	r5, r0
 8004272:	d004      	beq.n	800427e <RDMHandler::GetSensorValue(unsigned short)+0x16>
 8004274:	2101      	movs	r1, #1
 8004276:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800427a:	f7ff be73 	b.w	8003f64 <RDMHandler::RespondMessageNack(unsigned short)>
 800427e:	7dde      	ldrb	r6, [r3, #23]
 8004280:	2eff      	cmp	r6, #255	; 0xff
 8004282:	d004      	beq.n	800428e <RDMHandler::GetSensorValue(unsigned short)+0x26>
 8004284:	4b17      	ldr	r3, [pc, #92]	; (80042e4 <RDMHandler::GetSensorValue(unsigned short)+0x7c>)
 8004286:	6818      	ldr	r0, [r3, #0]
 8004288:	7903      	ldrb	r3, [r0, #4]
 800428a:	42b3      	cmp	r3, r6
 800428c:	d802      	bhi.n	8004294 <RDMHandler::GetSensorValue(unsigned short)+0x2c>
 800428e:	2106      	movs	r1, #6
 8004290:	4628      	mov	r0, r5
 8004292:	e7f0      	b.n	8004276 <RDMHandler::GetSensorValue(unsigned short)+0xe>
 8004294:	4631      	mov	r1, r6
 8004296:	68ac      	ldr	r4, [r5, #8]
 8004298:	f7fd fd79 	bl	8001d8e <RDMSensors::GetValues(unsigned char)>
 800429c:	7a03      	ldrb	r3, [r0, #8]
 800429e:	42b3      	cmp	r3, r6
 80042a0:	d1f5      	bne.n	800428e <RDMHandler::GetSensorValue(unsigned short)+0x26>
 80042a2:	2309      	movs	r3, #9
 80042a4:	75e3      	strb	r3, [r4, #23]
 80042a6:	2321      	movs	r3, #33	; 0x21
 80042a8:	70a3      	strb	r3, [r4, #2]
 80042aa:	7a03      	ldrb	r3, [r0, #8]
 80042ac:	7623      	strb	r3, [r4, #24]
 80042ae:	f990 3001 	ldrsb.w	r3, [r0, #1]
 80042b2:	7663      	strb	r3, [r4, #25]
 80042b4:	8803      	ldrh	r3, [r0, #0]
 80042b6:	76a3      	strb	r3, [r4, #26]
 80042b8:	f990 3003 	ldrsb.w	r3, [r0, #3]
 80042bc:	76e3      	strb	r3, [r4, #27]
 80042be:	8843      	ldrh	r3, [r0, #2]
 80042c0:	7723      	strb	r3, [r4, #28]
 80042c2:	f990 3005 	ldrsb.w	r3, [r0, #5]
 80042c6:	7763      	strb	r3, [r4, #29]
 80042c8:	8883      	ldrh	r3, [r0, #4]
 80042ca:	77a3      	strb	r3, [r4, #30]
 80042cc:	f990 3007 	ldrsb.w	r3, [r0, #7]
 80042d0:	77e3      	strb	r3, [r4, #31]
 80042d2:	88c3      	ldrh	r3, [r0, #6]
 80042d4:	f884 3020 	strb.w	r3, [r4, #32]
 80042d8:	4628      	mov	r0, r5
 80042da:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80042de:	f7ff bc19 	b.w	8003b14 <RDMHandler::RespondMessageAck()>
 80042e2:	bf00      	nop
 80042e4:	200001fc 	strdcs	r0, [r0], -ip

080042e8 <RDMHandler::SetSensorValue(bool, unsigned short)>:
 80042e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80042ec:	6843      	ldr	r3, [r0, #4]
 80042ee:	7d9a      	ldrb	r2, [r3, #22]
 80042f0:	2a01      	cmp	r2, #1
 80042f2:	4606      	mov	r6, r0
 80042f4:	460d      	mov	r5, r1
 80042f6:	d004      	beq.n	8004302 <RDMHandler::SetSensorValue(bool, unsigned short)+0x1a>
 80042f8:	2101      	movs	r1, #1
 80042fa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80042fe:	f7ff be31 	b.w	8003f64 <RDMHandler::RespondMessageNack(unsigned short)>
 8004302:	7ddf      	ldrb	r7, [r3, #23]
 8004304:	f8df 8090 	ldr.w	r8, [pc, #144]	; 8004398 <RDMHandler::SetSensorValue(bool, unsigned short)+0xb0>
 8004308:	2fff      	cmp	r7, #255	; 0xff
 800430a:	f8d8 3000 	ldr.w	r3, [r8]
 800430e:	d004      	beq.n	800431a <RDMHandler::SetSensorValue(bool, unsigned short)+0x32>
 8004310:	791a      	ldrb	r2, [r3, #4]
 8004312:	42ba      	cmp	r2, r7
 8004314:	d801      	bhi.n	800431a <RDMHandler::SetSensorValue(bool, unsigned short)+0x32>
 8004316:	2106      	movs	r1, #6
 8004318:	e7ef      	b.n	80042fa <RDMHandler::SetSensorValue(bool, unsigned short)+0x12>
 800431a:	4639      	mov	r1, r7
 800431c:	4618      	mov	r0, r3
 800431e:	f7fd fd3b 	bl	8001d98 <RDMSensors::SetValues(unsigned char)>
 8004322:	bbb5      	cbnz	r5, 8004392 <RDMHandler::SetSensorValue(bool, unsigned short)+0xaa>
 8004324:	2fff      	cmp	r7, #255	; 0xff
 8004326:	68b4      	ldr	r4, [r6, #8]
 8004328:	d112      	bne.n	8004350 <RDMHandler::SetSensorValue(bool, unsigned short)+0x68>
 800432a:	2309      	movs	r3, #9
 800432c:	75e3      	strb	r3, [r4, #23]
 800432e:	2321      	movs	r3, #33	; 0x21
 8004330:	70a3      	strb	r3, [r4, #2]
 8004332:	7625      	strb	r5, [r4, #24]
 8004334:	7665      	strb	r5, [r4, #25]
 8004336:	76a5      	strb	r5, [r4, #26]
 8004338:	76e5      	strb	r5, [r4, #27]
 800433a:	7725      	strb	r5, [r4, #28]
 800433c:	7765      	strb	r5, [r4, #29]
 800433e:	77a5      	strb	r5, [r4, #30]
 8004340:	77e5      	strb	r5, [r4, #31]
 8004342:	f884 5020 	strb.w	r5, [r4, #32]
 8004346:	4630      	mov	r0, r6
 8004348:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800434c:	f7ff bbe2 	b.w	8003b14 <RDMHandler::RespondMessageAck()>
 8004350:	f8d8 0000 	ldr.w	r0, [r8]
 8004354:	4639      	mov	r1, r7
 8004356:	f7fd fd1a 	bl	8001d8e <RDMSensors::GetValues(unsigned char)>
 800435a:	2309      	movs	r3, #9
 800435c:	75e3      	strb	r3, [r4, #23]
 800435e:	2321      	movs	r3, #33	; 0x21
 8004360:	70a3      	strb	r3, [r4, #2]
 8004362:	7a03      	ldrb	r3, [r0, #8]
 8004364:	7623      	strb	r3, [r4, #24]
 8004366:	f990 3001 	ldrsb.w	r3, [r0, #1]
 800436a:	7663      	strb	r3, [r4, #25]
 800436c:	8803      	ldrh	r3, [r0, #0]
 800436e:	76a3      	strb	r3, [r4, #26]
 8004370:	f990 3003 	ldrsb.w	r3, [r0, #3]
 8004374:	76e3      	strb	r3, [r4, #27]
 8004376:	8843      	ldrh	r3, [r0, #2]
 8004378:	7723      	strb	r3, [r4, #28]
 800437a:	f990 3005 	ldrsb.w	r3, [r0, #5]
 800437e:	7763      	strb	r3, [r4, #29]
 8004380:	8883      	ldrh	r3, [r0, #4]
 8004382:	77a3      	strb	r3, [r4, #30]
 8004384:	f990 3007 	ldrsb.w	r3, [r0, #7]
 8004388:	77e3      	strb	r3, [r4, #31]
 800438a:	88c3      	ldrh	r3, [r0, #6]
 800438c:	f884 3020 	strb.w	r3, [r4, #32]
 8004390:	e7d9      	b.n	8004346 <RDMHandler::SetSensorValue(bool, unsigned short)+0x5e>
 8004392:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004396:	bf00      	nop
 8004398:	200001fc 	strdcs	r0, [r0], -ip

0800439c <RDMHandler::SetRecordSensors(bool, unsigned short)>:
 800439c:	b538      	push	{r3, r4, r5, lr}
 800439e:	6843      	ldr	r3, [r0, #4]
 80043a0:	7d9a      	ldrb	r2, [r3, #22]
 80043a2:	2a01      	cmp	r2, #1
 80043a4:	4604      	mov	r4, r0
 80043a6:	460d      	mov	r5, r1
 80043a8:	d004      	beq.n	80043b4 <RDMHandler::SetRecordSensors(bool, unsigned short)+0x18>
 80043aa:	2101      	movs	r1, #1
 80043ac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80043b0:	f7ff bdd8 	b.w	8003f64 <RDMHandler::RespondMessageNack(unsigned short)>
 80043b4:	7dd9      	ldrb	r1, [r3, #23]
 80043b6:	4b0b      	ldr	r3, [pc, #44]	; (80043e4 <RDMHandler::SetRecordSensors(bool, unsigned short)+0x48>)
 80043b8:	6818      	ldr	r0, [r3, #0]
 80043ba:	29ff      	cmp	r1, #255	; 0xff
 80043bc:	7903      	ldrb	r3, [r0, #4]
 80043be:	d103      	bne.n	80043c8 <RDMHandler::SetRecordSensors(bool, unsigned short)+0x2c>
 80043c0:	b923      	cbnz	r3, 80043cc <RDMHandler::SetRecordSensors(bool, unsigned short)+0x30>
 80043c2:	2106      	movs	r1, #6
 80043c4:	4620      	mov	r0, r4
 80043c6:	e7f1      	b.n	80043ac <RDMHandler::SetRecordSensors(bool, unsigned short)+0x10>
 80043c8:	4299      	cmp	r1, r3
 80043ca:	d2fa      	bcs.n	80043c2 <RDMHandler::SetRecordSensors(bool, unsigned short)+0x26>
 80043cc:	f7fd fcfb 	bl	8001dc6 <RDMSensors::SetRecord(unsigned char)>
 80043d0:	b935      	cbnz	r5, 80043e0 <RDMHandler::SetRecordSensors(bool, unsigned short)+0x44>
 80043d2:	68a3      	ldr	r3, [r4, #8]
 80043d4:	75dd      	strb	r5, [r3, #23]
 80043d6:	4620      	mov	r0, r4
 80043d8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80043dc:	f7ff bb9a 	b.w	8003b14 <RDMHandler::RespondMessageAck()>
 80043e0:	bd38      	pop	{r3, r4, r5, pc}
 80043e2:	bf00      	nop
 80043e4:	200001fc 	strdcs	r0, [r0], -ip

080043e8 <RDMHandler::SetDeviceHours(bool, unsigned short)>:
 80043e8:	2104      	movs	r1, #4
 80043ea:	f7ff bdbb 	b.w	8003f64 <RDMHandler::RespondMessageNack(unsigned short)>
	...

080043f0 <RDMHandler::SetDisplayInvert(bool, unsigned short)>:
 80043f0:	b538      	push	{r3, r4, r5, lr}
 80043f2:	6843      	ldr	r3, [r0, #4]
 80043f4:	7d9a      	ldrb	r2, [r3, #22]
 80043f6:	2a01      	cmp	r2, #1
 80043f8:	4604      	mov	r4, r0
 80043fa:	d004      	beq.n	8004406 <RDMHandler::SetDisplayInvert(bool, unsigned short)+0x16>
 80043fc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004400:	2101      	movs	r1, #1
 8004402:	f7ff bdaf 	b.w	8003f64 <RDMHandler::RespondMessageNack(unsigned short)>
 8004406:	7ddd      	ldrb	r5, [r3, #23]
 8004408:	2d02      	cmp	r5, #2
 800440a:	d102      	bne.n	8004412 <RDMHandler::SetDisplayInvert(bool, unsigned short)+0x22>
 800440c:	2106      	movs	r1, #6
 800440e:	f7ff fda9 	bl	8003f64 <RDMHandler::RespondMessageNack(unsigned short)>
 8004412:	1e6b      	subs	r3, r5, #1
 8004414:	4259      	negs	r1, r3
 8004416:	4159      	adcs	r1, r3
 8004418:	4b07      	ldr	r3, [pc, #28]	; (8004438 <RDMHandler::SetDisplayInvert(bool, unsigned short)+0x48>)
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	6998      	ldr	r0, [r3, #24]
 800441e:	b110      	cbz	r0, 8004426 <RDMHandler::SetDisplayInvert(bool, unsigned short)+0x36>
 8004420:	6803      	ldr	r3, [r0, #0]
 8004422:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004424:	4798      	blx	r3
 8004426:	68a3      	ldr	r3, [r4, #8]
 8004428:	2200      	movs	r2, #0
 800442a:	75da      	strb	r2, [r3, #23]
 800442c:	4620      	mov	r0, r4
 800442e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004432:	f7ff bb6f 	b.w	8003b14 <RDMHandler::RespondMessageAck()>
 8004436:	bf00      	nop
 8004438:	200016f0 	strdcs	r1, [r0], -r0

0800443c <RDMHandler::SetDisplayLevel(bool, unsigned short)>:
 800443c:	b570      	push	{r4, r5, r6, lr}
 800443e:	6843      	ldr	r3, [r0, #4]
 8004440:	7d99      	ldrb	r1, [r3, #22]
 8004442:	2901      	cmp	r1, #1
 8004444:	4604      	mov	r4, r0
 8004446:	d004      	beq.n	8004452 <RDMHandler::SetDisplayLevel(bool, unsigned short)+0x16>
 8004448:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800444c:	2101      	movs	r1, #1
 800444e:	f7ff bd89 	b.w	8003f64 <RDMHandler::RespondMessageNack(unsigned short)>
 8004452:	4e0b      	ldr	r6, [pc, #44]	; (8004480 <RDMHandler::SetDisplayLevel(bool, unsigned short)+0x44>)
 8004454:	7ddd      	ldrb	r5, [r3, #23]
 8004456:	6830      	ldr	r0, [r6, #0]
 8004458:	b105      	cbz	r5, 800445c <RDMHandler::SetDisplayLevel(bool, unsigned short)+0x20>
 800445a:	2100      	movs	r1, #0
 800445c:	f7fc f952 	bl	8000704 <Display::SetSleep(bool)>
 8004460:	6833      	ldr	r3, [r6, #0]
 8004462:	6998      	ldr	r0, [r3, #24]
 8004464:	b118      	cbz	r0, 800446e <RDMHandler::SetDisplayLevel(bool, unsigned short)+0x32>
 8004466:	6803      	ldr	r3, [r0, #0]
 8004468:	4629      	mov	r1, r5
 800446a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800446c:	4798      	blx	r3
 800446e:	68a3      	ldr	r3, [r4, #8]
 8004470:	2200      	movs	r2, #0
 8004472:	75da      	strb	r2, [r3, #23]
 8004474:	4620      	mov	r0, r4
 8004476:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800447a:	f7ff bb4b 	b.w	8003b14 <RDMHandler::RespondMessageAck()>
 800447e:	bf00      	nop
 8004480:	200016f0 	strdcs	r1, [r0], -r0

08004484 <RDMHandler::SetRealTimeClock(bool, unsigned short)>:
 8004484:	b510      	push	{r4, lr}
 8004486:	6843      	ldr	r3, [r0, #4]
 8004488:	7d9a      	ldrb	r2, [r3, #22]
 800448a:	2a07      	cmp	r2, #7
 800448c:	b08a      	sub	sp, #40	; 0x28
 800448e:	4604      	mov	r4, r0
 8004490:	d005      	beq.n	800449e <RDMHandler::SetRealTimeClock(bool, unsigned short)+0x1a>
 8004492:	2101      	movs	r1, #1
 8004494:	b00a      	add	sp, #40	; 0x28
 8004496:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800449a:	f7ff bd63 	b.w	8003f64 <RDMHandler::RespondMessageNack(unsigned short)>
 800449e:	7dd8      	ldrb	r0, [r3, #23]
 80044a0:	7e1a      	ldrb	r2, [r3, #24]
 80044a2:	eb02 2200 	add.w	r2, r2, r0, lsl #8
 80044a6:	f2a2 726c 	subw	r2, r2, #1900	; 0x76c
 80044aa:	9206      	str	r2, [sp, #24]
 80044ac:	7e5a      	ldrb	r2, [r3, #25]
 80044ae:	3a01      	subs	r2, #1
 80044b0:	9205      	str	r2, [sp, #20]
 80044b2:	7e9a      	ldrb	r2, [r3, #26]
 80044b4:	9204      	str	r2, [sp, #16]
 80044b6:	7eda      	ldrb	r2, [r3, #27]
 80044b8:	9203      	str	r2, [sp, #12]
 80044ba:	7f1a      	ldrb	r2, [r3, #28]
 80044bc:	7f5b      	ldrb	r3, [r3, #29]
 80044be:	9202      	str	r2, [sp, #8]
 80044c0:	9301      	str	r3, [sp, #4]
 80044c2:	b979      	cbnz	r1, 80044e4 <RDMHandler::SetRealTimeClock(bool, unsigned short)+0x60>
 80044c4:	4b08      	ldr	r3, [pc, #32]	; (80044e8 <RDMHandler::SetRealTimeClock(bool, unsigned short)+0x64>)
 80044c6:	a901      	add	r1, sp, #4
 80044c8:	6818      	ldr	r0, [r3, #0]
 80044ca:	f003 fa4f 	bl	800796c <Hardware::SetTime(tm const*)>
 80044ce:	b918      	cbnz	r0, 80044d8 <RDMHandler::SetRealTimeClock(bool, unsigned short)+0x54>
 80044d0:	2104      	movs	r1, #4
 80044d2:	4620      	mov	r0, r4
 80044d4:	f7ff fd46 	bl	8003f64 <RDMHandler::RespondMessageNack(unsigned short)>
 80044d8:	68a3      	ldr	r3, [r4, #8]
 80044da:	2200      	movs	r2, #0
 80044dc:	75da      	strb	r2, [r3, #23]
 80044de:	4620      	mov	r0, r4
 80044e0:	f7ff fb18 	bl	8003b14 <RDMHandler::RespondMessageAck()>
 80044e4:	b00a      	add	sp, #40	; 0x28
 80044e6:	bd10      	pop	{r4, pc}
 80044e8:	200017e0 	andcs	r1, r0, r0, ror #15

080044ec <RDMHandler::SetPowerState(bool, unsigned short)>:
 80044ec:	6842      	ldr	r2, [r0, #4]
 80044ee:	7d91      	ldrb	r1, [r2, #22]
 80044f0:	2901      	cmp	r1, #1
 80044f2:	d002      	beq.n	80044fa <RDMHandler::SetPowerState(bool, unsigned short)+0xe>
 80044f4:	2101      	movs	r1, #1
 80044f6:	f7ff bd35 	b.w	8003f64 <RDMHandler::RespondMessageNack(unsigned short)>
 80044fa:	7dd1      	ldrb	r1, [r2, #23]
 80044fc:	1eca      	subs	r2, r1, #3
 80044fe:	b2d2      	uxtb	r2, r2
 8004500:	2afb      	cmp	r2, #251	; 0xfb
 8004502:	d801      	bhi.n	8004508 <RDMHandler::SetPowerState(bool, unsigned short)+0x1c>
 8004504:	2106      	movs	r1, #6
 8004506:	e7f6      	b.n	80044f6 <RDMHandler::SetPowerState(bool, unsigned short)+0xa>
 8004508:	29ff      	cmp	r1, #255	; 0xff
 800450a:	6883      	ldr	r3, [r0, #8]
 800450c:	d103      	bne.n	8004516 <RDMHandler::SetPowerState(bool, unsigned short)+0x2a>
 800450e:	2200      	movs	r2, #0
 8004510:	75da      	strb	r2, [r3, #23]
 8004512:	f7ff baff 	b.w	8003b14 <RDMHandler::RespondMessageAck()>
 8004516:	2104      	movs	r1, #4
 8004518:	e7ed      	b.n	80044f6 <RDMHandler::SetPowerState(bool, unsigned short)+0xa>

0800451a <RDMHandler::SetPerformSelfTest(bool, unsigned short)>:
 800451a:	b510      	push	{r4, lr}
 800451c:	6843      	ldr	r3, [r0, #4]
 800451e:	7d9a      	ldrb	r2, [r3, #22]
 8004520:	2a01      	cmp	r2, #1
 8004522:	4604      	mov	r4, r0
 8004524:	d004      	beq.n	8004530 <RDMHandler::SetPerformSelfTest(bool, unsigned short)+0x16>
 8004526:	2101      	movs	r1, #1
 8004528:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800452c:	f7ff bd1a 	b.w	8003f64 <RDMHandler::RespondMessageNack(unsigned short)>
 8004530:	7dd8      	ldrb	r0, [r3, #23]
 8004532:	f7fc fd61 	bl	8000ff8 <rdm::selftest::Set(unsigned char)>
 8004536:	b910      	cbnz	r0, 800453e <RDMHandler::SetPerformSelfTest(bool, unsigned short)+0x24>
 8004538:	2106      	movs	r1, #6
 800453a:	4620      	mov	r0, r4
 800453c:	e7f4      	b.n	8004528 <RDMHandler::SetPerformSelfTest(bool, unsigned short)+0xe>
 800453e:	68a3      	ldr	r3, [r4, #8]
 8004540:	2200      	movs	r2, #0
 8004542:	75da      	strb	r2, [r3, #23]
 8004544:	4620      	mov	r0, r4
 8004546:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800454a:	f7ff bae3 	b.w	8003b14 <RDMHandler::RespondMessageAck()>

0800454e <RDMHandler::GetSelfTestDescription(unsigned short)>:
 800454e:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004550:	6845      	ldr	r5, [r0, #4]
 8004552:	4604      	mov	r4, r0
 8004554:	a901      	add	r1, sp, #4
 8004556:	7de8      	ldrb	r0, [r5, #23]
 8004558:	f7fc fd82 	bl	8001060 <rdm::selftest::GetDescription(unsigned char, unsigned int&)>
 800455c:	4603      	mov	r3, r0
 800455e:	b928      	cbnz	r0, 800456c <RDMHandler::GetSelfTestDescription(unsigned short)+0x1e>
 8004560:	2106      	movs	r1, #6
 8004562:	4620      	mov	r0, r4
 8004564:	f7ff fcfe 	bl	8003f64 <RDMHandler::RespondMessageNack(unsigned short)>
 8004568:	b003      	add	sp, #12
 800456a:	bd30      	pop	{r4, r5, pc}
 800456c:	9a01      	ldr	r2, [sp, #4]
 800456e:	2a20      	cmp	r2, #32
 8004570:	bf84      	itt	hi
 8004572:	2220      	movhi	r2, #32
 8004574:	9201      	strhi	r2, [sp, #4]
 8004576:	9901      	ldr	r1, [sp, #4]
 8004578:	68a2      	ldr	r2, [r4, #8]
 800457a:	1c48      	adds	r0, r1, #1
 800457c:	75d0      	strb	r0, [r2, #23]
 800457e:	7de8      	ldrb	r0, [r5, #23]
 8004580:	f802 0f18 	strb.w	r0, [r2, #24]!
 8004584:	4419      	add	r1, r3
 8004586:	428b      	cmp	r3, r1
 8004588:	d103      	bne.n	8004592 <RDMHandler::GetSelfTestDescription(unsigned short)+0x44>
 800458a:	4620      	mov	r0, r4
 800458c:	f7ff fac2 	bl	8003b14 <RDMHandler::RespondMessageAck()>
 8004590:	e7ea      	b.n	8004568 <RDMHandler::GetSelfTestDescription(unsigned short)+0x1a>
 8004592:	f813 0b01 	ldrb.w	r0, [r3], #1
 8004596:	f802 0f01 	strb.w	r0, [r2, #1]!
 800459a:	e7f4      	b.n	8004586 <RDMHandler::GetSelfTestDescription(unsigned short)+0x38>

0800459c <RDMHandler::GetSlotDescription(unsigned short)>:
 800459c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800459e:	4a1c      	ldr	r2, [pc, #112]	; (8004610 <RDMHandler::GetSlotDescription(unsigned short)+0x74>)
 80045a0:	6846      	ldr	r6, [r0, #4]
 80045a2:	4604      	mov	r4, r0
 80045a4:	7df3      	ldrb	r3, [r6, #23]
 80045a6:	7e35      	ldrb	r5, [r6, #24]
 80045a8:	6810      	ldr	r0, [r2, #0]
 80045aa:	b939      	cbnz	r1, 80045bc <RDMHandler::GetSlotDescription(unsigned short)+0x20>
 80045ac:	eb05 2503 	add.w	r5, r5, r3, lsl #8
 80045b0:	b2ad      	uxth	r5, r5
 80045b2:	466a      	mov	r2, sp
 80045b4:	4629      	mov	r1, r5
 80045b6:	f7ff f9a3 	bl	8003900 <RDMDeviceResponder::GetSlotInfo(unsigned short, unsigned short, lightset::SlotInfo&) [clone .part.0]>
 80045ba:	b928      	cbnz	r0, 80045c8 <RDMHandler::GetSlotDescription(unsigned short)+0x2c>
 80045bc:	2106      	movs	r1, #6
 80045be:	4620      	mov	r0, r4
 80045c0:	f7ff fcd0 	bl	8003f64 <RDMHandler::RespondMessageNack(unsigned short)>
 80045c4:	b002      	add	sp, #8
 80045c6:	bd70      	pop	{r4, r5, r6, pc}
 80045c8:	f8bd 1000 	ldrh.w	r1, [sp]
 80045cc:	aa01      	add	r2, sp, #4
 80045ce:	4628      	mov	r0, r5
 80045d0:	f000 fa3e 	bl	8004a50 <RDMSlotInfo::GetCategoryText(unsigned short, unsigned short, unsigned int&)>
 80045d4:	4603      	mov	r3, r0
 80045d6:	2800      	cmp	r0, #0
 80045d8:	d0f0      	beq.n	80045bc <RDMHandler::GetSlotDescription(unsigned short)+0x20>
 80045da:	9a01      	ldr	r2, [sp, #4]
 80045dc:	2a20      	cmp	r2, #32
 80045de:	bf84      	itt	hi
 80045e0:	2220      	movhi	r2, #32
 80045e2:	9201      	strhi	r2, [sp, #4]
 80045e4:	9901      	ldr	r1, [sp, #4]
 80045e6:	68a2      	ldr	r2, [r4, #8]
 80045e8:	1c88      	adds	r0, r1, #2
 80045ea:	75d0      	strb	r0, [r2, #23]
 80045ec:	7df0      	ldrb	r0, [r6, #23]
 80045ee:	7610      	strb	r0, [r2, #24]
 80045f0:	7e30      	ldrb	r0, [r6, #24]
 80045f2:	f802 0f19 	strb.w	r0, [r2, #25]!
 80045f6:	4419      	add	r1, r3
 80045f8:	428b      	cmp	r3, r1
 80045fa:	d103      	bne.n	8004604 <RDMHandler::GetSlotDescription(unsigned short)+0x68>
 80045fc:	4620      	mov	r0, r4
 80045fe:	f7ff fa89 	bl	8003b14 <RDMHandler::RespondMessageAck()>
 8004602:	e7df      	b.n	80045c4 <RDMHandler::GetSlotDescription(unsigned short)+0x28>
 8004604:	f813 0b01 	ldrb.w	r0, [r3], #1
 8004608:	f802 0f01 	strb.w	r0, [r2, #1]!
 800460c:	e7f4      	b.n	80045f8 <RDMHandler::GetSlotDescription(unsigned short)+0x5c>
 800460e:	bf00      	nop
 8004610:	20000644 	andcs	r0, r0, r4, asr #12

08004614 <RDMHandler::SetFactoryDefaults(bool, unsigned short)>:
 8004614:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004616:	6843      	ldr	r3, [r0, #4]
 8004618:	7d9b      	ldrb	r3, [r3, #22]
 800461a:	4605      	mov	r5, r0
 800461c:	460e      	mov	r6, r1
 800461e:	b12b      	cbz	r3, 800462c <RDMHandler::SetFactoryDefaults(bool, unsigned short)+0x18>
 8004620:	2101      	movs	r1, #1
 8004622:	b003      	add	sp, #12
 8004624:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8004628:	f7ff bc9c 	b.w	8003f64 <RDMHandler::RespondMessageNack(unsigned short)>
 800462c:	4b26      	ldr	r3, [pc, #152]	; (80046c8 <RDMHandler::SetFactoryDefaults(bool, unsigned short)+0xb4>)
 800462e:	681c      	ldr	r4, [r3, #0]
 8004630:	f104 0356 	add.w	r3, r4, #86	; 0x56
 8004634:	9300      	str	r3, [sp, #0]
 8004636:	1d20      	adds	r0, r4, #4
 8004638:	f894 3076 	ldrb.w	r3, [r4, #118]	; 0x76
 800463c:	f88d 3004 	strb.w	r3, [sp, #4]
 8004640:	4669      	mov	r1, sp
 8004642:	f7ff f974 	bl	800392e <RDMDevice::SetLabel(TRDMDeviceInfoData const*)>
 8004646:	f06f 070d 	mvn.w	r7, #13
 800464a:	f894 3076 	ldrb.w	r3, [r4, #118]	; 0x76
 800464e:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
 8004652:	f104 020e 	add.w	r2, r4, #14
 8004656:	1b3f      	subs	r7, r7, r4
 8004658:	18b9      	adds	r1, r7, r2
 800465a:	4288      	cmp	r0, r1
 800465c:	d82c      	bhi.n	80046b8 <RDMHandler::SetFactoryDefaults(bool, unsigned short)+0xa4>
 800465e:	f8a4 3078 	strh.w	r3, [r4, #120]	; 0x78
 8004662:	2201      	movs	r2, #1
 8004664:	2100      	movs	r1, #0
 8004666:	4620      	mov	r0, r4
 8004668:	f7ff f9c0 	bl	80039ec <RDMDeviceResponder::SetPersonalityCurrent(unsigned short, unsigned char)>
 800466c:	f8b4 20c8 	ldrh.w	r2, [r4, #200]	; 0xc8
 8004670:	2100      	movs	r1, #0
 8004672:	4620      	mov	r0, r4
 8004674:	f7ff f97d 	bl	8003972 <RDMDeviceResponder::SetDmxStartAddress(unsigned short, unsigned short)>
 8004678:	2213      	movs	r2, #19
 800467a:	f104 019d 	add.w	r1, r4, #157	; 0x9d
 800467e:	f104 00b0 	add.w	r0, r4, #176	; 0xb0
 8004682:	f7ff f94a 	bl	800391a <memcpy.isra.0>
 8004686:	f104 008c 	add.w	r0, r4, #140	; 0x8c
 800468a:	f7fe fa5b 	bl	8002b44 <RDMSubDevices::SetFactoryDefaults()>
 800468e:	f894 30ac 	ldrb.w	r3, [r4, #172]	; 0xac
 8004692:	f894 20a9 	ldrb.w	r2, [r4, #169]	; 0xa9
 8004696:	4413      	add	r3, r2
 8004698:	f8a4 30c6 	strh.w	r3, [r4, #198]	; 0xc6
 800469c:	2301      	movs	r3, #1
 800469e:	f884 30c5 	strb.w	r3, [r4, #197]	; 0xc5
 80046a2:	f7fc fbbb 	bl	8000e1c <rdm::device::responder::factorydefaults()>
 80046a6:	b966      	cbnz	r6, 80046c2 <RDMHandler::SetFactoryDefaults(bool, unsigned short)+0xae>
 80046a8:	68ab      	ldr	r3, [r5, #8]
 80046aa:	4628      	mov	r0, r5
 80046ac:	75de      	strb	r6, [r3, #23]
 80046ae:	b003      	add	sp, #12
 80046b0:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 80046b4:	f7ff ba2e 	b.w	8003b14 <RDMHandler::RespondMessageAck()>
 80046b8:	f812 1f01 	ldrb.w	r1, [r2, #1]!
 80046bc:	440b      	add	r3, r1
 80046be:	b29b      	uxth	r3, r3
 80046c0:	e7ca      	b.n	8004658 <RDMHandler::SetFactoryDefaults(bool, unsigned short)+0x44>
 80046c2:	b003      	add	sp, #12
 80046c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80046c6:	bf00      	nop
 80046c8:	20000644 	andcs	r0, r0, r4, asr #12

080046cc <RDMHandler::SetDeviceLabel(bool, unsigned short)>:
 80046cc:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80046ce:	6845      	ldr	r5, [r0, #4]
 80046d0:	7dab      	ldrb	r3, [r5, #22]
 80046d2:	2b20      	cmp	r3, #32
 80046d4:	460e      	mov	r6, r1
 80046d6:	4604      	mov	r4, r0
 80046d8:	4611      	mov	r1, r2
 80046da:	d905      	bls.n	80046e8 <RDMHandler::SetDeviceLabel(bool, unsigned short)+0x1c>
 80046dc:	2101      	movs	r1, #1
 80046de:	b002      	add	sp, #8
 80046e0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80046e4:	f7ff bc3e 	b.w	8003f64 <RDMHandler::RespondMessageNack(unsigned short)>
 80046e8:	4a0d      	ldr	r2, [pc, #52]	; (8004720 <RDMHandler::SetDeviceLabel(bool, unsigned short)+0x54>)
 80046ea:	6810      	ldr	r0, [r2, #0]
 80046ec:	f105 0217 	add.w	r2, r5, #23
 80046f0:	b159      	cbz	r1, 800470a <RDMHandler::SetDeviceLabel(bool, unsigned short)+0x3e>
 80046f2:	308c      	adds	r0, #140	; 0x8c
 80046f4:	f7fe f98f 	bl	8002a16 <RDMSubDevices::SetLabel(unsigned short, char const*, unsigned char)>
 80046f8:	b97e      	cbnz	r6, 800471a <RDMHandler::SetDeviceLabel(bool, unsigned short)+0x4e>
 80046fa:	68a3      	ldr	r3, [r4, #8]
 80046fc:	4620      	mov	r0, r4
 80046fe:	75de      	strb	r6, [r3, #23]
 8004700:	b002      	add	sp, #8
 8004702:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8004706:	f7ff ba05 	b.w	8003b14 <RDMHandler::RespondMessageAck()>
 800470a:	4669      	mov	r1, sp
 800470c:	3004      	adds	r0, #4
 800470e:	9200      	str	r2, [sp, #0]
 8004710:	f88d 3004 	strb.w	r3, [sp, #4]
 8004714:	f7ff f90b 	bl	800392e <RDMDevice::SetLabel(TRDMDeviceInfoData const*)>
 8004718:	e7ee      	b.n	80046f8 <RDMHandler::SetDeviceLabel(bool, unsigned short)+0x2c>
 800471a:	b002      	add	sp, #8
 800471c:	bd70      	pop	{r4, r5, r6, pc}
 800471e:	bf00      	nop
 8004720:	20000644 	andcs	r0, r0, r4, asr #12

08004724 <RDMHandler::Handlers(bool, unsigned char, unsigned short, unsigned char, unsigned short)>:
 8004724:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004728:	4616      	mov	r6, r2
 800472a:	4604      	mov	r4, r0
 800472c:	f006 00ef 	and.w	r0, r6, #239	; 0xef
 8004730:	2700      	movs	r7, #0
 8004732:	2820      	cmp	r0, #32
 8004734:	f89d 801c 	ldrb.w	r8, [sp, #28]
 8004738:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 800473c:	46be      	mov	lr, r7
 800473e:	d005      	beq.n	800474c <RDMHandler::Handlers(bool, unsigned char, unsigned short, unsigned char, unsigned short)+0x28>
 8004740:	2105      	movs	r1, #5
 8004742:	4620      	mov	r0, r4
 8004744:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004748:	f7ff bc0c 	b.w	8003f64 <RDMHandler::RespondMessageNack(unsigned short)>
 800474c:	482b      	ldr	r0, [pc, #172]	; (80047fc <RDMHandler::Handlers(bool, unsigned char, unsigned short, unsigned char, unsigned short)+0xd8>)
 800474e:	6800      	ldr	r0, [r0, #0]
 8004750:	8880      	ldrh	r0, [r0, #4]
 8004752:	4290      	cmp	r0, r2
 8004754:	d205      	bcs.n	8004762 <RDMHandler::Handlers(bool, unsigned char, unsigned short, unsigned char, unsigned short)+0x3e>
 8004756:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800475a:	4282      	cmp	r2, r0
 800475c:	d001      	beq.n	8004762 <RDMHandler::Handlers(bool, unsigned char, unsigned short, unsigned char, unsigned short)+0x3e>
 800475e:	2109      	movs	r1, #9
 8004760:	e7ef      	b.n	8004742 <RDMHandler::Handlers(bool, unsigned char, unsigned short, unsigned char, unsigned short)+0x1e>
 8004762:	4d27      	ldr	r5, [pc, #156]	; (8004800 <RDMHandler::Handlers(bool, unsigned char, unsigned short, unsigned char, unsigned short)+0xdc>)
 8004764:	f04f 0c1e 	mov.w	ip, #30
 8004768:	2000      	movs	r0, #0
 800476a:	f8b5 9000 	ldrh.w	r9, [r5]
 800476e:	4599      	cmp	r9, r3
 8004770:	bf02      	ittt	eq
 8004772:	7daf      	ldrbeq	r7, [r5, #22]
 8004774:	f895 e017 	ldrbeq.w	lr, [r5, #23]
 8004778:	4628      	moveq	r0, r5
 800477a:	f1bc 0c01 	subs.w	ip, ip, #1
 800477e:	f105 0518 	add.w	r5, r5, #24
 8004782:	d1f2      	bne.n	800476a <RDMHandler::Handlers(bool, unsigned char, unsigned short, unsigned char, unsigned short)+0x46>
 8004784:	b908      	cbnz	r0, 800478a <RDMHandler::Handlers(bool, unsigned char, unsigned short, unsigned char, unsigned short)+0x66>
 8004786:	2100      	movs	r1, #0
 8004788:	e7db      	b.n	8004742 <RDMHandler::Handlers(bool, unsigned char, unsigned short, unsigned char, unsigned short)+0x1e>
 800478a:	7823      	ldrb	r3, [r4, #0]
 800478c:	b193      	cbz	r3, 80047b4 <RDMHandler::Handlers(bool, unsigned char, unsigned short, unsigned char, unsigned short)+0x90>
 800478e:	2f00      	cmp	r7, #0
 8004790:	d0f9      	beq.n	8004786 <RDMHandler::Handlers(bool, unsigned char, unsigned short, unsigned char, unsigned short)+0x62>
 8004792:	2e20      	cmp	r6, #32
 8004794:	d11f      	bne.n	80047d6 <RDMHandler::Handlers(bool, unsigned char, unsigned short, unsigned char, unsigned short)+0xb2>
 8004796:	bb71      	cbnz	r1, 80047f6 <RDMHandler::Handlers(bool, unsigned char, unsigned short, unsigned char, unsigned short)+0xd2>
 8004798:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800479c:	429a      	cmp	r2, r3
 800479e:	d0de      	beq.n	800475e <RDMHandler::Handlers(bool, unsigned char, unsigned short, unsigned char, unsigned short)+0x3a>
 80047a0:	6843      	ldr	r3, [r0, #4]
 80047a2:	b913      	cbnz	r3, 80047aa <RDMHandler::Handlers(bool, unsigned char, unsigned short, unsigned char, unsigned short)+0x86>
 80047a4:	6881      	ldr	r1, [r0, #8]
 80047a6:	07cd      	lsls	r5, r1, #31
 80047a8:	d5ca      	bpl.n	8004740 <RDMHandler::Handlers(bool, unsigned char, unsigned short, unsigned char, unsigned short)+0x1c>
 80047aa:	7d01      	ldrb	r1, [r0, #20]
 80047ac:	4541      	cmp	r1, r8
 80047ae:	d005      	beq.n	80047bc <RDMHandler::Handlers(bool, unsigned char, unsigned short, unsigned char, unsigned short)+0x98>
 80047b0:	2101      	movs	r1, #1
 80047b2:	e7c6      	b.n	8004742 <RDMHandler::Handlers(bool, unsigned char, unsigned short, unsigned char, unsigned short)+0x1e>
 80047b4:	f1be 0f00 	cmp.w	lr, #0
 80047b8:	d1eb      	bne.n	8004792 <RDMHandler::Handlers(bool, unsigned char, unsigned short, unsigned char, unsigned short)+0x6e>
 80047ba:	e7e4      	b.n	8004786 <RDMHandler::Handlers(bool, unsigned char, unsigned short, unsigned char, unsigned short)+0x62>
 80047bc:	6881      	ldr	r1, [r0, #8]
 80047be:	104d      	asrs	r5, r1, #1
 80047c0:	eb04 0061 	add.w	r0, r4, r1, asr #1
 80047c4:	07c9      	lsls	r1, r1, #31
 80047c6:	bf48      	it	mi
 80047c8:	5961      	ldrmi	r1, [r4, r5]
 80047ca:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80047ce:	bf48      	it	mi
 80047d0:	58cb      	ldrmi	r3, [r1, r3]
 80047d2:	4611      	mov	r1, r2
 80047d4:	4718      	bx	r3
 80047d6:	e9d0 3003 	ldrd	r3, r0, [r0, #12]
 80047da:	f000 0501 	and.w	r5, r0, #1
 80047de:	b90b      	cbnz	r3, 80047e4 <RDMHandler::Handlers(bool, unsigned char, unsigned short, unsigned char, unsigned short)+0xc0>
 80047e0:	2d00      	cmp	r5, #0
 80047e2:	d0ad      	beq.n	8004740 <RDMHandler::Handlers(bool, unsigned char, unsigned short, unsigned char, unsigned short)+0x1c>
 80047e4:	1046      	asrs	r6, r0, #1
 80047e6:	eb04 0060 	add.w	r0, r4, r0, asr #1
 80047ea:	b10d      	cbz	r5, 80047f0 <RDMHandler::Handlers(bool, unsigned char, unsigned short, unsigned char, unsigned short)+0xcc>
 80047ec:	59a4      	ldr	r4, [r4, r6]
 80047ee:	58e3      	ldr	r3, [r4, r3]
 80047f0:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80047f4:	4718      	bx	r3
 80047f6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80047fa:	bf00      	nop
 80047fc:	20000200 	andcs	r0, r0, r0, lsl #4
 8004800:	08009cb0 	stmdaeq	r0, {r4, r5, r7, sl, fp, ip, pc}

08004804 <RDMHandler::HandleData(unsigned char const*, unsigned char*)>:
 8004804:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004808:	23ff      	movs	r3, #255	; 0xff
 800480a:	7013      	strb	r3, [r2, #0]
 800480c:	e9c0 1201 	strd	r1, r2, [r0, #4]
 8004810:	b085      	sub	sp, #20
 8004812:	7ccb      	ldrb	r3, [r1, #19]
 8004814:	7d4f      	ldrb	r7, [r1, #21]
 8004816:	9303      	str	r3, [sp, #12]
 8004818:	7d0b      	ldrb	r3, [r1, #20]
 800481a:	f101 0a02 	add.w	sl, r1, #2
 800481e:	eb07 2703 	add.w	r7, r7, r3, lsl #8
 8004822:	4b5c      	ldr	r3, [pc, #368]	; (8004994 <RDMHandler::HandleData(unsigned char const*, unsigned char*)+0x190>)
 8004824:	4606      	mov	r6, r0
 8004826:	460d      	mov	r5, r1
 8004828:	4614      	mov	r4, r2
 800482a:	495b      	ldr	r1, [pc, #364]	; (8004998 <RDMHandler::HandleData(unsigned char const*, unsigned char*)+0x194>)
 800482c:	f8d3 8000 	ldr.w	r8, [r3]
 8004830:	2206      	movs	r2, #6
 8004832:	4650      	mov	r0, sl
 8004834:	f7ff f854 	bl	80038e0 <memcmp>
 8004838:	f108 0905 	add.w	r9, r8, #5
 800483c:	4683      	mov	fp, r0
 800483e:	2202      	movs	r2, #2
 8004840:	4649      	mov	r1, r9
 8004842:	4650      	mov	r0, sl
 8004844:	b2bf      	uxth	r7, r7
 8004846:	f7ff f84b 	bl	80038e0 <memcmp>
 800484a:	b928      	cbnz	r0, 8004858 <RDMHandler::HandleData(unsigned char const*, unsigned char*)+0x54>
 800484c:	2204      	movs	r2, #4
 800484e:	4952      	ldr	r1, [pc, #328]	; (8004998 <RDMHandler::HandleData(unsigned char const*, unsigned char*)+0x194>)
 8004850:	18a8      	adds	r0, r5, r2
 8004852:	f7ff f845 	bl	80038e0 <memcmp>
 8004856:	b158      	cbz	r0, 8004870 <RDMHandler::HandleData(unsigned char const*, unsigned char*)+0x6c>
 8004858:	2206      	movs	r2, #6
 800485a:	4649      	mov	r1, r9
 800485c:	4650      	mov	r0, sl
 800485e:	f7ff f83f 	bl	80038e0 <memcmp>
 8004862:	b130      	cbz	r0, 8004872 <RDMHandler::HandleData(unsigned char const*, unsigned char*)+0x6e>
 8004864:	f1bb 0f00 	cmp.w	fp, #0
 8004868:	d04b      	beq.n	8004902 <RDMHandler::HandleData(unsigned char const*, unsigned char*)+0xfe>
 800486a:	b005      	add	sp, #20
 800486c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004870:	2001      	movs	r0, #1
 8004872:	2301      	movs	r3, #1
 8004874:	9a03      	ldr	r2, [sp, #12]
 8004876:	2a10      	cmp	r2, #16
 8004878:	d177      	bne.n	800496a <RDMHandler::HandleData(unsigned char const*, unsigned char*)+0x166>
 800487a:	2f01      	cmp	r7, #1
 800487c:	d144      	bne.n	8004908 <RDMHandler::HandleData(unsigned char const*, unsigned char*)+0x104>
 800487e:	7873      	ldrb	r3, [r6, #1]
 8004880:	2b00      	cmp	r3, #0
 8004882:	d1f2      	bne.n	800486a <RDMHandler::HandleData(unsigned char const*, unsigned char*)+0x66>
 8004884:	2206      	movs	r2, #6
 8004886:	4649      	mov	r1, r9
 8004888:	f105 0017 	add.w	r0, r5, #23
 800488c:	f7ff f828 	bl	80038e0 <memcmp>
 8004890:	2800      	cmp	r0, #0
 8004892:	dcea      	bgt.n	800486a <RDMHandler::HandleData(unsigned char const*, unsigned char*)+0x66>
 8004894:	2206      	movs	r2, #6
 8004896:	f105 011d 	add.w	r1, r5, #29
 800489a:	4648      	mov	r0, r9
 800489c:	f7ff f820 	bl	80038e0 <memcmp>
 80048a0:	2800      	cmp	r0, #0
 80048a2:	dce2      	bgt.n	800486a <RDMHandler::HandleData(unsigned char const*, unsigned char*)+0x66>
 80048a4:	23fe      	movs	r3, #254	; 0xfe
 80048a6:	7023      	strb	r3, [r4, #0]
 80048a8:	7063      	strb	r3, [r4, #1]
 80048aa:	70a3      	strb	r3, [r4, #2]
 80048ac:	70e3      	strb	r3, [r4, #3]
 80048ae:	7123      	strb	r3, [r4, #4]
 80048b0:	7163      	strb	r3, [r4, #5]
 80048b2:	71a3      	strb	r3, [r4, #6]
 80048b4:	23aa      	movs	r3, #170	; 0xaa
 80048b6:	71e3      	strb	r3, [r4, #7]
 80048b8:	f108 0204 	add.w	r2, r8, #4
 80048bc:	4621      	mov	r1, r4
 80048be:	f108 080a 	add.w	r8, r8, #10
 80048c2:	f240 53fa 	movw	r3, #1530	; 0x5fa
 80048c6:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 80048ca:	f060 0055 	orn	r0, r0, #85	; 0x55
 80048ce:	7208      	strb	r0, [r1, #8]
 80048d0:	7810      	ldrb	r0, [r2, #0]
 80048d2:	f040 0055 	orr.w	r0, r0, #85	; 0x55
 80048d6:	7248      	strb	r0, [r1, #9]
 80048d8:	7810      	ldrb	r0, [r2, #0]
 80048da:	4542      	cmp	r2, r8
 80048dc:	4403      	add	r3, r0
 80048de:	b29b      	uxth	r3, r3
 80048e0:	f101 0102 	add.w	r1, r1, #2
 80048e4:	d1ef      	bne.n	80048c6 <RDMHandler::HandleData(unsigned char const*, unsigned char*)+0xc2>
 80048e6:	0a1a      	lsrs	r2, r3, #8
 80048e8:	f062 0155 	orn	r1, r2, #85	; 0x55
 80048ec:	f042 0255 	orr.w	r2, r2, #85	; 0x55
 80048f0:	7562      	strb	r2, [r4, #21]
 80048f2:	f063 0255 	orn	r2, r3, #85	; 0x55
 80048f6:	f043 0355 	orr.w	r3, r3, #85	; 0x55
 80048fa:	7521      	strb	r1, [r4, #20]
 80048fc:	75a2      	strb	r2, [r4, #22]
 80048fe:	75e3      	strb	r3, [r4, #23]
 8004900:	e7b3      	b.n	800486a <RDMHandler::HandleData(unsigned char const*, unsigned char*)+0x66>
 8004902:	4658      	mov	r0, fp
 8004904:	465b      	mov	r3, fp
 8004906:	e7b5      	b.n	8004874 <RDMHandler::HandleData(unsigned char const*, unsigned char*)+0x70>
 8004908:	2f03      	cmp	r7, #3
 800490a:	d11a      	bne.n	8004942 <RDMHandler::HandleData(unsigned char const*, unsigned char*)+0x13e>
 800490c:	7daa      	ldrb	r2, [r5, #22]
 800490e:	2a00      	cmp	r2, #0
 8004910:	d1ab      	bne.n	800486a <RDMHandler::HandleData(unsigned char const*, unsigned char*)+0x66>
 8004912:	7072      	strb	r2, [r6, #1]
 8004914:	f1bb 0f00 	cmp.w	fp, #0
 8004918:	d0a7      	beq.n	800486a <RDMHandler::HandleData(unsigned char const*, unsigned char*)+0x66>
 800491a:	2b00      	cmp	r3, #0
 800491c:	d0a5      	beq.n	800486a <RDMHandler::HandleData(unsigned char const*, unsigned char*)+0x66>
 800491e:	2302      	movs	r3, #2
 8004920:	75e3      	strb	r3, [r4, #23]
 8004922:	4b1e      	ldr	r3, [pc, #120]	; (800499c <RDMHandler::HandleData(unsigned char const*, unsigned char*)+0x198>)
 8004924:	7622      	strb	r2, [r4, #24]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	7662      	strb	r2, [r4, #25]
 800492a:	889b      	ldrh	r3, [r3, #4]
 800492c:	3b00      	subs	r3, #0
 800492e:	bf18      	it	ne
 8004930:	2301      	movne	r3, #1
 8004932:	005b      	lsls	r3, r3, #1
 8004934:	4630      	mov	r0, r6
 8004936:	7663      	strb	r3, [r4, #25]
 8004938:	b005      	add	sp, #20
 800493a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800493e:	f7ff b8e9 	b.w	8003b14 <RDMHandler::RespondMessageAck()>
 8004942:	2f02      	cmp	r7, #2
 8004944:	d191      	bne.n	800486a <RDMHandler::HandleData(unsigned char const*, unsigned char*)+0x66>
 8004946:	7daa      	ldrb	r2, [r5, #22]
 8004948:	2a00      	cmp	r2, #0
 800494a:	d18e      	bne.n	800486a <RDMHandler::HandleData(unsigned char const*, unsigned char*)+0x66>
 800494c:	2101      	movs	r1, #1
 800494e:	7071      	strb	r1, [r6, #1]
 8004950:	2b00      	cmp	r3, #0
 8004952:	d08a      	beq.n	800486a <RDMHandler::HandleData(unsigned char const*, unsigned char*)+0x66>
 8004954:	4b11      	ldr	r3, [pc, #68]	; (800499c <RDMHandler::HandleData(unsigned char const*, unsigned char*)+0x198>)
 8004956:	75e7      	strb	r7, [r4, #23]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	7622      	strb	r2, [r4, #24]
 800495c:	7662      	strb	r2, [r4, #25]
 800495e:	889b      	ldrh	r3, [r3, #4]
 8004960:	3b00      	subs	r3, #0
 8004962:	bf18      	it	ne
 8004964:	2301      	movne	r3, #1
 8004966:	408b      	lsls	r3, r1
 8004968:	e7e4      	b.n	8004934 <RDMHandler::HandleData(unsigned char const*, unsigned char*)+0x130>
 800496a:	7c6a      	ldrb	r2, [r5, #17]
 800496c:	7cab      	ldrb	r3, [r5, #18]
 800496e:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8004972:	b29b      	uxth	r3, r3
 8004974:	f1bb 0f00 	cmp.w	fp, #0
 8004978:	9301      	str	r3, [sp, #4]
 800497a:	7dab      	ldrb	r3, [r5, #22]
 800497c:	9300      	str	r3, [sp, #0]
 800497e:	bf18      	it	ne
 8004980:	4601      	movne	r1, r0
 8004982:	9a03      	ldr	r2, [sp, #12]
 8004984:	463b      	mov	r3, r7
 8004986:	bf08      	it	eq
 8004988:	2101      	moveq	r1, #1
 800498a:	4630      	mov	r0, r6
 800498c:	f7ff feca 	bl	8004724 <RDMHandler::Handlers(bool, unsigned char, unsigned short, unsigned char, unsigned short)>
 8004990:	e76b      	b.n	800486a <RDMHandler::HandleData(unsigned char const*, unsigned char*)+0x66>
 8004992:	bf00      	nop
 8004994:	20000644 	andcs	r0, r0, r4, asr #12
 8004998:	08009ca8 	stmdaeq	r0, {r3, r5, r7, sl, fp, ip, pc}
 800499c:	20000200 	andcs	r0, r0, r0, lsl #4

080049a0 <RDMHandler::GetIdentifyMode(unsigned short)>:
 80049a0:	6883      	ldr	r3, [r0, #8]
 80049a2:	2201      	movs	r2, #1
 80049a4:	75da      	strb	r2, [r3, #23]
 80049a6:	4a02      	ldr	r2, [pc, #8]	; (80049b0 <RDMHandler::GetIdentifyMode(unsigned short)+0x10>)
 80049a8:	7812      	ldrb	r2, [r2, #0]
 80049aa:	761a      	strb	r2, [r3, #24]
 80049ac:	f7ff b8b2 	b.w	8003b14 <RDMHandler::RespondMessageAck()>
 80049b0:	20000649 	andcs	r0, r0, r9, asr #12

080049b4 <RDMHandler::SetIdentifyMode(bool, unsigned short)>:
 80049b4:	b538      	push	{r3, r4, r5, lr}
 80049b6:	6843      	ldr	r3, [r0, #4]
 80049b8:	7d9a      	ldrb	r2, [r3, #22]
 80049ba:	2a01      	cmp	r2, #1
 80049bc:	4604      	mov	r4, r0
 80049be:	460d      	mov	r5, r1
 80049c0:	d004      	beq.n	80049cc <RDMHandler::SetIdentifyMode(bool, unsigned short)+0x18>
 80049c2:	2101      	movs	r1, #1
 80049c4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80049c8:	f7ff bacc 	b.w	8003f64 <RDMHandler::RespondMessageNack(unsigned short)>
 80049cc:	7dd9      	ldrb	r1, [r3, #23]
 80049ce:	1e4b      	subs	r3, r1, #1
 80049d0:	b2db      	uxtb	r3, r3
 80049d2:	2bfd      	cmp	r3, #253	; 0xfd
 80049d4:	d801      	bhi.n	80049da <RDMHandler::SetIdentifyMode(bool, unsigned short)+0x26>
 80049d6:	2106      	movs	r1, #6
 80049d8:	e7f4      	b.n	80049c4 <RDMHandler::SetIdentifyMode(bool, unsigned short)+0x10>
 80049da:	4b0b      	ldr	r3, [pc, #44]	; (8004a08 <RDMHandler::SetIdentifyMode(bool, unsigned short)+0x54>)
 80049dc:	6818      	ldr	r0, [r3, #0]
 80049de:	4b0b      	ldr	r3, [pc, #44]	; (8004a0c <RDMHandler::SetIdentifyMode(bool, unsigned short)+0x58>)
 80049e0:	7019      	strb	r1, [r3, #0]
 80049e2:	4b0b      	ldr	r3, [pc, #44]	; (8004a10 <RDMHandler::SetIdentifyMode(bool, unsigned short)+0x5c>)
 80049e4:	781b      	ldrb	r3, [r3, #0]
 80049e6:	b15b      	cbz	r3, 8004a00 <RDMHandler::SetIdentifyMode(bool, unsigned short)+0x4c>
 80049e8:	b151      	cbz	r1, 8004a00 <RDMHandler::SetIdentifyMode(bool, unsigned short)+0x4c>
 80049ea:	21ff      	movs	r1, #255	; 0xff
 80049ec:	f7fc fbb4 	bl	8001158 <RDMIdentify::On(rdm::identify::Mode)>
 80049f0:	b94d      	cbnz	r5, 8004a06 <RDMHandler::SetIdentifyMode(bool, unsigned short)+0x52>
 80049f2:	68a3      	ldr	r3, [r4, #8]
 80049f4:	75dd      	strb	r5, [r3, #23]
 80049f6:	4620      	mov	r0, r4
 80049f8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80049fc:	f7ff b88a 	b.w	8003b14 <RDMHandler::RespondMessageAck()>
 8004a00:	f7fc fbc8 	bl	8001194 <RDMIdentify::Off(rdm::identify::Mode)>
 8004a04:	e7f4      	b.n	80049f0 <RDMHandler::SetIdentifyMode(bool, unsigned short)+0x3c>
 8004a06:	bd38      	pop	{r3, r4, r5, pc}
 8004a08:	2000064c 	andcs	r0, r0, ip, asr #12
 8004a0c:	20000649 	andcs	r0, r0, r9, asr #12
 8004a10:	20000648 	andcs	r0, r0, r8, asr #12

08004a14 <RDMIdentify::RDMIdentify()>:
 8004a14:	4b01      	ldr	r3, [pc, #4]	; (8004a1c <RDMIdentify::RDMIdentify()+0x8>)
 8004a16:	6018      	str	r0, [r3, #0]
 8004a18:	4770      	bx	lr
 8004a1a:	bf00      	nop
 8004a1c:	2000064c 	andcs	r0, r0, ip, asr #12

08004a20 <RDMSlotInfo::bsearch(unsigned short)>:
 8004a20:	b530      	push	{r4, r5, lr}
 8004a22:	4c0a      	ldr	r4, [pc, #40]	; (8004a4c <RDMSlotInfo::bsearch(unsigned short)+0x2c>)
 8004a24:	2128      	movs	r1, #40	; 0x28
 8004a26:	2200      	movs	r2, #0
 8004a28:	1a8b      	subs	r3, r1, r2
 8004a2a:	eb02 0363 	add.w	r3, r2, r3, asr #1
 8004a2e:	f834 5033 	ldrh.w	r5, [r4, r3, lsl #3]
 8004a32:	4285      	cmp	r5, r0
 8004a34:	d206      	bcs.n	8004a44 <RDMSlotInfo::bsearch(unsigned short)+0x24>
 8004a36:	1c5a      	adds	r2, r3, #1
 8004a38:	428a      	cmp	r2, r1
 8004a3a:	ddf5      	ble.n	8004a28 <RDMSlotInfo::bsearch(unsigned short)+0x8>
 8004a3c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004a40:	4618      	mov	r0, r3
 8004a42:	bd30      	pop	{r4, r5, pc}
 8004a44:	d9fc      	bls.n	8004a40 <RDMSlotInfo::bsearch(unsigned short)+0x20>
 8004a46:	1e59      	subs	r1, r3, #1
 8004a48:	e7f6      	b.n	8004a38 <RDMSlotInfo::bsearch(unsigned short)+0x18>
 8004a4a:	bf00      	nop
 8004a4c:	0800a4d4 	stmdaeq	r0, {r2, r4, r6, r7, sl, sp, pc}

08004a50 <RDMSlotInfo::GetCategoryText(unsigned short, unsigned short, unsigned int&)>:
 8004a50:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004a54:	4299      	cmp	r1, r3
 8004a56:	b510      	push	{r4, lr}
 8004a58:	4614      	mov	r4, r2
 8004a5a:	d103      	bne.n	8004a64 <RDMSlotInfo::GetCategoryText(unsigned short, unsigned short, unsigned int&)+0x14>
 8004a5c:	4611      	mov	r1, r2
 8004a5e:	f7fc fbb5 	bl	80011cc <RDMSlotInfo::GetCategoryTextUndefined(unsigned short, unsigned int&)>
 8004a62:	bd10      	pop	{r4, pc}
 8004a64:	4608      	mov	r0, r1
 8004a66:	f7ff ffdb 	bl	8004a20 <RDMSlotInfo::bsearch(unsigned short)>
 8004a6a:	2800      	cmp	r0, #0
 8004a6c:	da02      	bge.n	8004a74 <RDMSlotInfo::GetCategoryText(unsigned short, unsigned short, unsigned int&)+0x24>
 8004a6e:	2000      	movs	r0, #0
 8004a70:	6020      	str	r0, [r4, #0]
 8004a72:	e7f6      	b.n	8004a62 <RDMSlotInfo::GetCategoryText(unsigned short, unsigned short, unsigned int&)+0x12>
 8004a74:	4b06      	ldr	r3, [pc, #24]	; (8004a90 <RDMSlotInfo::GetCategoryText(unsigned short, unsigned short, unsigned int&)+0x40>)
 8004a76:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
 8004a7a:	6858      	ldr	r0, [r3, #4]
 8004a7c:	4602      	mov	r2, r0
 8004a7e:	4613      	mov	r3, r2
 8004a80:	3201      	adds	r2, #1
 8004a82:	7819      	ldrb	r1, [r3, #0]
 8004a84:	2900      	cmp	r1, #0
 8004a86:	d1fa      	bne.n	8004a7e <RDMSlotInfo::GetCategoryText(unsigned short, unsigned short, unsigned int&)+0x2e>
 8004a88:	1a1b      	subs	r3, r3, r0
 8004a8a:	b29b      	uxth	r3, r3
 8004a8c:	6023      	str	r3, [r4, #0]
 8004a8e:	e7e8      	b.n	8004a62 <RDMSlotInfo::GetCategoryText(unsigned short, unsigned short, unsigned int&)+0x12>
 8004a90:	0800a4d4 	stmdaeq	r0, {r2, r4, r6, r7, sl, sp, pc}

08004a94 <RDMDevice::RDMDevice()>:
 8004a94:	4a34      	ldr	r2, [pc, #208]	; (8004b68 <RDMDevice::RDMDevice()+0xd4>)
 8004a96:	2300      	movs	r3, #0
 8004a98:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004a9a:	4604      	mov	r4, r0
 8004a9c:	7003      	strb	r3, [r0, #0]
 8004a9e:	f880 3072 	strb.w	r3, [r0, #114]	; 0x72
 8004aa2:	f8a0 3074 	strh.w	r3, [r0, #116]	; 0x74
 8004aa6:	6783      	str	r3, [r0, #120]	; 0x78
 8004aa8:	4611      	mov	r1, r2
 8004aaa:	4613      	mov	r3, r2
 8004aac:	3201      	adds	r2, #1
 8004aae:	7818      	ldrb	r0, [r3, #0]
 8004ab0:	2800      	cmp	r0, #0
 8004ab2:	d1fa      	bne.n	8004aaa <RDMDevice::RDMDevice()+0x16>
 8004ab4:	1a5b      	subs	r3, r3, r1
 8004ab6:	2b20      	cmp	r3, #32
 8004ab8:	bf28      	it	cs
 8004aba:	2320      	movcs	r3, #32
 8004abc:	f104 052b 	add.w	r5, r4, #43	; 0x2b
 8004ac0:	4829      	ldr	r0, [pc, #164]	; (8004b68 <RDMDevice::RDMDevice()+0xd4>)
 8004ac2:	4629      	mov	r1, r5
 8004ac4:	461a      	mov	r2, r3
 8004ac6:	3a01      	subs	r2, #1
 8004ac8:	d23e      	bcs.n	8004b48 <RDMDevice::RDMDevice()+0xb4>
 8004aca:	f884 304c 	strb.w	r3, [r4, #76]	; 0x4c
 8004ace:	4b27      	ldr	r3, [pc, #156]	; (8004b6c <RDMDevice::RDMDevice()+0xd8>)
 8004ad0:	781a      	ldrb	r2, [r3, #0]
 8004ad2:	7062      	strb	r2, [r4, #1]
 8004ad4:	785b      	ldrb	r3, [r3, #1]
 8004ad6:	70a3      	strb	r3, [r4, #2]
 8004ad8:	4b25      	ldr	r3, [pc, #148]	; (8004b70 <RDMDevice::RDMDevice()+0xdc>)
 8004ada:	4669      	mov	r1, sp
 8004adc:	6818      	ldr	r0, [r3, #0]
 8004ade:	f001 fda1 	bl	8006624 <Network::MacAddressCopyTo(unsigned char*)>
 8004ae2:	f89d 3002 	ldrb.w	r3, [sp, #2]
 8004ae6:	70e3      	strb	r3, [r4, #3]
 8004ae8:	72a3      	strb	r3, [r4, #10]
 8004aea:	4b22      	ldr	r3, [pc, #136]	; (8004b74 <RDMDevice::RDMDevice()+0xe0>)
 8004aec:	f89d 2003 	ldrb.w	r2, [sp, #3]
 8004af0:	f89d 1004 	ldrb.w	r1, [sp, #4]
 8004af4:	f89d 0005 	ldrb.w	r0, [sp, #5]
 8004af8:	7122      	strb	r2, [r4, #4]
 8004afa:	7262      	strb	r2, [r4, #9]
 8004afc:	7161      	strb	r1, [r4, #5]
 8004afe:	71a0      	strb	r0, [r4, #6]
 8004b00:	71e0      	strb	r0, [r4, #7]
 8004b02:	7221      	strb	r1, [r4, #8]
 8004b04:	461a      	mov	r2, r3
 8004b06:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 8004b0a:	2900      	cmp	r1, #0
 8004b0c:	d1fb      	bne.n	8004b06 <RDMDevice::RDMDevice()+0x72>
 8004b0e:	1a9b      	subs	r3, r3, r2
 8004b10:	2b20      	cmp	r3, #32
 8004b12:	bf28      	it	cs
 8004b14:	2320      	movcs	r3, #32
 8004b16:	4917      	ldr	r1, [pc, #92]	; (8004b74 <RDMDevice::RDMDevice()+0xe0>)
 8004b18:	461a      	mov	r2, r3
 8004b1a:	3a01      	subs	r2, #1
 8004b1c:	d219      	bcs.n	8004b52 <RDMDevice::RDMDevice()+0xbe>
 8004b1e:	f884 304c 	strb.w	r3, [r4, #76]	; 0x4c
 8004b22:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8004b26:	f8a4 304e 	strh.w	r3, [r4, #78]	; 0x4e
 8004b2a:	f8a4 3050 	strh.w	r3, [r4, #80]	; 0x50
 8004b2e:	4a12      	ldr	r2, [pc, #72]	; (8004b78 <RDMDevice::RDMDevice()+0xe4>)
 8004b30:	2315      	movs	r3, #21
 8004b32:	f884 3072 	strb.w	r3, [r4, #114]	; 0x72
 8004b36:	f104 0166 	add.w	r1, r4, #102	; 0x66
 8004b3a:	f104 0351 	add.w	r3, r4, #81	; 0x51
 8004b3e:	4299      	cmp	r1, r3
 8004b40:	d10c      	bne.n	8004b5c <RDMDevice::RDMDevice()+0xc8>
 8004b42:	4620      	mov	r0, r4
 8004b44:	b002      	add	sp, #8
 8004b46:	bd70      	pop	{r4, r5, r6, pc}
 8004b48:	f810 6b01 	ldrb.w	r6, [r0], #1
 8004b4c:	f801 6f01 	strb.w	r6, [r1, #1]!
 8004b50:	e7b9      	b.n	8004ac6 <RDMDevice::RDMDevice()+0x32>
 8004b52:	f811 0b01 	ldrb.w	r0, [r1], #1
 8004b56:	f805 0f01 	strb.w	r0, [r5, #1]!
 8004b5a:	e7de      	b.n	8004b1a <RDMDevice::RDMDevice()+0x86>
 8004b5c:	f812 0b01 	ldrb.w	r0, [r2], #1
 8004b60:	f803 0f01 	strb.w	r0, [r3, #1]!
 8004b64:	e7eb      	b.n	8004b3e <RDMDevice::RDMDevice()+0xaa>
 8004b66:	bf00      	nop
 8004b68:	0800a715 	stmdaeq	r0, {r0, r2, r4, r8, r9, sl, sp, pc}
 8004b6c:	0800a713 	stmdaeq	r0, {r0, r1, r4, r8, r9, sl, sp, pc}
 8004b70:	2000069c 	mulcs	r0, ip, r6
 8004b74:	0800a614 	stmdaeq	r0, {r2, r4, r9, sl, sp, pc}
 8004b78:	0800a6fd 	stmdaeq	r0, {r0, r2, r3, r4, r5, r6, r7, r9, sl, sp, pc}

08004b7c <RDMDevice::Print()>:
 8004b7c:	b513      	push	{r0, r1, r4, lr}
 8004b7e:	4604      	mov	r4, r0
 8004b80:	4818      	ldr	r0, [pc, #96]	; (8004be4 <RDMDevice::Print()+0x68>)
 8004b82:	f7fc fe4f 	bl	8001824 <printf>
 8004b86:	f894 104c 	ldrb.w	r1, [r4, #76]	; 0x4c
 8004b8a:	4817      	ldr	r0, [pc, #92]	; (8004be8 <RDMDevice::Print()+0x6c>)
 8004b8c:	f104 022c 	add.w	r2, r4, #44	; 0x2c
 8004b90:	f7fc fe48 	bl	8001824 <printf>
 8004b94:	78a2      	ldrb	r2, [r4, #2]
 8004b96:	7861      	ldrb	r1, [r4, #1]
 8004b98:	4814      	ldr	r0, [pc, #80]	; (8004bec <RDMDevice::Print()+0x70>)
 8004b9a:	f7fc fe43 	bl	8001824 <printf>
 8004b9e:	79e3      	ldrb	r3, [r4, #7]
 8004ba0:	7a62      	ldrb	r2, [r4, #9]
 8004ba2:	7aa1      	ldrb	r1, [r4, #10]
 8004ba4:	9300      	str	r3, [sp, #0]
 8004ba6:	4812      	ldr	r0, [pc, #72]	; (8004bf0 <RDMDevice::Print()+0x74>)
 8004ba8:	7a23      	ldrb	r3, [r4, #8]
 8004baa:	f7fc fe3b 	bl	8001824 <printf>
 8004bae:	f894 102b 	ldrb.w	r1, [r4, #43]	; 0x2b
 8004bb2:	4810      	ldr	r0, [pc, #64]	; (8004bf4 <RDMDevice::Print()+0x78>)
 8004bb4:	f104 020b 	add.w	r2, r4, #11
 8004bb8:	f7fc fe34 	bl	8001824 <printf>
 8004bbc:	f8b4 104e 	ldrh.w	r1, [r4, #78]	; 0x4e
 8004bc0:	f894 204e 	ldrb.w	r2, [r4, #78]	; 0x4e
 8004bc4:	480c      	ldr	r0, [pc, #48]	; (8004bf8 <RDMDevice::Print()+0x7c>)
 8004bc6:	0a09      	lsrs	r1, r1, #8
 8004bc8:	f7fc fe2c 	bl	8001824 <printf>
 8004bcc:	f8b4 1050 	ldrh.w	r1, [r4, #80]	; 0x50
 8004bd0:	f894 2050 	ldrb.w	r2, [r4, #80]	; 0x50
 8004bd4:	4809      	ldr	r0, [pc, #36]	; (8004bfc <RDMDevice::Print()+0x80>)
 8004bd6:	0a09      	lsrs	r1, r1, #8
 8004bd8:	b002      	add	sp, #8
 8004bda:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004bde:	f7fc be21 	b.w	8001824 <printf>
 8004be2:	bf00      	nop
 8004be4:	0800a629 	stmdaeq	r0, {r0, r3, r5, r9, sl, sp, pc}
 8004be8:	0800a643 	stmdaeq	r0, {r0, r1, r6, r9, sl, sp, pc}
 8004bec:	0800a65e 	stmdaeq	r0, {r1, r2, r3, r4, r6, r9, sl, sp, pc}
 8004bf0:	0800a67d 	stmdaeq	r0, {r0, r2, r3, r4, r5, r6, r9, sl, sp, pc}
 8004bf4:	0800a6a4 	stmdaeq	r0, {r2, r5, r7, r9, sl, sp, pc}
 8004bf8:	0800a6bf 	stmdaeq	r0, {r0, r1, r2, r3, r4, r5, r7, r9, sl, sp, pc}
 8004bfc:	0800a6de 	stmdaeq	r0, {r1, r2, r3, r4, r6, r7, r9, sl, sp, pc}

08004c00 <PixelDmxConfiguration::Validate(unsigned int, unsigned int&, pixeldmxconfiguration::PortInfo&)>:
 8004c00:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004c02:	4604      	mov	r4, r0
 8004c04:	460e      	mov	r6, r1
 8004c06:	4611      	mov	r1, r2
 8004c08:	9201      	str	r2, [sp, #4]
 8004c0a:	461d      	mov	r5, r3
 8004c0c:	f000 fa78 	bl	8005100 <PixelConfiguration::Validate(unsigned int&)>
 8004c10:	7d62      	ldrb	r2, [r4, #21]
 8004c12:	b94a      	cbnz	r2, 8004c28 <PixelDmxConfiguration::Validate(unsigned int, unsigned int&, pixeldmxconfiguration::PortInfo&)+0x28>
 8004c14:	6823      	ldr	r3, [r4, #0]
 8004c16:	9901      	ldr	r1, [sp, #4]
 8004c18:	b11b      	cbz	r3, 8004c22 <PixelDmxConfiguration::Validate(unsigned int, unsigned int&, pixeldmxconfiguration::PortInfo&)+0x22>
 8004c1a:	3b0b      	subs	r3, #11
 8004c1c:	2b01      	cmp	r3, #1
 8004c1e:	bf88      	it	hi
 8004c20:	6022      	strhi	r2, [r4, #0]
 8004c22:	4620      	mov	r0, r4
 8004c24:	f000 fa6c 	bl	8005100 <PixelConfiguration::Validate(unsigned int&)>
 8004c28:	6823      	ldr	r3, [r4, #0]
 8004c2a:	2b07      	cmp	r3, #7
 8004c2c:	bf15      	itete	ne
 8004c2e:	f44f 71aa 	movne.w	r1, #340	; 0x154
 8004c32:	f44f 7180 	moveq.w	r1, #256	; 0x100
 8004c36:	23aa      	movne	r3, #170	; 0xaa
 8004c38:	2380      	moveq	r3, #128	; 0x80
 8004c3a:	e9c5 3100 	strd	r3, r1, [r5]
 8004c3e:	6a21      	ldr	r1, [r4, #32]
 8004c40:	bf14      	ite	ne
 8004c42:	f44f 72ff 	movne.w	r2, #510	; 0x1fe
 8004c46:	f44f 72c0 	moveq.w	r2, #384	; 0x180
 8004c4a:	60aa      	str	r2, [r5, #8]
 8004c4c:	6862      	ldr	r2, [r4, #4]
 8004c4e:	b109      	cbz	r1, 8004c54 <PixelDmxConfiguration::Validate(unsigned int, unsigned int&, pixeldmxconfiguration::PortInfo&)+0x54>
 8004c50:	4291      	cmp	r1, r2
 8004c52:	d900      	bls.n	8004c56 <PixelDmxConfiguration::Validate(unsigned int, unsigned int&, pixeldmxconfiguration::PortInfo&)+0x56>
 8004c54:	6222      	str	r2, [r4, #32]
 8004c56:	69e0      	ldr	r0, [r4, #28]
 8004c58:	6a21      	ldr	r1, [r4, #32]
 8004c5a:	fbb2 f2f1 	udiv	r2, r2, r1
 8004c5e:	42b0      	cmp	r0, r6
 8004c60:	bf28      	it	cs
 8004c62:	4630      	movcs	r0, r6
 8004c64:	6262      	str	r2, [r4, #36]	; 0x24
 8004c66:	2e01      	cmp	r6, #1
 8004c68:	f103 0301 	add.w	r3, r3, #1
 8004c6c:	fbb2 f2f3 	udiv	r2, r2, r3
 8004c70:	f102 0301 	add.w	r3, r2, #1
 8004c74:	62a3      	str	r3, [r4, #40]	; 0x28
 8004c76:	bf1c      	itt	ne
 8004c78:	4343      	mulne	r3, r0
 8004c7a:	f103 32ff 	addne.w	r2, r3, #4294967295	; 0xffffffff
 8004c7e:	61e0      	str	r0, [r4, #28]
 8004c80:	60ea      	str	r2, [r5, #12]
 8004c82:	b002      	add	sp, #8
 8004c84:	bd70      	pop	{r4, r5, r6, pc}
	...

08004c88 <PixelDmxConfiguration::Print()>:
 8004c88:	b510      	push	{r4, lr}
 8004c8a:	4604      	mov	r4, r0
 8004c8c:	f000 face 	bl	800522c <PixelConfiguration::Print()>
 8004c90:	4806      	ldr	r0, [pc, #24]	; (8004cac <PixelDmxConfiguration::Print()+0x24>)
 8004c92:	f7fc fdc7 	bl	8001824 <printf>
 8004c96:	69e1      	ldr	r1, [r4, #28]
 8004c98:	4805      	ldr	r0, [pc, #20]	; (8004cb0 <PixelDmxConfiguration::Print()+0x28>)
 8004c9a:	f7fc fdc3 	bl	8001824 <printf>
 8004c9e:	e9d4 1208 	ldrd	r1, r2, [r4, #32]
 8004ca2:	4804      	ldr	r0, [pc, #16]	; (8004cb4 <PixelDmxConfiguration::Print()+0x2c>)
 8004ca4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004ca8:	f7fc bdbc 	b.w	8001824 <printf>
 8004cac:	0800a731 	stmdaeq	r0, {r0, r4, r5, r8, r9, sl, sp, pc}
 8004cb0:	0800a74a 	stmdaeq	r0, {r1, r3, r6, r8, r9, sl, sp, pc}
 8004cb4:	0800a759 	stmdaeq	r0, {r0, r3, r4, r6, r8, r9, sl, sp, pc}

08004cb8 <WS28xxDmx::GetDmxStartAddress()>:
 8004cb8:	f8b0 0048 	ldrh.w	r0, [r0, #72]	; 0x48
 8004cbc:	4770      	bx	lr

08004cbe <WS28xxDmx::GetDmxFootprint()>:
 8004cbe:	f8b0 004a 	ldrh.w	r0, [r0, #74]	; 0x4a
 8004cc2:	4770      	bx	lr

08004cc4 <WS28xxDmx::~WS28xxDmx()>:
 8004cc4:	b538      	push	{r3, r4, r5, lr}
 8004cc6:	6cc5      	ldr	r5, [r0, #76]	; 0x4c
 8004cc8:	4b05      	ldr	r3, [pc, #20]	; (8004ce0 <WS28xxDmx::~WS28xxDmx()+0x1c>)
 8004cca:	6003      	str	r3, [r0, #0]
 8004ccc:	4604      	mov	r4, r0
 8004cce:	b12d      	cbz	r5, 8004cdc <WS28xxDmx::~WS28xxDmx()+0x18>
 8004cd0:	4628      	mov	r0, r5
 8004cd2:	f001 fb87 	bl	80063e4 <WS28xx::~WS28xx()>
 8004cd6:	4628      	mov	r0, r5
 8004cd8:	f003 f801 	bl	8007cde <operator delete(void*)>
 8004cdc:	4620      	mov	r0, r4
 8004cde:	bd38      	pop	{r3, r4, r5, pc}
 8004ce0:	0800a788 	stmdaeq	r0, {r3, r7, r8, r9, sl, sp, pc}

08004ce4 <WS28xxDmx::~WS28xxDmx()>:
 8004ce4:	b510      	push	{r4, lr}
 8004ce6:	4604      	mov	r4, r0
 8004ce8:	f7ff ffec 	bl	8004cc4 <WS28xxDmx::~WS28xxDmx()>
 8004cec:	4620      	mov	r0, r4
 8004cee:	f002 fff6 	bl	8007cde <operator delete(void*)>
 8004cf2:	4620      	mov	r0, r4
 8004cf4:	bd10      	pop	{r4, pc}

08004cf6 <WS28xxDmx::Blackout(bool)>:
 8004cf6:	b538      	push	{r3, r4, r5, lr}
 8004cf8:	4605      	mov	r5, r0
 8004cfa:	460c      	mov	r4, r1
 8004cfc:	f880 1059 	strb.w	r1, [r0, #89]	; 0x59
 8004d00:	f004 fa3c 	bl	800917c <gd32_spi_dma_tx_is_active()>
 8004d04:	2800      	cmp	r0, #0
 8004d06:	d1fb      	bne.n	8004d00 <WS28xxDmx::Blackout(bool)+0xa>
 8004d08:	6ce8      	ldr	r0, [r5, #76]	; 0x4c
 8004d0a:	b11c      	cbz	r4, 8004d14 <WS28xxDmx::Blackout(bool)+0x1e>
 8004d0c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004d10:	f001 bbe6 	b.w	80064e0 <WS28xx::Blackout()>
 8004d14:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004d18:	f001 bbc6 	b.w	80064a8 <WS28xx::Update()>

08004d1c <WS28xxDmx::SetData(unsigned int, unsigned char const*, unsigned int)>:
 8004d1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004d20:	b087      	sub	sp, #28
 8004d22:	4607      	mov	r7, r0
 8004d24:	9104      	str	r1, [sp, #16]
 8004d26:	4692      	mov	sl, r2
 8004d28:	9303      	str	r3, [sp, #12]
 8004d2a:	f004 fa27 	bl	800917c <gd32_spi_dma_tx_is_active()>
 8004d2e:	2800      	cmp	r0, #0
 8004d30:	d171      	bne.n	8004e16 <WS28xxDmx::SetData(unsigned int, unsigned char const*, unsigned int)+0xfa>
 8004d32:	9b04      	ldr	r3, [sp, #16]
 8004d34:	9c03      	ldr	r4, [sp, #12]
 8004d36:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004d38:	f003 0103 	and.w	r1, r3, #3
 8004d3c:	2902      	cmp	r1, #2
 8004d3e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004d40:	fbb4 f6f3 	udiv	r6, r4, r3
 8004d44:	d026      	beq.n	8004d94 <WS28xxDmx::SetData(unsigned int, unsigned char const*, unsigned int)+0x78>
 8004d46:	2903      	cmp	r1, #3
 8004d48:	d02b      	beq.n	8004da2 <WS28xxDmx::SetData(unsigned int, unsigned char const*, unsigned int)+0x86>
 8004d4a:	2901      	cmp	r1, #1
 8004d4c:	6b7d      	ldr	r5, [r7, #52]	; 0x34
 8004d4e:	d022      	beq.n	8004d96 <WS28xxDmx::SetData(unsigned int, unsigned char const*, unsigned int)+0x7a>
 8004d50:	4296      	cmp	r6, r2
 8004d52:	bf28      	it	cs
 8004d54:	4616      	movcs	r6, r2
 8004d56:	4295      	cmp	r5, r2
 8004d58:	d925      	bls.n	8004da6 <WS28xxDmx::SetData(unsigned int, unsigned char const*, unsigned int)+0x8a>
 8004d5a:	8e3c      	ldrh	r4, [r7, #48]	; 0x30
 8004d5c:	4605      	mov	r5, r0
 8004d5e:	3c01      	subs	r4, #1
 8004d60:	f8d7 9024 	ldr.w	r9, [r7, #36]	; 0x24
 8004d64:	2b03      	cmp	r3, #3
 8004d66:	fb09 f805 	mul.w	r8, r9, r5
 8004d6a:	4454      	add	r4, sl
 8004d6c:	eb08 0b09 	add.w	fp, r8, r9
 8004d70:	d035      	beq.n	8004dde <WS28xxDmx::SetData(unsigned int, unsigned char const*, unsigned int)+0xc2>
 8004d72:	42ae      	cmp	r6, r5
 8004d74:	d935      	bls.n	8004de2 <WS28xxDmx::SetData(unsigned int, unsigned char const*, unsigned int)+0xc6>
 8004d76:	9a03      	ldr	r2, [sp, #12]
 8004d78:	eba4 030a 	sub.w	r3, r4, sl
 8004d7c:	429a      	cmp	r2, r3
 8004d7e:	d930      	bls.n	8004de2 <WS28xxDmx::SetData(unsigned int, unsigned char const*, unsigned int)+0xc6>
 8004d80:	f894 f000 	pld	[r4]
 8004d84:	4641      	mov	r1, r8
 8004d86:	458b      	cmp	fp, r1
 8004d88:	d138      	bne.n	8004dfc <WS28xxDmx::SetData(unsigned int, unsigned char const*, unsigned int)+0xe0>
 8004d8a:	3501      	adds	r5, #1
 8004d8c:	44c8      	add	r8, r9
 8004d8e:	44cb      	add	fp, r9
 8004d90:	3404      	adds	r4, #4
 8004d92:	e7ee      	b.n	8004d72 <WS28xxDmx::SetData(unsigned int, unsigned char const*, unsigned int)+0x56>
 8004d94:	6bbd      	ldr	r5, [r7, #56]	; 0x38
 8004d96:	442e      	add	r6, r5
 8004d98:	4296      	cmp	r6, r2
 8004d9a:	bf28      	it	cs
 8004d9c:	4616      	movcs	r6, r2
 8004d9e:	4604      	mov	r4, r0
 8004da0:	e7de      	b.n	8004d60 <WS28xxDmx::SetData(unsigned int, unsigned char const*, unsigned int)+0x44>
 8004da2:	6bfd      	ldr	r5, [r7, #60]	; 0x3c
 8004da4:	e7f7      	b.n	8004d96 <WS28xxDmx::SetData(unsigned int, unsigned char const*, unsigned int)+0x7a>
 8004da6:	4605      	mov	r5, r0
 8004da8:	4604      	mov	r4, r0
 8004daa:	e7d9      	b.n	8004d60 <WS28xxDmx::SetData(unsigned int, unsigned char const*, unsigned int)+0x44>
 8004dac:	78a2      	ldrb	r2, [r4, #2]
 8004dae:	7863      	ldrb	r3, [r4, #1]
 8004db0:	9200      	str	r2, [sp, #0]
 8004db2:	7822      	ldrb	r2, [r4, #0]
 8004db4:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8004db6:	9105      	str	r1, [sp, #20]
 8004db8:	f000 fd8e 	bl	80058d8 <WS28xx::SetPixel(unsigned int, unsigned char, unsigned char, unsigned char)>
 8004dbc:	9905      	ldr	r1, [sp, #20]
 8004dbe:	3101      	adds	r1, #1
 8004dc0:	e007      	b.n	8004dd2 <WS28xxDmx::SetData(unsigned int, unsigned char const*, unsigned int)+0xb6>
 8004dc2:	9a03      	ldr	r2, [sp, #12]
 8004dc4:	eba4 030a 	sub.w	r3, r4, sl
 8004dc8:	429a      	cmp	r2, r3
 8004dca:	d90a      	bls.n	8004de2 <WS28xxDmx::SetData(unsigned int, unsigned char const*, unsigned int)+0xc6>
 8004dcc:	f894 f000 	pld	[r4]
 8004dd0:	4641      	mov	r1, r8
 8004dd2:	458b      	cmp	fp, r1
 8004dd4:	d1ea      	bne.n	8004dac <WS28xxDmx::SetData(unsigned int, unsigned char const*, unsigned int)+0x90>
 8004dd6:	3501      	adds	r5, #1
 8004dd8:	44c8      	add	r8, r9
 8004dda:	44cb      	add	fp, r9
 8004ddc:	3403      	adds	r4, #3
 8004dde:	42ae      	cmp	r6, r5
 8004de0:	d8ef      	bhi.n	8004dc2 <WS28xxDmx::SetData(unsigned int, unsigned char const*, unsigned int)+0xa6>
 8004de2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004de4:	9a04      	ldr	r2, [sp, #16]
 8004de6:	4293      	cmp	r3, r2
 8004de8:	d115      	bne.n	8004e16 <WS28xxDmx::SetData(unsigned int, unsigned char const*, unsigned int)+0xfa>
 8004dea:	f897 3059 	ldrb.w	r3, [r7, #89]	; 0x59
 8004dee:	b993      	cbnz	r3, 8004e16 <WS28xxDmx::SetData(unsigned int, unsigned char const*, unsigned int)+0xfa>
 8004df0:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8004df2:	b007      	add	sp, #28
 8004df4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004df8:	f001 bb56 	b.w	80064a8 <WS28xx::Update()>
 8004dfc:	78e2      	ldrb	r2, [r4, #3]
 8004dfe:	7863      	ldrb	r3, [r4, #1]
 8004e00:	9201      	str	r2, [sp, #4]
 8004e02:	78a2      	ldrb	r2, [r4, #2]
 8004e04:	9200      	str	r2, [sp, #0]
 8004e06:	7822      	ldrb	r2, [r4, #0]
 8004e08:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8004e0a:	9105      	str	r1, [sp, #20]
 8004e0c:	f001 f9de 	bl	80061cc <WS28xx::SetPixel(unsigned int, unsigned char, unsigned char, unsigned char, unsigned char)>
 8004e10:	9905      	ldr	r1, [sp, #20]
 8004e12:	3101      	adds	r1, #1
 8004e14:	e7b7      	b.n	8004d86 <WS28xxDmx::SetData(unsigned int, unsigned char const*, unsigned int)+0x6a>
 8004e16:	b007      	add	sp, #28
 8004e18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08004e1c <WS28xxDmx::FullOn()>:
 8004e1c:	b510      	push	{r4, lr}
 8004e1e:	4604      	mov	r4, r0
 8004e20:	f004 f9ac 	bl	800917c <gd32_spi_dma_tx_is_active()>
 8004e24:	2800      	cmp	r0, #0
 8004e26:	d1fb      	bne.n	8004e20 <WS28xxDmx::FullOn()+0x4>
 8004e28:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8004e2a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004e2e:	f001 bb9e 	b.w	800656e <WS28xx::FullOn()>

08004e32 <WS28xxDmx::Print()>:
 8004e32:	3004      	adds	r0, #4
 8004e34:	f7ff bf28 	b.w	8004c88 <PixelDmxConfiguration::Print()>

08004e38 <WS28xxDmx::Start(unsigned int)>:
 8004e38:	f890 3058 	ldrb.w	r3, [r0, #88]	; 0x58
 8004e3c:	b93b      	cbnz	r3, 8004e4e <WS28xxDmx::Start(unsigned int)+0x16>
 8004e3e:	2301      	movs	r3, #1
 8004e40:	f880 3058 	strb.w	r3, [r0, #88]	; 0x58
 8004e44:	6d40      	ldr	r0, [r0, #84]	; 0x54
 8004e46:	b110      	cbz	r0, 8004e4e <WS28xxDmx::Start(unsigned int)+0x16>
 8004e48:	6803      	ldr	r3, [r0, #0]
 8004e4a:	689b      	ldr	r3, [r3, #8]
 8004e4c:	4718      	bx	r3
 8004e4e:	4770      	bx	lr

08004e50 <WS28xxDmx::Stop(unsigned int)>:
 8004e50:	f890 3058 	ldrb.w	r3, [r0, #88]	; 0x58
 8004e54:	b13b      	cbz	r3, 8004e66 <WS28xxDmx::Stop(unsigned int)+0x16>
 8004e56:	2300      	movs	r3, #0
 8004e58:	f880 3058 	strb.w	r3, [r0, #88]	; 0x58
 8004e5c:	6d40      	ldr	r0, [r0, #84]	; 0x54
 8004e5e:	b110      	cbz	r0, 8004e66 <WS28xxDmx::Stop(unsigned int)+0x16>
 8004e60:	6803      	ldr	r3, [r0, #0]
 8004e62:	68db      	ldr	r3, [r3, #12]
 8004e64:	4718      	bx	r3
 8004e66:	4770      	bx	lr

08004e68 <WS28xxDmx::SetDmxStartAddress(unsigned short)>:
 8004e68:	f8b0 2048 	ldrh.w	r2, [r0, #72]	; 0x48
 8004e6c:	428a      	cmp	r2, r1
 8004e6e:	b508      	push	{r3, lr}
 8004e70:	d101      	bne.n	8004e76 <WS28xxDmx::SetDmxStartAddress(unsigned short)+0xe>
 8004e72:	2001      	movs	r0, #1
 8004e74:	bd08      	pop	{r3, pc}
 8004e76:	f8b0 204a 	ldrh.w	r2, [r0, #74]	; 0x4a
 8004e7a:	440a      	add	r2, r1
 8004e7c:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 8004e80:	dc0c      	bgt.n	8004e9c <WS28xxDmx::SetDmxStartAddress(unsigned short)+0x34>
 8004e82:	1e4a      	subs	r2, r1, #1
 8004e84:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 8004e88:	d208      	bcs.n	8004e9c <WS28xxDmx::SetDmxStartAddress(unsigned short)+0x34>
 8004e8a:	f8a0 1048 	strh.w	r1, [r0, #72]	; 0x48
 8004e8e:	6d00      	ldr	r0, [r0, #80]	; 0x50
 8004e90:	2800      	cmp	r0, #0
 8004e92:	d0ee      	beq.n	8004e72 <WS28xxDmx::SetDmxStartAddress(unsigned short)+0xa>
 8004e94:	6803      	ldr	r3, [r0, #0]
 8004e96:	69db      	ldr	r3, [r3, #28]
 8004e98:	4798      	blx	r3
 8004e9a:	e7ea      	b.n	8004e72 <WS28xxDmx::SetDmxStartAddress(unsigned short)+0xa>
 8004e9c:	2000      	movs	r0, #0
 8004e9e:	e7e9      	b.n	8004e74 <WS28xxDmx::SetDmxStartAddress(unsigned short)+0xc>

08004ea0 <WS28xxDmx::GetSlotInfo(unsigned short, lightset::SlotInfo&)>:
 8004ea0:	f8b0 304a 	ldrh.w	r3, [r0, #74]	; 0x4a
 8004ea4:	428b      	cmp	r3, r1
 8004ea6:	f04f 0300 	mov.w	r3, #0
 8004eaa:	d319      	bcc.n	8004ee0 <WS28xxDmx::GetSlotInfo(unsigned short, lightset::SlotInfo&)+0x40>
 8004eac:	7093      	strb	r3, [r2, #2]
 8004eae:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8004eb0:	fbb1 f0f3 	udiv	r0, r1, r3
 8004eb4:	fb03 1110 	mls	r1, r3, r0, r1
 8004eb8:	2903      	cmp	r1, #3
 8004eba:	d80e      	bhi.n	8004eda <WS28xxDmx::GetSlotInfo(unsigned short, lightset::SlotInfo&)+0x3a>
 8004ebc:	e8df f001 	tbb	[pc, r1]
 8004ec0:	0d0a0702 	stceq	7, cr0, [sl, #-8]
 8004ec4:	f240 2305 	movw	r3, #517	; 0x205
 8004ec8:	8013      	strh	r3, [r2, #0]
 8004eca:	2001      	movs	r0, #1
 8004ecc:	4770      	bx	lr
 8004ece:	f240 2306 	movw	r3, #518	; 0x206
 8004ed2:	e7f9      	b.n	8004ec8 <WS28xxDmx::GetSlotInfo(unsigned short, lightset::SlotInfo&)+0x28>
 8004ed4:	f240 2307 	movw	r3, #519	; 0x207
 8004ed8:	e7f6      	b.n	8004ec8 <WS28xxDmx::GetSlotInfo(unsigned short, lightset::SlotInfo&)+0x28>
 8004eda:	f240 2312 	movw	r3, #530	; 0x212
 8004ede:	e7f3      	b.n	8004ec8 <WS28xxDmx::GetSlotInfo(unsigned short, lightset::SlotInfo&)+0x28>
 8004ee0:	4618      	mov	r0, r3
 8004ee2:	4770      	bx	lr

08004ee4 <WS28xxDmx::WS28xxDmx(PixelDmxConfiguration&)>:
 8004ee4:	b570      	push	{r4, r5, r6, lr}
 8004ee6:	4605      	mov	r5, r0
 8004ee8:	4b19      	ldr	r3, [pc, #100]	; (8004f50 <WS28xxDmx::WS28xxDmx(PixelDmxConfiguration&)+0x6c>)
 8004eea:	f845 3b04 	str.w	r3, [r5], #4
 8004eee:	460e      	mov	r6, r1
 8004ef0:	4604      	mov	r4, r0
 8004ef2:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8004ef4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004ef6:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8004ef8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004efa:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8004efe:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8004f02:	2300      	movs	r3, #0
 8004f04:	e9c4 3313 	strd	r3, r3, [r4, #76]	; 0x4c
 8004f08:	6563      	str	r3, [r4, #84]	; 0x54
 8004f0a:	f8a4 3058 	strh.w	r3, [r4, #88]	; 0x58
 8004f0e:	4b11      	ldr	r3, [pc, #68]	; (8004f54 <WS28xxDmx::WS28xxDmx(PixelDmxConfiguration&)+0x70>)
 8004f10:	1d26      	adds	r6, r4, #4
 8004f12:	f104 0244 	add.w	r2, r4, #68	; 0x44
 8004f16:	601c      	str	r4, [r3, #0]
 8004f18:	2101      	movs	r1, #1
 8004f1a:	f104 0334 	add.w	r3, r4, #52	; 0x34
 8004f1e:	4630      	mov	r0, r6
 8004f20:	f7ff fe6e 	bl	8004c00 <PixelDmxConfiguration::Validate(unsigned int, unsigned int&, pixeldmxconfiguration::PortInfo&)>
 8004f24:	2028      	movs	r0, #40	; 0x28
 8004f26:	f002 fede 	bl	8007ce6 <operator new(unsigned int)>
 8004f2a:	4631      	mov	r1, r6
 8004f2c:	4605      	mov	r5, r0
 8004f2e:	f001 fa77 	bl	8006420 <WS28xx::WS28xx(PixelConfiguration&)>
 8004f32:	4628      	mov	r0, r5
 8004f34:	64e5      	str	r5, [r4, #76]	; 0x4c
 8004f36:	f001 fad3 	bl	80064e0 <WS28xx::Blackout()>
 8004f3a:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 8004f3c:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8004f3e:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
 8004f42:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8004f44:	fb13 f302 	smulbb	r3, r3, r2
 8004f48:	f8a4 304a 	strh.w	r3, [r4, #74]	; 0x4a
 8004f4c:	4620      	mov	r0, r4
 8004f4e:	bd70      	pop	{r4, r5, r6, pc}
 8004f50:	0800a788 	stmdaeq	r0, {r3, r7, r8, r9, sl, sp, pc}
 8004f54:	20000650 	andcs	r0, r0, r0, asr r6

08004f58 <PixelDmxParams::PixelDmxParams(PixelDmxParamsStore*)>:
 8004f58:	4a07      	ldr	r2, [pc, #28]	; (8004f78 <PixelDmxParams::PixelDmxParams(PixelDmxParamsStore*)+0x20>)
 8004f5a:	6001      	str	r1, [r0, #0]
 8004f5c:	2100      	movs	r1, #0
 8004f5e:	e9c0 1201 	strd	r1, r2, [r0, #4]
 8004f62:	4a06      	ldr	r2, [pc, #24]	; (8004f7c <PixelDmxParams::PixelDmxParams(PixelDmxParamsStore*)+0x24>)
 8004f64:	4906      	ldr	r1, [pc, #24]	; (8004f80 <PixelDmxParams::PixelDmxParams(PixelDmxParamsStore*)+0x28>)
 8004f66:	f04f 6c10 	mov.w	ip, #150994944	; 0x9000000
 8004f6a:	e9c0 c203 	strd	ip, r2, [r0, #12]
 8004f6e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8004f72:	e9c0 1205 	strd	r1, r2, [r0, #20]
 8004f76:	4770      	bx	lr
 8004f78:	0100aa03 	tsteq	r0, r3, lsl #20
 8004f7c:	01ff003d 	mvnseq	r0, sp, lsr r0
 8004f80:	06000100 	streq	r0, [r0], -r0, lsl #2

08004f84 <PixelDmxParams::Load()>:
 8004f84:	b508      	push	{r3, lr}
 8004f86:	2300      	movs	r3, #0
 8004f88:	4601      	mov	r1, r0
 8004f8a:	6043      	str	r3, [r0, #4]
 8004f8c:	6800      	ldr	r0, [r0, #0]
 8004f8e:	b120      	cbz	r0, 8004f9a <PixelDmxParams::Load()+0x16>
 8004f90:	6803      	ldr	r3, [r0, #0]
 8004f92:	3104      	adds	r1, #4
 8004f94:	68db      	ldr	r3, [r3, #12]
 8004f96:	4798      	blx	r3
 8004f98:	2001      	movs	r0, #1
 8004f9a:	bd08      	pop	{r3, pc}

08004f9c <PixelDmxParams::Set(PixelDmxConfiguration*)>:
 8004f9c:	6843      	ldr	r3, [r0, #4]
 8004f9e:	07da      	lsls	r2, r3, #31
 8004fa0:	bf44      	itt	mi
 8004fa2:	7a02      	ldrbmi	r2, [r0, #8]
 8004fa4:	600a      	strmi	r2, [r1, #0]
 8004fa6:	079a      	lsls	r2, r3, #30
 8004fa8:	d505      	bpl.n	8004fb6 <PixelDmxParams::Set(PixelDmxConfiguration*)+0x1a>
 8004faa:	f8b0 2009 	ldrh.w	r2, [r0, #9]
 8004fae:	2a00      	cmp	r2, #0
 8004fb0:	bf08      	it	eq
 8004fb2:	22aa      	moveq	r2, #170	; 0xaa
 8004fb4:	604a      	str	r2, [r1, #4]
 8004fb6:	059a      	lsls	r2, r3, #22
 8004fb8:	bf44      	itt	mi
 8004fba:	7dc2      	ldrbmi	r2, [r0, #23]
 8004fbc:	608a      	strmi	r2, [r1, #8]
 8004fbe:	055a      	lsls	r2, r3, #21
 8004fc0:	bf44      	itt	mi
 8004fc2:	7e02      	ldrbmi	r2, [r0, #24]
 8004fc4:	740a      	strbmi	r2, [r1, #16]
 8004fc6:	051a      	lsls	r2, r3, #20
 8004fc8:	bf44      	itt	mi
 8004fca:	7e42      	ldrbmi	r2, [r0, #25]
 8004fcc:	744a      	strbmi	r2, [r1, #17]
 8004fce:	06da      	lsls	r2, r3, #27
 8004fd0:	bf44      	itt	mi
 8004fd2:	f8d0 200e 	ldrmi.w	r2, [r0, #14]
 8004fd6:	60ca      	strmi	r2, [r1, #12]
 8004fd8:	069a      	lsls	r2, r3, #26
 8004fda:	bf44      	itt	mi
 8004fdc:	7c82      	ldrbmi	r2, [r0, #18]
 8004fde:	748a      	strbmi	r2, [r1, #18]
 8004fe0:	061a      	lsls	r2, r3, #24
 8004fe2:	d504      	bpl.n	8004fee <PixelDmxParams::Set(PixelDmxConfiguration*)+0x52>
 8004fe4:	2201      	movs	r2, #1
 8004fe6:	750a      	strb	r2, [r1, #20]
 8004fe8:	7b42      	ldrb	r2, [r0, #13]
 8004fea:	b102      	cbz	r2, 8004fee <PixelDmxParams::Set(PixelDmxConfiguration*)+0x52>
 8004fec:	74ca      	strb	r2, [r1, #19]
 8004fee:	075a      	lsls	r2, r3, #29
 8004ff0:	d50b      	bpl.n	800500a <PixelDmxParams::Set(PixelDmxConfiguration*)+0x6e>
 8004ff2:	7ac2      	ldrb	r2, [r0, #11]
 8004ff4:	b510      	push	{r4, lr}
 8004ff6:	7b04      	ldrb	r4, [r0, #12]
 8004ff8:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
 8004ffc:	858a      	strh	r2, [r1, #44]	; 0x2c
 8004ffe:	05da      	lsls	r2, r3, #23
 8005000:	bf44      	itt	mi
 8005002:	f8b0 3015 	ldrhmi.w	r3, [r0, #21]
 8005006:	620b      	strmi	r3, [r1, #32]
 8005008:	bd10      	pop	{r4, pc}
 800500a:	05db      	lsls	r3, r3, #23
 800500c:	bf44      	itt	mi
 800500e:	f8b0 3015 	ldrhmi.w	r3, [r0, #21]
 8005012:	620b      	strmi	r3, [r1, #32]
 8005014:	4770      	bx	lr

08005016 <PixelDmxParams::Dump()>:
 8005016:	4770      	bx	lr

08005018 <LightSet::Blackout(bool)>:
 8005018:	4770      	bx	lr

0800501a <LightSet::FullOn()>:
 800501a:	4770      	bx	lr

0800501c <LightSet::Print()>:
 800501c:	4770      	bx	lr

0800501e <PixelDmxParamsRdm::SetDmxStartAddress(unsigned short)>:
 800501e:	2000      	movs	r0, #0
 8005020:	4770      	bx	lr

08005022 <PixelDmxParamsRdm::GetDmxStartAddress()>:
 8005022:	2001      	movs	r0, #1
 8005024:	4770      	bx	lr

08005026 <PixelDmxParamsRdm::GetDmxFootprint()>:
 8005026:	2006      	movs	r0, #6
 8005028:	4770      	bx	lr

0800502a <PixelDmxParamsRdm::Stop(unsigned int)>:
 800502a:	4770      	bx	lr

0800502c <PixelDmxParamsRdm::GetSlotInfo(unsigned short, lightset::SlotInfo&)>:
 800502c:	2905      	cmp	r1, #5
 800502e:	f04f 0000 	mov.w	r0, #0
 8005032:	bf9f      	itttt	ls
 8005034:	f64f 73ff 	movwls	r3, #65535	; 0xffff
 8005038:	7090      	strbls	r0, [r2, #2]
 800503a:	8013      	strhls	r3, [r2, #0]
 800503c:	2001      	movls	r0, #1
 800503e:	4770      	bx	lr

08005040 <PixelDmxParamsRdm::~PixelDmxParamsRdm()>:
 8005040:	4770      	bx	lr

08005042 <PixelDmxParamsRdm::~PixelDmxParamsRdm()>:
 8005042:	b510      	push	{r4, lr}
 8005044:	4604      	mov	r4, r0
 8005046:	f002 fe4a 	bl	8007cde <operator delete(void*)>
 800504a:	4620      	mov	r0, r4
 800504c:	bd10      	pop	{r4, pc}
	...

08005050 <PixelDmxParamsRdm::PixelDmxParamsRdm(PixelDmxStore*)>:
 8005050:	4b02      	ldr	r3, [pc, #8]	; (800505c <PixelDmxParamsRdm::PixelDmxParamsRdm(PixelDmxStore*)+0xc>)
 8005052:	6003      	str	r3, [r0, #0]
 8005054:	4b02      	ldr	r3, [pc, #8]	; (8005060 <PixelDmxParamsRdm::PixelDmxParamsRdm(PixelDmxStore*)+0x10>)
 8005056:	6019      	str	r1, [r3, #0]
 8005058:	4770      	bx	lr
 800505a:	bf00      	nop
 800505c:	0800a7c0 	stmdaeq	r0, {r6, r7, r8, r9, sl, sp, pc}
 8005060:	20000654 	andcs	r0, r0, r4, asr r6

08005064 <PixelDmxParamsRdm::SetData(unsigned int, unsigned char const*, unsigned int)>:
 8005064:	2b05      	cmp	r3, #5
 8005066:	b570      	push	{r4, r5, r6, lr}
 8005068:	4606      	mov	r6, r0
 800506a:	4614      	mov	r4, r2
 800506c:	d934      	bls.n	80050d8 <PixelDmxParamsRdm::SetData(unsigned int, unsigned char const*, unsigned int)+0x74>
 800506e:	7953      	ldrb	r3, [r2, #5]
 8005070:	b933      	cbnz	r3, 8005080 <PixelDmxParamsRdm::SetData(unsigned int, unsigned char const*, unsigned int)+0x1c>
 8005072:	4a1a      	ldr	r2, [pc, #104]	; (80050dc <PixelDmxParamsRdm::SetData(unsigned int, unsigned char const*, unsigned int)+0x78>)
 8005074:	7013      	strb	r3, [r2, #0]
 8005076:	4621      	mov	r1, r4
 8005078:	4630      	mov	r0, r6
 800507a:	f7fb fe7d 	bl	8000d78 <PixelDmxParamsRdm::Display(unsigned char const*)>
 800507e:	e02b      	b.n	80050d8 <PixelDmxParamsRdm::SetData(unsigned int, unsigned char const*, unsigned int)+0x74>
 8005080:	2bff      	cmp	r3, #255	; 0xff
 8005082:	d124      	bne.n	80050ce <PixelDmxParamsRdm::SetData(unsigned int, unsigned char const*, unsigned int)+0x6a>
 8005084:	4a15      	ldr	r2, [pc, #84]	; (80050dc <PixelDmxParamsRdm::SetData(unsigned int, unsigned char const*, unsigned int)+0x78>)
 8005086:	7811      	ldrb	r1, [r2, #0]
 8005088:	2900      	cmp	r1, #0
 800508a:	d1f4      	bne.n	8005076 <PixelDmxParamsRdm::SetData(unsigned int, unsigned char const*, unsigned int)+0x12>
 800508c:	4d14      	ldr	r5, [pc, #80]	; (80050e0 <PixelDmxParamsRdm::SetData(unsigned int, unsigned char const*, unsigned int)+0x7c>)
 800508e:	7013      	strb	r3, [r2, #0]
 8005090:	6828      	ldr	r0, [r5, #0]
 8005092:	7821      	ldrb	r1, [r4, #0]
 8005094:	6803      	ldr	r3, [r0, #0]
 8005096:	290e      	cmp	r1, #14
 8005098:	bf28      	it	cs
 800509a:	210e      	movcs	r1, #14
 800509c:	689b      	ldr	r3, [r3, #8]
 800509e:	4798      	blx	r3
 80050a0:	6828      	ldr	r0, [r5, #0]
 80050a2:	7861      	ldrb	r1, [r4, #1]
 80050a4:	6803      	ldr	r3, [r0, #0]
 80050a6:	68db      	ldr	r3, [r3, #12]
 80050a8:	4798      	blx	r3
 80050aa:	6828      	ldr	r0, [r5, #0]
 80050ac:	78a1      	ldrb	r1, [r4, #2]
 80050ae:	6803      	ldr	r3, [r0, #0]
 80050b0:	691b      	ldr	r3, [r3, #16]
 80050b2:	4798      	blx	r3
 80050b4:	6828      	ldr	r0, [r5, #0]
 80050b6:	78e1      	ldrb	r1, [r4, #3]
 80050b8:	6803      	ldr	r3, [r0, #0]
 80050ba:	2906      	cmp	r1, #6
 80050bc:	695b      	ldr	r3, [r3, #20]
 80050be:	bf28      	it	cs
 80050c0:	2106      	movcs	r1, #6
 80050c2:	4798      	blx	r3
 80050c4:	6828      	ldr	r0, [r5, #0]
 80050c6:	7921      	ldrb	r1, [r4, #4]
 80050c8:	6803      	ldr	r3, [r0, #0]
 80050ca:	699b      	ldr	r3, [r3, #24]
 80050cc:	4798      	blx	r3
 80050ce:	7963      	ldrb	r3, [r4, #5]
 80050d0:	3b01      	subs	r3, #1
 80050d2:	b2db      	uxtb	r3, r3
 80050d4:	2bfd      	cmp	r3, #253	; 0xfd
 80050d6:	d8ce      	bhi.n	8005076 <PixelDmxParamsRdm::SetData(unsigned int, unsigned char const*, unsigned int)+0x12>
 80050d8:	bd70      	pop	{r4, r5, r6, pc}
 80050da:	bf00      	nop
 80050dc:	20000658 	andcs	r0, r0, r8, asr r6
 80050e0:	20000654 	andcs	r0, r0, r4, asr r6

080050e4 <PixelConfiguration::GetTxH(pixel::Type, unsigned char&, unsigned char&)>:
 80050e4:	23c0      	movs	r3, #192	; 0xc0
 80050e6:	2803      	cmp	r0, #3
 80050e8:	700b      	strb	r3, [r1, #0]
 80050ea:	d006      	beq.n	80050fa <PixelConfiguration::GetTxH(pixel::Type, unsigned char&, unsigned char&)+0x16>
 80050ec:	3808      	subs	r0, #8
 80050ee:	2803      	cmp	r0, #3
 80050f0:	bf34      	ite	cc
 80050f2:	23fc      	movcc	r3, #252	; 0xfc
 80050f4:	23f0      	movcs	r3, #240	; 0xf0
 80050f6:	7013      	strb	r3, [r2, #0]
 80050f8:	4770      	bx	lr
 80050fa:	23f8      	movs	r3, #248	; 0xf8
 80050fc:	e7fb      	b.n	80050f6 <PixelConfiguration::GetTxH(pixel::Type, unsigned char&, unsigned char&)+0x12>
	...

08005100 <PixelConfiguration::Validate(unsigned int&)>:
 8005100:	b513      	push	{r0, r1, r4, lr}
 8005102:	4604      	mov	r4, r0
 8005104:	6800      	ldr	r0, [r0, #0]
 8005106:	6863      	ldr	r3, [r4, #4]
 8005108:	68a2      	ldr	r2, [r4, #8]
 800510a:	2807      	cmp	r0, #7
 800510c:	d127      	bne.n	800515e <PixelConfiguration::Validate(unsigned int&)+0x5e>
 800510e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005112:	bf28      	it	cs
 8005114:	f44f 7300 	movcs.w	r3, #512	; 0x200
 8005118:	6063      	str	r3, [r4, #4]
 800511a:	2304      	movs	r3, #4
 800511c:	600b      	str	r3, [r1, #0]
 800511e:	2301      	movs	r3, #1
 8005120:	2a06      	cmp	r2, #6
 8005122:	7563      	strb	r3, [r4, #21]
 8005124:	d102      	bne.n	800512c <PixelConfiguration::Validate(unsigned int&)+0x2c>
 8005126:	f000 f901 	bl	800532c <PixelType::GetMap(pixel::Type)>
 800512a:	60a0      	str	r0, [r4, #8]
 800512c:	7c63      	ldrb	r3, [r4, #17]
 800512e:	7c22      	ldrb	r2, [r4, #16]
 8005130:	6820      	ldr	r0, [r4, #0]
 8005132:	429a      	cmp	r2, r3
 8005134:	bf24      	itt	cs
 8005136:	2300      	movcs	r3, #0
 8005138:	8223      	strhcs	r3, [r4, #16]
 800513a:	f10d 0207 	add.w	r2, sp, #7
 800513e:	f10d 0106 	add.w	r1, sp, #6
 8005142:	f7ff ffcf 	bl	80050e4 <PixelConfiguration::GetTxH(pixel::Type, unsigned char&, unsigned char&)>
 8005146:	7c23      	ldrb	r3, [r4, #16]
 8005148:	b913      	cbnz	r3, 8005150 <PixelConfiguration::Validate(unsigned int&)+0x50>
 800514a:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800514e:	7423      	strb	r3, [r4, #16]
 8005150:	7c63      	ldrb	r3, [r4, #17]
 8005152:	b913      	cbnz	r3, 800515a <PixelConfiguration::Validate(unsigned int&)+0x5a>
 8005154:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8005158:	7463      	strb	r3, [r4, #17]
 800515a:	4b2a      	ldr	r3, [pc, #168]	; (8005204 <PixelConfiguration::Validate(unsigned int&)+0x104>)
 800515c:	e01e      	b.n	800519c <PixelConfiguration::Validate(unsigned int&)+0x9c>
 800515e:	f5b3 7f2a 	cmp.w	r3, #680	; 0x2a8
 8005162:	bf28      	it	cs
 8005164:	f44f 732a 	movcs.w	r3, #680	; 0x2a8
 8005168:	6063      	str	r3, [r4, #4]
 800516a:	2303      	movs	r3, #3
 800516c:	600b      	str	r3, [r1, #0]
 800516e:	f1a0 030b 	sub.w	r3, r0, #11
 8005172:	2b01      	cmp	r3, #1
 8005174:	d806      	bhi.n	8005184 <PixelConfiguration::Validate(unsigned int&)+0x84>
 8005176:	7ca3      	ldrb	r3, [r4, #18]
 8005178:	2b1f      	cmp	r3, #31
 800517a:	d83d      	bhi.n	80051f8 <PixelConfiguration::Validate(unsigned int&)+0xf8>
 800517c:	f043 03e0 	orr.w	r3, r3, #224	; 0xe0
 8005180:	74a3      	strb	r3, [r4, #18]
 8005182:	e001      	b.n	8005188 <PixelConfiguration::Validate(unsigned int&)+0x88>
 8005184:	2800      	cmp	r0, #0
 8005186:	d139      	bne.n	80051fc <PixelConfiguration::Validate(unsigned int&)+0xfc>
 8005188:	2300      	movs	r3, #0
 800518a:	2a06      	cmp	r2, #6
 800518c:	bf08      	it	eq
 800518e:	60a3      	streq	r3, [r4, #8]
 8005190:	280d      	cmp	r0, #13
 8005192:	7563      	strb	r3, [r4, #21]
 8005194:	68e3      	ldr	r3, [r4, #12]
 8005196:	d119      	bne.n	80051cc <PixelConfiguration::Validate(unsigned int&)+0xcc>
 8005198:	b913      	cbnz	r3, 80051a0 <PixelConfiguration::Validate(unsigned int&)+0xa0>
 800519a:	4b1b      	ldr	r3, [pc, #108]	; (8005208 <PixelConfiguration::Validate(unsigned int&)+0x108>)
 800519c:	60e3      	str	r3, [r4, #12]
 800519e:	e003      	b.n	80051a8 <PixelConfiguration::Validate(unsigned int&)+0xa8>
 80051a0:	4a1a      	ldr	r2, [pc, #104]	; (800520c <PixelConfiguration::Validate(unsigned int&)+0x10c>)
 80051a2:	4293      	cmp	r3, r2
 80051a4:	d900      	bls.n	80051a8 <PixelConfiguration::Validate(unsigned int&)+0xa8>
 80051a6:	60e2      	str	r2, [r4, #12]
 80051a8:	7d23      	ldrb	r3, [r4, #20]
 80051aa:	b31b      	cbz	r3, 80051f4 <PixelConfiguration::Validate(unsigned int&)+0xf4>
 80051ac:	7ce3      	ldrb	r3, [r4, #19]
 80051ae:	b9ab      	cbnz	r3, 80051dc <PixelConfiguration::Validate(unsigned int&)+0xdc>
 80051b0:	6822      	ldr	r2, [r4, #0]
 80051b2:	b17a      	cbz	r2, 80051d4 <PixelConfiguration::Validate(unsigned int&)+0xd4>
 80051b4:	f1a2 030b 	sub.w	r3, r2, #11
 80051b8:	2b01      	cmp	r3, #1
 80051ba:	d90d      	bls.n	80051d8 <PixelConfiguration::Validate(unsigned int&)+0xd8>
 80051bc:	4b14      	ldr	r3, [pc, #80]	; (8005210 <PixelConfiguration::Validate(unsigned int&)+0x110>)
 80051be:	4915      	ldr	r1, [pc, #84]	; (8005214 <PixelConfiguration::Validate(unsigned int&)+0x114>)
 80051c0:	2a0d      	cmp	r2, #13
 80051c2:	bf08      	it	eq
 80051c4:	460b      	moveq	r3, r1
 80051c6:	61a3      	str	r3, [r4, #24]
 80051c8:	b002      	add	sp, #8
 80051ca:	bd10      	pop	{r4, pc}
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d0e4      	beq.n	800519a <PixelConfiguration::Validate(unsigned int&)+0x9a>
 80051d0:	4a11      	ldr	r2, [pc, #68]	; (8005218 <PixelConfiguration::Validate(unsigned int&)+0x118>)
 80051d2:	e7e6      	b.n	80051a2 <PixelConfiguration::Validate(unsigned int&)+0xa2>
 80051d4:	4b11      	ldr	r3, [pc, #68]	; (800521c <PixelConfiguration::Validate(unsigned int&)+0x11c>)
 80051d6:	e7f6      	b.n	80051c6 <PixelConfiguration::Validate(unsigned int&)+0xc6>
 80051d8:	4b11      	ldr	r3, [pc, #68]	; (8005220 <PixelConfiguration::Validate(unsigned int&)+0x120>)
 80051da:	e7f4      	b.n	80051c6 <PixelConfiguration::Validate(unsigned int&)+0xc6>
 80051dc:	f1a3 0214 	sub.w	r2, r3, #20
 80051e0:	2a05      	cmp	r2, #5
 80051e2:	d807      	bhi.n	80051f4 <PixelConfiguration::Validate(unsigned int&)+0xf4>
 80051e4:	3b15      	subs	r3, #21
 80051e6:	2b04      	cmp	r3, #4
 80051e8:	bf96      	itet	ls
 80051ea:	4a0e      	ldrls	r2, [pc, #56]	; (8005224 <PixelConfiguration::Validate(unsigned int&)+0x124>)
 80051ec:	4b0e      	ldrhi	r3, [pc, #56]	; (8005228 <PixelConfiguration::Validate(unsigned int&)+0x128>)
 80051ee:	f852 3023 	ldrls.w	r3, [r2, r3, lsl #2]
 80051f2:	e7e8      	b.n	80051c6 <PixelConfiguration::Validate(unsigned int&)+0xc6>
 80051f4:	4b07      	ldr	r3, [pc, #28]	; (8005214 <PixelConfiguration::Validate(unsigned int&)+0x114>)
 80051f6:	e7e6      	b.n	80051c6 <PixelConfiguration::Validate(unsigned int&)+0xc6>
 80051f8:	23ff      	movs	r3, #255	; 0xff
 80051fa:	e7c1      	b.n	8005180 <PixelConfiguration::Validate(unsigned int&)+0x80>
 80051fc:	280d      	cmp	r0, #13
 80051fe:	d18e      	bne.n	800511e <PixelConfiguration::Validate(unsigned int&)+0x1e>
 8005200:	e7c2      	b.n	8005188 <PixelConfiguration::Validate(unsigned int&)+0x88>
 8005202:	bf00      	nop
 8005204:	0061a800 	rsbeq	sl, r1, r0, lsl #16
 8005208:	003d0900 	eorseq	r0, sp, r0, lsl #18
 800520c:	00e4e1c0 	rsceq	lr, r4, r0, asr #3
 8005210:	0800abc4 	stmdaeq	r0, {r2, r6, r7, r8, r9, fp, sp, pc}
 8005214:	0800a8c4 	stmdaeq	r0, {r2, r6, r7, fp, sp, pc}
 8005218:	017d7840 	cmneq	sp, r0, asr #16
 800521c:	0800aec4 	stmdaeq	r0, {r2, r6, r7, r9, sl, fp, sp, pc}
 8005220:	0800afc4 	stmdaeq	r0, {r2, r6, r7, r8, r9, sl, fp, sp, pc}
 8005224:	0800a8b0 	stmdaeq	r0, {r4, r5, r7, fp, sp, pc}
 8005228:	0800a9c4 	stmdaeq	r0, {r2, r6, r7, r8, fp, sp, pc}

0800522c <PixelConfiguration::Print()>:
 800522c:	b513      	push	{r0, r1, r4, lr}
 800522e:	4604      	mov	r4, r0
 8005230:	4827      	ldr	r0, [pc, #156]	; (80052d0 <PixelConfiguration::Print()+0xa4>)
 8005232:	f7fc faf7 	bl	8001824 <printf>
 8005236:	6820      	ldr	r0, [r4, #0]
 8005238:	f000 f860 	bl	80052fc <PixelType::GetType(pixel::Type)>
 800523c:	6822      	ldr	r2, [r4, #0]
 800523e:	4601      	mov	r1, r0
 8005240:	4824      	ldr	r0, [pc, #144]	; (80052d4 <PixelConfiguration::Print()+0xa8>)
 8005242:	f7fc faef 	bl	8001824 <printf>
 8005246:	6861      	ldr	r1, [r4, #4]
 8005248:	4823      	ldr	r0, [pc, #140]	; (80052d8 <PixelConfiguration::Print()+0xac>)
 800524a:	f7fc faeb 	bl	8001824 <printf>
 800524e:	7d63      	ldrb	r3, [r4, #21]
 8005250:	2b00      	cmp	r3, #0
 8005252:	d034      	beq.n	80052be <PixelConfiguration::Print()+0x92>
 8005254:	68a0      	ldr	r0, [r4, #8]
 8005256:	f000 f85d 	bl	8005314 <PixelType::GetMap(pixel::Map)>
 800525a:	68a2      	ldr	r2, [r4, #8]
 800525c:	4601      	mov	r1, r0
 800525e:	481f      	ldr	r0, [pc, #124]	; (80052dc <PixelConfiguration::Print()+0xb0>)
 8005260:	f7fc fae0 	bl	8001824 <printf>
 8005264:	7c20      	ldrb	r0, [r4, #16]
 8005266:	f000 f86b 	bl	8005340 <PixelType::ConvertTxH(unsigned char)>
 800526a:	ee10 0a10 	vmov	r0, s0
 800526e:	f7fb f969 	bl	8000544 <__aeabi_f2d>
 8005272:	460b      	mov	r3, r1
 8005274:	7c21      	ldrb	r1, [r4, #16]
 8005276:	9100      	str	r1, [sp, #0]
 8005278:	4602      	mov	r2, r0
 800527a:	4819      	ldr	r0, [pc, #100]	; (80052e0 <PixelConfiguration::Print()+0xb4>)
 800527c:	f7fc fad2 	bl	8001824 <printf>
 8005280:	7c60      	ldrb	r0, [r4, #17]
 8005282:	f000 f85d 	bl	8005340 <PixelType::ConvertTxH(unsigned char)>
 8005286:	ee10 0a10 	vmov	r0, s0
 800528a:	f7fb f95b 	bl	8000544 <__aeabi_f2d>
 800528e:	460b      	mov	r3, r1
 8005290:	7c61      	ldrb	r1, [r4, #17]
 8005292:	9100      	str	r1, [sp, #0]
 8005294:	4602      	mov	r2, r0
 8005296:	4813      	ldr	r0, [pc, #76]	; (80052e4 <PixelConfiguration::Print()+0xb8>)
 8005298:	f7fc fac4 	bl	8001824 <printf>
 800529c:	7d21      	ldrb	r1, [r4, #20]
 800529e:	4a12      	ldr	r2, [pc, #72]	; (80052e8 <PixelConfiguration::Print()+0xbc>)
 80052a0:	4b12      	ldr	r3, [pc, #72]	; (80052ec <PixelConfiguration::Print()+0xc0>)
 80052a2:	4813      	ldr	r0, [pc, #76]	; (80052f0 <PixelConfiguration::Print()+0xc4>)
 80052a4:	2900      	cmp	r1, #0
 80052a6:	bf14      	ite	ne
 80052a8:	4611      	movne	r1, r2
 80052aa:	4619      	moveq	r1, r3
 80052ac:	f7fc faba 	bl	8001824 <printf>
 80052b0:	68e1      	ldr	r1, [r4, #12]
 80052b2:	4810      	ldr	r0, [pc, #64]	; (80052f4 <PixelConfiguration::Print()+0xc8>)
 80052b4:	b002      	add	sp, #8
 80052b6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80052ba:	f7fc bab3 	b.w	8001824 <printf>
 80052be:	6823      	ldr	r3, [r4, #0]
 80052c0:	3b0b      	subs	r3, #11
 80052c2:	2b01      	cmp	r3, #1
 80052c4:	d8ea      	bhi.n	800529c <PixelConfiguration::Print()+0x70>
 80052c6:	7ca1      	ldrb	r1, [r4, #18]
 80052c8:	480b      	ldr	r0, [pc, #44]	; (80052f8 <PixelConfiguration::Print()+0xcc>)
 80052ca:	f7fc faab 	bl	8001824 <printf>
 80052ce:	e7e5      	b.n	800529c <PixelConfiguration::Print()+0x70>
 80052d0:	0800a7f7 	stmdaeq	r0, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, sp, pc}
 80052d4:	0800a80c 	stmdaeq	r0, {r2, r3, fp, sp, pc}
 80052d8:	0800a820 	stmdaeq	r0, {r5, fp, sp, pc}
 80052dc:	0800a82f 	stmdaeq	r0, {r0, r1, r2, r3, r5, fp, sp, pc}
 80052e0:	0800a843 	stmdaeq	r0, {r0, r1, r6, fp, sp, pc}
 80052e4:	0800a85b 	stmdaeq	r0, {r0, r1, r3, r4, r6, fp, sp, pc}
 80052e8:	0800a7f0 	stmdaeq	r0, {r4, r5, r6, r7, r8, r9, sl, sp, pc}
 80052ec:	0800a7f4 	stmdaeq	r0, {r2, r4, r5, r6, r7, r8, r9, sl, sp, pc}
 80052f0:	0800a88a 	stmdaeq	r0, {r1, r3, r7, fp, sp, pc}
 80052f4:	0800a8a0 	stmdaeq	r0, {r5, r7, fp, sp, pc}
 80052f8:	0800a873 	stmdaeq	r0, {r0, r1, r4, r5, r6, fp, sp, pc}

080052fc <PixelType::GetType(pixel::Type)>:
 80052fc:	280d      	cmp	r0, #13
 80052fe:	bfda      	itte	le
 8005300:	4b02      	ldrle	r3, [pc, #8]	; (800530c <PixelType::GetType(pixel::Type)+0x10>)
 8005302:	eb03 00c0 	addle.w	r0, r3, r0, lsl #3
 8005306:	4802      	ldrgt	r0, [pc, #8]	; (8005310 <PixelType::GetType(pixel::Type)+0x14>)
 8005308:	4770      	bx	lr
 800530a:	bf00      	nop
 800530c:	0800b0ee 	stmdaeq	r0, {r1, r2, r3, r5, r6, r7, ip, sp, pc}
 8005310:	0800b0c4 	stmdaeq	r0, {r2, r6, r7, ip, sp, pc}

08005314 <PixelType::GetMap(pixel::Map)>:
 8005314:	2805      	cmp	r0, #5
 8005316:	bfda      	itte	le
 8005318:	4b02      	ldrle	r3, [pc, #8]	; (8005324 <PixelType::GetMap(pixel::Map)+0x10>)
 800531a:	eb03 0080 	addle.w	r0, r3, r0, lsl #2
 800531e:	4802      	ldrgt	r0, [pc, #8]	; (8005328 <PixelType::GetMap(pixel::Map)+0x14>)
 8005320:	4770      	bx	lr
 8005322:	bf00      	nop
 8005324:	0800b0d6 	stmdaeq	r0, {r1, r2, r4, r6, r7, ip, sp, pc}
 8005328:	08009a27 	stmdaeq	r0, {r0, r1, r2, r5, r9, fp, ip, pc}

0800532c <PixelType::GetMap(pixel::Type)>:
 800532c:	3801      	subs	r0, #1
 800532e:	2809      	cmp	r0, #9
 8005330:	bf9a      	itte	ls
 8005332:	4b02      	ldrls	r3, [pc, #8]	; (800533c <PixelType::GetMap(pixel::Type)+0x10>)
 8005334:	5618      	ldrsbls	r0, [r3, r0]
 8005336:	2002      	movhi	r0, #2
 8005338:	4770      	bx	lr
 800533a:	bf00      	nop
 800533c:	0800b0cc 	stmdaeq	r0, {r2, r3, r6, r7, ip, sp, pc}

08005340 <PixelType::ConvertTxH(unsigned char)>:
 8005340:	28f0      	cmp	r0, #240	; 0xf0
 8005342:	d017      	beq.n	8005374 <PixelType::ConvertTxH(unsigned char)+0x34>
 8005344:	d80c      	bhi.n	8005360 <PixelType::ConvertTxH(unsigned char)+0x20>
 8005346:	28c0      	cmp	r0, #192	; 0xc0
 8005348:	d017      	beq.n	800537a <PixelType::ConvertTxH(unsigned char)+0x3a>
 800534a:	28e0      	cmp	r0, #224	; 0xe0
 800534c:	d018      	beq.n	8005380 <PixelType::ConvertTxH(unsigned char)+0x40>
 800534e:	ed9f 0a11 	vldr	s0, [pc, #68]	; 8005394 <PixelType::ConvertTxH(unsigned char)+0x54>
 8005352:	2880      	cmp	r0, #128	; 0x80
 8005354:	eef4 7a04 	vmov.f32	s15, #68	; 0x3e200000  0.1562500
 8005358:	bf08      	it	eq
 800535a:	eeb0 0a67 	vmoveq.f32	s0, s15
 800535e:	4770      	bx	lr
 8005360:	28fc      	cmp	r0, #252	; 0xfc
 8005362:	d010      	beq.n	8005386 <PixelType::ConvertTxH(unsigned char)+0x46>
 8005364:	28fe      	cmp	r0, #254	; 0xfe
 8005366:	d011      	beq.n	800538c <PixelType::ConvertTxH(unsigned char)+0x4c>
 8005368:	ed9f 0a0a 	vldr	s0, [pc, #40]	; 8005394 <PixelType::ConvertTxH(unsigned char)+0x54>
 800536c:	28f8      	cmp	r0, #248	; 0xf8
 800536e:	eef6 7a09 	vmov.f32	s15, #105	; 0x3f480000  0.7812500
 8005372:	e7f1      	b.n	8005358 <PixelType::ConvertTxH(unsigned char)+0x18>
 8005374:	eeb6 0a04 	vmov.f32	s0, #100	; 0x3f200000  0.625
 8005378:	4770      	bx	lr
 800537a:	eeb5 0a04 	vmov.f32	s0, #84	; 0x3ea00000  0.3125000
 800537e:	4770      	bx	lr
 8005380:	eeb5 0a0e 	vmov.f32	s0, #94	; 0x3ef00000  0.4687500
 8005384:	4770      	bx	lr
 8005386:	eeb6 0a0e 	vmov.f32	s0, #110	; 0x3f700000  0.9375000
 800538a:	4770      	bx	lr
 800538c:	ed9f 0a02 	vldr	s0, [pc, #8]	; 8005398 <PixelType::ConvertTxH(unsigned char)+0x58>
 8005390:	4770      	bx	lr
 8005392:	bf00      	nop
 8005394:	00000000 	andeq	r0, r0, r0
 8005398:	3f8c0000 	svccc	0x008c0000

0800539c <PixelPatterns::SetPixelColour(unsigned int, unsigned int, unsigned int) [clone .isra.0]>:
 800539c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800539e:	f3c1 2307 	ubfx	r3, r1, #8, #8
 80053a2:	f3c1 4207 	ubfx	r2, r1, #16, #8
 80053a6:	b2cc      	uxtb	r4, r1
 80053a8:	490e      	ldr	r1, [pc, #56]	; (80053e4 <PixelPatterns::SetPixelColour(unsigned int, unsigned int, unsigned int) [clone .isra.0]+0x48>)
 80053aa:	4605      	mov	r5, r0
 80053ac:	6808      	ldr	r0, [r1, #0]
 80053ae:	6801      	ldr	r1, [r0, #0]
 80053b0:	2907      	cmp	r1, #7
 80053b2:	d005      	beq.n	80053c0 <PixelPatterns::SetPixelColour(unsigned int, unsigned int, unsigned int) [clone .isra.0]+0x24>
 80053b4:	9400      	str	r4, [sp, #0]
 80053b6:	4629      	mov	r1, r5
 80053b8:	f000 fa8e 	bl	80058d8 <WS28xx::SetPixel(unsigned int, unsigned char, unsigned char, unsigned char)>
 80053bc:	b003      	add	sp, #12
 80053be:	bd30      	pop	{r4, r5, pc}
 80053c0:	429a      	cmp	r2, r3
 80053c2:	f04f 0100 	mov.w	r1, #0
 80053c6:	d109      	bne.n	80053dc <PixelPatterns::SetPixelColour(unsigned int, unsigned int, unsigned int) [clone .isra.0]+0x40>
 80053c8:	42a2      	cmp	r2, r4
 80053ca:	d107      	bne.n	80053dc <PixelPatterns::SetPixelColour(unsigned int, unsigned int, unsigned int) [clone .isra.0]+0x40>
 80053cc:	e9cd 1200 	strd	r1, r2, [sp]
 80053d0:	460b      	mov	r3, r1
 80053d2:	460a      	mov	r2, r1
 80053d4:	4629      	mov	r1, r5
 80053d6:	f000 fef9 	bl	80061cc <WS28xx::SetPixel(unsigned int, unsigned char, unsigned char, unsigned char, unsigned char)>
 80053da:	e7ef      	b.n	80053bc <PixelPatterns::SetPixelColour(unsigned int, unsigned int, unsigned int) [clone .isra.0]+0x20>
 80053dc:	e9cd 4100 	strd	r4, r1, [sp]
 80053e0:	e7f8      	b.n	80053d4 <PixelPatterns::SetPixelColour(unsigned int, unsigned int, unsigned int) [clone .isra.0]+0x38>
 80053e2:	bf00      	nop
 80053e4:	20000688 	andcs	r0, r0, r8, lsl #13

080053e8 <PixelPatterns::Clear(unsigned int) [clone .isra.0]>:
 80053e8:	b538      	push	{r3, r4, r5, lr}
 80053ea:	4d06      	ldr	r5, [pc, #24]	; (8005404 <PixelPatterns::Clear(unsigned int) [clone .isra.0]+0x1c>)
 80053ec:	2400      	movs	r4, #0
 80053ee:	682b      	ldr	r3, [r5, #0]
 80053f0:	429c      	cmp	r4, r3
 80053f2:	d300      	bcc.n	80053f6 <PixelPatterns::Clear(unsigned int) [clone .isra.0]+0xe>
 80053f4:	bd38      	pop	{r3, r4, r5, pc}
 80053f6:	4620      	mov	r0, r4
 80053f8:	2100      	movs	r1, #0
 80053fa:	f7ff ffcf 	bl	800539c <PixelPatterns::SetPixelColour(unsigned int, unsigned int, unsigned int) [clone .isra.0]>
 80053fe:	3401      	adds	r4, #1
 8005400:	e7f5      	b.n	80053ee <PixelPatterns::Clear(unsigned int) [clone .isra.0]+0x6>
 8005402:	bf00      	nop
 8005404:	20000684 	andcs	r0, r0, r4, lsl #13

08005408 <PixelPatterns::PixelPatterns(unsigned int)>:
 8005408:	4b09      	ldr	r3, [pc, #36]	; (8005430 <PixelPatterns::PixelPatterns(unsigned int)+0x28>)
 800540a:	4a0a      	ldr	r2, [pc, #40]	; (8005434 <PixelPatterns::PixelPatterns(unsigned int)+0x2c>)
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	6013      	str	r3, [r2, #0]
 8005410:	2901      	cmp	r1, #1
 8005412:	4a09      	ldr	r2, [pc, #36]	; (8005438 <PixelPatterns::PixelPatterns(unsigned int)+0x30>)
 8005414:	bf28      	it	cs
 8005416:	2101      	movcs	r1, #1
 8005418:	6011      	str	r1, [r2, #0]
 800541a:	685a      	ldr	r2, [r3, #4]
 800541c:	4b07      	ldr	r3, [pc, #28]	; (800543c <PixelPatterns::PixelPatterns(unsigned int)+0x34>)
 800541e:	601a      	str	r2, [r3, #0]
 8005420:	4b07      	ldr	r3, [pc, #28]	; (8005440 <PixelPatterns::PixelPatterns(unsigned int)+0x38>)
 8005422:	6819      	ldr	r1, [r3, #0]
 8005424:	4b07      	ldr	r3, [pc, #28]	; (8005444 <PixelPatterns::PixelPatterns(unsigned int)+0x3c>)
 8005426:	2200      	movs	r2, #0
 8005428:	61da      	str	r2, [r3, #28]
 800542a:	6019      	str	r1, [r3, #0]
 800542c:	619a      	str	r2, [r3, #24]
 800542e:	4770      	bx	lr
 8005430:	20000698 	mulcs	r0, r8, r6
 8005434:	20000688 	andcs	r0, r0, r8, lsl #13
 8005438:	2000067c 	andcs	r0, r0, ip, ror r6
 800543c:	20000684 	andcs	r0, r0, r4, lsl #13
 8005440:	2000181c 	andcs	r1, r0, ip, lsl r8
 8005444:	2000065c 	andcs	r0, r0, ip, asr r6

08005448 <PixelPatterns::GetName(pixelpatterns::Pattern)>:
 8005448:	2805      	cmp	r0, #5
 800544a:	bfdd      	ittte	le
 800544c:	4b02      	ldrle	r3, [pc, #8]	; (8005458 <PixelPatterns::GetName(pixelpatterns::Pattern)+0x10>)
 800544e:	220e      	movle	r2, #14
 8005450:	fb02 3000 	mlale	r0, r2, r0, r3
 8005454:	4801      	ldrgt	r0, [pc, #4]	; (800545c <PixelPatterns::GetName(pixelpatterns::Pattern)+0x14>)
 8005456:	4770      	bx	lr
 8005458:	0800b15e 	stmdaeq	r0, {r1, r2, r3, r4, r6, r8, ip, sp, pc}
 800545c:	0800b0c4 	stmdaeq	r0, {r2, r6, r7, ip, sp, pc}

08005460 <PixelPatterns::RainbowCycle(unsigned int, unsigned int, pixelpatterns::Direction)>:
 8005460:	b570      	push	{r4, r5, r6, lr}
 8005462:	460e      	mov	r6, r1
 8005464:	4615      	mov	r5, r2
 8005466:	461c      	mov	r4, r3
 8005468:	f7ff ffbe 	bl	80053e8 <PixelPatterns::Clear(unsigned int) [clone .isra.0]>
 800546c:	4905      	ldr	r1, [pc, #20]	; (8005484 <PixelPatterns::RainbowCycle(unsigned int, unsigned int, pixelpatterns::Direction)+0x24>)
 800546e:	eb01 1146 	add.w	r1, r1, r6, lsl #5
 8005472:	2301      	movs	r3, #1
 8005474:	61cb      	str	r3, [r1, #28]
 8005476:	22ff      	movs	r2, #255	; 0xff
 8005478:	2300      	movs	r3, #0
 800547a:	e9c1 2304 	strd	r2, r3, [r1, #16]
 800547e:	604d      	str	r5, [r1, #4]
 8005480:	618c      	str	r4, [r1, #24]
 8005482:	bd70      	pop	{r4, r5, r6, pc}
 8005484:	2000065c 	andcs	r0, r0, ip, asr r6

08005488 <PixelPatterns::TheaterChase(unsigned int, unsigned int, unsigned int, unsigned int, pixelpatterns::Direction)>:
 8005488:	b570      	push	{r4, r5, r6, lr}
 800548a:	460e      	mov	r6, r1
 800548c:	461c      	mov	r4, r3
 800548e:	4615      	mov	r5, r2
 8005490:	f7ff ffaa 	bl	80053e8 <PixelPatterns::Clear(unsigned int) [clone .isra.0]>
 8005494:	4908      	ldr	r1, [pc, #32]	; (80054b8 <PixelPatterns::TheaterChase(unsigned int, unsigned int, unsigned int, unsigned int, pixelpatterns::Direction)+0x30>)
 8005496:	eb01 1146 	add.w	r1, r1, r6, lsl #5
 800549a:	2302      	movs	r3, #2
 800549c:	61cb      	str	r3, [r1, #28]
 800549e:	9b04      	ldr	r3, [sp, #16]
 80054a0:	604b      	str	r3, [r1, #4]
 80054a2:	4b06      	ldr	r3, [pc, #24]	; (80054bc <PixelPatterns::TheaterChase(unsigned int, unsigned int, unsigned int, unsigned int, pixelpatterns::Direction)+0x34>)
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	610b      	str	r3, [r1, #16]
 80054a8:	2300      	movs	r3, #0
 80054aa:	614b      	str	r3, [r1, #20]
 80054ac:	9b05      	ldr	r3, [sp, #20]
 80054ae:	618b      	str	r3, [r1, #24]
 80054b0:	e9c1 5402 	strd	r5, r4, [r1, #8]
 80054b4:	bd70      	pop	{r4, r5, r6, pc}
 80054b6:	bf00      	nop
 80054b8:	2000065c 	andcs	r0, r0, ip, asr r6
 80054bc:	20000684 	andcs	r0, r0, r4, lsl #13

080054c0 <PixelPatterns::ColourWipe(unsigned int, unsigned int, unsigned int, pixelpatterns::Direction)>:
 80054c0:	b570      	push	{r4, r5, r6, lr}
 80054c2:	460e      	mov	r6, r1
 80054c4:	461d      	mov	r5, r3
 80054c6:	4614      	mov	r4, r2
 80054c8:	f7ff ff8e 	bl	80053e8 <PixelPatterns::Clear(unsigned int) [clone .isra.0]>
 80054cc:	4907      	ldr	r1, [pc, #28]	; (80054ec <PixelPatterns::ColourWipe(unsigned int, unsigned int, unsigned int, pixelpatterns::Direction)+0x2c>)
 80054ce:	eb01 1146 	add.w	r1, r1, r6, lsl #5
 80054d2:	2303      	movs	r3, #3
 80054d4:	61cb      	str	r3, [r1, #28]
 80054d6:	4b06      	ldr	r3, [pc, #24]	; (80054f0 <PixelPatterns::ColourWipe(unsigned int, unsigned int, unsigned int, pixelpatterns::Direction)+0x30>)
 80054d8:	604d      	str	r5, [r1, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	610b      	str	r3, [r1, #16]
 80054de:	2300      	movs	r3, #0
 80054e0:	614b      	str	r3, [r1, #20]
 80054e2:	9b04      	ldr	r3, [sp, #16]
 80054e4:	608c      	str	r4, [r1, #8]
 80054e6:	618b      	str	r3, [r1, #24]
 80054e8:	bd70      	pop	{r4, r5, r6, pc}
 80054ea:	bf00      	nop
 80054ec:	2000065c 	andcs	r0, r0, ip, asr r6
 80054f0:	20000684 	andcs	r0, r0, r4, lsl #13

080054f4 <PixelPatterns::Scanner(unsigned int, unsigned int, unsigned int)>:
 80054f4:	b570      	push	{r4, r5, r6, lr}
 80054f6:	461d      	mov	r5, r3
 80054f8:	460e      	mov	r6, r1
 80054fa:	4614      	mov	r4, r2
 80054fc:	f7ff ff74 	bl	80053e8 <PixelPatterns::Clear(unsigned int) [clone .isra.0]>
 8005500:	4912      	ldr	r1, [pc, #72]	; (800554c <PixelPatterns::Scanner(unsigned int, unsigned int, unsigned int)+0x58>)
 8005502:	eb01 1146 	add.w	r1, r1, r6, lsl #5
 8005506:	2304      	movs	r3, #4
 8005508:	604d      	str	r5, [r1, #4]
 800550a:	4d11      	ldr	r5, [pc, #68]	; (8005550 <PixelPatterns::Scanner(unsigned int, unsigned int, unsigned int)+0x5c>)
 800550c:	61cb      	str	r3, [r1, #28]
 800550e:	6828      	ldr	r0, [r5, #0]
 8005510:	608c      	str	r4, [r1, #8]
 8005512:	1e43      	subs	r3, r0, #1
 8005514:	005b      	lsls	r3, r3, #1
 8005516:	b29b      	uxth	r3, r3
 8005518:	4c0e      	ldr	r4, [pc, #56]	; (8005554 <PixelPatterns::Scanner(unsigned int, unsigned int, unsigned int)+0x60>)
 800551a:	610b      	str	r3, [r1, #16]
 800551c:	2300      	movs	r3, #0
 800551e:	614b      	str	r3, [r1, #20]
 8005520:	6823      	ldr	r3, [r4, #0]
 8005522:	b97b      	cbnz	r3, 8005544 <PixelPatterns::Scanner(unsigned int, unsigned int, unsigned int)+0x50>
 8005524:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
 8005528:	4298      	cmp	r0, r3
 800552a:	bf34      	ite	cc
 800552c:	0080      	lslcc	r0, r0, #2
 800552e:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
 8005532:	f002 fbda 	bl	8007cea <operator new[](unsigned int)>
 8005536:	682b      	ldr	r3, [r5, #0]
 8005538:	6020      	str	r0, [r4, #0]
 800553a:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 800553e:	2200      	movs	r2, #0
 8005540:	4298      	cmp	r0, r3
 8005542:	d100      	bne.n	8005546 <PixelPatterns::Scanner(unsigned int, unsigned int, unsigned int)+0x52>
 8005544:	bd70      	pop	{r4, r5, r6, pc}
 8005546:	f840 2b04 	str.w	r2, [r0], #4
 800554a:	e7f9      	b.n	8005540 <PixelPatterns::Scanner(unsigned int, unsigned int, unsigned int)+0x4c>
 800554c:	2000065c 	andcs	r0, r0, ip, asr r6
 8005550:	20000684 	andcs	r0, r0, r4, lsl #13
 8005554:	20000680 	andcs	r0, r0, r0, lsl #13

08005558 <PixelPatterns::Fade(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, pixelpatterns::Direction)>:
 8005558:	b570      	push	{r4, r5, r6, lr}
 800555a:	460e      	mov	r6, r1
 800555c:	461c      	mov	r4, r3
 800555e:	4615      	mov	r5, r2
 8005560:	f7ff ff42 	bl	80053e8 <PixelPatterns::Clear(unsigned int) [clone .isra.0]>
 8005564:	4907      	ldr	r1, [pc, #28]	; (8005584 <PixelPatterns::Fade(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, pixelpatterns::Direction)+0x2c>)
 8005566:	eb01 1146 	add.w	r1, r1, r6, lsl #5
 800556a:	2305      	movs	r3, #5
 800556c:	61cb      	str	r3, [r1, #28]
 800556e:	9b05      	ldr	r3, [sp, #20]
 8005570:	604b      	str	r3, [r1, #4]
 8005572:	9b04      	ldr	r3, [sp, #16]
 8005574:	610b      	str	r3, [r1, #16]
 8005576:	2300      	movs	r3, #0
 8005578:	614b      	str	r3, [r1, #20]
 800557a:	9b06      	ldr	r3, [sp, #24]
 800557c:	618b      	str	r3, [r1, #24]
 800557e:	e9c1 5402 	strd	r5, r4, [r1, #8]
 8005582:	bd70      	pop	{r4, r5, r6, pc}
 8005584:	2000065c 	andcs	r0, r0, ip, asr r6

08005588 <PixelPatterns::Wheel(unsigned char)>:
 8005588:	43cb      	mvns	r3, r1
 800558a:	b2db      	uxtb	r3, r3
 800558c:	2b54      	cmp	r3, #84	; 0x54
 800558e:	d809      	bhi.n	80055a4 <PixelPatterns::Wheel(unsigned char)+0x1c>
 8005590:	eba3 0383 	sub.w	r3, r3, r3, lsl #2
 8005594:	b2db      	uxtb	r3, r3
 8005596:	1e5a      	subs	r2, r3, #1
 8005598:	4258      	negs	r0, r3
 800559a:	b2d2      	uxtb	r2, r2
 800559c:	b2c0      	uxtb	r0, r0
 800559e:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 80055a2:	4770      	bx	lr
 80055a4:	2ba9      	cmp	r3, #169	; 0xa9
 80055a6:	d809      	bhi.n	80055bc <PixelPatterns::Wheel(unsigned char)+0x34>
 80055a8:	f1c1 01aa 	rsb	r1, r1, #170	; 0xaa
 80055ac:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 80055b0:	b2c9      	uxtb	r1, r1
 80055b2:	43c8      	mvns	r0, r1
 80055b4:	b2c0      	uxtb	r0, r0
 80055b6:	ea40 2001 	orr.w	r0, r0, r1, lsl #8
 80055ba:	4770      	bx	lr
 80055bc:	f1c1 0155 	rsb	r1, r1, #85	; 0x55
 80055c0:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 80055c4:	b2c9      	uxtb	r1, r1
 80055c6:	0208      	lsls	r0, r1, #8
 80055c8:	f480 407f 	eor.w	r0, r0, #65280	; 0xff00
 80055cc:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80055d0:	4770      	bx	lr
	...

080055d4 <PixelPatterns::Increment(unsigned int)>:
 80055d4:	4a0d      	ldr	r2, [pc, #52]	; (800560c <PixelPatterns::Increment(unsigned int)+0x38>)
 80055d6:	b510      	push	{r4, lr}
 80055d8:	014c      	lsls	r4, r1, #5
 80055da:	eb02 1141 	add.w	r1, r2, r1, lsl #5
 80055de:	e9d1 3005 	ldrd	r3, r0, [r1, #20]
 80055e2:	b930      	cbnz	r0, 80055f2 <PixelPatterns::Increment(unsigned int)+0x1e>
 80055e4:	690a      	ldr	r2, [r1, #16]
 80055e6:	3301      	adds	r3, #1
 80055e8:	4293      	cmp	r3, r2
 80055ea:	bf18      	it	ne
 80055ec:	4618      	movne	r0, r3
 80055ee:	6148      	str	r0, [r1, #20]
 80055f0:	bd10      	pop	{r4, pc}
 80055f2:	b92b      	cbnz	r3, 8005600 <PixelPatterns::Increment(unsigned int)+0x2c>
 80055f4:	4422      	add	r2, r4
 80055f6:	6913      	ldr	r3, [r2, #16]
 80055f8:	3b01      	subs	r3, #1
 80055fa:	b29b      	uxth	r3, r3
 80055fc:	6153      	str	r3, [r2, #20]
 80055fe:	e7f7      	b.n	80055f0 <PixelPatterns::Increment(unsigned int)+0x1c>
 8005600:	3b01      	subs	r3, #1
 8005602:	614b      	str	r3, [r1, #20]
 8005604:	2b00      	cmp	r3, #0
 8005606:	d1f3      	bne.n	80055f0 <PixelPatterns::Increment(unsigned int)+0x1c>
 8005608:	e7f4      	b.n	80055f4 <PixelPatterns::Increment(unsigned int)+0x20>
 800560a:	bf00      	nop
 800560c:	2000065c 	andcs	r0, r0, ip, asr r6

08005610 <PixelPatterns::RainbowCycleUpdate(unsigned int)>:
 8005610:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005614:	4b11      	ldr	r3, [pc, #68]	; (800565c <PixelPatterns::RainbowCycleUpdate(unsigned int)+0x4c>)
 8005616:	f8df 8048 	ldr.w	r8, [pc, #72]	; 8005660 <PixelPatterns::RainbowCycleUpdate(unsigned int)+0x50>
 800561a:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800561e:	4604      	mov	r4, r0
 8005620:	f8d3 9014 	ldr.w	r9, [r3, #20]
 8005624:	460d      	mov	r5, r1
 8005626:	2700      	movs	r7, #0
 8005628:	f8d8 2000 	ldr.w	r2, [r8]
 800562c:	b2be      	uxth	r6, r7
 800562e:	42b2      	cmp	r2, r6
 8005630:	f107 0701 	add.w	r7, r7, #1
 8005634:	d805      	bhi.n	8005642 <PixelPatterns::RainbowCycleUpdate(unsigned int)+0x32>
 8005636:	4629      	mov	r1, r5
 8005638:	4620      	mov	r0, r4
 800563a:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800563e:	f7ff bfc9 	b.w	80055d4 <PixelPatterns::Increment(unsigned int)>
 8005642:	0233      	lsls	r3, r6, #8
 8005644:	fbb3 f3f2 	udiv	r3, r3, r2
 8005648:	444b      	add	r3, r9
 800564a:	b2d9      	uxtb	r1, r3
 800564c:	4620      	mov	r0, r4
 800564e:	f7ff ff9b 	bl	8005588 <PixelPatterns::Wheel(unsigned char)>
 8005652:	4601      	mov	r1, r0
 8005654:	4630      	mov	r0, r6
 8005656:	f7ff fea1 	bl	800539c <PixelPatterns::SetPixelColour(unsigned int, unsigned int, unsigned int) [clone .isra.0]>
 800565a:	e7e5      	b.n	8005628 <PixelPatterns::RainbowCycleUpdate(unsigned int)+0x18>
 800565c:	2000065c 	andcs	r0, r0, ip, asr r6
 8005660:	20000684 	andcs	r0, r0, r4, lsl #13

08005664 <PixelPatterns::TheaterChaseUpdate(unsigned int)>:
 8005664:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005668:	4b13      	ldr	r3, [pc, #76]	; (80056b8 <PixelPatterns::TheaterChaseUpdate(unsigned int)+0x54>)
 800566a:	4e14      	ldr	r6, [pc, #80]	; (80056bc <PixelPatterns::TheaterChaseUpdate(unsigned int)+0x58>)
 800566c:	f8df a050 	ldr.w	sl, [pc, #80]	; 80056c0 <PixelPatterns::TheaterChaseUpdate(unsigned int)+0x5c>
 8005670:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8005674:	e9d3 7802 	ldrd	r7, r8, [r3, #8]
 8005678:	f8d3 9014 	ldr.w	r9, [r3, #20]
 800567c:	4605      	mov	r5, r0
 800567e:	460c      	mov	r4, r1
 8005680:	f04f 0b00 	mov.w	fp, #0
 8005684:	6833      	ldr	r3, [r6, #0]
 8005686:	fa1f f08b 	uxth.w	r0, fp
 800568a:	4283      	cmp	r3, r0
 800568c:	d805      	bhi.n	800569a <PixelPatterns::TheaterChaseUpdate(unsigned int)+0x36>
 800568e:	4621      	mov	r1, r4
 8005690:	4628      	mov	r0, r5
 8005692:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005696:	f7ff bf9d 	b.w	80055d4 <PixelPatterns::Increment(unsigned int)>
 800569a:	eb09 0300 	add.w	r3, r9, r0
 800569e:	fb0a f303 	mul.w	r3, sl, r3
 80056a2:	f1b3 3f55 	cmp.w	r3, #1431655765	; 0x55555555
 80056a6:	bf94      	ite	ls
 80056a8:	4639      	movls	r1, r7
 80056aa:	4641      	movhi	r1, r8
 80056ac:	f7ff fe76 	bl	800539c <PixelPatterns::SetPixelColour(unsigned int, unsigned int, unsigned int) [clone .isra.0]>
 80056b0:	f10b 0b01 	add.w	fp, fp, #1
 80056b4:	e7e6      	b.n	8005684 <PixelPatterns::TheaterChaseUpdate(unsigned int)+0x20>
 80056b6:	bf00      	nop
 80056b8:	2000065c 	andcs	r0, r0, ip, asr r6
 80056bc:	20000684 	andcs	r0, r0, r4, lsl #13
 80056c0:	aaaaaaab 	bge	6ab0174 <__heap_size+0x6aaf174>

080056c4 <PixelPatterns::ColourWipeUpdate(unsigned int)>:
 80056c4:	b538      	push	{r3, r4, r5, lr}
 80056c6:	4b07      	ldr	r3, [pc, #28]	; (80056e4 <PixelPatterns::ColourWipeUpdate(unsigned int)+0x20>)
 80056c8:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 80056cc:	4605      	mov	r5, r0
 80056ce:	460c      	mov	r4, r1
 80056d0:	6958      	ldr	r0, [r3, #20]
 80056d2:	6899      	ldr	r1, [r3, #8]
 80056d4:	f7ff fe62 	bl	800539c <PixelPatterns::SetPixelColour(unsigned int, unsigned int, unsigned int) [clone .isra.0]>
 80056d8:	4621      	mov	r1, r4
 80056da:	4628      	mov	r0, r5
 80056dc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80056e0:	f7ff bf78 	b.w	80055d4 <PixelPatterns::Increment(unsigned int)>
 80056e4:	2000065c 	andcs	r0, r0, ip, asr r6

080056e8 <PixelPatterns::ScannerUpdate(unsigned int)>:
 80056e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80056ec:	4a2b      	ldr	r2, [pc, #172]	; (800579c <PixelPatterns::ScannerUpdate(unsigned int)+0xb4>)
 80056ee:	f8df a0b0 	ldr.w	sl, [pc, #176]	; 80057a0 <PixelPatterns::ScannerUpdate(unsigned int)+0xb8>
 80056f2:	f8df 80b0 	ldr.w	r8, [pc, #176]	; 80057a4 <PixelPatterns::ScannerUpdate(unsigned int)+0xbc>
 80056f6:	ed2d 8b02 	vpush	{d8}
 80056fa:	eb02 1241 	add.w	r2, r2, r1, lsl #5
 80056fe:	e9d2 7604 	ldrd	r7, r6, [r2, #16]
 8005702:	b083      	sub	sp, #12
 8005704:	00b3      	lsls	r3, r6, #2
 8005706:	ee08 0a10 	vmov	s16, r0
 800570a:	f8d2 b008 	ldr.w	fp, [r2, #8]
 800570e:	9300      	str	r3, [sp, #0]
 8005710:	460d      	mov	r5, r1
 8005712:	f04f 0900 	mov.w	r9, #0
 8005716:	1bbf      	subs	r7, r7, r6
 8005718:	f8da 1000 	ldr.w	r1, [sl]
 800571c:	fa1f f489 	uxth.w	r4, r9
 8005720:	42a1      	cmp	r1, r4
 8005722:	d809      	bhi.n	8005738 <PixelPatterns::ScannerUpdate(unsigned int)+0x50>
 8005724:	ee18 0a10 	vmov	r0, s16
 8005728:	4629      	mov	r1, r5
 800572a:	b003      	add	sp, #12
 800572c:	ecbd 8b02 	vpop	{d8}
 8005730:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005734:	f7ff bf4e 	b.w	80055d4 <PixelPatterns::Increment(unsigned int)>
 8005738:	42a6      	cmp	r6, r4
 800573a:	d10b      	bne.n	8005754 <PixelPatterns::ScannerUpdate(unsigned int)+0x6c>
 800573c:	4659      	mov	r1, fp
 800573e:	4630      	mov	r0, r6
 8005740:	f7ff fe2c 	bl	800539c <PixelPatterns::SetPixelColour(unsigned int, unsigned int, unsigned int) [clone .isra.0]>
 8005744:	f8d8 1000 	ldr.w	r1, [r8]
 8005748:	9b00      	ldr	r3, [sp, #0]
 800574a:	f841 b003 	str.w	fp, [r1, r3]
 800574e:	f109 0901 	add.w	r9, r9, #1
 8005752:	e7e1      	b.n	8005718 <PixelPatterns::ScannerUpdate(unsigned int)+0x30>
 8005754:	42a7      	cmp	r7, r4
 8005756:	d108      	bne.n	800576a <PixelPatterns::ScannerUpdate(unsigned int)+0x82>
 8005758:	4659      	mov	r1, fp
 800575a:	4638      	mov	r0, r7
 800575c:	f7ff fe1e 	bl	800539c <PixelPatterns::SetPixelColour(unsigned int, unsigned int, unsigned int) [clone .isra.0]>
 8005760:	f8d8 1000 	ldr.w	r1, [r8]
 8005764:	f841 b024 	str.w	fp, [r1, r4, lsl #2]
 8005768:	e7f1      	b.n	800574e <PixelPatterns::ScannerUpdate(unsigned int)+0x66>
 800576a:	f8d8 1000 	ldr.w	r1, [r8]
 800576e:	f851 0024 	ldr.w	r0, [r1, r4, lsl #2]
 8005772:	f3c0 2146 	ubfx	r1, r0, #9, #7
 8005776:	f3c0 4c46 	ubfx	ip, r0, #17, #7
 800577a:	0209      	lsls	r1, r1, #8
 800577c:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8005780:	f3c0 0046 	ubfx	r0, r0, #1, #7
 8005784:	4301      	orrs	r1, r0
 8005786:	4620      	mov	r0, r4
 8005788:	9101      	str	r1, [sp, #4]
 800578a:	f7ff fe07 	bl	800539c <PixelPatterns::SetPixelColour(unsigned int, unsigned int, unsigned int) [clone .isra.0]>
 800578e:	f8d8 0000 	ldr.w	r0, [r8]
 8005792:	9901      	ldr	r1, [sp, #4]
 8005794:	f840 1024 	str.w	r1, [r0, r4, lsl #2]
 8005798:	e7d9      	b.n	800574e <PixelPatterns::ScannerUpdate(unsigned int)+0x66>
 800579a:	bf00      	nop
 800579c:	2000065c 	andcs	r0, r0, ip, asr r6
 80057a0:	20000684 	andcs	r0, r0, r4, lsl #13
 80057a4:	20000680 	andcs	r0, r0, r0, lsl #13

080057a8 <PixelPatterns::FadeUpdate(unsigned int)>:
 80057a8:	4a21      	ldr	r2, [pc, #132]	; (8005830 <PixelPatterns::FadeUpdate(unsigned int)+0x88>)
 80057aa:	eb02 1241 	add.w	r2, r2, r1, lsl #5
 80057ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80057b2:	460c      	mov	r4, r1
 80057b4:	e9d2 1302 	ldrd	r1, r3, [r2, #8]
 80057b8:	4605      	mov	r5, r0
 80057ba:	e9d2 0704 	ldrd	r0, r7, [r2, #16]
 80057be:	f3c3 2207 	ubfx	r2, r3, #8, #8
 80057c2:	1bc6      	subs	r6, r0, r7
 80057c4:	f3c1 2c07 	ubfx	ip, r1, #8, #8
 80057c8:	437a      	muls	r2, r7
 80057ca:	fb06 220c 	mla	r2, r6, ip, r2
 80057ce:	fbb2 f2f0 	udiv	r2, r2, r0
 80057d2:	0212      	lsls	r2, r2, #8
 80057d4:	fa1f fc82 	uxth.w	ip, r2
 80057d8:	f3c3 4207 	ubfx	r2, r3, #16, #8
 80057dc:	f3c1 4e07 	ubfx	lr, r1, #16, #8
 80057e0:	437a      	muls	r2, r7
 80057e2:	fb06 220e 	mla	r2, r6, lr, r2
 80057e6:	b2db      	uxtb	r3, r3
 80057e8:	fbb2 f2f0 	udiv	r2, r2, r0
 80057ec:	0412      	lsls	r2, r2, #16
 80057ee:	437b      	muls	r3, r7
 80057f0:	f402 027f 	and.w	r2, r2, #16711680	; 0xff0000
 80057f4:	b2c9      	uxtb	r1, r1
 80057f6:	fb06 3301 	mla	r3, r6, r1, r3
 80057fa:	ea4c 0202 	orr.w	r2, ip, r2
 80057fe:	fbb3 f3f0 	udiv	r3, r3, r0
 8005802:	f8df 8030 	ldr.w	r8, [pc, #48]	; 8005834 <PixelPatterns::FadeUpdate(unsigned int)+0x8c>
 8005806:	b2db      	uxtb	r3, r3
 8005808:	ea42 0603 	orr.w	r6, r2, r3
 800580c:	2700      	movs	r7, #0
 800580e:	f8d8 3000 	ldr.w	r3, [r8]
 8005812:	429f      	cmp	r7, r3
 8005814:	d305      	bcc.n	8005822 <PixelPatterns::FadeUpdate(unsigned int)+0x7a>
 8005816:	4621      	mov	r1, r4
 8005818:	4628      	mov	r0, r5
 800581a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800581e:	f7ff bed9 	b.w	80055d4 <PixelPatterns::Increment(unsigned int)>
 8005822:	4638      	mov	r0, r7
 8005824:	4631      	mov	r1, r6
 8005826:	f7ff fdb9 	bl	800539c <PixelPatterns::SetPixelColour(unsigned int, unsigned int, unsigned int) [clone .isra.0]>
 800582a:	3701      	adds	r7, #1
 800582c:	e7ef      	b.n	800580e <PixelPatterns::FadeUpdate(unsigned int)+0x66>
 800582e:	bf00      	nop
 8005830:	2000065c 	andcs	r0, r0, ip, asr r6
 8005834:	20000684 	andcs	r0, r0, r4, lsl #13

08005838 <PixelPatterns::PortUpdate(unsigned int, unsigned int)>:
 8005838:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800583a:	4b12      	ldr	r3, [pc, #72]	; (8005884 <PixelPatterns::PortUpdate(unsigned int, unsigned int)+0x4c>)
 800583c:	014e      	lsls	r6, r1, #5
 800583e:	eb03 1541 	add.w	r5, r3, r1, lsl #5
 8005842:	599c      	ldr	r4, [r3, r6]
 8005844:	686f      	ldr	r7, [r5, #4]
 8005846:	1b14      	subs	r4, r2, r4
 8005848:	42bc      	cmp	r4, r7
 800584a:	d319      	bcc.n	8005880 <PixelPatterns::PortUpdate(unsigned int, unsigned int)+0x48>
 800584c:	519a      	str	r2, [r3, r6]
 800584e:	69eb      	ldr	r3, [r5, #28]
 8005850:	3b01      	subs	r3, #1
 8005852:	2b04      	cmp	r3, #4
 8005854:	d814      	bhi.n	8005880 <PixelPatterns::PortUpdate(unsigned int, unsigned int)+0x48>
 8005856:	e8df f003 	tbb	[pc, r3]
 800585a:	0d0a0703 	stceq	7, cr0, [sl, #-12]
 800585e:	f7ff0010 			; <UNDEFINED> instruction: 0xf7ff0010
 8005862:	fed6 2001 	cdp2	0, 13, cr2, cr6, cr1, {0}
 8005866:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005868:	f7ff fefc 	bl	8005664 <PixelPatterns::TheaterChaseUpdate(unsigned int)>
 800586c:	e7fa      	b.n	8005864 <PixelPatterns::PortUpdate(unsigned int, unsigned int)+0x2c>
 800586e:	f7ff ff29 	bl	80056c4 <PixelPatterns::ColourWipeUpdate(unsigned int)>
 8005872:	e7f7      	b.n	8005864 <PixelPatterns::PortUpdate(unsigned int, unsigned int)+0x2c>
 8005874:	f7ff ff38 	bl	80056e8 <PixelPatterns::ScannerUpdate(unsigned int)>
 8005878:	e7f4      	b.n	8005864 <PixelPatterns::PortUpdate(unsigned int, unsigned int)+0x2c>
 800587a:	f7ff ff95 	bl	80057a8 <PixelPatterns::FadeUpdate(unsigned int)>
 800587e:	e7f1      	b.n	8005864 <PixelPatterns::PortUpdate(unsigned int, unsigned int)+0x2c>
 8005880:	2000      	movs	r0, #0
 8005882:	e7f0      	b.n	8005866 <PixelPatterns::PortUpdate(unsigned int, unsigned int)+0x2e>
 8005884:	2000065c 	andcs	r0, r0, ip, asr r6

08005888 <PixelPatterns::Run()>:
 8005888:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800588c:	4606      	mov	r6, r0
 800588e:	f003 fc75 	bl	800917c <gd32_spi_dma_tx_is_active()>
 8005892:	4604      	mov	r4, r0
 8005894:	b9c0      	cbnz	r0, 80058c8 <PixelPatterns::Run()+0x40>
 8005896:	4b0d      	ldr	r3, [pc, #52]	; (80058cc <PixelPatterns::Run()+0x44>)
 8005898:	4f0d      	ldr	r7, [pc, #52]	; (80058d0 <PixelPatterns::Run()+0x48>)
 800589a:	f8d3 8000 	ldr.w	r8, [r3]
 800589e:	4605      	mov	r5, r0
 80058a0:	683b      	ldr	r3, [r7, #0]
 80058a2:	b2e9      	uxtb	r1, r5
 80058a4:	428b      	cmp	r3, r1
 80058a6:	f105 0501 	add.w	r5, r5, #1
 80058aa:	d806      	bhi.n	80058ba <PixelPatterns::Run()+0x32>
 80058ac:	b164      	cbz	r4, 80058c8 <PixelPatterns::Run()+0x40>
 80058ae:	4b09      	ldr	r3, [pc, #36]	; (80058d4 <PixelPatterns::Run()+0x4c>)
 80058b0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80058b4:	6818      	ldr	r0, [r3, #0]
 80058b6:	f000 bdf7 	b.w	80064a8 <WS28xx::Update()>
 80058ba:	4642      	mov	r2, r8
 80058bc:	4630      	mov	r0, r6
 80058be:	f7ff ffbb 	bl	8005838 <PixelPatterns::PortUpdate(unsigned int, unsigned int)>
 80058c2:	4304      	orrs	r4, r0
 80058c4:	b2e4      	uxtb	r4, r4
 80058c6:	e7eb      	b.n	80058a0 <PixelPatterns::Run()+0x18>
 80058c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80058cc:	2000181c 	andcs	r1, r0, ip, lsl r8
 80058d0:	2000067c 	andcs	r0, r0, ip, ror r6
 80058d4:	20000688 	andcs	r0, r0, r8, lsl #13

080058d8 <WS28xx::SetPixel(unsigned int, unsigned char, unsigned char, unsigned char)>:
 80058d8:	b570      	push	{r4, r5, r6, lr}
 80058da:	6984      	ldr	r4, [r0, #24]
 80058dc:	f89d e010 	ldrb.w	lr, [sp, #16]
 80058e0:	f814 c003 	ldrb.w	ip, [r4, r3]
 80058e4:	7d43      	ldrb	r3, [r0, #21]
 80058e6:	5ca2      	ldrb	r2, [r4, r2]
 80058e8:	f814 e00e 	ldrb.w	lr, [r4, lr]
 80058ec:	b993      	cbnz	r3, 8005914 <WS28xx::SetPixel(unsigned int, unsigned char, unsigned char, unsigned char)+0x3c>
 80058ee:	6803      	ldr	r3, [r0, #0]
 80058f0:	f1a3 040b 	sub.w	r4, r3, #11
 80058f4:	2c01      	cmp	r4, #1
 80058f6:	d93e      	bls.n	8005976 <WS28xx::SetPixel(unsigned int, unsigned char, unsigned char, unsigned char)+0x9e>
 80058f8:	b9db      	cbnz	r3, 8005932 <WS28xx::SetPixel(unsigned int, unsigned char, unsigned char, unsigned char)+0x5a>
 80058fa:	6a03      	ldr	r3, [r0, #32]
 80058fc:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8005900:	545a      	strb	r2, [r3, r1]
 8005902:	6a03      	ldr	r3, [r0, #32]
 8005904:	440b      	add	r3, r1
 8005906:	f883 c001 	strb.w	ip, [r3, #1]
 800590a:	6a03      	ldr	r3, [r0, #32]
 800590c:	440b      	add	r3, r1
 800590e:	f883 e002 	strb.w	lr, [r3, #2]
 8005912:	bd70      	pop	{r4, r5, r6, pc}
 8005914:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8005918:	00cb      	lsls	r3, r1, #3
 800591a:	6881      	ldr	r1, [r0, #8]
 800591c:	2905      	cmp	r1, #5
 800591e:	f200 80ff 	bhi.w	8005b20 <WS28xx::SetPixel(unsigned int, unsigned char, unsigned char, unsigned char)+0x248>
 8005922:	e8df f011 	tbh	[pc, r1, lsl #1]
 8005926:	029400fd 	addseq	r0, r4, #253	; 0xfd
 800592a:	03930313 	orrseq	r0, r3, #1275068416	; 0x4c000000
 800592e:	01b9003c 			; <UNDEFINED> instruction: 0x01b9003c
 8005932:	ea6f 039e 	mvn.w	r3, lr, lsr #2
 8005936:	f082 04c0 	eor.w	r4, r2, #192	; 0xc0
 800593a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800593e:	ea43 1394 	orr.w	r3, r3, r4, lsr #6
 8005942:	ea6f 141c 	mvn.w	r4, ip, lsr #4
 8005946:	f004 040c 	and.w	r4, r4, #12
 800594a:	3101      	adds	r1, #1
 800594c:	4323      	orrs	r3, r4
 800594e:	6a04      	ldr	r4, [r0, #32]
 8005950:	f063 033f 	orn	r3, r3, #63	; 0x3f
 8005954:	f804 3021 	strb.w	r3, [r4, r1, lsl #2]
 8005958:	6a03      	ldr	r3, [r0, #32]
 800595a:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 800595e:	f883 e001 	strb.w	lr, [r3, #1]
 8005962:	6a03      	ldr	r3, [r0, #32]
 8005964:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 8005968:	f883 c002 	strb.w	ip, [r3, #2]
 800596c:	6a03      	ldr	r3, [r0, #32]
 800596e:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 8005972:	70da      	strb	r2, [r3, #3]
 8005974:	bd70      	pop	{r4, r5, r6, pc}
 8005976:	6a03      	ldr	r3, [r0, #32]
 8005978:	7c84      	ldrb	r4, [r0, #18]
 800597a:	3101      	adds	r1, #1
 800597c:	f803 4021 	strb.w	r4, [r3, r1, lsl #2]
 8005980:	6a03      	ldr	r3, [r0, #32]
 8005982:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 8005986:	705a      	strb	r2, [r3, #1]
 8005988:	6a03      	ldr	r3, [r0, #32]
 800598a:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 800598e:	f883 c002 	strb.w	ip, [r3, #2]
 8005992:	6a03      	ldr	r3, [r0, #32]
 8005994:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 8005998:	f883 e003 	strb.w	lr, [r3, #3]
 800599c:	bd70      	pop	{r4, r5, r6, pc}
 800599e:	6a05      	ldr	r5, [r0, #32]
 80059a0:	7c01      	ldrb	r1, [r0, #16]
 80059a2:	7c44      	ldrb	r4, [r0, #17]
 80059a4:	1c5e      	adds	r6, r3, #1
 80059a6:	f01e 0f80 	tst.w	lr, #128	; 0x80
 80059aa:	bf0c      	ite	eq
 80059ac:	55a9      	strbeq	r1, [r5, r6]
 80059ae:	55ac      	strbne	r4, [r5, r6]
 80059b0:	1c9e      	adds	r6, r3, #2
 80059b2:	6a05      	ldr	r5, [r0, #32]
 80059b4:	f01e 0f40 	tst.w	lr, #64	; 0x40
 80059b8:	bf0c      	ite	eq
 80059ba:	55a9      	strbeq	r1, [r5, r6]
 80059bc:	55ac      	strbne	r4, [r5, r6]
 80059be:	1cde      	adds	r6, r3, #3
 80059c0:	6a05      	ldr	r5, [r0, #32]
 80059c2:	f01e 0f20 	tst.w	lr, #32
 80059c6:	bf0c      	ite	eq
 80059c8:	55a9      	strbeq	r1, [r5, r6]
 80059ca:	55ac      	strbne	r4, [r5, r6]
 80059cc:	1d1e      	adds	r6, r3, #4
 80059ce:	6a05      	ldr	r5, [r0, #32]
 80059d0:	f01e 0f10 	tst.w	lr, #16
 80059d4:	bf0c      	ite	eq
 80059d6:	55a9      	strbeq	r1, [r5, r6]
 80059d8:	55ac      	strbne	r4, [r5, r6]
 80059da:	1d5e      	adds	r6, r3, #5
 80059dc:	6a05      	ldr	r5, [r0, #32]
 80059de:	f01e 0f08 	tst.w	lr, #8
 80059e2:	bf0c      	ite	eq
 80059e4:	55a9      	strbeq	r1, [r5, r6]
 80059e6:	55ac      	strbne	r4, [r5, r6]
 80059e8:	1d9e      	adds	r6, r3, #6
 80059ea:	6a05      	ldr	r5, [r0, #32]
 80059ec:	f01e 0f04 	tst.w	lr, #4
 80059f0:	bf0c      	ite	eq
 80059f2:	55a9      	strbeq	r1, [r5, r6]
 80059f4:	55ac      	strbne	r4, [r5, r6]
 80059f6:	1dde      	adds	r6, r3, #7
 80059f8:	6a05      	ldr	r5, [r0, #32]
 80059fa:	f01e 0f02 	tst.w	lr, #2
 80059fe:	bf0c      	ite	eq
 8005a00:	55a9      	strbeq	r1, [r5, r6]
 8005a02:	55ac      	strbne	r4, [r5, r6]
 8005a04:	f01e 0f01 	tst.w	lr, #1
 8005a08:	bf14      	ite	ne
 8005a0a:	6a01      	ldrne	r1, [r0, #32]
 8005a0c:	6a04      	ldreq	r4, [r0, #32]
 8005a0e:	f103 0508 	add.w	r5, r3, #8
 8005a12:	bf14      	ite	ne
 8005a14:	554c      	strbne	r4, [r1, r5]
 8005a16:	5561      	strbeq	r1, [r4, r5]
 8005a18:	f103 0509 	add.w	r5, r3, #9
 8005a1c:	6a06      	ldr	r6, [r0, #32]
 8005a1e:	7c01      	ldrb	r1, [r0, #16]
 8005a20:	7c44      	ldrb	r4, [r0, #17]
 8005a22:	f012 0f80 	tst.w	r2, #128	; 0x80
 8005a26:	bf0c      	ite	eq
 8005a28:	5571      	strbeq	r1, [r6, r5]
 8005a2a:	5574      	strbne	r4, [r6, r5]
 8005a2c:	f103 050a 	add.w	r5, r3, #10
 8005a30:	6a06      	ldr	r6, [r0, #32]
 8005a32:	f012 0f40 	tst.w	r2, #64	; 0x40
 8005a36:	bf0c      	ite	eq
 8005a38:	5571      	strbeq	r1, [r6, r5]
 8005a3a:	5574      	strbne	r4, [r6, r5]
 8005a3c:	f103 050b 	add.w	r5, r3, #11
 8005a40:	6a06      	ldr	r6, [r0, #32]
 8005a42:	f012 0f20 	tst.w	r2, #32
 8005a46:	bf0c      	ite	eq
 8005a48:	5571      	strbeq	r1, [r6, r5]
 8005a4a:	5574      	strbne	r4, [r6, r5]
 8005a4c:	f103 050c 	add.w	r5, r3, #12
 8005a50:	6a06      	ldr	r6, [r0, #32]
 8005a52:	f012 0f10 	tst.w	r2, #16
 8005a56:	bf0c      	ite	eq
 8005a58:	5571      	strbeq	r1, [r6, r5]
 8005a5a:	5574      	strbne	r4, [r6, r5]
 8005a5c:	f103 050d 	add.w	r5, r3, #13
 8005a60:	6a06      	ldr	r6, [r0, #32]
 8005a62:	f012 0f08 	tst.w	r2, #8
 8005a66:	bf0c      	ite	eq
 8005a68:	5571      	strbeq	r1, [r6, r5]
 8005a6a:	5574      	strbne	r4, [r6, r5]
 8005a6c:	f103 050e 	add.w	r5, r3, #14
 8005a70:	6a06      	ldr	r6, [r0, #32]
 8005a72:	f012 0f04 	tst.w	r2, #4
 8005a76:	bf0c      	ite	eq
 8005a78:	5571      	strbeq	r1, [r6, r5]
 8005a7a:	5574      	strbne	r4, [r6, r5]
 8005a7c:	f103 050f 	add.w	r5, r3, #15
 8005a80:	6a06      	ldr	r6, [r0, #32]
 8005a82:	f012 0f02 	tst.w	r2, #2
 8005a86:	bf0c      	ite	eq
 8005a88:	5571      	strbeq	r1, [r6, r5]
 8005a8a:	5574      	strbne	r4, [r6, r5]
 8005a8c:	f012 0f01 	tst.w	r2, #1
 8005a90:	f103 0510 	add.w	r5, r3, #16
 8005a94:	6a02      	ldr	r2, [r0, #32]
 8005a96:	bf14      	ite	ne
 8005a98:	5554      	strbne	r4, [r2, r5]
 8005a9a:	5551      	strbeq	r1, [r2, r5]
 8005a9c:	6a05      	ldr	r5, [r0, #32]
 8005a9e:	7c02      	ldrb	r2, [r0, #16]
 8005aa0:	7c41      	ldrb	r1, [r0, #17]
 8005aa2:	f103 0411 	add.w	r4, r3, #17
 8005aa6:	f01c 0f80 	tst.w	ip, #128	; 0x80
 8005aaa:	bf0c      	ite	eq
 8005aac:	552a      	strbeq	r2, [r5, r4]
 8005aae:	5529      	strbne	r1, [r5, r4]
 8005ab0:	f103 0412 	add.w	r4, r3, #18
 8005ab4:	6a05      	ldr	r5, [r0, #32]
 8005ab6:	f01c 0f40 	tst.w	ip, #64	; 0x40
 8005aba:	bf0c      	ite	eq
 8005abc:	552a      	strbeq	r2, [r5, r4]
 8005abe:	5529      	strbne	r1, [r5, r4]
 8005ac0:	f103 0413 	add.w	r4, r3, #19
 8005ac4:	6a05      	ldr	r5, [r0, #32]
 8005ac6:	f01c 0f20 	tst.w	ip, #32
 8005aca:	bf0c      	ite	eq
 8005acc:	552a      	strbeq	r2, [r5, r4]
 8005ace:	5529      	strbne	r1, [r5, r4]
 8005ad0:	f103 0414 	add.w	r4, r3, #20
 8005ad4:	6a05      	ldr	r5, [r0, #32]
 8005ad6:	f01c 0f10 	tst.w	ip, #16
 8005ada:	bf0c      	ite	eq
 8005adc:	552a      	strbeq	r2, [r5, r4]
 8005ade:	5529      	strbne	r1, [r5, r4]
 8005ae0:	f103 0415 	add.w	r4, r3, #21
 8005ae4:	6a05      	ldr	r5, [r0, #32]
 8005ae6:	f01c 0f08 	tst.w	ip, #8
 8005aea:	bf0c      	ite	eq
 8005aec:	552a      	strbeq	r2, [r5, r4]
 8005aee:	5529      	strbne	r1, [r5, r4]
 8005af0:	f103 0416 	add.w	r4, r3, #22
 8005af4:	6a05      	ldr	r5, [r0, #32]
 8005af6:	f01c 0f04 	tst.w	ip, #4
 8005afa:	bf0c      	ite	eq
 8005afc:	552a      	strbeq	r2, [r5, r4]
 8005afe:	5529      	strbne	r1, [r5, r4]
 8005b00:	f103 0417 	add.w	r4, r3, #23
 8005b04:	6a05      	ldr	r5, [r0, #32]
 8005b06:	f01c 0f02 	tst.w	ip, #2
 8005b0a:	bf0c      	ite	eq
 8005b0c:	552a      	strbeq	r2, [r5, r4]
 8005b0e:	5529      	strbne	r1, [r5, r4]
 8005b10:	3318      	adds	r3, #24
 8005b12:	f01c 0f01 	tst.w	ip, #1
 8005b16:	f000 8355 	beq.w	80061c4 <WS28xx::SetPixel(unsigned int, unsigned char, unsigned char, unsigned char)+0x8ec>
 8005b1a:	6a02      	ldr	r2, [r0, #32]
 8005b1c:	54d1      	strb	r1, [r2, r3]
 8005b1e:	bd70      	pop	{r4, r5, r6, pc}
 8005b20:	6a05      	ldr	r5, [r0, #32]
 8005b22:	7c01      	ldrb	r1, [r0, #16]
 8005b24:	7c44      	ldrb	r4, [r0, #17]
 8005b26:	1c5e      	adds	r6, r3, #1
 8005b28:	f012 0f80 	tst.w	r2, #128	; 0x80
 8005b2c:	bf14      	ite	ne
 8005b2e:	55ac      	strbne	r4, [r5, r6]
 8005b30:	55a9      	strbeq	r1, [r5, r6]
 8005b32:	1c9e      	adds	r6, r3, #2
 8005b34:	6a05      	ldr	r5, [r0, #32]
 8005b36:	f012 0f40 	tst.w	r2, #64	; 0x40
 8005b3a:	bf14      	ite	ne
 8005b3c:	55ac      	strbne	r4, [r5, r6]
 8005b3e:	55a9      	strbeq	r1, [r5, r6]
 8005b40:	1cde      	adds	r6, r3, #3
 8005b42:	6a05      	ldr	r5, [r0, #32]
 8005b44:	f012 0f20 	tst.w	r2, #32
 8005b48:	bf14      	ite	ne
 8005b4a:	55ac      	strbne	r4, [r5, r6]
 8005b4c:	55a9      	strbeq	r1, [r5, r6]
 8005b4e:	1d1e      	adds	r6, r3, #4
 8005b50:	6a05      	ldr	r5, [r0, #32]
 8005b52:	f012 0f10 	tst.w	r2, #16
 8005b56:	bf14      	ite	ne
 8005b58:	55ac      	strbne	r4, [r5, r6]
 8005b5a:	55a9      	strbeq	r1, [r5, r6]
 8005b5c:	1d5e      	adds	r6, r3, #5
 8005b5e:	6a05      	ldr	r5, [r0, #32]
 8005b60:	f012 0f08 	tst.w	r2, #8
 8005b64:	bf14      	ite	ne
 8005b66:	55ac      	strbne	r4, [r5, r6]
 8005b68:	55a9      	strbeq	r1, [r5, r6]
 8005b6a:	1d9e      	adds	r6, r3, #6
 8005b6c:	6a05      	ldr	r5, [r0, #32]
 8005b6e:	f012 0f04 	tst.w	r2, #4
 8005b72:	bf14      	ite	ne
 8005b74:	55ac      	strbne	r4, [r5, r6]
 8005b76:	55a9      	strbeq	r1, [r5, r6]
 8005b78:	1dde      	adds	r6, r3, #7
 8005b7a:	6a05      	ldr	r5, [r0, #32]
 8005b7c:	f012 0f02 	tst.w	r2, #2
 8005b80:	bf14      	ite	ne
 8005b82:	55ac      	strbne	r4, [r5, r6]
 8005b84:	55a9      	strbeq	r1, [r5, r6]
 8005b86:	f012 0f01 	tst.w	r2, #1
 8005b8a:	f103 0508 	add.w	r5, r3, #8
 8005b8e:	6a02      	ldr	r2, [r0, #32]
 8005b90:	bf14      	ite	ne
 8005b92:	5554      	strbne	r4, [r2, r5]
 8005b94:	5551      	strbeq	r1, [r2, r5]
 8005b96:	f103 0409 	add.w	r4, r3, #9
 8005b9a:	6a05      	ldr	r5, [r0, #32]
 8005b9c:	7c41      	ldrb	r1, [r0, #17]
 8005b9e:	7c02      	ldrb	r2, [r0, #16]
 8005ba0:	f01c 0f80 	tst.w	ip, #128	; 0x80
 8005ba4:	bf0c      	ite	eq
 8005ba6:	552a      	strbeq	r2, [r5, r4]
 8005ba8:	5529      	strbne	r1, [r5, r4]
 8005baa:	f103 040a 	add.w	r4, r3, #10
 8005bae:	6a05      	ldr	r5, [r0, #32]
 8005bb0:	f01c 0f40 	tst.w	ip, #64	; 0x40
 8005bb4:	bf0c      	ite	eq
 8005bb6:	552a      	strbeq	r2, [r5, r4]
 8005bb8:	5529      	strbne	r1, [r5, r4]
 8005bba:	f103 040b 	add.w	r4, r3, #11
 8005bbe:	6a05      	ldr	r5, [r0, #32]
 8005bc0:	f01c 0f20 	tst.w	ip, #32
 8005bc4:	bf0c      	ite	eq
 8005bc6:	552a      	strbeq	r2, [r5, r4]
 8005bc8:	5529      	strbne	r1, [r5, r4]
 8005bca:	f103 040c 	add.w	r4, r3, #12
 8005bce:	6a05      	ldr	r5, [r0, #32]
 8005bd0:	f01c 0f10 	tst.w	ip, #16
 8005bd4:	bf0c      	ite	eq
 8005bd6:	552a      	strbeq	r2, [r5, r4]
 8005bd8:	5529      	strbne	r1, [r5, r4]
 8005bda:	f103 040d 	add.w	r4, r3, #13
 8005bde:	6a05      	ldr	r5, [r0, #32]
 8005be0:	f01c 0f08 	tst.w	ip, #8
 8005be4:	bf0c      	ite	eq
 8005be6:	552a      	strbeq	r2, [r5, r4]
 8005be8:	5529      	strbne	r1, [r5, r4]
 8005bea:	f103 040e 	add.w	r4, r3, #14
 8005bee:	6a05      	ldr	r5, [r0, #32]
 8005bf0:	f01c 0f04 	tst.w	ip, #4
 8005bf4:	bf0c      	ite	eq
 8005bf6:	552a      	strbeq	r2, [r5, r4]
 8005bf8:	5529      	strbne	r1, [r5, r4]
 8005bfa:	f103 040f 	add.w	r4, r3, #15
 8005bfe:	6a05      	ldr	r5, [r0, #32]
 8005c00:	f01c 0f02 	tst.w	ip, #2
 8005c04:	bf0c      	ite	eq
 8005c06:	552a      	strbeq	r2, [r5, r4]
 8005c08:	5529      	strbne	r1, [r5, r4]
 8005c0a:	f01c 0f01 	tst.w	ip, #1
 8005c0e:	f103 0410 	add.w	r4, r3, #16
 8005c12:	bf15      	itete	ne
 8005c14:	6a02      	ldrne	r2, [r0, #32]
 8005c16:	6a01      	ldreq	r1, [r0, #32]
 8005c18:	5511      	strbne	r1, [r2, r4]
 8005c1a:	550a      	strbeq	r2, [r1, r4]
 8005c1c:	6a05      	ldr	r5, [r0, #32]
 8005c1e:	7c02      	ldrb	r2, [r0, #16]
 8005c20:	7c41      	ldrb	r1, [r0, #17]
 8005c22:	f103 0411 	add.w	r4, r3, #17
 8005c26:	f01e 0f80 	tst.w	lr, #128	; 0x80
 8005c2a:	bf0c      	ite	eq
 8005c2c:	552a      	strbeq	r2, [r5, r4]
 8005c2e:	5529      	strbne	r1, [r5, r4]
 8005c30:	f103 0412 	add.w	r4, r3, #18
 8005c34:	6a05      	ldr	r5, [r0, #32]
 8005c36:	f01e 0f40 	tst.w	lr, #64	; 0x40
 8005c3a:	bf0c      	ite	eq
 8005c3c:	552a      	strbeq	r2, [r5, r4]
 8005c3e:	5529      	strbne	r1, [r5, r4]
 8005c40:	f103 0413 	add.w	r4, r3, #19
 8005c44:	6a05      	ldr	r5, [r0, #32]
 8005c46:	f01e 0f20 	tst.w	lr, #32
 8005c4a:	bf0c      	ite	eq
 8005c4c:	552a      	strbeq	r2, [r5, r4]
 8005c4e:	5529      	strbne	r1, [r5, r4]
 8005c50:	f103 0414 	add.w	r4, r3, #20
 8005c54:	6a05      	ldr	r5, [r0, #32]
 8005c56:	f01e 0f10 	tst.w	lr, #16
 8005c5a:	bf0c      	ite	eq
 8005c5c:	552a      	strbeq	r2, [r5, r4]
 8005c5e:	5529      	strbne	r1, [r5, r4]
 8005c60:	f103 0415 	add.w	r4, r3, #21
 8005c64:	6a05      	ldr	r5, [r0, #32]
 8005c66:	f01e 0f08 	tst.w	lr, #8
 8005c6a:	bf0c      	ite	eq
 8005c6c:	552a      	strbeq	r2, [r5, r4]
 8005c6e:	5529      	strbne	r1, [r5, r4]
 8005c70:	f103 0416 	add.w	r4, r3, #22
 8005c74:	6a05      	ldr	r5, [r0, #32]
 8005c76:	f01e 0f04 	tst.w	lr, #4
 8005c7a:	bf0c      	ite	eq
 8005c7c:	552a      	strbeq	r2, [r5, r4]
 8005c7e:	5529      	strbne	r1, [r5, r4]
 8005c80:	f103 0417 	add.w	r4, r3, #23
 8005c84:	6a05      	ldr	r5, [r0, #32]
 8005c86:	f01e 0f02 	tst.w	lr, #2
 8005c8a:	bf0c      	ite	eq
 8005c8c:	552a      	strbeq	r2, [r5, r4]
 8005c8e:	5529      	strbne	r1, [r5, r4]
 8005c90:	3318      	adds	r3, #24
 8005c92:	f01e 0f01 	tst.w	lr, #1
 8005c96:	e73e      	b.n	8005b16 <WS28xx::SetPixel(unsigned int, unsigned char, unsigned char, unsigned char)+0x23e>
 8005c98:	6a05      	ldr	r5, [r0, #32]
 8005c9a:	7c01      	ldrb	r1, [r0, #16]
 8005c9c:	7c44      	ldrb	r4, [r0, #17]
 8005c9e:	1c5e      	adds	r6, r3, #1
 8005ca0:	f01e 0f80 	tst.w	lr, #128	; 0x80
 8005ca4:	bf0c      	ite	eq
 8005ca6:	55a9      	strbeq	r1, [r5, r6]
 8005ca8:	55ac      	strbne	r4, [r5, r6]
 8005caa:	1c9e      	adds	r6, r3, #2
 8005cac:	6a05      	ldr	r5, [r0, #32]
 8005cae:	f01e 0f40 	tst.w	lr, #64	; 0x40
 8005cb2:	bf0c      	ite	eq
 8005cb4:	55a9      	strbeq	r1, [r5, r6]
 8005cb6:	55ac      	strbne	r4, [r5, r6]
 8005cb8:	1cde      	adds	r6, r3, #3
 8005cba:	6a05      	ldr	r5, [r0, #32]
 8005cbc:	f01e 0f20 	tst.w	lr, #32
 8005cc0:	bf0c      	ite	eq
 8005cc2:	55a9      	strbeq	r1, [r5, r6]
 8005cc4:	55ac      	strbne	r4, [r5, r6]
 8005cc6:	1d1e      	adds	r6, r3, #4
 8005cc8:	6a05      	ldr	r5, [r0, #32]
 8005cca:	f01e 0f10 	tst.w	lr, #16
 8005cce:	bf0c      	ite	eq
 8005cd0:	55a9      	strbeq	r1, [r5, r6]
 8005cd2:	55ac      	strbne	r4, [r5, r6]
 8005cd4:	1d5e      	adds	r6, r3, #5
 8005cd6:	6a05      	ldr	r5, [r0, #32]
 8005cd8:	f01e 0f08 	tst.w	lr, #8
 8005cdc:	bf0c      	ite	eq
 8005cde:	55a9      	strbeq	r1, [r5, r6]
 8005ce0:	55ac      	strbne	r4, [r5, r6]
 8005ce2:	1d9e      	adds	r6, r3, #6
 8005ce4:	6a05      	ldr	r5, [r0, #32]
 8005ce6:	f01e 0f04 	tst.w	lr, #4
 8005cea:	bf0c      	ite	eq
 8005cec:	55a9      	strbeq	r1, [r5, r6]
 8005cee:	55ac      	strbne	r4, [r5, r6]
 8005cf0:	1dde      	adds	r6, r3, #7
 8005cf2:	6a05      	ldr	r5, [r0, #32]
 8005cf4:	f01e 0f02 	tst.w	lr, #2
 8005cf8:	bf0c      	ite	eq
 8005cfa:	55a9      	strbeq	r1, [r5, r6]
 8005cfc:	55ac      	strbne	r4, [r5, r6]
 8005cfe:	f01e 0f01 	tst.w	lr, #1
 8005d02:	bf14      	ite	ne
 8005d04:	6a01      	ldrne	r1, [r0, #32]
 8005d06:	6a04      	ldreq	r4, [r0, #32]
 8005d08:	f103 0508 	add.w	r5, r3, #8
 8005d0c:	f103 0e09 	add.w	lr, r3, #9
 8005d10:	bf14      	ite	ne
 8005d12:	554c      	strbne	r4, [r1, r5]
 8005d14:	5561      	strbeq	r1, [r4, r5]
 8005d16:	6a05      	ldr	r5, [r0, #32]
 8005d18:	7c01      	ldrb	r1, [r0, #16]
 8005d1a:	7c44      	ldrb	r4, [r0, #17]
 8005d1c:	f01c 0f80 	tst.w	ip, #128	; 0x80
 8005d20:	bf0c      	ite	eq
 8005d22:	f805 100e 	strbeq.w	r1, [r5, lr]
 8005d26:	f805 400e 	strbne.w	r4, [r5, lr]
 8005d2a:	f103 0e0a 	add.w	lr, r3, #10
 8005d2e:	6a05      	ldr	r5, [r0, #32]
 8005d30:	f01c 0f40 	tst.w	ip, #64	; 0x40
 8005d34:	bf0c      	ite	eq
 8005d36:	f805 100e 	strbeq.w	r1, [r5, lr]
 8005d3a:	f805 400e 	strbne.w	r4, [r5, lr]
 8005d3e:	f103 0e0b 	add.w	lr, r3, #11
 8005d42:	6a05      	ldr	r5, [r0, #32]
 8005d44:	f01c 0f20 	tst.w	ip, #32
 8005d48:	bf0c      	ite	eq
 8005d4a:	f805 100e 	strbeq.w	r1, [r5, lr]
 8005d4e:	f805 400e 	strbne.w	r4, [r5, lr]
 8005d52:	f103 0e0c 	add.w	lr, r3, #12
 8005d56:	6a05      	ldr	r5, [r0, #32]
 8005d58:	f01c 0f10 	tst.w	ip, #16
 8005d5c:	bf0c      	ite	eq
 8005d5e:	f805 100e 	strbeq.w	r1, [r5, lr]
 8005d62:	f805 400e 	strbne.w	r4, [r5, lr]
 8005d66:	f103 0e0d 	add.w	lr, r3, #13
 8005d6a:	6a05      	ldr	r5, [r0, #32]
 8005d6c:	f01c 0f08 	tst.w	ip, #8
 8005d70:	bf0c      	ite	eq
 8005d72:	f805 100e 	strbeq.w	r1, [r5, lr]
 8005d76:	f805 400e 	strbne.w	r4, [r5, lr]
 8005d7a:	f103 0e0e 	add.w	lr, r3, #14
 8005d7e:	6a05      	ldr	r5, [r0, #32]
 8005d80:	f01c 0f04 	tst.w	ip, #4
 8005d84:	bf0c      	ite	eq
 8005d86:	f805 100e 	strbeq.w	r1, [r5, lr]
 8005d8a:	f805 400e 	strbne.w	r4, [r5, lr]
 8005d8e:	f103 0e0f 	add.w	lr, r3, #15
 8005d92:	6a05      	ldr	r5, [r0, #32]
 8005d94:	f01c 0f02 	tst.w	ip, #2
 8005d98:	bf0c      	ite	eq
 8005d9a:	f805 100e 	strbeq.w	r1, [r5, lr]
 8005d9e:	f805 400e 	strbne.w	r4, [r5, lr]
 8005da2:	f01c 0f01 	tst.w	ip, #1
 8005da6:	bf14      	ite	ne
 8005da8:	6a01      	ldrne	r1, [r0, #32]
 8005daa:	6a04      	ldreq	r4, [r0, #32]
 8005dac:	f103 0e10 	add.w	lr, r3, #16
 8005db0:	f103 0c11 	add.w	ip, r3, #17
 8005db4:	bf14      	ite	ne
 8005db6:	f801 400e 	strbne.w	r4, [r1, lr]
 8005dba:	f804 100e 	strbeq.w	r1, [r4, lr]
 8005dbe:	6a05      	ldr	r5, [r0, #32]
 8005dc0:	7c01      	ldrb	r1, [r0, #16]
 8005dc2:	7c44      	ldrb	r4, [r0, #17]
 8005dc4:	0616      	lsls	r6, r2, #24
 8005dc6:	bf54      	ite	pl
 8005dc8:	f805 100c 	strbpl.w	r1, [r5, ip]
 8005dcc:	f805 400c 	strbmi.w	r4, [r5, ip]
 8005dd0:	f103 0c12 	add.w	ip, r3, #18
 8005dd4:	6a05      	ldr	r5, [r0, #32]
 8005dd6:	0656      	lsls	r6, r2, #25
 8005dd8:	bf54      	ite	pl
 8005dda:	f805 100c 	strbpl.w	r1, [r5, ip]
 8005dde:	f805 400c 	strbmi.w	r4, [r5, ip]
 8005de2:	f103 0c13 	add.w	ip, r3, #19
 8005de6:	6a05      	ldr	r5, [r0, #32]
 8005de8:	0696      	lsls	r6, r2, #26
 8005dea:	bf54      	ite	pl
 8005dec:	f805 100c 	strbpl.w	r1, [r5, ip]
 8005df0:	f805 400c 	strbmi.w	r4, [r5, ip]
 8005df4:	6a05      	ldr	r5, [r0, #32]
 8005df6:	f103 0c14 	add.w	ip, r3, #20
 8005dfa:	06d6      	lsls	r6, r2, #27
 8005dfc:	bf54      	ite	pl
 8005dfe:	f805 100c 	strbpl.w	r1, [r5, ip]
 8005e02:	f805 400c 	strbmi.w	r4, [r5, ip]
 8005e06:	f103 0c15 	add.w	ip, r3, #21
 8005e0a:	6a05      	ldr	r5, [r0, #32]
 8005e0c:	0716      	lsls	r6, r2, #28
 8005e0e:	bf54      	ite	pl
 8005e10:	f805 100c 	strbpl.w	r1, [r5, ip]
 8005e14:	f805 400c 	strbmi.w	r4, [r5, ip]
 8005e18:	f103 0c16 	add.w	ip, r3, #22
 8005e1c:	6a05      	ldr	r5, [r0, #32]
 8005e1e:	0756      	lsls	r6, r2, #29
 8005e20:	bf54      	ite	pl
 8005e22:	f805 100c 	strbpl.w	r1, [r5, ip]
 8005e26:	f805 400c 	strbmi.w	r4, [r5, ip]
 8005e2a:	f103 0c17 	add.w	ip, r3, #23
 8005e2e:	6a05      	ldr	r5, [r0, #32]
 8005e30:	0796      	lsls	r6, r2, #30
 8005e32:	bf54      	ite	pl
 8005e34:	f805 100c 	strbpl.w	r1, [r5, ip]
 8005e38:	f805 400c 	strbmi.w	r4, [r5, ip]
 8005e3c:	f012 0f01 	tst.w	r2, #1
 8005e40:	f103 0318 	add.w	r3, r3, #24
 8005e44:	6a02      	ldr	r2, [r0, #32]
 8005e46:	f43f ae69 	beq.w	8005b1c <WS28xx::SetPixel(unsigned int, unsigned char, unsigned char, unsigned char)+0x244>
 8005e4a:	54d4      	strb	r4, [r2, r3]
 8005e4c:	bd70      	pop	{r4, r5, r6, pc}
 8005e4e:	6a05      	ldr	r5, [r0, #32]
 8005e50:	7c01      	ldrb	r1, [r0, #16]
 8005e52:	7c44      	ldrb	r4, [r0, #17]
 8005e54:	1c5e      	adds	r6, r3, #1
 8005e56:	f012 0f80 	tst.w	r2, #128	; 0x80
 8005e5a:	bf14      	ite	ne
 8005e5c:	55ac      	strbne	r4, [r5, r6]
 8005e5e:	55a9      	strbeq	r1, [r5, r6]
 8005e60:	1c9e      	adds	r6, r3, #2
 8005e62:	6a05      	ldr	r5, [r0, #32]
 8005e64:	f012 0f40 	tst.w	r2, #64	; 0x40
 8005e68:	bf14      	ite	ne
 8005e6a:	55ac      	strbne	r4, [r5, r6]
 8005e6c:	55a9      	strbeq	r1, [r5, r6]
 8005e6e:	1cde      	adds	r6, r3, #3
 8005e70:	6a05      	ldr	r5, [r0, #32]
 8005e72:	f012 0f20 	tst.w	r2, #32
 8005e76:	bf14      	ite	ne
 8005e78:	55ac      	strbne	r4, [r5, r6]
 8005e7a:	55a9      	strbeq	r1, [r5, r6]
 8005e7c:	1d1e      	adds	r6, r3, #4
 8005e7e:	6a05      	ldr	r5, [r0, #32]
 8005e80:	f012 0f10 	tst.w	r2, #16
 8005e84:	bf14      	ite	ne
 8005e86:	55ac      	strbne	r4, [r5, r6]
 8005e88:	55a9      	strbeq	r1, [r5, r6]
 8005e8a:	1d5e      	adds	r6, r3, #5
 8005e8c:	6a05      	ldr	r5, [r0, #32]
 8005e8e:	f012 0f08 	tst.w	r2, #8
 8005e92:	bf14      	ite	ne
 8005e94:	55ac      	strbne	r4, [r5, r6]
 8005e96:	55a9      	strbeq	r1, [r5, r6]
 8005e98:	1d9e      	adds	r6, r3, #6
 8005e9a:	6a05      	ldr	r5, [r0, #32]
 8005e9c:	f012 0f04 	tst.w	r2, #4
 8005ea0:	bf14      	ite	ne
 8005ea2:	55ac      	strbne	r4, [r5, r6]
 8005ea4:	55a9      	strbeq	r1, [r5, r6]
 8005ea6:	1dde      	adds	r6, r3, #7
 8005ea8:	6a05      	ldr	r5, [r0, #32]
 8005eaa:	f012 0f02 	tst.w	r2, #2
 8005eae:	bf14      	ite	ne
 8005eb0:	55ac      	strbne	r4, [r5, r6]
 8005eb2:	55a9      	strbeq	r1, [r5, r6]
 8005eb4:	f012 0f01 	tst.w	r2, #1
 8005eb8:	f103 0508 	add.w	r5, r3, #8
 8005ebc:	6a02      	ldr	r2, [r0, #32]
 8005ebe:	bf14      	ite	ne
 8005ec0:	5554      	strbne	r4, [r2, r5]
 8005ec2:	5551      	strbeq	r1, [r2, r5]
 8005ec4:	f103 0409 	add.w	r4, r3, #9
 8005ec8:	6a05      	ldr	r5, [r0, #32]
 8005eca:	7c41      	ldrb	r1, [r0, #17]
 8005ecc:	7c02      	ldrb	r2, [r0, #16]
 8005ece:	f01e 0f80 	tst.w	lr, #128	; 0x80
 8005ed2:	bf0c      	ite	eq
 8005ed4:	552a      	strbeq	r2, [r5, r4]
 8005ed6:	5529      	strbne	r1, [r5, r4]
 8005ed8:	f103 040a 	add.w	r4, r3, #10
 8005edc:	6a05      	ldr	r5, [r0, #32]
 8005ede:	f01e 0f40 	tst.w	lr, #64	; 0x40
 8005ee2:	bf0c      	ite	eq
 8005ee4:	552a      	strbeq	r2, [r5, r4]
 8005ee6:	5529      	strbne	r1, [r5, r4]
 8005ee8:	f103 040b 	add.w	r4, r3, #11
 8005eec:	6a05      	ldr	r5, [r0, #32]
 8005eee:	f01e 0f20 	tst.w	lr, #32
 8005ef2:	bf0c      	ite	eq
 8005ef4:	552a      	strbeq	r2, [r5, r4]
 8005ef6:	5529      	strbne	r1, [r5, r4]
 8005ef8:	f103 040c 	add.w	r4, r3, #12
 8005efc:	6a05      	ldr	r5, [r0, #32]
 8005efe:	f01e 0f10 	tst.w	lr, #16
 8005f02:	bf0c      	ite	eq
 8005f04:	552a      	strbeq	r2, [r5, r4]
 8005f06:	5529      	strbne	r1, [r5, r4]
 8005f08:	f103 040d 	add.w	r4, r3, #13
 8005f0c:	6a05      	ldr	r5, [r0, #32]
 8005f0e:	f01e 0f08 	tst.w	lr, #8
 8005f12:	bf0c      	ite	eq
 8005f14:	552a      	strbeq	r2, [r5, r4]
 8005f16:	5529      	strbne	r1, [r5, r4]
 8005f18:	f103 040e 	add.w	r4, r3, #14
 8005f1c:	6a05      	ldr	r5, [r0, #32]
 8005f1e:	f01e 0f04 	tst.w	lr, #4
 8005f22:	bf0c      	ite	eq
 8005f24:	552a      	strbeq	r2, [r5, r4]
 8005f26:	5529      	strbne	r1, [r5, r4]
 8005f28:	f103 040f 	add.w	r4, r3, #15
 8005f2c:	6a05      	ldr	r5, [r0, #32]
 8005f2e:	f01e 0f02 	tst.w	lr, #2
 8005f32:	bf0c      	ite	eq
 8005f34:	552a      	strbeq	r2, [r5, r4]
 8005f36:	5529      	strbne	r1, [r5, r4]
 8005f38:	f01e 0f01 	tst.w	lr, #1
 8005f3c:	f103 0410 	add.w	r4, r3, #16
 8005f40:	bf15      	itete	ne
 8005f42:	6a02      	ldrne	r2, [r0, #32]
 8005f44:	6a01      	ldreq	r1, [r0, #32]
 8005f46:	5511      	strbne	r1, [r2, r4]
 8005f48:	550a      	strbeq	r2, [r1, r4]
 8005f4a:	e5a7      	b.n	8005a9c <WS28xx::SetPixel(unsigned int, unsigned char, unsigned char, unsigned char)+0x1c4>
 8005f4c:	6a05      	ldr	r5, [r0, #32]
 8005f4e:	7c01      	ldrb	r1, [r0, #16]
 8005f50:	7c44      	ldrb	r4, [r0, #17]
 8005f52:	1c5e      	adds	r6, r3, #1
 8005f54:	f01c 0f80 	tst.w	ip, #128	; 0x80
 8005f58:	bf0c      	ite	eq
 8005f5a:	55a9      	strbeq	r1, [r5, r6]
 8005f5c:	55ac      	strbne	r4, [r5, r6]
 8005f5e:	1c9e      	adds	r6, r3, #2
 8005f60:	6a05      	ldr	r5, [r0, #32]
 8005f62:	f01c 0f40 	tst.w	ip, #64	; 0x40
 8005f66:	bf0c      	ite	eq
 8005f68:	55a9      	strbeq	r1, [r5, r6]
 8005f6a:	55ac      	strbne	r4, [r5, r6]
 8005f6c:	1cde      	adds	r6, r3, #3
 8005f6e:	6a05      	ldr	r5, [r0, #32]
 8005f70:	f01c 0f20 	tst.w	ip, #32
 8005f74:	bf0c      	ite	eq
 8005f76:	55a9      	strbeq	r1, [r5, r6]
 8005f78:	55ac      	strbne	r4, [r5, r6]
 8005f7a:	1d1e      	adds	r6, r3, #4
 8005f7c:	6a05      	ldr	r5, [r0, #32]
 8005f7e:	f01c 0f10 	tst.w	ip, #16
 8005f82:	bf0c      	ite	eq
 8005f84:	55a9      	strbeq	r1, [r5, r6]
 8005f86:	55ac      	strbne	r4, [r5, r6]
 8005f88:	1d5e      	adds	r6, r3, #5
 8005f8a:	6a05      	ldr	r5, [r0, #32]
 8005f8c:	f01c 0f08 	tst.w	ip, #8
 8005f90:	bf0c      	ite	eq
 8005f92:	55a9      	strbeq	r1, [r5, r6]
 8005f94:	55ac      	strbne	r4, [r5, r6]
 8005f96:	1d9e      	adds	r6, r3, #6
 8005f98:	6a05      	ldr	r5, [r0, #32]
 8005f9a:	f01c 0f04 	tst.w	ip, #4
 8005f9e:	bf0c      	ite	eq
 8005fa0:	55a9      	strbeq	r1, [r5, r6]
 8005fa2:	55ac      	strbne	r4, [r5, r6]
 8005fa4:	1dde      	adds	r6, r3, #7
 8005fa6:	6a05      	ldr	r5, [r0, #32]
 8005fa8:	f01c 0f02 	tst.w	ip, #2
 8005fac:	bf0c      	ite	eq
 8005fae:	55a9      	strbeq	r1, [r5, r6]
 8005fb0:	55ac      	strbne	r4, [r5, r6]
 8005fb2:	f01c 0f01 	tst.w	ip, #1
 8005fb6:	bf14      	ite	ne
 8005fb8:	6a01      	ldrne	r1, [r0, #32]
 8005fba:	6a04      	ldreq	r4, [r0, #32]
 8005fbc:	f103 0508 	add.w	r5, r3, #8
 8005fc0:	bf14      	ite	ne
 8005fc2:	554c      	strbne	r4, [r1, r5]
 8005fc4:	5561      	strbeq	r1, [r4, r5]
 8005fc6:	f103 0509 	add.w	r5, r3, #9
 8005fca:	6a06      	ldr	r6, [r0, #32]
 8005fcc:	7c01      	ldrb	r1, [r0, #16]
 8005fce:	7c44      	ldrb	r4, [r0, #17]
 8005fd0:	f012 0f80 	tst.w	r2, #128	; 0x80
 8005fd4:	bf0c      	ite	eq
 8005fd6:	5571      	strbeq	r1, [r6, r5]
 8005fd8:	5574      	strbne	r4, [r6, r5]
 8005fda:	f103 050a 	add.w	r5, r3, #10
 8005fde:	6a06      	ldr	r6, [r0, #32]
 8005fe0:	f012 0f40 	tst.w	r2, #64	; 0x40
 8005fe4:	bf0c      	ite	eq
 8005fe6:	5571      	strbeq	r1, [r6, r5]
 8005fe8:	5574      	strbne	r4, [r6, r5]
 8005fea:	f103 050b 	add.w	r5, r3, #11
 8005fee:	6a06      	ldr	r6, [r0, #32]
 8005ff0:	f012 0f20 	tst.w	r2, #32
 8005ff4:	bf0c      	ite	eq
 8005ff6:	5571      	strbeq	r1, [r6, r5]
 8005ff8:	5574      	strbne	r4, [r6, r5]
 8005ffa:	f103 050c 	add.w	r5, r3, #12
 8005ffe:	6a06      	ldr	r6, [r0, #32]
 8006000:	f012 0f10 	tst.w	r2, #16
 8006004:	bf0c      	ite	eq
 8006006:	5571      	strbeq	r1, [r6, r5]
 8006008:	5574      	strbne	r4, [r6, r5]
 800600a:	f103 050d 	add.w	r5, r3, #13
 800600e:	6a06      	ldr	r6, [r0, #32]
 8006010:	f012 0f08 	tst.w	r2, #8
 8006014:	bf0c      	ite	eq
 8006016:	5571      	strbeq	r1, [r6, r5]
 8006018:	5574      	strbne	r4, [r6, r5]
 800601a:	f103 050e 	add.w	r5, r3, #14
 800601e:	6a06      	ldr	r6, [r0, #32]
 8006020:	f012 0f04 	tst.w	r2, #4
 8006024:	bf0c      	ite	eq
 8006026:	5571      	strbeq	r1, [r6, r5]
 8006028:	5574      	strbne	r4, [r6, r5]
 800602a:	f103 050f 	add.w	r5, r3, #15
 800602e:	6a06      	ldr	r6, [r0, #32]
 8006030:	f012 0f02 	tst.w	r2, #2
 8006034:	bf0c      	ite	eq
 8006036:	5571      	strbeq	r1, [r6, r5]
 8006038:	5574      	strbne	r4, [r6, r5]
 800603a:	f012 0f01 	tst.w	r2, #1
 800603e:	f103 0510 	add.w	r5, r3, #16
 8006042:	6a02      	ldr	r2, [r0, #32]
 8006044:	bf14      	ite	ne
 8006046:	5554      	strbne	r4, [r2, r5]
 8006048:	5551      	strbeq	r1, [r2, r5]
 800604a:	e5e7      	b.n	8005c1c <WS28xx::SetPixel(unsigned int, unsigned char, unsigned char, unsigned char)+0x344>
 800604c:	6a05      	ldr	r5, [r0, #32]
 800604e:	7c01      	ldrb	r1, [r0, #16]
 8006050:	7c44      	ldrb	r4, [r0, #17]
 8006052:	1c5e      	adds	r6, r3, #1
 8006054:	f01c 0f80 	tst.w	ip, #128	; 0x80
 8006058:	bf0c      	ite	eq
 800605a:	55a9      	strbeq	r1, [r5, r6]
 800605c:	55ac      	strbne	r4, [r5, r6]
 800605e:	1c9e      	adds	r6, r3, #2
 8006060:	6a05      	ldr	r5, [r0, #32]
 8006062:	f01c 0f40 	tst.w	ip, #64	; 0x40
 8006066:	bf0c      	ite	eq
 8006068:	55a9      	strbeq	r1, [r5, r6]
 800606a:	55ac      	strbne	r4, [r5, r6]
 800606c:	1cde      	adds	r6, r3, #3
 800606e:	6a05      	ldr	r5, [r0, #32]
 8006070:	f01c 0f20 	tst.w	ip, #32
 8006074:	bf0c      	ite	eq
 8006076:	55a9      	strbeq	r1, [r5, r6]
 8006078:	55ac      	strbne	r4, [r5, r6]
 800607a:	1d1e      	adds	r6, r3, #4
 800607c:	6a05      	ldr	r5, [r0, #32]
 800607e:	f01c 0f10 	tst.w	ip, #16
 8006082:	bf0c      	ite	eq
 8006084:	55a9      	strbeq	r1, [r5, r6]
 8006086:	55ac      	strbne	r4, [r5, r6]
 8006088:	1d5e      	adds	r6, r3, #5
 800608a:	6a05      	ldr	r5, [r0, #32]
 800608c:	f01c 0f08 	tst.w	ip, #8
 8006090:	bf0c      	ite	eq
 8006092:	55a9      	strbeq	r1, [r5, r6]
 8006094:	55ac      	strbne	r4, [r5, r6]
 8006096:	1d9e      	adds	r6, r3, #6
 8006098:	6a05      	ldr	r5, [r0, #32]
 800609a:	f01c 0f04 	tst.w	ip, #4
 800609e:	bf0c      	ite	eq
 80060a0:	55a9      	strbeq	r1, [r5, r6]
 80060a2:	55ac      	strbne	r4, [r5, r6]
 80060a4:	1dde      	adds	r6, r3, #7
 80060a6:	6a05      	ldr	r5, [r0, #32]
 80060a8:	f01c 0f02 	tst.w	ip, #2
 80060ac:	bf0c      	ite	eq
 80060ae:	55a9      	strbeq	r1, [r5, r6]
 80060b0:	55ac      	strbne	r4, [r5, r6]
 80060b2:	f01c 0f01 	tst.w	ip, #1
 80060b6:	bf14      	ite	ne
 80060b8:	6a01      	ldrne	r1, [r0, #32]
 80060ba:	6a04      	ldreq	r4, [r0, #32]
 80060bc:	f103 0508 	add.w	r5, r3, #8
 80060c0:	bf14      	ite	ne
 80060c2:	554c      	strbne	r4, [r1, r5]
 80060c4:	5561      	strbeq	r1, [r4, r5]
 80060c6:	f103 0509 	add.w	r5, r3, #9
 80060ca:	6a06      	ldr	r6, [r0, #32]
 80060cc:	7c01      	ldrb	r1, [r0, #16]
 80060ce:	7c44      	ldrb	r4, [r0, #17]
 80060d0:	f01e 0f80 	tst.w	lr, #128	; 0x80
 80060d4:	bf0c      	ite	eq
 80060d6:	5571      	strbeq	r1, [r6, r5]
 80060d8:	5574      	strbne	r4, [r6, r5]
 80060da:	f103 050a 	add.w	r5, r3, #10
 80060de:	6a06      	ldr	r6, [r0, #32]
 80060e0:	f01e 0f40 	tst.w	lr, #64	; 0x40
 80060e4:	bf0c      	ite	eq
 80060e6:	5571      	strbeq	r1, [r6, r5]
 80060e8:	5574      	strbne	r4, [r6, r5]
 80060ea:	f103 050b 	add.w	r5, r3, #11
 80060ee:	6a06      	ldr	r6, [r0, #32]
 80060f0:	f01e 0f20 	tst.w	lr, #32
 80060f4:	bf0c      	ite	eq
 80060f6:	5571      	strbeq	r1, [r6, r5]
 80060f8:	5574      	strbne	r4, [r6, r5]
 80060fa:	f103 050c 	add.w	r5, r3, #12
 80060fe:	6a06      	ldr	r6, [r0, #32]
 8006100:	f01e 0f10 	tst.w	lr, #16
 8006104:	bf0c      	ite	eq
 8006106:	5571      	strbeq	r1, [r6, r5]
 8006108:	5574      	strbne	r4, [r6, r5]
 800610a:	f103 050d 	add.w	r5, r3, #13
 800610e:	6a06      	ldr	r6, [r0, #32]
 8006110:	f01e 0f08 	tst.w	lr, #8
 8006114:	bf0c      	ite	eq
 8006116:	5571      	strbeq	r1, [r6, r5]
 8006118:	5574      	strbne	r4, [r6, r5]
 800611a:	f103 050e 	add.w	r5, r3, #14
 800611e:	6a06      	ldr	r6, [r0, #32]
 8006120:	f01e 0f04 	tst.w	lr, #4
 8006124:	bf0c      	ite	eq
 8006126:	5571      	strbeq	r1, [r6, r5]
 8006128:	5574      	strbne	r4, [r6, r5]
 800612a:	f103 050f 	add.w	r5, r3, #15
 800612e:	6a06      	ldr	r6, [r0, #32]
 8006130:	f01e 0f02 	tst.w	lr, #2
 8006134:	bf0c      	ite	eq
 8006136:	5571      	strbeq	r1, [r6, r5]
 8006138:	5574      	strbne	r4, [r6, r5]
 800613a:	f01e 0f01 	tst.w	lr, #1
 800613e:	bf0c      	ite	eq
 8006140:	6a04      	ldreq	r4, [r0, #32]
 8006142:	6a01      	ldrne	r1, [r0, #32]
 8006144:	f103 0510 	add.w	r5, r3, #16
 8006148:	bf0c      	ite	eq
 800614a:	5561      	strbeq	r1, [r4, r5]
 800614c:	554c      	strbne	r4, [r1, r5]
 800614e:	f103 0511 	add.w	r5, r3, #17
 8006152:	6a06      	ldr	r6, [r0, #32]
 8006154:	7c01      	ldrb	r1, [r0, #16]
 8006156:	7c44      	ldrb	r4, [r0, #17]
 8006158:	f012 0f80 	tst.w	r2, #128	; 0x80
 800615c:	bf0c      	ite	eq
 800615e:	5571      	strbeq	r1, [r6, r5]
 8006160:	5574      	strbne	r4, [r6, r5]
 8006162:	f103 0512 	add.w	r5, r3, #18
 8006166:	6a06      	ldr	r6, [r0, #32]
 8006168:	f012 0f40 	tst.w	r2, #64	; 0x40
 800616c:	bf0c      	ite	eq
 800616e:	5571      	strbeq	r1, [r6, r5]
 8006170:	5574      	strbne	r4, [r6, r5]
 8006172:	f103 0513 	add.w	r5, r3, #19
 8006176:	6a06      	ldr	r6, [r0, #32]
 8006178:	f012 0f20 	tst.w	r2, #32
 800617c:	bf0c      	ite	eq
 800617e:	5571      	strbeq	r1, [r6, r5]
 8006180:	5574      	strbne	r4, [r6, r5]
 8006182:	6a06      	ldr	r6, [r0, #32]
 8006184:	f103 0514 	add.w	r5, r3, #20
 8006188:	f012 0f10 	tst.w	r2, #16
 800618c:	bf0c      	ite	eq
 800618e:	5571      	strbeq	r1, [r6, r5]
 8006190:	5574      	strbne	r4, [r6, r5]
 8006192:	f103 0515 	add.w	r5, r3, #21
 8006196:	6a06      	ldr	r6, [r0, #32]
 8006198:	f012 0f08 	tst.w	r2, #8
 800619c:	bf0c      	ite	eq
 800619e:	5571      	strbeq	r1, [r6, r5]
 80061a0:	5574      	strbne	r4, [r6, r5]
 80061a2:	f103 0516 	add.w	r5, r3, #22
 80061a6:	6a06      	ldr	r6, [r0, #32]
 80061a8:	f012 0f04 	tst.w	r2, #4
 80061ac:	bf0c      	ite	eq
 80061ae:	5571      	strbeq	r1, [r6, r5]
 80061b0:	5574      	strbne	r4, [r6, r5]
 80061b2:	f103 0517 	add.w	r5, r3, #23
 80061b6:	6a06      	ldr	r6, [r0, #32]
 80061b8:	f012 0f02 	tst.w	r2, #2
 80061bc:	bf0c      	ite	eq
 80061be:	5571      	strbeq	r1, [r6, r5]
 80061c0:	5574      	strbne	r4, [r6, r5]
 80061c2:	e63b      	b.n	8005e3c <WS28xx::SetPixel(unsigned int, unsigned char, unsigned char, unsigned char)+0x564>
 80061c4:	6a01      	ldr	r1, [r0, #32]
 80061c6:	54ca      	strb	r2, [r1, r3]
 80061c8:	bd70      	pop	{r4, r5, r6, pc}
 80061ca:	bf00      	nop

080061cc <WS28xx::SetPixel(unsigned int, unsigned char, unsigned char, unsigned char, unsigned char)>:
 80061cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80061ce:	6984      	ldr	r4, [r0, #24]
 80061d0:	f89d 5014 	ldrb.w	r5, [sp, #20]
 80061d4:	56e6      	ldrsb	r6, [r4, r3]
 80061d6:	f814 e002 	ldrb.w	lr, [r4, r2]
 80061da:	f89d 2018 	ldrb.w	r2, [sp, #24]
 80061de:	f814 c005 	ldrb.w	ip, [r4, r5]
 80061e2:	5ca2      	ldrb	r2, [r4, r2]
 80061e4:	5ce3      	ldrb	r3, [r4, r3]
 80061e6:	7c05      	ldrb	r5, [r0, #16]
 80061e8:	7c44      	ldrb	r4, [r0, #17]
 80061ea:	0149      	lsls	r1, r1, #5
 80061ec:	1c4f      	adds	r7, r1, #1
 80061ee:	2e00      	cmp	r6, #0
 80061f0:	6a06      	ldr	r6, [r0, #32]
 80061f2:	bfac      	ite	ge
 80061f4:	55f5      	strbge	r5, [r6, r7]
 80061f6:	55f4      	strblt	r4, [r6, r7]
 80061f8:	1c8e      	adds	r6, r1, #2
 80061fa:	6a07      	ldr	r7, [r0, #32]
 80061fc:	f013 0f40 	tst.w	r3, #64	; 0x40
 8006200:	bf0c      	ite	eq
 8006202:	55bd      	strbeq	r5, [r7, r6]
 8006204:	55bc      	strbne	r4, [r7, r6]
 8006206:	1cce      	adds	r6, r1, #3
 8006208:	6a07      	ldr	r7, [r0, #32]
 800620a:	f013 0f20 	tst.w	r3, #32
 800620e:	bf0c      	ite	eq
 8006210:	55bd      	strbeq	r5, [r7, r6]
 8006212:	55bc      	strbne	r4, [r7, r6]
 8006214:	1d0e      	adds	r6, r1, #4
 8006216:	6a07      	ldr	r7, [r0, #32]
 8006218:	f013 0f10 	tst.w	r3, #16
 800621c:	bf0c      	ite	eq
 800621e:	55bd      	strbeq	r5, [r7, r6]
 8006220:	55bc      	strbne	r4, [r7, r6]
 8006222:	1d4e      	adds	r6, r1, #5
 8006224:	6a07      	ldr	r7, [r0, #32]
 8006226:	f013 0f08 	tst.w	r3, #8
 800622a:	bf0c      	ite	eq
 800622c:	55bd      	strbeq	r5, [r7, r6]
 800622e:	55bc      	strbne	r4, [r7, r6]
 8006230:	1d8e      	adds	r6, r1, #6
 8006232:	6a07      	ldr	r7, [r0, #32]
 8006234:	f013 0f04 	tst.w	r3, #4
 8006238:	bf0c      	ite	eq
 800623a:	55bd      	strbeq	r5, [r7, r6]
 800623c:	55bc      	strbne	r4, [r7, r6]
 800623e:	1dce      	adds	r6, r1, #7
 8006240:	6a07      	ldr	r7, [r0, #32]
 8006242:	f013 0f02 	tst.w	r3, #2
 8006246:	bf0c      	ite	eq
 8006248:	55bd      	strbeq	r5, [r7, r6]
 800624a:	55bc      	strbne	r4, [r7, r6]
 800624c:	f101 0608 	add.w	r6, r1, #8
 8006250:	f013 0f01 	tst.w	r3, #1
 8006254:	6a03      	ldr	r3, [r0, #32]
 8006256:	bf14      	ite	ne
 8006258:	559c      	strbne	r4, [r3, r6]
 800625a:	559d      	strbeq	r5, [r3, r6]
 800625c:	f101 0609 	add.w	r6, r1, #9
 8006260:	6a05      	ldr	r5, [r0, #32]
 8006262:	7c03      	ldrb	r3, [r0, #16]
 8006264:	7c44      	ldrb	r4, [r0, #17]
 8006266:	f01e 0f80 	tst.w	lr, #128	; 0x80
 800626a:	bf0c      	ite	eq
 800626c:	55ab      	strbeq	r3, [r5, r6]
 800626e:	55ac      	strbne	r4, [r5, r6]
 8006270:	f101 060a 	add.w	r6, r1, #10
 8006274:	6a05      	ldr	r5, [r0, #32]
 8006276:	f01e 0f40 	tst.w	lr, #64	; 0x40
 800627a:	bf0c      	ite	eq
 800627c:	55ab      	strbeq	r3, [r5, r6]
 800627e:	55ac      	strbne	r4, [r5, r6]
 8006280:	f101 060b 	add.w	r6, r1, #11
 8006284:	6a05      	ldr	r5, [r0, #32]
 8006286:	f01e 0f20 	tst.w	lr, #32
 800628a:	bf0c      	ite	eq
 800628c:	55ab      	strbeq	r3, [r5, r6]
 800628e:	55ac      	strbne	r4, [r5, r6]
 8006290:	f101 060c 	add.w	r6, r1, #12
 8006294:	6a05      	ldr	r5, [r0, #32]
 8006296:	f01e 0f10 	tst.w	lr, #16
 800629a:	bf0c      	ite	eq
 800629c:	55ab      	strbeq	r3, [r5, r6]
 800629e:	55ac      	strbne	r4, [r5, r6]
 80062a0:	f101 060d 	add.w	r6, r1, #13
 80062a4:	6a05      	ldr	r5, [r0, #32]
 80062a6:	f01e 0f08 	tst.w	lr, #8
 80062aa:	bf0c      	ite	eq
 80062ac:	55ab      	strbeq	r3, [r5, r6]
 80062ae:	55ac      	strbne	r4, [r5, r6]
 80062b0:	f101 060e 	add.w	r6, r1, #14
 80062b4:	6a05      	ldr	r5, [r0, #32]
 80062b6:	f01e 0f04 	tst.w	lr, #4
 80062ba:	bf0c      	ite	eq
 80062bc:	55ab      	strbeq	r3, [r5, r6]
 80062be:	55ac      	strbne	r4, [r5, r6]
 80062c0:	f101 060f 	add.w	r6, r1, #15
 80062c4:	6a05      	ldr	r5, [r0, #32]
 80062c6:	f01e 0f02 	tst.w	lr, #2
 80062ca:	bf0c      	ite	eq
 80062cc:	55ab      	strbeq	r3, [r5, r6]
 80062ce:	55ac      	strbne	r4, [r5, r6]
 80062d0:	f01e 0f01 	tst.w	lr, #1
 80062d4:	bf14      	ite	ne
 80062d6:	6a03      	ldrne	r3, [r0, #32]
 80062d8:	6a04      	ldreq	r4, [r0, #32]
 80062da:	f101 0510 	add.w	r5, r1, #16
 80062de:	bf14      	ite	ne
 80062e0:	555c      	strbne	r4, [r3, r5]
 80062e2:	5563      	strbeq	r3, [r4, r5]
 80062e4:	f101 0511 	add.w	r5, r1, #17
 80062e8:	7c03      	ldrb	r3, [r0, #16]
 80062ea:	7c44      	ldrb	r4, [r0, #17]
 80062ec:	6a06      	ldr	r6, [r0, #32]
 80062ee:	f01c 0f80 	tst.w	ip, #128	; 0x80
 80062f2:	bf0c      	ite	eq
 80062f4:	5573      	strbeq	r3, [r6, r5]
 80062f6:	5574      	strbne	r4, [r6, r5]
 80062f8:	f101 0512 	add.w	r5, r1, #18
 80062fc:	6a06      	ldr	r6, [r0, #32]
 80062fe:	f01c 0f40 	tst.w	ip, #64	; 0x40
 8006302:	bf0c      	ite	eq
 8006304:	5573      	strbeq	r3, [r6, r5]
 8006306:	5574      	strbne	r4, [r6, r5]
 8006308:	f101 0513 	add.w	r5, r1, #19
 800630c:	6a06      	ldr	r6, [r0, #32]
 800630e:	f01c 0f20 	tst.w	ip, #32
 8006312:	bf0c      	ite	eq
 8006314:	5573      	strbeq	r3, [r6, r5]
 8006316:	5574      	strbne	r4, [r6, r5]
 8006318:	f101 0514 	add.w	r5, r1, #20
 800631c:	6a06      	ldr	r6, [r0, #32]
 800631e:	f01c 0f10 	tst.w	ip, #16
 8006322:	bf0c      	ite	eq
 8006324:	5573      	strbeq	r3, [r6, r5]
 8006326:	5574      	strbne	r4, [r6, r5]
 8006328:	f101 0515 	add.w	r5, r1, #21
 800632c:	6a06      	ldr	r6, [r0, #32]
 800632e:	f01c 0f08 	tst.w	ip, #8
 8006332:	bf0c      	ite	eq
 8006334:	5573      	strbeq	r3, [r6, r5]
 8006336:	5574      	strbne	r4, [r6, r5]
 8006338:	f101 0516 	add.w	r5, r1, #22
 800633c:	6a06      	ldr	r6, [r0, #32]
 800633e:	f01c 0f04 	tst.w	ip, #4
 8006342:	bf0c      	ite	eq
 8006344:	5573      	strbeq	r3, [r6, r5]
 8006346:	5574      	strbne	r4, [r6, r5]
 8006348:	f101 0517 	add.w	r5, r1, #23
 800634c:	6a06      	ldr	r6, [r0, #32]
 800634e:	f01c 0f02 	tst.w	ip, #2
 8006352:	bf0c      	ite	eq
 8006354:	5573      	strbeq	r3, [r6, r5]
 8006356:	5574      	strbne	r4, [r6, r5]
 8006358:	f01c 0f01 	tst.w	ip, #1
 800635c:	bf14      	ite	ne
 800635e:	6a03      	ldrne	r3, [r0, #32]
 8006360:	6a04      	ldreq	r4, [r0, #32]
 8006362:	f101 0518 	add.w	r5, r1, #24
 8006366:	bf14      	ite	ne
 8006368:	555c      	strbne	r4, [r3, r5]
 800636a:	5563      	strbeq	r3, [r4, r5]
 800636c:	f101 0519 	add.w	r5, r1, #25
 8006370:	6a06      	ldr	r6, [r0, #32]
 8006372:	7c03      	ldrb	r3, [r0, #16]
 8006374:	7c44      	ldrb	r4, [r0, #17]
 8006376:	0617      	lsls	r7, r2, #24
 8006378:	bf54      	ite	pl
 800637a:	5573      	strbpl	r3, [r6, r5]
 800637c:	5574      	strbmi	r4, [r6, r5]
 800637e:	f101 051a 	add.w	r5, r1, #26
 8006382:	6a06      	ldr	r6, [r0, #32]
 8006384:	0657      	lsls	r7, r2, #25
 8006386:	bf54      	ite	pl
 8006388:	5573      	strbpl	r3, [r6, r5]
 800638a:	5574      	strbmi	r4, [r6, r5]
 800638c:	6a06      	ldr	r6, [r0, #32]
 800638e:	f101 051b 	add.w	r5, r1, #27
 8006392:	0697      	lsls	r7, r2, #26
 8006394:	bf54      	ite	pl
 8006396:	5573      	strbpl	r3, [r6, r5]
 8006398:	5574      	strbmi	r4, [r6, r5]
 800639a:	f101 051c 	add.w	r5, r1, #28
 800639e:	6a06      	ldr	r6, [r0, #32]
 80063a0:	06d7      	lsls	r7, r2, #27
 80063a2:	bf54      	ite	pl
 80063a4:	5573      	strbpl	r3, [r6, r5]
 80063a6:	5574      	strbmi	r4, [r6, r5]
 80063a8:	f101 051d 	add.w	r5, r1, #29
 80063ac:	6a06      	ldr	r6, [r0, #32]
 80063ae:	0717      	lsls	r7, r2, #28
 80063b0:	bf54      	ite	pl
 80063b2:	5573      	strbpl	r3, [r6, r5]
 80063b4:	5574      	strbmi	r4, [r6, r5]
 80063b6:	f101 051e 	add.w	r5, r1, #30
 80063ba:	6a06      	ldr	r6, [r0, #32]
 80063bc:	0757      	lsls	r7, r2, #29
 80063be:	bf54      	ite	pl
 80063c0:	5573      	strbpl	r3, [r6, r5]
 80063c2:	5574      	strbmi	r4, [r6, r5]
 80063c4:	f101 051f 	add.w	r5, r1, #31
 80063c8:	6a06      	ldr	r6, [r0, #32]
 80063ca:	0797      	lsls	r7, r2, #30
 80063cc:	bf54      	ite	pl
 80063ce:	5573      	strbpl	r3, [r6, r5]
 80063d0:	5574      	strbmi	r4, [r6, r5]
 80063d2:	07d2      	lsls	r2, r2, #31
 80063d4:	f101 0120 	add.w	r1, r1, #32
 80063d8:	bf4b      	itete	mi
 80063da:	6a03      	ldrmi	r3, [r0, #32]
 80063dc:	6a02      	ldrpl	r2, [r0, #32]
 80063de:	545c      	strbmi	r4, [r3, r1]
 80063e0:	5453      	strbpl	r3, [r2, r1]
 80063e2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080063e4 <WS28xx::~WS28xx()>:
 80063e4:	4b01      	ldr	r3, [pc, #4]	; (80063ec <WS28xx::~WS28xx()+0x8>)
 80063e6:	2200      	movs	r2, #0
 80063e8:	601a      	str	r2, [r3, #0]
 80063ea:	4770      	bx	lr
 80063ec:	20000698 	mulcs	r0, r8, r6

080063f0 <WS28xx::SetupBuffers()>:
 80063f0:	b513      	push	{r0, r1, r4, lr}
 80063f2:	4604      	mov	r4, r0
 80063f4:	a801      	add	r0, sp, #4
 80063f6:	f002 fe9f 	bl	8009138 <gd32_spi_dma_tx_prepare(unsigned int*)>
 80063fa:	9b01      	ldr	r3, [sp, #4]
 80063fc:	4a07      	ldr	r2, [pc, #28]	; (800641c <WS28xx::SetupBuffers()+0x2c>)
 80063fe:	6220      	str	r0, [r4, #32]
 8006400:	085b      	lsrs	r3, r3, #1
 8006402:	f023 0303 	bic.w	r3, r3, #3
 8006406:	4418      	add	r0, r3
 8006408:	69e3      	ldr	r3, [r4, #28]
 800640a:	6013      	str	r3, [r2, #0]
 800640c:	3303      	adds	r3, #3
 800640e:	f023 0303 	bic.w	r3, r3, #3
 8006412:	6260      	str	r0, [r4, #36]	; 0x24
 8006414:	61e3      	str	r3, [r4, #28]
 8006416:	b002      	add	sp, #8
 8006418:	bd10      	pop	{r4, pc}
 800641a:	bf00      	nop
 800641c:	20000694 	mulcs	r0, r4, r6

08006420 <WS28xx::WS28xx(PixelConfiguration&)>:
 8006420:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006422:	23aa      	movs	r3, #170	; 0xaa
 8006424:	2203      	movs	r2, #3
 8006426:	e9c0 2300 	strd	r2, r3, [r0]
 800642a:	460f      	mov	r7, r1
 800642c:	2300      	movs	r3, #0
 800642e:	2106      	movs	r1, #6
 8006430:	f44f 027f 	mov.w	r2, #16711680	; 0xff0000
 8006434:	6102      	str	r2, [r0, #16]
 8006436:	e9c0 1302 	strd	r1, r3, [r0, #8]
 800643a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800643e:	8282      	strh	r2, [r0, #20]
 8006440:	e9c0 3308 	strd	r3, r3, [r0, #32]
 8006444:	4a16      	ldr	r2, [pc, #88]	; (80064a0 <WS28xx::WS28xx(PixelConfiguration&)+0x80>)
 8006446:	4b17      	ldr	r3, [pc, #92]	; (80064a4 <WS28xx::WS28xx(PixelConfiguration&)+0x84>)
 8006448:	6182      	str	r2, [r0, #24]
 800644a:	463e      	mov	r6, r7
 800644c:	4604      	mov	r4, r0
 800644e:	6018      	str	r0, [r3, #0]
 8006450:	4605      	mov	r5, r0
 8006452:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8006454:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006456:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 800645a:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 800645e:	a901      	add	r1, sp, #4
 8006460:	4638      	mov	r0, r7
 8006462:	f7fe fe4d 	bl	8005100 <PixelConfiguration::Validate(unsigned int&)>
 8006466:	6862      	ldr	r2, [r4, #4]
 8006468:	9b01      	ldr	r3, [sp, #4]
 800646a:	7d61      	ldrb	r1, [r4, #21]
 800646c:	4353      	muls	r3, r2
 800646e:	61e3      	str	r3, [r4, #28]
 8006470:	b111      	cbz	r1, 8006478 <WS28xx::WS28xx(PixelConfiguration&)+0x58>
 8006472:	00db      	lsls	r3, r3, #3
 8006474:	3301      	adds	r3, #1
 8006476:	61e3      	str	r3, [r4, #28]
 8006478:	6823      	ldr	r3, [r4, #0]
 800647a:	3b0b      	subs	r3, #11
 800647c:	2b02      	cmp	r3, #2
 800647e:	bf9f      	itttt	ls
 8006480:	69e3      	ldrls	r3, [r4, #28]
 8006482:	18d2      	addls	r2, r2, r3
 8006484:	3208      	addls	r2, #8
 8006486:	61e2      	strls	r2, [r4, #28]
 8006488:	4620      	mov	r0, r4
 800648a:	f7ff ffb1 	bl	80063f0 <WS28xx::SetupBuffers()>
 800648e:	f002 fdcb 	bl	8009028 <gd32_spi_dma_begin()>
 8006492:	68f8      	ldr	r0, [r7, #12]
 8006494:	f002 fe3e 	bl	8009114 <gd32_spi_dma_set_speed_hz(unsigned int)>
 8006498:	4620      	mov	r0, r4
 800649a:	b003      	add	sp, #12
 800649c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800649e:	bf00      	nop
 80064a0:	0800b1b2 	stmdaeq	r0, {r1, r4, r5, r7, r8, ip, sp, pc}
 80064a4:	20000698 	mulcs	r0, r8, r6

080064a8 <WS28xx::Update()>:
 80064a8:	b430      	push	{r4, r5}
 80064aa:	4b0c      	ldr	r3, [pc, #48]	; (80064dc <WS28xx::Update()+0x34>)
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	2200      	movs	r2, #0
 80064b0:	e9d0 1407 	ldrd	r1, r4, [r0, #28]
 80064b4:	4299      	cmp	r1, r3
 80064b6:	d807      	bhi.n	80064c8 <WS28xx::Update()+0x20>
 80064b8:	6a40      	ldr	r0, [r0, #36]	; 0x24
 80064ba:	084d      	lsrs	r5, r1, #1
 80064bc:	2300      	movs	r3, #0
 80064be:	42ab      	cmp	r3, r5
 80064c0:	d105      	bne.n	80064ce <WS28xx::Update()+0x26>
 80064c2:	bc30      	pop	{r4, r5}
 80064c4:	f002 be40 	b.w	8009148 <gd32_spi_dma_tx_start(unsigned char const*, unsigned int)>
 80064c8:	54e2      	strb	r2, [r4, r3]
 80064ca:	3301      	adds	r3, #1
 80064cc:	e7f0      	b.n	80064b0 <WS28xx::Update()+0x8>
 80064ce:	f834 2013 	ldrh.w	r2, [r4, r3, lsl #1]
 80064d2:	ba52      	rev16	r2, r2
 80064d4:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
 80064d8:	3301      	adds	r3, #1
 80064da:	e7f0      	b.n	80064be <WS28xx::Update()+0x16>
 80064dc:	20000694 	mulcs	r0, r4, r6

080064e0 <WS28xx::Blackout()>:
 80064e0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80064e4:	4604      	mov	r4, r0
 80064e6:	f3bf 8f6f 	isb	sy
 80064ea:	f002 fe47 	bl	800917c <gd32_spi_dma_tx_is_active()>
 80064ee:	2800      	cmp	r0, #0
 80064f0:	d1f9      	bne.n	80064e6 <WS28xx::Blackout()+0x6>
 80064f2:	e9d4 2800 	ldrd	r2, r8, [r4]
 80064f6:	e9d4 6308 	ldrd	r6, r3, [r4, #32]
 80064fa:	f1a2 070b 	sub.w	r7, r2, #11
 80064fe:	2f02      	cmp	r7, #2
 8006500:	6223      	str	r3, [r4, #32]
 8006502:	7018      	strb	r0, [r3, #0]
 8006504:	d829      	bhi.n	800655a <WS28xx::Blackout()+0x7a>
 8006506:	7058      	strb	r0, [r3, #1]
 8006508:	7098      	strb	r0, [r3, #2]
 800650a:	70d8      	strb	r0, [r3, #3]
 800650c:	4605      	mov	r5, r0
 800650e:	4681      	mov	r9, r0
 8006510:	4545      	cmp	r5, r8
 8006512:	d118      	bne.n	8006546 <WS28xx::Blackout()+0x66>
 8006514:	69e2      	ldr	r2, [r4, #28]
 8006516:	6a20      	ldr	r0, [r4, #32]
 8006518:	3a04      	subs	r2, #4
 800651a:	1883      	adds	r3, r0, r2
 800651c:	2f02      	cmp	r7, #2
 800651e:	bf14      	ite	ne
 8006520:	21ff      	movne	r1, #255	; 0xff
 8006522:	2100      	moveq	r1, #0
 8006524:	5481      	strb	r1, [r0, r2]
 8006526:	7059      	strb	r1, [r3, #1]
 8006528:	7099      	strb	r1, [r3, #2]
 800652a:	70d9      	strb	r1, [r3, #3]
 800652c:	4620      	mov	r0, r4
 800652e:	f7ff ffbb 	bl	80064a8 <WS28xx::Update()>
 8006532:	f3bf 8f6f 	isb	sy
 8006536:	f002 fe21 	bl	800917c <gd32_spi_dma_tx_is_active()>
 800653a:	2800      	cmp	r0, #0
 800653c:	d1f9      	bne.n	8006532 <WS28xx::Blackout()+0x52>
 800653e:	6226      	str	r6, [r4, #32]
 8006540:	b003      	add	sp, #12
 8006542:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006546:	2300      	movs	r3, #0
 8006548:	4629      	mov	r1, r5
 800654a:	f8cd 9000 	str.w	r9, [sp]
 800654e:	461a      	mov	r2, r3
 8006550:	4620      	mov	r0, r4
 8006552:	f7ff f9c1 	bl	80058d8 <WS28xx::SetPixel(unsigned int, unsigned char, unsigned char, unsigned char)>
 8006556:	3501      	adds	r5, #1
 8006558:	e7da      	b.n	8006510 <WS28xx::Blackout()+0x30>
 800655a:	6a23      	ldr	r3, [r4, #32]
 800655c:	b102      	cbz	r2, 8006560 <WS28xx::Blackout()+0x80>
 800655e:	7c22      	ldrb	r2, [r4, #16]
 8006560:	69e1      	ldr	r1, [r4, #28]
 8006562:	4419      	add	r1, r3
 8006564:	4299      	cmp	r1, r3
 8006566:	d0e1      	beq.n	800652c <WS28xx::Blackout()+0x4c>
 8006568:	f803 2f01 	strb.w	r2, [r3, #1]!
 800656c:	e7fa      	b.n	8006564 <WS28xx::Blackout()+0x84>

0800656e <WS28xx::FullOn()>:
 800656e:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8006572:	4604      	mov	r4, r0
 8006574:	f3bf 8f6f 	isb	sy
 8006578:	f002 fe00 	bl	800917c <gd32_spi_dma_tx_is_active()>
 800657c:	2800      	cmp	r0, #0
 800657e:	d1f9      	bne.n	8006574 <WS28xx::FullOn()+0x6>
 8006580:	e9d4 2800 	ldrd	r2, r8, [r4]
 8006584:	e9d4 6308 	ldrd	r6, r3, [r4, #32]
 8006588:	f1a2 070b 	sub.w	r7, r2, #11
 800658c:	2f02      	cmp	r7, #2
 800658e:	6223      	str	r3, [r4, #32]
 8006590:	7018      	strb	r0, [r3, #0]
 8006592:	d82a      	bhi.n	80065ea <WS28xx::FullOn()+0x7c>
 8006594:	7058      	strb	r0, [r3, #1]
 8006596:	7098      	strb	r0, [r3, #2]
 8006598:	70d8      	strb	r0, [r3, #3]
 800659a:	4605      	mov	r5, r0
 800659c:	f04f 09ff 	mov.w	r9, #255	; 0xff
 80065a0:	4545      	cmp	r5, r8
 80065a2:	d118      	bne.n	80065d6 <WS28xx::FullOn()+0x68>
 80065a4:	69e2      	ldr	r2, [r4, #28]
 80065a6:	6a20      	ldr	r0, [r4, #32]
 80065a8:	3a04      	subs	r2, #4
 80065aa:	1883      	adds	r3, r0, r2
 80065ac:	2f02      	cmp	r7, #2
 80065ae:	bf14      	ite	ne
 80065b0:	21ff      	movne	r1, #255	; 0xff
 80065b2:	2100      	moveq	r1, #0
 80065b4:	5481      	strb	r1, [r0, r2]
 80065b6:	7059      	strb	r1, [r3, #1]
 80065b8:	7099      	strb	r1, [r3, #2]
 80065ba:	70d9      	strb	r1, [r3, #3]
 80065bc:	4620      	mov	r0, r4
 80065be:	f7ff ff73 	bl	80064a8 <WS28xx::Update()>
 80065c2:	f3bf 8f6f 	isb	sy
 80065c6:	f002 fdd9 	bl	800917c <gd32_spi_dma_tx_is_active()>
 80065ca:	2800      	cmp	r0, #0
 80065cc:	d1f9      	bne.n	80065c2 <WS28xx::FullOn()+0x54>
 80065ce:	6226      	str	r6, [r4, #32]
 80065d0:	b003      	add	sp, #12
 80065d2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80065d6:	23ff      	movs	r3, #255	; 0xff
 80065d8:	4629      	mov	r1, r5
 80065da:	f8cd 9000 	str.w	r9, [sp]
 80065de:	461a      	mov	r2, r3
 80065e0:	4620      	mov	r0, r4
 80065e2:	f7ff f979 	bl	80058d8 <WS28xx::SetPixel(unsigned int, unsigned char, unsigned char, unsigned char)>
 80065e6:	3501      	adds	r5, #1
 80065e8:	e7da      	b.n	80065a0 <WS28xx::FullOn()+0x32>
 80065ea:	6a23      	ldr	r3, [r4, #32]
 80065ec:	b13a      	cbz	r2, 80065fe <WS28xx::FullOn()+0x90>
 80065ee:	7c61      	ldrb	r1, [r4, #17]
 80065f0:	69e2      	ldr	r2, [r4, #28]
 80065f2:	441a      	add	r2, r3
 80065f4:	429a      	cmp	r2, r3
 80065f6:	d0e1      	beq.n	80065bc <WS28xx::FullOn()+0x4e>
 80065f8:	f803 1f01 	strb.w	r1, [r3, #1]!
 80065fc:	e7fa      	b.n	80065f4 <WS28xx::FullOn()+0x86>
 80065fe:	21ff      	movs	r1, #255	; 0xff
 8006600:	e7f6      	b.n	80065f0 <WS28xx::FullOn()+0x82>
	...

08006604 <Network::Network()>:
 8006604:	4b05      	ldr	r3, [pc, #20]	; (800661c <Network::Network()+0x18>)
 8006606:	4906      	ldr	r1, [pc, #24]	; (8006620 <Network::Network()+0x1c>)
 8006608:	6018      	str	r0, [r3, #0]
 800660a:	1e42      	subs	r2, r0, #1
 800660c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006610:	f802 3f01 	strb.w	r3, [r2, #1]!
 8006614:	2b00      	cmp	r3, #0
 8006616:	d1f9      	bne.n	800660c <Network::Network()+0x8>
 8006618:	4770      	bx	lr
 800661a:	bf00      	nop
 800661c:	2000069c 	mulcs	r0, ip, r6
 8006620:	0800b2b2 	stmdaeq	r0, {r1, r4, r5, r7, r9, ip, sp, pc}

08006624 <Network::MacAddressCopyTo(unsigned char*)>:
 8006624:	4608      	mov	r0, r1
 8006626:	f002 be8b 	b.w	8009340 <mac_address_get(unsigned char*)>

0800662a <Display::Write(unsigned char, char const*) [clone .isra.0]>:
 800662a:	b430      	push	{r4, r5}
 800662c:	b168      	cbz	r0, 800664a <Display::Write(unsigned char, char const*) [clone .isra.0]+0x20>
 800662e:	7905      	ldrb	r5, [r0, #4]
 8006630:	2300      	movs	r3, #0
 8006632:	5cd4      	ldrb	r4, [r2, r3]
 8006634:	b11c      	cbz	r4, 800663e <Display::Write(unsigned char, char const*) [clone .isra.0]+0x14>
 8006636:	1c5c      	adds	r4, r3, #1
 8006638:	429d      	cmp	r5, r3
 800663a:	4623      	mov	r3, r4
 800663c:	dcf9      	bgt.n	8006632 <Display::Write(unsigned char, char const*) [clone .isra.0]+0x8>
 800663e:	6804      	ldr	r4, [r0, #0]
 8006640:	69e4      	ldr	r4, [r4, #28]
 8006642:	b2db      	uxtb	r3, r3
 8006644:	46a4      	mov	ip, r4
 8006646:	bc30      	pop	{r4, r5}
 8006648:	4760      	bx	ip
 800664a:	bc30      	pop	{r4, r5}
 800664c:	4770      	bx	lr
	...

08006650 <DisplayUdf::DisplayUdf()>:
 8006650:	b510      	push	{r4, lr}
 8006652:	4604      	mov	r4, r0
 8006654:	f000 fe6a 	bl	800732c <Display::Display()>
 8006658:	4b05      	ldr	r3, [pc, #20]	; (8006670 <DisplayUdf::DisplayUdf()+0x20>)
 800665a:	f104 023b 	add.w	r2, r4, #59	; 0x3b
 800665e:	601c      	str	r4, [r3, #0]
 8006660:	2301      	movs	r3, #1
 8006662:	f802 3f01 	strb.w	r3, [r2, #1]!
 8006666:	3301      	adds	r3, #1
 8006668:	2b15      	cmp	r3, #21
 800666a:	d1fa      	bne.n	8006662 <DisplayUdf::DisplayUdf()+0x12>
 800666c:	4620      	mov	r0, r4
 800666e:	bd10      	pop	{r4, pc}
 8006670:	200006a0 	andcs	r0, r0, r0, lsr #13

08006674 <DisplayUdf::SetTitle(char const*, ...)>:
 8006674:	b40e      	push	{r1, r2, r3}
 8006676:	b517      	push	{r0, r1, r2, r4, lr}
 8006678:	ab05      	add	r3, sp, #20
 800667a:	4604      	mov	r4, r0
 800667c:	f853 2b04 	ldr.w	r2, [r3], #4
 8006680:	9301      	str	r3, [sp, #4]
 8006682:	211f      	movs	r1, #31
 8006684:	301c      	adds	r0, #28
 8006686:	f7fb f8f5 	bl	8001874 <vsnprintf>
 800668a:	4420      	add	r0, r4
 800668c:	2300      	movs	r3, #0
 800668e:	7703      	strb	r3, [r0, #28]
 8006690:	b003      	add	sp, #12
 8006692:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006696:	b003      	add	sp, #12
 8006698:	4770      	bx	lr

0800669a <DisplayUdf::Set(unsigned char, displayudf::Labels)>:
 800669a:	1e4b      	subs	r3, r1, #1
 800669c:	2b05      	cmp	r3, #5
 800669e:	b530      	push	{r4, r5, lr}
 80066a0:	d80f      	bhi.n	80066c2 <DisplayUdf::Set(unsigned char, displayudf::Labels)+0x28>
 80066a2:	f100 043b 	add.w	r4, r0, #59	; 0x3b
 80066a6:	2300      	movs	r3, #0
 80066a8:	f814 5f01 	ldrb.w	r5, [r4, #1]!
 80066ac:	428d      	cmp	r5, r1
 80066ae:	d109      	bne.n	80066c4 <DisplayUdf::Set(unsigned char, displayudf::Labels)+0x2a>
 80066b0:	1884      	adds	r4, r0, r2
 80066b2:	4403      	add	r3, r0
 80066b4:	f894 403c 	ldrb.w	r4, [r4, #60]	; 0x3c
 80066b8:	f883 403c 	strb.w	r4, [r3, #60]	; 0x3c
 80066bc:	4402      	add	r2, r0
 80066be:	f882 103c 	strb.w	r1, [r2, #60]	; 0x3c
 80066c2:	bd30      	pop	{r4, r5, pc}
 80066c4:	3301      	adds	r3, #1
 80066c6:	2b14      	cmp	r3, #20
 80066c8:	d1ee      	bne.n	80066a8 <DisplayUdf::Set(unsigned char, displayudf::Labels)+0xe>
 80066ca:	e7f7      	b.n	80066bc <DisplayUdf::Set(unsigned char, displayudf::Labels)+0x22>

080066cc <DisplayUdf::Show()>:
 80066cc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80066ce:	f100 033b 	add.w	r3, r0, #59	; 0x3b
 80066d2:	4604      	mov	r4, r0
 80066d4:	f100 024f 	add.w	r2, r0, #79	; 0x4f
 80066d8:	21ff      	movs	r1, #255	; 0xff
 80066da:	f813 0f01 	ldrb.w	r0, [r3, #1]!
 80066de:	2806      	cmp	r0, #6
 80066e0:	bf88      	it	hi
 80066e2:	7019      	strbhi	r1, [r3, #0]
 80066e4:	4293      	cmp	r3, r2
 80066e6:	d1f8      	bne.n	80066da <DisplayUdf::Show()+0xe>
 80066e8:	2501      	movs	r5, #1
 80066ea:	69a0      	ldr	r0, [r4, #24]
 80066ec:	b118      	cbz	r0, 80066f6 <DisplayUdf::Show()+0x2a>
 80066ee:	6803      	ldr	r3, [r0, #0]
 80066f0:	4629      	mov	r1, r5
 80066f2:	691b      	ldr	r3, [r3, #16]
 80066f4:	4798      	blx	r3
 80066f6:	3501      	adds	r5, #1
 80066f8:	b2ed      	uxtb	r5, r5
 80066fa:	2d06      	cmp	r5, #6
 80066fc:	d1f5      	bne.n	80066ea <DisplayUdf::Show()+0x1e>
 80066fe:	f894 103c 	ldrb.w	r1, [r4, #60]	; 0x3c
 8006702:	69a0      	ldr	r0, [r4, #24]
 8006704:	f104 021c 	add.w	r2, r4, #28
 8006708:	f7ff ff8f 	bl	800662a <Display::Write(unsigned char, char const*) [clone .isra.0]>
 800670c:	f894 103d 	ldrb.w	r1, [r4, #61]	; 0x3d
 8006710:	69a0      	ldr	r0, [r4, #24]
 8006712:	4a12      	ldr	r2, [pc, #72]	; (800675c <DisplayUdf::Show()+0x90>)
 8006714:	f7ff ff89 	bl	800662a <Display::Write(unsigned char, char const*) [clone .isra.0]>
 8006718:	4b11      	ldr	r3, [pc, #68]	; (8006760 <DisplayUdf::Show()+0x94>)
 800671a:	f894 103f 	ldrb.w	r1, [r4, #63]	; 0x3f
 800671e:	9300      	str	r3, [sp, #0]
 8006720:	4a10      	ldr	r2, [pc, #64]	; (8006764 <DisplayUdf::Show()+0x98>)
 8006722:	2303      	movs	r3, #3
 8006724:	4620      	mov	r0, r4
 8006726:	f7f9 ffd0 	bl	80006ca <Display::Printf(unsigned char, char const*, ...)>
 800672a:	4b0f      	ldr	r3, [pc, #60]	; (8006768 <DisplayUdf::Show()+0x9c>)
 800672c:	681a      	ldr	r2, [r3, #0]
 800672e:	f892 10ab 	ldrb.w	r1, [r2, #171]	; 0xab
 8006732:	f892 30ac 	ldrb.w	r3, [r2, #172]	; 0xac
 8006736:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 800673a:	f892 10a7 	ldrb.w	r1, [r2, #167]	; 0xa7
 800673e:	f892 20a8 	ldrb.w	r2, [r2, #168]	; 0xa8
 8006742:	eb02 2201 	add.w	r2, r2, r1, lsl #8
 8006746:	b292      	uxth	r2, r2
 8006748:	9200      	str	r2, [sp, #0]
 800674a:	f894 1049 	ldrb.w	r1, [r4, #73]	; 0x49
 800674e:	4a07      	ldr	r2, [pc, #28]	; (800676c <DisplayUdf::Show()+0xa0>)
 8006750:	b29b      	uxth	r3, r3
 8006752:	4620      	mov	r0, r4
 8006754:	f7f9 ffb9 	bl	80006ca <Display::Printf(unsigned char, char const*, ...)>
 8006758:	b003      	add	sp, #12
 800675a:	bd30      	pop	{r4, r5, pc}
 800675c:	08009c94 	stmdaeq	r0, {r2, r4, r7, sl, fp, ip, pc}
 8006760:	20001780 	andcs	r1, r0, r0, lsl #15
 8006764:	0800b2b5 	stmdaeq	r0, {r0, r2, r4, r5, r7, r9, ip, sp, pc}
 8006768:	200001f8 	strdcs	r0, [r0], -r8
 800676c:	0800b2c4 	stmdaeq	r0, {r2, r6, r7, r9, ip, sp, pc}

08006770 <DisplayUdfParams::DisplayUdfParams(DisplayUdfParamsStore*)>:
 8006770:	b510      	push	{r4, lr}
 8006772:	2220      	movs	r2, #32
 8006774:	4604      	mov	r4, r0
 8006776:	f840 1b04 	str.w	r1, [r0], #4
 800677a:	2100      	movs	r1, #0
 800677c:	f001 fb4a 	bl	8007e14 <memset>
 8006780:	f647 7305 	movw	r3, #32517	; 0x7f05
 8006784:	84a3      	strh	r3, [r4, #36]	; 0x24
 8006786:	4620      	mov	r0, r4
 8006788:	bd10      	pop	{r4, pc}

0800678a <DisplayUdfParams::Load()>:
 800678a:	b508      	push	{r3, lr}
 800678c:	2300      	movs	r3, #0
 800678e:	4601      	mov	r1, r0
 8006790:	6043      	str	r3, [r0, #4]
 8006792:	6800      	ldr	r0, [r0, #0]
 8006794:	b120      	cbz	r0, 80067a0 <DisplayUdfParams::Load()+0x16>
 8006796:	6803      	ldr	r3, [r0, #0]
 8006798:	3104      	adds	r1, #4
 800679a:	68db      	ldr	r3, [r3, #12]
 800679c:	4798      	blx	r3
 800679e:	2001      	movs	r0, #1
 80067a0:	bd08      	pop	{r3, pc}

080067a2 <DisplayUdfParams::Set(DisplayUdf*)>:
 80067a2:	6843      	ldr	r3, [r0, #4]
 80067a4:	009a      	lsls	r2, r3, #2
 80067a6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80067aa:	4604      	mov	r4, r0
 80067ac:	460e      	mov	r6, r1
 80067ae:	d506      	bpl.n	80067be <DisplayUdfParams::Set(DisplayUdf*)+0x1c>
 80067b0:	6988      	ldr	r0, [r1, #24]
 80067b2:	b120      	cbz	r0, 80067be <DisplayUdfParams::Set(DisplayUdf*)+0x1c>
 80067b4:	6803      	ldr	r3, [r0, #0]
 80067b6:	f894 1025 	ldrb.w	r1, [r4, #37]	; 0x25
 80067ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067bc:	4798      	blx	r3
 80067be:	6863      	ldr	r3, [r4, #4]
 80067c0:	69b0      	ldr	r0, [r6, #24]
 80067c2:	00db      	lsls	r3, r3, #3
 80067c4:	bf41      	itttt	mi
 80067c6:	f894 3024 	ldrbmi.w	r3, [r4, #36]	; 0x24
 80067ca:	f64e 2260 	movwmi	r2, #60000	; 0xea60
 80067ce:	4353      	mulmi	r3, r2
 80067d0:	6173      	strmi	r3, [r6, #20]
 80067d2:	6861      	ldr	r1, [r4, #4]
 80067d4:	f3c1 7180 	ubfx	r1, r1, #30, #1
 80067d8:	b110      	cbz	r0, 80067e0 <DisplayUdfParams::Set(DisplayUdf*)+0x3e>
 80067da:	6803      	ldr	r3, [r0, #0]
 80067dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067de:	4798      	blx	r3
 80067e0:	2500      	movs	r5, #0
 80067e2:	2701      	movs	r7, #1
 80067e4:	f104 0808 	add.w	r8, r4, #8
 80067e8:	6862      	ldr	r2, [r4, #4]
 80067ea:	fa07 f305 	lsl.w	r3, r7, r5
 80067ee:	4393      	bics	r3, r2
 80067f0:	d105      	bne.n	80067fe <DisplayUdfParams::Set(DisplayUdf*)+0x5c>
 80067f2:	f818 1005 	ldrb.w	r1, [r8, r5]
 80067f6:	462a      	mov	r2, r5
 80067f8:	4630      	mov	r0, r6
 80067fa:	f7ff ff4e 	bl	800669a <DisplayUdf::Set(unsigned char, displayudf::Labels)>
 80067fe:	3501      	adds	r5, #1
 8006800:	2d14      	cmp	r5, #20
 8006802:	d1f1      	bne.n	80067e8 <DisplayUdfParams::Set(DisplayUdf*)+0x46>
 8006804:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08006808 <DisplayUdfParams::Dump()>:
 8006808:	4770      	bx	lr
	...

0800680c <ConfigStore::GetStoreOffset(configstore::Store)>:
 800680c:	b510      	push	{r4, lr}
 800680e:	4a05      	ldr	r2, [pc, #20]	; (8006824 <ConfigStore::GetStoreOffset(configstore::Store)+0x18>)
 8006810:	2300      	movs	r3, #0
 8006812:	2020      	movs	r0, #32
 8006814:	428b      	cmp	r3, r1
 8006816:	d100      	bne.n	800681a <ConfigStore::GetStoreOffset(configstore::Store)+0xe>
 8006818:	bd10      	pop	{r4, pc}
 800681a:	f852 4b04 	ldr.w	r4, [r2], #4
 800681e:	3301      	adds	r3, #1
 8006820:	4420      	add	r0, r4
 8006822:	e7f7      	b.n	8006814 <ConfigStore::GetStoreOffset(configstore::Store)+0x8>
 8006824:	0800b2d4 	stmdaeq	r0, {r2, r4, r6, r7, r9, ip, sp, pc}

08006828 <ConfigStore::Init()>:
 8006828:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800682c:	b085      	sub	sp, #20
 800682e:	4607      	mov	r7, r0
 8006830:	f000 f9ca 	bl	8006bc8 <StoreDevice::GetSectorSize() const>
 8006834:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
 8006838:	4605      	mov	r5, r0
 800683a:	d004      	beq.n	8006846 <ConfigStore::Init()+0x1e>
 800683c:	2500      	movs	r5, #0
 800683e:	4628      	mov	r0, r5
 8006840:	b005      	add	sp, #20
 8006842:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006846:	4638      	mov	r0, r7
 8006848:	f000 f9bc 	bl	8006bc4 <StoreDevice::GetSize() const>
 800684c:	4b3a      	ldr	r3, [pc, #232]	; (8006938 <ConfigStore::Init()+0x110>)
 800684e:	f5a0 5180 	sub.w	r1, r0, #4096	; 0x1000
 8006852:	f3c1 060b 	ubfx	r6, r1, #0, #12
 8006856:	6019      	str	r1, [r3, #0]
 8006858:	2e00      	cmp	r6, #0
 800685a:	d1ef      	bne.n	800683c <ConfigStore::Init()+0x14>
 800685c:	4c37      	ldr	r4, [pc, #220]	; (800693c <ConfigStore::Init()+0x114>)
 800685e:	ab03      	add	r3, sp, #12
 8006860:	462a      	mov	r2, r5
 8006862:	9300      	str	r3, [sp, #0]
 8006864:	4638      	mov	r0, r7
 8006866:	4623      	mov	r3, r4
 8006868:	f000 f9b0 	bl	8006bcc <StoreDevice::Read(unsigned int, unsigned int, unsigned char*, storedevice::result&)>
 800686c:	7823      	ldrb	r3, [r4, #0]
 800686e:	2b41      	cmp	r3, #65	; 0x41
 8006870:	bf1c      	itt	ne
 8006872:	2341      	movne	r3, #65	; 0x41
 8006874:	7023      	strbne	r3, [r4, #0]
 8006876:	7863      	ldrb	r3, [r4, #1]
 8006878:	bf14      	ite	ne
 800687a:	4635      	movne	r5, r6
 800687c:	2501      	moveq	r5, #1
 800687e:	2b76      	cmp	r3, #118	; 0x76
 8006880:	bf1c      	itt	ne
 8006882:	2376      	movne	r3, #118	; 0x76
 8006884:	7063      	strbne	r3, [r4, #1]
 8006886:	78a3      	ldrb	r3, [r4, #2]
 8006888:	bf18      	it	ne
 800688a:	2500      	movne	r5, #0
 800688c:	2b56      	cmp	r3, #86	; 0x56
 800688e:	bf1c      	itt	ne
 8006890:	2356      	movne	r3, #86	; 0x56
 8006892:	70a3      	strbne	r3, [r4, #2]
 8006894:	78e3      	ldrb	r3, [r4, #3]
 8006896:	bf18      	it	ne
 8006898:	2500      	movne	r5, #0
 800689a:	2b10      	cmp	r3, #16
 800689c:	d01f      	beq.n	80068de <ConfigStore::Init()+0xb6>
 800689e:	2310      	movs	r3, #16
 80068a0:	70e3      	strb	r3, [r4, #3]
 80068a2:	4b27      	ldr	r3, [pc, #156]	; (8006940 <ConfigStore::Init()+0x118>)
 80068a4:	f8df 80a0 	ldr.w	r8, [pc, #160]	; 8006948 <ConfigStore::Init()+0x120>
 80068a8:	2201      	movs	r2, #1
 80068aa:	701a      	strb	r2, [r3, #0]
 80068ac:	2500      	movs	r5, #0
 80068ae:	f04f 09ff 	mov.w	r9, #255	; 0xff
 80068b2:	4631      	mov	r1, r6
 80068b4:	4638      	mov	r0, r7
 80068b6:	f7ff ffa9 	bl	800680c <ConfigStore::GetStoreOffset(configstore::Store)>
 80068ba:	1823      	adds	r3, r4, r0
 80068bc:	5425      	strb	r5, [r4, r0]
 80068be:	705d      	strb	r5, [r3, #1]
 80068c0:	709d      	strb	r5, [r3, #2]
 80068c2:	70dd      	strb	r5, [r3, #3]
 80068c4:	f858 3b04 	ldr.w	r3, [r8], #4
 80068c8:	1d02      	adds	r2, r0, #4
 80068ca:	4403      	add	r3, r0
 80068cc:	429a      	cmp	r2, r3
 80068ce:	d32f      	bcc.n	8006930 <ConfigStore::Init()+0x108>
 80068d0:	3601      	adds	r6, #1
 80068d2:	2e1c      	cmp	r6, #28
 80068d4:	d1ed      	bne.n	80068b2 <ConfigStore::Init()+0x8a>
 80068d6:	4b1b      	ldr	r3, [pc, #108]	; (8006944 <ConfigStore::Init()+0x11c>)
 80068d8:	2501      	movs	r5, #1
 80068da:	601d      	str	r5, [r3, #0]
 80068dc:	e7af      	b.n	800683e <ConfigStore::Init()+0x16>
 80068de:	2d00      	cmp	r5, #0
 80068e0:	d0df      	beq.n	80068a2 <ConfigStore::Init()+0x7a>
 80068e2:	f04f 0900 	mov.w	r9, #0
 80068e6:	46c8      	mov	r8, r9
 80068e8:	4631      	mov	r1, r6
 80068ea:	4638      	mov	r0, r7
 80068ec:	f7ff ff8e 	bl	800680c <ConfigStore::GetStoreOffset(configstore::Store)>
 80068f0:	5c23      	ldrb	r3, [r4, r0]
 80068f2:	2bff      	cmp	r3, #255	; 0xff
 80068f4:	d112      	bne.n	800691c <ConfigStore::Init()+0xf4>
 80068f6:	1823      	adds	r3, r4, r0
 80068f8:	785a      	ldrb	r2, [r3, #1]
 80068fa:	2aff      	cmp	r2, #255	; 0xff
 80068fc:	d10e      	bne.n	800691c <ConfigStore::Init()+0xf4>
 80068fe:	789a      	ldrb	r2, [r3, #2]
 8006900:	2aff      	cmp	r2, #255	; 0xff
 8006902:	d10b      	bne.n	800691c <ConfigStore::Init()+0xf4>
 8006904:	78da      	ldrb	r2, [r3, #3]
 8006906:	2aff      	cmp	r2, #255	; 0xff
 8006908:	d108      	bne.n	800691c <ConfigStore::Init()+0xf4>
 800690a:	f804 8000 	strb.w	r8, [r4, r0]
 800690e:	46a9      	mov	r9, r5
 8006910:	f883 8001 	strb.w	r8, [r3, #1]
 8006914:	f883 8002 	strb.w	r8, [r3, #2]
 8006918:	f883 8003 	strb.w	r8, [r3, #3]
 800691c:	3601      	adds	r6, #1
 800691e:	2e1c      	cmp	r6, #28
 8006920:	d1e2      	bne.n	80068e8 <ConfigStore::Init()+0xc0>
 8006922:	f1b9 0f00 	cmp.w	r9, #0
 8006926:	d08a      	beq.n	800683e <ConfigStore::Init()+0x16>
 8006928:	4b06      	ldr	r3, [pc, #24]	; (8006944 <ConfigStore::Init()+0x11c>)
 800692a:	2201      	movs	r2, #1
 800692c:	601a      	str	r2, [r3, #0]
 800692e:	e786      	b.n	800683e <ConfigStore::Init()+0x16>
 8006930:	f804 9002 	strb.w	r9, [r4, r2]
 8006934:	3201      	adds	r2, #1
 8006936:	e7c9      	b.n	80068cc <ConfigStore::Init()+0xa4>
 8006938:	200016a8 	andcs	r1, r0, r8, lsr #13
 800693c:	200006a8 	andcs	r0, r0, r8, lsr #13
 8006940:	200016bc 			; <UNDEFINED> instruction: 0x200016bc
 8006944:	200016b4 			; <UNDEFINED> instruction: 0x200016b4
 8006948:	0800b2d4 	stmdaeq	r0, {r2, r4, r6, r7, r9, ip, sp, pc}

0800694c <ConfigStore::ConfigStore()>:
 800694c:	b538      	push	{r3, r4, r5, lr}
 800694e:	4604      	mov	r4, r0
 8006950:	f000 f930 	bl	8006bb4 <StoreDevice::StoreDevice()>
 8006954:	4b0b      	ldr	r3, [pc, #44]	; (8006984 <ConfigStore::ConfigStore()+0x38>)
 8006956:	4d0c      	ldr	r5, [pc, #48]	; (8006988 <ConfigStore::ConfigStore()+0x3c>)
 8006958:	601c      	str	r4, [r3, #0]
 800695a:	7863      	ldrb	r3, [r4, #1]
 800695c:	b11b      	cbz	r3, 8006966 <ConfigStore::ConfigStore()+0x1a>
 800695e:	4620      	mov	r0, r4
 8006960:	f7ff ff62 	bl	8006828 <ConfigStore::Init()>
 8006964:	7028      	strb	r0, [r5, #0]
 8006966:	782b      	ldrb	r3, [r5, #0]
 8006968:	b153      	cbz	r3, 8006980 <ConfigStore::ConfigStore()+0x34>
 800696a:	4908      	ldr	r1, [pc, #32]	; (800698c <ConfigStore::ConfigStore()+0x40>)
 800696c:	2320      	movs	r3, #32
 800696e:	2200      	movs	r2, #0
 8006970:	f851 0b04 	ldr.w	r0, [r1], #4
 8006974:	3201      	adds	r2, #1
 8006976:	2a1c      	cmp	r2, #28
 8006978:	4403      	add	r3, r0
 800697a:	d1f9      	bne.n	8006970 <ConfigStore::ConfigStore()+0x24>
 800697c:	4a04      	ldr	r2, [pc, #16]	; (8006990 <ConfigStore::ConfigStore()+0x44>)
 800697e:	6013      	str	r3, [r2, #0]
 8006980:	4620      	mov	r0, r4
 8006982:	bd38      	pop	{r3, r4, r5, pc}
 8006984:	200016b8 			; <UNDEFINED> instruction: 0x200016b8
 8006988:	200016ac 	andcs	r1, r0, ip, lsr #13
 800698c:	0800b2d4 	stmdaeq	r0, {r2, r4, r6, r7, r9, ip, sp, pc}
 8006990:	200016b0 			; <UNDEFINED> instruction: 0x200016b0

08006994 <ConfigStore::ResetSetList(configstore::Store)>:
 8006994:	b508      	push	{r3, lr}
 8006996:	f7ff ff39 	bl	800680c <ConfigStore::GetStoreOffset(configstore::Store)>
 800699a:	4905      	ldr	r1, [pc, #20]	; (80069b0 <ConfigStore::ResetSetList(configstore::Store)+0x1c>)
 800699c:	1842      	adds	r2, r0, r1
 800699e:	2300      	movs	r3, #0
 80069a0:	540b      	strb	r3, [r1, r0]
 80069a2:	7053      	strb	r3, [r2, #1]
 80069a4:	7093      	strb	r3, [r2, #2]
 80069a6:	70d3      	strb	r3, [r2, #3]
 80069a8:	4b02      	ldr	r3, [pc, #8]	; (80069b4 <ConfigStore::ResetSetList(configstore::Store)+0x20>)
 80069aa:	2201      	movs	r2, #1
 80069ac:	601a      	str	r2, [r3, #0]
 80069ae:	bd08      	pop	{r3, pc}
 80069b0:	200006a8 	andcs	r0, r0, r8, lsr #13
 80069b4:	200016b4 			; <UNDEFINED> instruction: 0x200016b4

080069b8 <ConfigStore::Update(configstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>:
 80069b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80069bc:	461c      	mov	r4, r3
 80069be:	4b19      	ldr	r3, [pc, #100]	; (8006a24 <ConfigStore::Update(configstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)+0x6c>)
 80069c0:	9d07      	ldr	r5, [sp, #28]
 80069c2:	781f      	ldrb	r7, [r3, #0]
 80069c4:	4616      	mov	r6, r2
 80069c6:	b307      	cbz	r7, 8006a0a <ConfigStore::Update(configstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)+0x52>
 80069c8:	f7ff ff20 	bl	800680c <ConfigStore::GetStoreOffset(configstore::Store)>
 80069cc:	4a16      	ldr	r2, [pc, #88]	; (8006a28 <ConfigStore::Update(configstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)+0x70>)
 80069ce:	1831      	adds	r1, r6, r0
 80069d0:	1e63      	subs	r3, r4, #1
 80069d2:	9c06      	ldr	r4, [sp, #24]
 80069d4:	4411      	add	r1, r2
 80069d6:	440c      	add	r4, r1
 80069d8:	f04f 0c00 	mov.w	ip, #0
 80069dc:	42a1      	cmp	r1, r4
 80069de:	d116      	bne.n	8006a0e <ConfigStore::Update(configstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)+0x56>
 80069e0:	f1bc 0f00 	cmp.w	ip, #0
 80069e4:	d011      	beq.n	8006a0a <ConfigStore::Update(configstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)+0x52>
 80069e6:	4b11      	ldr	r3, [pc, #68]	; (8006a2c <ConfigStore::Update(configstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)+0x74>)
 80069e8:	6819      	ldr	r1, [r3, #0]
 80069ea:	b109      	cbz	r1, 80069f0 <ConfigStore::Update(configstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)+0x38>
 80069ec:	2906      	cmp	r1, #6
 80069ee:	d101      	bne.n	80069f4 <ConfigStore::Update(configstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)+0x3c>
 80069f0:	2101      	movs	r1, #1
 80069f2:	6019      	str	r1, [r3, #0]
 80069f4:	4b0e      	ldr	r3, [pc, #56]	; (8006a30 <ConfigStore::Update(configstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)+0x78>)
 80069f6:	6819      	ldr	r1, [r3, #0]
 80069f8:	4b0e      	ldr	r3, [pc, #56]	; (8006a34 <ConfigStore::Update(configstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)+0x7c>)
 80069fa:	6019      	str	r1, [r3, #0]
 80069fc:	b12e      	cbz	r6, 8006a0a <ConfigStore::Update(configstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)+0x52>
 80069fe:	b125      	cbz	r5, 8006a0a <ConfigStore::Update(configstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)+0x52>
 8006a00:	9b08      	ldr	r3, [sp, #32]
 8006a02:	4418      	add	r0, r3
 8006a04:	5813      	ldr	r3, [r2, r0]
 8006a06:	432b      	orrs	r3, r5
 8006a08:	5013      	str	r3, [r2, r0]
 8006a0a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006a0e:	f891 8000 	ldrb.w	r8, [r1]
 8006a12:	f813 ef01 	ldrb.w	lr, [r3, #1]!
 8006a16:	45f0      	cmp	r8, lr
 8006a18:	bf1c      	itt	ne
 8006a1a:	f881 e000 	strbne.w	lr, [r1]
 8006a1e:	46bc      	movne	ip, r7
 8006a20:	3101      	adds	r1, #1
 8006a22:	e7db      	b.n	80069dc <ConfigStore::Update(configstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)+0x24>
 8006a24:	200016ac 	andcs	r1, r0, ip, lsr #13
 8006a28:	200006a8 	andcs	r0, r0, r8, lsr #13
 8006a2c:	200016b4 			; <UNDEFINED> instruction: 0x200016b4
 8006a30:	2000181c 	andcs	r1, r0, ip, lsl r8
 8006a34:	200006a4 	andcs	r0, r0, r4, lsr #13

08006a38 <ConfigStore::Copy(configstore::Store, void*, unsigned int, unsigned int, bool)>:
 8006a38:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006a3c:	461d      	mov	r5, r3
 8006a3e:	4b15      	ldr	r3, [pc, #84]	; (8006a94 <ConfigStore::Copy(configstore::Store, void*, unsigned int, unsigned int, bool)+0x5c>)
 8006a40:	b085      	sub	sp, #20
 8006a42:	781b      	ldrb	r3, [r3, #0]
 8006a44:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
 8006a48:	f89d 9034 	ldrb.w	r9, [sp, #52]	; 0x34
 8006a4c:	4607      	mov	r7, r0
 8006a4e:	4614      	mov	r4, r2
 8006a50:	b193      	cbz	r3, 8006a78 <ConfigStore::Copy(configstore::Store, void*, unsigned int, unsigned int, bool)+0x40>
 8006a52:	f7ff fedb 	bl	800680c <ConfigStore::GetStoreOffset(configstore::Store)>
 8006a56:	4a10      	ldr	r2, [pc, #64]	; (8006a98 <ConfigStore::Copy(configstore::Store, void*, unsigned int, unsigned int, bool)+0x60>)
 8006a58:	eb08 0600 	add.w	r6, r8, r0
 8006a5c:	18b3      	adds	r3, r6, r2
 8006a5e:	f1b9 0f00 	cmp.w	r9, #0
 8006a62:	d013      	beq.n	8006a8c <ConfigStore::Copy(configstore::Store, void*, unsigned int, unsigned int, bool)+0x54>
 8006a64:	5990      	ldr	r0, [r2, r6]
 8006a66:	b988      	cbnz	r0, 8006a8c <ConfigStore::Copy(configstore::Store, void*, unsigned int, unsigned int, bool)+0x54>
 8006a68:	e9cd 0001 	strd	r0, r0, [sp, #4]
 8006a6c:	9500      	str	r5, [sp, #0]
 8006a6e:	4623      	mov	r3, r4
 8006a70:	4642      	mov	r2, r8
 8006a72:	4638      	mov	r0, r7
 8006a74:	f7ff ffa0 	bl	80069b8 <ConfigStore::Update(configstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 8006a78:	b005      	add	sp, #20
 8006a7a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006a7e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006a82:	f804 2f01 	strb.w	r2, [r4, #1]!
 8006a86:	429d      	cmp	r5, r3
 8006a88:	d1f9      	bne.n	8006a7e <ConfigStore::Copy(configstore::Store, void*, unsigned int, unsigned int, bool)+0x46>
 8006a8a:	e7f5      	b.n	8006a78 <ConfigStore::Copy(configstore::Store, void*, unsigned int, unsigned int, bool)+0x40>
 8006a8c:	3c01      	subs	r4, #1
 8006a8e:	441d      	add	r5, r3
 8006a90:	e7f9      	b.n	8006a86 <ConfigStore::Copy(configstore::Store, void*, unsigned int, unsigned int, bool)+0x4e>
 8006a92:	bf00      	nop
 8006a94:	200016ac 	andcs	r1, r0, ip, lsr #13
 8006a98:	200006a8 	andcs	r0, r0, r8, lsr #13

08006a9c <ConfigStore::Flash()>:
 8006a9c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006a9e:	4c24      	ldr	r4, [pc, #144]	; (8006b30 <ConfigStore::Flash()+0x94>)
 8006aa0:	6823      	ldr	r3, [r4, #0]
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	d041      	beq.n	8006b2a <ConfigStore::Flash()+0x8e>
 8006aa6:	3b01      	subs	r3, #1
 8006aa8:	2b05      	cmp	r3, #5
 8006aaa:	d82f      	bhi.n	8006b0c <ConfigStore::Flash()+0x70>
 8006aac:	e8df f003 	tbb	[pc, r3]
 8006ab0:	2c140b03 			; <UNDEFINED> instruction: 0x2c140b03
 8006ab4:	4b1f2e23 	blmi	87d2348 <__exidx_end+0x7c6a78>
 8006ab8:	681a      	ldr	r2, [r3, #0]
 8006aba:	4b1f      	ldr	r3, [pc, #124]	; (8006b38 <ConfigStore::Flash()+0x9c>)
 8006abc:	601a      	str	r2, [r3, #0]
 8006abe:	2302      	movs	r3, #2
 8006ac0:	6023      	str	r3, [r4, #0]
 8006ac2:	2001      	movs	r0, #1
 8006ac4:	e02f      	b.n	8006b26 <ConfigStore::Flash()+0x8a>
 8006ac6:	4b1b      	ldr	r3, [pc, #108]	; (8006b34 <ConfigStore::Flash()+0x98>)
 8006ac8:	4a1b      	ldr	r2, [pc, #108]	; (8006b38 <ConfigStore::Flash()+0x9c>)
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	6812      	ldr	r2, [r2, #0]
 8006ace:	1a9b      	subs	r3, r3, r2
 8006ad0:	2b63      	cmp	r3, #99	; 0x63
 8006ad2:	d9f6      	bls.n	8006ac2 <ConfigStore::Flash()+0x26>
 8006ad4:	2303      	movs	r3, #3
 8006ad6:	e7f3      	b.n	8006ac0 <ConfigStore::Flash()+0x24>
 8006ad8:	4918      	ldr	r1, [pc, #96]	; (8006b3c <ConfigStore::Flash()+0xa0>)
 8006ada:	ab03      	add	r3, sp, #12
 8006adc:	6809      	ldr	r1, [r1, #0]
 8006ade:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8006ae2:	f000 f87d 	bl	8006be0 <StoreDevice::Erase(unsigned int, unsigned int, storedevice::result&)>
 8006ae6:	2800      	cmp	r0, #0
 8006ae8:	d0eb      	beq.n	8006ac2 <ConfigStore::Flash()+0x26>
 8006aea:	4b12      	ldr	r3, [pc, #72]	; (8006b34 <ConfigStore::Flash()+0x98>)
 8006aec:	681a      	ldr	r2, [r3, #0]
 8006aee:	4b12      	ldr	r3, [pc, #72]	; (8006b38 <ConfigStore::Flash()+0x9c>)
 8006af0:	601a      	str	r2, [r3, #0]
 8006af2:	2305      	movs	r3, #5
 8006af4:	e7e4      	b.n	8006ac0 <ConfigStore::Flash()+0x24>
 8006af6:	4b0f      	ldr	r3, [pc, #60]	; (8006b34 <ConfigStore::Flash()+0x98>)
 8006af8:	4a0f      	ldr	r2, [pc, #60]	; (8006b38 <ConfigStore::Flash()+0x9c>)
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	6812      	ldr	r2, [r2, #0]
 8006afe:	1a9b      	subs	r3, r3, r2
 8006b00:	2b63      	cmp	r3, #99	; 0x63
 8006b02:	d9de      	bls.n	8006ac2 <ConfigStore::Flash()+0x26>
 8006b04:	2304      	movs	r3, #4
 8006b06:	e7db      	b.n	8006ac0 <ConfigStore::Flash()+0x24>
 8006b08:	2306      	movs	r3, #6
 8006b0a:	e7d9      	b.n	8006ac0 <ConfigStore::Flash()+0x24>
 8006b0c:	ab03      	add	r3, sp, #12
 8006b0e:	4a0c      	ldr	r2, [pc, #48]	; (8006b40 <ConfigStore::Flash()+0xa4>)
 8006b10:	490a      	ldr	r1, [pc, #40]	; (8006b3c <ConfigStore::Flash()+0xa0>)
 8006b12:	9300      	str	r3, [sp, #0]
 8006b14:	6812      	ldr	r2, [r2, #0]
 8006b16:	4b0b      	ldr	r3, [pc, #44]	; (8006b44 <ConfigStore::Flash()+0xa8>)
 8006b18:	6809      	ldr	r1, [r1, #0]
 8006b1a:	f000 f86a 	bl	8006bf2 <StoreDevice::Write(unsigned int, unsigned int, unsigned char const*, storedevice::result&)>
 8006b1e:	2800      	cmp	r0, #0
 8006b20:	d0cf      	beq.n	8006ac2 <ConfigStore::Flash()+0x26>
 8006b22:	2000      	movs	r0, #0
 8006b24:	6020      	str	r0, [r4, #0]
 8006b26:	b004      	add	sp, #16
 8006b28:	bd10      	pop	{r4, pc}
 8006b2a:	4618      	mov	r0, r3
 8006b2c:	e7fb      	b.n	8006b26 <ConfigStore::Flash()+0x8a>
 8006b2e:	bf00      	nop
 8006b30:	200016b4 			; <UNDEFINED> instruction: 0x200016b4
 8006b34:	2000181c 	andcs	r1, r0, ip, lsl r8
 8006b38:	200006a4 	andcs	r0, r0, r4, lsr #13
 8006b3c:	200016a8 	andcs	r1, r0, r8, lsr #13
 8006b40:	200016b0 			; <UNDEFINED> instruction: 0x200016b0
 8006b44:	200006a8 	andcs	r0, r0, r8, lsr #13

08006b48 <StoreDisplayUdf::~StoreDisplayUdf()>:
 8006b48:	4770      	bx	lr
	...

08006b4c <StoreDisplayUdf::Copy(displayudfparams::Params*)>:
 8006b4c:	b507      	push	{r0, r1, r2, lr}
 8006b4e:	2300      	movs	r3, #0
 8006b50:	460a      	mov	r2, r1
 8006b52:	2101      	movs	r1, #1
 8006b54:	e9cd 3100 	strd	r3, r1, [sp]
 8006b58:	4804      	ldr	r0, [pc, #16]	; (8006b6c <StoreDisplayUdf::Copy(displayudfparams::Params*)+0x20>)
 8006b5a:	2322      	movs	r3, #34	; 0x22
 8006b5c:	6800      	ldr	r0, [r0, #0]
 8006b5e:	210f      	movs	r1, #15
 8006b60:	f7ff ff6a 	bl	8006a38 <ConfigStore::Copy(configstore::Store, void*, unsigned int, unsigned int, bool)>
 8006b64:	b003      	add	sp, #12
 8006b66:	f85d fb04 	ldr.w	pc, [sp], #4
 8006b6a:	bf00      	nop
 8006b6c:	200016b8 			; <UNDEFINED> instruction: 0x200016b8

08006b70 <StoreDisplayUdf::Update(displayudfparams::Params const*)>:
 8006b70:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006b72:	2200      	movs	r2, #0
 8006b74:	e9cd 2201 	strd	r2, r2, [sp, #4]
 8006b78:	460b      	mov	r3, r1
 8006b7a:	4805      	ldr	r0, [pc, #20]	; (8006b90 <StoreDisplayUdf::Update(displayudfparams::Params const*)+0x20>)
 8006b7c:	2122      	movs	r1, #34	; 0x22
 8006b7e:	9100      	str	r1, [sp, #0]
 8006b80:	6800      	ldr	r0, [r0, #0]
 8006b82:	210f      	movs	r1, #15
 8006b84:	f7ff ff18 	bl	80069b8 <ConfigStore::Update(configstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 8006b88:	b005      	add	sp, #20
 8006b8a:	f85d fb04 	ldr.w	pc, [sp], #4
 8006b8e:	bf00      	nop
 8006b90:	200016b8 			; <UNDEFINED> instruction: 0x200016b8

08006b94 <StoreDisplayUdf::~StoreDisplayUdf()>:
 8006b94:	b510      	push	{r4, lr}
 8006b96:	4604      	mov	r4, r0
 8006b98:	f001 f8a1 	bl	8007cde <operator delete(void*)>
 8006b9c:	4620      	mov	r0, r4
 8006b9e:	bd10      	pop	{r4, pc}

08006ba0 <StoreDisplayUdf::StoreDisplayUdf()>:
 8006ba0:	4a02      	ldr	r2, [pc, #8]	; (8006bac <StoreDisplayUdf::StoreDisplayUdf()+0xc>)
 8006ba2:	6002      	str	r2, [r0, #0]
 8006ba4:	4a02      	ldr	r2, [pc, #8]	; (8006bb0 <StoreDisplayUdf::StoreDisplayUdf()+0x10>)
 8006ba6:	6010      	str	r0, [r2, #0]
 8006ba8:	4770      	bx	lr
 8006baa:	bf00      	nop
 8006bac:	0800b34c 	stmdaeq	r0, {r2, r3, r6, r8, r9, ip, sp, pc}
 8006bb0:	200016c0 	andcs	r1, r0, r0, asr #13

08006bb4 <StoreDevice::StoreDevice()>:
 8006bb4:	b510      	push	{r4, lr}
 8006bb6:	4604      	mov	r4, r0
 8006bb8:	f000 f9ce 	bl	8006f58 <FlashCode::FlashCode()>
 8006bbc:	7823      	ldrb	r3, [r4, #0]
 8006bbe:	7063      	strb	r3, [r4, #1]
 8006bc0:	4620      	mov	r0, r4
 8006bc2:	bd10      	pop	{r4, pc}

08006bc4 <StoreDevice::GetSize() const>:
 8006bc4:	f000 b9e4 	b.w	8006f90 <FlashCode::GetSize() const>

08006bc8 <StoreDevice::GetSectorSize() const>:
 8006bc8:	f000 b9ea 	b.w	8006fa0 <FlashCode::GetSectorSize() const>

08006bcc <StoreDevice::Read(unsigned int, unsigned int, unsigned char*, storedevice::result&)>:
 8006bcc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006bce:	ac03      	add	r4, sp, #12
 8006bd0:	9400      	str	r4, [sp, #0]
 8006bd2:	f000 f9e8 	bl	8006fa6 <FlashCode::Read(unsigned int, unsigned int, unsigned char*, flashcode::result&)>
 8006bd6:	9b06      	ldr	r3, [sp, #24]
 8006bd8:	9a03      	ldr	r2, [sp, #12]
 8006bda:	601a      	str	r2, [r3, #0]
 8006bdc:	b004      	add	sp, #16
 8006bde:	bd10      	pop	{r4, pc}

08006be0 <StoreDevice::Erase(unsigned int, unsigned int, storedevice::result&)>:
 8006be0:	b513      	push	{r0, r1, r4, lr}
 8006be2:	461c      	mov	r4, r3
 8006be4:	ab01      	add	r3, sp, #4
 8006be6:	f000 f9ed 	bl	8006fc4 <FlashCode::Erase(unsigned int, unsigned int, flashcode::result&)>
 8006bea:	9b01      	ldr	r3, [sp, #4]
 8006bec:	6023      	str	r3, [r4, #0]
 8006bee:	b002      	add	sp, #8
 8006bf0:	bd10      	pop	{r4, pc}

08006bf2 <StoreDevice::Write(unsigned int, unsigned int, unsigned char const*, storedevice::result&)>:
 8006bf2:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006bf4:	ac03      	add	r4, sp, #12
 8006bf6:	9400      	str	r4, [sp, #0]
 8006bf8:	f000 fa84 	bl	8007104 <FlashCode::Write(unsigned int, unsigned int, unsigned char const*, flashcode::result&)>
 8006bfc:	9b06      	ldr	r3, [sp, #24]
 8006bfe:	9a03      	ldr	r2, [sp, #12]
 8006c00:	601a      	str	r2, [r3, #0]
 8006c02:	b004      	add	sp, #16
 8006c04:	bd10      	pop	{r4, pc}

08006c06 <StorePixelDmx::~StorePixelDmx()>:
 8006c06:	4770      	bx	lr

08006c08 <non-virtual thunk to StorePixelDmx::~StorePixelDmx()>:
 8006c08:	3804      	subs	r0, #4
 8006c0a:	4770      	bx	lr

08006c0c <StorePixelDmx::Update(pixeldmxparams::Params const*)>:
 8006c0c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006c0e:	2200      	movs	r2, #0
 8006c10:	e9cd 2201 	strd	r2, r2, [sp, #4]
 8006c14:	460b      	mov	r3, r1
 8006c16:	4805      	ldr	r0, [pc, #20]	; (8006c2c <StorePixelDmx::Update(pixeldmxparams::Params const*)+0x20>)
 8006c18:	2118      	movs	r1, #24
 8006c1a:	9100      	str	r1, [sp, #0]
 8006c1c:	6800      	ldr	r0, [r0, #0]
 8006c1e:	2103      	movs	r1, #3
 8006c20:	f7ff feca 	bl	80069b8 <ConfigStore::Update(configstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 8006c24:	b005      	add	sp, #20
 8006c26:	f85d fb04 	ldr.w	pc, [sp], #4
 8006c2a:	bf00      	nop
 8006c2c:	200016b8 			; <UNDEFINED> instruction: 0x200016b8

08006c30 <StorePixelDmx::SaveDmxStartAddress(unsigned short)>:
 8006c30:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8006c32:	2304      	movs	r3, #4
 8006c34:	2200      	movs	r2, #0
 8006c36:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8006c3a:	4807      	ldr	r0, [pc, #28]	; (8006c58 <StorePixelDmx::SaveDmxStartAddress(unsigned short)+0x28>)
 8006c3c:	f8ad 1016 	strh.w	r1, [sp, #22]
 8006c40:	2302      	movs	r3, #2
 8006c42:	9300      	str	r3, [sp, #0]
 8006c44:	6800      	ldr	r0, [r0, #0]
 8006c46:	f10d 0316 	add.w	r3, sp, #22
 8006c4a:	2207      	movs	r2, #7
 8006c4c:	2103      	movs	r1, #3
 8006c4e:	f7ff feb3 	bl	80069b8 <ConfigStore::Update(configstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 8006c52:	b007      	add	sp, #28
 8006c54:	f85d fb04 	ldr.w	pc, [sp], #4
 8006c58:	200016b8 			; <UNDEFINED> instruction: 0x200016b8

08006c5c <non-virtual thunk to StorePixelDmx::SaveDmxStartAddress(unsigned short)>:
 8006c5c:	f1a0 0004 	sub.w	r0, r0, #4
 8006c60:	e7e6      	b.n	8006c30 <StorePixelDmx::SaveDmxStartAddress(unsigned short)>
 8006c62:	bf00      	nop

08006c64 <StorePixelDmx::SaveTestPattern(unsigned char)>:
 8006c64:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8006c66:	2308      	movs	r3, #8
 8006c68:	2200      	movs	r2, #0
 8006c6a:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8006c6e:	4807      	ldr	r0, [pc, #28]	; (8006c8c <StorePixelDmx::SaveTestPattern(unsigned char)+0x28>)
 8006c70:	f88d 1017 	strb.w	r1, [sp, #23]
 8006c74:	2301      	movs	r3, #1
 8006c76:	9300      	str	r3, [sp, #0]
 8006c78:	6800      	ldr	r0, [r0, #0]
 8006c7a:	f10d 0317 	add.w	r3, sp, #23
 8006c7e:	2210      	movs	r2, #16
 8006c80:	2103      	movs	r1, #3
 8006c82:	f7ff fe99 	bl	80069b8 <ConfigStore::Update(configstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 8006c86:	b007      	add	sp, #28
 8006c88:	f85d fb04 	ldr.w	pc, [sp], #4
 8006c8c:	200016b8 			; <UNDEFINED> instruction: 0x200016b8

08006c90 <non-virtual thunk to StorePixelDmx::SaveTestPattern(unsigned char)>:
 8006c90:	f1a0 0004 	sub.w	r0, r0, #4
 8006c94:	e7e6      	b.n	8006c64 <StorePixelDmx::SaveTestPattern(unsigned char)>
 8006c96:	bf00      	nop

08006c98 <StorePixelDmx::SaveMap(unsigned char)>:
 8006c98:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8006c9a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006c9e:	2200      	movs	r2, #0
 8006ca0:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8006ca4:	4807      	ldr	r0, [pc, #28]	; (8006cc4 <StorePixelDmx::SaveMap(unsigned char)+0x2c>)
 8006ca6:	f88d 1017 	strb.w	r1, [sp, #23]
 8006caa:	2301      	movs	r3, #1
 8006cac:	9300      	str	r3, [sp, #0]
 8006cae:	6800      	ldr	r0, [r0, #0]
 8006cb0:	f10d 0317 	add.w	r3, sp, #23
 8006cb4:	2213      	movs	r2, #19
 8006cb6:	2103      	movs	r1, #3
 8006cb8:	f7ff fe7e 	bl	80069b8 <ConfigStore::Update(configstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 8006cbc:	b007      	add	sp, #28
 8006cbe:	f85d fb04 	ldr.w	pc, [sp], #4
 8006cc2:	bf00      	nop
 8006cc4:	200016b8 			; <UNDEFINED> instruction: 0x200016b8

08006cc8 <non-virtual thunk to StorePixelDmx::SaveMap(unsigned char)>:
 8006cc8:	f1a0 0004 	sub.w	r0, r0, #4
 8006ccc:	e7e4      	b.n	8006c98 <StorePixelDmx::SaveMap(unsigned char)>
 8006cce:	bf00      	nop

08006cd0 <StorePixelDmx::SaveGroupingCount(unsigned short)>:
 8006cd0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8006cd2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006cd6:	2200      	movs	r2, #0
 8006cd8:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8006cdc:	4807      	ldr	r0, [pc, #28]	; (8006cfc <StorePixelDmx::SaveGroupingCount(unsigned short)+0x2c>)
 8006cde:	f8ad 1016 	strh.w	r1, [sp, #22]
 8006ce2:	2302      	movs	r3, #2
 8006ce4:	9300      	str	r3, [sp, #0]
 8006ce6:	6800      	ldr	r0, [r0, #0]
 8006ce8:	f10d 0316 	add.w	r3, sp, #22
 8006cec:	2211      	movs	r2, #17
 8006cee:	2103      	movs	r1, #3
 8006cf0:	f7ff fe62 	bl	80069b8 <ConfigStore::Update(configstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 8006cf4:	b007      	add	sp, #28
 8006cf6:	f85d fb04 	ldr.w	pc, [sp], #4
 8006cfa:	bf00      	nop
 8006cfc:	200016b8 			; <UNDEFINED> instruction: 0x200016b8

08006d00 <non-virtual thunk to StorePixelDmx::SaveGroupingCount(unsigned short)>:
 8006d00:	f1a0 0004 	sub.w	r0, r0, #4
 8006d04:	e7e4      	b.n	8006cd0 <StorePixelDmx::SaveGroupingCount(unsigned short)>
 8006d06:	bf00      	nop

08006d08 <StorePixelDmx::SaveCount(unsigned short)>:
 8006d08:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8006d0a:	2302      	movs	r3, #2
 8006d0c:	2200      	movs	r2, #0
 8006d0e:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8006d12:	4807      	ldr	r0, [pc, #28]	; (8006d30 <StorePixelDmx::SaveCount(unsigned short)+0x28>)
 8006d14:	9300      	str	r3, [sp, #0]
 8006d16:	f8ad 1016 	strh.w	r1, [sp, #22]
 8006d1a:	6800      	ldr	r0, [r0, #0]
 8006d1c:	f10d 0316 	add.w	r3, sp, #22
 8006d20:	2205      	movs	r2, #5
 8006d22:	2103      	movs	r1, #3
 8006d24:	f7ff fe48 	bl	80069b8 <ConfigStore::Update(configstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 8006d28:	b007      	add	sp, #28
 8006d2a:	f85d fb04 	ldr.w	pc, [sp], #4
 8006d2e:	bf00      	nop
 8006d30:	200016b8 			; <UNDEFINED> instruction: 0x200016b8

08006d34 <non-virtual thunk to StorePixelDmx::SaveCount(unsigned short)>:
 8006d34:	f1a0 0004 	sub.w	r0, r0, #4
 8006d38:	e7e6      	b.n	8006d08 <StorePixelDmx::SaveCount(unsigned short)>
 8006d3a:	bf00      	nop

08006d3c <StorePixelDmx::SaveType(unsigned char)>:
 8006d3c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8006d3e:	2301      	movs	r3, #1
 8006d40:	2200      	movs	r2, #0
 8006d42:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8006d46:	4807      	ldr	r0, [pc, #28]	; (8006d64 <StorePixelDmx::SaveType(unsigned char)+0x28>)
 8006d48:	9300      	str	r3, [sp, #0]
 8006d4a:	f88d 1017 	strb.w	r1, [sp, #23]
 8006d4e:	6800      	ldr	r0, [r0, #0]
 8006d50:	f10d 0317 	add.w	r3, sp, #23
 8006d54:	2204      	movs	r2, #4
 8006d56:	2103      	movs	r1, #3
 8006d58:	f7ff fe2e 	bl	80069b8 <ConfigStore::Update(configstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 8006d5c:	b007      	add	sp, #28
 8006d5e:	f85d fb04 	ldr.w	pc, [sp], #4
 8006d62:	bf00      	nop
 8006d64:	200016b8 			; <UNDEFINED> instruction: 0x200016b8

08006d68 <non-virtual thunk to StorePixelDmx::SaveType(unsigned char)>:
 8006d68:	f1a0 0004 	sub.w	r0, r0, #4
 8006d6c:	e7e6      	b.n	8006d3c <StorePixelDmx::SaveType(unsigned char)>
 8006d6e:	bf00      	nop

08006d70 <StorePixelDmx::~StorePixelDmx()>:
 8006d70:	b510      	push	{r4, lr}
 8006d72:	4604      	mov	r4, r0
 8006d74:	f000 ffb3 	bl	8007cde <operator delete(void*)>
 8006d78:	4620      	mov	r0, r4
 8006d7a:	bd10      	pop	{r4, pc}

08006d7c <non-virtual thunk to StorePixelDmx::~StorePixelDmx()>:
 8006d7c:	f1a0 0004 	sub.w	r0, r0, #4
 8006d80:	e7f6      	b.n	8006d70 <StorePixelDmx::~StorePixelDmx()>
	...

08006d84 <StorePixelDmx::Copy(pixeldmxparams::Params*)>:
 8006d84:	b507      	push	{r0, r1, r2, lr}
 8006d86:	2300      	movs	r3, #0
 8006d88:	460a      	mov	r2, r1
 8006d8a:	2101      	movs	r1, #1
 8006d8c:	e9cd 3100 	strd	r3, r1, [sp]
 8006d90:	4804      	ldr	r0, [pc, #16]	; (8006da4 <StorePixelDmx::Copy(pixeldmxparams::Params*)+0x20>)
 8006d92:	2318      	movs	r3, #24
 8006d94:	6800      	ldr	r0, [r0, #0]
 8006d96:	2103      	movs	r1, #3
 8006d98:	f7ff fe4e 	bl	8006a38 <ConfigStore::Copy(configstore::Store, void*, unsigned int, unsigned int, bool)>
 8006d9c:	b003      	add	sp, #12
 8006d9e:	f85d fb04 	ldr.w	pc, [sp], #4
 8006da2:	bf00      	nop
 8006da4:	200016b8 			; <UNDEFINED> instruction: 0x200016b8

08006da8 <StorePixelDmx::StorePixelDmx()>:
 8006da8:	4a03      	ldr	r2, [pc, #12]	; (8006db8 <StorePixelDmx::StorePixelDmx()+0x10>)
 8006daa:	6002      	str	r2, [r0, #0]
 8006dac:	3230      	adds	r2, #48	; 0x30
 8006dae:	6042      	str	r2, [r0, #4]
 8006db0:	4a02      	ldr	r2, [pc, #8]	; (8006dbc <StorePixelDmx::StorePixelDmx()+0x14>)
 8006db2:	6010      	str	r0, [r2, #0]
 8006db4:	4770      	bx	lr
 8006db6:	bf00      	nop
 8006db8:	0800b364 	stmdaeq	r0, {r2, r5, r6, r8, r9, ip, sp, pc}
 8006dbc:	200016c4 	andcs	r1, r0, r4, asr #13

08006dc0 <StoreRDMDevice::~StoreRDMDevice()>:
 8006dc0:	4770      	bx	lr

08006dc2 <non-virtual thunk to StoreRDMDevice::~StoreRDMDevice()>:
 8006dc2:	3804      	subs	r0, #4
 8006dc4:	4770      	bx	lr
	...

08006dc8 <StoreRDMDevice::Update(TRDMDeviceParams const*)>:
 8006dc8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006dca:	2200      	movs	r2, #0
 8006dcc:	e9cd 2201 	strd	r2, r2, [sp, #4]
 8006dd0:	460b      	mov	r3, r1
 8006dd2:	4805      	ldr	r0, [pc, #20]	; (8006de8 <StoreRDMDevice::Update(TRDMDeviceParams const*)+0x20>)
 8006dd4:	2129      	movs	r1, #41	; 0x29
 8006dd6:	9100      	str	r1, [sp, #0]
 8006dd8:	6800      	ldr	r0, [r0, #0]
 8006dda:	210b      	movs	r1, #11
 8006ddc:	f7ff fdec 	bl	80069b8 <ConfigStore::Update(configstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 8006de0:	b005      	add	sp, #20
 8006de2:	f85d fb04 	ldr.w	pc, [sp], #4
 8006de6:	bf00      	nop
 8006de8:	200016b8 			; <UNDEFINED> instruction: 0x200016b8

08006dec <StoreRDMDevice::SaveLabel(char const*, unsigned char)>:
 8006dec:	b570      	push	{r4, r5, r6, lr}
 8006dee:	4d0d      	ldr	r5, [pc, #52]	; (8006e24 <StoreRDMDevice::SaveLabel(char const*, unsigned char)+0x38>)
 8006df0:	b086      	sub	sp, #24
 8006df2:	2401      	movs	r4, #1
 8006df4:	2600      	movs	r6, #0
 8006df6:	6828      	ldr	r0, [r5, #0]
 8006df8:	f88d 2017 	strb.w	r2, [sp, #23]
 8006dfc:	460b      	mov	r3, r1
 8006dfe:	9200      	str	r2, [sp, #0]
 8006e00:	e9cd 4601 	strd	r4, r6, [sp, #4]
 8006e04:	2204      	movs	r2, #4
 8006e06:	210b      	movs	r1, #11
 8006e08:	f7ff fdd6 	bl	80069b8 <ConfigStore::Update(configstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 8006e0c:	e9cd 4601 	strd	r4, r6, [sp, #4]
 8006e10:	6828      	ldr	r0, [r5, #0]
 8006e12:	9400      	str	r4, [sp, #0]
 8006e14:	f10d 0317 	add.w	r3, sp, #23
 8006e18:	2224      	movs	r2, #36	; 0x24
 8006e1a:	210b      	movs	r1, #11
 8006e1c:	f7ff fdcc 	bl	80069b8 <ConfigStore::Update(configstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 8006e20:	b006      	add	sp, #24
 8006e22:	bd70      	pop	{r4, r5, r6, pc}
 8006e24:	200016b8 			; <UNDEFINED> instruction: 0x200016b8

08006e28 <non-virtual thunk to StoreRDMDevice::SaveLabel(char const*, unsigned char)>:
 8006e28:	f1a0 0004 	sub.w	r0, r0, #4
 8006e2c:	e7de      	b.n	8006dec <StoreRDMDevice::SaveLabel(char const*, unsigned char)>
 8006e2e:	bf00      	nop

08006e30 <StoreRDMDevice::~StoreRDMDevice()>:
 8006e30:	b510      	push	{r4, lr}
 8006e32:	4604      	mov	r4, r0
 8006e34:	f000 ff53 	bl	8007cde <operator delete(void*)>
 8006e38:	4620      	mov	r0, r4
 8006e3a:	bd10      	pop	{r4, pc}

08006e3c <non-virtual thunk to StoreRDMDevice::~StoreRDMDevice()>:
 8006e3c:	f1a0 0004 	sub.w	r0, r0, #4
 8006e40:	e7f6      	b.n	8006e30 <StoreRDMDevice::~StoreRDMDevice()>
	...

08006e44 <StoreRDMDevice::Copy(TRDMDeviceParams*)>:
 8006e44:	b507      	push	{r0, r1, r2, lr}
 8006e46:	2300      	movs	r3, #0
 8006e48:	460a      	mov	r2, r1
 8006e4a:	2101      	movs	r1, #1
 8006e4c:	e9cd 3100 	strd	r3, r1, [sp]
 8006e50:	4804      	ldr	r0, [pc, #16]	; (8006e64 <StoreRDMDevice::Copy(TRDMDeviceParams*)+0x20>)
 8006e52:	2329      	movs	r3, #41	; 0x29
 8006e54:	6800      	ldr	r0, [r0, #0]
 8006e56:	210b      	movs	r1, #11
 8006e58:	f7ff fdee 	bl	8006a38 <ConfigStore::Copy(configstore::Store, void*, unsigned int, unsigned int, bool)>
 8006e5c:	b003      	add	sp, #12
 8006e5e:	f85d fb04 	ldr.w	pc, [sp], #4
 8006e62:	bf00      	nop
 8006e64:	200016b8 			; <UNDEFINED> instruction: 0x200016b8

08006e68 <StoreRDMDevice::StoreRDMDevice()>:
 8006e68:	4a03      	ldr	r2, [pc, #12]	; (8006e78 <StoreRDMDevice::StoreRDMDevice()+0x10>)
 8006e6a:	6002      	str	r2, [r0, #0]
 8006e6c:	321c      	adds	r2, #28
 8006e6e:	6042      	str	r2, [r0, #4]
 8006e70:	4a02      	ldr	r2, [pc, #8]	; (8006e7c <StoreRDMDevice::StoreRDMDevice()+0x14>)
 8006e72:	6010      	str	r0, [r2, #0]
 8006e74:	4770      	bx	lr
 8006e76:	bf00      	nop
 8006e78:	0800b3bc 	stmdaeq	r0, {r2, r3, r4, r5, r7, r8, r9, ip, sp, pc}
 8006e7c:	200016c8 	andcs	r1, r0, r8, asr #13

08006e80 <StoreRDMSensors::~StoreRDMSensors()>:
 8006e80:	4770      	bx	lr
	...

08006e84 <StoreRDMSensors::Copy(TRDMSensorsParams*)>:
 8006e84:	b507      	push	{r0, r1, r2, lr}
 8006e86:	2300      	movs	r3, #0
 8006e88:	460a      	mov	r2, r1
 8006e8a:	2101      	movs	r1, #1
 8006e8c:	e9cd 3100 	strd	r3, r1, [sp]
 8006e90:	4804      	ldr	r0, [pc, #16]	; (8006ea4 <StoreRDMSensors::Copy(TRDMSensorsParams*)+0x20>)
 8006e92:	2334      	movs	r3, #52	; 0x34
 8006e94:	6800      	ldr	r0, [r0, #0]
 8006e96:	2117      	movs	r1, #23
 8006e98:	f7ff fdce 	bl	8006a38 <ConfigStore::Copy(configstore::Store, void*, unsigned int, unsigned int, bool)>
 8006e9c:	b003      	add	sp, #12
 8006e9e:	f85d fb04 	ldr.w	pc, [sp], #4
 8006ea2:	bf00      	nop
 8006ea4:	200016b8 			; <UNDEFINED> instruction: 0x200016b8

08006ea8 <StoreRDMSensors::Update(TRDMSensorsParams const*)>:
 8006ea8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006eaa:	2200      	movs	r2, #0
 8006eac:	e9cd 2201 	strd	r2, r2, [sp, #4]
 8006eb0:	460b      	mov	r3, r1
 8006eb2:	4805      	ldr	r0, [pc, #20]	; (8006ec8 <StoreRDMSensors::Update(TRDMSensorsParams const*)+0x20>)
 8006eb4:	2134      	movs	r1, #52	; 0x34
 8006eb6:	9100      	str	r1, [sp, #0]
 8006eb8:	6800      	ldr	r0, [r0, #0]
 8006eba:	2117      	movs	r1, #23
 8006ebc:	f7ff fd7c 	bl	80069b8 <ConfigStore::Update(configstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 8006ec0:	b005      	add	sp, #20
 8006ec2:	f85d fb04 	ldr.w	pc, [sp], #4
 8006ec6:	bf00      	nop
 8006ec8:	200016b8 			; <UNDEFINED> instruction: 0x200016b8

08006ecc <StoreRDMSensors::~StoreRDMSensors()>:
 8006ecc:	b510      	push	{r4, lr}
 8006ece:	4604      	mov	r4, r0
 8006ed0:	f000 ff05 	bl	8007cde <operator delete(void*)>
 8006ed4:	4620      	mov	r0, r4
 8006ed6:	bd10      	pop	{r4, pc}

08006ed8 <StoreRDMSensors::StoreRDMSensors()>:
 8006ed8:	4a02      	ldr	r2, [pc, #8]	; (8006ee4 <StoreRDMSensors::StoreRDMSensors()+0xc>)
 8006eda:	6002      	str	r2, [r0, #0]
 8006edc:	4a02      	ldr	r2, [pc, #8]	; (8006ee8 <StoreRDMSensors::StoreRDMSensors()+0x10>)
 8006ede:	6010      	str	r0, [r2, #0]
 8006ee0:	4770      	bx	lr
 8006ee2:	bf00      	nop
 8006ee4:	0800b3ec 	stmdaeq	r0, {r2, r3, r5, r6, r7, r8, r9, ip, sp, pc}
 8006ee8:	200016cc 	andcs	r1, r0, ip, asr #13

08006eec <StoreRDMSubDevices::~StoreRDMSubDevices()>:
 8006eec:	4770      	bx	lr
	...

08006ef0 <StoreRDMSubDevices::Copy(TRDMSubDevicesParams*)>:
 8006ef0:	b507      	push	{r0, r1, r2, lr}
 8006ef2:	2300      	movs	r3, #0
 8006ef4:	460a      	mov	r2, r1
 8006ef6:	2101      	movs	r1, #1
 8006ef8:	e9cd 3100 	strd	r3, r1, [sp]
 8006efc:	4804      	ldr	r0, [pc, #16]	; (8006f10 <StoreRDMSubDevices::Copy(TRDMSubDevicesParams*)+0x20>)
 8006efe:	234c      	movs	r3, #76	; 0x4c
 8006f00:	6800      	ldr	r0, [r0, #0]
 8006f02:	2118      	movs	r1, #24
 8006f04:	f7ff fd98 	bl	8006a38 <ConfigStore::Copy(configstore::Store, void*, unsigned int, unsigned int, bool)>
 8006f08:	b003      	add	sp, #12
 8006f0a:	f85d fb04 	ldr.w	pc, [sp], #4
 8006f0e:	bf00      	nop
 8006f10:	200016b8 			; <UNDEFINED> instruction: 0x200016b8

08006f14 <StoreRDMSubDevices::Update(TRDMSubDevicesParams const*)>:
 8006f14:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006f16:	2200      	movs	r2, #0
 8006f18:	e9cd 2201 	strd	r2, r2, [sp, #4]
 8006f1c:	460b      	mov	r3, r1
 8006f1e:	4805      	ldr	r0, [pc, #20]	; (8006f34 <StoreRDMSubDevices::Update(TRDMSubDevicesParams const*)+0x20>)
 8006f20:	214c      	movs	r1, #76	; 0x4c
 8006f22:	9100      	str	r1, [sp, #0]
 8006f24:	6800      	ldr	r0, [r0, #0]
 8006f26:	2118      	movs	r1, #24
 8006f28:	f7ff fd46 	bl	80069b8 <ConfigStore::Update(configstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 8006f2c:	b005      	add	sp, #20
 8006f2e:	f85d fb04 	ldr.w	pc, [sp], #4
 8006f32:	bf00      	nop
 8006f34:	200016b8 			; <UNDEFINED> instruction: 0x200016b8

08006f38 <StoreRDMSubDevices::~StoreRDMSubDevices()>:
 8006f38:	b510      	push	{r4, lr}
 8006f3a:	4604      	mov	r4, r0
 8006f3c:	f000 fecf 	bl	8007cde <operator delete(void*)>
 8006f40:	4620      	mov	r0, r4
 8006f42:	bd10      	pop	{r4, pc}

08006f44 <StoreRDMSubDevices::StoreRDMSubDevices()>:
 8006f44:	4a02      	ldr	r2, [pc, #8]	; (8006f50 <StoreRDMSubDevices::StoreRDMSubDevices()+0xc>)
 8006f46:	6002      	str	r2, [r0, #0]
 8006f48:	4a02      	ldr	r2, [pc, #8]	; (8006f54 <StoreRDMSubDevices::StoreRDMSubDevices()+0x10>)
 8006f4a:	6010      	str	r0, [r2, #0]
 8006f4c:	4770      	bx	lr
 8006f4e:	bf00      	nop
 8006f50:	0800b404 	stmdaeq	r0, {r2, sl, ip, sp, pc}
 8006f54:	200016d0 	ldrdcs	r1, [r0], -r0

08006f58 <FlashCode::FlashCode()>:
 8006f58:	4b0a      	ldr	r3, [pc, #40]	; (8006f84 <FlashCode::FlashCode()+0x2c>)
 8006f5a:	b513      	push	{r0, r1, r4, lr}
 8006f5c:	6018      	str	r0, [r3, #0]
 8006f5e:	2301      	movs	r3, #1
 8006f60:	7003      	strb	r3, [r0, #0]
 8006f62:	4604      	mov	r4, r0
 8006f64:	f000 f814 	bl	8006f90 <FlashCode::GetSize() const>
 8006f68:	9001      	str	r0, [sp, #4]
 8006f6a:	4620      	mov	r0, r4
 8006f6c:	f000 f810 	bl	8006f90 <FlashCode::GetSize() const>
 8006f70:	9a01      	ldr	r2, [sp, #4]
 8006f72:	4905      	ldr	r1, [pc, #20]	; (8006f88 <FlashCode::FlashCode()+0x30>)
 8006f74:	0a83      	lsrs	r3, r0, #10
 8006f76:	4805      	ldr	r0, [pc, #20]	; (8006f8c <FlashCode::FlashCode()+0x34>)
 8006f78:	f7fa fc54 	bl	8001824 <printf>
 8006f7c:	4620      	mov	r0, r4
 8006f7e:	b002      	add	sp, #8
 8006f80:	bd10      	pop	{r4, pc}
 8006f82:	bf00      	nop
 8006f84:	200016d4 	ldrdcs	r1, [r0], -r4
 8006f88:	08009c94 	stmdaeq	r0, {r2, r4, r7, sl, fp, ip, pc}
 8006f8c:	0800b414 	stmdaeq	r0, {r2, r4, sl, ip, sp, pc}

08006f90 <FlashCode::GetSize() const>:
 8006f90:	4b02      	ldr	r3, [pc, #8]	; (8006f9c <FlashCode::GetSize() const+0xc>)
 8006f92:	f8b3 00e0 	ldrh.w	r0, [r3, #224]	; 0xe0
 8006f96:	0280      	lsls	r0, r0, #10
 8006f98:	4770      	bx	lr
 8006f9a:	bf00      	nop
 8006f9c:	1ffff700 	svcne	0x00fff700

08006fa0 <FlashCode::GetSectorSize() const>:
 8006fa0:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8006fa4:	4770      	bx	lr

08006fa6 <FlashCode::Read(unsigned int, unsigned int, unsigned char*, flashcode::result&)>:
 8006fa6:	f101 6100 	add.w	r1, r1, #134217728	; 0x8000000
 8006faa:	441a      	add	r2, r3
 8006fac:	4293      	cmp	r3, r2
 8006fae:	d104      	bne.n	8006fba <FlashCode::Read(unsigned int, unsigned int, unsigned char*, flashcode::result&)+0x14>
 8006fb0:	9b00      	ldr	r3, [sp, #0]
 8006fb2:	2200      	movs	r2, #0
 8006fb4:	601a      	str	r2, [r3, #0]
 8006fb6:	2001      	movs	r0, #1
 8006fb8:	4770      	bx	lr
 8006fba:	f851 0b04 	ldr.w	r0, [r1], #4
 8006fbe:	f843 0b04 	str.w	r0, [r3], #4
 8006fc2:	e7f3      	b.n	8006fac <FlashCode::Read(unsigned int, unsigned int, unsigned char*, flashcode::result&)+0x6>

08006fc4 <FlashCode::Erase(unsigned int, unsigned int, flashcode::result&)>:
 8006fc4:	b538      	push	{r3, r4, r5, lr}
 8006fc6:	4c48      	ldr	r4, [pc, #288]	; (80070e8 <FlashCode::Erase(unsigned int, unsigned int, flashcode::result&)+0x124>)
 8006fc8:	2000      	movs	r0, #0
 8006fca:	6018      	str	r0, [r3, #0]
 8006fcc:	6823      	ldr	r3, [r4, #0]
 8006fce:	2b04      	cmp	r3, #4
 8006fd0:	f200 8082 	bhi.w	80070d8 <FlashCode::Erase(unsigned int, unsigned int, flashcode::result&)+0x114>
 8006fd4:	e8df f003 	tbb	[pc, r3]
 8006fd8:	78452003 	stmdavc	r5, {r0, r1, sp}^
 8006fdc:	4b430080 	blmi	90c71e4 <__exidx_end+0x10bb914>
 8006fe0:	f101 6100 	add.w	r1, r1, #134217728	; 0x8000000
 8006fe4:	6019      	str	r1, [r3, #0]
 8006fe6:	4b42      	ldr	r3, [pc, #264]	; (80070f0 <FlashCode::Erase(unsigned int, unsigned int, flashcode::result&)+0x12c>)
 8006fe8:	601a      	str	r2, [r3, #0]
 8006fea:	4b42      	ldr	r3, [pc, #264]	; (80070f4 <FlashCode::Erase(unsigned int, unsigned int, flashcode::result&)+0x130>)
 8006fec:	f8b3 30e0 	ldrh.w	r3, [r3, #224]	; 0xe0
 8006ff0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006ff4:	4b40      	ldr	r3, [pc, #256]	; (80070f8 <FlashCode::Erase(unsigned int, unsigned int, flashcode::result&)+0x134>)
 8006ff6:	d807      	bhi.n	8007008 <FlashCode::Erase(unsigned int, unsigned int, flashcode::result&)+0x44>
 8006ff8:	2201      	movs	r2, #1
 8006ffa:	701a      	strb	r2, [r3, #0]
 8006ffc:	f001 f9d4 	bl	80083a8 <fmc_bank0_unlock>
 8007000:	2301      	movs	r3, #1
 8007002:	6023      	str	r3, [r4, #0]
 8007004:	2000      	movs	r0, #0
 8007006:	e026      	b.n	8007056 <FlashCode::Erase(unsigned int, unsigned int, flashcode::result&)+0x92>
 8007008:	4a3c      	ldr	r2, [pc, #240]	; (80070fc <FlashCode::Erase(unsigned int, unsigned int, flashcode::result&)+0x138>)
 800700a:	4291      	cmp	r1, r2
 800700c:	d3f4      	bcc.n	8006ff8 <FlashCode::Erase(unsigned int, unsigned int, flashcode::result&)+0x34>
 800700e:	2200      	movs	r2, #0
 8007010:	701a      	strb	r2, [r3, #0]
 8007012:	f001 f9d7 	bl	80083c4 <fmc_bank1_unlock>
 8007016:	e7f3      	b.n	8007000 <FlashCode::Erase(unsigned int, unsigned int, flashcode::result&)+0x3c>
 8007018:	4d37      	ldr	r5, [pc, #220]	; (80070f8 <FlashCode::Erase(unsigned int, unsigned int, flashcode::result&)+0x134>)
 800701a:	782b      	ldrb	r3, [r5, #0]
 800701c:	b15b      	cbz	r3, 8007036 <FlashCode::Erase(unsigned int, unsigned int, flashcode::result&)+0x72>
 800701e:	f001 f9ef 	bl	8008400 <fmc_bank0_state_get>
 8007022:	2801      	cmp	r0, #1
 8007024:	d0ee      	beq.n	8007004 <FlashCode::Erase(unsigned int, unsigned int, flashcode::result&)+0x40>
 8007026:	7829      	ldrb	r1, [r5, #0]
 8007028:	4b35      	ldr	r3, [pc, #212]	; (8007100 <FlashCode::Erase(unsigned int, unsigned int, flashcode::result&)+0x13c>)
 800702a:	b939      	cbnz	r1, 800703c <FlashCode::Erase(unsigned int, unsigned int, flashcode::result&)+0x78>
 800702c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800702e:	f022 0202 	bic.w	r2, r2, #2
 8007032:	651a      	str	r2, [r3, #80]	; 0x50
 8007034:	e006      	b.n	8007044 <FlashCode::Erase(unsigned int, unsigned int, flashcode::result&)+0x80>
 8007036:	f001 f9f5 	bl	8008424 <fmc_bank1_state_get>
 800703a:	e7f2      	b.n	8007022 <FlashCode::Erase(unsigned int, unsigned int, flashcode::result&)+0x5e>
 800703c:	691a      	ldr	r2, [r3, #16]
 800703e:	f022 0202 	bic.w	r2, r2, #2
 8007042:	611a      	str	r2, [r3, #16]
 8007044:	4b2a      	ldr	r3, [pc, #168]	; (80070f0 <FlashCode::Erase(unsigned int, unsigned int, flashcode::result&)+0x12c>)
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	b94b      	cbnz	r3, 800705e <FlashCode::Erase(unsigned int, unsigned int, flashcode::result&)+0x9a>
 800704a:	b129      	cbz	r1, 8007058 <FlashCode::Erase(unsigned int, unsigned int, flashcode::result&)+0x94>
 800704c:	f001 f9c8 	bl	80083e0 <fmc_bank0_lock>
 8007050:	2300      	movs	r3, #0
 8007052:	6023      	str	r3, [r4, #0]
 8007054:	2001      	movs	r0, #1
 8007056:	bd38      	pop	{r3, r4, r5, pc}
 8007058:	f001 f9ca 	bl	80083f0 <fmc_bank1_lock>
 800705c:	e7f8      	b.n	8007050 <FlashCode::Erase(unsigned int, unsigned int, flashcode::result&)+0x8c>
 800705e:	2302      	movs	r3, #2
 8007060:	e7cf      	b.n	8007002 <FlashCode::Erase(unsigned int, unsigned int, flashcode::result&)+0x3e>
 8007062:	4923      	ldr	r1, [pc, #140]	; (80070f0 <FlashCode::Erase(unsigned int, unsigned int, flashcode::result&)+0x12c>)
 8007064:	680b      	ldr	r3, [r1, #0]
 8007066:	2b00      	cmp	r3, #0
 8007068:	d0ca      	beq.n	8007000 <FlashCode::Erase(unsigned int, unsigned int, flashcode::result&)+0x3c>
 800706a:	4b23      	ldr	r3, [pc, #140]	; (80070f8 <FlashCode::Erase(unsigned int, unsigned int, flashcode::result&)+0x134>)
 800706c:	4a1f      	ldr	r2, [pc, #124]	; (80070ec <FlashCode::Erase(unsigned int, unsigned int, flashcode::result&)+0x128>)
 800706e:	7818      	ldrb	r0, [r3, #0]
 8007070:	4b23      	ldr	r3, [pc, #140]	; (8007100 <FlashCode::Erase(unsigned int, unsigned int, flashcode::result&)+0x13c>)
 8007072:	b190      	cbz	r0, 800709a <FlashCode::Erase(unsigned int, unsigned int, flashcode::result&)+0xd6>
 8007074:	6918      	ldr	r0, [r3, #16]
 8007076:	f040 0002 	orr.w	r0, r0, #2
 800707a:	6118      	str	r0, [r3, #16]
 800707c:	6810      	ldr	r0, [r2, #0]
 800707e:	6158      	str	r0, [r3, #20]
 8007080:	6918      	ldr	r0, [r3, #16]
 8007082:	f040 0040 	orr.w	r0, r0, #64	; 0x40
 8007086:	6118      	str	r0, [r3, #16]
 8007088:	680b      	ldr	r3, [r1, #0]
 800708a:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 800708e:	600b      	str	r3, [r1, #0]
 8007090:	6813      	ldr	r3, [r2, #0]
 8007092:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007096:	6013      	str	r3, [r2, #0]
 8007098:	e7b2      	b.n	8007000 <FlashCode::Erase(unsigned int, unsigned int, flashcode::result&)+0x3c>
 800709a:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800709c:	f040 0002 	orr.w	r0, r0, #2
 80070a0:	6518      	str	r0, [r3, #80]	; 0x50
 80070a2:	6810      	ldr	r0, [r2, #0]
 80070a4:	6558      	str	r0, [r3, #84]	; 0x54
 80070a6:	69dd      	ldr	r5, [r3, #28]
 80070a8:	07ad      	lsls	r5, r5, #30
 80070aa:	bf48      	it	mi
 80070ac:	6158      	strmi	r0, [r3, #20]
 80070ae:	4814      	ldr	r0, [pc, #80]	; (8007100 <FlashCode::Erase(unsigned int, unsigned int, flashcode::result&)+0x13c>)
 80070b0:	6d03      	ldr	r3, [r0, #80]	; 0x50
 80070b2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80070b6:	6503      	str	r3, [r0, #80]	; 0x50
 80070b8:	680b      	ldr	r3, [r1, #0]
 80070ba:	f5a3 5380 	sub.w	r3, r3, #4096	; 0x1000
 80070be:	600b      	str	r3, [r1, #0]
 80070c0:	6813      	ldr	r3, [r2, #0]
 80070c2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80070c6:	e7e6      	b.n	8007096 <FlashCode::Erase(unsigned int, unsigned int, flashcode::result&)+0xd2>
 80070c8:	4b0b      	ldr	r3, [pc, #44]	; (80070f8 <FlashCode::Erase(unsigned int, unsigned int, flashcode::result&)+0x134>)
 80070ca:	781a      	ldrb	r2, [r3, #0]
 80070cc:	4b0c      	ldr	r3, [pc, #48]	; (8007100 <FlashCode::Erase(unsigned int, unsigned int, flashcode::result&)+0x13c>)
 80070ce:	b132      	cbz	r2, 80070de <FlashCode::Erase(unsigned int, unsigned int, flashcode::result&)+0x11a>
 80070d0:	691a      	ldr	r2, [r3, #16]
 80070d2:	f022 0201 	bic.w	r2, r2, #1
 80070d6:	611a      	str	r2, [r3, #16]
 80070d8:	2000      	movs	r0, #0
 80070da:	6020      	str	r0, [r4, #0]
 80070dc:	e7bb      	b.n	8007056 <FlashCode::Erase(unsigned int, unsigned int, flashcode::result&)+0x92>
 80070de:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80070e0:	f022 0201 	bic.w	r2, r2, #1
 80070e4:	651a      	str	r2, [r3, #80]	; 0x50
 80070e6:	e7f7      	b.n	80070d8 <FlashCode::Erase(unsigned int, unsigned int, flashcode::result&)+0x114>
 80070e8:	200016dc 	ldrdcs	r1, [r0], -ip
 80070ec:	200016e0 	andcs	r1, r0, r0, ror #13
 80070f0:	200016ec 	andcs	r1, r0, ip, ror #13
 80070f4:	1ffff700 	svcne	0x00fff700
 80070f8:	200016e8 	andcs	r1, r0, r8, ror #13
 80070fc:	0807ffff 	stmdaeq	r7, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, sp, lr, pc}
 8007100:	40022000 	andmi	r2, r2, r0

08007104 <FlashCode::Write(unsigned int, unsigned int, unsigned char const*, flashcode::result&)>:
 8007104:	b570      	push	{r4, r5, r6, lr}
 8007106:	9804      	ldr	r0, [sp, #16]
 8007108:	2400      	movs	r4, #0
 800710a:	6004      	str	r4, [r0, #0]
 800710c:	4c48      	ldr	r4, [pc, #288]	; (8007230 <FlashCode::Write(unsigned int, unsigned int, unsigned char const*, flashcode::result&)+0x12c>)
 800710e:	6820      	ldr	r0, [r4, #0]
 8007110:	2804      	cmp	r0, #4
 8007112:	d848      	bhi.n	80071a6 <FlashCode::Write(unsigned int, unsigned int, unsigned char const*, flashcode::result&)+0xa2>
 8007114:	e8df f000 	tbb	[pc, r0]
 8007118:	22847c03 	addcs	r7, r4, #768	; 0x300
 800711c:	48450047 	stmdami	r5, {r0, r1, r2, r6}^
 8007120:	f101 6100 	add.w	r1, r1, #134217728	; 0x8000000
 8007124:	6001      	str	r1, [r0, #0]
 8007126:	4844      	ldr	r0, [pc, #272]	; (8007238 <FlashCode::Write(unsigned int, unsigned int, unsigned char const*, flashcode::result&)+0x134>)
 8007128:	6003      	str	r3, [r0, #0]
 800712a:	4b44      	ldr	r3, [pc, #272]	; (800723c <FlashCode::Write(unsigned int, unsigned int, unsigned char const*, flashcode::result&)+0x138>)
 800712c:	601a      	str	r2, [r3, #0]
 800712e:	4b44      	ldr	r3, [pc, #272]	; (8007240 <FlashCode::Write(unsigned int, unsigned int, unsigned char const*, flashcode::result&)+0x13c>)
 8007130:	f8b3 30e0 	ldrh.w	r3, [r3, #224]	; 0xe0
 8007134:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007138:	4b42      	ldr	r3, [pc, #264]	; (8007244 <FlashCode::Write(unsigned int, unsigned int, unsigned char const*, flashcode::result&)+0x140>)
 800713a:	d807      	bhi.n	800714c <FlashCode::Write(unsigned int, unsigned int, unsigned char const*, flashcode::result&)+0x48>
 800713c:	2201      	movs	r2, #1
 800713e:	701a      	strb	r2, [r3, #0]
 8007140:	f001 f932 	bl	80083a8 <fmc_bank0_unlock>
 8007144:	2303      	movs	r3, #3
 8007146:	6023      	str	r3, [r4, #0]
 8007148:	2000      	movs	r0, #0
 800714a:	e026      	b.n	800719a <FlashCode::Write(unsigned int, unsigned int, unsigned char const*, flashcode::result&)+0x96>
 800714c:	4a3e      	ldr	r2, [pc, #248]	; (8007248 <FlashCode::Write(unsigned int, unsigned int, unsigned char const*, flashcode::result&)+0x144>)
 800714e:	4291      	cmp	r1, r2
 8007150:	d3f4      	bcc.n	800713c <FlashCode::Write(unsigned int, unsigned int, unsigned char const*, flashcode::result&)+0x38>
 8007152:	2200      	movs	r2, #0
 8007154:	701a      	strb	r2, [r3, #0]
 8007156:	f001 f935 	bl	80083c4 <fmc_bank1_unlock>
 800715a:	e7f3      	b.n	8007144 <FlashCode::Write(unsigned int, unsigned int, unsigned char const*, flashcode::result&)+0x40>
 800715c:	4d39      	ldr	r5, [pc, #228]	; (8007244 <FlashCode::Write(unsigned int, unsigned int, unsigned char const*, flashcode::result&)+0x140>)
 800715e:	782b      	ldrb	r3, [r5, #0]
 8007160:	b15b      	cbz	r3, 800717a <FlashCode::Write(unsigned int, unsigned int, unsigned char const*, flashcode::result&)+0x76>
 8007162:	f001 f94d 	bl	8008400 <fmc_bank0_state_get>
 8007166:	2801      	cmp	r0, #1
 8007168:	d0ee      	beq.n	8007148 <FlashCode::Write(unsigned int, unsigned int, unsigned char const*, flashcode::result&)+0x44>
 800716a:	7829      	ldrb	r1, [r5, #0]
 800716c:	4b37      	ldr	r3, [pc, #220]	; (800724c <FlashCode::Write(unsigned int, unsigned int, unsigned char const*, flashcode::result&)+0x148>)
 800716e:	b939      	cbnz	r1, 8007180 <FlashCode::Write(unsigned int, unsigned int, unsigned char const*, flashcode::result&)+0x7c>
 8007170:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007172:	f022 0201 	bic.w	r2, r2, #1
 8007176:	651a      	str	r2, [r3, #80]	; 0x50
 8007178:	e006      	b.n	8007188 <FlashCode::Write(unsigned int, unsigned int, unsigned char const*, flashcode::result&)+0x84>
 800717a:	f001 f953 	bl	8008424 <fmc_bank1_state_get>
 800717e:	e7f2      	b.n	8007166 <FlashCode::Write(unsigned int, unsigned int, unsigned char const*, flashcode::result&)+0x62>
 8007180:	691a      	ldr	r2, [r3, #16]
 8007182:	f022 0201 	bic.w	r2, r2, #1
 8007186:	611a      	str	r2, [r3, #16]
 8007188:	4b2c      	ldr	r3, [pc, #176]	; (800723c <FlashCode::Write(unsigned int, unsigned int, unsigned char const*, flashcode::result&)+0x138>)
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	b94b      	cbnz	r3, 80071a2 <FlashCode::Write(unsigned int, unsigned int, unsigned char const*, flashcode::result&)+0x9e>
 800718e:	b129      	cbz	r1, 800719c <FlashCode::Write(unsigned int, unsigned int, unsigned char const*, flashcode::result&)+0x98>
 8007190:	f001 f926 	bl	80083e0 <fmc_bank0_lock>
 8007194:	2300      	movs	r3, #0
 8007196:	6023      	str	r3, [r4, #0]
 8007198:	2001      	movs	r0, #1
 800719a:	bd70      	pop	{r4, r5, r6, pc}
 800719c:	f001 f928 	bl	80083f0 <fmc_bank1_lock>
 80071a0:	e7f8      	b.n	8007194 <FlashCode::Write(unsigned int, unsigned int, unsigned char const*, flashcode::result&)+0x90>
 80071a2:	2304      	movs	r3, #4
 80071a4:	e7cf      	b.n	8007146 <FlashCode::Write(unsigned int, unsigned int, unsigned char const*, flashcode::result&)+0x42>
 80071a6:	4a25      	ldr	r2, [pc, #148]	; (800723c <FlashCode::Write(unsigned int, unsigned int, unsigned char const*, flashcode::result&)+0x138>)
 80071a8:	6813      	ldr	r3, [r2, #0]
 80071aa:	2b03      	cmp	r3, #3
 80071ac:	d91a      	bls.n	80071e4 <FlashCode::Write(unsigned int, unsigned int, unsigned char const*, flashcode::result&)+0xe0>
 80071ae:	4b25      	ldr	r3, [pc, #148]	; (8007244 <FlashCode::Write(unsigned int, unsigned int, unsigned char const*, flashcode::result&)+0x140>)
 80071b0:	7819      	ldrb	r1, [r3, #0]
 80071b2:	4b26      	ldr	r3, [pc, #152]	; (800724c <FlashCode::Write(unsigned int, unsigned int, unsigned char const*, flashcode::result&)+0x148>)
 80071b4:	b189      	cbz	r1, 80071da <FlashCode::Write(unsigned int, unsigned int, unsigned char const*, flashcode::result&)+0xd6>
 80071b6:	6919      	ldr	r1, [r3, #16]
 80071b8:	f041 0101 	orr.w	r1, r1, #1
 80071bc:	6119      	str	r1, [r3, #16]
 80071be:	4d1e      	ldr	r5, [pc, #120]	; (8007238 <FlashCode::Write(unsigned int, unsigned int, unsigned char const*, flashcode::result&)+0x134>)
 80071c0:	481c      	ldr	r0, [pc, #112]	; (8007234 <FlashCode::Write(unsigned int, unsigned int, unsigned char const*, flashcode::result&)+0x130>)
 80071c2:	6829      	ldr	r1, [r5, #0]
 80071c4:	6803      	ldr	r3, [r0, #0]
 80071c6:	f851 6b04 	ldr.w	r6, [r1], #4
 80071ca:	f843 6b04 	str.w	r6, [r3], #4
 80071ce:	6003      	str	r3, [r0, #0]
 80071d0:	6813      	ldr	r3, [r2, #0]
 80071d2:	6029      	str	r1, [r5, #0]
 80071d4:	3b04      	subs	r3, #4
 80071d6:	6013      	str	r3, [r2, #0]
 80071d8:	e7b4      	b.n	8007144 <FlashCode::Write(unsigned int, unsigned int, unsigned char const*, flashcode::result&)+0x40>
 80071da:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80071dc:	f041 0101 	orr.w	r1, r1, #1
 80071e0:	6519      	str	r1, [r3, #80]	; 0x50
 80071e2:	e7ec      	b.n	80071be <FlashCode::Write(unsigned int, unsigned int, unsigned char const*, flashcode::result&)+0xba>
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	d0ad      	beq.n	8007144 <FlashCode::Write(unsigned int, unsigned int, unsigned char const*, flashcode::result&)+0x40>
 80071e8:	4b16      	ldr	r3, [pc, #88]	; (8007244 <FlashCode::Write(unsigned int, unsigned int, unsigned char const*, flashcode::result&)+0x140>)
 80071ea:	781a      	ldrb	r2, [r3, #0]
 80071ec:	4b17      	ldr	r3, [pc, #92]	; (800724c <FlashCode::Write(unsigned int, unsigned int, unsigned char const*, flashcode::result&)+0x148>)
 80071ee:	b152      	cbz	r2, 8007206 <FlashCode::Write(unsigned int, unsigned int, unsigned char const*, flashcode::result&)+0x102>
 80071f0:	691a      	ldr	r2, [r3, #16]
 80071f2:	f042 0201 	orr.w	r2, r2, #1
 80071f6:	611a      	str	r2, [r3, #16]
 80071f8:	4a0f      	ldr	r2, [pc, #60]	; (8007238 <FlashCode::Write(unsigned int, unsigned int, unsigned char const*, flashcode::result&)+0x134>)
 80071fa:	4b0e      	ldr	r3, [pc, #56]	; (8007234 <FlashCode::Write(unsigned int, unsigned int, unsigned char const*, flashcode::result&)+0x130>)
 80071fc:	6812      	ldr	r2, [r2, #0]
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	6812      	ldr	r2, [r2, #0]
 8007202:	601a      	str	r2, [r3, #0]
 8007204:	e79e      	b.n	8007144 <FlashCode::Write(unsigned int, unsigned int, unsigned char const*, flashcode::result&)+0x40>
 8007206:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007208:	f042 0201 	orr.w	r2, r2, #1
 800720c:	651a      	str	r2, [r3, #80]	; 0x50
 800720e:	e7f3      	b.n	80071f8 <FlashCode::Write(unsigned int, unsigned int, unsigned char const*, flashcode::result&)+0xf4>
 8007210:	4b0c      	ldr	r3, [pc, #48]	; (8007244 <FlashCode::Write(unsigned int, unsigned int, unsigned char const*, flashcode::result&)+0x140>)
 8007212:	781a      	ldrb	r2, [r3, #0]
 8007214:	4b0d      	ldr	r3, [pc, #52]	; (800724c <FlashCode::Write(unsigned int, unsigned int, unsigned char const*, flashcode::result&)+0x148>)
 8007216:	b132      	cbz	r2, 8007226 <FlashCode::Write(unsigned int, unsigned int, unsigned char const*, flashcode::result&)+0x122>
 8007218:	691a      	ldr	r2, [r3, #16]
 800721a:	f022 0202 	bic.w	r2, r2, #2
 800721e:	611a      	str	r2, [r3, #16]
 8007220:	2000      	movs	r0, #0
 8007222:	6020      	str	r0, [r4, #0]
 8007224:	e7b9      	b.n	800719a <FlashCode::Write(unsigned int, unsigned int, unsigned char const*, flashcode::result&)+0x96>
 8007226:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007228:	f022 0202 	bic.w	r2, r2, #2
 800722c:	651a      	str	r2, [r3, #80]	; 0x50
 800722e:	e7f7      	b.n	8007220 <FlashCode::Write(unsigned int, unsigned int, unsigned char const*, flashcode::result&)+0x11c>
 8007230:	200016dc 	ldrdcs	r1, [r0], -ip
 8007234:	200016d8 	ldrdcs	r1, [r0], -r8
 8007238:	200016e4 	andcs	r1, r0, r4, ror #13
 800723c:	200016ec 	andcs	r1, r0, ip, ror #13
 8007240:	1ffff700 	svcne	0x00fff700
 8007244:	200016e8 	andcs	r1, r0, r8, ror #13
 8007248:	0807ffff 	stmdaeq	r7, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, sp, lr, pc}
 800724c:	40022000 	andmi	r2, r2, r0

08007250 <Display::PrintInfo() [clone .isra.0]>:
 8007250:	b910      	cbnz	r0, 8007258 <Display::PrintInfo() [clone .isra.0]+0x8>
 8007252:	4803      	ldr	r0, [pc, #12]	; (8007260 <Display::PrintInfo() [clone .isra.0]+0x10>)
 8007254:	f7fa bb1e 	b.w	8001894 <puts>
 8007258:	6803      	ldr	r3, [r0, #0]
 800725a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800725c:	4718      	bx	r3
 800725e:	bf00      	nop
 8007260:	0800b442 	stmdaeq	r0, {r1, r6, sl, ip, sp, pc}

08007264 <HAL_I2C::IsConnected_(unsigned char, unsigned int)>:
 8007264:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007266:	460d      	mov	r5, r1
 8007268:	4604      	mov	r4, r0
 800726a:	f001 fdcd 	bl	8008e08 <gd32_i2c_set_address>
 800726e:	4628      	mov	r0, r5
 8007270:	f001 fdc2 	bl	8008df8 <gd32_i2c_set_baudrate>
 8007274:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8007278:	2b07      	cmp	r3, #7
 800727a:	d902      	bls.n	8007282 <HAL_I2C::IsConnected_(unsigned char, unsigned int)+0x1e>
 800727c:	3c50      	subs	r4, #80	; 0x50
 800727e:	2c0f      	cmp	r4, #15
 8007280:	d809      	bhi.n	8007296 <HAL_I2C::IsConnected_(unsigned char, unsigned int)+0x32>
 8007282:	2101      	movs	r1, #1
 8007284:	f10d 0007 	add.w	r0, sp, #7
 8007288:	f001 fe2a 	bl	8008ee0 <gd32_i2c_read>
 800728c:	fab0 f080 	clz	r0, r0
 8007290:	0940      	lsrs	r0, r0, #5
 8007292:	b003      	add	sp, #12
 8007294:	bd30      	pop	{r4, r5, pc}
 8007296:	2100      	movs	r1, #0
 8007298:	4608      	mov	r0, r1
 800729a:	f001 fdbb 	bl	8008e14 <gd32_i2c_write>
 800729e:	e7f5      	b.n	800728c <HAL_I2C::IsConnected_(unsigned char, unsigned int)+0x28>

080072a0 <Display::Detect7Segment()>:
 80072a0:	b513      	push	{r0, r1, r4, lr}
 80072a2:	68c1      	ldr	r1, [r0, #12]
 80072a4:	4604      	mov	r4, r0
 80072a6:	7a00      	ldrb	r0, [r0, #8]
 80072a8:	f7ff ffdc 	bl	8007264 <HAL_I2C::IsConnected_(unsigned char, unsigned int)>
 80072ac:	7460      	strb	r0, [r4, #17]
 80072ae:	b170      	cbz	r0, 80072ce <Display::Detect7Segment()+0x2e>
 80072b0:	2200      	movs	r2, #0
 80072b2:	f104 0008 	add.w	r0, r4, #8
 80072b6:	4611      	mov	r1, r2
 80072b8:	9001      	str	r0, [sp, #4]
 80072ba:	f7fb f94b 	bl	8002554 <HAL_I2C::WriteRegister(unsigned char, unsigned short)>
 80072be:	7c63      	ldrb	r3, [r4, #17]
 80072c0:	9801      	ldr	r0, [sp, #4]
 80072c2:	b123      	cbz	r3, 80072ce <Display::Detect7Segment()+0x2e>
 80072c4:	f24c 02ff 	movw	r2, #49407	; 0xc0ff
 80072c8:	2112      	movs	r1, #18
 80072ca:	f7fb f943 	bl	8002554 <HAL_I2C::WriteRegister(unsigned char, unsigned short)>
 80072ce:	b002      	add	sp, #8
 80072d0:	bd10      	pop	{r4, pc}

080072d2 <Display::Detect(display::Type)>:
 80072d2:	2902      	cmp	r1, #2
 80072d4:	b538      	push	{r3, r4, r5, lr}
 80072d6:	4604      	mov	r4, r0
 80072d8:	d014      	beq.n	8007304 <Display::Detect(display::Type)+0x32>
 80072da:	2904      	cmp	r1, #4
 80072dc:	d01b      	beq.n	8007316 <Display::Detect(display::Type)+0x44>
 80072de:	69a0      	ldr	r0, [r4, #24]
 80072e0:	b168      	cbz	r0, 80072fe <Display::Detect(display::Type)+0x2c>
 80072e2:	6803      	ldr	r3, [r0, #0]
 80072e4:	689b      	ldr	r3, [r3, #8]
 80072e6:	4798      	blx	r3
 80072e8:	69a3      	ldr	r3, [r4, #24]
 80072ea:	b9b0      	cbnz	r0, 800731a <Display::Detect(display::Type)+0x48>
 80072ec:	b11b      	cbz	r3, 80072f6 <Display::Detect(display::Type)+0x24>
 80072ee:	681a      	ldr	r2, [r3, #0]
 80072f0:	4618      	mov	r0, r3
 80072f2:	6852      	ldr	r2, [r2, #4]
 80072f4:	4790      	blx	r2
 80072f6:	2300      	movs	r3, #0
 80072f8:	61a3      	str	r3, [r4, #24]
 80072fa:	2304      	movs	r3, #4
 80072fc:	6023      	str	r3, [r4, #0]
 80072fe:	2300      	movs	r3, #0
 8007300:	6163      	str	r3, [r4, #20]
 8007302:	e011      	b.n	8007328 <Display::Detect(display::Type)+0x56>
 8007304:	2018      	movs	r0, #24
 8007306:	f000 fcee 	bl	8007ce6 <operator new(unsigned int)>
 800730a:	2100      	movs	r1, #0
 800730c:	4605      	mov	r5, r0
 800730e:	f000 f8a1 	bl	8007454 <Ssd1306::Ssd1306(TOledPanel)>
 8007312:	61a5      	str	r5, [r4, #24]
 8007314:	e7e3      	b.n	80072de <Display::Detect(display::Type)+0xc>
 8007316:	6001      	str	r1, [r0, #0]
 8007318:	e7e1      	b.n	80072de <Display::Detect(display::Type)+0xc>
 800731a:	681a      	ldr	r2, [r3, #0]
 800731c:	4618      	mov	r0, r3
 800731e:	68d2      	ldr	r2, [r2, #12]
 8007320:	4790      	blx	r2
 8007322:	69a3      	ldr	r3, [r4, #24]
 8007324:	2b00      	cmp	r3, #0
 8007326:	d0ea      	beq.n	80072fe <Display::Detect(display::Type)+0x2c>
 8007328:	bd38      	pop	{r3, r4, r5, pc}
	...

0800732c <Display::Display()>:
 800732c:	2304      	movs	r3, #4
 800732e:	b510      	push	{r4, lr}
 8007330:	6003      	str	r3, [r0, #0]
 8007332:	4b0f      	ldr	r3, [pc, #60]	; (8007370 <Display::Display()+0x44>)
 8007334:	4a0f      	ldr	r2, [pc, #60]	; (8007374 <Display::Display()+0x48>)
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	6043      	str	r3, [r0, #4]
 800733a:	2321      	movs	r3, #33	; 0x21
 800733c:	7203      	strb	r3, [r0, #8]
 800733e:	4b0e      	ldr	r3, [pc, #56]	; (8007378 <Display::Display()+0x4c>)
 8007340:	60c3      	str	r3, [r0, #12]
 8007342:	2300      	movs	r3, #0
 8007344:	e9c0 2305 	strd	r2, r3, [r0, #20]
 8007348:	8203      	strh	r3, [r0, #16]
 800734a:	4b0c      	ldr	r3, [pc, #48]	; (800737c <Display::Display()+0x50>)
 800734c:	4604      	mov	r4, r0
 800734e:	2102      	movs	r1, #2
 8007350:	6018      	str	r0, [r3, #0]
 8007352:	f7ff ffbe 	bl	80072d2 <Display::Detect(display::Type)>
 8007356:	4620      	mov	r0, r4
 8007358:	f7ff ffa2 	bl	80072a0 <Display::Detect7Segment()>
 800735c:	69a3      	ldr	r3, [r4, #24]
 800735e:	b10b      	cbz	r3, 8007364 <Display::Display()+0x38>
 8007360:	f7f9 fa04 	bl	800076c <display::timeout::gpio_init()>
 8007364:	69a0      	ldr	r0, [r4, #24]
 8007366:	f7ff ff73 	bl	8007250 <Display::PrintInfo() [clone .isra.0]>
 800736a:	4620      	mov	r0, r4
 800736c:	bd10      	pop	{r4, pc}
 800736e:	bf00      	nop
 8007370:	2000181c 	andcs	r1, r0, ip, lsl r8
 8007374:	000493e0 	andeq	r9, r4, r0, ror #7
 8007378:	00061a80 	andeq	r1, r6, r0, lsl #21
 800737c:	200016f0 	strdcs	r1, [r0], -r0

08007380 <Ssd1306::~Ssd1306()>:
 8007380:	4770      	bx	lr

08007382 <Ssd1306::SetCursor(unsigned int)>:
 8007382:	4770      	bx	lr

08007384 <Ssd1306::PrintInfo()>:
 8007384:	b410      	push	{r4}
 8007386:	4906      	ldr	r1, [pc, #24]	; (80073a0 <Ssd1306::PrintInfo()+0x1c>)
 8007388:	7c44      	ldrb	r4, [r0, #17]
 800738a:	7903      	ldrb	r3, [r0, #4]
 800738c:	7942      	ldrb	r2, [r0, #5]
 800738e:	4805      	ldr	r0, [pc, #20]	; (80073a4 <Ssd1306::PrintInfo()+0x20>)
 8007390:	2c00      	cmp	r4, #0
 8007392:	bf08      	it	eq
 8007394:	4601      	moveq	r1, r0
 8007396:	4804      	ldr	r0, [pc, #16]	; (80073a8 <Ssd1306::PrintInfo()+0x24>)
 8007398:	f85d 4b04 	ldr.w	r4, [sp], #4
 800739c:	f7fa ba42 	b.w	8001824 <printf>
 80073a0:	0800b453 	stmdaeq	r0, {r0, r1, r4, r6, sl, ip, sp, pc}
 80073a4:	0800b45a 	stmdaeq	r0, {r1, r3, r4, r6, sl, ip, sp, pc}
 80073a8:	0800b462 	stmdaeq	r0, {r1, r5, r6, sl, ip, sp, pc}

080073ac <Ssd1306::~Ssd1306()>:
 80073ac:	b510      	push	{r4, lr}
 80073ae:	4604      	mov	r4, r0
 80073b0:	f000 fc95 	bl	8007cde <operator delete(void*)>
 80073b4:	4620      	mov	r0, r4
 80073b6:	bd10      	pop	{r4, pc}

080073b8 <HAL_I2C::Setup()>:
 80073b8:	b510      	push	{r4, lr}
 80073ba:	4604      	mov	r4, r0
 80073bc:	7800      	ldrb	r0, [r0, #0]
 80073be:	f001 fd23 	bl	8008e08 <gd32_i2c_set_address>
 80073c2:	6860      	ldr	r0, [r4, #4]
 80073c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80073c8:	f001 bd16 	b.w	8008df8 <gd32_i2c_set_baudrate>

080073cc <Ssd1306::PutChar(int)>:
 80073cc:	b510      	push	{r4, lr}
 80073ce:	3920      	subs	r1, #32
 80073d0:	295f      	cmp	r1, #95	; 0x5f
 80073d2:	f100 0008 	add.w	r0, r0, #8
 80073d6:	bf94      	ite	ls
 80073d8:	460c      	movls	r4, r1
 80073da:	2400      	movhi	r4, #0
 80073dc:	f7ff ffec 	bl	80073b8 <HAL_I2C::Setup()>
 80073e0:	4804      	ldr	r0, [pc, #16]	; (80073f4 <Ssd1306::PutChar(int)+0x28>)
 80073e2:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
 80073e6:	4420      	add	r0, r4
 80073e8:	2107      	movs	r1, #7
 80073ea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80073ee:	f001 bd11 	b.w	8008e14 <gd32_i2c_write>
 80073f2:	bf00      	nop
 80073f4:	0800b474 	stmdaeq	r0, {r2, r4, r5, r6, sl, ip, sp, pc}

080073f8 <Ssd1306::PutString(char const*)>:
 80073f8:	b538      	push	{r3, r4, r5, lr}
 80073fa:	4605      	mov	r5, r0
 80073fc:	1e4c      	subs	r4, r1, #1
 80073fe:	f814 1f01 	ldrb.w	r1, [r4, #1]!
 8007402:	b901      	cbnz	r1, 8007406 <Ssd1306::PutString(char const*)+0xe>
 8007404:	bd38      	pop	{r3, r4, r5, pc}
 8007406:	4628      	mov	r0, r5
 8007408:	f7ff ffe0 	bl	80073cc <Ssd1306::PutChar(int)>
 800740c:	e7f7      	b.n	80073fe <Ssd1306::PutString(char const*)+0x6>

0800740e <Ssd1306::Text(char const*, unsigned int)>:
 800740e:	b570      	push	{r4, r5, r6, lr}
 8007410:	7903      	ldrb	r3, [r0, #4]
 8007412:	4605      	mov	r5, r0
 8007414:	460c      	mov	r4, r1
 8007416:	4293      	cmp	r3, r2
 8007418:	bf94      	ite	ls
 800741a:	18ce      	addls	r6, r1, r3
 800741c:	188e      	addhi	r6, r1, r2
 800741e:	42b4      	cmp	r4, r6
 8007420:	d100      	bne.n	8007424 <Ssd1306::Text(char const*, unsigned int)+0x16>
 8007422:	bd70      	pop	{r4, r5, r6, pc}
 8007424:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007428:	4628      	mov	r0, r5
 800742a:	f7ff ffcf 	bl	80073cc <Ssd1306::PutChar(int)>
 800742e:	e7f6      	b.n	800741e <Ssd1306::Text(char const*, unsigned int)+0x10>

08007430 <Ssd1306::InitMembers()>:
 8007430:	7c03      	ldrb	r3, [r0, #16]
 8007432:	b14b      	cbz	r3, 8007448 <Ssd1306::InitMembers()+0x18>
 8007434:	3b01      	subs	r3, #1
 8007436:	2b01      	cmp	r3, #1
 8007438:	d909      	bls.n	800744e <Ssd1306::InitMembers()+0x1e>
 800743a:	2308      	movs	r3, #8
 800743c:	2204      	movs	r2, #4
 800743e:	2115      	movs	r1, #21
 8007440:	7101      	strb	r1, [r0, #4]
 8007442:	7143      	strb	r3, [r0, #5]
 8007444:	6142      	str	r2, [r0, #20]
 8007446:	4770      	bx	lr
 8007448:	2308      	movs	r3, #8
 800744a:	461a      	mov	r2, r3
 800744c:	e7f7      	b.n	800743e <Ssd1306::InitMembers()+0xe>
 800744e:	2304      	movs	r3, #4
 8007450:	e7fb      	b.n	800744a <Ssd1306::InitMembers()+0x1a>
	...

08007454 <Ssd1306::Ssd1306(TOledPanel)>:
 8007454:	4a08      	ldr	r2, [pc, #32]	; (8007478 <Ssd1306::Ssd1306(TOledPanel)+0x24>)
 8007456:	6002      	str	r2, [r0, #0]
 8007458:	227f      	movs	r2, #127	; 0x7f
 800745a:	b508      	push	{r3, lr}
 800745c:	80c2      	strh	r2, [r0, #6]
 800745e:	223c      	movs	r2, #60	; 0x3c
 8007460:	7202      	strb	r2, [r0, #8]
 8007462:	4a06      	ldr	r2, [pc, #24]	; (800747c <Ssd1306::Ssd1306(TOledPanel)+0x28>)
 8007464:	60c2      	str	r2, [r0, #12]
 8007466:	2200      	movs	r2, #0
 8007468:	7442      	strb	r2, [r0, #17]
 800746a:	4a05      	ldr	r2, [pc, #20]	; (8007480 <Ssd1306::Ssd1306(TOledPanel)+0x2c>)
 800746c:	7401      	strb	r1, [r0, #16]
 800746e:	6010      	str	r0, [r2, #0]
 8007470:	f7ff ffde 	bl	8007430 <Ssd1306::InitMembers()>
 8007474:	bd08      	pop	{r3, pc}
 8007476:	bf00      	nop
 8007478:	0800b74c 	stmdaeq	r0, {r2, r3, r6, r8, r9, sl, ip, sp, pc}
 800747c:	00061a80 	andeq	r1, r6, r0, lsl #21
 8007480:	2000177c 	andcs	r1, r0, ip, ror r7

08007484 <Ssd1306::SendCommand(unsigned char)>:
 8007484:	b507      	push	{r0, r1, r2, lr}
 8007486:	2300      	movs	r3, #0
 8007488:	3008      	adds	r0, #8
 800748a:	f88d 3004 	strb.w	r3, [sp, #4]
 800748e:	f88d 1005 	strb.w	r1, [sp, #5]
 8007492:	f7ff ff91 	bl	80073b8 <HAL_I2C::Setup()>
 8007496:	2102      	movs	r1, #2
 8007498:	a801      	add	r0, sp, #4
 800749a:	f001 fcbb 	bl	8008e14 <gd32_i2c_write>
 800749e:	b003      	add	sp, #12
 80074a0:	f85d fb04 	ldr.w	pc, [sp], #4

080074a4 <Ssd1306::SetCursorPos(unsigned char, unsigned char)>:
 80074a4:	2914      	cmp	r1, #20
 80074a6:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80074a8:	4615      	mov	r5, r2
 80074aa:	d81d      	bhi.n	80074e8 <Ssd1306::SetCursorPos(unsigned char, unsigned char)+0x44>
 80074ac:	7943      	ldrb	r3, [r0, #5]
 80074ae:	4293      	cmp	r3, r2
 80074b0:	d91a      	bls.n	80074e8 <Ssd1306::SetCursorPos(unsigned char, unsigned char)+0x44>
 80074b2:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 80074b6:	7c43      	ldrb	r3, [r0, #17]
 80074b8:	004c      	lsls	r4, r1, #1
 80074ba:	b2e4      	uxtb	r4, r4
 80074bc:	b10b      	cbz	r3, 80074c2 <Ssd1306::SetCursorPos(unsigned char, unsigned char)+0x1e>
 80074be:	3404      	adds	r4, #4
 80074c0:	b2e4      	uxtb	r4, r4
 80074c2:	f004 010e 	and.w	r1, r4, #14
 80074c6:	9001      	str	r0, [sp, #4]
 80074c8:	f7ff ffdc 	bl	8007484 <Ssd1306::SendCommand(unsigned char)>
 80074cc:	0921      	lsrs	r1, r4, #4
 80074ce:	9801      	ldr	r0, [sp, #4]
 80074d0:	f041 0110 	orr.w	r1, r1, #16
 80074d4:	f7ff ffd6 	bl	8007484 <Ssd1306::SendCommand(unsigned char)>
 80074d8:	9801      	ldr	r0, [sp, #4]
 80074da:	f045 01b0 	orr.w	r1, r5, #176	; 0xb0
 80074de:	b003      	add	sp, #12
 80074e0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80074e4:	f7ff bfce 	b.w	8007484 <Ssd1306::SendCommand(unsigned char)>
 80074e8:	b003      	add	sp, #12
 80074ea:	bd30      	pop	{r4, r5, pc}

080074ec <Ssd1306::TextLine(unsigned char, char const*, unsigned int)>:
 80074ec:	b5e0      	push	{r5, r6, r7, lr}
 80074ee:	461f      	mov	r7, r3
 80074f0:	7943      	ldrb	r3, [r0, #5]
 80074f2:	428b      	cmp	r3, r1
 80074f4:	4605      	mov	r5, r0
 80074f6:	4616      	mov	r6, r2
 80074f8:	d30b      	bcc.n	8007512 <Ssd1306::TextLine(unsigned char, char const*, unsigned int)+0x26>
 80074fa:	1e4a      	subs	r2, r1, #1
 80074fc:	b2d2      	uxtb	r2, r2
 80074fe:	2100      	movs	r1, #0
 8007500:	f7ff ffd0 	bl	80074a4 <Ssd1306::SetCursorPos(unsigned char, unsigned char)>
 8007504:	463a      	mov	r2, r7
 8007506:	4631      	mov	r1, r6
 8007508:	4628      	mov	r0, r5
 800750a:	e8bd 40e0 	ldmia.w	sp!, {r5, r6, r7, lr}
 800750e:	f7ff bf7e 	b.w	800740e <Ssd1306::Text(char const*, unsigned int)>
 8007512:	bde0      	pop	{r5, r6, r7, pc}

08007514 <Ssd1306::ClearLine(unsigned char)>:
 8007514:	b513      	push	{r0, r1, r4, lr}
 8007516:	7943      	ldrb	r3, [r0, #5]
 8007518:	428b      	cmp	r3, r1
 800751a:	4604      	mov	r4, r0
 800751c:	d315      	bcc.n	800754a <Ssd1306::ClearLine(unsigned char)+0x36>
 800751e:	1e4a      	subs	r2, r1, #1
 8007520:	b2d2      	uxtb	r2, r2
 8007522:	2100      	movs	r1, #0
 8007524:	9201      	str	r2, [sp, #4]
 8007526:	f7ff ffbd 	bl	80074a4 <Ssd1306::SetCursorPos(unsigned char, unsigned char)>
 800752a:	f104 0008 	add.w	r0, r4, #8
 800752e:	f7ff ff43 	bl	80073b8 <HAL_I2C::Setup()>
 8007532:	2181      	movs	r1, #129	; 0x81
 8007534:	4806      	ldr	r0, [pc, #24]	; (8007550 <Ssd1306::ClearLine(unsigned char)+0x3c>)
 8007536:	f001 fc6d 	bl	8008e14 <gd32_i2c_write>
 800753a:	9a01      	ldr	r2, [sp, #4]
 800753c:	2100      	movs	r1, #0
 800753e:	4620      	mov	r0, r4
 8007540:	b002      	add	sp, #8
 8007542:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007546:	f7ff bfad 	b.w	80074a4 <Ssd1306::SetCursorPos(unsigned char, unsigned char)>
 800754a:	b002      	add	sp, #8
 800754c:	bd10      	pop	{r4, pc}
 800754e:	bf00      	nop
 8007550:	200016f4 	strdcs	r1, [r0], -r4

08007554 <Ssd1306::SetSleep(bool)>:
 8007554:	b111      	cbz	r1, 800755c <Ssd1306::SetSleep(bool)+0x8>
 8007556:	21ae      	movs	r1, #174	; 0xae
 8007558:	f7ff bf94 	b.w	8007484 <Ssd1306::SendCommand(unsigned char)>
 800755c:	21af      	movs	r1, #175	; 0xaf
 800755e:	e7fb      	b.n	8007558 <Ssd1306::SetSleep(bool)+0x4>

08007560 <Ssd1306::SetContrast(unsigned char)>:
 8007560:	b538      	push	{r3, r4, r5, lr}
 8007562:	4604      	mov	r4, r0
 8007564:	460d      	mov	r5, r1
 8007566:	7181      	strb	r1, [r0, #6]
 8007568:	2181      	movs	r1, #129	; 0x81
 800756a:	f7ff ff8b 	bl	8007484 <Ssd1306::SendCommand(unsigned char)>
 800756e:	4629      	mov	r1, r5
 8007570:	4620      	mov	r0, r4
 8007572:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007576:	f7ff bf85 	b.w	8007484 <Ssd1306::SendCommand(unsigned char)>

0800757a <Ssd1306::SetFlipVertically(bool)>:
 800757a:	b510      	push	{r4, lr}
 800757c:	4604      	mov	r4, r0
 800757e:	71c1      	strb	r1, [r0, #7]
 8007580:	b141      	cbz	r1, 8007594 <Ssd1306::SetFlipVertically(bool)+0x1a>
 8007582:	21c0      	movs	r1, #192	; 0xc0
 8007584:	f7ff ff7e 	bl	8007484 <Ssd1306::SendCommand(unsigned char)>
 8007588:	21a0      	movs	r1, #160	; 0xa0
 800758a:	4620      	mov	r0, r4
 800758c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007590:	f7ff bf78 	b.w	8007484 <Ssd1306::SendCommand(unsigned char)>
 8007594:	21c8      	movs	r1, #200	; 0xc8
 8007596:	f7ff ff75 	bl	8007484 <Ssd1306::SendCommand(unsigned char)>
 800759a:	21a1      	movs	r1, #161	; 0xa1
 800759c:	e7f5      	b.n	800758a <Ssd1306::SetFlipVertically(bool)+0x10>
	...

080075a0 <Ssd1306::CheckSH1106()>:
 80075a0:	b530      	push	{r4, r5, lr}
 80075a2:	2100      	movs	r1, #0
 80075a4:	b087      	sub	sp, #28
 80075a6:	4604      	mov	r4, r0
 80075a8:	f7ff ff6c 	bl	8007484 <Ssd1306::SendCommand(unsigned char)>
 80075ac:	2190      	movs	r1, #144	; 0x90
 80075ae:	4620      	mov	r0, r4
 80075b0:	f7ff ff68 	bl	8007484 <Ssd1306::SendCommand(unsigned char)>
 80075b4:	21b0      	movs	r1, #176	; 0xb0
 80075b6:	4620      	mov	r0, r4
 80075b8:	f7ff ff64 	bl	8007484 <Ssd1306::SendCommand(unsigned char)>
 80075bc:	4b22      	ldr	r3, [pc, #136]	; (8007648 <Ssd1306::CheckSH1106()+0xa8>)
 80075be:	f104 0508 	add.w	r5, r4, #8
 80075c2:	6818      	ldr	r0, [r3, #0]
 80075c4:	9002      	str	r0, [sp, #8]
 80075c6:	791b      	ldrb	r3, [r3, #4]
 80075c8:	f88d 300c 	strb.w	r3, [sp, #12]
 80075cc:	4628      	mov	r0, r5
 80075ce:	f7ff fef3 	bl	80073b8 <HAL_I2C::Setup()>
 80075d2:	2105      	movs	r1, #5
 80075d4:	a802      	add	r0, sp, #8
 80075d6:	f001 fc1d 	bl	8008e14 <gd32_i2c_write>
 80075da:	2100      	movs	r1, #0
 80075dc:	4620      	mov	r0, r4
 80075de:	f7ff ff51 	bl	8007484 <Ssd1306::SendCommand(unsigned char)>
 80075e2:	2190      	movs	r1, #144	; 0x90
 80075e4:	4620      	mov	r0, r4
 80075e6:	f7ff ff4d 	bl	8007484 <Ssd1306::SendCommand(unsigned char)>
 80075ea:	21b0      	movs	r1, #176	; 0xb0
 80075ec:	4620      	mov	r0, r4
 80075ee:	f7ff ff49 	bl	8007484 <Ssd1306::SendCommand(unsigned char)>
 80075f2:	2300      	movs	r3, #0
 80075f4:	9304      	str	r3, [sp, #16]
 80075f6:	f88d 3014 	strb.w	r3, [sp, #20]
 80075fa:	4628      	mov	r0, r5
 80075fc:	2340      	movs	r3, #64	; 0x40
 80075fe:	f88d 3007 	strb.w	r3, [sp, #7]
 8007602:	f7ff fed9 	bl	80073b8 <HAL_I2C::Setup()>
 8007606:	2101      	movs	r1, #1
 8007608:	f10d 0007 	add.w	r0, sp, #7
 800760c:	f001 fc02 	bl	8008e14 <gd32_i2c_write>
 8007610:	4628      	mov	r0, r5
 8007612:	f7ff fed1 	bl	80073b8 <HAL_I2C::Setup()>
 8007616:	2105      	movs	r1, #5
 8007618:	a804      	add	r0, sp, #16
 800761a:	f001 fc61 	bl	8008ee0 <gd32_i2c_read>
 800761e:	aa02      	add	r2, sp, #8
 8007620:	a904      	add	r1, sp, #16
 8007622:	2004      	movs	r0, #4
 8007624:	3801      	subs	r0, #1
 8007626:	d201      	bcs.n	800762c <Ssd1306::CheckSH1106()+0x8c>
 8007628:	2300      	movs	r3, #0
 800762a:	e006      	b.n	800763a <Ssd1306::CheckSH1106()+0x9a>
 800762c:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 8007630:	f811 5f01 	ldrb.w	r5, [r1, #1]!
 8007634:	42ab      	cmp	r3, r5
 8007636:	d0f5      	beq.n	8007624 <Ssd1306::CheckSH1106()+0x84>
 8007638:	1b5b      	subs	r3, r3, r5
 800763a:	fab3 f383 	clz	r3, r3
 800763e:	095b      	lsrs	r3, r3, #5
 8007640:	7463      	strb	r3, [r4, #17]
 8007642:	b007      	add	sp, #28
 8007644:	bd30      	pop	{r4, r5, pc}
 8007646:	bf00      	nop
 8007648:	0800b46e 	stmdaeq	r0, {r1, r2, r3, r5, r6, sl, ip, sp, pc}

0800764c <Ssd1306::Cls()>:
 800764c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007650:	7c45      	ldrb	r5, [r0, #17]
 8007652:	00ad      	lsls	r5, r5, #2
 8007654:	b2ed      	uxtb	r5, r5
 8007656:	f1a5 077f 	sub.w	r7, r5, #127	; 0x7f
 800765a:	4604      	mov	r4, r0
 800765c:	2600      	movs	r6, #0
 800765e:	f045 0810 	orr.w	r8, r5, #16
 8007662:	b2ff      	uxtb	r7, r7
 8007664:	6963      	ldr	r3, [r4, #20]
 8007666:	42b3      	cmp	r3, r6
 8007668:	4629      	mov	r1, r5
 800766a:	4620      	mov	r0, r4
 800766c:	d80b      	bhi.n	8007686 <Ssd1306::Cls()+0x3a>
 800766e:	f7ff ff09 	bl	8007484 <Ssd1306::SendCommand(unsigned char)>
 8007672:	4641      	mov	r1, r8
 8007674:	4620      	mov	r0, r4
 8007676:	f7ff ff05 	bl	8007484 <Ssd1306::SendCommand(unsigned char)>
 800767a:	4620      	mov	r0, r4
 800767c:	21b0      	movs	r1, #176	; 0xb0
 800767e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007682:	f7ff beff 	b.w	8007484 <Ssd1306::SendCommand(unsigned char)>
 8007686:	f7ff fefd 	bl	8007484 <Ssd1306::SendCommand(unsigned char)>
 800768a:	4641      	mov	r1, r8
 800768c:	4620      	mov	r0, r4
 800768e:	f7ff fef9 	bl	8007484 <Ssd1306::SendCommand(unsigned char)>
 8007692:	f066 014f 	orn	r1, r6, #79	; 0x4f
 8007696:	b2c9      	uxtb	r1, r1
 8007698:	4620      	mov	r0, r4
 800769a:	f7ff fef3 	bl	8007484 <Ssd1306::SendCommand(unsigned char)>
 800769e:	7c23      	ldrb	r3, [r4, #16]
 80076a0:	b123      	cbz	r3, 80076ac <Ssd1306::Cls()+0x60>
 80076a2:	3b01      	subs	r3, #1
 80076a4:	2b01      	cmp	r3, #1
 80076a6:	d901      	bls.n	80076ac <Ssd1306::Cls()+0x60>
 80076a8:	3601      	adds	r6, #1
 80076aa:	e7db      	b.n	8007664 <Ssd1306::Cls()+0x18>
 80076ac:	f104 0008 	add.w	r0, r4, #8
 80076b0:	f7ff fe82 	bl	80073b8 <HAL_I2C::Setup()>
 80076b4:	4639      	mov	r1, r7
 80076b6:	4802      	ldr	r0, [pc, #8]	; (80076c0 <Ssd1306::Cls()+0x74>)
 80076b8:	f001 fbac 	bl	8008e14 <gd32_i2c_write>
 80076bc:	e7f4      	b.n	80076a8 <Ssd1306::Cls()+0x5c>
 80076be:	bf00      	nop
 80076c0:	200016f4 	strdcs	r1, [r0], -r4

080076c4 <Ssd1306::Start()>:
 80076c4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80076c6:	7a04      	ldrb	r4, [r0, #8]
 80076c8:	68c6      	ldr	r6, [r0, #12]
 80076ca:	4605      	mov	r5, r0
 80076cc:	4620      	mov	r0, r4
 80076ce:	f001 fb9b 	bl	8008e08 <gd32_i2c_set_address>
 80076d2:	4630      	mov	r0, r6
 80076d4:	f001 fb90 	bl	8008df8 <gd32_i2c_set_baudrate>
 80076d8:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 80076dc:	2b07      	cmp	r3, #7
 80076de:	d902      	bls.n	80076e6 <Ssd1306::Start()+0x22>
 80076e0:	3c50      	subs	r4, #80	; 0x50
 80076e2:	2c0f      	cmp	r4, #15
 80076e4:	d80f      	bhi.n	8007706 <Ssd1306::Start()+0x42>
 80076e6:	2101      	movs	r1, #1
 80076e8:	f10d 0007 	add.w	r0, sp, #7
 80076ec:	f001 fbf8 	bl	8008ee0 <gd32_i2c_read>
 80076f0:	fab0 f480 	clz	r4, r0
 80076f4:	0964      	lsrs	r4, r4, #5
 80076f6:	b35c      	cbz	r4, 8007750 <Ssd1306::Start()+0x8c>
 80076f8:	7c2e      	ldrb	r6, [r5, #16]
 80076fa:	b14e      	cbz	r6, 8007710 <Ssd1306::Start()+0x4c>
 80076fc:	3e01      	subs	r6, #1
 80076fe:	2e01      	cmp	r6, #1
 8007700:	d929      	bls.n	8007756 <Ssd1306::Start()+0x92>
 8007702:	2400      	movs	r4, #0
 8007704:	e024      	b.n	8007750 <Ssd1306::Start()+0x8c>
 8007706:	2100      	movs	r1, #0
 8007708:	4608      	mov	r0, r1
 800770a:	f001 fb83 	bl	8008e14 <gd32_i2c_write>
 800770e:	e7ef      	b.n	80076f0 <Ssd1306::Start()+0x2c>
 8007710:	4f16      	ldr	r7, [pc, #88]	; (800776c <Ssd1306::Start()+0xa8>)
 8007712:	f817 1b01 	ldrb.w	r1, [r7], #1
 8007716:	4628      	mov	r0, r5
 8007718:	3601      	adds	r6, #1
 800771a:	f7ff feb3 	bl	8007484 <Ssd1306::SendCommand(unsigned char)>
 800771e:	2e18      	cmp	r6, #24
 8007720:	d1f7      	bne.n	8007712 <Ssd1306::Start()+0x4e>
 8007722:	4a13      	ldr	r2, [pc, #76]	; (8007770 <Ssd1306::Start()+0xac>)
 8007724:	2300      	movs	r3, #0
 8007726:	4611      	mov	r1, r2
 8007728:	4618      	mov	r0, r3
 800772a:	3301      	adds	r3, #1
 800772c:	2b86      	cmp	r3, #134	; 0x86
 800772e:	f802 0b01 	strb.w	r0, [r2], #1
 8007732:	d1fa      	bne.n	800772a <Ssd1306::Start()+0x66>
 8007734:	2340      	movs	r3, #64	; 0x40
 8007736:	700b      	strb	r3, [r1, #0]
 8007738:	4628      	mov	r0, r5
 800773a:	f7ff ff31 	bl	80075a0 <Ssd1306::CheckSH1106()>
 800773e:	4628      	mov	r0, r5
 8007740:	f7ff ff84 	bl	800764c <Ssd1306::Cls()>
 8007744:	21af      	movs	r1, #175	; 0xaf
 8007746:	4628      	mov	r0, r5
 8007748:	f7ff fe9c 	bl	8007484 <Ssd1306::SendCommand(unsigned char)>
 800774c:	2301      	movs	r3, #1
 800774e:	71eb      	strb	r3, [r5, #7]
 8007750:	4620      	mov	r0, r4
 8007752:	b003      	add	sp, #12
 8007754:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007756:	4f07      	ldr	r7, [pc, #28]	; (8007774 <Ssd1306::Start()+0xb0>)
 8007758:	2600      	movs	r6, #0
 800775a:	f817 1b01 	ldrb.w	r1, [r7], #1
 800775e:	4628      	mov	r0, r5
 8007760:	3601      	adds	r6, #1
 8007762:	f7ff fe8f 	bl	8007484 <Ssd1306::SendCommand(unsigned char)>
 8007766:	2e18      	cmp	r6, #24
 8007768:	d1f7      	bne.n	800775a <Ssd1306::Start()+0x96>
 800776a:	e7da      	b.n	8007722 <Ssd1306::Start()+0x5e>
 800776c:	0800b72c 	stmdaeq	r0, {r2, r3, r5, r8, r9, sl, ip, sp, pc}
 8007770:	200016f4 	strdcs	r1, [r0], -r4
 8007774:	0800b714 	stmdaeq	r0, {r2, r4, r8, r9, sl, ip, sp, pc}

08007778 <console_putc>:
 8007778:	f000 bc82 	b.w	8008080 <uart0_putc>

0800777c <console_puts>:
 800777c:	f000 bca0 	b.w	80080c0 <uart0_puts>

08007780 <FirmwareVersion::FirmwareVersion(char const*, char const*, char const*)>:
 8007780:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007784:	4d15      	ldr	r5, [pc, #84]	; (80077dc <FirmwareVersion::FirmwareVersion(char const*, char const*, char const*)+0x5c>)
 8007786:	461e      	mov	r6, r3
 8007788:	4b15      	ldr	r3, [pc, #84]	; (80077e0 <FirmwareVersion::FirmwareVersion(char const*, char const*, char const*)+0x60>)
 800778a:	b086      	sub	sp, #24
 800778c:	6018      	str	r0, [r3, #0]
 800778e:	4604      	mov	r4, r0
 8007790:	4617      	mov	r7, r2
 8007792:	f105 0803 	add.w	r8, r5, #3
 8007796:	2203      	movs	r2, #3
 8007798:	4628      	mov	r0, r5
 800779a:	f000 fb24 	bl	8007de6 <memmove>
 800779e:	4639      	mov	r1, r7
 80077a0:	220b      	movs	r2, #11
 80077a2:	4640      	mov	r0, r8
 80077a4:	f000 fb1f 	bl	8007de6 <memmove>
 80077a8:	f105 030e 	add.w	r3, r5, #14
 80077ac:	4631      	mov	r1, r6
 80077ae:	2208      	movs	r2, #8
 80077b0:	4618      	mov	r0, r3
 80077b2:	f000 fb18 	bl	8007de6 <memmove>
 80077b6:	2308      	movs	r3, #8
 80077b8:	e9cd 8303 	strd	r8, r3, [sp, #12]
 80077bc:	230b      	movs	r3, #11
 80077be:	9302      	str	r3, [sp, #8]
 80077c0:	4b08      	ldr	r3, [pc, #32]	; (80077e4 <FirmwareVersion::FirmwareVersion(char const*, char const*, char const*)+0x64>)
 80077c2:	9005      	str	r0, [sp, #20]
 80077c4:	e9cd 5300 	strd	r5, r3, [sp]
 80077c8:	4a07      	ldr	r2, [pc, #28]	; (80077e8 <FirmwareVersion::FirmwareVersion(char const*, char const*, char const*)+0x68>)
 80077ca:	4808      	ldr	r0, [pc, #32]	; (80077ec <FirmwareVersion::FirmwareVersion(char const*, char const*, char const*)+0x6c>)
 80077cc:	2303      	movs	r3, #3
 80077ce:	213f      	movs	r1, #63	; 0x3f
 80077d0:	f7fa f838 	bl	8001844 <snprintf>
 80077d4:	4620      	mov	r0, r4
 80077d6:	b006      	add	sp, #24
 80077d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80077dc:	20001780 	andcs	r1, r0, r0, lsl #15
 80077e0:	200017d8 	ldrdcs	r1, [r0], -r8
 80077e4:	08009c94 	stmdaeq	r0, {r2, r4, r7, sl, fp, ip, pc}
 80077e8:	0800b790 	stmdaeq	r0, {r4, r7, r8, r9, sl, ip, sp, pc}
 80077ec:	20001796 	mulcs	r0, r6, r7

080077f0 <FirmwareVersion::Print(char const*)>:
 80077f0:	b510      	push	{r4, lr}
 80077f2:	4805      	ldr	r0, [pc, #20]	; (8007808 <FirmwareVersion::Print(char const*)+0x18>)
 80077f4:	460c      	mov	r4, r1
 80077f6:	f7fa f84d 	bl	8001894 <puts>
 80077fa:	b124      	cbz	r4, 8007806 <FirmwareVersion::Print(char const*)+0x16>
 80077fc:	4620      	mov	r0, r4
 80077fe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007802:	f7fa b847 	b.w	8001894 <puts>
 8007806:	bd10      	pop	{r4, pc}
 8007808:	20001796 	mulcs	r0, r6, r7

0800780c <LedBlink::LedBlink()>:
 800780c:	b538      	push	{r3, r4, r5, lr}
 800780e:	2205      	movs	r2, #5
 8007810:	2300      	movs	r3, #0
 8007812:	e9c0 3200 	strd	r3, r2, [r0]
 8007816:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800781a:	e9c0 2303 	strd	r2, r3, [r0, #12]
 800781e:	6083      	str	r3, [r0, #8]
 8007820:	6143      	str	r3, [r0, #20]
 8007822:	4b09      	ldr	r3, [pc, #36]	; (8007848 <LedBlink::LedBlink()+0x3c>)
 8007824:	4d09      	ldr	r5, [pc, #36]	; (800784c <LedBlink::LedBlink()+0x40>)
 8007826:	6018      	str	r0, [r3, #0]
 8007828:	4604      	mov	r4, r0
 800782a:	f240 6004 	movw	r0, #1540	; 0x604
 800782e:	f000 fedd 	bl	80085ec <rcu_periph_clock_enable>
 8007832:	4628      	mov	r0, r5
 8007834:	2301      	movs	r3, #1
 8007836:	2203      	movs	r2, #3
 8007838:	2110      	movs	r1, #16
 800783a:	f000 fe3f 	bl	80084bc <gpio_init>
 800783e:	2301      	movs	r3, #1
 8007840:	616b      	str	r3, [r5, #20]
 8007842:	4620      	mov	r0, r4
 8007844:	bd38      	pop	{r3, r4, r5, pc}
 8007846:	bf00      	nop
 8007848:	200017dc 	ldrdcs	r1, [r0], -ip
 800784c:	40011000 	andmi	r1, r1, r0

08007850 <LedBlink::SetMode(ledblink::Mode)>:
 8007850:	6843      	ldr	r3, [r0, #4]
 8007852:	428b      	cmp	r3, r1
 8007854:	d02f      	beq.n	80078b6 <LedBlink::SetMode(ledblink::Mode)+0x66>
 8007856:	6041      	str	r1, [r0, #4]
 8007858:	2904      	cmp	r1, #4
 800785a:	d822      	bhi.n	80078a2 <LedBlink::SetMode(ledblink::Mode)+0x52>
 800785c:	e8df f001 	tbb	[pc, r1]
 8007860:	18120321 	ldmdane	r2, {r0, r5, r8, r9}
 8007864:	23ff001d 	mvnscs	r0, #29
 8007868:	6003      	str	r3, [r0, #0]
 800786a:	2300      	movs	r3, #0
 800786c:	60c3      	str	r3, [r0, #12]
 800786e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8007872:	f503 3388 	add.w	r3, r3, #69632	; 0x11000
 8007876:	2201      	movs	r2, #1
 8007878:	611a      	str	r2, [r3, #16]
 800787a:	6880      	ldr	r0, [r0, #8]
 800787c:	b1d8      	cbz	r0, 80078b6 <LedBlink::SetMode(ledblink::Mode)+0x66>
 800787e:	6803      	ldr	r3, [r0, #0]
 8007880:	689b      	ldr	r3, [r3, #8]
 8007882:	4718      	bx	r3
 8007884:	2301      	movs	r3, #1
 8007886:	6003      	str	r3, [r0, #0]
 8007888:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800788c:	60c3      	str	r3, [r0, #12]
 800788e:	e7f4      	b.n	800787a <LedBlink::SetMode(ledblink::Mode)+0x2a>
 8007890:	2303      	movs	r3, #3
 8007892:	6003      	str	r3, [r0, #0]
 8007894:	f240 134d 	movw	r3, #333	; 0x14d
 8007898:	e7f8      	b.n	800788c <LedBlink::SetMode(ledblink::Mode)+0x3c>
 800789a:	2305      	movs	r3, #5
 800789c:	6003      	str	r3, [r0, #0]
 800789e:	23c8      	movs	r3, #200	; 0xc8
 80078a0:	e7f4      	b.n	800788c <LedBlink::SetMode(ledblink::Mode)+0x3c>
 80078a2:	2300      	movs	r3, #0
 80078a4:	6003      	str	r3, [r0, #0]
 80078a6:	60c3      	str	r3, [r0, #12]
 80078a8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80078ac:	f503 3388 	add.w	r3, r3, #69632	; 0x11000
 80078b0:	2201      	movs	r2, #1
 80078b2:	615a      	str	r2, [r3, #20]
 80078b4:	e7e1      	b.n	800787a <LedBlink::SetMode(ledblink::Mode)+0x2a>
 80078b6:	4770      	bx	lr

080078b8 <Hardware::Hardware()>:
 80078b8:	b530      	push	{r4, r5, lr}
 80078ba:	4604      	mov	r4, r0
 80078bc:	b091      	sub	sp, #68	; 0x44
 80078be:	f000 f8cf 	bl	8007a60 <HwClock::HwClock()>
 80078c2:	2500      	movs	r5, #0
 80078c4:	4b27      	ldr	r3, [pc, #156]	; (8007964 <Hardware::Hardware()+0xac>)
 80078c6:	7325      	strb	r5, [r4, #12]
 80078c8:	601c      	str	r4, [r3, #0]
 80078ca:	f7f8 fc31 	bl	8000130 <console_init>
 80078ce:	f000 fc07 	bl	80080e0 <systick_config>
 80078d2:	f001 fd49 	bl	8009368 <udelay_init()>
 80078d6:	f001 fd45 	bl	8009364 <micros_init()>
 80078da:	f240 701b 	movw	r0, #1819	; 0x71b
 80078de:	f000 fe85 	bl	80085ec <rcu_periph_clock_enable>
 80078e2:	f240 701c 	movw	r0, #1820	; 0x71c
 80078e6:	f000 fe81 	bl	80085ec <rcu_periph_clock_enable>
 80078ea:	f000 fe77 	bl	80085dc <pmu_backup_write_enable>
 80078ee:	4629      	mov	r1, r5
 80078f0:	2002      	movs	r0, #2
 80078f2:	f000 fca9 	bl	8008248 <bkp_write_data>
 80078f6:	f240 7004 	movw	r0, #1796	; 0x704
 80078fa:	f000 fe77 	bl	80085ec <rcu_periph_clock_enable>
 80078fe:	481a      	ldr	r0, [pc, #104]	; (8007968 <Hardware::Hardware()+0xb0>)
 8007900:	f001 f804 	bl	800890c <timer_deinit>
 8007904:	2377      	movs	r3, #119	; 0x77
 8007906:	a903      	add	r1, sp, #12
 8007908:	f8ad 300c 	strh.w	r3, [sp, #12]
 800790c:	4816      	ldr	r0, [pc, #88]	; (8007968 <Hardware::Hardware()+0xb0>)
 800790e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007912:	9305      	str	r3, [sp, #20]
 8007914:	f001 f85c 	bl	80089d0 <timer_init>
 8007918:	4813      	ldr	r0, [pc, #76]	; (8007968 <Hardware::Hardware()+0xb0>)
 800791a:	f001 f897 	bl	8008a4c <timer_enable>
 800791e:	f001 f9a5 	bl	8008c6c <gd32_adc_init()>
 8007922:	2211      	movs	r2, #17
 8007924:	230b      	movs	r3, #11
 8007926:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800792a:	a807      	add	r0, sp, #28
 800792c:	237a      	movs	r3, #122	; 0x7a
 800792e:	930c      	str	r3, [sp, #48]	; 0x30
 8007930:	e9cd 5508 	strd	r5, r5, [sp, #32]
 8007934:	9507      	str	r5, [sp, #28]
 8007936:	950f      	str	r5, [sp, #60]	; 0x3c
 8007938:	f000 faf8 	bl	8007f2c <mktime>
 800793c:	4629      	mov	r1, r5
 800793e:	e9cd 0501 	strd	r0, r5, [sp, #4]
 8007942:	a801      	add	r0, sp, #4
 8007944:	f000 fb68 	bl	8008018 <settimeofday>
 8007948:	f001 fa22 	bl	8008d90 <gd32_i2c_begin>
 800794c:	4620      	mov	r0, r4
 800794e:	f000 f97f 	bl	8007c50 <HwClock::RtcProbe()>
 8007952:	4620      	mov	r0, r4
 8007954:	f000 f890 	bl	8007a78 <HwClock::Print()>
 8007958:	4620      	mov	r0, r4
 800795a:	f000 f8c1 	bl	8007ae0 <HwClock::HcToSys()>
 800795e:	4620      	mov	r0, r4
 8007960:	b011      	add	sp, #68	; 0x44
 8007962:	bd30      	pop	{r4, r5, pc}
 8007964:	200017e0 	andcs	r1, r0, r0, ror #15
 8007968:	40001000 	andmi	r1, r0, r0

0800796c <Hardware::SetTime(tm const*)>:
 800796c:	b500      	push	{lr}
 800796e:	b08b      	sub	sp, #44	; 0x2c
 8007970:	680b      	ldr	r3, [r1, #0]
 8007972:	9301      	str	r3, [sp, #4]
 8007974:	684b      	ldr	r3, [r1, #4]
 8007976:	9302      	str	r3, [sp, #8]
 8007978:	688b      	ldr	r3, [r1, #8]
 800797a:	9303      	str	r3, [sp, #12]
 800797c:	68cb      	ldr	r3, [r1, #12]
 800797e:	9304      	str	r3, [sp, #16]
 8007980:	690b      	ldr	r3, [r1, #16]
 8007982:	9305      	str	r3, [sp, #20]
 8007984:	694b      	ldr	r3, [r1, #20]
 8007986:	9306      	str	r3, [sp, #24]
 8007988:	a901      	add	r1, sp, #4
 800798a:	f000 f909 	bl	8007ba0 <HwClock::Set(rtc_time const*)>
 800798e:	2001      	movs	r0, #1
 8007990:	b00b      	add	sp, #44	; 0x2c
 8007992:	f85d fb04 	ldr.w	pc, [sp], #4

08007996 <Hardware::GetTime(tm*)>:
 8007996:	b513      	push	{r0, r1, r4, lr}
 8007998:	2000      	movs	r0, #0
 800799a:	460c      	mov	r4, r1
 800799c:	f000 fb54 	bl	8008048 <time>
 80079a0:	9001      	str	r0, [sp, #4]
 80079a2:	a801      	add	r0, sp, #4
 80079a4:	f000 fa7e 	bl	8007ea4 <localtime>
 80079a8:	6943      	ldr	r3, [r0, #20]
 80079aa:	6163      	str	r3, [r4, #20]
 80079ac:	6903      	ldr	r3, [r0, #16]
 80079ae:	6123      	str	r3, [r4, #16]
 80079b0:	68c3      	ldr	r3, [r0, #12]
 80079b2:	60e3      	str	r3, [r4, #12]
 80079b4:	6883      	ldr	r3, [r0, #8]
 80079b6:	60a3      	str	r3, [r4, #8]
 80079b8:	6843      	ldr	r3, [r0, #4]
 80079ba:	6063      	str	r3, [r4, #4]
 80079bc:	6803      	ldr	r3, [r0, #0]
 80079be:	6023      	str	r3, [r4, #0]
 80079c0:	b002      	add	sp, #8
 80079c2:	bd10      	pop	{r4, pc}

080079c4 <Hardware::Reboot()>:
 80079c4:	b508      	push	{r3, lr}
 80079c6:	2300      	movs	r3, #0
 80079c8:	7303      	strb	r3, [r0, #12]
 80079ca:	4604      	mov	r4, r0
 80079cc:	2104      	movs	r1, #4
 80079ce:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80079d2:	f000 fd49 	bl	8008468 <fwdgt_config>
 80079d6:	4620      	mov	r0, r4
 80079d8:	f7f8 fef8 	bl	80007cc <Hardware::RebootHandler()>
 80079dc:	2102      	movs	r1, #2
 80079de:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80079e2:	f000 fd41 	bl	8008468 <fwdgt_config>
 80079e6:	2801      	cmp	r0, #1
 80079e8:	bf0c      	ite	eq
 80079ea:	2301      	moveq	r3, #1
 80079ec:	2300      	movne	r3, #0
 80079ee:	7323      	strb	r3, [r4, #12]
 80079f0:	d101      	bne.n	80079f6 <Hardware::Reboot()+0x32>
 80079f2:	f000 fd29 	bl	8008448 <fwdgt_enable>
 80079f6:	4b0e      	ldr	r3, [pc, #56]	; (8007a30 <Hardware::Reboot()+0x6c>)
 80079f8:	480e      	ldr	r0, [pc, #56]	; (8007a34 <Hardware::Reboot()+0x70>)
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	490e      	ldr	r1, [pc, #56]	; (8007a38 <Hardware::Reboot()+0x74>)
 80079fe:	2208      	movs	r2, #8
 8007a00:	601a      	str	r2, [r3, #0]
 8007a02:	227d      	movs	r2, #125	; 0x7d
 8007a04:	60da      	str	r2, [r3, #12]
 8007a06:	2501      	movs	r5, #1
 8007a08:	68dc      	ldr	r4, [r3, #12]
 8007a0a:	b904      	cbnz	r4, 8007a0e <Hardware::Reboot()+0x4a>
 8007a0c:	e7fe      	b.n	8007a0c <Hardware::Reboot()+0x48>
 8007a0e:	6802      	ldr	r2, [r0, #0]
 8007a10:	695e      	ldr	r6, [r3, #20]
 8007a12:	1b92      	subs	r2, r2, r6
 8007a14:	4294      	cmp	r4, r2
 8007a16:	d8f8      	bhi.n	8007a0a <Hardware::Reboot()+0x46>
 8007a18:	6802      	ldr	r2, [r0, #0]
 8007a1a:	615a      	str	r2, [r3, #20]
 8007a1c:	691a      	ldr	r2, [r3, #16]
 8007a1e:	2a01      	cmp	r2, #1
 8007a20:	f082 0401 	eor.w	r4, r2, #1
 8007a24:	611c      	str	r4, [r3, #16]
 8007a26:	bf14      	ite	ne
 8007a28:	610d      	strne	r5, [r1, #16]
 8007a2a:	614a      	streq	r2, [r1, #20]
 8007a2c:	e7ec      	b.n	8007a08 <Hardware::Reboot()+0x44>
 8007a2e:	bf00      	nop
 8007a30:	200017dc 	ldrdcs	r1, [r0], -ip
 8007a34:	2000181c 	andcs	r1, r0, ip, lsl r8
 8007a38:	40011000 	andmi	r1, r1, r0

08007a3c <Hardware::WatchdogInit()>:
 8007a3c:	b510      	push	{r4, lr}
 8007a3e:	2102      	movs	r1, #2
 8007a40:	4604      	mov	r4, r0
 8007a42:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8007a46:	f000 fd0f 	bl	8008468 <fwdgt_config>
 8007a4a:	2801      	cmp	r0, #1
 8007a4c:	bf0c      	ite	eq
 8007a4e:	2301      	moveq	r3, #1
 8007a50:	2300      	movne	r3, #0
 8007a52:	7323      	strb	r3, [r4, #12]
 8007a54:	d103      	bne.n	8007a5e <Hardware::WatchdogInit()+0x22>
 8007a56:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007a5a:	f000 bcf5 	b.w	8008448 <fwdgt_enable>
 8007a5e:	bd10      	pop	{r4, pc}

08007a60 <HwClock::HwClock()>:
 8007a60:	2200      	movs	r2, #0
 8007a62:	e9c0 2200 	strd	r2, r2, [r0]
 8007a66:	7282      	strb	r2, [r0, #10]
 8007a68:	4a02      	ldr	r2, [pc, #8]	; (8007a74 <HwClock::HwClock()+0x14>)
 8007a6a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8007a6e:	8101      	strh	r1, [r0, #8]
 8007a70:	6010      	str	r0, [r2, #0]
 8007a72:	4770      	bx	lr
 8007a74:	200017e4 	andcs	r1, r0, r4, ror #15

08007a78 <HwClock::Print()>:
 8007a78:	b510      	push	{r4, lr}
 8007a7a:	7a83      	ldrb	r3, [r0, #10]
 8007a7c:	b08e      	sub	sp, #56	; 0x38
 8007a7e:	4604      	mov	r4, r0
 8007a80:	b92b      	cbnz	r3, 8007a8e <HwClock::Print()+0x16>
 8007a82:	4812      	ldr	r0, [pc, #72]	; (8007acc <HwClock::Print()+0x54>)
 8007a84:	b00e      	add	sp, #56	; 0x38
 8007a86:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007a8a:	f7f9 bf03 	b.w	8001894 <puts>
 8007a8e:	7a43      	ldrb	r3, [r0, #9]
 8007a90:	480f      	ldr	r0, [pc, #60]	; (8007ad0 <HwClock::Print()+0x58>)
 8007a92:	2b03      	cmp	r3, #3
 8007a94:	bf96      	itet	ls
 8007a96:	4a0f      	ldrls	r2, [pc, #60]	; (8007ad4 <HwClock::Print()+0x5c>)
 8007a98:	490f      	ldrhi	r1, [pc, #60]	; (8007ad8 <HwClock::Print()+0x60>)
 8007a9a:	f852 1023 	ldrls.w	r1, [r2, r3, lsl #2]
 8007a9e:	f7f9 fec1 	bl	8001824 <printf>
 8007aa2:	a905      	add	r1, sp, #20
 8007aa4:	4620      	mov	r0, r4
 8007aa6:	f000 f905 	bl	8007cb4 <HwClock::RtcGet(rtc_time*)>
 8007aaa:	9b05      	ldr	r3, [sp, #20]
 8007aac:	9302      	str	r3, [sp, #8]
 8007aae:	9b06      	ldr	r3, [sp, #24]
 8007ab0:	9301      	str	r3, [sp, #4]
 8007ab2:	9b07      	ldr	r3, [sp, #28]
 8007ab4:	9300      	str	r3, [sp, #0]
 8007ab6:	e9dd 3208 	ldrd	r3, r2, [sp, #32]
 8007aba:	990a      	ldr	r1, [sp, #40]	; 0x28
 8007abc:	4807      	ldr	r0, [pc, #28]	; (8007adc <HwClock::Print()+0x64>)
 8007abe:	3201      	adds	r2, #1
 8007ac0:	f201 716c 	addw	r1, r1, #1900	; 0x76c
 8007ac4:	f7f9 feae 	bl	8001824 <printf>
 8007ac8:	b00e      	add	sp, #56	; 0x38
 8007aca:	bd10      	pop	{r4, pc}
 8007acc:	0800b7b4 	stmdaeq	r0, {r2, r4, r5, r7, r8, r9, sl, ip, sp, pc}
 8007ad0:	0800a89c 	stmdaeq	r0, {r2, r3, r4, r7, fp, sp, pc}
 8007ad4:	0800b80c 	stmdaeq	r0, {r2, r3, fp, ip, sp, pc}
 8007ad8:	0800b0c4 	stmdaeq	r0, {r2, r6, r7, ip, sp, pc}
 8007adc:	0800b7c5 	stmdaeq	r0, {r0, r2, r6, r7, r8, r9, sl, ip, sp, pc}

08007ae0 <HwClock::HcToSys()>:
 8007ae0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007ae4:	7a83      	ldrb	r3, [r0, #10]
 8007ae6:	b0a3      	sub	sp, #140	; 0x8c
 8007ae8:	4604      	mov	r4, r0
 8007aea:	2b00      	cmp	r3, #0
 8007aec:	d04c      	beq.n	8007b88 <HwClock::HcToSys()+0xa8>
 8007aee:	4f2a      	ldr	r7, [pc, #168]	; (8007b98 <HwClock::HcToSys()+0xb8>)
 8007af0:	683b      	ldr	r3, [r7, #0]
 8007af2:	7b1e      	ldrb	r6, [r3, #12]
 8007af4:	b136      	cbz	r6, 8007b04 <HwClock::HcToSys()+0x24>
 8007af6:	2200      	movs	r2, #0
 8007af8:	731a      	strb	r2, [r3, #12]
 8007afa:	2104      	movs	r1, #4
 8007afc:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8007b00:	f000 fcb2 	bl	8008468 <fwdgt_config>
 8007b04:	a907      	add	r1, sp, #28
 8007b06:	4620      	mov	r0, r4
 8007b08:	f000 f8d4 	bl	8007cb4 <HwClock::RtcGet(rtc_time*)>
 8007b0c:	2100      	movs	r1, #0
 8007b0e:	a801      	add	r0, sp, #4
 8007b10:	f000 fa58 	bl	8007fc4 <gettimeofday>
 8007b14:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8007b18:	f04f 083c 	mov.w	r8, #60	; 0x3c
 8007b1c:	e9cd 2319 	strd	r2, r3, [sp, #100]	; 0x64
 8007b20:	fb08 2903 	mla	r9, r8, r3, r2
 8007b24:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007b26:	931b      	str	r3, [sp, #108]	; 0x6c
 8007b28:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007b2a:	931c      	str	r3, [sp, #112]	; 0x70
 8007b2c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007b2e:	931d      	str	r3, [sp, #116]	; 0x74
 8007b30:	a819      	add	r0, sp, #100	; 0x64
 8007b32:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007b34:	931e      	str	r3, [sp, #120]	; 0x78
 8007b36:	f000 f9f9 	bl	8007f2c <mktime>
 8007b3a:	4605      	mov	r5, r0
 8007b3c:	a910      	add	r1, sp, #64	; 0x40
 8007b3e:	4620      	mov	r0, r4
 8007b40:	f000 f8b8 	bl	8007cb4 <HwClock::RtcGet(rtc_time*)>
 8007b44:	e9dd 3210 	ldrd	r3, r2, [sp, #64]	; 0x40
 8007b48:	fb08 3302 	mla	r3, r8, r2, r3
 8007b4c:	4599      	cmp	r9, r3
 8007b4e:	d0f5      	beq.n	8007b3c <HwClock::HcToSys()+0x5c>
 8007b50:	2100      	movs	r1, #0
 8007b52:	a803      	add	r0, sp, #12
 8007b54:	f000 fa36 	bl	8007fc4 <gettimeofday>
 8007b58:	9b01      	ldr	r3, [sp, #4]
 8007b5a:	9a03      	ldr	r2, [sp, #12]
 8007b5c:	9902      	ldr	r1, [sp, #8]
 8007b5e:	9505      	str	r5, [sp, #20]
 8007b60:	429a      	cmp	r2, r3
 8007b62:	9b04      	ldr	r3, [sp, #16]
 8007b64:	d113      	bne.n	8007b8e <HwClock::HcToSys()+0xae>
 8007b66:	1a5b      	subs	r3, r3, r1
 8007b68:	f5c3 2274 	rsb	r2, r3, #999424	; 0xf4000
 8007b6c:	f502 7210 	add.w	r2, r2, #576	; 0x240
 8007b70:	2100      	movs	r1, #0
 8007b72:	a805      	add	r0, sp, #20
 8007b74:	9206      	str	r2, [sp, #24]
 8007b76:	f000 fa4f 	bl	8008018 <settimeofday>
 8007b7a:	4b08      	ldr	r3, [pc, #32]	; (8007b9c <HwClock::HcToSys()+0xbc>)
 8007b7c:	6838      	ldr	r0, [r7, #0]
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	6063      	str	r3, [r4, #4]
 8007b82:	b10e      	cbz	r6, 8007b88 <HwClock::HcToSys()+0xa8>
 8007b84:	f7ff ff5a 	bl	8007a3c <Hardware::WatchdogInit()>
 8007b88:	b023      	add	sp, #140	; 0x8c
 8007b8a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007b8e:	1a5a      	subs	r2, r3, r1
 8007b90:	bf48      	it	mi
 8007b92:	1aca      	submi	r2, r1, r3
 8007b94:	e7ec      	b.n	8007b70 <HwClock::HcToSys()+0x90>
 8007b96:	bf00      	nop
 8007b98:	200017e0 	andcs	r1, r0, r0, ror #15
 8007b9c:	2000181c 	andcs	r1, r0, ip, lsl r8

08007ba0 <HwClock::Set(rtc_time const*)>:
 8007ba0:	b570      	push	{r4, r5, r6, lr}
 8007ba2:	7a86      	ldrb	r6, [r0, #10]
 8007ba4:	b090      	sub	sp, #64	; 0x40
 8007ba6:	4605      	mov	r5, r0
 8007ba8:	460c      	mov	r4, r1
 8007baa:	2e00      	cmp	r6, #0
 8007bac:	d02b      	beq.n	8007c06 <HwClock::Set(rtc_time const*)+0x66>
 8007bae:	2100      	movs	r1, #0
 8007bb0:	a801      	add	r0, sp, #4
 8007bb2:	f000 fa07 	bl	8007fc4 <gettimeofday>
 8007bb6:	4621      	mov	r1, r4
 8007bb8:	4628      	mov	r0, r5
 8007bba:	f000 f873 	bl	8007ca4 <HwClock::RtcSet(rtc_time const*)>
 8007bbe:	6823      	ldr	r3, [r4, #0]
 8007bc0:	9307      	str	r3, [sp, #28]
 8007bc2:	6863      	ldr	r3, [r4, #4]
 8007bc4:	9308      	str	r3, [sp, #32]
 8007bc6:	68a3      	ldr	r3, [r4, #8]
 8007bc8:	9309      	str	r3, [sp, #36]	; 0x24
 8007bca:	68e3      	ldr	r3, [r4, #12]
 8007bcc:	930a      	str	r3, [sp, #40]	; 0x28
 8007bce:	6923      	ldr	r3, [r4, #16]
 8007bd0:	930b      	str	r3, [sp, #44]	; 0x2c
 8007bd2:	a807      	add	r0, sp, #28
 8007bd4:	6963      	ldr	r3, [r4, #20]
 8007bd6:	930c      	str	r3, [sp, #48]	; 0x30
 8007bd8:	2400      	movs	r4, #0
 8007bda:	940f      	str	r4, [sp, #60]	; 0x3c
 8007bdc:	f000 f9a6 	bl	8007f2c <mktime>
 8007be0:	4621      	mov	r1, r4
 8007be2:	9003      	str	r0, [sp, #12]
 8007be4:	a805      	add	r0, sp, #20
 8007be6:	f000 f9ed 	bl	8007fc4 <gettimeofday>
 8007bea:	9906      	ldr	r1, [sp, #24]
 8007bec:	9b02      	ldr	r3, [sp, #8]
 8007bee:	1aca      	subs	r2, r1, r3
 8007bf0:	bf42      	ittt	mi
 8007bf2:	1a5b      	submi	r3, r3, r1
 8007bf4:	f5c3 2274 	rsbmi	r2, r3, #999424	; 0xf4000
 8007bf8:	f502 7210 	addmi.w	r2, r2, #576	; 0x240
 8007bfc:	2100      	movs	r1, #0
 8007bfe:	a803      	add	r0, sp, #12
 8007c00:	9204      	str	r2, [sp, #16]
 8007c02:	f000 fa09 	bl	8008018 <settimeofday>
 8007c06:	4630      	mov	r0, r6
 8007c08:	b010      	add	sp, #64	; 0x40
 8007c0a:	bd70      	pop	{r4, r5, r6, pc}

08007c0c <rtc_configuration()>:
 8007c0c:	b510      	push	{r4, lr}
 8007c0e:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8007c12:	f000 fdad 	bl	8008770 <rcu_osci_on>
 8007c16:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8007c1a:	f000 fd4f 	bl	80086bc <rcu_osci_stab_wait>
 8007c1e:	2801      	cmp	r0, #1
 8007c20:	4604      	mov	r4, r0
 8007c22:	d113      	bne.n	8007c4c <rtc_configuration()+0x40>
 8007c24:	f44f 7080 	mov.w	r0, #256	; 0x100
 8007c28:	f000 fd2e 	bl	8008688 <rcu_rtc_clock_config>
 8007c2c:	f640 000f 	movw	r0, #2063	; 0x80f
 8007c30:	f000 fcdc 	bl	80085ec <rcu_periph_clock_enable>
 8007c34:	f000 fe30 	bl	8008898 <rtc_register_sync_wait>
 8007c38:	f000 fe26 	bl	8008888 <rtc_lwoff_wait>
 8007c3c:	f647 70ff 	movw	r0, #32767	; 0x7fff
 8007c40:	f000 fe52 	bl	80088e8 <rtc_prescaler_set>
 8007c44:	f000 fe20 	bl	8008888 <rtc_lwoff_wait>
 8007c48:	4620      	mov	r0, r4
 8007c4a:	bd10      	pop	{r4, pc}
 8007c4c:	2000      	movs	r0, #0
 8007c4e:	e7fc      	b.n	8007c4a <rtc_configuration()+0x3e>

08007c50 <HwClock::RtcProbe()>:
 8007c50:	b538      	push	{r3, r4, r5, lr}
 8007c52:	4604      	mov	r4, r0
 8007c54:	2001      	movs	r0, #1
 8007c56:	f000 fb0d 	bl	8008274 <bkp_read_data>
 8007c5a:	f24a 55a5 	movw	r5, #42405	; 0xa5a5
 8007c5e:	42a8      	cmp	r0, r5
 8007c60:	d019      	beq.n	8007c96 <HwClock::RtcProbe()+0x46>
 8007c62:	f7ff ffd3 	bl	8007c0c <rtc_configuration()>
 8007c66:	b908      	cbnz	r0, 8007c6c <HwClock::RtcProbe()+0x1c>
 8007c68:	72a0      	strb	r0, [r4, #10]
 8007c6a:	bd38      	pop	{r3, r4, r5, pc}
 8007c6c:	f000 fe0c 	bl	8008888 <rtc_lwoff_wait>
 8007c70:	2000      	movs	r0, #0
 8007c72:	f000 f9e9 	bl	8008048 <time>
 8007c76:	f000 fe27 	bl	80088c8 <rtc_counter_set>
 8007c7a:	f000 fe05 	bl	8008888 <rtc_lwoff_wait>
 8007c7e:	4629      	mov	r1, r5
 8007c80:	2001      	movs	r0, #1
 8007c82:	f000 fae1 	bl	8008248 <bkp_write_data>
 8007c86:	2303      	movs	r3, #3
 8007c88:	7263      	strb	r3, [r4, #9]
 8007c8a:	2301      	movs	r3, #1
 8007c8c:	72a3      	strb	r3, [r4, #10]
 8007c8e:	4b04      	ldr	r3, [pc, #16]	; (8007ca0 <HwClock::RtcProbe()+0x50>)
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	6063      	str	r3, [r4, #4]
 8007c94:	e7e9      	b.n	8007c6a <HwClock::RtcProbe()+0x1a>
 8007c96:	f000 fdff 	bl	8008898 <rtc_register_sync_wait>
 8007c9a:	f000 fdf5 	bl	8008888 <rtc_lwoff_wait>
 8007c9e:	e7f2      	b.n	8007c86 <HwClock::RtcProbe()+0x36>
 8007ca0:	2000181c 	andcs	r1, r0, ip, lsl r8

08007ca4 <HwClock::RtcSet(rtc_time const*)>:
 8007ca4:	b508      	push	{r3, lr}
 8007ca6:	4608      	mov	r0, r1
 8007ca8:	f000 f940 	bl	8007f2c <mktime>
 8007cac:	f000 fe0c 	bl	80088c8 <rtc_counter_set>
 8007cb0:	2001      	movs	r0, #1
 8007cb2:	bd08      	pop	{r3, pc}

08007cb4 <HwClock::RtcGet(rtc_time*)>:
 8007cb4:	b513      	push	{r0, r1, r4, lr}
 8007cb6:	460c      	mov	r4, r1
 8007cb8:	f000 fdfc 	bl	80088b4 <rtc_counter_get>
 8007cbc:	9001      	str	r0, [sp, #4]
 8007cbe:	a801      	add	r0, sp, #4
 8007cc0:	f000 f8f0 	bl	8007ea4 <localtime>
 8007cc4:	1e61      	subs	r1, r4, #1
 8007cc6:	f100 0324 	add.w	r3, r0, #36	; 0x24
 8007cca:	4298      	cmp	r0, r3
 8007ccc:	d102      	bne.n	8007cd4 <HwClock::RtcGet(rtc_time*)+0x20>
 8007cce:	2001      	movs	r0, #1
 8007cd0:	b002      	add	sp, #8
 8007cd2:	bd10      	pop	{r4, pc}
 8007cd4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007cd8:	f801 2f01 	strb.w	r2, [r1, #1]!
 8007cdc:	e7f5      	b.n	8007cca <HwClock::RtcGet(rtc_time*)+0x16>

08007cde <operator delete(void*)>:
 8007cde:	f000 b851 	b.w	8007d84 <free>

08007ce2 <operator delete[](void*)>:
 8007ce2:	f000 b84f 	b.w	8007d84 <free>

08007ce6 <operator new(unsigned int)>:
 8007ce6:	f000 b803 	b.w	8007cf0 <malloc>

08007cea <operator new[](unsigned int)>:
 8007cea:	f000 b801 	b.w	8007cf0 <malloc>
	...

08007cf0 <malloc>:
 8007cf0:	b538      	push	{r3, r4, r5, lr}
 8007cf2:	4601      	mov	r1, r0
 8007cf4:	4604      	mov	r4, r0
 8007cf6:	481c      	ldr	r0, [pc, #112]	; (8007d68 <malloc+0x78>)
 8007cf8:	f7f9 fd94 	bl	8001824 <printf>
 8007cfc:	b17c      	cbz	r4, 8007d1e <malloc+0x2e>
 8007cfe:	4b1b      	ldr	r3, [pc, #108]	; (8007d6c <malloc+0x7c>)
 8007d00:	6818      	ldr	r0, [r3, #0]
 8007d02:	b978      	cbnz	r0, 8007d24 <malloc+0x34>
 8007d04:	4a1a      	ldr	r2, [pc, #104]	; (8007d70 <malloc+0x80>)
 8007d06:	481b      	ldr	r0, [pc, #108]	; (8007d74 <malloc+0x84>)
 8007d08:	6811      	ldr	r1, [r2, #0]
 8007d0a:	f104 031b 	add.w	r3, r4, #27
 8007d0e:	f023 030f 	bic.w	r3, r3, #15
 8007d12:	440b      	add	r3, r1
 8007d14:	4283      	cmp	r3, r0
 8007d16:	d921      	bls.n	8007d5c <malloc+0x6c>
 8007d18:	4817      	ldr	r0, [pc, #92]	; (8007d78 <malloc+0x88>)
 8007d1a:	f7f9 fd83 	bl	8001824 <printf>
 8007d1e:	2500      	movs	r5, #0
 8007d20:	4628      	mov	r0, r5
 8007d22:	bd38      	pop	{r3, r4, r5, pc}
 8007d24:	4284      	cmp	r4, r0
 8007d26:	d80a      	bhi.n	8007d3e <malloc+0x4e>
 8007d28:	685a      	ldr	r2, [r3, #4]
 8007d2a:	6899      	ldr	r1, [r3, #8]
 8007d2c:	3201      	adds	r2, #1
 8007d2e:	428a      	cmp	r2, r1
 8007d30:	605a      	str	r2, [r3, #4]
 8007d32:	d900      	bls.n	8007d36 <malloc+0x46>
 8007d34:	609a      	str	r2, [r3, #8]
 8007d36:	68d9      	ldr	r1, [r3, #12]
 8007d38:	b919      	cbnz	r1, 8007d42 <malloc+0x52>
 8007d3a:	4604      	mov	r4, r0
 8007d3c:	e7e2      	b.n	8007d04 <malloc+0x14>
 8007d3e:	3310      	adds	r3, #16
 8007d40:	e7de      	b.n	8007d00 <malloc+0x10>
 8007d42:	688a      	ldr	r2, [r1, #8]
 8007d44:	60da      	str	r2, [r3, #12]
 8007d46:	4604      	mov	r4, r0
 8007d48:	2300      	movs	r3, #0
 8007d4a:	f101 050c 	add.w	r5, r1, #12
 8007d4e:	608b      	str	r3, [r1, #8]
 8007d50:	4622      	mov	r2, r4
 8007d52:	462b      	mov	r3, r5
 8007d54:	4809      	ldr	r0, [pc, #36]	; (8007d7c <malloc+0x8c>)
 8007d56:	f7f9 fd65 	bl	8001824 <printf>
 8007d5a:	e7e1      	b.n	8007d20 <malloc+0x30>
 8007d5c:	6013      	str	r3, [r2, #0]
 8007d5e:	4b08      	ldr	r3, [pc, #32]	; (8007d80 <malloc+0x90>)
 8007d60:	e9c1 3400 	strd	r3, r4, [r1]
 8007d64:	e7f0      	b.n	8007d48 <malloc+0x58>
 8007d66:	bf00      	nop
 8007d68:	0800b81c 	stmdaeq	r0, {r2, r3, r4, fp, ip, sp, pc}
 8007d6c:	20000010 	andcs	r0, r0, r0, lsl r0
 8007d70:	2000000c 	andcs	r0, r0, ip
 8007d74:	2000b000 	andcs	fp, r0, r0
 8007d78:	0800b828 	stmdaeq	r0, {r3, r5, fp, ip, sp, pc}
 8007d7c:	0800b844 	stmdaeq	r0, {r2, r6, fp, ip, sp, pc}
 8007d80:	424c4d43 	submi	r4, ip, #4288	; 0x10c0

08007d84 <free>:
 8007d84:	b538      	push	{r3, r4, r5, lr}
 8007d86:	4604      	mov	r4, r0
 8007d88:	b1c8      	cbz	r0, 8007dbe <free+0x3a>
 8007d8a:	f1a0 050c 	sub.w	r5, r0, #12
 8007d8e:	4602      	mov	r2, r0
 8007d90:	4629      	mov	r1, r5
 8007d92:	480c      	ldr	r0, [pc, #48]	; (8007dc4 <free+0x40>)
 8007d94:	f7f9 fd46 	bl	8001824 <printf>
 8007d98:	f854 2c0c 	ldr.w	r2, [r4, #-12]
 8007d9c:	4b0a      	ldr	r3, [pc, #40]	; (8007dc8 <free+0x44>)
 8007d9e:	429a      	cmp	r2, r3
 8007da0:	d10d      	bne.n	8007dbe <free+0x3a>
 8007da2:	4b0a      	ldr	r3, [pc, #40]	; (8007dcc <free+0x48>)
 8007da4:	681a      	ldr	r2, [r3, #0]
 8007da6:	b152      	cbz	r2, 8007dbe <free+0x3a>
 8007da8:	f854 1c08 	ldr.w	r1, [r4, #-8]
 8007dac:	4291      	cmp	r1, r2
 8007dae:	d107      	bne.n	8007dc0 <free+0x3c>
 8007db0:	68da      	ldr	r2, [r3, #12]
 8007db2:	f844 2c04 	str.w	r2, [r4, #-4]
 8007db6:	685a      	ldr	r2, [r3, #4]
 8007db8:	60dd      	str	r5, [r3, #12]
 8007dba:	3a01      	subs	r2, #1
 8007dbc:	605a      	str	r2, [r3, #4]
 8007dbe:	bd38      	pop	{r3, r4, r5, pc}
 8007dc0:	3310      	adds	r3, #16
 8007dc2:	e7ef      	b.n	8007da4 <free+0x20>
 8007dc4:	0800b86f 	stmdaeq	r0, {r0, r1, r2, r3, r5, r6, fp, ip, sp, pc}
 8007dc8:	424c4d43 	submi	r4, ip, #4288	; 0x10c0
 8007dcc:	20000010 	andcs	r0, r0, r0, lsl r0

08007dd0 <memcpy>:
 8007dd0:	b510      	push	{r4, lr}
 8007dd2:	1e43      	subs	r3, r0, #1
 8007dd4:	440a      	add	r2, r1
 8007dd6:	4291      	cmp	r1, r2
 8007dd8:	d100      	bne.n	8007ddc <memcpy+0xc>
 8007dda:	bd10      	pop	{r4, pc}
 8007ddc:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007de0:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007de4:	e7f7      	b.n	8007dd6 <memcpy+0x6>

08007de6 <memmove>:
 8007de6:	4288      	cmp	r0, r1
 8007de8:	b510      	push	{r4, lr}
 8007dea:	eb01 0302 	add.w	r3, r1, r2
 8007dee:	d208      	bcs.n	8007e02 <memmove+0x1c>
 8007df0:	1e42      	subs	r2, r0, #1
 8007df2:	4299      	cmp	r1, r3
 8007df4:	d100      	bne.n	8007df8 <memmove+0x12>
 8007df6:	bd10      	pop	{r4, pc}
 8007df8:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007dfc:	f802 4f01 	strb.w	r4, [r2, #1]!
 8007e00:	e7f7      	b.n	8007df2 <memmove+0xc>
 8007e02:	4402      	add	r2, r0
 8007e04:	4601      	mov	r1, r0
 8007e06:	428a      	cmp	r2, r1
 8007e08:	d0f5      	beq.n	8007df6 <memmove+0x10>
 8007e0a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007e0e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007e12:	e7f8      	b.n	8007e06 <memmove+0x20>

08007e14 <memset>:
 8007e14:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007e16:	b1c2      	cbz	r2, 8007e4a <memset+0x36>
 8007e18:	b2c9      	uxtb	r1, r1
 8007e1a:	4603      	mov	r3, r0
 8007e1c:	075c      	lsls	r4, r3, #29
 8007e1e:	d110      	bne.n	8007e42 <memset+0x2e>
 8007e20:	ea41 2401 	orr.w	r4, r1, r1, lsl #8
 8007e24:	ea44 4704 	orr.w	r7, r4, r4, lsl #16
 8007e28:	f022 0407 	bic.w	r4, r2, #7
 8007e2c:	463d      	mov	r5, r7
 8007e2e:	441c      	add	r4, r3
 8007e30:	461e      	mov	r6, r3
 8007e32:	42a6      	cmp	r6, r4
 8007e34:	d10a      	bne.n	8007e4c <memset+0x38>
 8007e36:	441a      	add	r2, r3
 8007e38:	4294      	cmp	r4, r2
 8007e3a:	d006      	beq.n	8007e4a <memset+0x36>
 8007e3c:	f804 1b01 	strb.w	r1, [r4], #1
 8007e40:	e7fa      	b.n	8007e38 <memset+0x24>
 8007e42:	3a01      	subs	r2, #1
 8007e44:	f803 1b01 	strb.w	r1, [r3], #1
 8007e48:	d1e8      	bne.n	8007e1c <memset+0x8>
 8007e4a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007e4c:	f846 7b08 	str.w	r7, [r6], #8
 8007e50:	f846 5c04 	str.w	r5, [r6, #-4]
 8007e54:	e7ed      	b.n	8007e32 <memset+0x1e>

08007e56 <isleapyear>:
 8007e56:	2264      	movs	r2, #100	; 0x64
 8007e58:	fb90 f3f2 	sdiv	r3, r0, r2
 8007e5c:	fb02 0313 	mls	r3, r2, r3, r0
 8007e60:	b94b      	cbnz	r3, 8007e76 <isleapyear+0x20>
 8007e62:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8007e66:	fb90 f2f3 	sdiv	r2, r0, r3
 8007e6a:	fb03 0012 	mls	r0, r3, r2, r0
 8007e6e:	fab0 f080 	clz	r0, r0
 8007e72:	0940      	lsrs	r0, r0, #5
 8007e74:	4770      	bx	lr
 8007e76:	f010 0f03 	tst.w	r0, #3
 8007e7a:	bf0c      	ite	eq
 8007e7c:	2001      	moveq	r0, #1
 8007e7e:	2000      	movne	r0, #0
 8007e80:	4770      	bx	lr
	...

08007e84 <getdaysofmonth>:
 8007e84:	b510      	push	{r4, lr}
 8007e86:	4604      	mov	r4, r0
 8007e88:	2c01      	cmp	r4, #1
 8007e8a:	4608      	mov	r0, r1
 8007e8c:	d102      	bne.n	8007e94 <getdaysofmonth+0x10>
 8007e8e:	f7ff ffe2 	bl	8007e56 <isleapyear>
 8007e92:	b918      	cbnz	r0, 8007e9c <getdaysofmonth+0x18>
 8007e94:	4b02      	ldr	r3, [pc, #8]	; (8007ea0 <getdaysofmonth+0x1c>)
 8007e96:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8007e9a:	bd10      	pop	{r4, pc}
 8007e9c:	201d      	movs	r0, #29
 8007e9e:	e7fc      	b.n	8007e9a <getdaysofmonth+0x16>
 8007ea0:	0800b898 	stmdaeq	r0, {r3, r4, r7, fp, ip, sp, pc}

08007ea4 <localtime>:
 8007ea4:	b570      	push	{r4, r5, r6, lr}
 8007ea6:	2800      	cmp	r0, #0
 8007ea8:	d03c      	beq.n	8007f24 <localtime+0x80>
 8007eaa:	6803      	ldr	r3, [r0, #0]
 8007eac:	4d1e      	ldr	r5, [pc, #120]	; (8007f28 <localtime+0x84>)
 8007eae:	213c      	movs	r1, #60	; 0x3c
 8007eb0:	fb93 f2f1 	sdiv	r2, r3, r1
 8007eb4:	fb01 3312 	mls	r3, r1, r2, r3
 8007eb8:	602b      	str	r3, [r5, #0]
 8007eba:	fb92 f3f1 	sdiv	r3, r2, r1
 8007ebe:	fb01 2213 	mls	r2, r1, r3, r2
 8007ec2:	606a      	str	r2, [r5, #4]
 8007ec4:	2218      	movs	r2, #24
 8007ec6:	fb93 f4f2 	sdiv	r4, r3, r2
 8007eca:	fb02 3314 	mls	r3, r2, r4, r3
 8007ece:	60ab      	str	r3, [r5, #8]
 8007ed0:	1d22      	adds	r2, r4, #4
 8007ed2:	2307      	movs	r3, #7
 8007ed4:	fb92 f3f3 	sdiv	r3, r2, r3
 8007ed8:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8007edc:	1ad2      	subs	r2, r2, r3
 8007ede:	61aa      	str	r2, [r5, #24]
 8007ee0:	f240 71b2 	movw	r1, #1970	; 0x7b2
 8007ee4:	f240 166d 	movw	r6, #365	; 0x16d
 8007ee8:	4608      	mov	r0, r1
 8007eea:	f7ff ffb4 	bl	8007e56 <isleapyear>
 8007eee:	2800      	cmp	r0, #0
 8007ef0:	bf14      	ite	ne
 8007ef2:	f44f 73b7 	movne.w	r3, #366	; 0x16e
 8007ef6:	4633      	moveq	r3, r6
 8007ef8:	429c      	cmp	r4, r3
 8007efa:	db02      	blt.n	8007f02 <localtime+0x5e>
 8007efc:	1ae4      	subs	r4, r4, r3
 8007efe:	3101      	adds	r1, #1
 8007f00:	e7f2      	b.n	8007ee8 <localtime+0x44>
 8007f02:	f2a1 736c 	subw	r3, r1, #1900	; 0x76c
 8007f06:	616b      	str	r3, [r5, #20]
 8007f08:	61ec      	str	r4, [r5, #28]
 8007f0a:	2600      	movs	r6, #0
 8007f0c:	4630      	mov	r0, r6
 8007f0e:	f7ff ffb9 	bl	8007e84 <getdaysofmonth>
 8007f12:	4284      	cmp	r4, r0
 8007f14:	db02      	blt.n	8007f1c <localtime+0x78>
 8007f16:	1a24      	subs	r4, r4, r0
 8007f18:	3601      	adds	r6, #1
 8007f1a:	e7f7      	b.n	8007f0c <localtime+0x68>
 8007f1c:	3401      	adds	r4, #1
 8007f1e:	4802      	ldr	r0, [pc, #8]	; (8007f28 <localtime+0x84>)
 8007f20:	612e      	str	r6, [r5, #16]
 8007f22:	60ec      	str	r4, [r5, #12]
 8007f24:	bd70      	pop	{r4, r5, r6, pc}
 8007f26:	bf00      	nop
 8007f28:	200017e8 	andcs	r1, r0, r8, ror #15

08007f2c <mktime>:
 8007f2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007f30:	4604      	mov	r4, r0
 8007f32:	2800      	cmp	r0, #0
 8007f34:	d043      	beq.n	8007fbe <mktime+0x92>
 8007f36:	6941      	ldr	r1, [r0, #20]
 8007f38:	f1a1 0346 	sub.w	r3, r1, #70	; 0x46
 8007f3c:	2b45      	cmp	r3, #69	; 0x45
 8007f3e:	d83e      	bhi.n	8007fbe <mktime+0x92>
 8007f40:	2600      	movs	r6, #0
 8007f42:	f240 75b2 	movw	r5, #1970	; 0x7b2
 8007f46:	f201 776b 	addw	r7, r1, #1899	; 0x76b
 8007f4a:	f240 186d 	movw	r8, #365	; 0x16d
 8007f4e:	42af      	cmp	r7, r5
 8007f50:	da24      	bge.n	8007f9c <mktime+0x70>
 8007f52:	6927      	ldr	r7, [r4, #16]
 8007f54:	2f0b      	cmp	r7, #11
 8007f56:	d832      	bhi.n	8007fbe <mktime+0x92>
 8007f58:	2500      	movs	r5, #0
 8007f5a:	42af      	cmp	r7, r5
 8007f5c:	d129      	bne.n	8007fb2 <mktime+0x86>
 8007f5e:	68e5      	ldr	r5, [r4, #12]
 8007f60:	2d00      	cmp	r5, #0
 8007f62:	dd2c      	ble.n	8007fbe <mktime+0x92>
 8007f64:	4638      	mov	r0, r7
 8007f66:	f7ff ff8d 	bl	8007e84 <getdaysofmonth>
 8007f6a:	4285      	cmp	r5, r0
 8007f6c:	dc27      	bgt.n	8007fbe <mktime+0x92>
 8007f6e:	3d01      	subs	r5, #1
 8007f70:	2318      	movs	r3, #24
 8007f72:	4435      	add	r5, r6
 8007f74:	435d      	muls	r5, r3
 8007f76:	68a3      	ldr	r3, [r4, #8]
 8007f78:	2b17      	cmp	r3, #23
 8007f7a:	d820      	bhi.n	8007fbe <mktime+0x92>
 8007f7c:	442b      	add	r3, r5
 8007f7e:	213c      	movs	r1, #60	; 0x3c
 8007f80:	fb01 f203 	mul.w	r2, r1, r3
 8007f84:	6863      	ldr	r3, [r4, #4]
 8007f86:	2b3b      	cmp	r3, #59	; 0x3b
 8007f88:	d819      	bhi.n	8007fbe <mktime+0x92>
 8007f8a:	6820      	ldr	r0, [r4, #0]
 8007f8c:	4413      	add	r3, r2
 8007f8e:	283b      	cmp	r0, #59	; 0x3b
 8007f90:	fb01 f303 	mul.w	r3, r1, r3
 8007f94:	d813      	bhi.n	8007fbe <mktime+0x92>
 8007f96:	4418      	add	r0, r3
 8007f98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007f9c:	4628      	mov	r0, r5
 8007f9e:	f7ff ff5a 	bl	8007e56 <isleapyear>
 8007fa2:	2800      	cmp	r0, #0
 8007fa4:	bf14      	ite	ne
 8007fa6:	f44f 73b7 	movne.w	r3, #366	; 0x16e
 8007faa:	4643      	moveq	r3, r8
 8007fac:	441e      	add	r6, r3
 8007fae:	3501      	adds	r5, #1
 8007fb0:	e7cd      	b.n	8007f4e <mktime+0x22>
 8007fb2:	4628      	mov	r0, r5
 8007fb4:	f7ff ff66 	bl	8007e84 <getdaysofmonth>
 8007fb8:	3501      	adds	r5, #1
 8007fba:	4406      	add	r6, r0
 8007fbc:	e7cd      	b.n	8007f5a <mktime+0x2e>
 8007fbe:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007fc2:	e7e9      	b.n	8007f98 <mktime+0x6c>

08007fc4 <gettimeofday>:
 8007fc4:	b538      	push	{r3, r4, r5, lr}
 8007fc6:	4a10      	ldr	r2, [pc, #64]	; (8008008 <gettimeofday+0x44>)
 8007fc8:	4b10      	ldr	r3, [pc, #64]	; (800800c <gettimeofday+0x48>)
 8007fca:	6814      	ldr	r4, [r2, #0]
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	6013      	str	r3, [r2, #0]
 8007fd0:	429c      	cmp	r4, r3
 8007fd2:	bf2c      	ite	cs
 8007fd4:	1ae4      	subcs	r4, r4, r3
 8007fd6:	1b1c      	subcc	r4, r3, r4
 8007fd8:	4b0d      	ldr	r3, [pc, #52]	; (8008010 <gettimeofday+0x4c>)
 8007fda:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8007fde:	4354      	muls	r4, r2
 8007fe0:	e9d3 2100 	ldrd	r2, r1, [r3]
 8007fe4:	18a4      	adds	r4, r4, r2
 8007fe6:	f141 0100 	adc.w	r1, r1, #0
 8007fea:	4605      	mov	r5, r0
 8007fec:	e9c3 4100 	strd	r4, r1, [r3]
 8007ff0:	4a08      	ldr	r2, [pc, #32]	; (8008014 <gettimeofday+0x50>)
 8007ff2:	2300      	movs	r3, #0
 8007ff4:	4620      	mov	r0, r4
 8007ff6:	f7f8 f927 	bl	8000248 <__aeabi_uldivmod>
 8007ffa:	4b06      	ldr	r3, [pc, #24]	; (8008014 <gettimeofday+0x50>)
 8007ffc:	6028      	str	r0, [r5, #0]
 8007ffe:	fb03 4410 	mls	r4, r3, r0, r4
 8008002:	606c      	str	r4, [r5, #4]
 8008004:	2000      	movs	r0, #0
 8008006:	bd38      	pop	{r3, r4, r5, pc}
 8008008:	20001818 	andcs	r1, r0, r8, lsl r8
 800800c:	2000181c 	andcs	r1, r0, ip, lsl r8
 8008010:	20001810 	andcs	r1, r0, r0, lsl r8
 8008014:	000f4240 	andeq	r4, pc, r0, asr #4

08008018 <settimeofday>:
 8008018:	4b07      	ldr	r3, [pc, #28]	; (8008038 <settimeofday+0x20>)
 800801a:	4908      	ldr	r1, [pc, #32]	; (800803c <settimeofday+0x24>)
 800801c:	681a      	ldr	r2, [r3, #0]
 800801e:	4b08      	ldr	r3, [pc, #32]	; (8008040 <settimeofday+0x28>)
 8008020:	b510      	push	{r4, lr}
 8008022:	601a      	str	r2, [r3, #0]
 8008024:	6843      	ldr	r3, [r0, #4]
 8008026:	6804      	ldr	r4, [r0, #0]
 8008028:	4806      	ldr	r0, [pc, #24]	; (8008044 <settimeofday+0x2c>)
 800802a:	17da      	asrs	r2, r3, #31
 800802c:	fbc4 3200 	smlal	r3, r2, r4, r0
 8008030:	e9c1 3200 	strd	r3, r2, [r1]
 8008034:	2000      	movs	r0, #0
 8008036:	bd10      	pop	{r4, pc}
 8008038:	2000181c 	andcs	r1, r0, ip, lsl r8
 800803c:	20001810 	andcs	r1, r0, r0, lsl r8
 8008040:	20001818 	andcs	r1, r0, r8, lsl r8
 8008044:	000f4240 	andeq	r4, pc, r0, asr #4

08008048 <time>:
 8008048:	b513      	push	{r0, r1, r4, lr}
 800804a:	4604      	mov	r4, r0
 800804c:	2100      	movs	r1, #0
 800804e:	4668      	mov	r0, sp
 8008050:	f7ff ffb8 	bl	8007fc4 <gettimeofday>
 8008054:	9800      	ldr	r0, [sp, #0]
 8008056:	b104      	cbz	r4, 800805a <time+0x12>
 8008058:	6020      	str	r0, [r4, #0]
 800805a:	b002      	add	sp, #8
 800805c:	bd10      	pop	{r4, pc}
	...

08008060 <uart0_init>:
 8008060:	b507      	push	{r0, r1, r2, lr}
 8008062:	2301      	movs	r3, #1
 8008064:	9300      	str	r3, [sp, #0]
 8008066:	4805      	ldr	r0, [pc, #20]	; (800807c <uart0_init+0x1c>)
 8008068:	2300      	movs	r3, #0
 800806a:	2208      	movs	r2, #8
 800806c:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
 8008070:	f001 f88e 	bl	8009190 <gd32_uart_begin>
 8008074:	b003      	add	sp, #12
 8008076:	f85d fb04 	ldr.w	pc, [sp], #4
 800807a:	bf00      	nop
 800807c:	40013800 	andmi	r3, r1, r0, lsl #16

08008080 <uart0_putc>:
 8008080:	280a      	cmp	r0, #10
 8008082:	b538      	push	{r3, r4, r5, lr}
 8008084:	4604      	mov	r4, r0
 8008086:	d10a      	bne.n	800809e <uart0_putc+0x1e>
 8008088:	4d0b      	ldr	r5, [pc, #44]	; (80080b8 <uart0_putc+0x38>)
 800808a:	2107      	movs	r1, #7
 800808c:	4628      	mov	r0, r5
 800808e:	f000 fdbf 	bl	8008c10 <usart_flag_get>
 8008092:	2800      	cmp	r0, #0
 8008094:	d0f9      	beq.n	800808a <uart0_putc+0xa>
 8008096:	4b09      	ldr	r3, [pc, #36]	; (80080bc <uart0_putc+0x3c>)
 8008098:	220d      	movs	r2, #13
 800809a:	f8c3 2804 	str.w	r2, [r3, #2052]	; 0x804
 800809e:	4d06      	ldr	r5, [pc, #24]	; (80080b8 <uart0_putc+0x38>)
 80080a0:	2107      	movs	r1, #7
 80080a2:	4628      	mov	r0, r5
 80080a4:	f000 fdb4 	bl	8008c10 <usart_flag_get>
 80080a8:	2800      	cmp	r0, #0
 80080aa:	d0f9      	beq.n	80080a0 <uart0_putc+0x20>
 80080ac:	4b03      	ldr	r3, [pc, #12]	; (80080bc <uart0_putc+0x3c>)
 80080ae:	b2e4      	uxtb	r4, r4
 80080b0:	f8c3 4804 	str.w	r4, [r3, #2052]	; 0x804
 80080b4:	bd38      	pop	{r3, r4, r5, pc}
 80080b6:	bf00      	nop
 80080b8:	40013800 	andmi	r3, r1, r0, lsl #16
 80080bc:	40013000 	andmi	r3, r1, r0

080080c0 <uart0_puts>:
 80080c0:	b510      	push	{r4, lr}
 80080c2:	1e44      	subs	r4, r0, #1
 80080c4:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 80080c8:	b903      	cbnz	r3, 80080cc <uart0_puts+0xc>
 80080ca:	bd10      	pop	{r4, pc}
 80080cc:	2b0a      	cmp	r3, #10
 80080ce:	d102      	bne.n	80080d6 <uart0_puts+0x16>
 80080d0:	200d      	movs	r0, #13
 80080d2:	f7ff ffd5 	bl	8008080 <uart0_putc>
 80080d6:	7820      	ldrb	r0, [r4, #0]
 80080d8:	f7ff ffd2 	bl	8008080 <uart0_putc>
 80080dc:	e7f2      	b.n	80080c4 <uart0_puts+0x4>
	...

080080e0 <systick_config>:
 80080e0:	4b0c      	ldr	r3, [pc, #48]	; (8008114 <systick_config+0x34>)
 80080e2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	fbb3 f3f2 	udiv	r3, r3, r2
 80080ec:	3b01      	subs	r3, #1
 80080ee:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80080f2:	d20d      	bcs.n	8008110 <systick_config+0x30>
 80080f4:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
 80080f8:	21f0      	movs	r1, #240	; 0xf0
 80080fa:	6153      	str	r3, [r2, #20]
 80080fc:	4b06      	ldr	r3, [pc, #24]	; (8008118 <systick_config+0x38>)
 80080fe:	2007      	movs	r0, #7
 8008100:	f883 1023 	strb.w	r1, [r3, #35]	; 0x23
 8008104:	2100      	movs	r1, #0
 8008106:	6191      	str	r1, [r2, #24]
 8008108:	6110      	str	r0, [r2, #16]
 800810a:	f883 1023 	strb.w	r1, [r3, #35]	; 0x23
 800810e:	4770      	bx	lr
 8008110:	e7fe      	b.n	8008110 <systick_config+0x30>
 8008112:	bf00      	nop
 8008114:	200000e0 	andcs	r0, r0, r0, ror #1
 8008118:	e000ed00 	and	lr, r0, r0, lsl #26

0800811c <SysTick_Handler>:
 800811c:	4a02      	ldr	r2, [pc, #8]	; (8008128 <SysTick_Handler+0xc>)
 800811e:	6813      	ldr	r3, [r2, #0]
 8008120:	3301      	adds	r3, #1
 8008122:	6013      	str	r3, [r2, #0]
 8008124:	4770      	bx	lr
 8008126:	bf00      	nop
 8008128:	2000181c 	andcs	r1, r0, ip, lsl r8

0800812c <SystemInit>:
 800812c:	4a43      	ldr	r2, [pc, #268]	; (800823c <SystemInit+0x110>)
 800812e:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8008132:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008136:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 800813a:	4b41      	ldr	r3, [pc, #260]	; (8008240 <SystemInit+0x114>)
 800813c:	681a      	ldr	r2, [r3, #0]
 800813e:	f042 0201 	orr.w	r2, r2, #1
 8008142:	601a      	str	r2, [r3, #0]
 8008144:	685a      	ldr	r2, [r3, #4]
 8008146:	b082      	sub	sp, #8
 8008148:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800814c:	605a      	str	r2, [r3, #4]
 800814e:	2200      	movs	r2, #0
 8008150:	9201      	str	r2, [sp, #4]
 8008152:	f644 611f 	movw	r1, #19999	; 0x4e1f
 8008156:	9a01      	ldr	r2, [sp, #4]
 8008158:	428a      	cmp	r2, r1
 800815a:	d922      	bls.n	80081a2 <SystemInit+0x76>
 800815c:	685a      	ldr	r2, [r3, #4]
 800815e:	f022 0203 	bic.w	r2, r2, #3
 8008162:	605a      	str	r2, [r3, #4]
 8008164:	681a      	ldr	r2, [r3, #0]
 8008166:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 800816a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800816e:	601a      	str	r2, [r3, #0]
 8008170:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8008174:	609a      	str	r2, [r3, #8]
 8008176:	681a      	ldr	r2, [r3, #0]
 8008178:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800817c:	601a      	str	r2, [r3, #0]
 800817e:	2200      	movs	r2, #0
 8008180:	605a      	str	r2, [r3, #4]
 8008182:	62da      	str	r2, [r3, #44]	; 0x2c
 8008184:	681a      	ldr	r2, [r3, #0]
 8008186:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800818a:	601a      	str	r2, [r3, #0]
 800818c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008190:	6819      	ldr	r1, [r3, #0]
 8008192:	0388      	lsls	r0, r1, #14
 8008194:	d401      	bmi.n	800819a <SystemInit+0x6e>
 8008196:	3a01      	subs	r2, #1
 8008198:	d1fa      	bne.n	8008190 <SystemInit+0x64>
 800819a:	681a      	ldr	r2, [r3, #0]
 800819c:	0391      	lsls	r1, r2, #14
 800819e:	d404      	bmi.n	80081aa <SystemInit+0x7e>
 80081a0:	e7fe      	b.n	80081a0 <SystemInit+0x74>
 80081a2:	9a01      	ldr	r2, [sp, #4]
 80081a4:	3201      	adds	r2, #1
 80081a6:	9201      	str	r2, [sp, #4]
 80081a8:	e7d5      	b.n	8008156 <SystemInit+0x2a>
 80081aa:	69da      	ldr	r2, [r3, #28]
 80081ac:	4925      	ldr	r1, [pc, #148]	; (8008244 <SystemInit+0x118>)
 80081ae:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80081b2:	61da      	str	r2, [r3, #28]
 80081b4:	680a      	ldr	r2, [r1, #0]
 80081b6:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 80081ba:	600a      	str	r2, [r1, #0]
 80081bc:	685a      	ldr	r2, [r3, #4]
 80081be:	605a      	str	r2, [r3, #4]
 80081c0:	685a      	ldr	r2, [r3, #4]
 80081c2:	605a      	str	r2, [r3, #4]
 80081c4:	685a      	ldr	r2, [r3, #4]
 80081c6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80081ca:	605a      	str	r2, [r3, #4]
 80081cc:	685a      	ldr	r2, [r3, #4]
 80081ce:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 80081d2:	605a      	str	r2, [r3, #4]
 80081d4:	685a      	ldr	r2, [r3, #4]
 80081d6:	f442 3240 	orr.w	r2, r2, #196608	; 0x30000
 80081da:	605a      	str	r2, [r3, #4]
 80081dc:	685a      	ldr	r2, [r3, #4]
 80081de:	f022 4290 	bic.w	r2, r2, #1207959552	; 0x48000000
 80081e2:	f422 1270 	bic.w	r2, r2, #3932160	; 0x3c0000
 80081e6:	605a      	str	r2, [r3, #4]
 80081e8:	685a      	ldr	r2, [r3, #4]
 80081ea:	f042 6203 	orr.w	r2, r2, #137363456	; 0x8300000
 80081ee:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80081f2:	605a      	str	r2, [r3, #4]
 80081f4:	681a      	ldr	r2, [r3, #0]
 80081f6:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 80081fa:	601a      	str	r2, [r3, #0]
 80081fc:	681a      	ldr	r2, [r3, #0]
 80081fe:	0192      	lsls	r2, r2, #6
 8008200:	d5fc      	bpl.n	80081fc <SystemInit+0xd0>
 8008202:	680a      	ldr	r2, [r1, #0]
 8008204:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8008208:	600a      	str	r2, [r1, #0]
 800820a:	4a0e      	ldr	r2, [pc, #56]	; (8008244 <SystemInit+0x118>)
 800820c:	6851      	ldr	r1, [r2, #4]
 800820e:	03c8      	lsls	r0, r1, #15
 8008210:	d5fc      	bpl.n	800820c <SystemInit+0xe0>
 8008212:	6811      	ldr	r1, [r2, #0]
 8008214:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
 8008218:	6011      	str	r1, [r2, #0]
 800821a:	6851      	ldr	r1, [r2, #4]
 800821c:	0389      	lsls	r1, r1, #14
 800821e:	d5fc      	bpl.n	800821a <SystemInit+0xee>
 8008220:	685a      	ldr	r2, [r3, #4]
 8008222:	f022 0203 	bic.w	r2, r2, #3
 8008226:	605a      	str	r2, [r3, #4]
 8008228:	685a      	ldr	r2, [r3, #4]
 800822a:	f042 0202 	orr.w	r2, r2, #2
 800822e:	605a      	str	r2, [r3, #4]
 8008230:	685a      	ldr	r2, [r3, #4]
 8008232:	0712      	lsls	r2, r2, #28
 8008234:	d5fc      	bpl.n	8008230 <SystemInit+0x104>
 8008236:	b002      	add	sp, #8
 8008238:	4770      	bx	lr
 800823a:	bf00      	nop
 800823c:	e000ed00 	and	lr, r0, r0, lsl #26
 8008240:	40021000 	andmi	r1, r2, r0
 8008244:	40007000 	andmi	r7, r0, r0

08008248 <bkp_write_data>:
 8008248:	f1a0 030b 	sub.w	r3, r0, #11
 800824c:	2b1f      	cmp	r3, #31
 800824e:	d804      	bhi.n	800825a <bkp_write_data+0x12>
 8008250:	4b07      	ldr	r3, [pc, #28]	; (8008270 <bkp_write_data+0x28>)
 8008252:	4403      	add	r3, r0
 8008254:	009b      	lsls	r3, r3, #2
 8008256:	8019      	strh	r1, [r3, #0]
 8008258:	4770      	bx	lr
 800825a:	1e43      	subs	r3, r0, #1
 800825c:	2b09      	cmp	r3, #9
 800825e:	bf9f      	itttt	ls
 8008260:	f100 5080 	addls.w	r0, r0, #268435456	; 0x10000000
 8008264:	f500 50d8 	addls.w	r0, r0, #6912	; 0x1b00
 8008268:	0080      	lslls	r0, r0, #2
 800826a:	8001      	strhls	r1, [r0, #0]
 800826c:	4770      	bx	lr
 800826e:	bf00      	nop
 8008270:	10001b05 	andne	r1, r0, r5, lsl #22

08008274 <bkp_read_data>:
 8008274:	f1a0 030b 	sub.w	r3, r0, #11
 8008278:	2b1f      	cmp	r3, #31
 800827a:	d805      	bhi.n	8008288 <bkp_read_data+0x14>
 800827c:	4b08      	ldr	r3, [pc, #32]	; (80082a0 <bkp_read_data+0x2c>)
 800827e:	4403      	add	r3, r0
 8008280:	009b      	lsls	r3, r3, #2
 8008282:	8818      	ldrh	r0, [r3, #0]
 8008284:	b280      	uxth	r0, r0
 8008286:	4770      	bx	lr
 8008288:	1e43      	subs	r3, r0, #1
 800828a:	2b09      	cmp	r3, #9
 800828c:	d806      	bhi.n	800829c <bkp_read_data+0x28>
 800828e:	f100 5080 	add.w	r0, r0, #268435456	; 0x10000000
 8008292:	f500 50d8 	add.w	r0, r0, #6912	; 0x1b00
 8008296:	0080      	lsls	r0, r0, #2
 8008298:	8800      	ldrh	r0, [r0, #0]
 800829a:	e7f3      	b.n	8008284 <bkp_read_data+0x10>
 800829c:	2000      	movs	r0, #0
 800829e:	4770      	bx	lr
 80082a0:	10001b05 	andne	r1, r0, r5, lsl #22

080082a4 <dma_deinit>:
 80082a4:	4b0c      	ldr	r3, [pc, #48]	; (80082d8 <dma_deinit+0x34>)
 80082a6:	4298      	cmp	r0, r3
 80082a8:	d102      	bne.n	80082b0 <dma_deinit+0xc>
 80082aa:	2904      	cmp	r1, #4
 80082ac:	d900      	bls.n	80082b0 <dma_deinit+0xc>
 80082ae:	e7fe      	b.n	80082ae <dma_deinit+0xa>
 80082b0:	2314      	movs	r3, #20
 80082b2:	fb03 0301 	mla	r3, r3, r1, r0
 80082b6:	0089      	lsls	r1, r1, #2
 80082b8:	689a      	ldr	r2, [r3, #8]
 80082ba:	f022 0201 	bic.w	r2, r2, #1
 80082be:	609a      	str	r2, [r3, #8]
 80082c0:	2200      	movs	r2, #0
 80082c2:	609a      	str	r2, [r3, #8]
 80082c4:	60da      	str	r2, [r3, #12]
 80082c6:	611a      	str	r2, [r3, #16]
 80082c8:	615a      	str	r2, [r3, #20]
 80082ca:	6842      	ldr	r2, [r0, #4]
 80082cc:	230f      	movs	r3, #15
 80082ce:	408b      	lsls	r3, r1
 80082d0:	4313      	orrs	r3, r2
 80082d2:	6043      	str	r3, [r0, #4]
 80082d4:	4770      	bx	lr
 80082d6:	bf00      	nop
 80082d8:	40020400 	andmi	r0, r2, r0, lsl #8

080082dc <dma_struct_para_init>:
 80082dc:	b900      	cbnz	r0, 80082e0 <dma_struct_para_init+0x4>
 80082de:	e7fe      	b.n	80082de <dma_struct_para_init+0x2>
 80082e0:	2300      	movs	r3, #0
 80082e2:	e9c0 3300 	strd	r3, r3, [r0]
 80082e6:	e9c0 3302 	strd	r3, r3, [r0, #8]
 80082ea:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80082ee:	8303      	strh	r3, [r0, #24]
 80082f0:	7683      	strb	r3, [r0, #26]
 80082f2:	4770      	bx	lr

080082f4 <dma_init>:
 80082f4:	4b1b      	ldr	r3, [pc, #108]	; (8008364 <dma_init+0x70>)
 80082f6:	4298      	cmp	r0, r3
 80082f8:	b510      	push	{r4, lr}
 80082fa:	d102      	bne.n	8008302 <dma_init+0xe>
 80082fc:	2904      	cmp	r1, #4
 80082fe:	d900      	bls.n	8008302 <dma_init+0xe>
 8008300:	e7fe      	b.n	8008300 <dma_init+0xc>
 8008302:	2314      	movs	r3, #20
 8008304:	fb03 0101 	mla	r1, r3, r1, r0
 8008308:	6813      	ldr	r3, [r2, #0]
 800830a:	610b      	str	r3, [r1, #16]
 800830c:	6893      	ldr	r3, [r2, #8]
 800830e:	614b      	str	r3, [r1, #20]
 8008310:	8a13      	ldrh	r3, [r2, #16]
 8008312:	60cb      	str	r3, [r1, #12]
 8008314:	68d4      	ldr	r4, [r2, #12]
 8008316:	6853      	ldr	r3, [r2, #4]
 8008318:	6888      	ldr	r0, [r1, #8]
 800831a:	4323      	orrs	r3, r4
 800831c:	6954      	ldr	r4, [r2, #20]
 800831e:	f420 507c 	bic.w	r0, r0, #16128	; 0x3f00
 8008322:	4323      	orrs	r3, r4
 8008324:	4303      	orrs	r3, r0
 8008326:	608b      	str	r3, [r1, #8]
 8008328:	7e13      	ldrb	r3, [r2, #24]
 800832a:	2b01      	cmp	r3, #1
 800832c:	688b      	ldr	r3, [r1, #8]
 800832e:	bf0c      	ite	eq
 8008330:	f043 0340 	orreq.w	r3, r3, #64	; 0x40
 8008334:	f023 0340 	bicne.w	r3, r3, #64	; 0x40
 8008338:	608b      	str	r3, [r1, #8]
 800833a:	7e53      	ldrb	r3, [r2, #25]
 800833c:	2b01      	cmp	r3, #1
 800833e:	688b      	ldr	r3, [r1, #8]
 8008340:	bf0c      	ite	eq
 8008342:	f043 0380 	orreq.w	r3, r3, #128	; 0x80
 8008346:	f023 0380 	bicne.w	r3, r3, #128	; 0x80
 800834a:	608b      	str	r3, [r1, #8]
 800834c:	7e93      	ldrb	r3, [r2, #26]
 800834e:	b923      	cbnz	r3, 800835a <dma_init+0x66>
 8008350:	688b      	ldr	r3, [r1, #8]
 8008352:	f023 0310 	bic.w	r3, r3, #16
 8008356:	608b      	str	r3, [r1, #8]
 8008358:	bd10      	pop	{r4, pc}
 800835a:	688b      	ldr	r3, [r1, #8]
 800835c:	f043 0310 	orr.w	r3, r3, #16
 8008360:	e7f9      	b.n	8008356 <dma_init+0x62>
 8008362:	bf00      	nop
 8008364:	40020400 	andmi	r0, r2, r0, lsl #8

08008368 <dma_circulation_disable>:
 8008368:	4b06      	ldr	r3, [pc, #24]	; (8008384 <dma_circulation_disable+0x1c>)
 800836a:	4298      	cmp	r0, r3
 800836c:	d102      	bne.n	8008374 <dma_circulation_disable+0xc>
 800836e:	2904      	cmp	r1, #4
 8008370:	d900      	bls.n	8008374 <dma_circulation_disable+0xc>
 8008372:	e7fe      	b.n	8008372 <dma_circulation_disable+0xa>
 8008374:	2314      	movs	r3, #20
 8008376:	4359      	muls	r1, r3
 8008378:	3008      	adds	r0, #8
 800837a:	580b      	ldr	r3, [r1, r0]
 800837c:	f023 0320 	bic.w	r3, r3, #32
 8008380:	500b      	str	r3, [r1, r0]
 8008382:	4770      	bx	lr
 8008384:	40020400 	andmi	r0, r2, r0, lsl #8

08008388 <dma_memory_to_memory_disable>:
 8008388:	4b06      	ldr	r3, [pc, #24]	; (80083a4 <dma_memory_to_memory_disable+0x1c>)
 800838a:	4298      	cmp	r0, r3
 800838c:	d102      	bne.n	8008394 <dma_memory_to_memory_disable+0xc>
 800838e:	2904      	cmp	r1, #4
 8008390:	d900      	bls.n	8008394 <dma_memory_to_memory_disable+0xc>
 8008392:	e7fe      	b.n	8008392 <dma_memory_to_memory_disable+0xa>
 8008394:	2314      	movs	r3, #20
 8008396:	4359      	muls	r1, r3
 8008398:	3008      	adds	r0, #8
 800839a:	580b      	ldr	r3, [r1, r0]
 800839c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80083a0:	500b      	str	r3, [r1, r0]
 80083a2:	4770      	bx	lr
 80083a4:	40020400 	andmi	r0, r2, r0, lsl #8

080083a8 <fmc_bank0_unlock>:
 80083a8:	4b04      	ldr	r3, [pc, #16]	; (80083bc <fmc_bank0_unlock+0x14>)
 80083aa:	691a      	ldr	r2, [r3, #16]
 80083ac:	0612      	lsls	r2, r2, #24
 80083ae:	bf41      	itttt	mi
 80083b0:	4a03      	ldrmi	r2, [pc, #12]	; (80083c0 <fmc_bank0_unlock+0x18>)
 80083b2:	605a      	strmi	r2, [r3, #4]
 80083b4:	f102 3288 	addmi.w	r2, r2, #2290649224	; 0x88888888
 80083b8:	605a      	strmi	r2, [r3, #4]
 80083ba:	4770      	bx	lr
 80083bc:	40022000 	andmi	r2, r2, r0
 80083c0:	45670123 	strbmi	r0, [r7, #-291]!	; 0xfffffedd

080083c4 <fmc_bank1_unlock>:
 80083c4:	4b04      	ldr	r3, [pc, #16]	; (80083d8 <fmc_bank1_unlock+0x14>)
 80083c6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80083c8:	0612      	lsls	r2, r2, #24
 80083ca:	bf41      	itttt	mi
 80083cc:	4a03      	ldrmi	r2, [pc, #12]	; (80083dc <fmc_bank1_unlock+0x18>)
 80083ce:	645a      	strmi	r2, [r3, #68]	; 0x44
 80083d0:	f102 3288 	addmi.w	r2, r2, #2290649224	; 0x88888888
 80083d4:	645a      	strmi	r2, [r3, #68]	; 0x44
 80083d6:	4770      	bx	lr
 80083d8:	40022000 	andmi	r2, r2, r0
 80083dc:	45670123 	strbmi	r0, [r7, #-291]!	; 0xfffffedd

080083e0 <fmc_bank0_lock>:
 80083e0:	4a02      	ldr	r2, [pc, #8]	; (80083ec <fmc_bank0_lock+0xc>)
 80083e2:	6913      	ldr	r3, [r2, #16]
 80083e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80083e8:	6113      	str	r3, [r2, #16]
 80083ea:	4770      	bx	lr
 80083ec:	40022000 	andmi	r2, r2, r0

080083f0 <fmc_bank1_lock>:
 80083f0:	4a02      	ldr	r2, [pc, #8]	; (80083fc <fmc_bank1_lock+0xc>)
 80083f2:	6d13      	ldr	r3, [r2, #80]	; 0x50
 80083f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80083f8:	6513      	str	r3, [r2, #80]	; 0x50
 80083fa:	4770      	bx	lr
 80083fc:	40022000 	andmi	r2, r2, r0

08008400 <fmc_bank0_state_get>:
 8008400:	4b07      	ldr	r3, [pc, #28]	; (8008420 <fmc_bank0_state_get+0x20>)
 8008402:	68da      	ldr	r2, [r3, #12]
 8008404:	07d1      	lsls	r1, r2, #31
 8008406:	d407      	bmi.n	8008418 <fmc_bank0_state_get+0x18>
 8008408:	68da      	ldr	r2, [r3, #12]
 800840a:	06d2      	lsls	r2, r2, #27
 800840c:	d406      	bmi.n	800841c <fmc_bank0_state_get+0x1c>
 800840e:	68d8      	ldr	r0, [r3, #12]
 8008410:	f3c0 0080 	ubfx	r0, r0, #2, #1
 8008414:	0040      	lsls	r0, r0, #1
 8008416:	4770      	bx	lr
 8008418:	2001      	movs	r0, #1
 800841a:	4770      	bx	lr
 800841c:	2003      	movs	r0, #3
 800841e:	4770      	bx	lr
 8008420:	40022000 	andmi	r2, r2, r0

08008424 <fmc_bank1_state_get>:
 8008424:	4b07      	ldr	r3, [pc, #28]	; (8008444 <fmc_bank1_state_get+0x20>)
 8008426:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008428:	07d1      	lsls	r1, r2, #31
 800842a:	d407      	bmi.n	800843c <fmc_bank1_state_get+0x18>
 800842c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800842e:	06d2      	lsls	r2, r2, #27
 8008430:	d406      	bmi.n	8008440 <fmc_bank1_state_get+0x1c>
 8008432:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8008434:	f3c0 0080 	ubfx	r0, r0, #2, #1
 8008438:	0040      	lsls	r0, r0, #1
 800843a:	4770      	bx	lr
 800843c:	2001      	movs	r0, #1
 800843e:	4770      	bx	lr
 8008440:	2003      	movs	r0, #3
 8008442:	4770      	bx	lr
 8008444:	40022000 	andmi	r2, r2, r0

08008448 <fwdgt_enable>:
 8008448:	4b02      	ldr	r3, [pc, #8]	; (8008454 <fwdgt_enable+0xc>)
 800844a:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 800844e:	601a      	str	r2, [r3, #0]
 8008450:	4770      	bx	lr
 8008452:	bf00      	nop
 8008454:	40003000 	andmi	r3, r0, r0

08008458 <fwdgt_counter_reload>:
 8008458:	4b02      	ldr	r3, [pc, #8]	; (8008464 <fwdgt_counter_reload+0xc>)
 800845a:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 800845e:	601a      	str	r2, [r3, #0]
 8008460:	4770      	bx	lr
 8008462:	bf00      	nop
 8008464:	40003000 	andmi	r3, r0, r0

08008468 <fwdgt_config>:
 8008468:	4a12      	ldr	r2, [pc, #72]	; (80084b4 <fwdgt_config+0x4c>)
 800846a:	b510      	push	{r4, lr}
 800846c:	f245 5355 	movw	r3, #21845	; 0x5555
 8008470:	4c11      	ldr	r4, [pc, #68]	; (80084b8 <fwdgt_config+0x50>)
 8008472:	6013      	str	r3, [r2, #0]
 8008474:	68d3      	ldr	r3, [r2, #12]
 8008476:	3c01      	subs	r4, #1
 8008478:	f003 0301 	and.w	r3, r3, #1
 800847c:	d013      	beq.n	80084a6 <fwdgt_config+0x3e>
 800847e:	2b00      	cmp	r3, #0
 8008480:	d1f8      	bne.n	8008474 <fwdgt_config+0xc>
 8008482:	6051      	str	r1, [r2, #4]
 8008484:	490c      	ldr	r1, [pc, #48]	; (80084b8 <fwdgt_config+0x50>)
 8008486:	4a0b      	ldr	r2, [pc, #44]	; (80084b4 <fwdgt_config+0x4c>)
 8008488:	68d3      	ldr	r3, [r2, #12]
 800848a:	3901      	subs	r1, #1
 800848c:	f003 0302 	and.w	r3, r3, #2
 8008490:	d00d      	beq.n	80084ae <fwdgt_config+0x46>
 8008492:	2b00      	cmp	r3, #0
 8008494:	d1f8      	bne.n	8008488 <fwdgt_config+0x20>
 8008496:	f3c0 000b 	ubfx	r0, r0, #0, #12
 800849a:	f64a 23aa 	movw	r3, #43690	; 0xaaaa
 800849e:	6090      	str	r0, [r2, #8]
 80084a0:	6013      	str	r3, [r2, #0]
 80084a2:	2001      	movs	r0, #1
 80084a4:	e002      	b.n	80084ac <fwdgt_config+0x44>
 80084a6:	2b00      	cmp	r3, #0
 80084a8:	d0eb      	beq.n	8008482 <fwdgt_config+0x1a>
 80084aa:	2000      	movs	r0, #0
 80084ac:	bd10      	pop	{r4, pc}
 80084ae:	2b00      	cmp	r3, #0
 80084b0:	d1fb      	bne.n	80084aa <fwdgt_config+0x42>
 80084b2:	e7f0      	b.n	8008496 <fwdgt_config+0x2e>
 80084b4:	40003000 	andmi	r3, r0, r0
 80084b8:	000fffff 	strdeq	pc, [pc], -pc	; <UNPREDICTABLE>

080084bc <gpio_init>:
 80084bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80084c0:	06cf      	lsls	r7, r1, #27
 80084c2:	f001 040f 	and.w	r4, r1, #15
 80084c6:	d508      	bpl.n	80084da <gpio_init+0x1e>
 80084c8:	2a04      	cmp	r2, #4
 80084ca:	bf01      	itttt	eq
 80084cc:	6bc2      	ldreq	r2, [r0, #60]	; 0x3c
 80084ce:	431a      	orreq	r2, r3
 80084d0:	f044 0403 	orreq.w	r4, r4, #3
 80084d4:	63c2      	streq	r2, [r0, #60]	; 0x3c
 80084d6:	bf18      	it	ne
 80084d8:	4314      	orrne	r4, r2
 80084da:	2500      	movs	r5, #0
 80084dc:	f04f 0c0f 	mov.w	ip, #15
 80084e0:	2701      	movs	r7, #1
 80084e2:	fa23 f205 	lsr.w	r2, r3, r5
 80084e6:	07d6      	lsls	r6, r2, #31
 80084e8:	d510      	bpl.n	800850c <gpio_init+0x50>
 80084ea:	00aa      	lsls	r2, r5, #2
 80084ec:	6806      	ldr	r6, [r0, #0]
 80084ee:	fa0c fe02 	lsl.w	lr, ip, r2
 80084f2:	ea26 060e 	bic.w	r6, r6, lr
 80084f6:	fa04 f202 	lsl.w	r2, r4, r2
 80084fa:	2928      	cmp	r1, #40	; 0x28
 80084fc:	ea42 0206 	orr.w	r2, r2, r6
 8008500:	d128      	bne.n	8008554 <gpio_init+0x98>
 8008502:	fa07 f605 	lsl.w	r6, r7, r5
 8008506:	401e      	ands	r6, r3
 8008508:	6146      	str	r6, [r0, #20]
 800850a:	6002      	str	r2, [r0, #0]
 800850c:	3501      	adds	r5, #1
 800850e:	2d08      	cmp	r5, #8
 8008510:	d1e7      	bne.n	80084e2 <gpio_init+0x26>
 8008512:	2600      	movs	r6, #0
 8008514:	f04f 0c0f 	mov.w	ip, #15
 8008518:	2701      	movs	r7, #1
 800851a:	f106 0208 	add.w	r2, r6, #8
 800851e:	fa23 f502 	lsr.w	r5, r3, r2
 8008522:	07ed      	lsls	r5, r5, #31
 8008524:	d511      	bpl.n	800854a <gpio_init+0x8e>
 8008526:	00b5      	lsls	r5, r6, #2
 8008528:	f8d0 e004 	ldr.w	lr, [r0, #4]
 800852c:	fa0c f805 	lsl.w	r8, ip, r5
 8008530:	ea2e 0e08 	bic.w	lr, lr, r8
 8008534:	fa04 f505 	lsl.w	r5, r4, r5
 8008538:	2928      	cmp	r1, #40	; 0x28
 800853a:	ea45 050e 	orr.w	r5, r5, lr
 800853e:	d110      	bne.n	8008562 <gpio_init+0xa6>
 8008540:	fa07 f202 	lsl.w	r2, r7, r2
 8008544:	401a      	ands	r2, r3
 8008546:	6142      	str	r2, [r0, #20]
 8008548:	6045      	str	r5, [r0, #4]
 800854a:	3601      	adds	r6, #1
 800854c:	2e08      	cmp	r6, #8
 800854e:	d1e4      	bne.n	800851a <gpio_init+0x5e>
 8008550:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008554:	2948      	cmp	r1, #72	; 0x48
 8008556:	bf02      	ittt	eq
 8008558:	fa07 f605 	lsleq.w	r6, r7, r5
 800855c:	401e      	andeq	r6, r3
 800855e:	6106      	streq	r6, [r0, #16]
 8008560:	e7d3      	b.n	800850a <gpio_init+0x4e>
 8008562:	2948      	cmp	r1, #72	; 0x48
 8008564:	bf02      	ittt	eq
 8008566:	fa07 f202 	lsleq.w	r2, r7, r2
 800856a:	401a      	andeq	r2, r3
 800856c:	6102      	streq	r2, [r0, #16]
 800856e:	e7eb      	b.n	8008548 <gpio_init+0x8c>

08008570 <gpio_input_bit_get>:
 8008570:	6883      	ldr	r3, [r0, #8]
 8008572:	420b      	tst	r3, r1
 8008574:	bf14      	ite	ne
 8008576:	2001      	movne	r0, #1
 8008578:	2000      	moveq	r0, #0
 800857a:	4770      	bx	lr

0800857c <gpio_pin_remap_config>:
 800857c:	2800      	cmp	r0, #0
 800857e:	4a16      	ldr	r2, [pc, #88]	; (80085d8 <gpio_pin_remap_config+0x5c>)
 8008580:	b530      	push	{r4, r5, lr}
 8008582:	f400 1540 	and.w	r5, r0, #3145728	; 0x300000
 8008586:	bfb4      	ite	lt
 8008588:	69d3      	ldrlt	r3, [r2, #28]
 800858a:	6853      	ldrge	r3, [r2, #4]
 800858c:	f5b5 1f40 	cmp.w	r5, #3145728	; 0x300000
 8008590:	b284      	uxth	r4, r0
 8008592:	d110      	bne.n	80085b6 <gpio_pin_remap_config+0x3a>
 8008594:	6855      	ldr	r5, [r2, #4]
 8008596:	f025 65e0 	bic.w	r5, r5, #117440512	; 0x7000000
 800859a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800859e:	6055      	str	r5, [r2, #4]
 80085a0:	b119      	cbz	r1, 80085aa <gpio_pin_remap_config+0x2e>
 80085a2:	0d42      	lsrs	r2, r0, #21
 80085a4:	0112      	lsls	r2, r2, #4
 80085a6:	4094      	lsls	r4, r2
 80085a8:	4323      	orrs	r3, r4
 80085aa:	4a0b      	ldr	r2, [pc, #44]	; (80085d8 <gpio_pin_remap_config+0x5c>)
 80085ac:	2800      	cmp	r0, #0
 80085ae:	bfb4      	ite	lt
 80085b0:	61d3      	strlt	r3, [r2, #28]
 80085b2:	6053      	strge	r3, [r2, #4]
 80085b4:	bd30      	pop	{r4, r5, pc}
 80085b6:	02c2      	lsls	r2, r0, #11
 80085b8:	bf55      	itete	pl
 80085ba:	0d42      	lsrpl	r2, r0, #21
 80085bc:	2203      	movmi	r2, #3
 80085be:	0112      	lslpl	r2, r2, #4
 80085c0:	f3c0 4503 	ubfxmi	r5, r0, #16, #4
 80085c4:	bf4c      	ite	mi
 80085c6:	40aa      	lslmi	r2, r5
 80085c8:	fa04 f202 	lslpl.w	r2, r4, r2
 80085cc:	ea23 0302 	bic.w	r3, r3, r2
 80085d0:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80085d4:	e7e4      	b.n	80085a0 <gpio_pin_remap_config+0x24>
 80085d6:	bf00      	nop
 80085d8:	40010000 	andmi	r0, r1, r0

080085dc <pmu_backup_write_enable>:
 80085dc:	4a02      	ldr	r2, [pc, #8]	; (80085e8 <pmu_backup_write_enable+0xc>)
 80085de:	6813      	ldr	r3, [r2, #0]
 80085e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80085e4:	6013      	str	r3, [r2, #0]
 80085e6:	4770      	bx	lr
 80085e8:	40007000 	andmi	r7, r0, r0

080085ec <rcu_periph_clock_enable>:
 80085ec:	0983      	lsrs	r3, r0, #6
 80085ee:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80085f2:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 80085f6:	f000 001f 	and.w	r0, r0, #31
 80085fa:	6819      	ldr	r1, [r3, #0]
 80085fc:	2201      	movs	r2, #1
 80085fe:	4082      	lsls	r2, r0
 8008600:	430a      	orrs	r2, r1
 8008602:	601a      	str	r2, [r3, #0]
 8008604:	4770      	bx	lr

08008606 <rcu_periph_clock_disable>:
 8008606:	0983      	lsrs	r3, r0, #6
 8008608:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800860c:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8008610:	f000 001f 	and.w	r0, r0, #31
 8008614:	681a      	ldr	r2, [r3, #0]
 8008616:	2101      	movs	r1, #1
 8008618:	4081      	lsls	r1, r0
 800861a:	ea22 0201 	bic.w	r2, r2, r1
 800861e:	601a      	str	r2, [r3, #0]
 8008620:	4770      	bx	lr

08008622 <rcu_periph_reset_enable>:
 8008622:	f7ff bfe3 	b.w	80085ec <rcu_periph_clock_enable>

08008626 <rcu_periph_reset_disable>:
 8008626:	f7ff bfee 	b.w	8008606 <rcu_periph_clock_disable>
	...

0800862c <rcu_adc_clock_config>:
 800862c:	4913      	ldr	r1, [pc, #76]	; (800867c <rcu_adc_clock_config+0x50>)
 800862e:	684b      	ldr	r3, [r1, #4]
 8008630:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8008632:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008636:	b510      	push	{r4, lr}
 8008638:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800863c:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 8008640:	280b      	cmp	r0, #11
 8008642:	d809      	bhi.n	8008658 <rcu_adc_clock_config+0x2c>
 8008644:	e8df f000 	tbb	[pc, r0]
 8008648:	06060606 	streq	r0, [r6], -r6, lsl #12
 800864c:	0b080b08 	bleq	820b274 <__exidx_end+0x1ff9a4>
 8008650:	12121212 	andsne	r1, r2, #536870913	; 0x20000001
 8008654:	ea43 3380 	orr.w	r3, r3, r0, lsl #14
 8008658:	604b      	str	r3, [r1, #4]
 800865a:	62ca      	str	r2, [r1, #44]	; 0x2c
 800865c:	bd10      	pop	{r4, pc}
 800865e:	4c08      	ldr	r4, [pc, #32]	; (8008680 <rcu_adc_clock_config+0x54>)
 8008660:	ea04 3080 	and.w	r0, r4, r0, lsl #14
 8008664:	4303      	orrs	r3, r0
 8008666:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800866a:	e7f5      	b.n	8008658 <rcu_adc_clock_config+0x2c>
 800866c:	4c05      	ldr	r4, [pc, #20]	; (8008684 <rcu_adc_clock_config+0x58>)
 800866e:	ea04 3080 	and.w	r0, r4, r0, lsl #14
 8008672:	4303      	orrs	r3, r0
 8008674:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8008678:	e7ee      	b.n	8008658 <rcu_adc_clock_config+0x2c>
 800867a:	bf00      	nop
 800867c:	40021000 	andmi	r1, r2, r0
 8008680:	fffec000 			; <UNDEFINED> instruction: 0xfffec000
 8008684:	fffcc000 			; <UNDEFINED> instruction: 0xfffcc000

08008688 <rcu_rtc_clock_config>:
 8008688:	4a03      	ldr	r2, [pc, #12]	; (8008698 <rcu_rtc_clock_config+0x10>)
 800868a:	6a13      	ldr	r3, [r2, #32]
 800868c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008690:	4318      	orrs	r0, r3
 8008692:	6210      	str	r0, [r2, #32]
 8008694:	4770      	bx	lr
 8008696:	bf00      	nop
 8008698:	40021000 	andmi	r1, r2, r0

0800869c <rcu_flag_get>:
 800869c:	0983      	lsrs	r3, r0, #6
 800869e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80086a2:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 80086a6:	f000 001f 	and.w	r0, r0, #31
 80086aa:	681a      	ldr	r2, [r3, #0]
 80086ac:	2301      	movs	r3, #1
 80086ae:	4083      	lsls	r3, r0
 80086b0:	4213      	tst	r3, r2
 80086b2:	bf14      	ite	ne
 80086b4:	2001      	movne	r0, #1
 80086b6:	2000      	moveq	r0, #0
 80086b8:	4770      	bx	lr
	...

080086bc <rcu_osci_stab_wait>:
 80086bc:	f5b0 6f00 	cmp.w	r0, #2048	; 0x800
 80086c0:	b508      	push	{r3, lr}
 80086c2:	d028      	beq.n	8008716 <rcu_osci_stab_wait+0x5a>
 80086c4:	d806      	bhi.n	80086d4 <rcu_osci_stab_wait+0x18>
 80086c6:	2810      	cmp	r0, #16
 80086c8:	d016      	beq.n	80086f8 <rcu_osci_stab_wait+0x3c>
 80086ca:	2818      	cmp	r0, #24
 80086cc:	d044      	beq.n	8008758 <rcu_osci_stab_wait+0x9c>
 80086ce:	b370      	cbz	r0, 800872e <rcu_osci_stab_wait+0x72>
 80086d0:	2000      	movs	r0, #0
 80086d2:	bd08      	pop	{r3, pc}
 80086d4:	f5b0 6f10 	cmp.w	r0, #2304	; 0x900
 80086d8:	d033      	beq.n	8008742 <rcu_osci_stab_wait+0x86>
 80086da:	f243 0310 	movw	r3, #12304	; 0x3010
 80086de:	4298      	cmp	r0, r3
 80086e0:	d1f6      	bne.n	80086d0 <rcu_osci_stab_wait+0x14>
 80086e2:	4922      	ldr	r1, [pc, #136]	; (800876c <rcu_osci_stab_wait+0xb0>)
 80086e4:	f243 0011 	movw	r0, #12305	; 0x3011
 80086e8:	f7ff ffd8 	bl	800869c <rcu_flag_get>
 80086ec:	b908      	cbnz	r0, 80086f2 <rcu_osci_stab_wait+0x36>
 80086ee:	3901      	subs	r1, #1
 80086f0:	d1f8      	bne.n	80086e4 <rcu_osci_stab_wait+0x28>
 80086f2:	f243 0011 	movw	r0, #12305	; 0x3011
 80086f6:	e008      	b.n	800870a <rcu_osci_stab_wait+0x4e>
 80086f8:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80086fc:	2011      	movs	r0, #17
 80086fe:	f7ff ffcd 	bl	800869c <rcu_flag_get>
 8008702:	b908      	cbnz	r0, 8008708 <rcu_osci_stab_wait+0x4c>
 8008704:	3901      	subs	r1, #1
 8008706:	d1f9      	bne.n	80086fc <rcu_osci_stab_wait+0x40>
 8008708:	2011      	movs	r0, #17
 800870a:	f7ff ffc7 	bl	800869c <rcu_flag_get>
 800870e:	3800      	subs	r0, #0
 8008710:	bf18      	it	ne
 8008712:	2001      	movne	r0, #1
 8008714:	e7dd      	b.n	80086d2 <rcu_osci_stab_wait+0x16>
 8008716:	f06f 417c 	mvn.w	r1, #4227858432	; 0xfc000000
 800871a:	f640 0001 	movw	r0, #2049	; 0x801
 800871e:	f7ff ffbd 	bl	800869c <rcu_flag_get>
 8008722:	b908      	cbnz	r0, 8008728 <rcu_osci_stab_wait+0x6c>
 8008724:	3901      	subs	r1, #1
 8008726:	d1f8      	bne.n	800871a <rcu_osci_stab_wait+0x5e>
 8008728:	f640 0001 	movw	r0, #2049	; 0x801
 800872c:	e7ed      	b.n	800870a <rcu_osci_stab_wait+0x4e>
 800872e:	f44f 61a0 	mov.w	r1, #1280	; 0x500
 8008732:	2001      	movs	r0, #1
 8008734:	f7ff ffb2 	bl	800869c <rcu_flag_get>
 8008738:	b908      	cbnz	r0, 800873e <rcu_osci_stab_wait+0x82>
 800873a:	3901      	subs	r1, #1
 800873c:	d1f9      	bne.n	8008732 <rcu_osci_stab_wait+0x76>
 800873e:	2001      	movs	r0, #1
 8008740:	e7e3      	b.n	800870a <rcu_osci_stab_wait+0x4e>
 8008742:	490a      	ldr	r1, [pc, #40]	; (800876c <rcu_osci_stab_wait+0xb0>)
 8008744:	f640 1001 	movw	r0, #2305	; 0x901
 8008748:	f7ff ffa8 	bl	800869c <rcu_flag_get>
 800874c:	b908      	cbnz	r0, 8008752 <rcu_osci_stab_wait+0x96>
 800874e:	3901      	subs	r1, #1
 8008750:	d1f8      	bne.n	8008744 <rcu_osci_stab_wait+0x88>
 8008752:	f640 1001 	movw	r0, #2305	; 0x901
 8008756:	e7d8      	b.n	800870a <rcu_osci_stab_wait+0x4e>
 8008758:	4904      	ldr	r1, [pc, #16]	; (800876c <rcu_osci_stab_wait+0xb0>)
 800875a:	2019      	movs	r0, #25
 800875c:	f7ff ff9e 	bl	800869c <rcu_flag_get>
 8008760:	b908      	cbnz	r0, 8008766 <rcu_osci_stab_wait+0xaa>
 8008762:	3901      	subs	r1, #1
 8008764:	d1f9      	bne.n	800875a <rcu_osci_stab_wait+0x9e>
 8008766:	2019      	movs	r0, #25
 8008768:	e7cf      	b.n	800870a <rcu_osci_stab_wait+0x4e>
 800876a:	bf00      	nop
 800876c:	000fffff 	strdeq	pc, [pc], -pc	; <UNPREDICTABLE>

08008770 <rcu_osci_on>:
 8008770:	f7ff bf3c 	b.w	80085ec <rcu_periph_clock_enable>

08008774 <rcu_clock_freq_get>:
 8008774:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008776:	4b35      	ldr	r3, [pc, #212]	; (800884c <rcu_clock_freq_get+0xd8>)
 8008778:	b089      	sub	sp, #36	; 0x24
 800877a:	4604      	mov	r4, r0
 800877c:	ad04      	add	r5, sp, #16
 800877e:	f103 0610 	add.w	r6, r3, #16
 8008782:	461f      	mov	r7, r3
 8008784:	6818      	ldr	r0, [r3, #0]
 8008786:	6859      	ldr	r1, [r3, #4]
 8008788:	462a      	mov	r2, r5
 800878a:	c203      	stmia	r2!, {r0, r1}
 800878c:	3308      	adds	r3, #8
 800878e:	42b3      	cmp	r3, r6
 8008790:	4615      	mov	r5, r2
 8008792:	d1f7      	bne.n	8008784 <rcu_clock_freq_get+0x10>
 8008794:	6938      	ldr	r0, [r7, #16]
 8008796:	6871      	ldr	r1, [r6, #4]
 8008798:	4a2d      	ldr	r2, [pc, #180]	; (8008850 <rcu_clock_freq_get+0xdc>)
 800879a:	466b      	mov	r3, sp
 800879c:	c303      	stmia	r3!, {r0, r1}
 800879e:	c303      	stmia	r3!, {r0, r1}
 80087a0:	6853      	ldr	r3, [r2, #4]
 80087a2:	f3c3 0381 	ubfx	r3, r3, #2, #2
 80087a6:	2b02      	cmp	r3, #2
 80087a8:	d143      	bne.n	8008832 <rcu_clock_freq_get+0xbe>
 80087aa:	6853      	ldr	r3, [r2, #4]
 80087ac:	03df      	lsls	r7, r3, #15
 80087ae:	d538      	bpl.n	8008822 <rcu_clock_freq_get+0xae>
 80087b0:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80087b2:	4928      	ldr	r1, [pc, #160]	; (8008854 <rcu_clock_freq_get+0xe0>)
 80087b4:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 80087b8:	4b27      	ldr	r3, [pc, #156]	; (8008858 <rcu_clock_freq_get+0xe4>)
 80087ba:	bf18      	it	ne
 80087bc:	4619      	movne	r1, r3
 80087be:	6853      	ldr	r3, [r2, #4]
 80087c0:	039e      	lsls	r6, r3, #14
 80087c2:	d500      	bpl.n	80087c6 <rcu_clock_freq_get+0x52>
 80087c4:	0849      	lsrs	r1, r1, #1
 80087c6:	6853      	ldr	r3, [r2, #4]
 80087c8:	6850      	ldr	r0, [r2, #4]
 80087ca:	0105      	lsls	r5, r0, #4
 80087cc:	6850      	ldr	r0, [r2, #4]
 80087ce:	f3c3 4383 	ubfx	r3, r3, #18, #4
 80087d2:	bf48      	it	mi
 80087d4:	f043 0310 	orrmi.w	r3, r3, #16
 80087d8:	0040      	lsls	r0, r0, #1
 80087da:	d524      	bpl.n	8008826 <rcu_clock_freq_get+0xb2>
 80087dc:	f043 0320 	orr.w	r3, r3, #32
 80087e0:	2b3f      	cmp	r3, #63	; 0x3f
 80087e2:	d124      	bne.n	800882e <rcu_clock_freq_get+0xba>
 80087e4:	fb01 f003 	mul.w	r0, r1, r3
 80087e8:	6853      	ldr	r3, [r2, #4]
 80087ea:	6851      	ldr	r1, [r2, #4]
 80087ec:	6852      	ldr	r2, [r2, #4]
 80087ee:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80087f2:	3320      	adds	r3, #32
 80087f4:	446b      	add	r3, sp
 80087f6:	f3c1 2102 	ubfx	r1, r1, #8, #3
 80087fa:	f3c2 22c2 	ubfx	r2, r2, #11, #3
 80087fe:	3120      	adds	r1, #32
 8008800:	3220      	adds	r2, #32
 8008802:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8008806:	4469      	add	r1, sp
 8008808:	446a      	add	r2, sp
 800880a:	f811 1c20 	ldrb.w	r1, [r1, #-32]
 800880e:	f812 2c18 	ldrb.w	r2, [r2, #-24]
 8008812:	fa20 f303 	lsr.w	r3, r0, r3
 8008816:	2c03      	cmp	r4, #3
 8008818:	d816      	bhi.n	8008848 <rcu_clock_freq_get+0xd4>
 800881a:	e8df f004 	tbb	[pc, r4]
 800881e:	120f0c0d 	andne	r0, pc, #3328	; 0xd00
 8008822:	490e      	ldr	r1, [pc, #56]	; (800885c <rcu_clock_freq_get+0xe8>)
 8008824:	e7cf      	b.n	80087c6 <rcu_clock_freq_get+0x52>
 8008826:	2b0e      	cmp	r3, #14
 8008828:	d801      	bhi.n	800882e <rcu_clock_freq_get+0xba>
 800882a:	3302      	adds	r3, #2
 800882c:	e7da      	b.n	80087e4 <rcu_clock_freq_get+0x70>
 800882e:	3301      	adds	r3, #1
 8008830:	e7d8      	b.n	80087e4 <rcu_clock_freq_get+0x70>
 8008832:	4808      	ldr	r0, [pc, #32]	; (8008854 <rcu_clock_freq_get+0xe0>)
 8008834:	e7d8      	b.n	80087e8 <rcu_clock_freq_get+0x74>
 8008836:	4618      	mov	r0, r3
 8008838:	b009      	add	sp, #36	; 0x24
 800883a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800883c:	fa23 f001 	lsr.w	r0, r3, r1
 8008840:	e7fa      	b.n	8008838 <rcu_clock_freq_get+0xc4>
 8008842:	fa23 f002 	lsr.w	r0, r3, r2
 8008846:	e7f7      	b.n	8008838 <rcu_clock_freq_get+0xc4>
 8008848:	2000      	movs	r0, #0
 800884a:	e7f5      	b.n	8008838 <rcu_clock_freq_get+0xc4>
 800884c:	080097ed 	stmdaeq	r0, {r0, r2, r3, r5, r6, r7, r8, r9, sl, ip, pc}
 8008850:	40021000 	andmi	r1, r2, r0
 8008854:	007a1200 	rsbseq	r1, sl, r0, lsl #4
 8008858:	02dc6c00 	sbcseq	r6, ip, #0, 24
 800885c:	003d0900 	eorseq	r0, sp, r0, lsl #18

08008860 <rtc_configuration_mode_enter>:
 8008860:	4a03      	ldr	r2, [pc, #12]	; (8008870 <rtc_configuration_mode_enter+0x10>)
 8008862:	f8d2 3804 	ldr.w	r3, [r2, #2052]	; 0x804
 8008866:	f043 0310 	orr.w	r3, r3, #16
 800886a:	f8c2 3804 	str.w	r3, [r2, #2052]	; 0x804
 800886e:	4770      	bx	lr
 8008870:	40002000 	andmi	r2, r0, r0

08008874 <rtc_configuration_mode_exit>:
 8008874:	4a03      	ldr	r2, [pc, #12]	; (8008884 <rtc_configuration_mode_exit+0x10>)
 8008876:	f8d2 3804 	ldr.w	r3, [r2, #2052]	; 0x804
 800887a:	f023 0310 	bic.w	r3, r3, #16
 800887e:	f8c2 3804 	str.w	r3, [r2, #2052]	; 0x804
 8008882:	4770      	bx	lr
 8008884:	40002000 	andmi	r2, r0, r0

08008888 <rtc_lwoff_wait>:
 8008888:	4a02      	ldr	r2, [pc, #8]	; (8008894 <rtc_lwoff_wait+0xc>)
 800888a:	f8d2 3804 	ldr.w	r3, [r2, #2052]	; 0x804
 800888e:	069b      	lsls	r3, r3, #26
 8008890:	d5fb      	bpl.n	800888a <rtc_lwoff_wait+0x2>
 8008892:	4770      	bx	lr
 8008894:	40002000 	andmi	r2, r0, r0

08008898 <rtc_register_sync_wait>:
 8008898:	4b05      	ldr	r3, [pc, #20]	; (80088b0 <rtc_register_sync_wait+0x18>)
 800889a:	f8d3 2804 	ldr.w	r2, [r3, #2052]	; 0x804
 800889e:	f022 0208 	bic.w	r2, r2, #8
 80088a2:	f8c3 2804 	str.w	r2, [r3, #2052]	; 0x804
 80088a6:	f8d3 2804 	ldr.w	r2, [r3, #2052]	; 0x804
 80088aa:	0712      	lsls	r2, r2, #28
 80088ac:	d5fb      	bpl.n	80088a6 <rtc_register_sync_wait+0xe>
 80088ae:	4770      	bx	lr
 80088b0:	40002000 	andmi	r2, r0, r0

080088b4 <rtc_counter_get>:
 80088b4:	4b03      	ldr	r3, [pc, #12]	; (80088c4 <rtc_counter_get+0x10>)
 80088b6:	f8d3 281c 	ldr.w	r2, [r3, #2076]	; 0x81c
 80088ba:	f8d3 0818 	ldr.w	r0, [r3, #2072]	; 0x818
 80088be:	ea42 4000 	orr.w	r0, r2, r0, lsl #16
 80088c2:	4770      	bx	lr
 80088c4:	40002000 	andmi	r2, r0, r0

080088c8 <rtc_counter_set>:
 80088c8:	b508      	push	{r3, lr}
 80088ca:	f7ff ffc9 	bl	8008860 <rtc_configuration_mode_enter>
 80088ce:	4b05      	ldr	r3, [pc, #20]	; (80088e4 <rtc_counter_set+0x1c>)
 80088d0:	0c02      	lsrs	r2, r0, #16
 80088d2:	b280      	uxth	r0, r0
 80088d4:	f8c3 2818 	str.w	r2, [r3, #2072]	; 0x818
 80088d8:	f8c3 081c 	str.w	r0, [r3, #2076]	; 0x81c
 80088dc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80088e0:	f7ff bfc8 	b.w	8008874 <rtc_configuration_mode_exit>
 80088e4:	40002000 	andmi	r2, r0, r0

080088e8 <rtc_prescaler_set>:
 80088e8:	b508      	push	{r3, lr}
 80088ea:	f7ff ffb9 	bl	8008860 <rtc_configuration_mode_enter>
 80088ee:	4b06      	ldr	r3, [pc, #24]	; (8008908 <rtc_prescaler_set+0x20>)
 80088f0:	f3c0 4203 	ubfx	r2, r0, #16, #4
 80088f4:	b280      	uxth	r0, r0
 80088f6:	f8c3 2808 	str.w	r2, [r3, #2056]	; 0x808
 80088fa:	f8c3 080c 	str.w	r0, [r3, #2060]	; 0x80c
 80088fe:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8008902:	f7ff bfb7 	b.w	8008874 <rtc_configuration_mode_exit>
 8008906:	bf00      	nop
 8008908:	40002000 	andmi	r2, r0, r0

0800890c <timer_deinit>:
 800890c:	b508      	push	{r3, lr}
 800890e:	4b2d      	ldr	r3, [pc, #180]	; (80089c4 <timer_deinit+0xb8>)
 8008910:	4298      	cmp	r0, r3
 8008912:	d048      	beq.n	80089a6 <timer_deinit+0x9a>
 8008914:	d816      	bhi.n	8008944 <timer_deinit+0x38>
 8008916:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 800891a:	4298      	cmp	r0, r3
 800891c:	d03c      	beq.n	8008998 <timer_deinit+0x8c>
 800891e:	d807      	bhi.n	8008930 <timer_deinit+0x24>
 8008920:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8008924:	d02a      	beq.n	800897c <timer_deinit+0x70>
 8008926:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 800892a:	4298      	cmp	r0, r3
 800892c:	d02d      	beq.n	800898a <timer_deinit+0x7e>
 800892e:	bd08      	pop	{r3, pc}
 8008930:	4b25      	ldr	r3, [pc, #148]	; (80089c8 <timer_deinit+0xbc>)
 8008932:	4298      	cmp	r0, r3
 8008934:	d1fb      	bne.n	800892e <timer_deinit+0x22>
 8008936:	f240 4003 	movw	r0, #1027	; 0x403
 800893a:	f7ff fe72 	bl	8008622 <rcu_periph_reset_enable>
 800893e:	f240 4003 	movw	r0, #1027	; 0x403
 8008942:	e017      	b.n	8008974 <timer_deinit+0x68>
 8008944:	4b21      	ldr	r3, [pc, #132]	; (80089cc <timer_deinit+0xc0>)
 8008946:	4298      	cmp	r0, r3
 8008948:	d00e      	beq.n	8008968 <timer_deinit+0x5c>
 800894a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800894e:	4298      	cmp	r0, r3
 8008950:	d030      	beq.n	80089b4 <timer_deinit+0xa8>
 8008952:	f5a3 3390 	sub.w	r3, r3, #73728	; 0x12000
 8008956:	4298      	cmp	r0, r3
 8008958:	d1e9      	bne.n	800892e <timer_deinit+0x22>
 800895a:	f240 4005 	movw	r0, #1029	; 0x405
 800895e:	f7ff fe60 	bl	8008622 <rcu_periph_reset_enable>
 8008962:	f240 4005 	movw	r0, #1029	; 0x405
 8008966:	e005      	b.n	8008974 <timer_deinit+0x68>
 8008968:	f240 300b 	movw	r0, #779	; 0x30b
 800896c:	f7ff fe59 	bl	8008622 <rcu_periph_reset_enable>
 8008970:	f240 300b 	movw	r0, #779	; 0x30b
 8008974:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8008978:	f7ff be55 	b.w	8008626 <rcu_periph_reset_disable>
 800897c:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8008980:	f7ff fe4f 	bl	8008622 <rcu_periph_reset_enable>
 8008984:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8008988:	e7f4      	b.n	8008974 <timer_deinit+0x68>
 800898a:	f240 4001 	movw	r0, #1025	; 0x401
 800898e:	f7ff fe48 	bl	8008622 <rcu_periph_reset_enable>
 8008992:	f240 4001 	movw	r0, #1025	; 0x401
 8008996:	e7ed      	b.n	8008974 <timer_deinit+0x68>
 8008998:	f240 4002 	movw	r0, #1026	; 0x402
 800899c:	f7ff fe41 	bl	8008622 <rcu_periph_reset_enable>
 80089a0:	f240 4002 	movw	r0, #1026	; 0x402
 80089a4:	e7e6      	b.n	8008974 <timer_deinit+0x68>
 80089a6:	f240 4004 	movw	r0, #1028	; 0x404
 80089aa:	f7ff fe3a 	bl	8008622 <rcu_periph_reset_enable>
 80089ae:	f240 4004 	movw	r0, #1028	; 0x404
 80089b2:	e7df      	b.n	8008974 <timer_deinit+0x68>
 80089b4:	f240 300d 	movw	r0, #781	; 0x30d
 80089b8:	f7ff fe33 	bl	8008622 <rcu_periph_reset_enable>
 80089bc:	f240 300d 	movw	r0, #781	; 0x30d
 80089c0:	e7d8      	b.n	8008974 <timer_deinit+0x68>
 80089c2:	bf00      	nop
 80089c4:	40001000 	andmi	r1, r0, r0
 80089c8:	40000c00 	andmi	r0, r0, r0, lsl #24
 80089cc:	40012c00 	andmi	r2, r1, r0, lsl #24

080089d0 <timer_init>:
 80089d0:	880b      	ldrh	r3, [r1, #0]
 80089d2:	6283      	str	r3, [r0, #40]	; 0x28
 80089d4:	4b1a      	ldr	r3, [pc, #104]	; (8008a40 <timer_init+0x70>)
 80089d6:	4298      	cmp	r0, r3
 80089d8:	d007      	beq.n	80089ea <timer_init+0x1a>
 80089da:	f420 6340 	bic.w	r3, r0, #3072	; 0xc00
 80089de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80089e2:	d002      	beq.n	80089ea <timer_init+0x1a>
 80089e4:	4b17      	ldr	r3, [pc, #92]	; (8008a44 <timer_init+0x74>)
 80089e6:	4298      	cmp	r0, r3
 80089e8:	d10b      	bne.n	8008a02 <timer_init+0x32>
 80089ea:	6803      	ldr	r3, [r0, #0]
 80089ec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80089f0:	6003      	str	r3, [r0, #0]
 80089f2:	6802      	ldr	r2, [r0, #0]
 80089f4:	884b      	ldrh	r3, [r1, #2]
 80089f6:	4313      	orrs	r3, r2
 80089f8:	6003      	str	r3, [r0, #0]
 80089fa:	6802      	ldr	r2, [r0, #0]
 80089fc:	888b      	ldrh	r3, [r1, #4]
 80089fe:	4313      	orrs	r3, r2
 8008a00:	6003      	str	r3, [r0, #0]
 8008a02:	688b      	ldr	r3, [r1, #8]
 8008a04:	62c3      	str	r3, [r0, #44]	; 0x2c
 8008a06:	4b10      	ldr	r3, [pc, #64]	; (8008a48 <timer_init+0x78>)
 8008a08:	4298      	cmp	r0, r3
 8008a0a:	d003      	beq.n	8008a14 <timer_init+0x44>
 8008a0c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008a10:	4298      	cmp	r0, r3
 8008a12:	d104      	bne.n	8008a1e <timer_init+0x4e>
 8008a14:	6943      	ldr	r3, [r0, #20]
 8008a16:	f043 0301 	orr.w	r3, r3, #1
 8008a1a:	6143      	str	r3, [r0, #20]
 8008a1c:	4770      	bx	lr
 8008a1e:	6803      	ldr	r3, [r0, #0]
 8008a20:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008a24:	6003      	str	r3, [r0, #0]
 8008a26:	6802      	ldr	r2, [r0, #0]
 8008a28:	88cb      	ldrh	r3, [r1, #6]
 8008a2a:	4313      	orrs	r3, r2
 8008a2c:	6003      	str	r3, [r0, #0]
 8008a2e:	4b04      	ldr	r3, [pc, #16]	; (8008a40 <timer_init+0x70>)
 8008a30:	4298      	cmp	r0, r3
 8008a32:	d002      	beq.n	8008a3a <timer_init+0x6a>
 8008a34:	4b03      	ldr	r3, [pc, #12]	; (8008a44 <timer_init+0x74>)
 8008a36:	4298      	cmp	r0, r3
 8008a38:	d1ec      	bne.n	8008a14 <timer_init+0x44>
 8008a3a:	7b0b      	ldrb	r3, [r1, #12]
 8008a3c:	6303      	str	r3, [r0, #48]	; 0x30
 8008a3e:	e7e9      	b.n	8008a14 <timer_init+0x44>
 8008a40:	40012c00 	andmi	r2, r1, r0, lsl #24
 8008a44:	40013400 	andmi	r3, r1, r0, lsl #8
 8008a48:	40001000 	andmi	r1, r0, r0

08008a4c <timer_enable>:
 8008a4c:	6803      	ldr	r3, [r0, #0]
 8008a4e:	f043 0301 	orr.w	r3, r3, #1
 8008a52:	6003      	str	r3, [r0, #0]
 8008a54:	4770      	bx	lr

08008a56 <timer_interrupt_enable>:
 8008a56:	68c3      	ldr	r3, [r0, #12]
 8008a58:	4319      	orrs	r1, r3
 8008a5a:	60c1      	str	r1, [r0, #12]
 8008a5c:	4770      	bx	lr

08008a5e <timer_interrupt_flag_clear>:
 8008a5e:	43c9      	mvns	r1, r1
 8008a60:	6101      	str	r1, [r0, #16]
 8008a62:	4770      	bx	lr

08008a64 <timer_flag_clear>:
 8008a64:	43c9      	mvns	r1, r1
 8008a66:	6101      	str	r1, [r0, #16]
 8008a68:	4770      	bx	lr

08008a6a <timer_channel_output_mode_config>:
 8008a6a:	2903      	cmp	r1, #3
 8008a6c:	d81a      	bhi.n	8008aa4 <timer_channel_output_mode_config+0x3a>
 8008a6e:	e8df f001 	tbb	[pc, r1]
 8008a72:	1a120a02 	bne	848b282 <__exidx_end+0x47f9b2>
 8008a76:	6983      	ldr	r3, [r0, #24]
 8008a78:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008a7c:	6183      	str	r3, [r0, #24]
 8008a7e:	6983      	ldr	r3, [r0, #24]
 8008a80:	4313      	orrs	r3, r2
 8008a82:	6183      	str	r3, [r0, #24]
 8008a84:	4770      	bx	lr
 8008a86:	6983      	ldr	r3, [r0, #24]
 8008a88:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008a8c:	6183      	str	r3, [r0, #24]
 8008a8e:	6983      	ldr	r3, [r0, #24]
 8008a90:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8008a94:	e7f5      	b.n	8008a82 <timer_channel_output_mode_config+0x18>
 8008a96:	69c3      	ldr	r3, [r0, #28]
 8008a98:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008a9c:	61c3      	str	r3, [r0, #28]
 8008a9e:	69c3      	ldr	r3, [r0, #28]
 8008aa0:	4313      	orrs	r3, r2
 8008aa2:	61c3      	str	r3, [r0, #28]
 8008aa4:	4770      	bx	lr
 8008aa6:	69c3      	ldr	r3, [r0, #28]
 8008aa8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008aac:	61c3      	str	r3, [r0, #28]
 8008aae:	69c3      	ldr	r3, [r0, #28]
 8008ab0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8008ab4:	e7f5      	b.n	8008aa2 <timer_channel_output_mode_config+0x38>

08008ab6 <timer_channel_output_pulse_value_config>:
 8008ab6:	2903      	cmp	r1, #3
 8008ab8:	d80a      	bhi.n	8008ad0 <timer_channel_output_pulse_value_config+0x1a>
 8008aba:	e8df f001 	tbb	[pc, r1]
 8008abe:	08060402 	stmdaeq	r6, {r1, sl}
 8008ac2:	6342      	str	r2, [r0, #52]	; 0x34
 8008ac4:	4770      	bx	lr
 8008ac6:	6382      	str	r2, [r0, #56]	; 0x38
 8008ac8:	4770      	bx	lr
 8008aca:	63c2      	str	r2, [r0, #60]	; 0x3c
 8008acc:	4770      	bx	lr
 8008ace:	6402      	str	r2, [r0, #64]	; 0x40
 8008ad0:	4770      	bx	lr
	...

08008ad4 <usart_deinit>:
 8008ad4:	b508      	push	{r3, lr}
 8008ad6:	4b1d      	ldr	r3, [pc, #116]	; (8008b4c <usart_deinit+0x78>)
 8008ad8:	4298      	cmp	r0, r3
 8008ada:	d028      	beq.n	8008b2e <usart_deinit+0x5a>
 8008adc:	d808      	bhi.n	8008af0 <usart_deinit+0x1c>
 8008ade:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 8008ae2:	4298      	cmp	r0, r3
 8008ae4:	d015      	beq.n	8008b12 <usart_deinit+0x3e>
 8008ae6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008aea:	4298      	cmp	r0, r3
 8008aec:	d018      	beq.n	8008b20 <usart_deinit+0x4c>
 8008aee:	bd08      	pop	{r3, pc}
 8008af0:	4b17      	ldr	r3, [pc, #92]	; (8008b50 <usart_deinit+0x7c>)
 8008af2:	4298      	cmp	r0, r3
 8008af4:	d022      	beq.n	8008b3c <usart_deinit+0x68>
 8008af6:	f503 4368 	add.w	r3, r3, #59392	; 0xe800
 8008afa:	4298      	cmp	r0, r3
 8008afc:	d1f7      	bne.n	8008aee <usart_deinit+0x1a>
 8008afe:	f240 300e 	movw	r0, #782	; 0x30e
 8008b02:	f7ff fd8e 	bl	8008622 <rcu_periph_reset_enable>
 8008b06:	f240 300e 	movw	r0, #782	; 0x30e
 8008b0a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8008b0e:	f7ff bd8a 	b.w	8008626 <rcu_periph_reset_disable>
 8008b12:	f240 4011 	movw	r0, #1041	; 0x411
 8008b16:	f7ff fd84 	bl	8008622 <rcu_periph_reset_enable>
 8008b1a:	f240 4011 	movw	r0, #1041	; 0x411
 8008b1e:	e7f4      	b.n	8008b0a <usart_deinit+0x36>
 8008b20:	f240 4012 	movw	r0, #1042	; 0x412
 8008b24:	f7ff fd7d 	bl	8008622 <rcu_periph_reset_enable>
 8008b28:	f240 4012 	movw	r0, #1042	; 0x412
 8008b2c:	e7ed      	b.n	8008b0a <usart_deinit+0x36>
 8008b2e:	f240 4013 	movw	r0, #1043	; 0x413
 8008b32:	f7ff fd76 	bl	8008622 <rcu_periph_reset_enable>
 8008b36:	f240 4013 	movw	r0, #1043	; 0x413
 8008b3a:	e7e6      	b.n	8008b0a <usart_deinit+0x36>
 8008b3c:	f240 4014 	movw	r0, #1044	; 0x414
 8008b40:	f7ff fd6f 	bl	8008622 <rcu_periph_reset_enable>
 8008b44:	f240 4014 	movw	r0, #1044	; 0x414
 8008b48:	e7df      	b.n	8008b0a <usart_deinit+0x36>
 8008b4a:	bf00      	nop
 8008b4c:	40004c00 	andmi	r4, r0, r0, lsl #24
 8008b50:	40005000 	andmi	r5, r0, r0

08008b54 <usart_baudrate_set>:
 8008b54:	b538      	push	{r3, r4, r5, lr}
 8008b56:	4b11      	ldr	r3, [pc, #68]	; (8008b9c <usart_baudrate_set+0x48>)
 8008b58:	4298      	cmp	r0, r3
 8008b5a:	4604      	mov	r4, r0
 8008b5c:	460d      	mov	r5, r1
 8008b5e:	d01b      	beq.n	8008b98 <usart_baudrate_set+0x44>
 8008b60:	d809      	bhi.n	8008b76 <usart_baudrate_set+0x22>
 8008b62:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 8008b66:	4298      	cmp	r0, r3
 8008b68:	d016      	beq.n	8008b98 <usart_baudrate_set+0x44>
 8008b6a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008b6e:	4298      	cmp	r0, r3
 8008b70:	d012      	beq.n	8008b98 <usart_baudrate_set+0x44>
 8008b72:	2000      	movs	r0, #0
 8008b74:	e009      	b.n	8008b8a <usart_baudrate_set+0x36>
 8008b76:	4b0a      	ldr	r3, [pc, #40]	; (8008ba0 <usart_baudrate_set+0x4c>)
 8008b78:	4298      	cmp	r0, r3
 8008b7a:	d00d      	beq.n	8008b98 <usart_baudrate_set+0x44>
 8008b7c:	f503 4368 	add.w	r3, r3, #59392	; 0xe800
 8008b80:	4298      	cmp	r0, r3
 8008b82:	d1f6      	bne.n	8008b72 <usart_baudrate_set+0x1e>
 8008b84:	2003      	movs	r0, #3
 8008b86:	f7ff fdf5 	bl	8008774 <rcu_clock_freq_get>
 8008b8a:	eb00 0355 	add.w	r3, r0, r5, lsr #1
 8008b8e:	fbb3 f1f5 	udiv	r1, r3, r5
 8008b92:	b289      	uxth	r1, r1
 8008b94:	60a1      	str	r1, [r4, #8]
 8008b96:	bd38      	pop	{r3, r4, r5, pc}
 8008b98:	2002      	movs	r0, #2
 8008b9a:	e7f4      	b.n	8008b86 <usart_baudrate_set+0x32>
 8008b9c:	40004c00 	andmi	r4, r0, r0, lsl #24
 8008ba0:	40005000 	andmi	r5, r0, r0

08008ba4 <usart_parity_config>:
 8008ba4:	68c3      	ldr	r3, [r0, #12]
 8008ba6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8008baa:	60c3      	str	r3, [r0, #12]
 8008bac:	68c3      	ldr	r3, [r0, #12]
 8008bae:	4319      	orrs	r1, r3
 8008bb0:	60c1      	str	r1, [r0, #12]
 8008bb2:	4770      	bx	lr

08008bb4 <usart_word_length_set>:
 8008bb4:	68c3      	ldr	r3, [r0, #12]
 8008bb6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008bba:	60c3      	str	r3, [r0, #12]
 8008bbc:	68c3      	ldr	r3, [r0, #12]
 8008bbe:	4319      	orrs	r1, r3
 8008bc0:	60c1      	str	r1, [r0, #12]
 8008bc2:	4770      	bx	lr

08008bc4 <usart_stop_bit_set>:
 8008bc4:	6903      	ldr	r3, [r0, #16]
 8008bc6:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8008bca:	6103      	str	r3, [r0, #16]
 8008bcc:	6903      	ldr	r3, [r0, #16]
 8008bce:	4319      	orrs	r1, r3
 8008bd0:	6101      	str	r1, [r0, #16]
 8008bd2:	4770      	bx	lr

08008bd4 <usart_transmit_config>:
 8008bd4:	68c3      	ldr	r3, [r0, #12]
 8008bd6:	f023 0308 	bic.w	r3, r3, #8
 8008bda:	4319      	orrs	r1, r3
 8008bdc:	60c1      	str	r1, [r0, #12]
 8008bde:	4770      	bx	lr

08008be0 <usart_receive_config>:
 8008be0:	68c3      	ldr	r3, [r0, #12]
 8008be2:	f023 0304 	bic.w	r3, r3, #4
 8008be6:	4319      	orrs	r1, r3
 8008be8:	60c1      	str	r1, [r0, #12]
 8008bea:	4770      	bx	lr

08008bec <usart_hardware_flow_rts_config>:
 8008bec:	6943      	ldr	r3, [r0, #20]
 8008bee:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008bf2:	4319      	orrs	r1, r3
 8008bf4:	6141      	str	r1, [r0, #20]
 8008bf6:	4770      	bx	lr

08008bf8 <usart_hardware_flow_cts_config>:
 8008bf8:	6943      	ldr	r3, [r0, #20]
 8008bfa:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008bfe:	4319      	orrs	r1, r3
 8008c00:	6141      	str	r1, [r0, #20]
 8008c02:	4770      	bx	lr

08008c04 <usart_dma_transmit_config>:
 8008c04:	6943      	ldr	r3, [r0, #20]
 8008c06:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008c0a:	4319      	orrs	r1, r3
 8008c0c:	6141      	str	r1, [r0, #20]
 8008c0e:	4770      	bx	lr

08008c10 <usart_flag_get>:
 8008c10:	098b      	lsrs	r3, r1, #6
 8008c12:	f001 011f 	and.w	r1, r1, #31
 8008c16:	581a      	ldr	r2, [r3, r0]
 8008c18:	2301      	movs	r3, #1
 8008c1a:	408b      	lsls	r3, r1
 8008c1c:	4213      	tst	r3, r2
 8008c1e:	bf14      	ite	ne
 8008c20:	2001      	movne	r0, #1
 8008c22:	2000      	moveq	r0, #0
 8008c24:	4770      	bx	lr

08008c26 <usart_flag_clear>:
 8008c26:	b510      	push	{r4, lr}
 8008c28:	098c      	lsrs	r4, r1, #6
 8008c2a:	2201      	movs	r2, #1
 8008c2c:	5823      	ldr	r3, [r4, r0]
 8008c2e:	f001 011f 	and.w	r1, r1, #31
 8008c32:	408a      	lsls	r2, r1
 8008c34:	ea23 0302 	bic.w	r3, r3, r2
 8008c38:	5023      	str	r3, [r4, r0]
 8008c3a:	bd10      	pop	{r4, pc}

08008c3c <usart_interrupt_enable>:
 8008c3c:	098a      	lsrs	r2, r1, #6
 8008c3e:	b510      	push	{r4, lr}
 8008c40:	f001 011f 	and.w	r1, r1, #31
 8008c44:	5814      	ldr	r4, [r2, r0]
 8008c46:	2301      	movs	r3, #1
 8008c48:	408b      	lsls	r3, r1
 8008c4a:	4323      	orrs	r3, r4
 8008c4c:	5013      	str	r3, [r2, r0]
 8008c4e:	bd10      	pop	{r4, pc}

08008c50 <usart_interrupt_disable>:
 8008c50:	f7ff bfe9 	b.w	8008c26 <usart_flag_clear>

08008c54 <usart_interrupt_flag_clear>:
 8008c54:	b510      	push	{r4, lr}
 8008c56:	0d8c      	lsrs	r4, r1, #22
 8008c58:	2201      	movs	r2, #1
 8008c5a:	5823      	ldr	r3, [r4, r0]
 8008c5c:	f3c1 4104 	ubfx	r1, r1, #16, #5
 8008c60:	408a      	lsls	r2, r1
 8008c62:	ea23 0302 	bic.w	r3, r3, r2
 8008c66:	5023      	str	r3, [r4, r0]
 8008c68:	bd10      	pop	{r4, pc}
	...

08008c6c <gd32_adc_init()>:
 8008c6c:	b510      	push	{r4, lr}
 8008c6e:	f240 6009 	movw	r0, #1545	; 0x609
 8008c72:	4c21      	ldr	r4, [pc, #132]	; (8008cf8 <gd32_adc_init()+0x8c>)
 8008c74:	f7ff fcba 	bl	80085ec <rcu_periph_clock_enable>
 8008c78:	2005      	movs	r0, #5
 8008c7a:	f7ff fcd7 	bl	800862c <rcu_adc_clock_config>
 8008c7e:	4620      	mov	r0, r4
 8008c80:	2201      	movs	r2, #1
 8008c82:	f44f 7180 	mov.w	r1, #256	; 0x100
 8008c86:	f000 fbcf 	bl	8009428 <adc_special_function_config>
 8008c8a:	f44f 42e0 	mov.w	r2, #28672	; 0x7000
 8008c8e:	4620      	mov	r0, r4
 8008c90:	2102      	movs	r1, #2
 8008c92:	f000 fc60 	bl	8009556 <adc_external_trigger_source_config>
 8008c96:	2100      	movs	r1, #0
 8008c98:	4620      	mov	r0, r4
 8008c9a:	f000 fbed 	bl	8009478 <adc_data_alignment_config>
 8008c9e:	2000      	movs	r0, #0
 8008ca0:	f000 fbb2 	bl	8009408 <adc_mode_config>
 8008ca4:	2202      	movs	r2, #2
 8008ca6:	4611      	mov	r1, r2
 8008ca8:	4620      	mov	r0, r4
 8008caa:	f000 fbee 	bl	800948a <adc_channel_length_config>
 8008cae:	4620      	mov	r0, r4
 8008cb0:	2307      	movs	r3, #7
 8008cb2:	2210      	movs	r2, #16
 8008cb4:	2100      	movs	r1, #0
 8008cb6:	f000 fc05 	bl	80094c4 <adc_inserted_channel_config>
 8008cba:	2307      	movs	r3, #7
 8008cbc:	4620      	mov	r0, r4
 8008cbe:	2211      	movs	r2, #17
 8008cc0:	2101      	movs	r1, #1
 8008cc2:	f000 fbff 	bl	80094c4 <adc_inserted_channel_config>
 8008cc6:	2201      	movs	r2, #1
 8008cc8:	2102      	movs	r1, #2
 8008cca:	4620      	mov	r0, r4
 8008ccc:	f000 fc28 	bl	8009520 <adc_external_trigger_config>
 8008cd0:	f000 fb90 	bl	80093f4 <adc_tempsensor_vrefint_enable>
 8008cd4:	4620      	mov	r0, r4
 8008cd6:	f000 fb73 	bl	80093c0 <adc_enable>
 8008cda:	2100      	movs	r1, #0
 8008cdc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8008ce0:	f000 fb56 	bl	8009390 <udelay(unsigned int, unsigned int)>
 8008ce4:	4620      	mov	r0, r4
 8008ce6:	f000 fb73 	bl	80093d0 <adc_calibration_enable>
 8008cea:	4620      	mov	r0, r4
 8008cec:	2102      	movs	r1, #2
 8008cee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008cf2:	f000 bc41 	b.w	8009578 <adc_software_trigger_enable>
 8008cf6:	bf00      	nop
 8008cf8:	40012400 	andmi	r2, r1, r0, lsl #8

08008cfc <gd32_adc_gettemp()>:
 8008cfc:	b508      	push	{r3, lr}
 8008cfe:	4b14      	ldr	r3, [pc, #80]	; (8008d50 <gd32_adc_gettemp()+0x54>)
 8008d00:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8008d54 <gd32_adc_gettemp()+0x58>
 8008d04:	eddf 6a14 	vldr	s13, [pc, #80]	; 8008d58 <gd32_adc_gettemp()+0x5c>
 8008d08:	4814      	ldr	r0, [pc, #80]	; (8008d5c <gd32_adc_gettemp()+0x60>)
 8008d0a:	f203 433c 	addw	r3, r3, #1084	; 0x43c
 8008d0e:	edd3 7a00 	vldr	s15, [r3]
 8008d12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008d16:	ed2d 8b02 	vpush	{d8}
 8008d1a:	ee27 7a67 	vnmul.f32	s14, s14, s15
 8008d1e:	eddf 7a10 	vldr	s15, [pc, #64]	; 8008d60 <gd32_adc_gettemp()+0x64>
 8008d22:	eee7 7a26 	vfma.f32	s15, s14, s13
 8008d26:	2102      	movs	r1, #2
 8008d28:	eeb0 8a67 	vmov.f32	s16, s15
 8008d2c:	f000 fc24 	bl	8009578 <adc_software_trigger_enable>
 8008d30:	eddf 7a0c 	vldr	s15, [pc, #48]	; 8008d64 <gd32_adc_gettemp()+0x68>
 8008d34:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8008d68 <gd32_adc_gettemp()+0x6c>
 8008d38:	ee68 7a27 	vmul.f32	s15, s16, s15
 8008d3c:	ecbd 8b02 	vpop	{d8}
 8008d40:	ee87 0a87 	vdiv.f32	s0, s15, s14
 8008d44:	eef3 7a09 	vmov.f32	s15, #57	; 0x41c80000  25.0
 8008d48:	ee30 0a27 	vadd.f32	s0, s0, s15
 8008d4c:	bd08      	pop	{r3, pc}
 8008d4e:	bf00      	nop
 8008d50:	40012000 	andmi	r2, r1, r0
 8008d54:	40533333 	subsmi	r3, r3, r3, lsr r3
 8008d58:	39800000 	stmibcc	r0, {}	; <UNPREDICTABLE>
 8008d5c:	40012400 	andmi	r2, r1, r0, lsl #8
 8008d60:	3fb70a3d 	svccc	0x00b70a3d
 8008d64:	447a0000 	ldrbtmi	r0, [sl], #-0
 8008d68:	4089999a 	umullmi	r9, r9, sl, r9	; <UNPREDICTABLE>

08008d6c <_stop() [clone .isra.0]>:
 8008d6c:	b508      	push	{r3, lr}
 8008d6e:	4806      	ldr	r0, [pc, #24]	; (8008d88 <_stop() [clone .isra.0]+0x1c>)
 8008d70:	f000 fcb8 	bl	80096e4 <i2c_stop_on_bus>
 8008d74:	4905      	ldr	r1, [pc, #20]	; (8008d8c <_stop() [clone .isra.0]+0x20>)
 8008d76:	f640 73ff 	movw	r3, #4095	; 0xfff
 8008d7a:	f8d1 2400 	ldr.w	r2, [r1, #1024]	; 0x400
 8008d7e:	0592      	lsls	r2, r2, #22
 8008d80:	d501      	bpl.n	8008d86 <_stop() [clone .isra.0]+0x1a>
 8008d82:	3b01      	subs	r3, #1
 8008d84:	d1f9      	bne.n	8008d7a <_stop() [clone .isra.0]+0xe>
 8008d86:	bd08      	pop	{r3, pc}
 8008d88:	40005400 	andmi	r5, r0, r0, lsl #8
 8008d8c:	40005000 	andmi	r5, r0, r0

08008d90 <gd32_i2c_begin>:
 8008d90:	b508      	push	{r3, lr}
 8008d92:	f240 7015 	movw	r0, #1813	; 0x715
 8008d96:	f7ff fc29 	bl	80085ec <rcu_periph_clock_enable>
 8008d9a:	f240 6003 	movw	r0, #1539	; 0x603
 8008d9e:	f7ff fc25 	bl	80085ec <rcu_periph_clock_enable>
 8008da2:	f240 6003 	movw	r0, #1539	; 0x603
 8008da6:	f7ff fc21 	bl	80085ec <rcu_periph_clock_enable>
 8008daa:	4810      	ldr	r0, [pc, #64]	; (8008dec <gd32_i2c_begin+0x5c>)
 8008dac:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008db0:	2203      	movs	r2, #3
 8008db2:	211c      	movs	r1, #28
 8008db4:	f7ff fb82 	bl	80084bc <gpio_init>
 8008db8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008dbc:	2203      	movs	r2, #3
 8008dbe:	480b      	ldr	r0, [pc, #44]	; (8008dec <gd32_i2c_begin+0x5c>)
 8008dc0:	211c      	movs	r1, #28
 8008dc2:	f7ff fb7b 	bl	80084bc <gpio_init>
 8008dc6:	2101      	movs	r1, #1
 8008dc8:	2002      	movs	r0, #2
 8008dca:	f7ff fbd7 	bl	800857c <gpio_pin_remap_config>
 8008dce:	4908      	ldr	r1, [pc, #32]	; (8008df0 <gd32_i2c_begin+0x60>)
 8008dd0:	4808      	ldr	r0, [pc, #32]	; (8008df4 <gd32_i2c_begin+0x64>)
 8008dd2:	2200      	movs	r2, #0
 8008dd4:	f000 fbde 	bl	8009594 <i2c_clock_config>
 8008dd8:	4806      	ldr	r0, [pc, #24]	; (8008df4 <gd32_i2c_begin+0x64>)
 8008dda:	f000 fc79 	bl	80096d0 <i2c_enable>
 8008dde:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8008de2:	4804      	ldr	r0, [pc, #16]	; (8008df4 <gd32_i2c_begin+0x64>)
 8008de4:	2101      	movs	r1, #1
 8008de6:	f000 bc59 	b.w	800969c <i2c_ack_config>
 8008dea:	bf00      	nop
 8008dec:	40010c00 	andmi	r0, r1, r0, lsl #24
 8008df0:	00061a80 	andeq	r1, r6, r0, lsl #21
 8008df4:	40005400 	andmi	r5, r0, r0, lsl #8

08008df8 <gd32_i2c_set_baudrate>:
 8008df8:	4601      	mov	r1, r0
 8008dfa:	2200      	movs	r2, #0
 8008dfc:	4801      	ldr	r0, [pc, #4]	; (8008e04 <gd32_i2c_set_baudrate+0xc>)
 8008dfe:	f000 bbc9 	b.w	8009594 <i2c_clock_config>
 8008e02:	bf00      	nop
 8008e04:	40005400 	andmi	r5, r0, r0, lsl #8

08008e08 <gd32_i2c_set_address>:
 8008e08:	4b01      	ldr	r3, [pc, #4]	; (8008e10 <gd32_i2c_set_address+0x8>)
 8008e0a:	0040      	lsls	r0, r0, #1
 8008e0c:	7018      	strb	r0, [r3, #0]
 8008e0e:	4770      	bx	lr
 8008e10:	20001820 	andcs	r1, r0, r0, lsr #16

08008e14 <gd32_i2c_write>:
 8008e14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e16:	4e30      	ldr	r6, [pc, #192]	; (8008ed8 <gd32_i2c_write+0xc4>)
 8008e18:	4604      	mov	r4, r0
 8008e1a:	460f      	mov	r7, r1
 8008e1c:	f640 75ff 	movw	r5, #4095	; 0xfff
 8008e20:	f240 6101 	movw	r1, #1537	; 0x601
 8008e24:	4630      	mov	r0, r6
 8008e26:	f000 fc67 	bl	80096f8 <i2c_flag_get>
 8008e2a:	b9b0      	cbnz	r0, 8008e5a <gd32_i2c_write+0x46>
 8008e2c:	482a      	ldr	r0, [pc, #168]	; (8008ed8 <gd32_i2c_write+0xc4>)
 8008e2e:	4e2a      	ldr	r6, [pc, #168]	; (8008ed8 <gd32_i2c_write+0xc4>)
 8008e30:	f000 fc53 	bl	80096da <i2c_start_on_bus>
 8008e34:	f640 75ff 	movw	r5, #4095	; 0xfff
 8008e38:	f44f 61a0 	mov.w	r1, #1280	; 0x500
 8008e3c:	4630      	mov	r0, r6
 8008e3e:	f000 fc5b 	bl	80096f8 <i2c_flag_get>
 8008e42:	b190      	cbz	r0, 8008e6a <gd32_i2c_write+0x56>
 8008e44:	4b25      	ldr	r3, [pc, #148]	; (8008edc <gd32_i2c_write+0xc8>)
 8008e46:	4824      	ldr	r0, [pc, #144]	; (8008ed8 <gd32_i2c_write+0xc4>)
 8008e48:	7819      	ldrb	r1, [r3, #0]
 8008e4a:	4e23      	ldr	r6, [pc, #140]	; (8008ed8 <gd32_i2c_write+0xc4>)
 8008e4c:	f06f 0201 	mvn.w	r2, #1
 8008e50:	f000 fc36 	bl	80096c0 <i2c_master_addressing>
 8008e54:	f640 75ff 	movw	r5, #4095	; 0xfff
 8008e58:	e00c      	b.n	8008e74 <gd32_i2c_write+0x60>
 8008e5a:	3d01      	subs	r5, #1
 8008e5c:	d1e0      	bne.n	8008e20 <gd32_i2c_write+0xc>
 8008e5e:	f7ff ff85 	bl	8008d6c <_stop() [clone .isra.0]>
 8008e62:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008e66:	4240      	negs	r0, r0
 8008e68:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008e6a:	3d01      	subs	r5, #1
 8008e6c:	d1e4      	bne.n	8008e38 <gd32_i2c_write+0x24>
 8008e6e:	e7f6      	b.n	8008e5e <gd32_i2c_write+0x4a>
 8008e70:	3d01      	subs	r5, #1
 8008e72:	d0f4      	beq.n	8008e5e <gd32_i2c_write+0x4a>
 8008e74:	f240 5101 	movw	r1, #1281	; 0x501
 8008e78:	4630      	mov	r0, r6
 8008e7a:	f000 fc3d 	bl	80096f8 <i2c_flag_get>
 8008e7e:	2800      	cmp	r0, #0
 8008e80:	d0f6      	beq.n	8008e70 <gd32_i2c_write+0x5c>
 8008e82:	4815      	ldr	r0, [pc, #84]	; (8008ed8 <gd32_i2c_write+0xc4>)
 8008e84:	4e14      	ldr	r6, [pc, #80]	; (8008ed8 <gd32_i2c_write+0xc4>)
 8008e86:	f240 5101 	movw	r1, #1281	; 0x501
 8008e8a:	f000 fc40 	bl	800970e <i2c_flag_clear>
 8008e8e:	f640 75ff 	movw	r5, #4095	; 0xfff
 8008e92:	f240 5107 	movw	r1, #1287	; 0x507
 8008e96:	4630      	mov	r0, r6
 8008e98:	f000 fc2e 	bl	80096f8 <i2c_flag_get>
 8008e9c:	2801      	cmp	r0, #1
 8008e9e:	d107      	bne.n	8008eb0 <gd32_i2c_write+0x9c>
 8008ea0:	4e0d      	ldr	r6, [pc, #52]	; (8008ed8 <gd32_i2c_write+0xc4>)
 8008ea2:	4427      	add	r7, r4
 8008ea4:	42a7      	cmp	r7, r4
 8008ea6:	d106      	bne.n	8008eb6 <gd32_i2c_write+0xa2>
 8008ea8:	f7ff ff60 	bl	8008d6c <_stop() [clone .isra.0]>
 8008eac:	2000      	movs	r0, #0
 8008eae:	e7da      	b.n	8008e66 <gd32_i2c_write+0x52>
 8008eb0:	3d01      	subs	r5, #1
 8008eb2:	d1ee      	bne.n	8008e92 <gd32_i2c_write+0x7e>
 8008eb4:	e7d3      	b.n	8008e5e <gd32_i2c_write+0x4a>
 8008eb6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008eba:	4630      	mov	r0, r6
 8008ebc:	f000 fc17 	bl	80096ee <i2c_data_transmit>
 8008ec0:	f640 75ff 	movw	r5, #4095	; 0xfff
 8008ec4:	f240 5102 	movw	r1, #1282	; 0x502
 8008ec8:	4630      	mov	r0, r6
 8008eca:	f000 fc15 	bl	80096f8 <i2c_flag_get>
 8008ece:	2800      	cmp	r0, #0
 8008ed0:	d1e8      	bne.n	8008ea4 <gd32_i2c_write+0x90>
 8008ed2:	3d01      	subs	r5, #1
 8008ed4:	d1f6      	bne.n	8008ec4 <gd32_i2c_write+0xb0>
 8008ed6:	e7c2      	b.n	8008e5e <gd32_i2c_write+0x4a>
 8008ed8:	40005400 	andmi	r5, r0, r0, lsl #8
 8008edc:	20001820 	andcs	r1, r0, r0, lsr #16

08008ee0 <gd32_i2c_read>:
 8008ee0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008ee4:	4f4d      	ldr	r7, [pc, #308]	; (800901c <gd32_i2c_read+0x13c>)
 8008ee6:	4680      	mov	r8, r0
 8008ee8:	460c      	mov	r4, r1
 8008eea:	f640 76ff 	movw	r6, #4095	; 0xfff
 8008eee:	f240 6101 	movw	r1, #1537	; 0x601
 8008ef2:	4638      	mov	r0, r7
 8008ef4:	f000 fc00 	bl	80096f8 <i2c_flag_get>
 8008ef8:	4605      	mov	r5, r0
 8008efa:	bb08      	cbnz	r0, 8008f40 <gd32_i2c_read+0x60>
 8008efc:	2c02      	cmp	r4, #2
 8008efe:	d103      	bne.n	8008f08 <gd32_i2c_read+0x28>
 8008f00:	4601      	mov	r1, r0
 8008f02:	4846      	ldr	r0, [pc, #280]	; (800901c <gd32_i2c_read+0x13c>)
 8008f04:	f000 fbd3 	bl	80096ae <i2c_ackpos_config>
 8008f08:	4844      	ldr	r0, [pc, #272]	; (800901c <gd32_i2c_read+0x13c>)
 8008f0a:	4f44      	ldr	r7, [pc, #272]	; (800901c <gd32_i2c_read+0x13c>)
 8008f0c:	f000 fbe5 	bl	80096da <i2c_start_on_bus>
 8008f10:	f640 76ff 	movw	r6, #4095	; 0xfff
 8008f14:	f44f 61a0 	mov.w	r1, #1280	; 0x500
 8008f18:	4638      	mov	r0, r7
 8008f1a:	f000 fbed 	bl	80096f8 <i2c_flag_get>
 8008f1e:	b1a8      	cbz	r0, 8008f4c <gd32_i2c_read+0x6c>
 8008f20:	4b3f      	ldr	r3, [pc, #252]	; (8009020 <gd32_i2c_read+0x140>)
 8008f22:	483e      	ldr	r0, [pc, #248]	; (800901c <gd32_i2c_read+0x13c>)
 8008f24:	7819      	ldrb	r1, [r3, #0]
 8008f26:	2201      	movs	r2, #1
 8008f28:	f000 fbca 	bl	80096c0 <i2c_master_addressing>
 8008f2c:	2c02      	cmp	r4, #2
 8008f2e:	d803      	bhi.n	8008f38 <gd32_i2c_read+0x58>
 8008f30:	483a      	ldr	r0, [pc, #232]	; (800901c <gd32_i2c_read+0x13c>)
 8008f32:	2100      	movs	r1, #0
 8008f34:	f000 fbb2 	bl	800969c <i2c_ack_config>
 8008f38:	4f38      	ldr	r7, [pc, #224]	; (800901c <gd32_i2c_read+0x13c>)
 8008f3a:	f640 76ff 	movw	r6, #4095	; 0xfff
 8008f3e:	e00a      	b.n	8008f56 <gd32_i2c_read+0x76>
 8008f40:	3e01      	subs	r6, #1
 8008f42:	d1d4      	bne.n	8008eee <gd32_i2c_read+0xe>
 8008f44:	f7ff ff12 	bl	8008d6c <_stop() [clone .isra.0]>
 8008f48:	2504      	movs	r5, #4
 8008f4a:	e04d      	b.n	8008fe8 <gd32_i2c_read+0x108>
 8008f4c:	3e01      	subs	r6, #1
 8008f4e:	d1e1      	bne.n	8008f14 <gd32_i2c_read+0x34>
 8008f50:	e7f8      	b.n	8008f44 <gd32_i2c_read+0x64>
 8008f52:	3e01      	subs	r6, #1
 8008f54:	d0f6      	beq.n	8008f44 <gd32_i2c_read+0x64>
 8008f56:	f240 5101 	movw	r1, #1281	; 0x501
 8008f5a:	4638      	mov	r0, r7
 8008f5c:	f000 fbcc 	bl	80096f8 <i2c_flag_get>
 8008f60:	2800      	cmp	r0, #0
 8008f62:	d0f6      	beq.n	8008f52 <gd32_i2c_read+0x72>
 8008f64:	482d      	ldr	r0, [pc, #180]	; (800901c <gd32_i2c_read+0x13c>)
 8008f66:	f240 5101 	movw	r1, #1281	; 0x501
 8008f6a:	f000 fbd0 	bl	800970e <i2c_flag_clear>
 8008f6e:	2c01      	cmp	r4, #1
 8008f70:	d102      	bne.n	8008f78 <gd32_i2c_read+0x98>
 8008f72:	482a      	ldr	r0, [pc, #168]	; (800901c <gd32_i2c_read+0x13c>)
 8008f74:	f000 fbb6 	bl	80096e4 <i2c_stop_on_bus>
 8008f78:	4e28      	ldr	r6, [pc, #160]	; (800901c <gd32_i2c_read+0x13c>)
 8008f7a:	f640 77ff 	movw	r7, #4095	; 0xfff
 8008f7e:	e022      	b.n	8008fc6 <gd32_i2c_read+0xe6>
 8008f80:	2c03      	cmp	r4, #3
 8008f82:	d134      	bne.n	8008fee <gd32_i2c_read+0x10e>
 8008f84:	f640 79ff 	movw	r9, #4095	; 0xfff
 8008f88:	e002      	b.n	8008f90 <gd32_i2c_read+0xb0>
 8008f8a:	f1b9 0901 	subs.w	r9, r9, #1
 8008f8e:	d0d9      	beq.n	8008f44 <gd32_i2c_read+0x64>
 8008f90:	f240 5102 	movw	r1, #1282	; 0x502
 8008f94:	4630      	mov	r0, r6
 8008f96:	f000 fbaf 	bl	80096f8 <i2c_flag_get>
 8008f9a:	2800      	cmp	r0, #0
 8008f9c:	d0f5      	beq.n	8008f8a <gd32_i2c_read+0xaa>
 8008f9e:	2100      	movs	r1, #0
 8008fa0:	4630      	mov	r0, r6
 8008fa2:	f000 fb7b 	bl	800969c <i2c_ack_config>
 8008fa6:	f240 5106 	movw	r1, #1286	; 0x506
 8008faa:	4630      	mov	r0, r6
 8008fac:	f000 fba4 	bl	80096f8 <i2c_flag_get>
 8008fb0:	b138      	cbz	r0, 8008fc2 <gd32_i2c_read+0xe2>
 8008fb2:	4630      	mov	r0, r6
 8008fb4:	f000 fb9d 	bl	80096f2 <i2c_data_receive>
 8008fb8:	f808 0b01 	strb.w	r0, [r8], #1
 8008fbc:	3c01      	subs	r4, #1
 8008fbe:	f640 77ff 	movw	r7, #4095	; 0xfff
 8008fc2:	3f01      	subs	r7, #1
 8008fc4:	d0be      	beq.n	8008f44 <gd32_i2c_read+0x64>
 8008fc6:	2c00      	cmp	r4, #0
 8008fc8:	d1da      	bne.n	8008f80 <gd32_i2c_read+0xa0>
 8008fca:	4916      	ldr	r1, [pc, #88]	; (8009024 <gd32_i2c_read+0x144>)
 8008fcc:	f640 73ff 	movw	r3, #4095	; 0xfff
 8008fd0:	f8d1 2400 	ldr.w	r2, [r1, #1024]	; 0x400
 8008fd4:	0592      	lsls	r2, r2, #22
 8008fd6:	d41d      	bmi.n	8009014 <gd32_i2c_read+0x134>
 8008fd8:	4810      	ldr	r0, [pc, #64]	; (800901c <gd32_i2c_read+0x13c>)
 8008fda:	2101      	movs	r1, #1
 8008fdc:	f000 fb5e 	bl	800969c <i2c_ack_config>
 8008fe0:	480e      	ldr	r0, [pc, #56]	; (800901c <gd32_i2c_read+0x13c>)
 8008fe2:	2101      	movs	r1, #1
 8008fe4:	f000 fb63 	bl	80096ae <i2c_ackpos_config>
 8008fe8:	4628      	mov	r0, r5
 8008fea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008fee:	2c02      	cmp	r4, #2
 8008ff0:	d1d9      	bne.n	8008fa6 <gd32_i2c_read+0xc6>
 8008ff2:	f640 79ff 	movw	r9, #4095	; 0xfff
 8008ff6:	e002      	b.n	8008ffe <gd32_i2c_read+0x11e>
 8008ff8:	f1b9 0901 	subs.w	r9, r9, #1
 8008ffc:	d0a2      	beq.n	8008f44 <gd32_i2c_read+0x64>
 8008ffe:	f240 5102 	movw	r1, #1282	; 0x502
 8009002:	4630      	mov	r0, r6
 8009004:	f000 fb78 	bl	80096f8 <i2c_flag_get>
 8009008:	2800      	cmp	r0, #0
 800900a:	d0f5      	beq.n	8008ff8 <gd32_i2c_read+0x118>
 800900c:	4630      	mov	r0, r6
 800900e:	f000 fb69 	bl	80096e4 <i2c_stop_on_bus>
 8009012:	e7c8      	b.n	8008fa6 <gd32_i2c_read+0xc6>
 8009014:	3b01      	subs	r3, #1
 8009016:	d1db      	bne.n	8008fd0 <gd32_i2c_read+0xf0>
 8009018:	e796      	b.n	8008f48 <gd32_i2c_read+0x68>
 800901a:	bf00      	nop
 800901c:	40005400 	andmi	r5, r0, r0, lsl #8
 8009020:	20001820 	andcs	r1, r0, r0, lsr #16
 8009024:	40005000 	andmi	r5, r0, r0

08009028 <gd32_spi_dma_begin()>:
 8009028:	b530      	push	{r4, r5, lr}
 800902a:	f240 6002 	movw	r0, #1538	; 0x602
 800902e:	b089      	sub	sp, #36	; 0x24
 8009030:	f7ff fadc 	bl	80085ec <rcu_periph_clock_enable>
 8009034:	f240 6003 	movw	r0, #1539	; 0x603
 8009038:	f7ff fad8 	bl	80085ec <rcu_periph_clock_enable>
 800903c:	f240 700f 	movw	r0, #1807	; 0x70f
 8009040:	f7ff fad4 	bl	80085ec <rcu_periph_clock_enable>
 8009044:	f44f 60c0 	mov.w	r0, #1536	; 0x600
 8009048:	f7ff fad0 	bl	80085ec <rcu_periph_clock_enable>
 800904c:	4829      	ldr	r0, [pc, #164]	; (80090f4 <gd32_spi_dma_begin()+0xcc>)
 800904e:	4c2a      	ldr	r4, [pc, #168]	; (80090f8 <gd32_spi_dma_begin()+0xd0>)
 8009050:	2338      	movs	r3, #56	; 0x38
 8009052:	2203      	movs	r2, #3
 8009054:	2118      	movs	r1, #24
 8009056:	f7ff fa31 	bl	80084bc <gpio_init>
 800905a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800905e:	2203      	movs	r2, #3
 8009060:	4826      	ldr	r0, [pc, #152]	; (80090fc <gd32_spi_dma_begin()+0xd4>)
 8009062:	2118      	movs	r1, #24
 8009064:	f7ff fa2a 	bl	80084bc <gpio_init>
 8009068:	2101      	movs	r1, #1
 800906a:	4825      	ldr	r0, [pc, #148]	; (8009100 <gd32_spi_dma_begin()+0xd8>)
 800906c:	f7ff fa86 	bl	800857c <gpio_pin_remap_config>
 8009070:	4824      	ldr	r0, [pc, #144]	; (8009104 <gd32_spi_dma_begin()+0xdc>)
 8009072:	f000 fba4 	bl	80097be <i2s_disable>
 8009076:	2300      	movs	r3, #0
 8009078:	461a      	mov	r2, r3
 800907a:	4923      	ldr	r1, [pc, #140]	; (8009108 <gd32_spi_dma_begin()+0xe0>)
 800907c:	4821      	ldr	r0, [pc, #132]	; (8009104 <gd32_spi_dma_begin()+0xdc>)
 800907e:	f000 fb67 	bl	8009750 <i2s_psc_config>
 8009082:	2300      	movs	r3, #0
 8009084:	2210      	movs	r2, #16
 8009086:	f44f 7100 	mov.w	r1, #512	; 0x200
 800908a:	481e      	ldr	r0, [pc, #120]	; (8009104 <gd32_spi_dma_begin()+0xdc>)
 800908c:	f000 fb51 	bl	8009732 <i2s_init>
 8009090:	481c      	ldr	r0, [pc, #112]	; (8009104 <gd32_spi_dma_begin()+0xdc>)
 8009092:	f000 fb8f 	bl	80097b4 <i2s_enable>
 8009096:	f240 5001 	movw	r0, #1281	; 0x501
 800909a:	f7ff faa7 	bl	80085ec <rcu_periph_clock_enable>
 800909e:	2101      	movs	r1, #1
 80090a0:	4620      	mov	r0, r4
 80090a2:	f7ff f8ff 	bl	80082a4 <dma_deinit>
 80090a6:	a801      	add	r0, sp, #4
 80090a8:	f7ff f918 	bl	80082dc <dma_struct_para_init>
 80090ac:	4917      	ldr	r1, [pc, #92]	; (800910c <gd32_spi_dma_begin()+0xe4>)
 80090ae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80090b2:	2501      	movs	r5, #1
 80090b4:	9304      	str	r3, [sp, #16]
 80090b6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80090ba:	f44f 7380 	mov.w	r3, #256	; 0x100
 80090be:	e9cd 1301 	strd	r1, r3, [sp, #4]
 80090c2:	9206      	str	r2, [sp, #24]
 80090c4:	4629      	mov	r1, r5
 80090c6:	aa01      	add	r2, sp, #4
 80090c8:	4620      	mov	r0, r4
 80090ca:	f8ad 301c 	strh.w	r3, [sp, #28]
 80090ce:	f88d 501e 	strb.w	r5, [sp, #30]
 80090d2:	f7ff f90f 	bl	80082f4 <dma_init>
 80090d6:	4629      	mov	r1, r5
 80090d8:	4620      	mov	r0, r4
 80090da:	f7ff f945 	bl	8008368 <dma_circulation_disable>
 80090de:	4629      	mov	r1, r5
 80090e0:	4620      	mov	r0, r4
 80090e2:	f7ff f951 	bl	8008388 <dma_memory_to_memory_disable>
 80090e6:	4b0a      	ldr	r3, [pc, #40]	; (8009110 <gd32_spi_dma_begin()+0xe8>)
 80090e8:	2200      	movs	r2, #0
 80090ea:	f8c3 2420 	str.w	r2, [r3, #1056]	; 0x420
 80090ee:	b009      	add	sp, #36	; 0x24
 80090f0:	bd30      	pop	{r4, r5, pc}
 80090f2:	bf00      	nop
 80090f4:	40010c00 	andmi	r0, r1, r0, lsl #24
 80090f8:	40020400 	andmi	r0, r2, r0, lsl #8
 80090fc:	40010800 	andmi	r0, r1, r0, lsl #16
 8009100:	00300400 	eorseq	r0, r0, r0, lsl #8
 8009104:	40003c00 	andmi	r3, r0, r0, lsl #24
 8009108:	00030d40 	andeq	r0, r3, r0, asr #26
 800910c:	40003c0c 	andmi	r3, r0, ip, lsl #24
 8009110:	40020000 	andmi	r0, r2, r0

08009114 <gd32_spi_dma_set_speed_hz(unsigned int)>:
 8009114:	b510      	push	{r4, lr}
 8009116:	4604      	mov	r4, r0
 8009118:	4806      	ldr	r0, [pc, #24]	; (8009134 <gd32_spi_dma_set_speed_hz(unsigned int)+0x20>)
 800911a:	f000 fb50 	bl	80097be <i2s_disable>
 800911e:	2300      	movs	r3, #0
 8009120:	4804      	ldr	r0, [pc, #16]	; (8009134 <gd32_spi_dma_set_speed_hz(unsigned int)+0x20>)
 8009122:	0961      	lsrs	r1, r4, #5
 8009124:	461a      	mov	r2, r3
 8009126:	f000 fb13 	bl	8009750 <i2s_psc_config>
 800912a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800912e:	4801      	ldr	r0, [pc, #4]	; (8009134 <gd32_spi_dma_set_speed_hz(unsigned int)+0x20>)
 8009130:	f000 bb40 	b.w	80097b4 <i2s_enable>
 8009134:	40003c00 	andmi	r3, r0, r0, lsl #24

08009138 <gd32_spi_dma_tx_prepare(unsigned int*)>:
 8009138:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 800913c:	6003      	str	r3, [r0, #0]
 800913e:	4801      	ldr	r0, [pc, #4]	; (8009144 <gd32_spi_dma_tx_prepare(unsigned int*)+0xc>)
 8009140:	4770      	bx	lr
 8009142:	bf00      	nop
 8009144:	20001824 	andcs	r1, r0, r4, lsr #16

08009148 <gd32_spi_dma_tx_start(unsigned char const*, unsigned int)>:
 8009148:	4a0a      	ldr	r2, [pc, #40]	; (8009174 <gd32_spi_dma_tx_start(unsigned char const*, unsigned int)+0x2c>)
 800914a:	f8d2 341c 	ldr.w	r3, [r2, #1052]	; 0x41c
 800914e:	3101      	adds	r1, #1
 8009150:	f023 0301 	bic.w	r3, r3, #1
 8009154:	f8c2 341c 	str.w	r3, [r2, #1052]	; 0x41c
 8009158:	f3c1 014f 	ubfx	r1, r1, #1, #16
 800915c:	f043 0301 	orr.w	r3, r3, #1
 8009160:	f8c2 0428 	str.w	r0, [r2, #1064]	; 0x428
 8009164:	f8c2 1420 	str.w	r1, [r2, #1056]	; 0x420
 8009168:	4803      	ldr	r0, [pc, #12]	; (8009178 <gd32_spi_dma_tx_start(unsigned char const*, unsigned int)+0x30>)
 800916a:	f8c2 341c 	str.w	r3, [r2, #1052]	; 0x41c
 800916e:	2100      	movs	r1, #0
 8009170:	f000 bb2a 	b.w	80097c8 <spi_dma_enable>
 8009174:	40020000 	andmi	r0, r2, r0
 8009178:	40003c00 	andmi	r3, r0, r0, lsl #24

0800917c <gd32_spi_dma_tx_is_active()>:
 800917c:	4b03      	ldr	r3, [pc, #12]	; (800918c <gd32_spi_dma_tx_is_active()+0x10>)
 800917e:	f8d3 0420 	ldr.w	r0, [r3, #1056]	; 0x420
 8009182:	3800      	subs	r0, #0
 8009184:	bf18      	it	ne
 8009186:	2001      	movne	r0, #1
 8009188:	4770      	bx	lr
 800918a:	bf00      	nop
 800918c:	40020000 	andmi	r0, r2, r0

08009190 <gd32_uart_begin>:
 8009190:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009192:	461e      	mov	r6, r3
 8009194:	4b63      	ldr	r3, [pc, #396]	; (8009324 <gd32_uart_begin+0x194>)
 8009196:	4298      	cmp	r0, r3
 8009198:	4604      	mov	r4, r0
 800919a:	460f      	mov	r7, r1
 800919c:	4615      	mov	r5, r2
 800919e:	d03b      	beq.n	8009218 <gd32_uart_begin+0x88>
 80091a0:	d80a      	bhi.n	80091b8 <gd32_uart_begin+0x28>
 80091a2:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 80091a6:	4298      	cmp	r0, r3
 80091a8:	d02f      	beq.n	800920a <gd32_uart_begin+0x7a>
 80091aa:	f240 7012 	movw	r0, #1810	; 0x712
 80091ae:	f7ff fa1d 	bl	80085ec <rcu_periph_clock_enable>
 80091b2:	f240 6004 	movw	r0, #1540	; 0x604
 80091b6:	e008      	b.n	80091ca <gd32_uart_begin+0x3a>
 80091b8:	4b5b      	ldr	r3, [pc, #364]	; (8009328 <gd32_uart_begin+0x198>)
 80091ba:	4298      	cmp	r0, r3
 80091bc:	d02f      	beq.n	800921e <gd32_uart_begin+0x8e>
 80091be:	f240 600e 	movw	r0, #1550	; 0x60e
 80091c2:	f7ff fa13 	bl	80085ec <rcu_periph_clock_enable>
 80091c6:	f240 6003 	movw	r0, #1539	; 0x603
 80091ca:	f7ff fa0f 	bl	80085ec <rcu_periph_clock_enable>
 80091ce:	f44f 60c0 	mov.w	r0, #1536	; 0x600
 80091d2:	f7ff fa0b 	bl	80085ec <rcu_periph_clock_enable>
 80091d6:	4b53      	ldr	r3, [pc, #332]	; (8009324 <gd32_uart_begin+0x194>)
 80091d8:	429c      	cmp	r4, r3
 80091da:	f000 8084 	beq.w	80092e6 <gd32_uart_begin+0x156>
 80091de:	d829      	bhi.n	8009234 <gd32_uart_begin+0xa4>
 80091e0:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 80091e4:	429c      	cmp	r4, r3
 80091e6:	d071      	beq.n	80092cc <gd32_uart_begin+0x13c>
 80091e8:	4850      	ldr	r0, [pc, #320]	; (800932c <gd32_uart_begin+0x19c>)
 80091ea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80091ee:	2203      	movs	r2, #3
 80091f0:	2118      	movs	r1, #24
 80091f2:	f7ff f963 	bl	80084bc <gpio_init>
 80091f6:	484d      	ldr	r0, [pc, #308]	; (800932c <gd32_uart_begin+0x19c>)
 80091f8:	2104      	movs	r1, #4
 80091fa:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80091fe:	2203      	movs	r2, #3
 8009200:	f7ff f95c 	bl	80084bc <gpio_init>
 8009204:	484a      	ldr	r0, [pc, #296]	; (8009330 <gd32_uart_begin+0x1a0>)
 8009206:	2101      	movs	r1, #1
 8009208:	e025      	b.n	8009256 <gd32_uart_begin+0xc6>
 800920a:	f240 7011 	movw	r0, #1809	; 0x711
 800920e:	f7ff f9ed 	bl	80085ec <rcu_periph_clock_enable>
 8009212:	f240 6002 	movw	r0, #1538	; 0x602
 8009216:	e7d8      	b.n	80091ca <gd32_uart_begin+0x3a>
 8009218:	f240 7013 	movw	r0, #1811	; 0x713
 800921c:	e7c7      	b.n	80091ae <gd32_uart_begin+0x1e>
 800921e:	f240 7014 	movw	r0, #1812	; 0x714
 8009222:	f7ff f9e3 	bl	80085ec <rcu_periph_clock_enable>
 8009226:	f240 6004 	movw	r0, #1540	; 0x604
 800922a:	f7ff f9df 	bl	80085ec <rcu_periph_clock_enable>
 800922e:	f240 6005 	movw	r0, #1541	; 0x605
 8009232:	e7ca      	b.n	80091ca <gd32_uart_begin+0x3a>
 8009234:	4b3c      	ldr	r3, [pc, #240]	; (8009328 <gd32_uart_begin+0x198>)
 8009236:	429c      	cmp	r4, r3
 8009238:	d062      	beq.n	8009300 <gd32_uart_begin+0x170>
 800923a:	483e      	ldr	r0, [pc, #248]	; (8009334 <gd32_uart_begin+0x1a4>)
 800923c:	2340      	movs	r3, #64	; 0x40
 800923e:	2203      	movs	r2, #3
 8009240:	2118      	movs	r1, #24
 8009242:	f7ff f93b 	bl	80084bc <gpio_init>
 8009246:	483b      	ldr	r0, [pc, #236]	; (8009334 <gd32_uart_begin+0x1a4>)
 8009248:	2104      	movs	r1, #4
 800924a:	2380      	movs	r3, #128	; 0x80
 800924c:	2203      	movs	r2, #3
 800924e:	f7ff f935 	bl	80084bc <gpio_init>
 8009252:	2101      	movs	r1, #1
 8009254:	2004      	movs	r0, #4
 8009256:	f7ff f991 	bl	800857c <gpio_pin_remap_config>
 800925a:	4620      	mov	r0, r4
 800925c:	f7ff fc3a 	bl	8008ad4 <usart_deinit>
 8009260:	68e3      	ldr	r3, [r4, #12]
 8009262:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009266:	60e3      	str	r3, [r4, #12]
 8009268:	4639      	mov	r1, r7
 800926a:	4620      	mov	r0, r4
 800926c:	f7ff fc72 	bl	8008b54 <usart_baudrate_set>
 8009270:	f1a5 0309 	sub.w	r3, r5, #9
 8009274:	4259      	negs	r1, r3
 8009276:	4159      	adcs	r1, r3
 8009278:	0309      	lsls	r1, r1, #12
 800927a:	4620      	mov	r0, r4
 800927c:	f7ff fc9a 	bl	8008bb4 <usart_word_length_set>
 8009280:	9906      	ldr	r1, [sp, #24]
 8009282:	1e8a      	subs	r2, r1, #2
 8009284:	4251      	negs	r1, r2
 8009286:	4151      	adcs	r1, r2
 8009288:	0349      	lsls	r1, r1, #13
 800928a:	4620      	mov	r0, r4
 800928c:	f7ff fc9a 	bl	8008bc4 <usart_stop_bit_set>
 8009290:	2e01      	cmp	r6, #1
 8009292:	d041      	beq.n	8009318 <gd32_uart_begin+0x188>
 8009294:	2e02      	cmp	r6, #2
 8009296:	d142      	bne.n	800931e <gd32_uart_begin+0x18e>
 8009298:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800929c:	4620      	mov	r0, r4
 800929e:	f7ff fc81 	bl	8008ba4 <usart_parity_config>
 80092a2:	2100      	movs	r1, #0
 80092a4:	4620      	mov	r0, r4
 80092a6:	f7ff fca1 	bl	8008bec <usart_hardware_flow_rts_config>
 80092aa:	2100      	movs	r1, #0
 80092ac:	4620      	mov	r0, r4
 80092ae:	f7ff fca3 	bl	8008bf8 <usart_hardware_flow_cts_config>
 80092b2:	2104      	movs	r1, #4
 80092b4:	4620      	mov	r0, r4
 80092b6:	f7ff fc93 	bl	8008be0 <usart_receive_config>
 80092ba:	2108      	movs	r1, #8
 80092bc:	4620      	mov	r0, r4
 80092be:	f7ff fc89 	bl	8008bd4 <usart_transmit_config>
 80092c2:	68e3      	ldr	r3, [r4, #12]
 80092c4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80092c8:	60e3      	str	r3, [r4, #12]
 80092ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80092cc:	481a      	ldr	r0, [pc, #104]	; (8009338 <gd32_uart_begin+0x1a8>)
 80092ce:	2304      	movs	r3, #4
 80092d0:	2203      	movs	r2, #3
 80092d2:	2118      	movs	r1, #24
 80092d4:	f7ff f8f2 	bl	80084bc <gpio_init>
 80092d8:	4817      	ldr	r0, [pc, #92]	; (8009338 <gd32_uart_begin+0x1a8>)
 80092da:	2308      	movs	r3, #8
 80092dc:	2203      	movs	r2, #3
 80092de:	2104      	movs	r1, #4
 80092e0:	f7ff f8ec 	bl	80084bc <gpio_init>
 80092e4:	e7b9      	b.n	800925a <gd32_uart_begin+0xca>
 80092e6:	4811      	ldr	r0, [pc, #68]	; (800932c <gd32_uart_begin+0x19c>)
 80092e8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80092ec:	2203      	movs	r2, #3
 80092ee:	2118      	movs	r1, #24
 80092f0:	f7ff f8e4 	bl	80084bc <gpio_init>
 80092f4:	480d      	ldr	r0, [pc, #52]	; (800932c <gd32_uart_begin+0x19c>)
 80092f6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80092fa:	2203      	movs	r2, #3
 80092fc:	2104      	movs	r1, #4
 80092fe:	e7ef      	b.n	80092e0 <gd32_uart_begin+0x150>
 8009300:	480a      	ldr	r0, [pc, #40]	; (800932c <gd32_uart_begin+0x19c>)
 8009302:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009306:	2203      	movs	r2, #3
 8009308:	2118      	movs	r1, #24
 800930a:	f7ff f8d7 	bl	80084bc <gpio_init>
 800930e:	2304      	movs	r3, #4
 8009310:	480a      	ldr	r0, [pc, #40]	; (800933c <gd32_uart_begin+0x1ac>)
 8009312:	2203      	movs	r2, #3
 8009314:	4619      	mov	r1, r3
 8009316:	e7e3      	b.n	80092e0 <gd32_uart_begin+0x150>
 8009318:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800931c:	e7be      	b.n	800929c <gd32_uart_begin+0x10c>
 800931e:	2100      	movs	r1, #0
 8009320:	e7bc      	b.n	800929c <gd32_uart_begin+0x10c>
 8009322:	bf00      	nop
 8009324:	40004c00 	andmi	r4, r0, r0, lsl #24
 8009328:	40005000 	andmi	r5, r0, r0
 800932c:	40011000 	andmi	r1, r1, r0
 8009330:	00140010 	andseq	r0, r4, r0, lsl r0
 8009334:	40010c00 	andmi	r0, r1, r0, lsl #24
 8009338:	40010800 	andmi	r0, r1, r0, lsl #16
 800933c:	40011400 	andmi	r1, r1, r0, lsl #8

08009340 <mac_address_get(unsigned char*)>:
 8009340:	4a07      	ldr	r2, [pc, #28]	; (8009360 <mac_address_get(unsigned char*)+0x20>)
 8009342:	f8d2 37e8 	ldr.w	r3, [r2, #2024]	; 0x7e8
 8009346:	f8d2 27ec 	ldr.w	r2, [r2, #2028]	; 0x7ec
 800934a:	7042      	strb	r2, [r0, #1]
 800934c:	0e1a      	lsrs	r2, r3, #24
 800934e:	7082      	strb	r2, [r0, #2]
 8009350:	0c1a      	lsrs	r2, r3, #16
 8009352:	2102      	movs	r1, #2
 8009354:	70c2      	strb	r2, [r0, #3]
 8009356:	0a1a      	lsrs	r2, r3, #8
 8009358:	7001      	strb	r1, [r0, #0]
 800935a:	7102      	strb	r2, [r0, #4]
 800935c:	7143      	strb	r3, [r0, #5]
 800935e:	4770      	bx	lr
 8009360:	1ffff000 	svcne	0x00fff000

08009364 <micros_init()>:
 8009364:	4770      	bx	lr
	...

08009368 <udelay_init()>:
 8009368:	4a07      	ldr	r2, [pc, #28]	; (8009388 <udelay_init()+0x20>)
 800936a:	f8d2 30fc 	ldr.w	r3, [r2, #252]	; 0xfc
 800936e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8009372:	f8c2 30fc 	str.w	r3, [r2, #252]	; 0xfc
 8009376:	4b05      	ldr	r3, [pc, #20]	; (800938c <udelay_init()+0x24>)
 8009378:	2200      	movs	r2, #0
 800937a:	605a      	str	r2, [r3, #4]
 800937c:	681a      	ldr	r2, [r3, #0]
 800937e:	f042 0201 	orr.w	r2, r2, #1
 8009382:	601a      	str	r2, [r3, #0]
 8009384:	4770      	bx	lr
 8009386:	bf00      	nop
 8009388:	e000ed00 	and	lr, r0, r0, lsl #26
 800938c:	e0001000 	and	r1, r0, r0

08009390 <udelay(unsigned int, unsigned int)>:
 8009390:	2378      	movs	r3, #120	; 0x78
 8009392:	b530      	push	{r4, r5, lr}
 8009394:	4358      	muls	r0, r3
 8009396:	b909      	cbnz	r1, 800939c <udelay(unsigned int, unsigned int)+0xc>
 8009398:	4b08      	ldr	r3, [pc, #32]	; (80093bc <udelay(unsigned int, unsigned int)+0x2c>)
 800939a:	6859      	ldr	r1, [r3, #4]
 800939c:	4c07      	ldr	r4, [pc, #28]	; (80093bc <udelay(unsigned int, unsigned int)+0x2c>)
 800939e:	2300      	movs	r3, #0
 80093a0:	6862      	ldr	r2, [r4, #4]
 80093a2:	4291      	cmp	r1, r2
 80093a4:	d0fc      	beq.n	80093a0 <udelay(unsigned int, unsigned int)+0x10>
 80093a6:	bf2a      	itet	cs
 80093a8:	f102 35ff 	addcs.w	r5, r2, #4294967295	; 0xffffffff
 80093ac:	189b      	addcc	r3, r3, r2
 80093ae:	195b      	addcs	r3, r3, r5
 80093b0:	1a5b      	subs	r3, r3, r1
 80093b2:	4283      	cmp	r3, r0
 80093b4:	d300      	bcc.n	80093b8 <udelay(unsigned int, unsigned int)+0x28>
 80093b6:	bd30      	pop	{r4, r5, pc}
 80093b8:	4611      	mov	r1, r2
 80093ba:	e7f1      	b.n	80093a0 <udelay(unsigned int, unsigned int)+0x10>
 80093bc:	e0001000 	and	r1, r0, r0

080093c0 <adc_enable>:
 80093c0:	6883      	ldr	r3, [r0, #8]
 80093c2:	07db      	lsls	r3, r3, #31
 80093c4:	bf5e      	ittt	pl
 80093c6:	6883      	ldrpl	r3, [r0, #8]
 80093c8:	f043 0301 	orrpl.w	r3, r3, #1
 80093cc:	6083      	strpl	r3, [r0, #8]
 80093ce:	4770      	bx	lr

080093d0 <adc_calibration_enable>:
 80093d0:	6883      	ldr	r3, [r0, #8]
 80093d2:	f043 0308 	orr.w	r3, r3, #8
 80093d6:	f100 0208 	add.w	r2, r0, #8
 80093da:	6083      	str	r3, [r0, #8]
 80093dc:	6813      	ldr	r3, [r2, #0]
 80093de:	0719      	lsls	r1, r3, #28
 80093e0:	d4fc      	bmi.n	80093dc <adc_calibration_enable+0xc>
 80093e2:	6883      	ldr	r3, [r0, #8]
 80093e4:	f043 0304 	orr.w	r3, r3, #4
 80093e8:	6083      	str	r3, [r0, #8]
 80093ea:	6813      	ldr	r3, [r2, #0]
 80093ec:	075b      	lsls	r3, r3, #29
 80093ee:	d4fc      	bmi.n	80093ea <adc_calibration_enable+0x1a>
 80093f0:	4770      	bx	lr
	...

080093f4 <adc_tempsensor_vrefint_enable>:
 80093f4:	4a03      	ldr	r2, [pc, #12]	; (8009404 <adc_tempsensor_vrefint_enable+0x10>)
 80093f6:	f8d2 3408 	ldr.w	r3, [r2, #1032]	; 0x408
 80093fa:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80093fe:	f8c2 3408 	str.w	r3, [r2, #1032]	; 0x408
 8009402:	4770      	bx	lr
 8009404:	40012000 	andmi	r2, r1, r0

08009408 <adc_mode_config>:
 8009408:	4b06      	ldr	r3, [pc, #24]	; (8009424 <adc_mode_config+0x1c>)
 800940a:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 800940e:	f422 2270 	bic.w	r2, r2, #983040	; 0xf0000
 8009412:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
 8009416:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 800941a:	4310      	orrs	r0, r2
 800941c:	f8c3 0404 	str.w	r0, [r3, #1028]	; 0x404
 8009420:	4770      	bx	lr
 8009422:	bf00      	nop
 8009424:	40012000 	andmi	r2, r1, r0

08009428 <adc_special_function_config>:
 8009428:	b510      	push	{r4, lr}
 800942a:	f401 7380 	and.w	r3, r1, #256	; 0x100
 800942e:	f401 6480 	and.w	r4, r1, #1024	; 0x400
 8009432:	f001 0102 	and.w	r1, r1, #2
 8009436:	b17a      	cbz	r2, 8009458 <adc_special_function_config+0x30>
 8009438:	b11b      	cbz	r3, 8009442 <adc_special_function_config+0x1a>
 800943a:	6843      	ldr	r3, [r0, #4]
 800943c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009440:	6043      	str	r3, [r0, #4]
 8009442:	b11c      	cbz	r4, 800944c <adc_special_function_config+0x24>
 8009444:	6843      	ldr	r3, [r0, #4]
 8009446:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800944a:	6043      	str	r3, [r0, #4]
 800944c:	b119      	cbz	r1, 8009456 <adc_special_function_config+0x2e>
 800944e:	6883      	ldr	r3, [r0, #8]
 8009450:	f043 0302 	orr.w	r3, r3, #2
 8009454:	6083      	str	r3, [r0, #8]
 8009456:	bd10      	pop	{r4, pc}
 8009458:	b11b      	cbz	r3, 8009462 <adc_special_function_config+0x3a>
 800945a:	6843      	ldr	r3, [r0, #4]
 800945c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009460:	6043      	str	r3, [r0, #4]
 8009462:	b11c      	cbz	r4, 800946c <adc_special_function_config+0x44>
 8009464:	6843      	ldr	r3, [r0, #4]
 8009466:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800946a:	6043      	str	r3, [r0, #4]
 800946c:	2900      	cmp	r1, #0
 800946e:	d0f2      	beq.n	8009456 <adc_special_function_config+0x2e>
 8009470:	6883      	ldr	r3, [r0, #8]
 8009472:	f023 0302 	bic.w	r3, r3, #2
 8009476:	e7ed      	b.n	8009454 <adc_special_function_config+0x2c>

08009478 <adc_data_alignment_config>:
 8009478:	6883      	ldr	r3, [r0, #8]
 800947a:	b119      	cbz	r1, 8009484 <adc_data_alignment_config+0xc>
 800947c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8009480:	6083      	str	r3, [r0, #8]
 8009482:	4770      	bx	lr
 8009484:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009488:	e7fa      	b.n	8009480 <adc_data_alignment_config+0x8>

0800948a <adc_channel_length_config>:
 800948a:	2901      	cmp	r1, #1
 800948c:	d002      	beq.n	8009494 <adc_channel_length_config+0xa>
 800948e:	2902      	cmp	r1, #2
 8009490:	d00c      	beq.n	80094ac <adc_channel_length_config+0x22>
 8009492:	4770      	bx	lr
 8009494:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8009496:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800949a:	62c3      	str	r3, [r0, #44]	; 0x2c
 800949c:	3a01      	subs	r2, #1
 800949e:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 80094a0:	0512      	lsls	r2, r2, #20
 80094a2:	f402 0270 	and.w	r2, r2, #15728640	; 0xf00000
 80094a6:	431a      	orrs	r2, r3
 80094a8:	62c2      	str	r2, [r0, #44]	; 0x2c
 80094aa:	4770      	bx	lr
 80094ac:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80094ae:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 80094b2:	6383      	str	r3, [r0, #56]	; 0x38
 80094b4:	3a01      	subs	r2, #1
 80094b6:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80094b8:	0512      	lsls	r2, r2, #20
 80094ba:	f402 1240 	and.w	r2, r2, #3145728	; 0x300000
 80094be:	431a      	orrs	r2, r3
 80094c0:	6382      	str	r2, [r0, #56]	; 0x38
 80094c2:	4770      	bx	lr

080094c4 <adc_inserted_channel_config>:
 80094c4:	b530      	push	{r4, r5, lr}
 80094c6:	6b85      	ldr	r5, [r0, #56]	; 0x38
 80094c8:	6b84      	ldr	r4, [r0, #56]	; 0x38
 80094ca:	f3c5 5501 	ubfx	r5, r5, #20, #2
 80094ce:	3103      	adds	r1, #3
 80094d0:	1b49      	subs	r1, r1, r5
 80094d2:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 80094d6:	251f      	movs	r5, #31
 80094d8:	408d      	lsls	r5, r1
 80094da:	ea24 0405 	bic.w	r4, r4, r5
 80094de:	fa02 f101 	lsl.w	r1, r2, r1
 80094e2:	4321      	orrs	r1, r4
 80094e4:	2a09      	cmp	r2, #9
 80094e6:	6381      	str	r1, [r0, #56]	; 0x38
 80094e8:	d80a      	bhi.n	8009500 <adc_inserted_channel_config+0x3c>
 80094ea:	6901      	ldr	r1, [r0, #16]
 80094ec:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80094f0:	2407      	movs	r4, #7
 80094f2:	4094      	lsls	r4, r2
 80094f4:	ea21 0104 	bic.w	r1, r1, r4
 80094f8:	4093      	lsls	r3, r2
 80094fa:	430b      	orrs	r3, r1
 80094fc:	6103      	str	r3, [r0, #16]
 80094fe:	bd30      	pop	{r4, r5, pc}
 8009500:	2a11      	cmp	r2, #17
 8009502:	d8fc      	bhi.n	80094fe <adc_inserted_channel_config+0x3a>
 8009504:	2103      	movs	r1, #3
 8009506:	f06f 051d 	mvn.w	r5, #29
 800950a:	fb11 5202 	smlabb	r2, r1, r2, r5
 800950e:	68c4      	ldr	r4, [r0, #12]
 8009510:	2107      	movs	r1, #7
 8009512:	4091      	lsls	r1, r2
 8009514:	ea24 0101 	bic.w	r1, r4, r1
 8009518:	4093      	lsls	r3, r2
 800951a:	430b      	orrs	r3, r1
 800951c:	60c3      	str	r3, [r0, #12]
 800951e:	e7ee      	b.n	80094fe <adc_inserted_channel_config+0x3a>

08009520 <adc_external_trigger_config>:
 8009520:	f001 0301 	and.w	r3, r1, #1
 8009524:	f001 0102 	and.w	r1, r1, #2
 8009528:	b152      	cbz	r2, 8009540 <adc_external_trigger_config+0x20>
 800952a:	b11b      	cbz	r3, 8009534 <adc_external_trigger_config+0x14>
 800952c:	6883      	ldr	r3, [r0, #8]
 800952e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009532:	6083      	str	r3, [r0, #8]
 8009534:	b119      	cbz	r1, 800953e <adc_external_trigger_config+0x1e>
 8009536:	6883      	ldr	r3, [r0, #8]
 8009538:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800953c:	6083      	str	r3, [r0, #8]
 800953e:	4770      	bx	lr
 8009540:	b11b      	cbz	r3, 800954a <adc_external_trigger_config+0x2a>
 8009542:	6883      	ldr	r3, [r0, #8]
 8009544:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8009548:	6083      	str	r3, [r0, #8]
 800954a:	2900      	cmp	r1, #0
 800954c:	d0f7      	beq.n	800953e <adc_external_trigger_config+0x1e>
 800954e:	6883      	ldr	r3, [r0, #8]
 8009550:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8009554:	e7f2      	b.n	800953c <adc_external_trigger_config+0x1c>

08009556 <adc_external_trigger_source_config>:
 8009556:	2901      	cmp	r1, #1
 8009558:	d002      	beq.n	8009560 <adc_external_trigger_source_config+0xa>
 800955a:	2902      	cmp	r1, #2
 800955c:	d008      	beq.n	8009570 <adc_external_trigger_source_config+0x1a>
 800955e:	4770      	bx	lr
 8009560:	6883      	ldr	r3, [r0, #8]
 8009562:	f423 2360 	bic.w	r3, r3, #917504	; 0xe0000
 8009566:	6083      	str	r3, [r0, #8]
 8009568:	6883      	ldr	r3, [r0, #8]
 800956a:	4313      	orrs	r3, r2
 800956c:	6083      	str	r3, [r0, #8]
 800956e:	4770      	bx	lr
 8009570:	6883      	ldr	r3, [r0, #8]
 8009572:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009576:	e7f6      	b.n	8009566 <adc_external_trigger_source_config+0x10>

08009578 <adc_software_trigger_enable>:
 8009578:	07ca      	lsls	r2, r1, #31
 800957a:	bf42      	ittt	mi
 800957c:	6883      	ldrmi	r3, [r0, #8]
 800957e:	f443 0380 	orrmi.w	r3, r3, #4194304	; 0x400000
 8009582:	6083      	strmi	r3, [r0, #8]
 8009584:	078b      	lsls	r3, r1, #30
 8009586:	bf42      	ittt	mi
 8009588:	6883      	ldrmi	r3, [r0, #8]
 800958a:	f443 1300 	orrmi.w	r3, r3, #2097152	; 0x200000
 800958e:	6083      	strmi	r3, [r0, #8]
 8009590:	4770      	bx	lr
	...

08009594 <i2c_clock_config>:
 8009594:	b570      	push	{r4, r5, r6, lr}
 8009596:	4604      	mov	r4, r0
 8009598:	4616      	mov	r6, r2
 800959a:	460d      	mov	r5, r1
 800959c:	b901      	cbnz	r1, 80095a0 <i2c_clock_config+0xc>
 800959e:	e7fe      	b.n	800959e <i2c_clock_config+0xa>
 80095a0:	2002      	movs	r0, #2
 80095a2:	f7ff f8e7 	bl	8008774 <rcu_clock_freq_get>
 80095a6:	4a39      	ldr	r2, [pc, #228]	; (800968c <i2c_clock_config+0xf8>)
 80095a8:	4939      	ldr	r1, [pc, #228]	; (8009690 <i2c_clock_config+0xfc>)
 80095aa:	fbb0 f1f1 	udiv	r1, r0, r1
 80095ae:	4290      	cmp	r0, r2
 80095b0:	bf34      	ite	cc
 80095b2:	460b      	movcc	r3, r1
 80095b4:	233c      	movcs	r3, #60	; 0x3c
 80095b6:	6862      	ldr	r2, [r4, #4]
 80095b8:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
 80095bc:	431a      	orrs	r2, r3
 80095be:	6062      	str	r2, [r4, #4]
 80095c0:	4a34      	ldr	r2, [pc, #208]	; (8009694 <i2c_clock_config+0x100>)
 80095c2:	4295      	cmp	r5, r2
 80095c4:	d816      	bhi.n	80095f4 <i2c_clock_config+0x60>
 80095c6:	3101      	adds	r1, #1
 80095c8:	293b      	cmp	r1, #59	; 0x3b
 80095ca:	d90d      	bls.n	80095e8 <i2c_clock_config+0x54>
 80095cc:	233c      	movs	r3, #60	; 0x3c
 80095ce:	6223      	str	r3, [r4, #32]
 80095d0:	006d      	lsls	r5, r5, #1
 80095d2:	fbb0 f0f5 	udiv	r0, r0, r5
 80095d6:	2804      	cmp	r0, #4
 80095d8:	69e3      	ldr	r3, [r4, #28]
 80095da:	bf38      	it	cc
 80095dc:	2004      	movcc	r0, #4
 80095de:	f3c0 000b 	ubfx	r0, r0, #0, #12
 80095e2:	4318      	orrs	r0, r3
 80095e4:	61e0      	str	r0, [r4, #28]
 80095e6:	bd70      	pop	{r4, r5, r6, pc}
 80095e8:	2902      	cmp	r1, #2
 80095ea:	d801      	bhi.n	80095f0 <i2c_clock_config+0x5c>
 80095ec:	2302      	movs	r3, #2
 80095ee:	e7ee      	b.n	80095ce <i2c_clock_config+0x3a>
 80095f0:	6221      	str	r1, [r4, #32]
 80095f2:	e7ed      	b.n	80095d0 <i2c_clock_config+0x3c>
 80095f4:	4a28      	ldr	r2, [pc, #160]	; (8009698 <i2c_clock_config+0x104>)
 80095f6:	4295      	cmp	r5, r2
 80095f8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80095fc:	d824      	bhi.n	8009648 <i2c_clock_config+0xb4>
 80095fe:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8009602:	4353      	muls	r3, r2
 8009604:	fbb3 f3f1 	udiv	r3, r3, r1
 8009608:	3301      	adds	r3, #1
 800960a:	6223      	str	r3, [r4, #32]
 800960c:	b9a6      	cbnz	r6, 8009638 <i2c_clock_config+0xa4>
 800960e:	eb05 0345 	add.w	r3, r5, r5, lsl #1
 8009612:	fbb0 f0f3 	udiv	r0, r0, r3
 8009616:	69e3      	ldr	r3, [r4, #28]
 8009618:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800961c:	61e3      	str	r3, [r4, #28]
 800961e:	f3c0 030b 	ubfx	r3, r0, #0, #12
 8009622:	b90b      	cbnz	r3, 8009628 <i2c_clock_config+0x94>
 8009624:	f040 0001 	orr.w	r0, r0, #1
 8009628:	69e3      	ldr	r3, [r4, #28]
 800962a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800962e:	61e3      	str	r3, [r4, #28]
 8009630:	69e3      	ldr	r3, [r4, #28]
 8009632:	4303      	orrs	r3, r0
 8009634:	61e3      	str	r3, [r4, #28]
 8009636:	e7d6      	b.n	80095e6 <i2c_clock_config+0x52>
 8009638:	2319      	movs	r3, #25
 800963a:	436b      	muls	r3, r5
 800963c:	fbb0 f0f3 	udiv	r0, r0, r3
 8009640:	69e3      	ldr	r3, [r4, #28]
 8009642:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8009646:	e7e9      	b.n	800961c <i2c_clock_config+0x88>
 8009648:	2278      	movs	r2, #120	; 0x78
 800964a:	4353      	muls	r3, r2
 800964c:	fbb3 f3f1 	udiv	r3, r3, r1
 8009650:	3301      	adds	r3, #1
 8009652:	6223      	str	r3, [r4, #32]
 8009654:	b996      	cbnz	r6, 800967c <i2c_clock_config+0xe8>
 8009656:	69e3      	ldr	r3, [r4, #28]
 8009658:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800965c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009660:	fbb0 f0f5 	udiv	r0, r0, r5
 8009664:	61e3      	str	r3, [r4, #28]
 8009666:	69e3      	ldr	r3, [r4, #28]
 8009668:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800966c:	61e3      	str	r3, [r4, #28]
 800966e:	69e3      	ldr	r3, [r4, #28]
 8009670:	4303      	orrs	r3, r0
 8009672:	61e3      	str	r3, [r4, #28]
 8009674:	2301      	movs	r3, #1
 8009676:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
 800967a:	e7b4      	b.n	80095e6 <i2c_clock_config+0x52>
 800967c:	2319      	movs	r3, #25
 800967e:	435d      	muls	r5, r3
 8009680:	69e3      	ldr	r3, [r4, #28]
 8009682:	fbb0 f0f5 	udiv	r0, r0, r5
 8009686:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800968a:	e7eb      	b.n	8009664 <i2c_clock_config+0xd0>
 800968c:	03938700 	orrseq	r8, r3, #0, 14
 8009690:	000f4240 	andeq	r4, pc, r0, asr #4
 8009694:	000186a0 	andeq	r8, r1, r0, lsr #13
 8009698:	00061a80 	andeq	r1, r6, r0, lsl #21

0800969c <i2c_ack_config>:
 800969c:	6803      	ldr	r3, [r0, #0]
 800969e:	2901      	cmp	r1, #1
 80096a0:	bf0c      	ite	eq
 80096a2:	f443 6380 	orreq.w	r3, r3, #1024	; 0x400
 80096a6:	f423 6380 	bicne.w	r3, r3, #1024	; 0x400
 80096aa:	6003      	str	r3, [r0, #0]
 80096ac:	4770      	bx	lr

080096ae <i2c_ackpos_config>:
 80096ae:	6803      	ldr	r3, [r0, #0]
 80096b0:	b919      	cbnz	r1, 80096ba <i2c_ackpos_config+0xc>
 80096b2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80096b6:	6003      	str	r3, [r0, #0]
 80096b8:	4770      	bx	lr
 80096ba:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80096be:	e7fa      	b.n	80096b6 <i2c_ackpos_config+0x8>

080096c0 <i2c_master_addressing>:
 80096c0:	3202      	adds	r2, #2
 80096c2:	bf0c      	ite	eq
 80096c4:	f021 0101 	biceq.w	r1, r1, #1
 80096c8:	f041 0101 	orrne.w	r1, r1, #1
 80096cc:	6101      	str	r1, [r0, #16]
 80096ce:	4770      	bx	lr

080096d0 <i2c_enable>:
 80096d0:	6803      	ldr	r3, [r0, #0]
 80096d2:	f043 0301 	orr.w	r3, r3, #1
 80096d6:	6003      	str	r3, [r0, #0]
 80096d8:	4770      	bx	lr

080096da <i2c_start_on_bus>:
 80096da:	6803      	ldr	r3, [r0, #0]
 80096dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80096e0:	6003      	str	r3, [r0, #0]
 80096e2:	4770      	bx	lr

080096e4 <i2c_stop_on_bus>:
 80096e4:	6803      	ldr	r3, [r0, #0]
 80096e6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80096ea:	6003      	str	r3, [r0, #0]
 80096ec:	4770      	bx	lr

080096ee <i2c_data_transmit>:
 80096ee:	6101      	str	r1, [r0, #16]
 80096f0:	4770      	bx	lr

080096f2 <i2c_data_receive>:
 80096f2:	6900      	ldr	r0, [r0, #16]
 80096f4:	b2c0      	uxtb	r0, r0
 80096f6:	4770      	bx	lr

080096f8 <i2c_flag_get>:
 80096f8:	098b      	lsrs	r3, r1, #6
 80096fa:	f001 011f 	and.w	r1, r1, #31
 80096fe:	581a      	ldr	r2, [r3, r0]
 8009700:	2301      	movs	r3, #1
 8009702:	408b      	lsls	r3, r1
 8009704:	4213      	tst	r3, r2
 8009706:	bf14      	ite	ne
 8009708:	2001      	movne	r0, #1
 800970a:	2000      	moveq	r0, #0
 800970c:	4770      	bx	lr

0800970e <i2c_flag_clear>:
 800970e:	f240 5301 	movw	r3, #1281	; 0x501
 8009712:	4299      	cmp	r1, r3
 8009714:	b510      	push	{r4, lr}
 8009716:	d102      	bne.n	800971e <i2c_flag_clear+0x10>
 8009718:	6943      	ldr	r3, [r0, #20]
 800971a:	6983      	ldr	r3, [r0, #24]
 800971c:	bd10      	pop	{r4, pc}
 800971e:	098c      	lsrs	r4, r1, #6
 8009720:	2201      	movs	r2, #1
 8009722:	5823      	ldr	r3, [r4, r0]
 8009724:	f001 011f 	and.w	r1, r1, #31
 8009728:	408a      	lsls	r2, r1
 800972a:	ea23 0302 	bic.w	r3, r3, r2
 800972e:	5023      	str	r3, [r4, r0]
 8009730:	e7f4      	b.n	800971c <i2c_flag_clear+0xe>

08009732 <i2s_init>:
 8009732:	b510      	push	{r4, lr}
 8009734:	69c4      	ldr	r4, [r0, #28]
 8009736:	f424 647b 	bic.w	r4, r4, #4016	; 0xfb0
 800973a:	f024 0408 	bic.w	r4, r4, #8
 800973e:	0424      	lsls	r4, r4, #16
 8009740:	0c24      	lsrs	r4, r4, #16
 8009742:	4323      	orrs	r3, r4
 8009744:	431a      	orrs	r2, r3
 8009746:	4311      	orrs	r1, r2
 8009748:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
 800974c:	61c1      	str	r1, [r0, #28]
 800974e:	bd10      	pop	{r4, pc}

08009750 <i2s_psc_config>:
 8009750:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009752:	4605      	mov	r5, r0
 8009754:	4616      	mov	r6, r2
 8009756:	461f      	mov	r7, r3
 8009758:	460c      	mov	r4, r1
 800975a:	b901      	cbnz	r1, 800975e <i2s_psc_config+0xe>
 800975c:	e7fe      	b.n	800975c <i2s_psc_config+0xc>
 800975e:	2302      	movs	r3, #2
 8009760:	6203      	str	r3, [r0, #32]
 8009762:	2000      	movs	r0, #0
 8009764:	f7ff f806 	bl	8008774 <rcu_clock_freq_get>
 8009768:	f5b7 7f00 	cmp.w	r7, #512	; 0x200
 800976c:	f04f 030a 	mov.w	r3, #10
 8009770:	d11b      	bne.n	80097aa <i2s_psc_config+0x5a>
 8009772:	0a00      	lsrs	r0, r0, #8
 8009774:	4358      	muls	r0, r3
 8009776:	230a      	movs	r3, #10
 8009778:	fbb0 f4f4 	udiv	r4, r0, r4
 800977c:	3405      	adds	r4, #5
 800977e:	fbb4 f4f3 	udiv	r4, r4, r3
 8009782:	f004 0301 	and.w	r3, r4, #1
 8009786:	0864      	lsrs	r4, r4, #1
 8009788:	1ea2      	subs	r2, r4, #2
 800978a:	2afd      	cmp	r2, #253	; 0xfd
 800978c:	bf92      	itee	ls
 800978e:	021b      	lslls	r3, r3, #8
 8009790:	2300      	movhi	r3, #0
 8009792:	2402      	movhi	r4, #2
 8009794:	431c      	orrs	r4, r3
 8009796:	433c      	orrs	r4, r7
 8009798:	622c      	str	r4, [r5, #32]
 800979a:	69eb      	ldr	r3, [r5, #28]
 800979c:	f023 0307 	bic.w	r3, r3, #7
 80097a0:	61eb      	str	r3, [r5, #28]
 80097a2:	69eb      	ldr	r3, [r5, #28]
 80097a4:	4333      	orrs	r3, r6
 80097a6:	61eb      	str	r3, [r5, #28]
 80097a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80097aa:	b90e      	cbnz	r6, 80097b0 <i2s_psc_config+0x60>
 80097ac:	0940      	lsrs	r0, r0, #5
 80097ae:	e7e1      	b.n	8009774 <i2s_psc_config+0x24>
 80097b0:	0980      	lsrs	r0, r0, #6
 80097b2:	e7df      	b.n	8009774 <i2s_psc_config+0x24>

080097b4 <i2s_enable>:
 80097b4:	69c3      	ldr	r3, [r0, #28]
 80097b6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80097ba:	61c3      	str	r3, [r0, #28]
 80097bc:	4770      	bx	lr

080097be <i2s_disable>:
 80097be:	69c3      	ldr	r3, [r0, #28]
 80097c0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80097c4:	61c3      	str	r3, [r0, #28]
 80097c6:	4770      	bx	lr

080097c8 <spi_dma_enable>:
 80097c8:	6843      	ldr	r3, [r0, #4]
 80097ca:	b919      	cbnz	r1, 80097d4 <spi_dma_enable+0xc>
 80097cc:	f043 0302 	orr.w	r3, r3, #2
 80097d0:	6043      	str	r3, [r0, #4]
 80097d2:	4770      	bx	lr
 80097d4:	f043 0301 	orr.w	r3, r3, #1
 80097d8:	e7fa      	b.n	80097d0 <spi_dma_enable+0x8>
	...

Disassembly of section .rodata:

080097dc <vtable for RDMResponder-0xc4>:
 80097dc:	00000000 	andeq	r0, r0, r0
 80097e0:	18002000 	stmdane	r0, {sp}
 80097e4:	00180400 	andseq	r0, r8, r0, lsl #8
 80097e8:	00000007 	andeq	r0, r0, r7
	...
 80097f4:	03020100 	movweq	r0, #8448	; 0x2100
 80097f8:	08070604 	stmdaeq	r7, {r2, r9, sl}
 80097fc:	00000009 	andeq	r0, r0, r9
 8009800:	03020100 	movweq	r0, #8448	; 0x2100
 8009804:	73696404 	cmnvc	r9, #4, 8	; 0x4000000
 8009808:	656c6261 	strbvs	r6, [ip, #-609]!	; 0xfffffd9f
 800980c:	6e650064 	cdpvs	0, 6, cr0, cr5, cr4, {3}
 8009810:	656c6261 	strbvs	r6, [ip, #-609]!	; 0xfffffd9f
 8009814:	6f430064 	svcvs	0x00430064
 8009818:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
 800981c:	646f4d20 	strbtvs	r4, [pc], #-3360	; 8009824 <_etext+0x48>
 8009820:	35310065 	ldrcc	r0, [r1, #-101]!	; 0xffffff9b
 8009824:	3a30353a 	bcc	8c16d14 <__exidx_end+0xc0b444>
 8009828:	44003634 	strmi	r3, [r0], #-1588	; 0xfffff9cc
 800982c:	31206365 			; <UNDEFINED> instruction: 0x31206365
 8009830:	30322037 	eorscc	r2, r2, r7, lsr r0
 8009834:	25003232 	strcs	r3, [r0, #-562]	; 0xfffffdce
 8009838:	75253a73 	strvc	r3, [r5, #-2675]!	; 0xfffff58d
 800983c:	75254720 	strvc	r4, [r5, #-1824]!	; 0xfffff8e0
 8009840:	73255b20 			; <UNDEFINED> instruction: 0x73255b20
 8009844:	6f43005d 	svcvs	0x0043005d
 8009848:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
 800984c:	646f6d20 	strbtvs	r6, [pc], #-3360	; 8009854 <_etext+0x78>
 8009850:	4f200065 	svcmi	0x00200065
 8009854:	75707475 	ldrbvc	r7, [r0, #-1141]!	; 0xfffffb8b
 8009858:	73252074 			; <UNDEFINED> instruction: 0x73252074
 800985c:	6554000a 	ldrbvs	r0, [r4, #-10]
 8009860:	70207473 	eorvc	r7, r0, r3, ror r4
 8009864:	65747461 	ldrbvs	r7, [r4, #-1121]!	; 0xfffffb9f
 8009868:	3a206e72 	bcc	8825238 <__exidx_end+0x819968>
 800986c:	20732520 	rsbscs	r2, r3, r0, lsr #10
 8009870:	5d75255b 	cfldr64pl	mvdx2, [r5, #-364]!	; 0xfffffe94
 8009874:	4452000a 	ldrbmi	r0, [r2], #-10
 8009878:	6552204d 	ldrbvs	r2, [r2, #-77]	; 0xffffffb3
 800987c:	6e6f7073 	mcrvs	0, 3, r7, cr15, cr3, {3}
 8009880:	20726564 	rsbscs	r6, r2, r4, ror #10
 8009884:	65786950 	ldrbvs	r6, [r8, #-2384]!	; 0xfffff6b0
 8009888:	0031206c 	eorseq	r2, r1, ip, rrx
 800988c:	253a7325 	ldrcs	r7, [sl, #-805]!	; 0xfffffcdb
 8009890:	25472064 	strbcs	r2, [r7, #-100]	; 0xffffff9c
 8009894:	73252064 			; <UNDEFINED> instruction: 0x73252064
 8009898:	3a732500 	bcc	9cd2ca0 <__exidx_end+0x1cc73d0>
 800989c:	00007525 	andeq	r7, r0, r5, lsr #10

080098a0 <vtable for RDMResponder>:
	...
 80098a8:	08000671 	stmdaeq	r0, {r0, r4, r5, r6, r9, sl}
 80098ac:	080006b9 	stmdaeq	r0, {r0, r3, r4, r5, r7, r9, sl}
 80098b0:	0800061d 	stmdaeq	r0, {r0, r2, r3, r4, r9, sl}
 80098b4:	08000651 	stmdaeq	r0, {r0, r4, r6, r9, sl}

080098b8 <vtable for PixelDmxStartStop>:
	...
 80098c0:	080005f7 	stmdaeq	r0, {r0, r1, r2, r4, r5, r6, r7, r8, sl}
 80098c4:	08000611 	stmdaeq	r0, {r0, r4, r9, sl}
 80098c8:	080005f9 	stmdaeq	r0, {r0, r3, r4, r5, r6, r7, r8, sl}
 80098cc:	08000605 	stmdaeq	r0, {r0, r2, r9, sl}

080098d0 <SOFTWARE_VERSION>:
 80098d0:	00322e31 	eorseq	r2, r2, r1, lsr lr

080098d4 <gamma10_0>:
 80098d4:	03020100 	movweq	r0, #8448	; 0x2100
 80098d8:	07060504 	streq	r0, [r6, -r4, lsl #10]
 80098dc:	0b0a0908 	bleq	828bd04 <__exidx_end+0x280434>
 80098e0:	0f0e0d0c 	svceq	0x000e0d0c
 80098e4:	13121110 	tstne	r2, #16, 2
 80098e8:	17161514 			; <UNDEFINED> instruction: 0x17161514
 80098ec:	1b1a1918 	blne	868fd54 <__exidx_end+0x684484>
 80098f0:	1f1e1d1c 	svcne	0x001e1d1c
 80098f4:	23222120 			; <UNDEFINED> instruction: 0x23222120
 80098f8:	27262524 	strcs	r2, [r6, -r4, lsr #10]!
 80098fc:	2b2a2928 	blcs	8a93da4 <__exidx_end+0xa884d4>
 8009900:	2f2e2d2c 	svccs	0x002e2d2c
 8009904:	33323130 	teqcc	r2, #48, 2
 8009908:	37363534 			; <UNDEFINED> instruction: 0x37363534
 800990c:	3b3a3938 	blcc	8e97df4 <__exidx_end+0xe8c524>
 8009910:	3f3e3d3c 	svccc	0x003e3d3c
 8009914:	43424140 	movtmi	r4, #8512	; 0x2140
 8009918:	47464544 	strbmi	r4, [r6, -r4, asr #10]
 800991c:	4b4a4948 	blmi	929be44 <__exidx_end+0x1290574>
 8009920:	4f4e4d4c 	svcmi	0x004e4d4c
 8009924:	53525150 	cmppl	r2, #80, 2
 8009928:	57565554 			; <UNDEFINED> instruction: 0x57565554
 800992c:	5b5a5958 	blpl	969fe94 <__exidx_end+0x16945c4>
 8009930:	5f5e5d5c 	svcpl	0x005e5d5c
 8009934:	63626160 	cmnvs	r2, #96, 2
 8009938:	67666564 	strbvs	r6, [r6, -r4, ror #10]!
 800993c:	6b6a6968 	blvs	9aa3ee4 <__exidx_end+0x1a98614>
 8009940:	6f6e6d6c 	svcvs	0x006e6d6c
 8009944:	73727170 	cmnvc	r2, #112, 2
 8009948:	77767574 			; <UNDEFINED> instruction: 0x77767574
 800994c:	7b7a7978 	blvc	9ea7f34 <__exidx_end+0x1e9c664>
 8009950:	7f7e7d7c 	svcvc	0x007e7d7c
 8009954:	83828180 	orrhi	r8, r2, #128, 2
 8009958:	87868584 	strhi	r8, [r6, r4, lsl #11]
 800995c:	8b8a8988 	blhi	62abf84 <__heap_size+0x62aaf84>
 8009960:	8f8e8d8c 	svchi	0x008e8d8c
 8009964:	93929190 	orrsls	r9, r2, #144, 2	; 0x24
 8009968:	97969594 			; <UNDEFINED> instruction: 0x97969594
 800996c:	9b9a9998 	blls	66affd4 <__heap_size+0x66aefd4>
 8009970:	9f9e9d9c 	svcls	0x009e9d9c
 8009974:	a3a2a1a0 			; <UNDEFINED> instruction: 0xa3a2a1a0
 8009978:	a7a6a5a4 	strge	sl, [r6, r4, lsr #11]!
 800997c:	abaaa9a8 	blge	6ab4024 <__heap_size+0x6ab3024>
 8009980:	afaeadac 	svcge	0x00aeadac
 8009984:	b3b2b1b0 			; <UNDEFINED> instruction: 0xb3b2b1b0
 8009988:	b7b6b5b4 			; <UNDEFINED> instruction: 0xb7b6b5b4
 800998c:	bbbab9b8 	bllt	6eb8074 <__heap_size+0x6eb7074>
 8009990:	bfbebdbc 	svclt	0x00bebdbc
 8009994:	c3c2c1c0 	bicgt	ip, r2, #192, 2	; 0x30
 8009998:	c7c6c5c4 	strbgt	ip, [r6, r4, asr #11]
 800999c:	cbcac9c8 	blgt	72bc0c4 <__heap_size+0x72bb0c4>
 80099a0:	cfcecdcc 	svcgt	0x00cecdcc
 80099a4:	d3d2d1d0 	bicsle	sp, r2, #208, 2	; 0x34
 80099a8:	d7d6d5d4 			; <UNDEFINED> instruction: 0xd7d6d5d4
 80099ac:	dbdad9d8 	blle	76c0114 <__heap_size+0x76bf114>
 80099b0:	dfdedddc 	svcle	0x00dedddc
 80099b4:	e3e2e1e0 	mvn	lr, #224, 2	; 0x38
 80099b8:	e7e6e5e4 	strb	lr, [r6, r4, ror #11]!
 80099bc:	ebeae9e8 	bl	7ac4164 <__heap_size+0x7ac3164>
 80099c0:	efeeedec 	svc	0x00eeedec
 80099c4:	f3f2f1f0 	vsra.u64	<illegal reg q15.5>, q8, #14
 80099c8:	f7f6f5f4 			; <UNDEFINED> instruction: 0xf7f6f5f4
 80099cc:	fbfaf9f8 	blx	7ec81b6 <__heap_size+0x7ec71b6>
 80099d0:	fffefdfc 			; <UNDEFINED> instruction: 0xfffefdfc
 80099d4:	30322d25 	eorscc	r2, r2, r5, lsr #26
 80099d8:	2d250073 	stccs	0, cr0, [r5, #-460]!	; 0xfffffe34
 80099dc:	25207338 	strcs	r7, [r0, #-824]!	; 0xfffffcc8
 80099e0:	2064322d 	rsbcs	r3, r4, sp, lsr #4
 80099e4:	322d2547 	eorcc	r2, sp, #297795584	; 0x11c00000
 80099e8:	2d252064 	stccs	0, cr2, [r5, #-400]!	; 0xfffffe70
 80099ec:	50007335 	andpl	r7, r0, r5, lsr r3
 80099f0:	72676f72 	rsbvc	r6, r7, #456	; 0x1c8
 80099f4:	656d6d61 	strbvs	r6, [sp, #-3425]!	; 0xfffff29f
 80099f8:	79540064 	ldmdbvc	r4, {r2, r5, r6}^
 80099fc:	47006570 	smlsdxmi	r0, r0, r5, r6
 8009a00:	70756f72 	rsbsvc	r6, r5, r2, ror pc
 8009a04:	20676e69 	rsbcs	r6, r7, r9, ror #28
 8009a08:	6e756f43 	cdpvs	15, 7, cr6, cr5, cr3, {2}
 8009a0c:	614d0074 	hvcvs	53252	; 0xd004
 8009a10:	65540070 	ldrbvs	r0, [r4, #-112]	; 0xffffff90
 8009a14:	50207473 	eorpl	r7, r0, r3, ror r4
 8009a18:	65747461 	ldrbvs	r7, [r4, #-1121]!	; 0xfffffb9f
 8009a1c:	50006e72 	andpl	r6, r0, r2, ror lr
 8009a20:	72676f72 	rsbvc	r6, r7, #456	; 0x1c8
 8009a24:	55006d61 	strpl	r6, [r0, #-3425]	; 0xfffff29f
 8009a28:	6665646e 	strbtvs	r6, [r5], -lr, ror #8
 8009a2c:	64656e69 	strbtvs	r6, [r5], #-3689	; 0xfffff197
	...

08009a31 <SOFTWARE_VERSION>:
 8009a31:	00322e31 	eorseq	r2, r2, r1, lsr lr
 8009a35:	00555043 	subseq	r5, r5, r3, asr #32
 8009a39:	 	andeq	r0, r0, r0

08009a3c <vtable for CpuTemperature>:
	...
 8009a44:	08001cd9 	stmdaeq	r0, {r0, r3, r4, r6, r7, sl, fp, ip}
 8009a48:	08001ced 	stmdaeq	r0, {r0, r2, r3, r5, r6, r7, sl, fp, ip}
 8009a4c:	08001cd5 	stmdaeq	r0, {r0, r2, r4, r6, r7, sl, fp, ip}
 8009a50:	08001cdb 	stmdaeq	r0, {r0, r1, r3, r4, r6, r7, sl, fp, ip}

08009a54 <vtable for RDMSensorBH170>:
	...
 8009a5c:	08001f7f 	stmdaeq	r0, {r0, r1, r2, r3, r4, r5, r6, r8, r9, sl, fp, ip}
 8009a60:	08001f81 	stmdaeq	r0, {r0, r7, r8, r9, sl, fp, ip}
 8009a64:	08001e11 	stmdaeq	r0, {r0, r4, r9, sl, fp, ip}
 8009a68:	08001f01 	stmdaeq	r0, {r0, r8, r9, sl, fp, ip}

08009a6c <vtable for RDMSensorMCP9808>:
	...
 8009a74:	08001f71 	stmdaeq	r0, {r0, r4, r5, r6, r8, r9, sl, fp, ip}
 8009a78:	08001f73 	stmdaeq	r0, {r0, r1, r4, r5, r6, r8, r9, sl, fp, ip}
 8009a7c:	08001e17 	stmdaeq	r0, {r0, r1, r2, r4, r9, sl, fp, ip}
 8009a80:	08001eed 	stmdaeq	r0, {r0, r2, r3, r5, r6, r7, r9, sl, fp, ip}

08009a84 <vtable for RDMSensorHTU21DHumidity>:
	...
 8009a8c:	08001f63 	stmdaeq	r0, {r0, r1, r5, r6, r8, r9, sl, fp, ip}
 8009a90:	08001f65 	stmdaeq	r0, {r0, r2, r5, r6, r8, r9, sl, fp, ip}
 8009a94:	08001e1d 	stmdaeq	r0, {r0, r2, r3, r4, r9, sl, fp, ip}
 8009a98:	08001ed9 	stmdaeq	r0, {r0, r3, r4, r6, r7, r9, sl, fp, ip}

08009a9c <vtable for RDMSensorHTU21DTemperature>:
	...
 8009aa4:	08001f55 	stmdaeq	r0, {r0, r2, r4, r6, r8, r9, sl, fp, ip}
 8009aa8:	08001f57 	stmdaeq	r0, {r0, r1, r2, r4, r6, r8, r9, sl, fp, ip}
 8009aac:	08001e23 	stmdaeq	r0, {r0, r1, r5, r9, sl, fp, ip}
 8009ab0:	08001ec5 	stmdaeq	r0, {r0, r2, r6, r7, r9, sl, fp, ip}

08009ab4 <vtable for RDMSensorINA219Current>:
	...
 8009abc:	08001f47 	stmdaeq	r0, {r0, r1, r2, r6, r8, r9, sl, fp, ip}
 8009ac0:	08001f49 	stmdaeq	r0, {r0, r3, r6, r8, r9, sl, fp, ip}
 8009ac4:	08001e29 	stmdaeq	r0, {r0, r3, r5, r9, sl, fp, ip}
 8009ac8:	08001ea5 	stmdaeq	r0, {r0, r2, r5, r7, r9, sl, fp, ip}

08009acc <vtable for RDMSensorINA219Power>:
	...
 8009ad4:	08001f39 	stmdaeq	r0, {r0, r3, r4, r5, r8, r9, sl, fp, ip}
 8009ad8:	08001f3b 	stmdaeq	r0, {r0, r1, r3, r4, r5, r8, r9, sl, fp, ip}
 8009adc:	08001e2f 	stmdaeq	r0, {r0, r1, r2, r3, r5, r9, sl, fp, ip}
 8009ae0:	08001e91 	stmdaeq	r0, {r0, r4, r7, r9, sl, fp, ip}

08009ae4 <vtable for RDMSensorINA219Voltage>:
	...
 8009aec:	08001f2b 	stmdaeq	r0, {r0, r1, r3, r5, r8, r9, sl, fp, ip}
 8009af0:	08001f2d 	stmdaeq	r0, {r0, r2, r3, r5, r8, r9, sl, fp, ip}
 8009af4:	08001e35 	stmdaeq	r0, {r0, r2, r4, r5, r9, sl, fp, ip}
 8009af8:	08001e71 	stmdaeq	r0, {r0, r4, r5, r6, r9, sl, fp, ip}

08009afc <vtable for RDMSensorSI7021Humidity>:
	...
 8009b04:	08001f1d 	stmdaeq	r0, {r0, r2, r3, r4, r8, r9, sl, fp, ip}
 8009b08:	08001f1f 	stmdaeq	r0, {r0, r1, r2, r3, r4, r8, r9, sl, fp, ip}
 8009b0c:	08001e3b 	stmdaeq	r0, {r0, r1, r3, r4, r5, r9, sl, fp, ip}
 8009b10:	08001e5b 	stmdaeq	r0, {r0, r1, r3, r4, r6, r9, sl, fp, ip}

08009b14 <vtable for RDMSensorSI7021Temperature>:
	...
 8009b1c:	08001f0f 	stmdaeq	r0, {r0, r1, r2, r3, r8, r9, sl, fp, ip}
 8009b20:	08001f11 	stmdaeq	r0, {r0, r4, r8, r9, sl, fp, ip}
 8009b24:	08001e41 	stmdaeq	r0, {r0, r6, r9, sl, fp, ip}
 8009b28:	08001e47 	stmdaeq	r0, {r0, r1, r2, r6, r9, sl, fp, ip}

08009b2c <sensor::bh1750::DESCRIPTION>:
 8009b2c:	69626d41 	stmdbvs	r2!, {r0, r6, r8, sl, fp, sp, lr}^
 8009b30:	20746e65 	rsbscs	r6, r4, r5, ror #28
 8009b34:	6867694c 	stmdavs	r7!, {r2, r3, r6, r8, fp, sp, lr}^
 8009b38:	 	stclvs	0, cr0, [r1, #-464]	; 0xfffffe30

08009b3a <sensor::htu21d::temperature::DESCRIPTION>:
 8009b3a:	69626d41 	stmdbvs	r2!, {r0, r6, r8, sl, fp, sp, lr}^
 8009b3e:	20746e65 	rsbscs	r6, r4, r5, ror #28
 8009b42:	706d6554 	rsbvc	r6, sp, r4, asr r5
 8009b46:	74617265 	strbtvc	r7, [r1], #-613	; 0xfffffd9b
 8009b4a:	00657275 	rsbeq	r7, r5, r5, ror r2

08009b4e <sensor::htu21d::humidity::DESCRIPTION>:
 8009b4e:	616c6552 	cmnvs	ip, r2, asr r5
 8009b52:	65766974 	ldrbvs	r6, [r6, #-2420]!	; 0xfffff68c
 8009b56:	6d754820 	ldclvs	8, cr4, [r5, #-128]!	; 0xffffff80
 8009b5a:	74696469 	strbtvc	r6, [r9], #-1129	; 0xfffffb97
 8009b5e:	 	svcvs	0x00500079

08009b60 <sensor::ina219::power::DESCRIPTION>:
 8009b60:	65776f50 	ldrbvs	r6, [r7, #-3920]!	; 0xfffff0b0
 8009b64:	 	strbvc	r0, [r3, #-114]	; 0xffffff8e

08009b66 <sensor::ina219::current::DESCRIPTION>:
 8009b66:	72727543 	rsbsvc	r7, r2, #281018368	; 0x10c00000
 8009b6a:	00746e65 	rsbseq	r6, r4, r5, ror #28

08009b6e <sensor::ina219::voltage::DESCRIPTION>:
 8009b6e:	746c6f56 	strbtvc	r6, [ip], #-3926	; 0xfffff0aa
 8009b72:	00656761 	rsbeq	r6, r5, r1, ror #14

08009b76 <sensor::si7021::temperature::DESCRIPTION>:
 8009b76:	69626d41 	stmdbvs	r2!, {r0, r6, r8, sl, fp, sp, lr}^
 8009b7a:	20746e65 	rsbscs	r6, r4, r5, ror #28
 8009b7e:	706d6554 	rsbvc	r6, sp, r4, asr r5
 8009b82:	74617265 	strbtvc	r7, [r1], #-613	; 0xfffffd9b
 8009b86:	00657275 	rsbeq	r7, r5, r5, ror r2

08009b8a <sensor::si7021::humidity::DESCRIPTION>:
 8009b8a:	616c6552 	cmnvs	ip, r2, asr r5
 8009b8e:	65766974 	ldrbvs	r6, [r6, #-2420]!	; 0xfffff68c
 8009b92:	6d754820 	ldclvs	8, cr4, [r5, #-128]!	; 0xffffff80
 8009b96:	74696469 	strbtvc	r6, [r9], #-1129	; 0xfffffb97
 8009b9a:	 	stclvs	0, cr0, [r1, #-484]	; 0xfffffe1c

08009b9c <sensor::mcp9808::DESCRIPTION>:
 8009b9c:	69626d41 	stmdbvs	r2!, {r0, r6, r8, sl, fp, sp, lr}^
 8009ba0:	20746e65 	rsbscs	r6, r4, r5, ror #28
 8009ba4:	706d6554 	rsbvc	r6, sp, r4, asr r5
 8009ba8:	74617265 	strbtvc	r7, [r1], #-613	; 0xfffffd9b
 8009bac:	00657275 	rsbeq	r7, r5, r5, ror r2

08009bb0 <vtable for RDMSensor>:
	...
 8009bc8:	204d4452 	subcs	r4, sp, r2, asr r4
 8009bcc:	70736552 	rsbsvc	r6, r3, r2, asr r5
 8009bd0:	65646e6f 	strbvs	r6, [r4, #-3695]!	; 0xfffff191
 8009bd4:	6f632072 	svcvs	0x00632072
 8009bd8:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
 8009bdc:	74617275 	strbtvc	r7, [r1], #-629	; 0xfffffd8b
 8009be0:	0a6e6f69 	beq	9ba598c <__exidx_end+0x1b9a0bc>
 8009be4:	72502000 	subsvc	r2, r0, #0
 8009be8:	636f746f 	cmnvs	pc, #1862270976	; 0x6f000000
 8009bec:	56206c6f 	strtpl	r6, [r0], -pc, ror #24
 8009bf0:	69737265 	ldmdbvs	r3!, {r0, r2, r5, r6, r9, ip, sp, lr}^
 8009bf4:	25206e6f 	strcs	r6, [r0, #-3695]!	; 0xfffff191
 8009bf8:	64252e64 	strtvs	r2, [r5], #-3684	; 0xfffff19c
 8009bfc:	4420000a 	strtmi	r0, [r0], #-10
 8009c00:	4120584d 			; <UNDEFINED> instruction: 0x4120584d
 8009c04:	65726464 	ldrbvs	r6, [r2, #-1124]!	; 0xfffffb9c
 8009c08:	20207373 	eorcs	r7, r0, r3, ror r3
 8009c0c:	20202020 	eorcs	r2, r0, r0, lsr #32
 8009c10:	6425203a 	strtvs	r2, [r5], #-58	; 0xffffffc6
 8009c14:	4420000a 	strtmi	r0, [r0], #-10
 8009c18:	4620584d 	strtmi	r5, [r0], -sp, asr #16
 8009c1c:	70746f6f 	rsbsvc	r6, r4, pc, ror #30
 8009c20:	746e6972 	strbtvc	r6, [lr], #-2418	; 0xfffff68e
 8009c24:	20202020 	eorcs	r2, r0, r0, lsr #32
 8009c28:	6425203a 	strtvs	r2, [r5], #-58	; 0xffffffc6
 8009c2c:	5020000a 	eorpl	r0, r0, sl
 8009c30:	6f737265 	svcvs	0x00737265
 8009c34:	696c616e 	stmdbvs	ip!, {r1, r2, r3, r5, r6, r8, sp, lr}^
 8009c38:	25207974 	strcs	r7, [r0, #-2420]!	; 0xfffff68c
 8009c3c:	666f2064 	strbtvs	r2, [pc], -r4, rrx
 8009c40:	20642520 	rsbcs	r2, r4, r0, lsr #10
 8009c44:	2a2e255b 	bcs	8b931b8 <__exidx_end+0xb878e8>
 8009c48:	000a5d73 	andeq	r5, sl, r3, ror sp
 8009c4c:	62755320 	rsbsvs	r5, r5, #32, 6	; 0x80000000
 8009c50:	76654420 	strbtvc	r4, [r5], -r0, lsr #8
 8009c54:	73656369 	cmnvc	r5, #-1543503871	; 0xa4000001
 8009c58:	20202020 	eorcs	r2, r0, r0, lsr #32
 8009c5c:	203a2020 	eorscs	r2, sl, r0, lsr #32
 8009c60:	000a6425 	andeq	r6, sl, r5, lsr #8
 8009c64:	6e655320 	cdpvs	3, 6, cr5, cr5, cr0, {1}
 8009c68:	73726f73 	cmnvc	r2, #460	; 0x1cc
 8009c6c:	20202020 	eorcs	r2, r0, r0, lsr #32
 8009c70:	20202020 	eorcs	r2, r0, r0, lsr #32
 8009c74:	203a2020 	eorscs	r2, sl, r0, lsr #32
 8009c78:	000a6425 	andeq	r6, sl, r5, lsr #8

08009c7c <vtable for RDMDeviceResponder>:
	...
 8009c84:	0800364d 	stmdaeq	r0, {r0, r2, r3, r6, r9, sl, ip, sp}
 8009c88:	0800366d 	stmdaeq	r0, {r0, r2, r3, r5, r6, r9, sl, ip, sp}
 8009c8c:	08003647 	stmdaeq	r0, {r0, r1, r2, r6, r9, sl, ip, sp}
 8009c90:	08003649 	stmdaeq	r0, {r0, r3, r6, r9, sl, ip, sp}
 8009c94:	32334447 	eorscc	r4, r3, #1191182336	; 0x47000000
 8009c98:	33303346 	teqcc	r0, #402653185	; 0x18000001
 8009c9c:	45004352 	strmi	r4, [r0, #-850]	; 0xfffffcae
 8009ca0:	6465626d 	strbtvs	r6, [r5], #-621	; 0xfffffd93
 8009ca4:	00646564 	rsbeq	r6, r4, r4, ror #10

08009ca8 <UID_ALL>:
 8009ca8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 8009cac:	0000ffff 	strdeq	pc, [r0], -pc	; <UNPREDICTABLE>

08009cb0 <RDMHandler::PID_DEFINITIONS>:
 8009cb0:	00000060 	andeq	r0, r0, r0, rrx
 8009cb4:	08003b95 	stmdaeq	r0, {r0, r2, r4, r7, r8, r9, fp, ip, sp}
	...
 8009cc4:	01010000 	mrseq	r0, (UNDEF: 1)
 8009cc8:	00000080 	andeq	r0, r0, r0, lsl #1
 8009ccc:	08003c99 	stmdaeq	r0, {r0, r3, r4, r7, sl, fp, ip, sp}
	...
 8009cdc:	01010100 	mrseq	r0, (UNDEF: 17)
 8009ce0:	00000081 	andeq	r0, r0, r1, lsl #1
 8009ce4:	08003cb5 	stmdaeq	r0, {r0, r2, r4, r5, r7, sl, fp, ip, sp}
	...
 8009cf4:	01010100 	mrseq	r0, (UNDEF: 17)
 8009cf8:	00000082 	andeq	r0, r0, r2, lsl #1
 8009cfc:	08003cd5 	stmdaeq	r0, {r0, r2, r4, r6, r7, sl, fp, ip, sp}
 8009d00:	00000000 	andeq	r0, r0, r0
 8009d04:	080046cd 	stmdaeq	r0, {r0, r2, r3, r6, r7, r9, sl, lr}
 8009d08:	00000000 	andeq	r0, r0, r0
 8009d0c:	01010100 	mrseq	r0, (UNDEF: 17)
 8009d10:	00000090 	muleq	r0, r0, r0
 8009d14:	08003bfd 	stmdaeq	r0, {r0, r2, r3, r4, r5, r6, r7, r8, r9, fp, ip, sp}
 8009d18:	00000000 	andeq	r0, r0, r0
 8009d1c:	08004615 	stmdaeq	r0, {r0, r2, r4, r9, sl, lr}
 8009d20:	00000000 	andeq	r0, r0, r0
 8009d24:	01010100 	mrseq	r0, (UNDEF: 17)
 8009d28:	00001000 	andeq	r1, r0, r0
 8009d2c:	08003d35 	stmdaeq	r0, {r0, r2, r4, r5, r8, sl, fp, ip, sp}
 8009d30:	00000000 	andeq	r0, r0, r0
 8009d34:	08003fb5 	stmdaeq	r0, {r0, r2, r4, r5, r7, r8, r9, sl, fp, ip, sp}
 8009d38:	00000000 	andeq	r0, r0, r0
 8009d3c:	01010000 	mrseq	r0, (UNDEF: 1)
 8009d40:	00001001 	andeq	r1, r0, r1
	...
 8009d4c:	08003f6d 	stmdaeq	r0, {r0, r2, r3, r5, r6, r8, r9, sl, fp, ip, sp}
 8009d50:	00000000 	andeq	r0, r0, r0
 8009d54:	01010100 	mrseq	r0, (UNDEF: 17)
 8009d58:	00000050 	andeq	r0, r0, r0, asr r0
 8009d5c:	08003b29 	stmdaeq	r0, {r0, r3, r5, r8, r9, fp, ip, sp}
	...
 8009d6c:	00010000 	andeq	r0, r1, r0
 8009d70:	00000070 	andeq	r0, r0, r0, ror r0
 8009d74:	08003c7d 	stmdaeq	r0, {r0, r2, r3, r4, r5, r6, sl, fp, ip, sp}
	...
 8009d84:	00010100 	andeq	r0, r1, r0, lsl #2
 8009d88:	000000a0 	andeq	r0, r0, r0, lsr #1
 8009d8c:	08003d49 	stmdaeq	r0, {r0, r3, r6, r8, sl, fp, ip, sp}
	...
 8009d9c:	00010100 	andeq	r0, r1, r0, lsl #2
 8009da0:	000000b0 	strheq	r0, [r0], -r0	; <UNPREDICTABLE>
 8009da4:	08003d49 	stmdaeq	r0, {r0, r3, r6, r8, sl, fp, ip, sp}
 8009da8:	00000000 	andeq	r0, r0, r0
 8009dac:	08004031 	stmdaeq	r0, {r0, r4, r5, lr}
 8009db0:	00000000 	andeq	r0, r0, r0
 8009db4:	00010100 	andeq	r0, r1, r0, lsl #2
 8009db8:	000000c0 	andeq	r0, r0, r0, asr #1
 8009dbc:	08003d11 	stmdaeq	r0, {r0, r4, r8, sl, fp, ip, sp}
	...
 8009dcc:	00010000 	andeq	r0, r1, r0
 8009dd0:	000000c1 	andeq	r0, r0, r1, asr #1
 8009dd4:	08004079 	stmdaeq	r0, {r0, r3, r4, r5, r6, lr}
	...
 8009de4:	00010100 	andeq	r0, r1, r0, lsl #2
 8009de8:	000000c2 	andeq	r0, r0, r2, asr #1
 8009dec:	08003eb9 	stmdaeq	r0, {r0, r3, r4, r5, r7, r9, sl, fp, ip, sp}
	...
 8009dfc:	00010100 	andeq	r0, r1, r0, lsl #2
 8009e00:	000000e0 	andeq	r0, r0, r0, ror #1
 8009e04:	08003d69 	stmdaeq	r0, {r0, r3, r5, r6, r8, sl, fp, ip, sp}
 8009e08:	00000000 	andeq	r0, r0, r0
 8009e0c:	08004099 	stmdaeq	r0, {r0, r3, r4, r7, lr}
 8009e10:	00000000 	andeq	r0, r0, r0
 8009e14:	00010100 	andeq	r0, r1, r0, lsl #2
 8009e18:	000000e1 	andeq	r0, r0, r1, ror #1
 8009e1c:	080040ed 	stmdaeq	r0, {r0, r2, r3, r5, r6, r7, lr}
	...
 8009e2c:	00010101 	andeq	r0, r1, r1, lsl #2
 8009e30:	000000f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
 8009e34:	08003da5 	stmdaeq	r0, {r0, r2, r5, r7, r8, sl, fp, ip, sp}
 8009e38:	00000000 	andeq	r0, r0, r0
 8009e3c:	08004171 	stmdaeq	r0, {r0, r4, r5, r6, r8, lr}
 8009e40:	00000000 	andeq	r0, r0, r0
 8009e44:	00010000 	andeq	r0, r1, r0
 8009e48:	00000120 	andeq	r0, r0, r0, lsr #2
 8009e4c:	08003ed5 	stmdaeq	r0, {r0, r2, r4, r6, r7, r9, sl, fp, ip, sp}
	...
 8009e5c:	00010100 	andeq	r0, r1, r0, lsl #2
 8009e60:	00000121 	andeq	r0, r0, r1, lsr #2
 8009e64:	0800459d 	stmdaeq	r0, {r0, r2, r3, r4, r7, r8, sl, lr}
	...
 8009e74:	00010102 	andeq	r0, r1, r2, lsl #2
 8009e78:	00000200 	andeq	r0, r0, r0, lsl #4
 8009e7c:	080041c1 	stmdaeq	r0, {r0, r6, r7, r8, lr}
	...
 8009e8c:	00010101 	andeq	r0, r1, r1, lsl #2
 8009e90:	00000201 	andeq	r0, r0, r1, lsl #4
 8009e94:	08004269 	stmdaeq	r0, {r0, r3, r5, r6, r9, lr}
 8009e98:	00000000 	andeq	r0, r0, r0
 8009e9c:	080042e9 	stmdaeq	r0, {r0, r3, r5, r6, r7, r9, lr}
 8009ea0:	00000000 	andeq	r0, r0, r0
 8009ea4:	00010101 	andeq	r0, r1, r1, lsl #2
 8009ea8:	00000202 	andeq	r0, r0, r2, lsl #4
	...
 8009eb4:	0800439d 	stmdaeq	r0, {r0, r2, r3, r4, r7, r8, r9, lr}
 8009eb8:	00000000 	andeq	r0, r0, r0
 8009ebc:	00010100 	andeq	r0, r1, r0, lsl #2
 8009ec0:	00000400 	andeq	r0, r0, r0, lsl #8
 8009ec4:	08003de1 	stmdaeq	r0, {r0, r5, r6, r7, r8, sl, fp, ip, sp}
 8009ec8:	00000000 	andeq	r0, r0, r0
 8009ecc:	080043e9 	stmdaeq	r0, {r0, r3, r5, r6, r7, r8, r9, lr}
 8009ed0:	00000000 	andeq	r0, r0, r0
 8009ed4:	00010100 	andeq	r0, r1, r0, lsl #2
 8009ed8:	00000500 	andeq	r0, r0, r0, lsl #10
 8009edc:	08003e09 	stmdaeq	r0, {r0, r3, r9, sl, fp, ip, sp}
 8009ee0:	00000000 	andeq	r0, r0, r0
 8009ee4:	080043f1 	stmdaeq	r0, {r0, r4, r5, r6, r7, r8, r9, lr}
 8009ee8:	00000000 	andeq	r0, r0, r0
 8009eec:	00010100 	andeq	r0, r1, r0, lsl #2
 8009ef0:	00000501 	andeq	r0, r0, r1, lsl #10
 8009ef4:	08003e25 	stmdaeq	r0, {r0, r2, r5, r9, sl, fp, ip, sp}
 8009ef8:	00000000 	andeq	r0, r0, r0
 8009efc:	0800443d 	stmdaeq	r0, {r0, r2, r3, r4, r5, sl, lr}
 8009f00:	00000000 	andeq	r0, r0, r0
 8009f04:	00010100 	andeq	r0, r1, r0, lsl #2
 8009f08:	00000603 	andeq	r0, r0, r3, lsl #12
 8009f0c:	08003e41 	stmdaeq	r0, {r0, r6, r9, sl, fp, ip, sp}
 8009f10:	00000000 	andeq	r0, r0, r0
 8009f14:	08004485 	stmdaeq	r0, {r0, r2, r7, sl, lr}
 8009f18:	00000000 	andeq	r0, r0, r0
 8009f1c:	00010100 	andeq	r0, r1, r0, lsl #2
 8009f20:	00001010 	andeq	r1, r0, r0, lsl r0
 8009f24:	08003e89 	stmdaeq	r0, {r0, r3, r7, r9, sl, fp, ip, sp}
 8009f28:	00000000 	andeq	r0, r0, r0
 8009f2c:	080044ed 	stmdaeq	r0, {r0, r2, r3, r5, r6, r7, sl, lr}
 8009f30:	00000000 	andeq	r0, r0, r0
 8009f34:	00010100 	andeq	r0, r1, r0, lsl #2
 8009f38:	00001020 	andeq	r1, r0, r0, lsr #32
 8009f3c:	08003e97 	stmdaeq	r0, {r0, r1, r2, r4, r7, r9, sl, fp, ip, sp}
 8009f40:	00000000 	andeq	r0, r0, r0
 8009f44:	0800451b 	stmdaeq	r0, {r0, r1, r3, r4, r8, sl, lr}
 8009f48:	00000000 	andeq	r0, r0, r0
 8009f4c:	00010100 	andeq	r0, r1, r0, lsl #2
 8009f50:	00001021 	andeq	r1, r0, r1, lsr #32
 8009f54:	0800454f 	stmdaeq	r0, {r0, r1, r2, r3, r6, r8, sl, lr}
	...
 8009f64:	00010101 	andeq	r0, r1, r1, lsl #2
 8009f68:	00001040 	andeq	r1, r0, r0, asr #32
 8009f6c:	080049a1 	stmdaeq	r0, {r0, r5, r7, r8, fp, lr}
 8009f70:	00000000 	andeq	r0, r0, r0
 8009f74:	080049b5 	stmdaeq	r0, {r0, r2, r4, r5, r7, r8, fp, lr}
 8009f78:	00000000 	andeq	r0, r0, r0
 8009f7c:	00010100 	andeq	r0, r1, r0, lsl #2

08009f80 <RDMHandler::PID_DEFINITIONS_SUB_DEVICES>:
 8009f80:	00000060 	andeq	r0, r0, r0, rrx
 8009f84:	08003b95 	stmdaeq	r0, {r0, r2, r4, r7, r8, r9, fp, ip, sp}
	...
 8009f94:	00010100 	andeq	r0, r1, r0, lsl #2
 8009f98:	000000c0 	andeq	r0, r0, r0, asr #1
 8009f9c:	08003d11 	stmdaeq	r0, {r0, r4, r8, sl, fp, ip, sp}
	...
 8009fac:	00010100 	andeq	r0, r1, r0, lsl #2
 8009fb0:	00001000 	andeq	r1, r0, r0
 8009fb4:	08003d35 	stmdaeq	r0, {r0, r2, r4, r5, r8, sl, fp, ip, sp}
 8009fb8:	00000000 	andeq	r0, r0, r0
 8009fbc:	08003fb5 	stmdaeq	r0, {r0, r2, r4, r5, r7, r8, r9, sl, fp, ip, sp}
 8009fc0:	00000000 	andeq	r0, r0, r0
 8009fc4:	00010100 	andeq	r0, r1, r0, lsl #2
 8009fc8:	00000050 	andeq	r0, r0, r0, asr r0
 8009fcc:	08003b29 	stmdaeq	r0, {r0, r3, r5, r8, r9, fp, ip, sp}
	...
 8009fdc:	00010100 	andeq	r0, r1, r0, lsl #2
 8009fe0:	00000070 	andeq	r0, r0, r0, ror r0
 8009fe4:	08003c7d 	stmdaeq	r0, {r0, r2, r3, r4, r5, r6, sl, fp, ip, sp}
	...
 8009ff4:	00010100 	andeq	r0, r1, r0, lsl #2
 8009ff8:	000000e0 	andeq	r0, r0, r0, ror #1
 8009ffc:	08003d69 	stmdaeq	r0, {r0, r3, r5, r6, r8, sl, fp, ip, sp}
 800a000:	00000000 	andeq	r0, r0, r0
 800a004:	08004099 	stmdaeq	r0, {r0, r3, r4, r7, lr}
 800a008:	00000000 	andeq	r0, r0, r0
 800a00c:	00010100 	andeq	r0, r1, r0, lsl #2
 800a010:	000000e1 	andeq	r0, r0, r1, ror #1
 800a014:	080040ed 	stmdaeq	r0, {r0, r2, r3, r5, r6, r7, lr}
	...
 800a024:	00010101 	andeq	r0, r1, r1, lsl #2
 800a028:	000000f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
 800a02c:	08003da5 	stmdaeq	r0, {r0, r2, r5, r7, r8, sl, fp, ip, sp}
 800a030:	00000000 	andeq	r0, r0, r0
 800a034:	08004171 	stmdaeq	r0, {r0, r4, r5, r6, r8, lr}
 800a038:	00000000 	andeq	r0, r0, r0
 800a03c:	00010100 	andeq	r0, r1, r0, lsl #2
 800a040:	64206f4e 	strtvs	r6, [r0], #-3918	; 0xfffff0b2
 800a044:	6e696665 	cdpvs	6, 6, cr6, cr9, cr5, {3}
 800a048:	6f697469 	svcvs	0x00697469
 800a04c:	6e49006e 	cdpvs	0, 4, cr0, cr9, cr14, {3}
 800a050:	736e6574 	cmnvc	lr, #116, 10	; 0x1d000000
 800a054:	00797469 	rsbseq	r7, r9, r9, ror #8
 800a058:	65746e49 	ldrbvs	r6, [r4, #-3657]!	; 0xfffff1b7
 800a05c:	7469736e 	strbtvc	r7, [r9], #-878	; 0xfffffc92
 800a060:	614d2079 	hvcvs	53769	; 0xd209
 800a064:	72657473 	rsbvc	r7, r5, #1929379840	; 0x73000000
 800a068:	6e615000 	cdpvs	0, 6, cr5, cr1, cr0, {0}
 800a06c:	6c695400 	cfstrdvs	mvd5, [r9], #-0
 800a070:	6f430074 	svcvs	0x00430074
 800a074:	20726f6c 	rsbscs	r6, r2, ip, ror #30
 800a078:	65656857 	strbvs	r6, [r5, #-2135]!	; 0xfffff7a9
 800a07c:	7553006c 	ldrbvc	r0, [r3, #-108]	; 0xffffff94
 800a080:	61727462 	cmnvs	r2, r2, ror #8
 800a084:	76697463 	strbtvc	r7, [r9], -r3, ror #8
 800a088:	6f432065 	svcvs	0x00432065
 800a08c:	20726f6c 	rsbscs	r6, r2, ip, ror #30
 800a090:	6578694d 	ldrbvs	r6, [r8, #-2381]!	; 0xfffff6b3
 800a094:	80e22072 	rschi	r2, r2, r2, ror r0
 800a098:	79432093 	stmdbvc	r3, {r0, r1, r4, r7, sp}^
 800a09c:	422f6e61 	eormi	r6, pc, #1552	; 0x610
 800a0a0:	0065756c 	rsbeq	r7, r5, ip, ror #10
 800a0a4:	74627553 	strbtvc	r7, [r2], #-1363	; 0xfffffaad
 800a0a8:	74636172 	strbtvc	r6, [r3], #-370	; 0xfffffe8e
 800a0ac:	20657669 	rsbcs	r7, r5, r9, ror #12
 800a0b0:	6f6c6f43 	svcvs	0x006c6f43
 800a0b4:	694d2072 	stmdbvs	sp, {r1, r4, r5, r6, sp}^
 800a0b8:	20726578 	rsbscs	r6, r2, r8, ror r5
 800a0bc:	209380e2 	addscs	r8, r3, r2, ror #1
 800a0c0:	6c6c6559 	cfstr64vs	mvdx6, [ip], #-356	; 0xfffffe9c
 800a0c4:	412f776f 			; <UNDEFINED> instruction: 0x412f776f
 800a0c8:	7265626d 	rsbvc	r6, r5, #-805306362	; 0xd0000006
 800a0cc:	62755300 	rsbsvs	r5, r5, #0, 6
 800a0d0:	63617274 	cmnvs	r1, #116, 4	; 0x40000007
 800a0d4:	65766974 	ldrbvs	r6, [r6, #-2420]!	; 0xfffff68c
 800a0d8:	6c6f4320 	stclvs	3, cr4, [pc], #-128	; 800a060 <RDMHandler::PID_DEFINITIONS_SUB_DEVICES+0xe0>
 800a0dc:	4d20726f 	sfmmi	f7, 4, [r0, #-444]!	; 0xfffffe44
 800a0e0:	72657869 	rsbvc	r7, r5, #6881280	; 0x690000
 800a0e4:	4d202d20 	stcmi	13, cr2, [r0, #-128]!	; 0xffffff80
 800a0e8:	6e656761 	cdpvs	7, 6, cr6, cr5, cr1, {3}
 800a0ec:	41006174 	tstmi	r0, r4, ror r1
 800a0f0:	74696464 	strbtvc	r6, [r9], #-1124	; 0xfffffb9c
 800a0f4:	20657669 	rsbcs	r7, r5, r9, ror #12
 800a0f8:	6f6c6f43 	svcvs	0x006c6f43
 800a0fc:	694d2072 	stmdbvs	sp, {r1, r4, r5, r6, sp}^
 800a100:	20726578 	rsbscs	r6, r2, r8, ror r5
 800a104:	6552202d 	ldrbvs	r2, [r2, #-45]	; 0xffffffd3
 800a108:	64410064 	strbvs	r0, [r1], #-100	; 0xffffff9c
 800a10c:	69746964 	ldmdbvs	r4!, {r2, r5, r6, r8, fp, sp, lr}^
 800a110:	43206576 			; <UNDEFINED> instruction: 0x43206576
 800a114:	726f6c6f 	rsbvc	r6, pc, #28416	; 0x6f00
 800a118:	78694d20 	stmdavc	r9!, {r5, r8, sl, fp, lr}^
 800a11c:	2d207265 	sfmcs	f7, 4, [r0, #-404]!	; 0xfffffe6c
 800a120:	65724720 	ldrbvs	r4, [r2, #-1824]!	; 0xfffff8e0
 800a124:	41006e65 	tstmi	r0, r5, ror #28
 800a128:	74696464 	strbtvc	r6, [r9], #-1124	; 0xfffffb9c
 800a12c:	20657669 	rsbcs	r7, r5, r9, ror #12
 800a130:	6f6c6f43 	svcvs	0x006c6f43
 800a134:	694d2072 	stmdbvs	sp, {r1, r4, r5, r6, sp}^
 800a138:	20726578 	rsbscs	r6, r2, r8, ror r5
 800a13c:	6c42202d 	mcrrvs	0, 2, r2, r2, cr13
 800a140:	43006575 	movwmi	r6, #1397	; 0x575
 800a144:	726f6c6f 	rsbvc	r6, pc, #28416	; 0x6f00
 800a148:	6d655420 	cfstrdvs	mvd5, [r5, #-128]!	; 0xffffff80
 800a14c:	61726570 	cmnvs	r2, r0, ror r5
 800a150:	65727574 	ldrbvs	r7, [r2, #-1396]!	; 0xfffffa8c
 800a154:	726f4320 	rsbvc	r4, pc, #32, 6	; 0x80000000
 800a158:	74636572 	strbtvc	r6, [r3], #-1394	; 0xfffffa8e
 800a15c:	006e6f69 	rsbeq	r6, lr, r9, ror #30
 800a160:	69646441 	stmdbvs	r4!, {r0, r6, sl, sp, lr}^
 800a164:	65766974 	ldrbvs	r6, [r6, #-2420]!	; 0xfffff68c
 800a168:	6c6f4320 	stclvs	3, cr4, [pc], #-128	; 800a0f0 <RDMHandler::PID_DEFINITIONS_SUB_DEVICES+0x170>
 800a16c:	4d20726f 	sfmmi	f7, 4, [r0, #-444]!	; 0xfffffe44
 800a170:	72657869 	rsbvc	r7, r5, #6881280	; 0x690000
 800a174:	41202d20 			; <UNDEFINED> instruction: 0x41202d20
 800a178:	7265626d 	rsbvc	r6, r5, #-805306362	; 0xd0000006
 800a17c:	64644100 	strbtvs	r4, [r4], #-256	; 0xffffff00
 800a180:	76697469 	strbtvc	r7, [r9], -r9, ror #8
 800a184:	6f432065 	svcvs	0x00432065
 800a188:	20726f6c 	rsbscs	r6, r2, ip, ror #30
 800a18c:	6578694d 	ldrbvs	r6, [r8, #-2381]!	; 0xfffff6b3
 800a190:	202d2072 	eorcs	r2, sp, r2, ror r0
 800a194:	74696857 	strbtvc	r6, [r9], #-2135	; 0xfffff7a9
 800a198:	64410065 	strbvs	r0, [r1], #-101	; 0xffffff9b
 800a19c:	69746964 	ldmdbvs	r4!, {r2, r5, r6, r8, fp, sp, lr}^
 800a1a0:	43206576 			; <UNDEFINED> instruction: 0x43206576
 800a1a4:	726f6c6f 	rsbvc	r6, pc, #28416	; 0x6f00
 800a1a8:	78694d20 	stmdavc	r9!, {r5, r8, sl, fp, lr}^
 800a1ac:	2d207265 	sfmcs	f7, 4, [r0, #-404]!	; 0xfffffe6c
 800a1b0:	72615720 	rsbvc	r5, r1, #32, 14	; 0x800000
 800a1b4:	6857206d 	ldmdavs	r7, {r0, r2, r3, r5, r6, sp}^
 800a1b8:	00657469 	rsbeq	r7, r5, r9, ror #8
 800a1bc:	69646441 	stmdbvs	r4!, {r0, r6, sl, sp, lr}^
 800a1c0:	65766974 	ldrbvs	r6, [r6, #-2420]!	; 0xfffff68c
 800a1c4:	6c6f4320 	stclvs	3, cr4, [pc], #-128	; 800a14c <RDMHandler::PID_DEFINITIONS_SUB_DEVICES+0x1cc>
 800a1c8:	4d20726f 	sfmmi	f7, 4, [r0, #-444]!	; 0xfffffe44
 800a1cc:	72657869 	rsbvc	r7, r5, #6881280	; 0x690000
 800a1d0:	43202d20 			; <UNDEFINED> instruction: 0x43202d20
 800a1d4:	206c6f6f 	rsbcs	r6, ip, pc, ror #30
 800a1d8:	74696857 	strbtvc	r6, [r9], #-2135	; 0xfffff7a9
 800a1dc:	75530065 	ldrbvc	r0, [r3, #-101]	; 0xffffff9b
 800a1e0:	61727462 	cmnvs	r2, r2, ror #8
 800a1e4:	76697463 	strbtvc	r7, [r9], -r3, ror #8
 800a1e8:	6f432065 	svcvs	0x00432065
 800a1ec:	20726f6c 	rsbscs	r6, r2, ip, ror #30
 800a1f0:	6578694d 	ldrbvs	r6, [r8, #-2381]!	; 0xfffff6b3
 800a1f4:	202d2072 	eorcs	r2, sp, r2, ror r0
 800a1f8:	48005655 	stmdami	r0, {r0, r2, r4, r6, r9, sl, ip, lr}
 800a1fc:	53006575 	movwpl	r6, #1397	; 0x575
 800a200:	72757461 	rsbsvc	r7, r5, #1627389952	; 0x61000000
 800a204:	6f697461 	svcvs	0x00697461
 800a208:	7453006e 	ldrbvc	r0, [r3], #-110	; 0xffffff92
 800a20c:	63697461 	cmnvs	r9, #1627389952	; 0x61000000
 800a210:	626f6720 	rsbvs	r6, pc, #32, 14	; 0x800000
 800a214:	6877206f 	ldmdavs	r7!, {r0, r1, r2, r3, r5, r6, sp}^
 800a218:	006c6565 	rsbeq	r6, ip, r5, ror #10
 800a21c:	61746f52 	cmnvs	r4, r2, asr pc
 800a220:	676e6974 			; <UNDEFINED> instruction: 0x676e6974
 800a224:	626f6720 	rsbvs	r6, pc, #32, 14	; 0x800000
 800a228:	6877206f 	ldmdavs	r7!, {r0, r1, r2, r3, r5, r6, sp}^
 800a22c:	006c6565 	rsbeq	r6, ip, r5, ror #10
 800a230:	73697250 	cmnvc	r9, #80, 4
 800a234:	6877206d 	ldmdavs	r7!, {r0, r2, r3, r5, r6, sp}^
 800a238:	006c6565 	rsbeq	r6, ip, r5, ror #10
 800a23c:	65666645 	strbvs	r6, [r6, #-1605]!	; 0xfffff9bb
 800a240:	20737463 	rsbscs	r7, r3, r3, ror #8
 800a244:	65656877 	strbvs	r6, [r5, #-2167]!	; 0xfffff789
 800a248:	6542006c 	strbvs	r0, [r2, #-108]	; 0xffffff94
 800a24c:	73206d61 			; <UNDEFINED> instruction: 0x73206d61
 800a250:	20657a69 	rsbcs	r7, r5, r9, ror #20
 800a254:	73697269 	cmnvc	r9, #-1879048186	; 0x90000006
 800a258:	67644500 	strbvs	r4, [r4, -r0, lsl #10]!
 800a25c:	654c2f65 	strbvs	r2, [ip, #-3941]	; 0xfffff09b
 800a260:	6620736e 	strtvs	r7, [r0], -lr, ror #6
 800a264:	7375636f 	cmnvc	r5, #-1140850687	; 0xbc000001
 800a268:	6f724600 	svcvs	0x00724600
 800a26c:	442f7473 	strtmi	r7, [pc], #-1139	; 800a274 <RDMHandler::PID_DEFINITIONS_SUB_DEVICES+0x2f4>
 800a270:	75666669 	strbvc	r6, [r6, #-1641]!	; 0xfffff997
 800a274:	6e6f6973 			; <UNDEFINED> instruction: 0x6e6f6973
 800a278:	72745300 	rsbsvc	r5, r4, #0, 6
 800a27c:	2f65626f 	svccs	0x0065626f
 800a280:	74756853 	ldrbtvc	r6, [r5], #-2131	; 0xfffff7ad
 800a284:	00726574 	rsbseq	r6, r2, r4, ror r5
 800a288:	6d6f6f5a 	stclvs	15, cr6, [pc, #-360]!	; 800a128 <RDMHandler::PID_DEFINITIONS_SUB_DEVICES+0x1a8>
 800a28c:	6e656c20 	cdpvs	12, 6, cr6, cr5, cr0, {1}
 800a290:	72460073 	subvc	r0, r6, #115	; 0x73
 800a294:	6e696d61 	cdpvs	13, 6, cr6, cr9, cr1, {3}
 800a298:	68732067 	ldmdavs	r3!, {r0, r1, r2, r5, r6, sp}^
 800a29c:	65747475 	ldrbvs	r7, [r4, #-1141]!	; 0xfffffb8b
 800a2a0:	72460072 	subvc	r0, r6, #114	; 0x72
 800a2a4:	6e696d61 	cdpvs	13, 6, cr6, cr9, cr1, {3}
 800a2a8:	68732067 	ldmdavs	r3!, {r0, r1, r2, r5, r6, sp}^
 800a2ac:	65747475 	ldrbvs	r7, [r4, #-1141]!	; 0xfffffb8b
 800a2b0:	6f722072 	svcvs	0x00722072
 800a2b4:	69746174 	ldmdbvs	r4!, {r2, r4, r5, r6, r8, sp, lr}^
 800a2b8:	44006e6f 	strmi	r6, [r0], #-3695	; 0xfffff191
 800a2bc:	6573756f 	ldrbvs	r7, [r3, #-1391]!	; 0xfffffa91
 800a2c0:	61420072 	hvcvs	8194	; 0x2002
 800a2c4:	44206e72 	strtmi	r6, [r0], #-3698	; 0xfffff18e
 800a2c8:	00726f6f 	rsbseq	r6, r2, pc, ror #30
 800a2cc:	706d614c 	rsbvc	r6, sp, ip, asr #2
 800a2d0:	6e6f6320 	cdpvs	3, 6, cr6, cr15, cr0, {1}
 800a2d4:	6c6f7274 	sfmvs	f7, 2, [pc], #-464	; 800a10c <RDMHandler::PID_DEFINITIONS_SUB_DEVICES+0x18c>
 800a2d8:	6e756620 	cdpvs	6, 7, cr6, cr5, cr0, {1}
 800a2dc:	6f697463 	svcvs	0x00697463
 800a2e0:	4600736e 	strmi	r7, [r0], -lr, ror #6
 800a2e4:	75747869 	ldrbvc	r7, [r4, #-2153]!	; 0xfffff797
 800a2e8:	63206572 			; <UNDEFINED> instruction: 0x63206572
 800a2ec:	72746e6f 	rsbsvc	r6, r4, #1776	; 0x6f0
 800a2f0:	63206c6f 			; <UNDEFINED> instruction: 0x63206c6f
 800a2f4:	6e6e6168 	powvsez	f6, f6, #0.0
 800a2f8:	4d006c65 	stcmi	12, cr6, [r0, #-404]	; 0xfffffe6c
 800a2fc:	6f726361 	svcvs	0x00726361
 800a300:	6e6f6320 	cdpvs	3, 6, cr6, cr15, cr0, {1}
 800a304:	6c6f7274 	sfmvs	f7, 2, [pc], #-464	; 800a13c <RDMHandler::PID_DEFINITIONS_SUB_DEVICES+0x1bc>
 800a308:	6c655200 	sfmvs	f5, 2, [r5], #-0
 800a30c:	6f207961 	svcvs	0x00207961
 800a310:	6f702072 	svcvs	0x00702072
 800a314:	20726577 	rsbscs	r6, r2, r7, ror r5
 800a318:	746e6f63 	strbtvc	r6, [lr], #-3939	; 0xfffff09d
 800a31c:	006c6f72 	rsbeq	r6, ip, r2, ror pc
 800a320:	206e6146 	rsbcs	r6, lr, r6, asr #2
 800a324:	746e6f63 	strbtvc	r6, [lr], #-3939	; 0xfffff09d
 800a328:	006c6f72 	rsbeq	r6, ip, r2, ror pc
 800a32c:	74616548 	strbtvc	r6, [r1], #-1352	; 0xfffffab8
 800a330:	63207265 			; <UNDEFINED> instruction: 0x63207265
 800a334:	72746e6f 	rsbsvc	r6, r4, #1776	; 0x6f0
 800a338:	46006c6f 	strmi	r6, [r0], -pc, ror #24
 800a33c:	746e756f 	strbtvc	r7, [lr], #-1391	; 0xfffffa91
 800a340:	206e6961 	rsbcs	r6, lr, r1, ror #18
 800a344:	65746177 	ldrbvs	r6, [r4, #-375]!	; 0xfffffe89
 800a348:	75702072 	ldrbvc	r2, [r0, #-114]!	; 0xffffff8e
 800a34c:	6320706d 			; <UNDEFINED> instruction: 0x6320706d
 800a350:	72746e6f 	rsbsvc	r6, r4, #1776	; 0x6f0
 800a354:	00206c6f 	eoreq	r6, r0, pc, ror #24
 800a358:	746f6c53 	strbtvc	r6, [pc], #-3155	; 800a360 <RDMHandler::PID_DEFINITIONS_SUB_DEVICES+0x3e0>
 800a35c:	72696420 	rsbvc	r6, r9, #32, 8	; 0x20000000
 800a360:	6c746365 	ldclvs	3, cr6, [r4], #-404	; 0xfffffe6c
 800a364:	6f632079 	svcvs	0x00632079
 800a368:	6f72746e 	svcvs	0x0072746e
 800a36c:	7020736c 	eorvc	r7, r0, ip, ror #6
 800a370:	6d617261 	sfmvs	f7, 2, [r1, #-388]!	; 0xfffffe7c
 800a374:	72657465 	rsbvc	r7, r5, #1694498816	; 0x65000000
 800a378:	65722820 	ldrbvs	r2, [r2, #-2080]!	; 0xfffff7e0
 800a37c:	73657270 	cmnvc	r5, #112, 4
 800a380:	73746e65 	cmnvc	r4, #1616	; 0x650
 800a384:	616f4320 	cmnvs	pc, r0, lsr #6
 800a388:	20657372 	rsbcs	r7, r5, r2, ror r3
 800a38c:	20726f66 	rsbscs	r6, r2, r6, ror #30
 800a390:	622d3631 	eorvs	r3, sp, #51380224	; 0x3100000
 800a394:	70207469 	eorvc	r7, r0, r9, ror #8
 800a398:	6d617261 	sfmvs	f7, 2, [r1, #-388]!	; 0xfffffe7c
 800a39c:	72657465 	rsbvc	r7, r5, #1694498816	; 0x65000000
 800a3a0:	46002973 			; <UNDEFINED> instruction: 0x46002973
 800a3a4:	2c656e69 	stclcs	14, cr6, [r5], #-420	; 0xfffffe5c
 800a3a8:	726f6620 	rsbvc	r6, pc, #32, 12	; 0x2000000
 800a3ac:	2d363120 	ldfcss	f3, [r6, #-128]!	; 0xffffff80
 800a3b0:	20746962 	rsbscs	r6, r4, r2, ror #18
 800a3b4:	61726170 	cmnvs	r2, r0, ror r1
 800a3b8:	6574656d 	ldrbvs	r6, [r4, #-1389]!	; 0xfffffa93
 800a3bc:	53007372 	movwpl	r7, #882	; 0x372
 800a3c0:	20746f6c 	rsbscs	r6, r4, ip, ror #30
 800a3c4:	73746573 	cmnvc	r4, #482344960	; 0x1cc00000
 800a3c8:	6d697420 	cfstrdvs	mvd7, [r9, #-128]!	; 0xffffff80
 800a3cc:	20676e69 	rsbcs	r6, r7, r9, ror #28
 800a3d0:	756c6176 	strbvc	r6, [ip, #-374]!	; 0xfffffe8a
 800a3d4:	6f662065 	svcvs	0x00662065
 800a3d8:	73612072 	cmnvc	r1, #114	; 0x72
 800a3dc:	69636f73 	stmdbvs	r3!, {r0, r1, r4, r5, r6, r8, r9, sl, fp, sp, lr}^
 800a3e0:	64657461 	strbtvs	r7, [r5], #-1121	; 0xfffffb9f
 800a3e4:	72617020 	rsbvc	r7, r1, #32
 800a3e8:	74656d61 	strbtvc	r6, [r5], #-3425	; 0xfffff29f
 800a3ec:	53007265 	movwpl	r7, #613	; 0x265
 800a3f0:	20746f6c 	rsbscs	r6, r4, ip, ror #30
 800a3f4:	73746573 	cmnvc	r4, #482344960	; 0x1cc00000
 800a3f8:	65707320 	ldrbvs	r7, [r0, #-800]!	; 0xfffffce0
 800a3fc:	762f6465 	strtvc	r6, [pc], -r5, ror #8
 800a400:	636f6c65 	cmnvs	pc, #25856	; 0x6500
 800a404:	20797469 	rsbscs	r7, r9, r9, ror #8
 800a408:	20726f66 	rsbscs	r6, r2, r6, ror #30
 800a40c:	6f737361 	svcvs	0x00737361
 800a410:	74616963 	strbtvc	r6, [r1], #-2403	; 0xfffff69d
 800a414:	70206465 	eorvc	r6, r0, r5, ror #8
 800a418:	6d617261 	sfmvs	f7, 2, [r1, #-388]!	; 0xfffffe7c
 800a41c:	72657465 	rsbvc	r7, r5, #1694498816	; 0x65000000
 800a420:	6f6c5300 	svcvs	0x006c5300
 800a424:	72702074 	rsbsvc	r2, r0, #116	; 0x74
 800a428:	6469766f 	strbtvs	r7, [r9], #-1647	; 0xfffff991
 800a42c:	63207365 			; <UNDEFINED> instruction: 0x63207365
 800a430:	72746e6f 	rsbsvc	r6, r4, #1776	; 0x6f0
 800a434:	6d2f6c6f 	stcvs	12, cr6, [pc, #-444]!	; 800a280 <RDMHandler::PID_DEFINITIONS_SUB_DEVICES+0x300>
 800a438:	2065646f 	rsbcs	r6, r5, pc, ror #8
 800a43c:	6f666e69 	svcvs	0x00666e69
 800a440:	726f6620 	rsbvc	r6, pc, #32, 12	; 0x2000000
 800a444:	72617020 	rsbvc	r7, r1, #32
 800a448:	74656d61 	strbtvc	r6, [r5], #-3425	; 0xfffff29f
 800a44c:	53007265 	movwpl	r7, #613	; 0x265
 800a450:	20746f6c 	rsbscs	r6, r4, ip, ror #30
 800a454:	73746573 	cmnvc	r4, #482344960	; 0x1cc00000
 800a458:	646e6920 	strbtvs	r6, [lr], #-2336	; 0xfffff6e0
 800a45c:	70207865 	eorvc	r7, r0, r5, ror #16
 800a460:	7469736f 	strbtvc	r7, [r9], #-879	; 0xfffffc91
 800a464:	206e6f69 	rsbcs	r6, lr, r9, ror #30
 800a468:	20726f66 	rsbscs	r6, r2, r6, ror #30
 800a46c:	6f737361 	svcvs	0x00737361
 800a470:	74616963 	strbtvc	r6, [r1], #-2403	; 0xfffff69d
 800a474:	70206465 	eorvc	r6, r0, r5, ror #8
 800a478:	6d617261 	sfmvs	f7, 2, [r1, #-388]!	; 0xfffffe7c
 800a47c:	72657465 	rsbvc	r7, r5, #1694498816	; 0x65000000
 800a480:	6f6c5300 	svcvs	0x006c5300
 800a484:	65732074 	ldrbvs	r2, [r3, #-116]!	; 0xffffff8c
 800a488:	72207374 	eorvc	r7, r0, #116, 6	; 0xd0000001
 800a48c:	7461746f 	strbtvc	r7, [r1], #-1135	; 0xfffffb91
 800a490:	206e6f69 	rsbcs	r6, lr, r9, ror #30
 800a494:	65657073 	strbvs	r7, [r5, #-115]!	; 0xffffff8d
 800a498:	6f662064 	svcvs	0x00662064
 800a49c:	73612072 	cmnvc	r1, #114	; 0x72
 800a4a0:	69636f73 	stmdbvs	r3!, {r0, r1, r4, r5, r6, r8, r9, sl, fp, sp, lr}^
 800a4a4:	64657461 	strbtvs	r7, [r5], #-1121	; 0xfffffb9f
 800a4a8:	72617020 	rsbvc	r7, r1, #32
 800a4ac:	74656d61 	strbtvc	r6, [r5], #-3425	; 0xfffff29f
 800a4b0:	43007265 	movwmi	r7, #613	; 0x265
 800a4b4:	69626d6f 	stmdbvs	r2!, {r0, r1, r2, r3, r5, r6, r8, sl, fp, sp, lr}^
 800a4b8:	2064656e 	rsbcs	r6, r4, lr, ror #10
 800a4bc:	65646e69 	strbvs	r6, [r4, #-3689]!	; 0xfffff197
 800a4c0:	6f722f78 	svcvs	0x00722f78
 800a4c4:	69746174 	ldmdbvs	r4!, {r2, r4, r5, r6, r8, sp, lr}^
 800a4c8:	63206e6f 			; <UNDEFINED> instruction: 0x63206e6f
 800a4cc:	72746e6f 	rsbsvc	r6, r4, #1776	; 0x6f0
 800a4d0:	00006c6f 	andeq	r6, r0, pc, ror #24

0800a4d4 <s_tTableC2>:
 800a4d4:	00000001 	andeq	r0, r0, r1
 800a4d8:	0800a04e 	stmdaeq	r0, {r1, r2, r3, r6, sp, pc}
 800a4dc:	00000002 	andeq	r0, r0, r2
 800a4e0:	0800a058 	stmdaeq	r0, {r3, r4, r6, sp, pc}
 800a4e4:	00000101 	andeq	r0, r0, r1, lsl #2
 800a4e8:	0800a069 	stmdaeq	r0, {r0, r3, r5, r6, sp, pc}
 800a4ec:	00000102 	andeq	r0, r0, r2, lsl #2
 800a4f0:	0800a06d 	stmdaeq	r0, {r0, r2, r3, r5, r6, sp, pc}
 800a4f4:	00000201 	andeq	r0, r0, r1, lsl #4
 800a4f8:	0800a072 	stmdaeq	r0, {r1, r4, r5, r6, sp, pc}
 800a4fc:	00000202 	andeq	r0, r0, r2, lsl #4
 800a500:	0800a07e 	stmdaeq	r0, {r1, r2, r3, r4, r5, r6, sp, pc}
 800a504:	00000203 	andeq	r0, r0, r3, lsl #4
 800a508:	0800a0a4 	stmdaeq	r0, {r2, r5, r7, sp, pc}
 800a50c:	00000204 	andeq	r0, r0, r4, lsl #4
 800a510:	0800a0cd 	stmdaeq	r0, {r0, r2, r3, r6, r7, sp, pc}
 800a514:	00000205 	andeq	r0, r0, r5, lsl #4
 800a518:	0800a0ef 	stmdaeq	r0, {r0, r1, r2, r3, r5, r6, r7, sp, pc}
 800a51c:	00000206 	andeq	r0, r0, r6, lsl #4
 800a520:	0800a10a 	stmdaeq	r0, {r1, r3, r8, sp, pc}
 800a524:	00000207 	andeq	r0, r0, r7, lsl #4
 800a528:	0800a127 	stmdaeq	r0, {r0, r1, r2, r5, r8, sp, pc}
 800a52c:	00000208 	andeq	r0, r0, r8, lsl #4
 800a530:	0800a143 	stmdaeq	r0, {r0, r1, r6, r8, sp, pc}
 800a534:	00000211 	andeq	r0, r0, r1, lsl r2
 800a538:	0800a160 	stmdaeq	r0, {r5, r6, r8, sp, pc}
 800a53c:	00000212 	andeq	r0, r0, r2, lsl r2
 800a540:	0800a17d 	stmdaeq	r0, {r0, r2, r3, r4, r5, r6, r8, sp, pc}
 800a544:	00000213 	andeq	r0, r0, r3, lsl r2
 800a548:	0800a19a 	stmdaeq	r0, {r1, r3, r4, r7, r8, sp, pc}
 800a54c:	00000214 	andeq	r0, r0, r4, lsl r2
 800a550:	0800a1bc 	stmdaeq	r0, {r2, r3, r4, r5, r7, r8, sp, pc}
 800a554:	00000215 	andeq	r0, r0, r5, lsl r2
 800a558:	0800a1de 	stmdaeq	r0, {r1, r2, r3, r4, r6, r7, r8, sp, pc}
 800a55c:	00000216 	andeq	r0, r0, r6, lsl r2
 800a560:	0800a1fb 	stmdaeq	r0, {r0, r1, r3, r4, r5, r6, r7, r8, sp, pc}
 800a564:	00000217 	andeq	r0, r0, r7, lsl r2
 800a568:	0800a1ff 	stmdaeq	r0, {r0, r1, r2, r3, r4, r5, r6, r7, r8, sp, pc}
 800a56c:	00000301 	andeq	r0, r0, r1, lsl #6
 800a570:	0800a20a 	stmdaeq	r0, {r1, r3, r9, sp, pc}
 800a574:	00000302 	andeq	r0, r0, r2, lsl #6
 800a578:	0800a21c 	stmdaeq	r0, {r2, r3, r4, r9, sp, pc}
 800a57c:	00000303 	andeq	r0, r0, r3, lsl #6
 800a580:	0800a230 	stmdaeq	r0, {r4, r5, r9, sp, pc}
 800a584:	00000304 	andeq	r0, r0, r4, lsl #6
 800a588:	0800a23c 	stmdaeq	r0, {r2, r3, r4, r5, r9, sp, pc}
 800a58c:	00000401 	andeq	r0, r0, r1, lsl #8
 800a590:	0800a24a 	stmdaeq	r0, {r1, r3, r6, r9, sp, pc}
 800a594:	00000402 	andeq	r0, r0, r2, lsl #8
 800a598:	0800a259 	stmdaeq	r0, {r0, r3, r4, r6, r9, sp, pc}
 800a59c:	00000403 	andeq	r0, r0, r3, lsl #8
 800a5a0:	0800a269 	stmdaeq	r0, {r0, r3, r5, r6, r9, sp, pc}
 800a5a4:	00000404 	andeq	r0, r0, r4, lsl #8
 800a5a8:	0800a279 	stmdaeq	r0, {r0, r3, r4, r5, r6, r9, sp, pc}
 800a5ac:	00000405 	andeq	r0, r0, r5, lsl #8
 800a5b0:	0800a288 	stmdaeq	r0, {r3, r7, r9, sp, pc}
 800a5b4:	00000406 	andeq	r0, r0, r6, lsl #8
 800a5b8:	0800a292 	stmdaeq	r0, {r1, r4, r7, r9, sp, pc}
 800a5bc:	00000407 	andeq	r0, r0, r7, lsl #8
 800a5c0:	0800a2a2 	stmdaeq	r0, {r1, r5, r7, r9, sp, pc}
 800a5c4:	00000408 	andeq	r0, r0, r8, lsl #8
 800a5c8:	0800a2bb 	stmdaeq	r0, {r0, r1, r3, r4, r5, r7, r9, sp, pc}
 800a5cc:	00000409 	andeq	r0, r0, r9, lsl #8
 800a5d0:	0800a2c2 	stmdaeq	r0, {r1, r6, r7, r9, sp, pc}
 800a5d4:	00000501 	andeq	r0, r0, r1, lsl #10
 800a5d8:	0800a2cc 	stmdaeq	r0, {r2, r3, r6, r7, r9, sp, pc}
 800a5dc:	00000502 	andeq	r0, r0, r2, lsl #10
 800a5e0:	0800a2e3 	stmdaeq	r0, {r0, r1, r5, r6, r7, r9, sp, pc}
 800a5e4:	00000504 	andeq	r0, r0, r4, lsl #10
 800a5e8:	0800a2fb 	stmdaeq	r0, {r0, r1, r3, r4, r5, r6, r7, r9, sp, pc}
 800a5ec:	00000505 	andeq	r0, r0, r5, lsl #10
 800a5f0:	0800a309 	stmdaeq	r0, {r0, r3, r8, r9, sp, pc}
 800a5f4:	00000506 	andeq	r0, r0, r6, lsl #10
 800a5f8:	0800a320 	stmdaeq	r0, {r5, r8, r9, sp, pc}
 800a5fc:	00000507 	andeq	r0, r0, r7, lsl #10
 800a600:	0800a32c 	stmdaeq	r0, {r2, r3, r5, r8, r9, sp, pc}
 800a604:	00000508 	andeq	r0, r0, r8, lsl #10
 800a608:	0800a33b 	stmdaeq	r0, {r0, r1, r3, r4, r5, r8, r9, sp, pc}
 800a60c:	0000ffff 	strdeq	pc, [r0], -pc	; <UNPREDICTABLE>
 800a610:	0800a040 	stmdaeq	r0, {r6, sp, pc}
 800a614:	70747468 	rsbsvc	r7, r4, r8, ror #8
 800a618:	2f2f3a73 	svccs	0x002f3a73
 800a61c:	32336467 	eorscc	r6, r3, #1728053248	; 0x67000000
 800a620:	786d642d 	stmdavc	sp!, {r0, r2, r3, r5, sl, sp, lr}^
 800a624:	67726f2e 	ldrbvs	r6, [r2, -lr, lsr #30]!
 800a628:	4d445200 	sfmmi	f5, 2, [r4, #-0]
 800a62c:	76654420 	strbtvc	r4, [r5], -r0, lsr #8
 800a630:	20656369 	rsbcs	r6, r5, r9, ror #6
 800a634:	666e6f63 	strbtvs	r6, [lr], -r3, ror #30
 800a638:	72756769 	rsbsvc	r6, r5, #27525120	; 0x1a40000
 800a63c:	6f697461 	svcvs	0x00697461
 800a640:	20000a6e 	andcs	r0, r0, lr, ror #20
 800a644:	756e614d 	strbvc	r6, [lr, #-333]!	; 0xfffffeb3
 800a648:	74636166 	strbtvc	r6, [r3], #-358	; 0xfffffe9a
 800a64c:	72657275 	rsbvc	r7, r5, #1342177287	; 0x50000007
 800a650:	6d614e20 	stclvs	14, cr4, [r1, #-128]!	; 0xffffff80
 800a654:	203a2065 	eorscs	r2, sl, r5, rrx
 800a658:	732a2e25 			; <UNDEFINED> instruction: 0x732a2e25
 800a65c:	4d20000a 	stcmi	0, cr0, [r0, #-40]!	; 0xffffffd8
 800a660:	66756e61 	ldrbtvs	r6, [r5], -r1, ror #28
 800a664:	75746361 	ldrbvc	r6, [r4, #-865]!	; 0xfffffc9f
 800a668:	20726572 	rsbscs	r6, r2, r2, ror r5
 800a66c:	20204449 	eorcs	r4, r0, r9, asr #8
 800a670:	25203a20 	strcs	r3, [r0, #-2592]!	; 0xfffff5e0
 800a674:	2558322e 	ldrbcs	r3, [r8, #-558]	; 0xfffffdd2
 800a678:	0a58322e 	beq	9616f38 <__exidx_end+0x160b668>
 800a67c:	65532000 	ldrbvs	r2, [r3, #-0]
 800a680:	6c616972 			; <UNDEFINED> instruction: 0x6c616972
 800a684:	6d754e20 	ldclvs	14, cr4, [r5, #-128]!	; 0xffffff80
 800a688:	20726562 	rsbscs	r6, r2, r2, ror #10
 800a68c:	20202020 	eorcs	r2, r0, r0, lsr #32
 800a690:	2e25203a 	mcrcs	0, 1, r2, cr5, cr10, {1}
 800a694:	2e255832 	mcrcs	8, 1, r5, cr5, cr2, {1}
 800a698:	2e255832 	mcrcs	8, 1, r5, cr5, cr2, {1}
 800a69c:	2e255832 	mcrcs	8, 1, r5, cr5, cr2, {1}
 800a6a0:	000a5832 	andeq	r5, sl, r2, lsr r8
 800a6a4:	6f6f5220 	svcvs	0x006f5220
 800a6a8:	616c2074 	smcvs	49668	; 0xc204
 800a6ac:	206c6562 	rsbcs	r6, ip, r2, ror #10
 800a6b0:	20202020 	eorcs	r2, r0, r0, lsr #32
 800a6b4:	3a202020 	bcc	881273c <__exidx_end+0x806e6c>
 800a6b8:	2a2e2520 	bcs	8b93b40 <__exidx_end+0xb88270>
 800a6bc:	20000a73 	andcs	r0, r0, r3, ror sl
 800a6c0:	646f7250 	strbtvs	r7, [pc], #-592	; 800a6c8 <s_tTableC2+0x1f4>
 800a6c4:	20746375 	rsbscs	r6, r4, r5, ror r3
 800a6c8:	65746143 	ldrbvs	r6, [r4, #-323]!	; 0xfffffebd
 800a6cc:	79726f67 	ldmdbvc	r2!, {r0, r1, r2, r5, r6, r8, r9, sl, fp, sp, lr}^
 800a6d0:	203a2020 	eorscs	r2, sl, r0, lsr #32
 800a6d4:	58322e25 	ldmdapl	r2!, {r0, r2, r5, r9, sl, fp, sp}
 800a6d8:	58322e25 	ldmdapl	r2!, {r0, r2, r5, r9, sl, fp, sp}
 800a6dc:	5020000a 	eorpl	r0, r0, sl
 800a6e0:	75646f72 	strbvc	r6, [r4, #-3954]!	; 0xfffff08e
 800a6e4:	44207463 	strtmi	r7, [r0], #-1123	; 0xfffffb9d
 800a6e8:	69617465 	stmdbvs	r1!, {r0, r2, r5, r6, sl, ip, sp, lr}^
 800a6ec:	2020206c 	eorcs	r2, r0, ip, rrx
 800a6f0:	25203a20 	strcs	r3, [r0, #-2592]!	; 0xfffff5e0
 800a6f4:	2558322e 	ldrbcs	r3, [r8, #-558]	; 0xfffffdd2
 800a6f8:	0a58322e 	beq	9616fb8 <__exidx_end+0x160b6e8>
	...

0800a6fd <DEVICE_LABEL>:
 800a6fd:	32334447 	eorscc	r4, r3, #1191182336	; 0x47000000
 800a701:	33303346 	teqcc	r0, #402653185	; 0x18000001
 800a705:	52204352 	eorpl	r4, r0, #1207959553	; 0x48000001
 800a709:	44204d44 	strtmi	r4, [r0], #-3396	; 0xfffff2bc
 800a70d:	63697665 	cmnvs	r9, #105906176	; 0x6500000
 800a711:	 	subseq	r0, r0, r5, rrx

0800a713 <RDMConst::MANUFACTURER_ID>:
 800a713:	 	strbtvc	r0, [r8], #-80	; 0xffffffb0

0800a715 <RDMConst::MANUFACTURER_NAME>:
 800a715:	70747468 	rsbsvc	r7, r4, r8, ror #8
 800a719:	772f2f3a 			; <UNDEFINED> instruction: 0x772f2f3a
 800a71d:	6f2e7777 	svcvs	0x002e7777
 800a721:	676e6172 			; <UNDEFINED> instruction: 0x676e6172
 800a725:	2d697065 	stclcs	0, cr7, [r9, #-404]!	; 0xfffffe6c
 800a729:	2e786d64 	cdpcs	13, 7, cr6, cr8, cr4, {3}
 800a72d:	0067726f 	rsbeq	r7, r7, pc, ror #4
 800a731:	65786950 	ldrbvs	r6, [r8, #-2384]!	; 0xfffff6b0
 800a735:	4d44206c 	stclmi	0, cr2, [r4, #-432]	; 0xfffffe50
 800a739:	6f632058 	svcvs	0x00632058
 800a73d:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
 800a741:	74617275 	strbtvc	r7, [r1], #-629	; 0xfffffd8b
 800a745:	0a6e6f69 	beq	9ba64f1 <__exidx_end+0x1b9ac21>
 800a749:	754f2000 	strbvc	r2, [pc, #-0]	; 800a751 <RDMConst::MANUFACTURER_NAME+0x3c>
 800a74d:	74757074 	ldrbtvc	r7, [r5], #-116	; 0xffffff8c
 800a751:	203a2073 	eorscs	r2, sl, r3, ror r0
 800a755:	000a6425 	andeq	r6, sl, r5, lsr #8
 800a759:	6f724720 	svcvs	0x00724720
 800a75d:	6e697075 	mcrvs	0, 3, r7, cr9, cr5, {3}
 800a761:	6f632067 	svcvs	0x00632067
 800a765:	20746e75 	rsbscs	r6, r4, r5, ror lr
 800a769:	6425203a 	strtvs	r2, [r5], #-58	; 0xffffffc6
 800a76d:	72475b20 	subvc	r5, r7, #32, 22	; 0x8000
 800a771:	7370756f 	cmnvc	r0, #465567744	; 0x1bc00000
 800a775:	25203a20 	strcs	r3, [r0, #-2592]!	; 0xfffff5e0
 800a779:	000a5d64 	andeq	r5, sl, r4, ror #26
 800a77d:	 	andeq	r0, r0, r0

0800a780 <vtable for WS28xxDmx>:
	...
 800a788:	08004cc5 	stmdaeq	r0, {r0, r2, r6, r7, sl, fp, lr}
 800a78c:	08004ce5 	stmdaeq	r0, {r0, r2, r5, r6, r7, sl, fp, lr}
 800a790:	08004e39 	stmdaeq	r0, {r0, r3, r4, r5, r9, sl, fp, lr}
 800a794:	08004e51 	stmdaeq	r0, {r0, r4, r6, r9, sl, fp, lr}
 800a798:	08004d1d 	stmdaeq	r0, {r0, r2, r3, r4, r8, sl, fp, lr}
 800a79c:	08004cf7 	stmdaeq	r0, {r0, r1, r2, r4, r5, r6, r7, sl, fp, lr}
 800a7a0:	08004e1d 	stmdaeq	r0, {r0, r2, r3, r4, r9, sl, fp, lr}
 800a7a4:	08004e33 	stmdaeq	r0, {r0, r1, r4, r5, r9, sl, fp, lr}
 800a7a8:	08004e69 	stmdaeq	r0, {r0, r3, r5, r6, r9, sl, fp, lr}
 800a7ac:	08004cb9 	stmdaeq	r0, {r0, r3, r4, r5, r7, sl, fp, lr}
 800a7b0:	08004cbf 	stmdaeq	r0, {r0, r1, r2, r3, r4, r5, r7, sl, fp, lr}
 800a7b4:	08004ea1 	stmdaeq	r0, {r0, r5, r7, r9, sl, fp, lr}

0800a7b8 <vtable for PixelDmxParamsRdm>:
	...
 800a7c0:	08005041 	stmdaeq	r0, {r0, r6, ip, lr}
 800a7c4:	08005043 	stmdaeq	r0, {r0, r1, r6, ip, lr}
 800a7c8:	0800502b 	stmdaeq	r0, {r0, r1, r3, r5, ip, lr}
 800a7cc:	0800502b 	stmdaeq	r0, {r0, r1, r3, r5, ip, lr}
 800a7d0:	08005065 	stmdaeq	r0, {r0, r2, r5, r6, ip, lr}
 800a7d4:	08005019 	stmdaeq	r0, {r0, r3, r4, ip, lr}
 800a7d8:	0800501b 	stmdaeq	r0, {r0, r1, r3, r4, ip, lr}
 800a7dc:	0800501d 	stmdaeq	r0, {r0, r2, r3, r4, ip, lr}
 800a7e0:	0800501f 	stmdaeq	r0, {r0, r1, r2, r3, r4, ip, lr}
 800a7e4:	08005023 	stmdaeq	r0, {r0, r1, r5, ip, lr}
 800a7e8:	08005027 	stmdaeq	r0, {r0, r1, r2, r5, ip, lr}
 800a7ec:	0800502d 	stmdaeq	r0, {r0, r2, r3, r5, ip, lr}
 800a7f0:	00736559 	rsbseq	r6, r3, r9, asr r5
 800a7f4:	50006f4e 	andpl	r6, r0, lr, asr #30
 800a7f8:	6c657869 	stclvs	8, cr7, [r5], #-420	; 0xfffffe5c
 800a7fc:	6e6f6320 	cdpvs	3, 6, cr6, cr15, cr0, {1}
 800a800:	75676966 	strbvc	r6, [r7, #-2406]!	; 0xfffff69a
 800a804:	69746172 	ldmdbvs	r4!, {r1, r4, r5, r6, r8, sp, lr}^
 800a808:	000a6e6f 	andeq	r6, sl, pc, ror #28
 800a80c:	70795420 	rsbsvc	r5, r9, r0, lsr #8
 800a810:	20202065 	eorcs	r2, r0, r5, rrx
 800a814:	25203a20 	strcs	r3, [r0, #-2592]!	; 0xfffff5e0
 800a818:	255b2073 	ldrbcs	r2, [fp, #-115]	; 0xffffff8d
 800a81c:	000a5d64 	andeq	r5, sl, r4, ror #26
 800a820:	756f4320 	strbvc	r4, [pc, #-800]!	; 800a508 <s_tTableC2+0x34>
 800a824:	2020746e 	eorcs	r7, r0, lr, ror #8
 800a828:	25203a20 	strcs	r3, [r0, #-2592]!	; 0xfffff5e0
 800a82c:	20000a64 	andcs	r0, r0, r4, ror #20
 800a830:	7070614d 	rsbsvc	r6, r0, sp, asr #2
 800a834:	20676e69 	rsbcs	r6, r7, r9, ror #28
 800a838:	7325203a 			; <UNDEFINED> instruction: 0x7325203a
 800a83c:	64255b20 	strtvs	r5, [r5], #-2848	; 0xfffff4e0
 800a840:	20000a5d 	andcs	r0, r0, sp, asr sl
 800a844:	20483054 	subcs	r3, r8, r4, asr r0
 800a848:	20202020 	eorcs	r2, r0, r0, lsr #32
 800a84c:	2e25203a 	mcrcs	0, 1, r2, cr5, cr10, {1}
 800a850:	5b206632 	blpl	8824120 <__exidx_end+0x818850>
 800a854:	58257830 	stmdapl	r5!, {r4, r5, fp, ip, sp, lr}
 800a858:	20000a5d 	andcs	r0, r0, sp, asr sl
 800a85c:	20483154 	subcs	r3, r8, r4, asr r1
 800a860:	20202020 	eorcs	r2, r0, r0, lsr #32
 800a864:	2e25203a 	mcrcs	0, 1, r2, cr5, cr10, {1}
 800a868:	5b206632 	blpl	8824138 <__exidx_end+0x818868>
 800a86c:	58257830 	stmdapl	r5!, {r4, r5, fp, ip, sp, lr}
 800a870:	20000a5d 	andcs	r0, r0, sp, asr sl
 800a874:	626f6c47 	rsbvs	r6, pc, #18176	; 0x4700
 800a878:	72426c61 	subvc	r6, r2, #24832	; 0x6100
 800a87c:	74686769 	strbtvc	r6, [r8], #-1897	; 0xfffff897
 800a880:	7373656e 	cmnvc	r3, #461373440	; 0x1b800000
 800a884:	7525203a 	strvc	r2, [r5, #-58]!	; 0xffffffc6
 800a888:	4720000a 	strmi	r0, [r0, -sl]!
 800a88c:	616d6d61 	cmnvs	sp, r1, ror #26
 800a890:	726f6320 	rsbvc	r6, pc, #32, 6	; 0x80000000
 800a894:	74636572 	strbtvc	r6, [r3], #-1394	; 0xfffffa8e
 800a898:	206e6f69 	rsbcs	r6, lr, r9, ror #30
 800a89c:	000a7325 	andeq	r7, sl, r5, lsr #6
 800a8a0:	6f6c4320 	svcvs	0x006c4320
 800a8a4:	203a6b63 	eorscs	r6, sl, r3, ror #22
 800a8a8:	48207525 	stmdami	r0!, {r0, r2, r5, r8, sl, ip, sp, lr}
 800a8ac:	00000a7a 	andeq	r0, r0, sl, ror sl

0800a8b0 <CSWTCH.9>:
 800a8b0:	0800aac4 	stmdaeq	r0, {r2, r6, r7, r9, fp, sp, pc}
 800a8b4:	0800abc4 	stmdaeq	r0, {r2, r6, r7, r8, r9, fp, sp, pc}
 800a8b8:	0800acc4 	stmdaeq	r0, {r2, r6, r7, sl, fp, sp, pc}
 800a8bc:	0800adc4 	stmdaeq	r0, {r2, r6, r7, r8, sl, fp, sp, pc}
 800a8c0:	0800aec4 	stmdaeq	r0, {r2, r6, r7, r9, sl, fp, sp, pc}

0800a8c4 <gamma10_0>:
 800a8c4:	03020100 	movweq	r0, #8448	; 0x2100
 800a8c8:	07060504 	streq	r0, [r6, -r4, lsl #10]
 800a8cc:	0b0a0908 	bleq	828ccf4 <__exidx_end+0x281424>
 800a8d0:	0f0e0d0c 	svceq	0x000e0d0c
 800a8d4:	13121110 	tstne	r2, #16, 2
 800a8d8:	17161514 			; <UNDEFINED> instruction: 0x17161514
 800a8dc:	1b1a1918 	blne	8690d44 <__exidx_end+0x685474>
 800a8e0:	1f1e1d1c 	svcne	0x001e1d1c
 800a8e4:	23222120 			; <UNDEFINED> instruction: 0x23222120
 800a8e8:	27262524 	strcs	r2, [r6, -r4, lsr #10]!
 800a8ec:	2b2a2928 	blcs	8a94d94 <__exidx_end+0xa894c4>
 800a8f0:	2f2e2d2c 	svccs	0x002e2d2c
 800a8f4:	33323130 	teqcc	r2, #48, 2
 800a8f8:	37363534 			; <UNDEFINED> instruction: 0x37363534
 800a8fc:	3b3a3938 	blcc	8e98de4 <__exidx_end+0xe8d514>
 800a900:	3f3e3d3c 	svccc	0x003e3d3c
 800a904:	43424140 	movtmi	r4, #8512	; 0x2140
 800a908:	47464544 	strbmi	r4, [r6, -r4, asr #10]
 800a90c:	4b4a4948 	blmi	929ce34 <__exidx_end+0x1291564>
 800a910:	4f4e4d4c 	svcmi	0x004e4d4c
 800a914:	53525150 	cmppl	r2, #80, 2
 800a918:	57565554 			; <UNDEFINED> instruction: 0x57565554
 800a91c:	5b5a5958 	blpl	96a0e84 <__exidx_end+0x16955b4>
 800a920:	5f5e5d5c 	svcpl	0x005e5d5c
 800a924:	63626160 	cmnvs	r2, #96, 2
 800a928:	67666564 	strbvs	r6, [r6, -r4, ror #10]!
 800a92c:	6b6a6968 	blvs	9aa4ed4 <__exidx_end+0x1a99604>
 800a930:	6f6e6d6c 	svcvs	0x006e6d6c
 800a934:	73727170 	cmnvc	r2, #112, 2
 800a938:	77767574 			; <UNDEFINED> instruction: 0x77767574
 800a93c:	7b7a7978 	blvc	9ea8f24 <__exidx_end+0x1e9d654>
 800a940:	7f7e7d7c 	svcvc	0x007e7d7c
 800a944:	83828180 	orrhi	r8, r2, #128, 2
 800a948:	87868584 	strhi	r8, [r6, r4, lsl #11]
 800a94c:	8b8a8988 	blhi	62acf74 <__heap_size+0x62abf74>
 800a950:	8f8e8d8c 	svchi	0x008e8d8c
 800a954:	93929190 	orrsls	r9, r2, #144, 2	; 0x24
 800a958:	97969594 			; <UNDEFINED> instruction: 0x97969594
 800a95c:	9b9a9998 	blls	66b0fc4 <__heap_size+0x66affc4>
 800a960:	9f9e9d9c 	svcls	0x009e9d9c
 800a964:	a3a2a1a0 			; <UNDEFINED> instruction: 0xa3a2a1a0
 800a968:	a7a6a5a4 	strge	sl, [r6, r4, lsr #11]!
 800a96c:	abaaa9a8 	blge	6ab5014 <__heap_size+0x6ab4014>
 800a970:	afaeadac 	svcge	0x00aeadac
 800a974:	b3b2b1b0 			; <UNDEFINED> instruction: 0xb3b2b1b0
 800a978:	b7b6b5b4 			; <UNDEFINED> instruction: 0xb7b6b5b4
 800a97c:	bbbab9b8 	bllt	6eb9064 <__heap_size+0x6eb8064>
 800a980:	bfbebdbc 	svclt	0x00bebdbc
 800a984:	c3c2c1c0 	bicgt	ip, r2, #192, 2	; 0x30
 800a988:	c7c6c5c4 	strbgt	ip, [r6, r4, asr #11]
 800a98c:	cbcac9c8 	blgt	72bd0b4 <__heap_size+0x72bc0b4>
 800a990:	cfcecdcc 	svcgt	0x00cecdcc
 800a994:	d3d2d1d0 	bicsle	sp, r2, #208, 2	; 0x34
 800a998:	d7d6d5d4 			; <UNDEFINED> instruction: 0xd7d6d5d4
 800a99c:	dbdad9d8 	blle	76c1104 <__heap_size+0x76c0104>
 800a9a0:	dfdedddc 	svcle	0x00dedddc
 800a9a4:	e3e2e1e0 	mvn	lr, #224, 2	; 0x38
 800a9a8:	e7e6e5e4 	strb	lr, [r6, r4, ror #11]!
 800a9ac:	ebeae9e8 	bl	7ac5154 <__heap_size+0x7ac4154>
 800a9b0:	efeeedec 	svc	0x00eeedec
 800a9b4:	f3f2f1f0 	vsra.u64	<illegal reg q15.5>, q8, #14
 800a9b8:	f7f6f5f4 			; <UNDEFINED> instruction: 0xf7f6f5f4
 800a9bc:	fbfaf9f8 	blx	7ec91a6 <__heap_size+0x7ec81a6>
 800a9c0:	fffefdfc 			; <UNDEFINED> instruction: 0xfffefdfc

0800a9c4 <gamma20_0>:
	...
 800a9d0:	01010101 	tsteq	r1, r1, lsl #2
 800a9d4:	01010101 	tsteq	r1, r1, lsl #2
 800a9d8:	02020202 	andeq	r0, r2, #536870912	; 0x20000000
 800a9dc:	03030202 	movweq	r0, #12802	; 0x3202
 800a9e0:	04040303 	streq	r0, [r4], #-771	; 0xfffffcfd
 800a9e4:	05050404 	streq	r0, [r5, #-1028]	; 0xfffffbfc
 800a9e8:	06060505 	streq	r0, [r6], -r5, lsl #10
 800a9ec:	07070706 	streq	r0, [r7, -r6, lsl #14]
 800a9f0:	09080808 	stmdbeq	r8, {r3, fp}
 800a9f4:	0a0a0909 	beq	828ce20 <__exidx_end+0x281550>
 800a9f8:	0c0b0b0b 			; <UNDEFINED> instruction: 0x0c0b0b0b
 800a9fc:	0e0d0d0c 	cdpeq	13, 0, cr0, cr13, cr12, {0}
 800aa00:	100f0f0e 	andne	r0, pc, lr, lsl #30
 800aa04:	12111110 	andsne	r1, r1, #16, 2
 800aa08:	14131312 	ldrne	r1, [r3], #-786	; 0xfffffcee
 800aa0c:	16151514 			; <UNDEFINED> instruction: 0x16151514
 800aa10:	18181717 	ldmdane	r8, {r0, r1, r2, r4, r8, r9, sl, ip}
 800aa14:	1b1a1a19 	blne	8691280 <__exidx_end+0x6859b0>
 800aa18:	1e1d1c1c 	mrcne	12, 0, r1, cr13, cr12, {0}
 800aa1c:	20201f1e 	eorcs	r1, r0, lr, lsl pc
 800aa20:	23232221 			; <UNDEFINED> instruction: 0x23232221
 800aa24:	26262524 	strtcs	r2, [r6], -r4, lsr #10
 800aa28:	2a292827 	bcs	8a54acc <__exidx_end+0xa491fc>
 800aa2c:	2d2c2b2a 	vstmdbcs	ip!, {d2-d22}
 800aa30:	302f2f2e 	eorcc	r2, pc, lr, lsr #30
 800aa34:	34333231 	ldrtcc	r3, [r3], #-561	; 0xfffffdcf
 800aa38:	38373635 	ldmdacc	r7!, {r0, r2, r4, r5, r9, sl, ip, sp}
 800aa3c:	3b3a3938 	blcc	8e98f24 <__exidx_end+0xe8d654>
 800aa40:	3f3e3d3c 	svccc	0x003e3d3c
 800aa44:	43424140 	movtmi	r4, #8512	; 0x2140
 800aa48:	47464544 	strbmi	r4, [r6, -r4, asr #10]
 800aa4c:	4c4b4a49 	mcrrmi	10, 4, r4, fp, cr9
 800aa50:	504f4e4d 	subpl	r4, pc, sp, asr #28
 800aa54:	55545251 	ldrbpl	r5, [r4, #-593]	; 0xfffffdaf
 800aa58:	59585756 	ldmdbpl	r8, {r1, r2, r4, r6, r8, r9, sl, ip, lr}^
 800aa5c:	5e5d5c5b 	mrcpl	12, 2, r5, cr13, cr11, {2}
 800aa60:	6362615f 	cmnvs	r2, #-1073741801	; 0xc0000017
 800aa64:	68676664 	stmdavs	r7!, {r2, r5, r6, r9, sl, sp, lr}^
 800aa68:	6d6c6b69 	fstmdbxvs	ip!, {d22-d73}	;@ Deprecated
 800aa6c:	7371706f 	cmnvc	r1, #111	; 0x6f
 800aa70:	78777574 	ldmdavc	r7!, {r2, r4, r5, r6, r8, sl, ip, sp, lr}^
 800aa74:	7e7c7b79 	vmovvc.s8	r7, d12[7]
 800aa78:	8382807f 	orrhi	r8, r2, #127	; 0x7f
 800aa7c:	89888685 	stmibhi	r8, {r0, r2, r7, r9, sl, pc}
 800aa80:	8f8e8c8b 	svchi	0x008e8c8b
 800aa84:	95949291 	ldrls	r9, [r4, #657]	; 0x291
 800aa88:	9b9a9897 	blls	66b0cec <__heap_size+0x66afcec>
 800aa8c:	a2a09e9d 	adcge	r9, r0, #2512	; 0x9d0
 800aa90:	a8a6a5a3 	stmiage	r6!, {r0, r1, r5, r7, r8, sl, sp, pc}
 800aa94:	afadabaa 	svcge	0x00adabaa
 800aa98:	b5b4b2b0 	ldrlt	fp, [r4, #688]!	; 0x2b0
 800aa9c:	bcbab9b7 			; <UNDEFINED> instruction: 0xbcbab9b7
 800aaa0:	c3c1c0be 	bicgt	ip, r1, #190	; 0xbe
 800aaa4:	cac8c7c5 	bgt	723c9c0 <__heap_size+0x723b9c0>
 800aaa8:	d1cfcecc 	bicle	ip, pc, ip, asr #29
 800aaac:	d9d7d5d3 	ldmible	r7, {r0, r1, r4, r6, r7, r8, sl, ip, lr, pc}^
 800aab0:	e0dedcda 	ldrsb	sp, [lr], #202	; 0xca
 800aab4:	e8e6e4e2 	stmia	r6!, {r1, r5, r6, r7, sl, sp, lr, pc}^
 800aab8:	efedebe9 	svc	0x00edebe9
 800aabc:	f7f5f3f1 			; <UNDEFINED> instruction: 0xf7f5f3f1
 800aac0:	fffdfbf9 			; <UNDEFINED> instruction: 0xfffdfbf9

0800aac4 <gamma21_0>:
	...
 800aad0:	01010000 	mrseq	r0, (UNDEF: 1)
 800aad4:	01010101 	tsteq	r1, r1, lsl #2
 800aad8:	02010101 	andeq	r0, r1, #1073741824	; 0x40000000
 800aadc:	02020202 	andeq	r0, r2, #536870912	; 0x20000000
 800aae0:	03030302 	movweq	r0, #13058	; 0x3302
 800aae4:	04040303 	streq	r0, [r4], #-771	; 0xfffffcfd
 800aae8:	05050404 	streq	r0, [r5, #-1028]	; 0xfffffbfc
 800aaec:	06060505 	streq	r0, [r6], -r5, lsl #10
 800aaf0:	07070706 	streq	r0, [r7, -r6, lsl #14]
 800aaf4:	09080808 	stmdbeq	r8, {r3, fp}
 800aaf8:	0a0a0909 	beq	828cf24 <__exidx_end+0x281654>
 800aafc:	0c0b0b0b 			; <UNDEFINED> instruction: 0x0c0b0b0b
 800ab00:	0e0d0d0c 	cdpeq	13, 0, cr0, cr13, cr12, {0}
 800ab04:	0f0f0e0e 	svceq	0x000f0e0e
 800ab08:	11111010 	tstne	r1, r0, lsl r0
 800ab0c:	14131212 	ldrne	r1, [r3], #-530	; 0xfffffdee
 800ab10:	16151514 			; <UNDEFINED> instruction: 0x16151514
 800ab14:	18181716 	ldmdane	r8, {r1, r2, r4, r8, r9, sl, ip}
 800ab18:	1b1a1919 	blne	8690f84 <__exidx_end+0x6856b4>
 800ab1c:	1d1d1c1b 	ldcne	12, cr1, [sp, #-108]	; 0xffffff94
 800ab20:	201f1f1e 	andscs	r1, pc, lr, lsl pc	; <UNPREDICTABLE>
 800ab24:	23222121 			; <UNDEFINED> instruction: 0x23222121
 800ab28:	26252424 	strtcs	r2, [r5], -r4, lsr #8
 800ab2c:	29282827 	stmdbcs	r8!, {r0, r1, r2, r5, fp, sp}
 800ab30:	2c2c2b2a 			; <UNDEFINED> instruction: 0x2c2c2b2a
 800ab34:	302f2e2d 	eorcc	r2, pc, sp, lsr #28
 800ab38:	33333231 	teqcc	r3, #268435459	; 0x10000003
 800ab3c:	37363534 			; <UNDEFINED> instruction: 0x37363534
 800ab40:	3b3a3938 	blcc	8e99028 <__exidx_end+0xe8d758>
 800ab44:	3f3e3d3c 	svccc	0x003e3d3c
 800ab48:	43424140 	movtmi	r4, #8512	; 0x2140
 800ab4c:	47464544 	strbmi	r4, [r6, -r4, asr #10]
 800ab50:	4c4b4948 	mcrrmi	9, 4, r4, fp, cr8	; <UNPREDICTABLE>
 800ab54:	504f4e4d 	subpl	r4, pc, sp, asr #28
 800ab58:	55545351 	ldrbpl	r5, [r4, #-849]	; 0xfffffcaf
 800ab5c:	5a585756 	bpl	96208bc <__exidx_end+0x1614fec>
 800ab60:	5f5d5c5b 	svcpl	0x005d5c5b
 800ab64:	64626160 	strbtvs	r6, [r2], #-352	; 0xfffffea0
 800ab68:	69686665 	stmdbvs	r8!, {r0, r2, r5, r6, r9, sl, sp, lr}^
 800ab6c:	6e6d6b6a 	vnmulvs.f64	d22, d13, d26
 800ab70:	74727170 	ldrbtvc	r7, [r2], #-368	; 0xfffffe90
 800ab74:	79787675 	ldmdbvc	r8!, {r0, r2, r4, r5, r6, r9, sl, ip, sp, lr}^
 800ab78:	7f7e7c7b 	svcvc	0x007e7c7b
 800ab7c:	85838281 	strhi	r8, [r3, #641]	; 0x281
 800ab80:	8b898886 	blhi	626cda0 <__heap_size+0x626bda0>
 800ab84:	91908e8d 	orrsls	r8, r0, sp, lsl #29
 800ab88:	97969493 			; <UNDEFINED> instruction: 0x97969493
 800ab8c:	9e9c9b99 	vmovls.32	r9, d28[0]
 800ab90:	a5a3a1a0 	strge	sl, [r3, #416]!	; 0x1a0
 800ab94:	abaaa8a6 	blge	6ab4e34 <__heap_size+0x6ab3e34>
 800ab98:	b2b0afad 	adcslt	sl, r0, #692	; 0x2b4
 800ab9c:	b9b7b6b4 	ldmiblt	r7!, {r2, r4, r5, r7, r9, sl, ip, sp, pc}
 800aba0:	c0bfbdbb 	ldrhtgt	fp, [pc], fp
 800aba4:	c8c6c4c2 	stmiagt	r6, {r1, r6, r7, sl, lr, pc}^
 800aba8:	cfcdcbca 	svcgt	0x00cdcbca
 800abac:	d7d5d3d1 			; <UNDEFINED> instruction: 0xd7d5d3d1
 800abb0:	dfdddbd9 	svcle	0x00dddbd9
 800abb4:	e6e4e2e1 	strbt	lr, [r4], r1, ror #5
 800abb8:	eeeceae8 	vfms.f32	s29, s25, s17
 800abbc:	f7f5f3f1 			; <UNDEFINED> instruction: 0xf7f5f3f1
 800abc0:	fffdfbf9 			; <UNDEFINED> instruction: 0xfffdfbf9

0800abc4 <gamma22_0>:
	...
 800abd0:	01000000 	mrseq	r0, (UNDEF: 0)
 800abd4:	01010101 	tsteq	r1, r1, lsl #2
 800abd8:	01010101 	tsteq	r1, r1, lsl #2
 800abdc:	02020201 	andeq	r0, r2, #268435456	; 0x10000000
 800abe0:	02020202 	andeq	r0, r2, #536870912	; 0x20000000
 800abe4:	03030303 	movweq	r0, #13059	; 0x3303
 800abe8:	04040403 	streq	r0, [r4], #-1027	; 0xfffffbfd
 800abec:	05050504 	streq	r0, [r5, #-1284]	; 0xfffffafc
 800abf0:	06060605 	streq	r0, [r6], -r5, lsl #12
 800abf4:	07070706 	streq	r0, [r7, -r6, lsl #14]
 800abf8:	09080808 	stmdbeq	r8, {r3, fp}
 800abfc:	0a0a0909 	beq	828d028 <__exidx_end+0x281758>
 800ac00:	0c0b0b0b 			; <UNDEFINED> instruction: 0x0c0b0b0b
 800ac04:	0d0d0d0c 	stceq	13, cr0, [sp, #-48]	; 0xffffffd0
 800ac08:	0f0f0e0e 	svceq	0x000f0e0e
 800ac0c:	11111010 	tstne	r1, r0, lsl r0
 800ac10:	13131212 	tstne	r3, #536870913	; 0x20000001
 800ac14:	16151414 			; <UNDEFINED> instruction: 0x16151414
 800ac18:	18171716 	ldmdane	r7, {r1, r2, r4, r8, r9, sl, ip}
 800ac1c:	1a1a1919 	bne	8691088 <__exidx_end+0x6857b8>
 800ac20:	1d1c1c1b 	ldcne	12, cr1, [ip, #-108]	; 0xffffff94
 800ac24:	201f1e1e 	andscs	r1, pc, lr, lsl lr	; <UNPREDICTABLE>
 800ac28:	23222121 			; <UNDEFINED> instruction: 0x23222121
 800ac2c:	26252423 	strtcs	r2, [r5], -r3, lsr #8
 800ac30:	29282727 	stmdbcs	r8!, {r0, r1, r2, r5, r8, r9, sl, sp}
 800ac34:	2c2b2b2a 			; <UNDEFINED> instruction: 0x2c2b2b2a
 800ac38:	302f2e2d 	eorcc	r2, pc, sp, lsr #28
 800ac3c:	33323131 	teqcc	r2, #1073741836	; 0x4000000c
 800ac40:	37363534 			; <UNDEFINED> instruction: 0x37363534
 800ac44:	3b3a3938 	blcc	8e9912c <__exidx_end+0xe8d85c>
 800ac48:	3f3e3d3c 	svccc	0x003e3d3c
 800ac4c:	43424140 	movtmi	r4, #8512	; 0x2140
 800ac50:	47464544 	strbmi	r4, [r6, -r4, asr #10]
 800ac54:	4c4b4a49 	mcrrmi	10, 4, r4, fp, cr9
 800ac58:	514f4e4d 	cmppl	pc, sp, asr #28
 800ac5c:	55545352 	ldrbpl	r5, [r4, #-850]	; 0xfffffcae
 800ac60:	5a595857 	bpl	9660dc4 <__exidx_end+0x16554f4>
 800ac64:	5f5e5d5b 	svcpl	0x005e5d5b
 800ac68:	64636261 	strbtvs	r6, [r3], #-609	; 0xfffffd9f
 800ac6c:	6a696766 	bvs	9a64a0c <__exidx_end+0x1a5913c>
 800ac70:	6f6e6d6b 	svcvs	0x006e6d6b
 800ac74:	75747271 	ldrbvc	r7, [r4, #-625]!	; 0xfffffd8f
 800ac78:	7b797877 	blvc	9e68e5c <__exidx_end+0x1e5d58c>
 800ac7c:	817f7e7c 	cmnhi	pc, ip, ror lr	; <UNPREDICTABLE>
 800ac80:	87858482 	strhi	r8, [r5, r2, lsl #9]
 800ac84:	8d8c8a89 	vstrhi	s16, [ip, #548]	; 0x224
 800ac88:	9492918f 	ldrls	r9, [r2], #399	; 0x18f
 800ac8c:	9a999795 	bls	6670ae8 <__heap_size+0x666fae8>
 800ac90:	a19f9e9c 			; <UNDEFINED> instruction: 0xa19f9e9c
 800ac94:	a8a6a5a3 	stmiage	r6!, {r0, r1, r5, r7, r8, sl, sp, pc}
 800ac98:	afadacaa 	svcge	0x00adacaa
 800ac9c:	b6b5b3b1 			; <UNDEFINED> instruction: 0xb6b5b3b1
 800aca0:	bebcbab8 			; <UNDEFINED> instruction: 0xbebcbab8
 800aca4:	c5c4c2c0 	strbgt	ip, [r4, #704]	; 0x2c0
 800aca8:	cdcbc9c7 	vstrgt.16	s25, [fp, #398]	; 0x18e	; <UNPREDICTABLE>
 800acac:	d5d3d1cf 	ldrble	sp, [r3, #463]	; 0x1cf
 800acb0:	dddbd9d7 	vldrle.16	s27, [fp, #430]	; 0x1ae	; <UNPREDICTABLE>
 800acb4:	e5e3e1df 	strb	lr, [r3, #479]!	; 0x1df
 800acb8:	eeeceae7 	vfms.f32	s29, s25, s15
 800acbc:	f6f4f2f0 			; <UNDEFINED> instruction: 0xf6f4f2f0
 800acc0:	fffdfbf8 			; <UNDEFINED> instruction: 0xfffdfbf8

0800acc4 <gamma23_0>:
	...
 800acd4:	01010100 	mrseq	r0, (UNDEF: 17)
 800acd8:	01010101 	tsteq	r1, r1, lsl #2
 800acdc:	01010101 	tsteq	r1, r1, lsl #2
 800ace0:	02020202 	andeq	r0, r2, #536870912	; 0x20000000
 800ace4:	03020202 	movweq	r0, #8706	; 0x2202
 800ace8:	03030303 	movweq	r0, #13059	; 0x3303
 800acec:	04040404 	streq	r0, [r4], #-1028	; 0xfffffbfc
 800acf0:	05050504 	streq	r0, [r5, #-1284]	; 0xfffffafc
 800acf4:	06060605 	streq	r0, [r6], -r5, lsl #12
 800acf8:	07070707 	streq	r0, [r7, -r7, lsl #14]
 800acfc:	09080808 	stmdbeq	r8, {r3, fp}
 800ad00:	0a0a0a09 	beq	828d52c <__exidx_end+0x281c5c>
 800ad04:	0c0b0b0b 			; <UNDEFINED> instruction: 0x0c0b0b0b
 800ad08:	0d0d0d0c 	stceq	13, cr0, [sp, #-48]	; 0xffffffd0
 800ad0c:	0f0f0e0e 	svceq	0x000f0e0e
 800ad10:	11111010 	tstne	r1, r0, lsl r0
 800ad14:	13131212 	tstne	r3, #536870913	; 0x20000001
 800ad18:	15151414 	ldrne	r1, [r5, #-1044]	; 0xfffffbec
 800ad1c:	18171716 	ldmdane	r7, {r1, r2, r4, r8, r9, sl, ip}
 800ad20:	1a1a1918 	bne	8691188 <__exidx_end+0x6858b8>
 800ad24:	1d1c1c1b 	ldcne	12, cr1, [ip, #-108]	; 0xffffff94
 800ad28:	201f1e1e 	andscs	r1, pc, lr, lsl lr	; <UNPREDICTABLE>
 800ad2c:	23222120 			; <UNDEFINED> instruction: 0x23222120
 800ad30:	26252423 	strtcs	r2, [r5], -r3, lsr #8
 800ad34:	29282726 	stmdbcs	r8!, {r1, r2, r5, r8, r9, sl, sp}
 800ad38:	2c2b2a2a 			; <UNDEFINED> instruction: 0x2c2b2a2a
 800ad3c:	302f2e2d 	eorcc	r2, pc, sp, lsr #28
 800ad40:	33323131 	teqcc	r2, #1073741836	; 0x4000000c
 800ad44:	37363534 			; <UNDEFINED> instruction: 0x37363534
 800ad48:	3b3a3938 	blcc	8e99230 <__exidx_end+0xe8d960>
 800ad4c:	3f3e3d3c 	svccc	0x003e3d3c
 800ad50:	43424140 	movtmi	r4, #8512	; 0x2140
 800ad54:	48474645 	stmdami	r7, {r0, r2, r6, r9, sl, lr}^
 800ad58:	4c4b4a49 	mcrrmi	10, 4, r4, fp, cr9
 800ad5c:	51504f4e 	cmppl	r0, lr, asr #30
 800ad60:	56555452 			; <UNDEFINED> instruction: 0x56555452
 800ad64:	5b5a5957 	blpl	96a12c8 <__exidx_end+0x16959f8>
 800ad68:	605f5e5c 	subsvs	r5, pc, ip, asr lr	; <UNPREDICTABLE>
 800ad6c:	66646362 	strbtvs	r6, [r4], -r2, ror #6
 800ad70:	6b6a6867 	blvs	9aa4f14 <__exidx_end+0x1a99644>
 800ad74:	71706e6d 	cmnvc	r0, sp, ror #28
 800ad78:	77757472 			; <UNDEFINED> instruction: 0x77757472
 800ad7c:	7d7b7a78 	vldmdbvc	fp!, {s15-s134}
 800ad80:	8382807e 	orrhi	r8, r2, #126	; 0x7e
 800ad84:	8a888685 	bhi	622c7a0 <__heap_size+0x622b7a0>
 800ad88:	908f8d8b 	addls	r8, pc, fp, lsl #27
 800ad8c:	97959492 			; <UNDEFINED> instruction: 0x97959492
 800ad90:	9e9c9a99 			; <UNDEFINED> instruction: 0x9e9c9a99
 800ad94:	a5a3a1a0 	strge	sl, [r3, #416]!	; 0x1a0
 800ad98:	acaaa9a7 			; <UNDEFINED> instruction: 0xacaaa9a7
 800ad9c:	b4b2b0ae 	ldrtlt	fp, [r2], #174	; 0xae
 800ada0:	bbb9b7b6 	bllt	6e78c80 <__heap_size+0x6e77c80>
 800ada4:	c3c1bfbd 	bicgt	fp, r1, #756	; 0x2f4
 800ada8:	cbc9c7c5 	blgt	727ccc4 <__heap_size+0x727bcc4>
 800adac:	d3d1cfcd 	bicsle	ip, r1, #820	; 0x334
 800adb0:	dcdad7d5 	ldclle	7, cr13, [sl], {213}	; 0xd5
 800adb4:	e4e2e0de 	strbt	lr, [r2], #222	; 0xde
 800adb8:	edebe9e6 			; <UNDEFINED> instruction: 0xedebe9e6
 800adbc:	f6f4f1ef 			; <UNDEFINED> instruction: 0xf6f4f1ef
 800adc0:	fffdfaf8 			; <UNDEFINED> instruction: 0xfffdfaf8

0800adc4 <gamma24_0>:
	...
 800add4:	01000000 	mrseq	r0, (UNDEF: 0)
 800add8:	01010101 	tsteq	r1, r1, lsl #2
 800addc:	01010101 	tsteq	r1, r1, lsl #2
 800ade0:	02010101 	andeq	r0, r1, #1073741824	; 0x40000000
 800ade4:	02020202 	andeq	r0, r2, #536870912	; 0x20000000
 800ade8:	03030202 	movweq	r0, #12802	; 0x3202
 800adec:	04030303 	streq	r0, [r3], #-771	; 0xfffffcfd
 800adf0:	04040404 	streq	r0, [r4], #-1028	; 0xfffffbfc
 800adf4:	05050505 	streq	r0, [r5, #-1285]	; 0xfffffafb
 800adf8:	06060606 	streq	r0, [r6], -r6, lsl #12
 800adfc:	08070707 	stmdaeq	r7, {r0, r1, r2, r8, r9, sl}
 800ae00:	09090808 	stmdbeq	r9, {r3, fp}
 800ae04:	0a0a0a09 	beq	828d630 <__exidx_end+0x281d60>
 800ae08:	0c0b0b0b 			; <UNDEFINED> instruction: 0x0c0b0b0b
 800ae0c:	0e0d0d0c 	cdpeq	13, 0, cr0, cr13, cr12, {0}
 800ae10:	0f0f0e0e 	svceq	0x000f0e0e
 800ae14:	11111010 	tstne	r1, r0, lsl r0
 800ae18:	13131212 	tstne	r3, #536870913	; 0x20000001
 800ae1c:	16151414 			; <UNDEFINED> instruction: 0x16151414
 800ae20:	18171716 	ldmdane	r7, {r1, r2, r4, r8, r9, sl, ip}
 800ae24:	1a1a1918 	bne	869128c <__exidx_end+0x6859bc>
 800ae28:	1d1c1c1b 	ldcne	12, cr1, [ip, #-108]	; 0xffffff94
 800ae2c:	201f1e1e 	andscs	r1, pc, lr, lsl lr	; <UNPREDICTABLE>
 800ae30:	23222120 			; <UNDEFINED> instruction: 0x23222120
 800ae34:	26252423 	strtcs	r2, [r5], -r3, lsr #8
 800ae38:	29282727 	stmdbcs	r8!, {r0, r1, r2, r5, r8, r9, sl, sp}
 800ae3c:	2c2b2b2a 			; <UNDEFINED> instruction: 0x2c2b2b2a
 800ae40:	302f2e2d 	eorcc	r2, pc, sp, lsr #28
 800ae44:	34333231 	ldrtcc	r3, [r3], #-561	; 0xfffffdcf
 800ae48:	37363535 			; <UNDEFINED> instruction: 0x37363535
 800ae4c:	3b3a3938 	blcc	8e99334 <__exidx_end+0xe8da64>
 800ae50:	403f3e3c 	eorsmi	r3, pc, ip, lsr lr	; <UNPREDICTABLE>
 800ae54:	44434241 	strbmi	r4, [r3], #-577	; 0xfffffdbf
 800ae58:	49474645 	stmdbmi	r7, {r0, r2, r6, r9, sl, lr}^
 800ae5c:	4d4c4b4a 	vstrmi	d20, [ip, #-296]	; 0xfffffed8
 800ae60:	5251504e 	subspl	r5, r1, #78	; 0x4e
 800ae64:	57565553 			; <UNDEFINED> instruction: 0x57565553
 800ae68:	5c5b5a58 	mrrcpl	10, 5, r5, fp, cr8
 800ae6c:	62605f5e 	rsbvs	r5, r0, #376	; 0x178
 800ae70:	67666463 	strbvs	r6, [r6, -r3, ror #8]!
 800ae74:	6d6c6a69 	vstmdbvs	ip!, {s13-s117}
 800ae78:	7372706f 	cmnvc	r2, #111	; 0x6f
 800ae7c:	79787675 	ldmdbvc	r8!, {r0, r2, r4, r5, r6, r9, sl, ip, sp, lr}^
 800ae80:	7f7e7c7b 	svcvc	0x007e7c7b
 800ae84:	86848381 	strhi	r8, [r4], r1, lsl #7
 800ae88:	8d8b8988 	vstrhi.16	s16, [fp, #272]	; 0x110	; <UNPREDICTABLE>
 800ae8c:	9492908e 	ldrls	r9, [r2], #142	; 0x8e
 800ae90:	9b999795 	blls	6670cec <__heap_size+0x666fcec>
 800ae94:	a2a09e9c 	adcge	r9, r0, #156, 28	; 0x9c0
 800ae98:	a9a7a6a4 	stmibge	r7!, {r2, r5, r7, r9, sl, sp, pc}
 800ae9c:	b1afadab 			; <UNDEFINED> instruction: 0xb1afadab
 800aea0:	b9b7b5b3 	ldmiblt	r7!, {r0, r1, r4, r5, r7, r8, sl, ip, sp, pc}
 800aea4:	c1bfbdbb 			; <UNDEFINED> instruction: 0xc1bfbdbb
 800aea8:	c9c7c5c3 	stmibgt	r7, {r0, r1, r6, r7, r8, sl, lr, pc}^
 800aeac:	d2cfcdcb 	sbcle	ip, pc, #12992	; 0x32c0
 800aeb0:	dad8d6d4 	ble	7640a08 <__heap_size+0x763fa08>
 800aeb4:	e3e1dfdc 	mvn	sp, #220, 30	; 0x370
 800aeb8:	eceae8e5 	stcl	8, cr14, [sl], #916	; 0x394
 800aebc:	f6f3f1ef 			; <UNDEFINED> instruction: 0xf6f3f1ef
 800aec0:	fffdfaf8 			; <UNDEFINED> instruction: 0xfffdfaf8

0800aec4 <gamma25_0>:
	...
 800aed8:	01010000 	mrseq	r0, (UNDEF: 1)
 800aedc:	01010101 	tsteq	r1, r1, lsl #2
 800aee0:	01010101 	tsteq	r1, r1, lsl #2
 800aee4:	02020201 	andeq	r0, r2, #268435456	; 0x10000000
 800aee8:	02020202 	andeq	r0, r2, #536870912	; 0x20000000
 800aeec:	03030302 	movweq	r0, #13058	; 0x3302
 800aef0:	04040303 	streq	r0, [r4], #-771	; 0xfffffcfd
 800aef4:	05040404 	streq	r0, [r4, #-1028]	; 0xfffffbfc
 800aef8:	06050505 	streq	r0, [r5], -r5, lsl #10
 800aefc:	07060606 	streq	r0, [r6, -r6, lsl #12]
 800af00:	08070707 	stmdaeq	r7, {r0, r1, r2, r8, r9, sl}
 800af04:	09090808 	stmdbeq	r9, {r3, fp}
 800af08:	0a0a0a09 	beq	828d734 <__exidx_end+0x281e64>
 800af0c:	0c0c0b0b 			; <UNDEFINED> instruction: 0x0c0c0b0b
 800af10:	0e0d0d0c 	cdpeq	13, 0, cr0, cr13, cr12, {0}
 800af14:	0f0f0f0e 	svceq	0x000f0f0e
 800af18:	11111010 	tstne	r1, r0, lsl r0
 800af1c:	13131212 	tstne	r3, #536870913	; 0x20000001
 800af20:	16151414 			; <UNDEFINED> instruction: 0x16151414
 800af24:	18171716 	ldmdane	r7, {r1, r2, r4, r8, r9, sl, ip}
 800af28:	1a1a1919 	bne	8691394 <__exidx_end+0x685ac4>
 800af2c:	1d1c1c1b 	ldcne	12, cr1, [ip, #-108]	; 0xffffff94
 800af30:	201f1e1e 	andscs	r1, pc, lr, lsl lr	; <UNPREDICTABLE>
 800af34:	23222121 			; <UNDEFINED> instruction: 0x23222121
 800af38:	26252424 	strtcs	r2, [r5], -r4, lsr #8
 800af3c:	29282827 	stmdbcs	r8!, {r0, r1, r2, r5, fp, sp}
 800af40:	2d2c2b2a 	vstmdbcs	ip!, {d2-d22}
 800af44:	302f2e2e 	eorcc	r2, pc, lr, lsr #28
 800af48:	34333231 	ldrtcc	r3, [r3], #-561	; 0xfffffdcf
 800af4c:	38373635 	ldmdacc	r7!, {r0, r2, r4, r5, r9, sl, ip, sp}
 800af50:	3c3b3a39 			; <UNDEFINED> instruction: 0x3c3b3a39
 800af54:	403f3e3d 	eorsmi	r3, pc, sp, lsr lr	; <UNPREDICTABLE>
 800af58:	45444341 	strbmi	r4, [r4, #-833]	; 0xfffffcbf
 800af5c:	49484746 	stmdbmi	r8, {r1, r2, r6, r8, r9, sl, lr}^
 800af60:	4e4d4c4b 	cdpmi	12, 4, cr4, cr13, cr11, {2}
 800af64:	53525150 	cmppl	r2, #80, 2
 800af68:	59575655 	ldmdbpl	r7, {r0, r2, r4, r6, r9, sl, ip, lr}^
 800af6c:	5e5d5b5a 	vmovpl.s8	r5, d13[2]
 800af70:	6362615f 	cmnvs	r2, #-1073741801	; 0xc0000017
 800af74:	69686665 	stmdbvs	r8!, {r0, r2, r5, r6, r9, sl, sp, lr}^
 800af78:	6f6e6c6b 	svcvs	0x006e6c6b
 800af7c:	75747271 	ldrbvc	r7, [r4, #-625]!	; 0xfffffd8f
 800af80:	7c7a7977 			; <UNDEFINED> instruction: 0x7c7a7977
 800af84:	82817f7d 	addhi	r7, r1, #500	; 0x1f4
 800af88:	89878684 	stmibhi	r7, {r2, r7, r9, sl, pc}
 800af8c:	908e8d8b 	addls	r8, lr, fp, lsl #27
 800af90:	97969492 			; <UNDEFINED> instruction: 0x97969492
 800af94:	9f9d9b99 	svcls	0x009d9b99
 800af98:	a6a5a3a1 	strtge	sl, [r5], r1, lsr #7
 800af9c:	aeacaaa8 	vfmage.f32	s20, s25, s17
 800afa0:	b6b4b2b0 			; <UNDEFINED> instruction: 0xb6b4b2b0
 800afa4:	bfbdbab8 	svclt	0x00bdbab8
 800afa8:	c7c5c3c1 	strbgt	ip, [r5, r1, asr #7]
 800afac:	d0ceccc9 	sbcle	ip, lr, r9, asr #25
 800afb0:	d9d7d4d2 	ldmible	r7, {r1, r4, r6, r7, sl, ip, lr, pc}^
 800afb4:	e2e0dddb 	rsc	sp, r0, #14016	; 0x36c0
 800afb8:	ebe9e7e4 	bl	7a84f50 <__heap_size+0x7a83f50>
 800afbc:	f5f3f0ee 			; <UNDEFINED> instruction: 0xf5f3f0ee
 800afc0:	fffdfaf8 			; <UNDEFINED> instruction: 0xfffdfaf8

0800afc4 <gamma25_5>:
 800afc4:	01010100 	mrseq	r0, (UNDEF: 17)
 800afc8:	01010101 	tsteq	r1, r1, lsl #2
 800afcc:	01010101 	tsteq	r1, r1, lsl #2
 800afd0:	01010101 	tsteq	r1, r1, lsl #2
 800afd4:	01010101 	tsteq	r1, r1, lsl #2
 800afd8:	01010101 	tsteq	r1, r1, lsl #2
 800afdc:	01010101 	tsteq	r1, r1, lsl #2
 800afe0:	02020202 	andeq	r0, r2, #536870912	; 0x20000000
 800afe4:	02020202 	andeq	r0, r2, #536870912	; 0x20000000
 800afe8:	03030302 	movweq	r0, #13058	; 0x3302
 800afec:	03030303 	movweq	r0, #13059	; 0x3303
 800aff0:	04040404 	streq	r0, [r4], #-1028	; 0xfffffbfc
 800aff4:	05050504 	streq	r0, [r5, #-1284]	; 0xfffffafc
 800aff8:	06060605 	streq	r0, [r6], -r5, lsl #12
 800affc:	07070706 	streq	r0, [r7, -r6, lsl #14]
 800b000:	08080807 	stmdaeq	r8, {r0, r1, r2, fp}
 800b004:	0a090909 	beq	824d430 <__exidx_end+0x241b60>
 800b008:	0b0b0a0a 	bleq	82cd838 <__exidx_end+0x2c1f68>
 800b00c:	0c0c0c0b 	stceq	12, cr0, [ip], {11}
 800b010:	0e0e0d0d 	cdpeq	13, 0, cr0, cr14, cr13, {0}
 800b014:	100f0f0f 	andne	r0, pc, pc, lsl #30
 800b018:	12111110 	andsne	r1, r1, #16, 2
 800b01c:	14131312 	ldrne	r1, [r3], #-786	; 0xfffffcee
 800b020:	16161514 			; <UNDEFINED> instruction: 0x16161514
 800b024:	18181717 	ldmdane	r8, {r0, r1, r2, r4, r8, r9, sl, ip}
 800b028:	1b1a1a19 	blne	8691894 <__exidx_end+0x685fc4>
 800b02c:	1e1d1c1c 	mrcne	12, 0, r1, cr13, cr12, {0}
 800b030:	20201f1e 	eorcs	r1, r0, lr, lsl pc
 800b034:	23232221 			; <UNDEFINED> instruction: 0x23232221
 800b038:	26262524 	strtcs	r2, [r6], -r4, lsr #10
 800b03c:	2a292827 	bcs	8a550e0 <__exidx_end+0xa49810>
 800b040:	2d2c2b2b 	fstmdbxcs	ip!, {d2-d22}	;@ Deprecated
 800b044:	31302f2e 	teqcc	r0, lr, lsr #30
 800b048:	35343332 	ldrcc	r3, [r4, #-818]!	; 0xfffffcce
 800b04c:	38373635 	ldmdacc	r7!, {r0, r2, r4, r5, r9, sl, ip, sp}
 800b050:	3d3c3a39 	vldmdbcc	ip!, {s6-s62}
 800b054:	41403f3e 	cmpmi	r0, lr, lsr pc
 800b058:	45444342 	strbmi	r4, [r4, #-834]	; 0xfffffcbe
 800b05c:	4a494846 	bmi	925d17c <__exidx_end+0x12518ac>
 800b060:	4f4e4c4b 	svcmi	0x004e4c4b
 800b064:	54535150 	ldrbpl	r5, [r3], #-336	; 0xfffffeb0
 800b068:	59585655 	ldmdbpl	r8, {r0, r2, r4, r6, r9, sl, ip, lr}^
 800b06c:	5e5d5c5a 	mrcpl	12, 2, r5, cr13, cr10, {2}
 800b070:	64636160 	strbtvs	r6, [r3], #-352	; 0xfffffea0
 800b074:	6a686765 	bvs	9a24e10 <__exidx_end+0x1a19540>
 800b078:	706e6d6b 	rsbvc	r6, lr, fp, ror #26
 800b07c:	76747371 			; <UNDEFINED> instruction: 0x76747371
 800b080:	7c7b7978 			; <UNDEFINED> instruction: 0x7c7b7978
 800b084:	8381807e 	orrhi	r8, r1, #126	; 0x7e
 800b088:	8a888685 	bhi	622caa4 <__heap_size+0x622baa4>
 800b08c:	918f8d8b 	orrls	r8, pc, fp, lsl #27
 800b090:	98969492 	ldmls	r6, {r1, r4, r7, sl, ip, pc}
 800b094:	9f9d9c9a 	svcls	0x009d9c9a
 800b098:	a7a5a3a1 	strge	sl, [r5, r1, lsr #7]!
 800b09c:	afadaba9 	svcge	0x00adaba9
 800b0a0:	b7b5b3b1 			; <UNDEFINED> instruction: 0xb7b5b3b1
 800b0a4:	bfbdbbb9 	svclt	0x00bdbbb9
 800b0a8:	c8c6c3c1 	stmiagt	r6, {r0, r6, r7, r8, r9, lr, pc}^
 800b0ac:	d0ceccca 	sbcle	ip, lr, sl, asr #25
 800b0b0:	d9d7d5d3 	ldmible	r7, {r0, r1, r4, r6, r7, r8, sl, ip, lr, pc}^
 800b0b4:	e3e0dedc 	mvn	sp, #220, 28	; 0xdc0
 800b0b8:	eceae7e5 	stcl	7, cr14, [sl], #916	; 0x394
 800b0bc:	f6f3f1ee 			; <UNDEFINED> instruction: 0xf6f3f1ee
 800b0c0:	fffdfbf8 			; <UNDEFINED> instruction: 0xfffdfbf8
 800b0c4:	6e6b6e55 	mcrvs	14, 3, r6, cr11, cr5, {2}
 800b0c8:	006e776f 	rsbeq	r7, lr, pc, ror #14

0800b0cc <CSWTCH.18>:
 800b0cc:	02020200 	andeq	r0, r2, #0, 4
 800b0d0:	04020202 	streq	r0, [r2], #-514	; 0xfffffdfe
 800b0d4:	 	ldrbmi	r0, [r2, -r0, lsl #10]

0800b0d6 <PixelType::MAPS>:
 800b0d6:	00424752 	subeq	r4, r2, r2, asr r7
 800b0da:	00474252 	subeq	r4, r7, r2, asr r2
 800b0de:	00425247 	subeq	r5, r2, r7, asr #4
 800b0e2:	00524247 	subseq	r4, r2, r7, asr #4
 800b0e6:	00475242 	subeq	r5, r7, r2, asr #4
 800b0ea:	00524742 	subseq	r4, r2, r2, asr #14

0800b0ee <PixelType::TYPES>:
 800b0ee:	38325357 	ldmdacc	r2!, {r0, r1, r2, r4, r6, r8, r9, ip, lr}
 800b0f2:	00003130 	andeq	r3, r0, r0, lsr r1
 800b0f6:	38325357 	ldmdacc	r2!, {r0, r1, r2, r4, r6, r8, r9, ip, lr}
 800b0fa:	00003131 	andeq	r3, r0, r1, lsr r1
 800b0fe:	38325357 	ldmdacc	r2!, {r0, r1, r2, r4, r6, r8, r9, ip, lr}
 800b102:	00003231 	andeq	r3, r0, r1, lsr r2
 800b106:	38325357 	ldmdacc	r2!, {r0, r1, r2, r4, r6, r8, r9, ip, lr}
 800b10a:	00423231 	subeq	r3, r2, r1, lsr r2
 800b10e:	38325357 	ldmdacc	r2!, {r0, r1, r2, r4, r6, r8, r9, ip, lr}
 800b112:	00003331 	andeq	r3, r0, r1, lsr r3
 800b116:	38325357 	ldmdacc	r2!, {r0, r1, r2, r4, r6, r8, r9, ip, lr}
 800b11a:	00003531 	andeq	r3, r0, r1, lsr r5
 800b11e:	38364b53 	ldmdacc	r6!, {r0, r1, r4, r6, r8, r9, fp, lr}
 800b122:	00003231 	andeq	r3, r0, r1, lsr r2
 800b126:	38364b53 	ldmdacc	r6!, {r0, r1, r4, r6, r8, r9, fp, lr}
 800b12a:	00573231 	subseq	r3, r7, r1, lsr r2
 800b12e:	31534355 	cmpcc	r3, r5, asr r3
 800b132:	00333039 	eorseq	r3, r3, r9, lsr r0
 800b136:	32534355 	subscc	r4, r3, #1409286145	; 0x54000001
 800b13a:	00333039 	eorseq	r3, r3, r9, lsr r0
 800b13e:	38385343 	ldmdacc	r8!, {r0, r1, r6, r8, r9, ip, lr}
 800b142:	00003231 	andeq	r3, r0, r1, lsr r2
 800b146:	31415041 	cmpcc	r1, r1, asr #32
 800b14a:	00003230 	andeq	r3, r0, r0, lsr r2
 800b14e:	38394b53 	ldmdacc	r9!, {r0, r1, r4, r6, r8, r9, fp, lr}
 800b152:	00003232 	andeq	r3, r0, r2, lsr r2
 800b156:	31383950 	teqcc	r8, r0, asr r9
 800b15a:	00000033 	andeq	r0, r0, r3, lsr r0

0800b15e <s_patternName>:
 800b15e:	656e6f4e 	strbvs	r6, [lr, #-3918]!	; 0xfffff0b2
	...
 800b16a:	61520000 	cmpvs	r2, r0
 800b16e:	6f626e69 	svcvs	0x00626e69
 800b172:	79632077 	stmdbvc	r3!, {r0, r1, r2, r4, r5, r6, sp}^
 800b176:	00656c63 	rsbeq	r6, r5, r3, ror #24
 800b17a:	61656854 	cmnvs	r5, r4, asr r8
 800b17e:	20726574 	rsbscs	r6, r2, r4, ror r5
 800b182:	73616863 	cmnvc	r1, #6488064	; 0x630000
 800b186:	6f430065 	svcvs	0x00430065
 800b18a:	72756f6c 	rsbsvc	r6, r5, #108, 30	; 0x1b0
 800b18e:	70697720 	rsbvc	r7, r9, r0, lsr #14
 800b192:	00000065 	andeq	r0, r0, r5, rrx
 800b196:	6e616353 	mcrvs	3, 3, r6, cr1, cr3, {2}
 800b19a:	0072656e 	rsbseq	r6, r2, lr, ror #10
 800b19e:	00000000 	andeq	r0, r0, r0
 800b1a2:	61460000 	mrsvs	r0, (UNDEF: 70)
 800b1a6:	00006564 	andeq	r6, r0, r4, ror #10
	...

0800b1b2 <gamma10_0>:
 800b1b2:	03020100 	movweq	r0, #8448	; 0x2100
 800b1b6:	07060504 	streq	r0, [r6, -r4, lsl #10]
 800b1ba:	0b0a0908 	bleq	828d5e2 <__exidx_end+0x281d12>
 800b1be:	0f0e0d0c 	svceq	0x000e0d0c
 800b1c2:	13121110 	tstne	r2, #16, 2
 800b1c6:	17161514 			; <UNDEFINED> instruction: 0x17161514
 800b1ca:	1b1a1918 	blne	8691632 <__exidx_end+0x685d62>
 800b1ce:	1f1e1d1c 	svcne	0x001e1d1c
 800b1d2:	23222120 			; <UNDEFINED> instruction: 0x23222120
 800b1d6:	27262524 	strcs	r2, [r6, -r4, lsr #10]!
 800b1da:	2b2a2928 	blcs	8a95682 <__exidx_end+0xa89db2>
 800b1de:	2f2e2d2c 	svccs	0x002e2d2c
 800b1e2:	33323130 	teqcc	r2, #48, 2
 800b1e6:	37363534 			; <UNDEFINED> instruction: 0x37363534
 800b1ea:	3b3a3938 	blcc	8e996d2 <__exidx_end+0xe8de02>
 800b1ee:	3f3e3d3c 	svccc	0x003e3d3c
 800b1f2:	43424140 	movtmi	r4, #8512	; 0x2140
 800b1f6:	47464544 	strbmi	r4, [r6, -r4, asr #10]
 800b1fa:	4b4a4948 	blmi	929d722 <__exidx_end+0x1291e52>
 800b1fe:	4f4e4d4c 	svcmi	0x004e4d4c
 800b202:	53525150 	cmppl	r2, #80, 2
 800b206:	57565554 			; <UNDEFINED> instruction: 0x57565554
 800b20a:	5b5a5958 	blpl	96a1772 <__exidx_end+0x1695ea2>
 800b20e:	5f5e5d5c 	svcpl	0x005e5d5c
 800b212:	63626160 	cmnvs	r2, #96, 2
 800b216:	67666564 	strbvs	r6, [r6, -r4, ror #10]!
 800b21a:	6b6a6968 	blvs	9aa57c2 <__exidx_end+0x1a99ef2>
 800b21e:	6f6e6d6c 	svcvs	0x006e6d6c
 800b222:	73727170 	cmnvc	r2, #112, 2
 800b226:	77767574 			; <UNDEFINED> instruction: 0x77767574
 800b22a:	7b7a7978 	blvc	9ea9812 <__exidx_end+0x1e9df42>
 800b22e:	7f7e7d7c 	svcvc	0x007e7d7c
 800b232:	83828180 	orrhi	r8, r2, #128, 2
 800b236:	87868584 	strhi	r8, [r6, r4, lsl #11]
 800b23a:	8b8a8988 	blhi	62ad862 <__heap_size+0x62ac862>
 800b23e:	8f8e8d8c 	svchi	0x008e8d8c
 800b242:	93929190 	orrsls	r9, r2, #144, 2	; 0x24
 800b246:	97969594 			; <UNDEFINED> instruction: 0x97969594
 800b24a:	9b9a9998 	blls	66b18b2 <__heap_size+0x66b08b2>
 800b24e:	9f9e9d9c 	svcls	0x009e9d9c
 800b252:	a3a2a1a0 			; <UNDEFINED> instruction: 0xa3a2a1a0
 800b256:	a7a6a5a4 	strge	sl, [r6, r4, lsr #11]!
 800b25a:	abaaa9a8 	blge	6ab5902 <__heap_size+0x6ab4902>
 800b25e:	afaeadac 	svcge	0x00aeadac
 800b262:	b3b2b1b0 			; <UNDEFINED> instruction: 0xb3b2b1b0
 800b266:	b7b6b5b4 			; <UNDEFINED> instruction: 0xb7b6b5b4
 800b26a:	bbbab9b8 	bllt	6eb9952 <__heap_size+0x6eb8952>
 800b26e:	bfbebdbc 	svclt	0x00bebdbc
 800b272:	c3c2c1c0 	bicgt	ip, r2, #192, 2	; 0x30
 800b276:	c7c6c5c4 	strbgt	ip, [r6, r4, asr #11]
 800b27a:	cbcac9c8 	blgt	72bd9a2 <__heap_size+0x72bc9a2>
 800b27e:	cfcecdcc 	svcgt	0x00cecdcc
 800b282:	d3d2d1d0 	bicsle	sp, r2, #208, 2	; 0x34
 800b286:	d7d6d5d4 			; <UNDEFINED> instruction: 0xd7d6d5d4
 800b28a:	dbdad9d8 	blle	76c19f2 <__heap_size+0x76c09f2>
 800b28e:	dfdedddc 	svcle	0x00dedddc
 800b292:	e3e2e1e0 	mvn	lr, #224, 2	; 0x38
 800b296:	e7e6e5e4 	strb	lr, [r6, r4, ror #11]!
 800b29a:	ebeae9e8 	bl	7ac5a42 <__heap_size+0x7ac4a42>
 800b29e:	efeeedec 	svc	0x00eeedec
 800b2a2:	f3f2f1f0 	vsra.u64	<illegal reg q15.5>, q8, #14
 800b2a6:	f7f6f5f4 			; <UNDEFINED> instruction: 0xf7f6f5f4
 800b2aa:	fbfaf9f8 	blx	7ec9a94 <__heap_size+0x7ec8a94>
 800b2ae:	fffefdfc 			; <UNDEFINED> instruction: 0xfffefdfc
 800b2b2:	46006f6c 	strmi	r6, [r0], -ip, ror #30
 800b2b6:	776d7269 	strbvc	r7, [sp, -r9, ror #4]!
 800b2ba:	20657261 	rsbcs	r7, r5, r1, ror #4
 800b2be:	2a2e2556 	bcs	8b9481e <__exidx_end+0xb88f4e>
 800b2c2:	4d440073 	stclmi	0, cr0, [r4, #-460]	; 0xfffffe34
 800b2c6:	3a532058 	bcc	94d342e <__exidx_end+0x14c7b5e>
 800b2ca:	20753325 	rsbscs	r3, r5, r5, lsr #6
 800b2ce:	33253a46 			; <UNDEFINED> instruction: 0x33253a46
 800b2d2:	 	rsbeq	r0, r0, r5, ror r0

0800b2d4 <s_aStorSize>:
 800b2d4:	00000060 	andeq	r0, r0, r0, rrx
 800b2d8:	00000090 	muleq	r0, r0, r0
 800b2dc:	00000020 	andeq	r0, r0, r0, lsr #32
 800b2e0:	00000040 	andeq	r0, r0, r0, asr #32
 800b2e4:	00000060 	andeq	r0, r0, r0, rrx
 800b2e8:	00000040 	andeq	r0, r0, r0, asr #32
 800b2ec:	00000020 	andeq	r0, r0, r0, lsr #32
 800b2f0:	00000020 	andeq	r0, r0, r0, lsr #32
 800b2f4:	000001e0 	andeq	r0, r0, r0, ror #3
 800b2f8:	00000040 	andeq	r0, r0, r0, asr #32
 800b2fc:	00000020 	andeq	r0, r0, r0, lsr #32
 800b300:	00000060 	andeq	r0, r0, r0, rrx
 800b304:	00000030 	andeq	r0, r0, r0, lsr r0
 800b308:	00000020 	andeq	r0, r0, r0, lsr #32
 800b30c:	000003b0 			; <UNDEFINED> instruction: 0x000003b0
 800b310:	00000030 	andeq	r0, r0, r0, lsr r0
 800b314:	00000040 	andeq	r0, r0, r0, asr #32
 800b318:	00000020 	andeq	r0, r0, r0, lsr #32
 800b31c:	00000060 	andeq	r0, r0, r0, rrx
 800b320:	00000020 	andeq	r0, r0, r0, lsr #32
 800b324:	00000400 	andeq	r0, r0, r0, lsl #8
 800b328:	00000020 	andeq	r0, r0, r0, lsr #32
 800b32c:	00000020 	andeq	r0, r0, r0, lsr #32
 800b330:	00000040 	andeq	r0, r0, r0, asr #32
 800b334:	00000060 	andeq	r0, r0, r0, rrx
 800b338:	00000020 	andeq	r0, r0, r0, lsr #32
 800b33c:	00000020 	andeq	r0, r0, r0, lsr #32
 800b340:	000000c0 	andeq	r0, r0, r0, asr #1

0800b344 <vtable for StoreDisplayUdf>:
	...
 800b34c:	08006b49 	stmdaeq	r0, {r0, r3, r6, r8, r9, fp, sp, lr}
 800b350:	08006b95 	stmdaeq	r0, {r0, r2, r4, r7, r8, r9, fp, sp, lr}
 800b354:	08006b71 	stmdaeq	r0, {r0, r4, r5, r6, r8, r9, fp, sp, lr}
 800b358:	08006b4d 	stmdaeq	r0, {r0, r2, r3, r6, r8, r9, fp, sp, lr}

0800b35c <vtable for StorePixelDmx>:
	...
 800b364:	08006c07 	stmdaeq	r0, {r0, r1, r2, sl, fp, sp, lr}
 800b368:	08006d71 	stmdaeq	r0, {r0, r4, r5, r6, r8, sl, fp, sp, lr}
 800b36c:	08006c0d 	stmdaeq	r0, {r0, r2, r3, sl, fp, sp, lr}
 800b370:	08006d85 	stmdaeq	r0, {r0, r2, r7, r8, sl, fp, sp, lr}
 800b374:	08006d3d 	stmdaeq	r0, {r0, r2, r3, r4, r5, r8, sl, fp, sp, lr}
 800b378:	08006d09 	stmdaeq	r0, {r0, r3, r8, sl, fp, sp, lr}
 800b37c:	08006cd1 	stmdaeq	r0, {r0, r4, r6, r7, sl, fp, sp, lr}
 800b380:	08006c99 	stmdaeq	r0, {r0, r3, r4, r7, sl, fp, sp, lr}
 800b384:	08006c65 	stmdaeq	r0, {r0, r2, r5, r6, sl, fp, sp, lr}
 800b388:	08006c31 	stmdaeq	r0, {r0, r4, r5, sl, fp, sp, lr}
 800b38c:	fffffffc 			; <UNDEFINED> instruction: 0xfffffffc
 800b390:	00000000 	andeq	r0, r0, r0
 800b394:	08006c09 	stmdaeq	r0, {r0, r3, sl, fp, sp, lr}
 800b398:	08006d7d 	stmdaeq	r0, {r0, r2, r3, r4, r5, r6, r8, sl, fp, sp, lr}
 800b39c:	08006d69 	stmdaeq	r0, {r0, r3, r5, r6, r8, sl, fp, sp, lr}
 800b3a0:	08006d35 	stmdaeq	r0, {r0, r2, r4, r5, r8, sl, fp, sp, lr}
 800b3a4:	08006d01 	stmdaeq	r0, {r0, r8, sl, fp, sp, lr}
 800b3a8:	08006cc9 	stmdaeq	r0, {r0, r3, r6, r7, sl, fp, sp, lr}
 800b3ac:	08006c91 	stmdaeq	r0, {r0, r4, r7, sl, fp, sp, lr}
 800b3b0:	08006c5d 	stmdaeq	r0, {r0, r2, r3, r4, r6, sl, fp, sp, lr}

0800b3b4 <vtable for StoreRDMDevice>:
	...
 800b3bc:	08006dc1 	stmdaeq	r0, {r0, r6, r7, r8, sl, fp, sp, lr}
 800b3c0:	08006e31 	stmdaeq	r0, {r0, r4, r5, r9, sl, fp, sp, lr}
 800b3c4:	08006dc9 	stmdaeq	r0, {r0, r3, r6, r7, r8, sl, fp, sp, lr}
 800b3c8:	08006e45 	stmdaeq	r0, {r0, r2, r6, r9, sl, fp, sp, lr}
 800b3cc:	08006ded 	stmdaeq	r0, {r0, r2, r3, r5, r6, r7, r8, sl, fp, sp, lr}
 800b3d0:	fffffffc 			; <UNDEFINED> instruction: 0xfffffffc
 800b3d4:	00000000 	andeq	r0, r0, r0
 800b3d8:	08006dc3 	stmdaeq	r0, {r0, r1, r6, r7, r8, sl, fp, sp, lr}
 800b3dc:	08006e3d 	stmdaeq	r0, {r0, r2, r3, r4, r5, r9, sl, fp, sp, lr}
 800b3e0:	08006e29 	stmdaeq	r0, {r0, r3, r5, r9, sl, fp, sp, lr}

0800b3e4 <vtable for StoreRDMSensors>:
	...
 800b3ec:	08006e81 	stmdaeq	r0, {r0, r7, r9, sl, fp, sp, lr}
 800b3f0:	08006ecd 	stmdaeq	r0, {r0, r2, r3, r6, r7, r9, sl, fp, sp, lr}
 800b3f4:	08006ea9 	stmdaeq	r0, {r0, r3, r5, r7, r9, sl, fp, sp, lr}
 800b3f8:	08006e85 	stmdaeq	r0, {r0, r2, r7, r9, sl, fp, sp, lr}

0800b3fc <vtable for StoreRDMSubDevices>:
	...
 800b404:	08006eed 	stmdaeq	r0, {r0, r2, r3, r5, r6, r7, r9, sl, fp, sp, lr}
 800b408:	08006f39 	stmdaeq	r0, {r0, r3, r4, r5, r8, r9, sl, fp, sp, lr}
 800b40c:	08006f15 	stmdaeq	r0, {r0, r2, r4, r8, r9, sl, fp, sp, lr}
 800b410:	08006ef1 	stmdaeq	r0, {r0, r4, r5, r6, r7, r9, sl, fp, sp, lr}
 800b414:	3a434d46 	bcc	90de934 <__exidx_end+0x10d3064>
 800b418:	74654420 	strbtvc	r4, [r5], #-1056	; 0xfffffbe0
 800b41c:	65746365 	ldrbvs	r6, [r4, #-869]!	; 0xfffffc9b
 800b420:	73252064 			; <UNDEFINED> instruction: 0x73252064
 800b424:	74697720 	strbtvc	r7, [r9], #-1824	; 0xfffff8e0
 800b428:	6f742068 	svcvs	0x00742068
 800b42c:	206c6174 	rsbcs	r6, ip, r4, ror r1
 800b430:	62206425 	eorvs	r6, r0, #620756992	; 0x25000000
 800b434:	73657479 	cmnvc	r5, #2030043136	; 0x79000000
 800b438:	64255b20 	strtvs	r5, [r5], #-2848	; 0xfffff4e0
 800b43c:	5d426b20 	vstrpl	d22, [r2, #-128]	; 0xffffff80
 800b440:	6f4e000a 	svcvs	0x004e000a
 800b444:	73696420 	cmnvc	r9, #32, 8	; 0x20000000
 800b448:	79616c70 	stmdbvc	r1!, {r4, r5, r6, sl, fp, sp, lr}^
 800b44c:	756f6620 	strbvc	r6, [pc, #-1568]!	; 800ae34 <gamma24_0+0x70>
 800b450:	5300646e 	movwpl	r6, #1134	; 0x46e
 800b454:	30313148 	eorscc	r3, r1, r8, asr #2
 800b458:	53530036 	cmppl	r3, #54	; 0x36
 800b45c:	30333144 	eorscc	r3, r3, r4, asr #2
 800b460:	73250036 			; <UNDEFINED> instruction: 0x73250036
 800b464:	64252820 	strtvs	r2, [r5], #-2080	; 0xfffff7e0
 800b468:	2964252c 	stmdbcs	r4!, {r2, r3, r5, r8, sl, sp}^
 800b46c:	aa40000a 	bge	900b49c <__exidx_end+0xfffbcc>
 800b470:	00eeaaee 	rsceq	sl, lr, lr, ror #21

0800b474 <_OledFont8x6>:
 800b474:	00000040 	andeq	r0, r0, r0, asr #32
 800b478:	40000000 	andmi	r0, r0, r0
 800b47c:	005f0000 	subseq	r0, pc, r0
 800b480:	00400000 	subeq	r0, r0, r0
 800b484:	00070007 	andeq	r0, r7, r7
 800b488:	7f144000 	svcvc	0x00144000
 800b48c:	00147f14 	andseq	r7, r4, r4, lsl pc
 800b490:	7f2a2440 	svcvc	0x002a2440
 800b494:	4000122a 	andmi	r1, r0, sl, lsr #4
 800b498:	64081323 	strvs	r1, [r8], #-803	; 0xfffffcdd
 800b49c:	36400062 	strbcc	r0, [r0], -r2, rrx
 800b4a0:	50205649 	eorpl	r5, r0, r9, asr #12
 800b4a4:	08004000 	stmdaeq	r0, {lr}
 800b4a8:	00000307 	andeq	r0, r0, r7, lsl #6
 800b4ac:	221c0040 	andscs	r0, ip, #64	; 0x40
 800b4b0:	40000041 	andmi	r0, r0, r1, asr #32
 800b4b4:	1c224100 	stfnes	f4, [r2], #-0
 800b4b8:	2a400000 	bcs	900b4c0 <__exidx_end+0xfffbf0>
 800b4bc:	2a1c7f1c 	bcs	872b134 <__exidx_end+0x71f864>
 800b4c0:	08084000 	stmdaeq	r8, {lr}
 800b4c4:	0008083e 	andeq	r0, r8, lr, lsr r8
 800b4c8:	70800040 	addvc	r0, r0, r0, asr #32
 800b4cc:	40000030 	andmi	r0, r0, r0, lsr r0
 800b4d0:	08080808 	stmdaeq	r8, {r3, fp}
 800b4d4:	00400008 	subeq	r0, r0, r8
 800b4d8:	00606000 	rsbeq	r6, r0, r0
 800b4dc:	10204000 	eorne	r4, r0, r0
 800b4e0:	00020408 	andeq	r0, r2, r8, lsl #8
 800b4e4:	49513e40 	ldmdbmi	r1, {r6, r9, sl, fp, ip, sp}^
 800b4e8:	40003e45 	andmi	r3, r0, r5, asr #28
 800b4ec:	407f4200 	rsbsmi	r4, pc, r0, lsl #4
 800b4f0:	72400000 	subvc	r0, r0, #0
 800b4f4:	46494949 	strbmi	r4, [r9], -r9, asr #18
 800b4f8:	41214000 			; <UNDEFINED> instruction: 0x41214000
 800b4fc:	00334d49 	eorseq	r4, r3, r9, asr #26
 800b500:	12141840 	andsne	r1, r4, #64, 16	; 0x400000
 800b504:	4000107f 	andmi	r1, r0, pc, ror r0
 800b508:	45454527 	strbmi	r4, [r5, #-1319]	; 0xfffffad9
 800b50c:	3c400039 	mcrrcc	0, 3, r0, r0, cr9
 800b510:	3149494a 	cmpcc	r9, sl, asr #18
 800b514:	21414000 	mrscs	r4, (UNDEF: 65)
 800b518:	00070911 	andeq	r0, r7, r1, lsl r9
 800b51c:	49493640 	stmdbmi	r9, {r6, r9, sl, ip, sp}^
 800b520:	40003649 	andmi	r3, r0, r9, asr #12
 800b524:	29494946 	stmdbcs	r9, {r1, r2, r6, r8, fp, lr}^
 800b528:	0040001e 	subeq	r0, r0, lr, lsl r0
 800b52c:	00001400 	andeq	r1, r0, r0, lsl #8
 800b530:	40004000 	andmi	r4, r0, r0
 800b534:	00000034 	andeq	r0, r0, r4, lsr r0
 800b538:	14080040 	strne	r0, [r8], #-64	; 0xffffffc0
 800b53c:	40004122 	andmi	r4, r0, r2, lsr #2
 800b540:	14141414 	ldrne	r1, [r4], #-1044	; 0xfffffbec
 800b544:	00400014 	subeq	r0, r0, r4, lsl r0
 800b548:	08142241 	ldmdaeq	r4, {r0, r6, r9, sp}
 800b54c:	01024000 	mrseq	r4, (UNDEF: 2)
 800b550:	00060959 	andeq	r0, r6, r9, asr r9
 800b554:	5d413e40 	stclpl	14, cr3, [r1, #-256]	; 0xffffff00
 800b558:	40004e59 	andmi	r4, r0, r9, asr lr
 800b55c:	1211127c 	andsne	r1, r1, #124, 4	; 0xc0000007
 800b560:	7f40007c 	svcvc	0x0040007c
 800b564:	36494949 	strbcc	r4, [r9], -r9, asr #18
 800b568:	413e4000 	teqmi	lr, r0
 800b56c:	00224141 	eoreq	r4, r2, r1, asr #2
 800b570:	41417f40 	cmpmi	r1, r0, asr #30
 800b574:	40003e41 	andmi	r3, r0, r1, asr #28
 800b578:	4949497f 	stmdbmi	r9, {r0, r1, r2, r3, r4, r5, r6, r8, fp, lr}^
 800b57c:	7f400041 	svcvc	0x00400041
 800b580:	01090909 	tsteq	r9, r9, lsl #18
 800b584:	413e4000 	teqmi	lr, r0
 800b588:	00735141 	rsbseq	r5, r3, r1, asr #2
 800b58c:	08087f40 	stmdaeq	r8, {r6, r8, r9, sl, fp, ip, sp, lr}
 800b590:	40007f08 	andmi	r7, r0, r8, lsl #30
 800b594:	417f4100 	cmnmi	pc, r0, lsl #2
 800b598:	20400000 	subcs	r0, r0, r0
 800b59c:	013f4140 	teqeq	pc, r0, asr #2
 800b5a0:	087f4000 	ldmdaeq	pc!, {lr}^	; <UNPREDICTABLE>
 800b5a4:	00412214 	subeq	r2, r1, r4, lsl r2
 800b5a8:	40407f40 	submi	r7, r0, r0, asr #30
 800b5ac:	40004040 	andmi	r4, r0, r0, asr #32
 800b5b0:	021c027f 	andseq	r0, ip, #-268435449	; 0xf0000007
 800b5b4:	7f40007f 	svcvc	0x0040007f
 800b5b8:	7f100804 	svcvc	0x00100804
 800b5bc:	413e4000 	teqmi	lr, r0
 800b5c0:	003e4141 	eorseq	r4, lr, r1, asr #2
 800b5c4:	09097f40 	stmdbeq	r9, {r6, r8, r9, sl, fp, ip, sp, lr}
 800b5c8:	40000609 	andmi	r0, r0, r9, lsl #12
 800b5cc:	2151413e 	cmpcs	r1, lr, lsr r1
 800b5d0:	7f40005e 	svcvc	0x0040005e
 800b5d4:	46291909 	strtmi	r1, [r9], -r9, lsl #18
 800b5d8:	49264000 	stmdbmi	r6!, {lr}
 800b5dc:	00324949 	eorseq	r4, r2, r9, asr #18
 800b5e0:	7f010340 	svcvc	0x00010340
 800b5e4:	40000301 	andmi	r0, r0, r1, lsl #6
 800b5e8:	4040403f 	submi	r4, r0, pc, lsr r0
 800b5ec:	1f40003f 	svcne	0x0040003f
 800b5f0:	1f204020 	svcne	0x00204020
 800b5f4:	403f4000 	eorsmi	r4, pc, r0
 800b5f8:	003f4038 	eorseq	r4, pc, r8, lsr r0	; <UNPREDICTABLE>
 800b5fc:	08146340 	ldmdaeq	r4, {r6, r8, r9, sp, lr}
 800b600:	40006314 	andmi	r6, r0, r4, lsl r3
 800b604:	04780403 	ldrbteq	r0, [r8], #-1027	; 0xfffffbfd
 800b608:	61400003 	cmpvs	r0, r3
 800b60c:	434d4959 	movtmi	r4, #55641	; 0xd959
 800b610:	7f004000 	svcvc	0x00004000
 800b614:	00414141 	subeq	r4, r1, r1, asr #2
 800b618:	08040240 	stmdaeq	r4, {r6, r9}
 800b61c:	40002010 	andmi	r2, r0, r0, lsl r0
 800b620:	41414100 	mrsmi	r4, (UNDEF: 81)
 800b624:	0440007f 	strbeq	r0, [r0], #-127	; 0xffffff81
 800b628:	04020102 	streq	r0, [r2], #-258	; 0xfffffefe
 800b62c:	40404000 	submi	r4, r0, r0
 800b630:	00404040 	subeq	r4, r0, r0, asr #32
 800b634:	07030040 	streq	r0, [r3, -r0, asr #32]
 800b638:	40000008 	andmi	r0, r0, r8
 800b63c:	78545420 	ldmdavc	r4, {r5, sl, ip, lr}^
 800b640:	7f400040 	svcvc	0x00400040
 800b644:	38444428 	stmdacc	r4, {r3, r5, sl, lr}^
 800b648:	44384000 	ldrtmi	r4, [r8], #-0
 800b64c:	00284444 	eoreq	r4, r8, r4, asr #8
 800b650:	44443840 	strbmi	r3, [r4], #-2112	; 0xfffff7c0
 800b654:	40007f28 	andmi	r7, r0, r8, lsr #30
 800b658:	54545438 	ldrbpl	r5, [r4], #-1080	; 0xfffffbc8
 800b65c:	00400018 	subeq	r0, r0, r8, lsl r0
 800b660:	02097e08 	andeq	r7, r9, #8, 28	; 0x80
 800b664:	a4184000 	ldrge	r4, [r8], #-0
 800b668:	00789ca4 	rsbseq	r9, r8, r4, lsr #25
 800b66c:	04087f40 	streq	r7, [r8], #-3904	; 0xfffff0c0
 800b670:	40007804 	andmi	r7, r0, r4, lsl #16
 800b674:	407d4400 	rsbsmi	r4, sp, r0, lsl #8
 800b678:	20400000 	subcs	r0, r0, r0
 800b67c:	003d4040 	eorseq	r4, sp, r0, asr #32
 800b680:	107f4000 	rsbsne	r4, pc, r0
 800b684:	00004428 	andeq	r4, r0, r8, lsr #8
 800b688:	7f410040 	svcvc	0x00410040
 800b68c:	40000040 	andmi	r0, r0, r0, asr #32
 800b690:	0478047c 	ldrbteq	r0, [r8], #-1148	; 0xfffffb84
 800b694:	7c400078 	mcrrvc	0, 7, r0, r0, cr8
 800b698:	78040408 	stmdavc	r4, {r3, sl}
 800b69c:	44384000 	ldrtmi	r4, [r8], #-0
 800b6a0:	00384444 	eorseq	r4, r8, r4, asr #8
 800b6a4:	2418fc40 	ldrcs	pc, [r8], #-3136	; 0xfffff3c0
 800b6a8:	40001824 	andmi	r1, r0, r4, lsr #16
 800b6ac:	18242418 	stmdane	r4!, {r3, r4, sl, sp}
 800b6b0:	7c4000fc 	mcrrvc	0, 15, r0, r0, cr12
 800b6b4:	08040408 	stmdaeq	r4, {r3, sl}
 800b6b8:	54484000 	strbpl	r4, [r8], #-0
 800b6bc:	00245454 	eoreq	r5, r4, r4, asr r4
 800b6c0:	3f040440 	svccc	0x00040440
 800b6c4:	40002444 	andmi	r2, r0, r4, asr #8
 800b6c8:	2040403c 	subcs	r4, r0, ip, lsr r0
 800b6cc:	1c40007c 	mcrrne	0, 7, r0, r0, cr12
 800b6d0:	1c204020 	stcne	0, cr4, [r0], #-128	; 0xffffff80
 800b6d4:	403c4000 	eorsmi	r4, ip, r0
 800b6d8:	003c4030 	eorseq	r4, ip, r0, lsr r0
 800b6dc:	10284440 	eorne	r4, r8, r0, asr #8
 800b6e0:	40004428 	andmi	r4, r0, r8, lsr #8
 800b6e4:	9090904c 	addsls	r9, r0, ip, asr #32
 800b6e8:	4440007c 	strbmi	r0, [r0], #-124	; 0xffffff84
 800b6ec:	444c5464 	strbmi	r5, [ip], #-1124	; 0xfffffb9c
 800b6f0:	08004000 	stmdaeq	r0, {lr}
 800b6f4:	00004136 	andeq	r4, r0, r6, lsr r1
 800b6f8:	77000040 	strvc	r0, [r0, -r0, asr #32]
 800b6fc:	40000000 	andmi	r0, r0, r0
 800b700:	08364100 	ldmdaeq	r6!, {r8, lr}
 800b704:	02400000 	subeq	r0, r0, #0
 800b708:	02040201 	andeq	r0, r4, #268435456	; 0x10000000
 800b70c:	263c4000 	ldrtcs	r4, [ip], -r0
 800b710:	003c2623 	eorseq	r2, ip, r3, lsr #12

0800b714 <oled_128x32_init>:
 800b714:	a880d5ae 	stmge	r0, {r1, r2, r3, r5, r7, r8, sl, ip, lr, pc}
 800b718:	4000d31f 	andmi	sp, r0, pc, lsl r3
 800b71c:	0020148d 	eoreq	r1, r0, sp, lsl #9
 800b720:	02dac8a1 	sbcseq	ip, sl, #10551296	; 0xa10000
 800b724:	f1d97f81 			; <UNDEFINED> instruction: 0xf1d97f81
 800b728:	a6a440db 	ssatge	r4, #5, fp, asr #1

0800b72c <oled_128x64_init>:
 800b72c:	a880d5ae 	stmge	r0, {r1, r2, r3, r5, r7, r8, sl, ip, lr, pc}
 800b730:	4000d33f 	andmi	sp, r0, pc, lsr r3
 800b734:	0020148d 	eoreq	r1, r0, sp, lsl #9
 800b738:	12dac8a1 	sbcsne	ip, sl, #10551296	; 0xa10000
 800b73c:	f1d97f81 			; <UNDEFINED> instruction: 0xf1d97f81
 800b740:	a6a440db 	ssatge	r4, #5, fp, asr #1

0800b744 <vtable for Ssd1306>:
	...
 800b74c:	08007381 	stmdaeq	r0, {r0, r7, r8, r9, ip, sp, lr}
 800b750:	080073ad 	stmdaeq	r0, {r0, r2, r3, r5, r7, r8, r9, ip, sp, lr}
 800b754:	080076c5 	stmdaeq	r0, {r0, r2, r6, r7, r9, sl, ip, sp, lr}
 800b758:	0800764d 	stmdaeq	r0, {r0, r2, r3, r6, r9, sl, ip, sp, lr}
 800b75c:	08007515 	stmdaeq	r0, {r0, r2, r4, r8, sl, ip, sp, lr}
 800b760:	080073cd 	stmdaeq	r0, {r0, r2, r3, r6, r7, r8, r9, ip, sp, lr}
 800b764:	080073f9 	stmdaeq	r0, {r0, r3, r4, r5, r6, r7, r8, r9, ip, sp, lr}
 800b768:	080074ed 	stmdaeq	r0, {r0, r2, r3, r5, r6, r7, sl, ip, sp, lr}
 800b76c:	080074a5 	stmdaeq	r0, {r0, r2, r5, r7, sl, ip, sp, lr}
 800b770:	08007383 	stmdaeq	r0, {r0, r1, r7, r8, r9, ip, sp, lr}
 800b774:	08007555 	stmdaeq	r0, {r0, r2, r4, r6, r8, sl, ip, sp, lr}
 800b778:	08007561 	stmdaeq	r0, {r0, r5, r6, r8, sl, ip, sp, lr}
 800b77c:	0800757b 	stmdaeq	r0, {r0, r1, r3, r4, r5, r6, r8, sl, ip, sp, lr}
 800b780:	08007385 	stmdaeq	r0, {r0, r2, r7, r8, r9, ip, sp, lr}
 800b784:	37335b1b 			; <UNDEFINED> instruction: 0x37335b1b
 800b788:	5b1b006d 	blpl	86cb944 <__exidx_end+0x6c0074>
 800b78c:	006d3034 	rsbeq	r3, sp, r4, lsr r0
 800b790:	2e25565b 	mcrcs	6, 1, r5, cr5, cr11, {2}
 800b794:	205d732a 	subscs	r7, sp, sl, lsr #6
 800b798:	43207325 			; <UNDEFINED> instruction: 0x43207325
 800b79c:	69706d6f 	ldmdbvs	r0!, {r0, r1, r2, r3, r5, r6, r8, sl, fp, sp, lr}^
 800b7a0:	2064656c 	rsbcs	r6, r4, ip, ror #10
 800b7a4:	25206e6f 	strcs	r6, [r0, #-3695]!	; 0xfffff191
 800b7a8:	20732a2e 	rsbscs	r2, r3, lr, lsr #20
 800b7ac:	25207461 	strcs	r7, [r0, #-1121]!	; 0xfffffb9f
 800b7b0:	00732a2e 	rsbseq	r2, r3, lr, lsr #20
 800b7b4:	52206f4e 	eorpl	r6, r0, #312	; 0x138
 800b7b8:	63204354 			; <UNDEFINED> instruction: 0x63204354
 800b7bc:	656e6e6f 	strbvs	r6, [lr, #-3695]!	; 0xfffff191
 800b7c0:	64657463 	strbtvs	r7, [r5], #-1123	; 0xfffffb9d
 800b7c4:	342e2500 	strtcc	r2, [lr], #-1280	; 0xfffffb00
 800b7c8:	2e252f64 	cdpcs	15, 2, cr2, cr5, cr4, {3}
 800b7cc:	252f6432 	strcs	r6, [pc, #-1074]!	; 800b3a2 <vtable for StorePixelDmx+0x46>
 800b7d0:	2064322e 	rsbcs	r3, r4, lr, lsr #4
 800b7d4:	64322e25 	ldrtvs	r2, [r2], #-3621	; 0xfffff1db
 800b7d8:	322e253a 	eorcc	r2, lr, #243269632	; 0xe800000
 800b7dc:	2e253a64 	vnmulcs.f32	s6, s10, s9
 800b7e0:	000a6432 	andeq	r6, sl, r2, lsr r4
 800b7e4:	3750434d 	ldrbcc	r4, [r0, -sp, asr #6]
 800b7e8:	58313439 	ldmdapl	r1!, {r0, r3, r4, r5, sl, ip, sp}
 800b7ec:	33534400 	cmpcc	r3, #0, 8
 800b7f0:	00313332 	eorseq	r3, r1, r2, lsr r3
 800b7f4:	38464350 	stmdacc	r6, {r4, r6, r8, r9, lr}^
 800b7f8:	00333635 	eorseq	r3, r3, r5, lsr r6
 800b7fc:	5f434f53 	svcpl	0x00434f53
 800b800:	45544e49 	ldrbmi	r4, [r4, #-3657]	; 0xfffff1b7
 800b804:	4c414e52 	mcrrmi	14, 5, r4, r1, cr2
 800b808:	00000000 	andeq	r0, r0, r0

0800b80c <CSWTCH.7>:
 800b80c:	0800b7e4 	stmdaeq	r0, {r2, r5, r6, r7, r8, r9, sl, ip, sp, pc}
 800b810:	0800b7ed 	stmdaeq	r0, {r0, r2, r3, r5, r6, r7, r8, r9, sl, ip, sp, pc}
 800b814:	0800b7f4 	stmdaeq	r0, {r2, r4, r5, r6, r7, r8, r9, sl, ip, sp, pc}
 800b818:	0800b7fc 	stmdaeq	r0, {r2, r3, r4, r5, r6, r7, r8, r9, sl, ip, sp, pc}
 800b81c:	6c6c616d 	stfvse	f6, [ip], #-436	; 0xfffffe4c
 800b820:	203a636f 	eorscs	r6, sl, pc, ror #6
 800b824:	000a7525 	andeq	r7, sl, r5, lsr #10
 800b828:	6c6c616d 	stfvse	f6, [ip], #-436	; 0xfffffe4c
 800b82c:	203a636f 	eorscs	r6, sl, pc, ror #6
 800b830:	7478656e 	ldrbtvc	r6, [r8], #-1390	; 0xfffffa92
 800b834:	62203e20 	eorvs	r3, r0, #32, 28	; 0x200
 800b838:	6b636f6c 	blvs	98e75f0 <__exidx_end+0x18dbd20>
 800b83c:	6d696c5f 	stclvs	12, cr6, [r9, #-380]!	; 0xfffffe84
 800b840:	000a7469 	andeq	r7, sl, r9, ror #8
 800b844:	6c6c616d 	stfvse	f6, [ip], #-436	; 0xfffffe4c
 800b848:	203a636f 	eorscs	r6, sl, pc, ror #6
 800b84c:	6f6c4270 	svcvs	0x006c4270
 800b850:	65486b63 	strbvs	r6, [r8, #-2915]	; 0xfffff49d
 800b854:	72656461 	rsbvc	r6, r5, #1627389952	; 0x61000000
 800b858:	2c70253d 	cfldr64cs	mvdx2, [r0], #-244	; 0xffffff0c
 800b85c:	7a697320 	bvc	9a684e4 <__exidx_end+0x1a5cc14>
 800b860:	64253d65 	strtvs	r3, [r5], #-3429	; 0xfffff29b
 800b864:	6164202c 	cmnvs	r4, ip, lsr #32
 800b868:	253d6174 	ldrcs	r6, [sp, #-372]!	; 0xfffffe8c
 800b86c:	66000a70 			; <UNDEFINED> instruction: 0x66000a70
 800b870:	3a656572 	bcc	9964e40 <__exidx_end+0x1959570>
 800b874:	6c427020 	mcrrvs	0, 2, r7, r2, cr0
 800b878:	486b636f 	stmdami	fp!, {r0, r1, r2, r3, r5, r6, r8, r9, sp, lr}^
 800b87c:	65646165 	strbvs	r6, [r4, #-357]!	; 0xfffffe9b
 800b880:	203d2072 	eorscs	r2, sp, r2, ror r0
 800b884:	202c7025 	eorcs	r7, ip, r5, lsr #32
 800b888:	6f6c4270 	svcvs	0x006c4270
 800b88c:	3d206b63 	fstmdbxcc	r0!, {d6-d54}	;@ Deprecated
 800b890:	0a702520 	beq	9c14d18 <__exidx_end+0x1c09448>
 800b894:	00000000 	andeq	r0, r0, r0

0800b898 <days_of_month>:
 800b898:	0000001f 	andeq	r0, r0, pc, lsl r0
 800b89c:	0000001c 	andeq	r0, r0, ip, lsl r0
 800b8a0:	0000001f 	andeq	r0, r0, pc, lsl r0
 800b8a4:	0000001e 	andeq	r0, r0, lr, lsl r0
 800b8a8:	0000001f 	andeq	r0, r0, pc, lsl r0
 800b8ac:	0000001e 	andeq	r0, r0, lr, lsl r0
 800b8b0:	0000001f 	andeq	r0, r0, pc, lsl r0
 800b8b4:	0000001f 	andeq	r0, r0, pc, lsl r0
 800b8b8:	0000001e 	andeq	r0, r0, lr, lsl r0
 800b8bc:	0000001f 	andeq	r0, r0, pc, lsl r0
 800b8c0:	0000001e 	andeq	r0, r0, lr, lsl r0
 800b8c4:	0000001f 	andeq	r0, r0, pc, lsl r0

Disassembly of section .ARM:

0800b8c8 <__exidx_start>:
 800b8c8:	7fff5fdc 	svcvc	0x00ff5fdc
 800b8cc:	00000001 	andeq	r0, r0, r1

Disassembly of section .ARM.attributes:

0800b8d0 <.ARM.attributes>:
 800b8d0:	00003441 	andeq	r3, r0, r1, asr #8
 800b8d4:	61656100 	cmnvs	r5, r0, lsl #2
 800b8d8:	01006962 	tsteq	r0, r2, ror #18
 800b8dc:	0000002a 	andeq	r0, r0, sl, lsr #32
 800b8e0:	726f4305 	rsbvc	r4, pc, #335544320	; 0x14000000
 800b8e4:	2d786574 	cfldr64cs	mvdx6, [r8, #-464]!	; 0xfffffe30
 800b8e8:	0600344d 	streq	r3, [r0], -sp, asr #8
 800b8ec:	094d070d 	stmdbeq	sp, {r0, r2, r3, r8, r9, sl}^
 800b8f0:	12060a02 	andne	r0, r6, #8192	; 0x2000
 800b8f4:	15011404 	strne	r1, [r1, #-1028]	; 0xfffffbfc
 800b8f8:	18031701 	stmdane	r3, {r0, r8, r9, sl, ip}
 800b8fc:	1b011a01 	blne	8052108 <__exidx_end+0x46838>
 800b900:	22011c01 	andcs	r1, r1, #256	; 0x100
 800b904:	Address 0x000000000800b904 is out of bounds.


Disassembly of section .data:

20000000 <s_nDmxTransmitPeriod>:
20000000:	000061a8 	andeq	r6, r0, r8, lsr #3

20000004 <s_nDmxTransmitMabTime>:
20000004:	0000000c 	andeq	r0, r0, ip

20000008 <s_nDmxTransmitBreakTime>:
20000008:	0000005c 	andeq	r0, r0, ip, asr r0

2000000c <next_block>:
2000000c:	2000a000 	andcs	sl, r0, r0

20000010 <s_block_bucket>:
20000010:	00000010 	andeq	r0, r0, r0, lsl r0
	...
20000020:	00000020 	andeq	r0, r0, r0, lsr #32
	...
20000030:	00000040 	andeq	r0, r0, r0, asr #32
	...
20000040:	00000060 	andeq	r0, r0, r0, rrx
	...
20000050:	00000080 	andeq	r0, r0, r0, lsl #1
	...
20000060:	00000100 	andeq	r0, r0, r0, lsl #2
	...
20000070:	00000140 	andeq	r0, r0, r0, asr #2
	...
20000080:	00000180 	andeq	r0, r0, r0, lsl #3
	...
20000090:	00000200 	andeq	r0, r0, r0, lsl #4
	...
200000a0:	00000300 	andeq	r0, r0, r0, lsl #6
	...
200000b0:	00000400 	andeq	r0, r0, r0, lsl #8
	...
200000c0:	00000500 	andeq	r0, r0, r0, lsl #10
	...

200000e0 <SystemCoreClock>:
200000e0:	07270e00 	streq	r0, [r7, -r0, lsl #28]!

Disassembly of section .bss:

200000e8 <s_IsProgrammed>:
	...

200000e9 <s_isOn>:
200000e9:	 	andeq	r0, r0, r0

200000ec <s_Pattern>:
200000ec:	00000000 	andeq	r0, r0, r0

200000f0 <outptr>:
200000f0:	00000000 	andeq	r0, r0, r0

200000f4 <RDMResponder::s_RdmCommand>:
	...

200001f5 <RDMResponder::m_IsSubDeviceActive>:
200001f5:	 	andeq	r0, r0, r0

200001f8 <RDMResponder::s_pThis>:
200001f8:	00000000 	andeq	r0, r0, r0

200001fc <RDMSensors::s_pThis>:
200001fc:	00000000 	andeq	r0, r0, r0

20000200 <RDMSubDevices::s_pThis>:
20000200:	00000000 	andeq	r0, r0, r0

20000204 <DMXReceiver::s_IsActive>:
20000204:	00000000 	andeq	r0, r0, r0

20000208 <DMXReceiver::s_pLightSet>:
20000208:	00000000 	andeq	r0, r0, r0

2000020c <DMXReceiver::s_bDisableOutput>:
2000020c:	00000000 	andeq	r0, r0, r0

20000210 <s_RxBuffer>:
	...

20000420 <s_TxBuffer>:
	...

20000624 <sv_PortState>:
20000624:	00000000 	andeq	r0, r0, r0

20000628 <sv_nRxDmxPackets>:
	...

20000638 <sv_nUartsSending>:
20000638:	00000000 	andeq	r0, r0, r0

2000063c <Dmx::s_pThis>:
2000063c:	00000000 	andeq	r0, r0, r0

20000640 <gv_RdmDataReceiveEnd>:
20000640:	00000000 	andeq	r0, r0, r0

20000644 <RDMDeviceResponder::s_pThis>:
20000644:	00000000 	andeq	r0, r0, r0

20000648 <RDMIdentify::m_bIsEnabled>:
	...

20000649 <RDMIdentify::m_nMode>:
20000649:	 	andeq	r0, r0, r0

2000064c <RDMIdentify::s_pThis>:
2000064c:	00000000 	andeq	r0, r0, r0

20000650 <WS28xxDmx::s_pThis>:
20000650:	00000000 	andeq	r0, r0, r0

20000654 <PixelDmxParamsRdm::s_pWS28xxDmxStore>:
20000654:	00000000 	andeq	r0, r0, r0

20000658 <PixelDmxParamsRdm::s_Data>:
20000658:	00000000 	andeq	r0, r0, r0

2000065c <PixelPatterns::m_PortConfig>:
	...

2000067c <PixelPatterns::m_nActivePorts>:
2000067c:	00000000 	andeq	r0, r0, r0

20000680 <PixelPatterns::m_pScannerColours>:
20000680:	00000000 	andeq	r0, r0, r0

20000684 <PixelPatterns::m_nCount>:
20000684:	00000000 	andeq	r0, r0, r0

20000688 <PixelPatterns::m_pOutput>:
20000688:	00000000 	andeq	r0, r0, r0

2000068c <PixelTestPattern::s_pThis>:
2000068c:	00000000 	andeq	r0, r0, r0

20000690 <PixelTestPattern::s_Pattern>:
20000690:	00000000 	andeq	r0, r0, r0

20000694 <s_tmp>:
20000694:	00000000 	andeq	r0, r0, r0

20000698 <WS28xx::s_pThis>:
20000698:	00000000 	andeq	r0, r0, r0

2000069c <Network::s_pThis>:
2000069c:	00000000 	andeq	r0, r0, r0

200006a0 <DisplayUdf::s_pThis>:
200006a0:	00000000 	andeq	r0, r0, r0

200006a4 <ConfigStore::s_nWaitMillis>:
200006a4:	00000000 	andeq	r0, r0, r0

200006a8 <ConfigStore::s_SpiFlashData>:
	...

200016a8 <ConfigStore::s_nStartAddress>:
200016a8:	00000000 	andeq	r0, r0, r0

200016ac <ConfigStore::s_bHaveFlashChip>:
200016ac:	00000000 	andeq	r0, r0, r0

200016b0 <ConfigStore::s_nSpiFlashStoreSize>:
200016b0:	00000000 	andeq	r0, r0, r0

200016b4 <ConfigStore::s_State>:
200016b4:	00000000 	andeq	r0, r0, r0

200016b8 <ConfigStore::s_pThis>:
200016b8:	00000000 	andeq	r0, r0, r0

200016bc <ConfigStore::s_bIsNew>:
200016bc:	00000000 	andeq	r0, r0, r0

200016c0 <StoreDisplayUdf::s_pThis>:
200016c0:	00000000 	andeq	r0, r0, r0

200016c4 <StorePixelDmx::s_pThis>:
200016c4:	00000000 	andeq	r0, r0, r0

200016c8 <StoreRDMDevice::s_pThis>:
200016c8:	00000000 	andeq	r0, r0, r0

200016cc <StoreRDMSensors::s_pThis>:
200016cc:	00000000 	andeq	r0, r0, r0

200016d0 <StoreRDMSubDevices::s_pThis>:
200016d0:	00000000 	andeq	r0, r0, r0

200016d4 <FlashCode::s_pThis>:
200016d4:	00000000 	andeq	r0, r0, r0

200016d8 <flashcode::s_nAddress>:
200016d8:	00000000 	andeq	r0, r0, r0

200016dc <flashcode::s_State>:
200016dc:	00000000 	andeq	r0, r0, r0

200016e0 <flashcode::s_nPage>:
200016e0:	00000000 	andeq	r0, r0, r0

200016e4 <flashcode::s_pData>:
200016e4:	00000000 	andeq	r0, r0, r0

200016e8 <flashcode::s_isBank0>:
200016e8:	00000000 	andeq	r0, r0, r0

200016ec <flashcode::s_nLength>:
200016ec:	00000000 	andeq	r0, r0, r0

200016f0 <Display::s_pThis>:
200016f0:	00000000 	andeq	r0, r0, r0

200016f4 <_ClearBuffer>:
	...

2000177c <Ssd1306::s_pThis>:
2000177c:	00000000 	andeq	r0, r0, r0

20001780 <FirmwareVersion::s_FirmwareVersion>:
	...

20001796 <FirmwareVersion::s_Print>:
	...

200017d8 <FirmwareVersion::s_pThis>:
200017d8:	00000000 	andeq	r0, r0, r0

200017dc <LedBlink::s_pThis>:
200017dc:	00000000 	andeq	r0, r0, r0

200017e0 <Hardware::s_pThis>:
200017e0:	00000000 	andeq	r0, r0, r0

200017e4 <HwClock::s_pThis>:
200017e4:	00000000 	andeq	r0, r0, r0

200017e8 <Tm>:
	...

20001810 <s_micros>:
	...

20001818 <set_timer>:
20001818:	00000000 	andeq	r0, r0, r0

2000181c <s_nSysTickMillis>:
2000181c:	00000000 	andeq	r0, r0, r0

20001820 <s_nAddress>:
20001820:	00000000 	andeq	r0, r0, r0

20001824 <s_TxBuffer>:
	...

Disassembly of section .heap:

2000a000 <heap_low>:
	...

Disassembly of section .stack:

2000b000 <_sp-0x1000>:
	...
