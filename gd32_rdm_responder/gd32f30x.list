
build_gd32/main.elf:     file format elf32-littlearm


Disassembly of section .vectors:

08000000 <__gVectors>:
 8000000:	2000c000 	andcs	ip, r0, r0
 8000004:	08000165 	stmdaeq	r0, {r0, r2, r5, r6, r8}
 8000008:	08000a59 	stmdaeq	r0, {r0, r3, r4, r6, r9, fp}
 800000c:	08000a59 	stmdaeq	r0, {r0, r3, r4, r6, r9, fp}
 8000010:	08000a59 	stmdaeq	r0, {r0, r3, r4, r6, r9, fp}
 8000014:	08000a59 	stmdaeq	r0, {r0, r3, r4, r6, r9, fp}
 8000018:	08000a59 	stmdaeq	r0, {r0, r3, r4, r6, r9, fp}
	...
 800002c:	08000a59 	stmdaeq	r0, {r0, r3, r4, r6, r9, fp}
 8000030:	08000a59 	stmdaeq	r0, {r0, r3, r4, r6, r9, fp}
 8000034:	00000000 	andeq	r0, r0, r0
 8000038:	08000a59 	stmdaeq	r0, {r0, r3, r4, r6, r9, fp}
 800003c:	080087f9 	stmdaeq	r0, {r0, r3, r4, r5, r6, r7, r8, r9, sl, pc}
 8000040:	08000a59 	stmdaeq	r0, {r0, r3, r4, r6, r9, fp}
 8000044:	08000a59 	stmdaeq	r0, {r0, r3, r4, r6, r9, fp}
 8000048:	08000a59 	stmdaeq	r0, {r0, r3, r4, r6, r9, fp}
 800004c:	08000a59 	stmdaeq	r0, {r0, r3, r4, r6, r9, fp}
 8000050:	08000a59 	stmdaeq	r0, {r0, r3, r4, r6, r9, fp}
 8000054:	08000a59 	stmdaeq	r0, {r0, r3, r4, r6, r9, fp}
 8000058:	08000a59 	stmdaeq	r0, {r0, r3, r4, r6, r9, fp}
 800005c:	08000a59 	stmdaeq	r0, {r0, r3, r4, r6, r9, fp}
 8000060:	08000a59 	stmdaeq	r0, {r0, r3, r4, r6, r9, fp}
 8000064:	08000a59 	stmdaeq	r0, {r0, r3, r4, r6, r9, fp}
 8000068:	08000a59 	stmdaeq	r0, {r0, r3, r4, r6, r9, fp}
 800006c:	08000a59 	stmdaeq	r0, {r0, r3, r4, r6, r9, fp}
 8000070:	08000a59 	stmdaeq	r0, {r0, r3, r4, r6, r9, fp}
 8000074:	08000a59 	stmdaeq	r0, {r0, r3, r4, r6, r9, fp}
 8000078:	08000a59 	stmdaeq	r0, {r0, r3, r4, r6, r9, fp}
 800007c:	08000a59 	stmdaeq	r0, {r0, r3, r4, r6, r9, fp}
 8000080:	08000a59 	stmdaeq	r0, {r0, r3, r4, r6, r9, fp}
 8000084:	08000a59 	stmdaeq	r0, {r0, r3, r4, r6, r9, fp}
 8000088:	08000a59 	stmdaeq	r0, {r0, r3, r4, r6, r9, fp}
 800008c:	08000a59 	stmdaeq	r0, {r0, r3, r4, r6, r9, fp}
 8000090:	08000a59 	stmdaeq	r0, {r0, r3, r4, r6, r9, fp}
 8000094:	08000a59 	stmdaeq	r0, {r0, r3, r4, r6, r9, fp}
 8000098:	08000a59 	stmdaeq	r0, {r0, r3, r4, r6, r9, fp}
 800009c:	08000a59 	stmdaeq	r0, {r0, r3, r4, r6, r9, fp}
 80000a0:	08000a59 	stmdaeq	r0, {r0, r3, r4, r6, r9, fp}
 80000a4:	08000a59 	stmdaeq	r0, {r0, r3, r4, r6, r9, fp}
 80000a8:	08000a59 	stmdaeq	r0, {r0, r3, r4, r6, r9, fp}
 80000ac:	08000a59 	stmdaeq	r0, {r0, r3, r4, r6, r9, fp}
 80000b0:	080035d1 	stmdaeq	r0, {r0, r4, r6, r7, r8, sl, ip, sp}
 80000b4:	08003681 	stmdaeq	r0, {r0, r7, r9, sl, ip, sp}
 80000b8:	080036e9 	stmdaeq	r0, {r0, r3, r5, r6, r7, r9, sl, ip, sp}
 80000bc:	08000a59 	stmdaeq	r0, {r0, r3, r4, r6, r9, fp}
 80000c0:	08000a59 	stmdaeq	r0, {r0, r3, r4, r6, r9, fp}
 80000c4:	08000a59 	stmdaeq	r0, {r0, r3, r4, r6, r9, fp}
 80000c8:	08000a59 	stmdaeq	r0, {r0, r3, r4, r6, r9, fp}
 80000cc:	08000a59 	stmdaeq	r0, {r0, r3, r4, r6, r9, fp}
 80000d0:	08000a59 	stmdaeq	r0, {r0, r3, r4, r6, r9, fp}
 80000d4:	00000000 	andeq	r0, r0, r0
 80000d8:	08000a59 	stmdaeq	r0, {r0, r3, r4, r6, r9, fp}
 80000dc:	080033dd 	stmdaeq	r0, {r0, r2, r3, r4, r6, r7, r8, r9, ip, sp}
 80000e0:	08000a59 	stmdaeq	r0, {r0, r3, r4, r6, r9, fp}
 80000e4:	08000a59 	stmdaeq	r0, {r0, r3, r4, r6, r9, fp}
 80000e8:	08000a59 	stmdaeq	r0, {r0, r3, r4, r6, r9, fp}
 80000ec:	08000a59 	stmdaeq	r0, {r0, r3, r4, r6, r9, fp}
 80000f0:	08000a59 	stmdaeq	r0, {r0, r3, r4, r6, r9, fp}
 80000f4:	08000a59 	stmdaeq	r0, {r0, r3, r4, r6, r9, fp}
 80000f8:	08000a59 	stmdaeq	r0, {r0, r3, r4, r6, r9, fp}
 80000fc:	08000a59 	stmdaeq	r0, {r0, r3, r4, r6, r9, fp}
 8000100:	08000a59 	stmdaeq	r0, {r0, r3, r4, r6, r9, fp}
 8000104:	08000a59 	stmdaeq	r0, {r0, r3, r4, r6, r9, fp}
 8000108:	08000a59 	stmdaeq	r0, {r0, r3, r4, r6, r9, fp}
 800010c:	08000a59 	stmdaeq	r0, {r0, r3, r4, r6, r9, fp}
 8000110:	08000a59 	stmdaeq	r0, {r0, r3, r4, r6, r9, fp}
 8000114:	08000a59 	stmdaeq	r0, {r0, r3, r4, r6, r9, fp}
 8000118:	08000a59 	stmdaeq	r0, {r0, r3, r4, r6, r9, fp}
 800011c:	080036fd 	stmdaeq	r0, {r0, r2, r3, r4, r5, r6, r7, r9, sl, ip, sp}
 8000120:	08000a59 	stmdaeq	r0, {r0, r3, r4, r6, r9, fp}
 8000124:	08000a59 	stmdaeq	r0, {r0, r3, r4, r6, r9, fp}
 8000128:	08000a59 	stmdaeq	r0, {r0, r3, r4, r6, r9, fp}
 800012c:	08000a59 	stmdaeq	r0, {r0, r3, r4, r6, r9, fp}

Disassembly of section .text:

08000130 <console_init>:
 8000130:	b508      	push	{r3, lr}
 8000132:	f008 fb03 	bl	800873c <uart0_init>
 8000136:	4804      	ldr	r0, [pc, #16]	; (8000148 <console_init+0x18>)
 8000138:	f008 fb30 	bl	800879c <uart0_puts>
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <console_init+0x1c>)
 800013e:	f008 fb2d 	bl	800879c <uart0_puts>
 8000142:	2000      	movs	r0, #0
 8000144:	bd08      	pop	{r3, pc}
 8000146:	bf00      	nop
 8000148:	0800be90 	stmdaeq	r0, {r4, r7, r9, sl, fp, ip, sp, pc}
 800014c:	0800be96 	stmdaeq	r0, {r1, r2, r4, r7, r9, sl, fp, ip, sp, pc}
 8000150:	0800bf6c 	stmdaeq	r0, {r2, r3, r5, r6, r8, r9, sl, fp, ip, sp, pc}
 8000154:	20000000 	andcs	r0, r0, r0
 8000158:	2000007c 	andcs	r0, r0, ip, ror r0
 800015c:	20000080 	andcs	r0, r0, r0, lsl #1
 8000160:	200077b4 			; <UNDEFINED> instruction: 0x200077b4

08000164 <Reset_Handler>:
 8000164:	2100      	movs	r1, #0
 8000166:	e003      	b.n	8000170 <DataInit>

08000168 <CopyData>:
 8000168:	4b0a      	ldr	r3, [pc, #40]	; (8000194 <Zerobss+0x10>)
 800016a:	585b      	ldr	r3, [r3, r1]
 800016c:	5043      	str	r3, [r0, r1]
 800016e:	3104      	adds	r1, #4

08000170 <DataInit>:
 8000170:	4809      	ldr	r0, [pc, #36]	; (8000198 <Zerobss+0x14>)
 8000172:	4b0a      	ldr	r3, [pc, #40]	; (800019c <Zerobss+0x18>)
 8000174:	1842      	adds	r2, r0, r1
 8000176:	429a      	cmp	r2, r3
 8000178:	d3f6      	bcc.n	8000168 <CopyData>
 800017a:	4a09      	ldr	r2, [pc, #36]	; (80001a0 <Zerobss+0x1c>)
 800017c:	e002      	b.n	8000184 <Zerobss>

0800017e <FillZerobss>:
 800017e:	2300      	movs	r3, #0
 8000180:	f842 3b04 	str.w	r3, [r2], #4

08000184 <Zerobss>:
 8000184:	4b07      	ldr	r3, [pc, #28]	; (80001a4 <Zerobss+0x20>)
 8000186:	429a      	cmp	r2, r3
 8000188:	d3f9      	bcc.n	800017e <FillZerobss>
 800018a:	f008 fb3d 	bl	8008808 <SystemInit>
 800018e:	f000 fd55 	bl	8000c3c <main>
 8000192:	4770      	bx	lr
 8000194:	0800bf6c 	stmdaeq	r0, {r2, r3, r5, r6, r8, r9, sl, fp, ip, sp, pc}
 8000198:	20000000 	andcs	r0, r0, r0
 800019c:	2000007c 	andcs	r0, r0, ip, ror r0
 80001a0:	20000080 	andcs	r0, r0, r0, lsl #1
 80001a4:	200077b4 			; <UNDEFINED> instruction: 0x200077b4

080001a8 <__aeabi_d2f>:
 80001a8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80001ac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80001b0:	bf24      	itt	cs
 80001b2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80001b6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80001ba:	d90d      	bls.n	80001d8 <__aeabi_d2f+0x30>
 80001bc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80001c0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80001c4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80001c8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80001cc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80001d0:	bf08      	it	eq
 80001d2:	f020 0001 	biceq.w	r0, r0, #1
 80001d6:	4770      	bx	lr
 80001d8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80001dc:	d121      	bne.n	8000222 <__aeabi_d2f+0x7a>
 80001de:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80001e2:	bfbc      	itt	lt
 80001e4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80001e8:	4770      	bxlt	lr
 80001ea:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80001ee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80001f2:	f1c2 0218 	rsb	r2, r2, #24
 80001f6:	f1c2 0c20 	rsb	ip, r2, #32
 80001fa:	fa10 f30c 	lsls.w	r3, r0, ip
 80001fe:	fa20 f002 	lsr.w	r0, r0, r2
 8000202:	bf18      	it	ne
 8000204:	f040 0001 	orrne.w	r0, r0, #1
 8000208:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800020c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000210:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000214:	ea40 000c 	orr.w	r0, r0, ip
 8000218:	fa23 f302 	lsr.w	r3, r3, r2
 800021c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000220:	e7cc      	b.n	80001bc <__aeabi_d2f+0x14>
 8000222:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000226:	d107      	bne.n	8000238 <__aeabi_d2f+0x90>
 8000228:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 800022c:	bf1e      	ittt	ne
 800022e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000232:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000236:	4770      	bxne	lr
 8000238:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 800023c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000240:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000244:	4770      	bx	lr
 8000246:	bf00      	nop

08000248 <__aeabi_uldivmod>:
 8000248:	b953      	cbnz	r3, 8000260 <__aeabi_uldivmod+0x18>
 800024a:	b94a      	cbnz	r2, 8000260 <__aeabi_uldivmod+0x18>
 800024c:	2900      	cmp	r1, #0
 800024e:	bf08      	it	eq
 8000250:	2800      	cmpeq	r0, #0
 8000252:	bf1c      	itt	ne
 8000254:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000258:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 800025c:	f000 b80c 	b.w	8000278 <__aeabi_idiv0>
 8000260:	f1ad 0c08 	sub.w	ip, sp, #8
 8000264:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000268:	f001 fd3c 	bl	8001ce4 <__udivmoddi4>
 800026c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000270:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000274:	b004      	add	sp, #16
 8000276:	4770      	bx	lr

08000278 <__aeabi_idiv0>:
 8000278:	4770      	bx	lr
 800027a:	bf00      	nop

0800027c <__aeabi_drsub>:
 800027c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000280:	e002      	b.n	8000288 <__adddf3>
 8000282:	bf00      	nop

08000284 <__aeabi_dsub>:
 8000284:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000288 <__adddf3>:
 8000288:	b530      	push	{r4, r5, lr}
 800028a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800028e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000292:	ea94 0f05 	teq	r4, r5
 8000296:	bf08      	it	eq
 8000298:	ea90 0f02 	teqeq	r0, r2
 800029c:	bf1f      	itttt	ne
 800029e:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a2:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002a6:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002aa:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002ae:	f000 80e2 	beq.w	8000476 <__adddf3+0x1ee>
 80002b2:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002b6:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ba:	bfb8      	it	lt
 80002bc:	426d      	neglt	r5, r5
 80002be:	dd0c      	ble.n	80002da <__adddf3+0x52>
 80002c0:	442c      	add	r4, r5
 80002c2:	ea80 0202 	eor.w	r2, r0, r2
 80002c6:	ea81 0303 	eor.w	r3, r1, r3
 80002ca:	ea82 0000 	eor.w	r0, r2, r0
 80002ce:	ea83 0101 	eor.w	r1, r3, r1
 80002d2:	ea80 0202 	eor.w	r2, r0, r2
 80002d6:	ea81 0303 	eor.w	r3, r1, r3
 80002da:	2d36      	cmp	r5, #54	; 0x36
 80002dc:	bf88      	it	hi
 80002de:	bd30      	pophi	{r4, r5, pc}
 80002e0:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002e8:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002ec:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f0:	d002      	beq.n	80002f8 <__adddf3+0x70>
 80002f2:	4240      	negs	r0, r0
 80002f4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002f8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002fc:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000300:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x84>
 8000306:	4252      	negs	r2, r2
 8000308:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800030c:	ea94 0f05 	teq	r4, r5
 8000310:	f000 80a7 	beq.w	8000462 <__adddf3+0x1da>
 8000314:	f1a4 0401 	sub.w	r4, r4, #1
 8000318:	f1d5 0e20 	rsbs	lr, r5, #32
 800031c:	db0d      	blt.n	800033a <__adddf3+0xb2>
 800031e:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000322:	fa22 f205 	lsr.w	r2, r2, r5
 8000326:	1880      	adds	r0, r0, r2
 8000328:	f141 0100 	adc.w	r1, r1, #0
 800032c:	fa03 f20e 	lsl.w	r2, r3, lr
 8000330:	1880      	adds	r0, r0, r2
 8000332:	fa43 f305 	asr.w	r3, r3, r5
 8000336:	4159      	adcs	r1, r3
 8000338:	e00e      	b.n	8000358 <__adddf3+0xd0>
 800033a:	f1a5 0520 	sub.w	r5, r5, #32
 800033e:	f10e 0e20 	add.w	lr, lr, #32
 8000342:	2a01      	cmp	r2, #1
 8000344:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000348:	bf28      	it	cs
 800034a:	f04c 0c02 	orrcs.w	ip, ip, #2
 800034e:	fa43 f305 	asr.w	r3, r3, r5
 8000352:	18c0      	adds	r0, r0, r3
 8000354:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000358:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800035c:	d507      	bpl.n	800036e <__adddf3+0xe6>
 800035e:	f04f 0e00 	mov.w	lr, #0
 8000362:	f1dc 0c00 	rsbs	ip, ip, #0
 8000366:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036a:	eb6e 0101 	sbc.w	r1, lr, r1
 800036e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000372:	d31b      	bcc.n	80003ac <__adddf3+0x124>
 8000374:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000378:	d30c      	bcc.n	8000394 <__adddf3+0x10c>
 800037a:	0849      	lsrs	r1, r1, #1
 800037c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000380:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000384:	f104 0401 	add.w	r4, r4, #1
 8000388:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800038c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000390:	f080 809a 	bcs.w	80004c8 <__adddf3+0x240>
 8000394:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000398:	bf08      	it	eq
 800039a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800039e:	f150 0000 	adcs.w	r0, r0, #0
 80003a2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003a6:	ea41 0105 	orr.w	r1, r1, r5
 80003aa:	bd30      	pop	{r4, r5, pc}
 80003ac:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b0:	4140      	adcs	r0, r0
 80003b2:	eb41 0101 	adc.w	r1, r1, r1
 80003b6:	3c01      	subs	r4, #1
 80003b8:	bf28      	it	cs
 80003ba:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003be:	d2e9      	bcs.n	8000394 <__adddf3+0x10c>
 80003c0:	f091 0f00 	teq	r1, #0
 80003c4:	bf04      	itt	eq
 80003c6:	4601      	moveq	r1, r0
 80003c8:	2000      	moveq	r0, #0
 80003ca:	fab1 f381 	clz	r3, r1
 80003ce:	bf08      	it	eq
 80003d0:	3320      	addeq	r3, #32
 80003d2:	f1a3 030b 	sub.w	r3, r3, #11
 80003d6:	f1b3 0220 	subs.w	r2, r3, #32
 80003da:	da0c      	bge.n	80003f6 <__adddf3+0x16e>
 80003dc:	320c      	adds	r2, #12
 80003de:	dd08      	ble.n	80003f2 <__adddf3+0x16a>
 80003e0:	f102 0c14 	add.w	ip, r2, #20
 80003e4:	f1c2 020c 	rsb	r2, r2, #12
 80003e8:	fa01 f00c 	lsl.w	r0, r1, ip
 80003ec:	fa21 f102 	lsr.w	r1, r1, r2
 80003f0:	e00c      	b.n	800040c <__adddf3+0x184>
 80003f2:	f102 0214 	add.w	r2, r2, #20
 80003f6:	bfd8      	it	le
 80003f8:	f1c2 0c20 	rsble	ip, r2, #32
 80003fc:	fa01 f102 	lsl.w	r1, r1, r2
 8000400:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000404:	bfdc      	itt	le
 8000406:	ea41 010c 	orrle.w	r1, r1, ip
 800040a:	4090      	lslle	r0, r2
 800040c:	1ae4      	subs	r4, r4, r3
 800040e:	bfa2      	ittt	ge
 8000410:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000414:	4329      	orrge	r1, r5
 8000416:	bd30      	popge	{r4, r5, pc}
 8000418:	ea6f 0404 	mvn.w	r4, r4
 800041c:	3c1f      	subs	r4, #31
 800041e:	da1c      	bge.n	800045a <__adddf3+0x1d2>
 8000420:	340c      	adds	r4, #12
 8000422:	dc0e      	bgt.n	8000442 <__adddf3+0x1ba>
 8000424:	f104 0414 	add.w	r4, r4, #20
 8000428:	f1c4 0220 	rsb	r2, r4, #32
 800042c:	fa20 f004 	lsr.w	r0, r0, r4
 8000430:	fa01 f302 	lsl.w	r3, r1, r2
 8000434:	ea40 0003 	orr.w	r0, r0, r3
 8000438:	fa21 f304 	lsr.w	r3, r1, r4
 800043c:	ea45 0103 	orr.w	r1, r5, r3
 8000440:	bd30      	pop	{r4, r5, pc}
 8000442:	f1c4 040c 	rsb	r4, r4, #12
 8000446:	f1c4 0220 	rsb	r2, r4, #32
 800044a:	fa20 f002 	lsr.w	r0, r0, r2
 800044e:	fa01 f304 	lsl.w	r3, r1, r4
 8000452:	ea40 0003 	orr.w	r0, r0, r3
 8000456:	4629      	mov	r1, r5
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	fa21 f004 	lsr.w	r0, r1, r4
 800045e:	4629      	mov	r1, r5
 8000460:	bd30      	pop	{r4, r5, pc}
 8000462:	f094 0f00 	teq	r4, #0
 8000466:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046a:	bf06      	itte	eq
 800046c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000470:	3401      	addeq	r4, #1
 8000472:	3d01      	subne	r5, #1
 8000474:	e74e      	b.n	8000314 <__adddf3+0x8c>
 8000476:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047a:	bf18      	it	ne
 800047c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000480:	d029      	beq.n	80004d6 <__adddf3+0x24e>
 8000482:	ea94 0f05 	teq	r4, r5
 8000486:	bf08      	it	eq
 8000488:	ea90 0f02 	teqeq	r0, r2
 800048c:	d005      	beq.n	800049a <__adddf3+0x212>
 800048e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000492:	bf04      	itt	eq
 8000494:	4619      	moveq	r1, r3
 8000496:	4610      	moveq	r0, r2
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	ea91 0f03 	teq	r1, r3
 800049e:	bf1e      	ittt	ne
 80004a0:	2100      	movne	r1, #0
 80004a2:	2000      	movne	r0, #0
 80004a4:	bd30      	popne	{r4, r5, pc}
 80004a6:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004aa:	d105      	bne.n	80004b8 <__adddf3+0x230>
 80004ac:	0040      	lsls	r0, r0, #1
 80004ae:	4149      	adcs	r1, r1
 80004b0:	bf28      	it	cs
 80004b2:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004b6:	bd30      	pop	{r4, r5, pc}
 80004b8:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004bc:	bf3c      	itt	cc
 80004be:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c2:	bd30      	popcc	{r4, r5, pc}
 80004c4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004c8:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004cc:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d0:	f04f 0000 	mov.w	r0, #0
 80004d4:	bd30      	pop	{r4, r5, pc}
 80004d6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004da:	bf1a      	itte	ne
 80004dc:	4619      	movne	r1, r3
 80004de:	4610      	movne	r0, r2
 80004e0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e4:	bf1c      	itt	ne
 80004e6:	460b      	movne	r3, r1
 80004e8:	4602      	movne	r2, r0
 80004ea:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004ee:	bf06      	itte	eq
 80004f0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f4:	ea91 0f03 	teqeq	r1, r3
 80004f8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004fc:	bd30      	pop	{r4, r5, pc}
 80004fe:	bf00      	nop

08000500 <__aeabi_ui2d>:
 8000500:	f090 0f00 	teq	r0, #0
 8000504:	bf04      	itt	eq
 8000506:	2100      	moveq	r1, #0
 8000508:	4770      	bxeq	lr
 800050a:	b530      	push	{r4, r5, lr}
 800050c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000510:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000514:	f04f 0500 	mov.w	r5, #0
 8000518:	f04f 0100 	mov.w	r1, #0
 800051c:	e750      	b.n	80003c0 <__adddf3+0x138>
 800051e:	bf00      	nop

08000520 <__aeabi_i2d>:
 8000520:	f090 0f00 	teq	r0, #0
 8000524:	bf04      	itt	eq
 8000526:	2100      	moveq	r1, #0
 8000528:	4770      	bxeq	lr
 800052a:	b530      	push	{r4, r5, lr}
 800052c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000530:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000534:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000538:	bf48      	it	mi
 800053a:	4240      	negmi	r0, r0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e73e      	b.n	80003c0 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_f2d>:
 8000544:	0042      	lsls	r2, r0, #1
 8000546:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054a:	ea4f 0131 	mov.w	r1, r1, rrx
 800054e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000552:	bf1f      	itttt	ne
 8000554:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000558:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 800055c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000560:	4770      	bxne	lr
 8000562:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000566:	bf08      	it	eq
 8000568:	4770      	bxeq	lr
 800056a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800056e:	bf04      	itt	eq
 8000570:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000574:	4770      	bxeq	lr
 8000576:	b530      	push	{r4, r5, lr}
 8000578:	f44f 7460 	mov.w	r4, #896	; 0x380
 800057c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000580:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000584:	e71c      	b.n	80003c0 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_ul2d>:
 8000588:	ea50 0201 	orrs.w	r2, r0, r1
 800058c:	bf08      	it	eq
 800058e:	4770      	bxeq	lr
 8000590:	b530      	push	{r4, r5, lr}
 8000592:	f04f 0500 	mov.w	r5, #0
 8000596:	e00a      	b.n	80005ae <__aeabi_l2d+0x16>

08000598 <__aeabi_l2d>:
 8000598:	ea50 0201 	orrs.w	r2, r0, r1
 800059c:	bf08      	it	eq
 800059e:	4770      	bxeq	lr
 80005a0:	b530      	push	{r4, r5, lr}
 80005a2:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005a6:	d502      	bpl.n	80005ae <__aeabi_l2d+0x16>
 80005a8:	4240      	negs	r0, r0
 80005aa:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005ae:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b2:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005b6:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ba:	f43f aed8 	beq.w	800036e <__adddf3+0xe6>
 80005be:	f04f 0203 	mov.w	r2, #3
 80005c2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c6:	bf18      	it	ne
 80005c8:	3203      	addne	r2, #3
 80005ca:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ce:	bf18      	it	ne
 80005d0:	3203      	addne	r2, #3
 80005d2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005d6:	f1c2 0320 	rsb	r3, r2, #32
 80005da:	fa00 fc03 	lsl.w	ip, r0, r3
 80005de:	fa20 f002 	lsr.w	r0, r0, r2
 80005e2:	fa01 fe03 	lsl.w	lr, r1, r3
 80005e6:	ea40 000e 	orr.w	r0, r0, lr
 80005ea:	fa21 f102 	lsr.w	r1, r1, r2
 80005ee:	4414      	add	r4, r2
 80005f0:	e6bd      	b.n	800036e <__adddf3+0xe6>
 80005f2:	bf00      	nop

080005f4 <__aeabi_dmul>:
 80005f4:	b570      	push	{r4, r5, r6, lr}
 80005f6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005fe:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000602:	bf1d      	ittte	ne
 8000604:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000608:	ea94 0f0c 	teqne	r4, ip
 800060c:	ea95 0f0c 	teqne	r5, ip
 8000610:	f000 f8de 	bleq	80007d0 <__aeabi_dmul+0x1dc>
 8000614:	442c      	add	r4, r5
 8000616:	ea81 0603 	eor.w	r6, r1, r3
 800061a:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800061e:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000622:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000626:	bf18      	it	ne
 8000628:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 800062c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000630:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000634:	d038      	beq.n	80006a8 <__aeabi_dmul+0xb4>
 8000636:	fba0 ce02 	umull	ip, lr, r0, r2
 800063a:	f04f 0500 	mov.w	r5, #0
 800063e:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000642:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000646:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064a:	f04f 0600 	mov.w	r6, #0
 800064e:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000652:	f09c 0f00 	teq	ip, #0
 8000656:	bf18      	it	ne
 8000658:	f04e 0e01 	orrne.w	lr, lr, #1
 800065c:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000660:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000664:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000668:	d204      	bcs.n	8000674 <__aeabi_dmul+0x80>
 800066a:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800066e:	416d      	adcs	r5, r5
 8000670:	eb46 0606 	adc.w	r6, r6, r6
 8000674:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000678:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 800067c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000680:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000684:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000688:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800068c:	bf88      	it	hi
 800068e:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000692:	d81e      	bhi.n	80006d2 <__aeabi_dmul+0xde>
 8000694:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000698:	bf08      	it	eq
 800069a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800069e:	f150 0000 	adcs.w	r0, r0, #0
 80006a2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006a6:	bd70      	pop	{r4, r5, r6, pc}
 80006a8:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006ac:	ea46 0101 	orr.w	r1, r6, r1
 80006b0:	ea40 0002 	orr.w	r0, r0, r2
 80006b4:	ea81 0103 	eor.w	r1, r1, r3
 80006b8:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006bc:	bfc2      	ittt	gt
 80006be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006c6:	bd70      	popgt	{r4, r5, r6, pc}
 80006c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006cc:	f04f 0e00 	mov.w	lr, #0
 80006d0:	3c01      	subs	r4, #1
 80006d2:	f300 80ab 	bgt.w	800082c <__aeabi_dmul+0x238>
 80006d6:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006da:	bfde      	ittt	le
 80006dc:	2000      	movle	r0, #0
 80006de:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e2:	bd70      	pople	{r4, r5, r6, pc}
 80006e4:	f1c4 0400 	rsb	r4, r4, #0
 80006e8:	3c20      	subs	r4, #32
 80006ea:	da35      	bge.n	8000758 <__aeabi_dmul+0x164>
 80006ec:	340c      	adds	r4, #12
 80006ee:	dc1b      	bgt.n	8000728 <__aeabi_dmul+0x134>
 80006f0:	f104 0414 	add.w	r4, r4, #20
 80006f4:	f1c4 0520 	rsb	r5, r4, #32
 80006f8:	fa00 f305 	lsl.w	r3, r0, r5
 80006fc:	fa20 f004 	lsr.w	r0, r0, r4
 8000700:	fa01 f205 	lsl.w	r2, r1, r5
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 800070c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000710:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000714:	fa21 f604 	lsr.w	r6, r1, r4
 8000718:	eb42 0106 	adc.w	r1, r2, r6
 800071c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000720:	bf08      	it	eq
 8000722:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000726:	bd70      	pop	{r4, r5, r6, pc}
 8000728:	f1c4 040c 	rsb	r4, r4, #12
 800072c:	f1c4 0520 	rsb	r5, r4, #32
 8000730:	fa00 f304 	lsl.w	r3, r0, r4
 8000734:	fa20 f005 	lsr.w	r0, r0, r5
 8000738:	fa01 f204 	lsl.w	r2, r1, r4
 800073c:	ea40 0002 	orr.w	r0, r0, r2
 8000740:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	f141 0100 	adc.w	r1, r1, #0
 800074c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000750:	bf08      	it	eq
 8000752:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000756:	bd70      	pop	{r4, r5, r6, pc}
 8000758:	f1c4 0520 	rsb	r5, r4, #32
 800075c:	fa00 f205 	lsl.w	r2, r0, r5
 8000760:	ea4e 0e02 	orr.w	lr, lr, r2
 8000764:	fa20 f304 	lsr.w	r3, r0, r4
 8000768:	fa01 f205 	lsl.w	r2, r1, r5
 800076c:	ea43 0302 	orr.w	r3, r3, r2
 8000770:	fa21 f004 	lsr.w	r0, r1, r4
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	fa21 f204 	lsr.w	r2, r1, r4
 800077c:	ea20 0002 	bic.w	r0, r0, r2
 8000780:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000784:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000788:	bf08      	it	eq
 800078a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078e:	bd70      	pop	{r4, r5, r6, pc}
 8000790:	f094 0f00 	teq	r4, #0
 8000794:	d10f      	bne.n	80007b6 <__aeabi_dmul+0x1c2>
 8000796:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079a:	0040      	lsls	r0, r0, #1
 800079c:	eb41 0101 	adc.w	r1, r1, r1
 80007a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a4:	bf08      	it	eq
 80007a6:	3c01      	subeq	r4, #1
 80007a8:	d0f7      	beq.n	800079a <__aeabi_dmul+0x1a6>
 80007aa:	ea41 0106 	orr.w	r1, r1, r6
 80007ae:	f095 0f00 	teq	r5, #0
 80007b2:	bf18      	it	ne
 80007b4:	4770      	bxne	lr
 80007b6:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ba:	0052      	lsls	r2, r2, #1
 80007bc:	eb43 0303 	adc.w	r3, r3, r3
 80007c0:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c4:	bf08      	it	eq
 80007c6:	3d01      	subeq	r5, #1
 80007c8:	d0f7      	beq.n	80007ba <__aeabi_dmul+0x1c6>
 80007ca:	ea43 0306 	orr.w	r3, r3, r6
 80007ce:	4770      	bx	lr
 80007d0:	ea94 0f0c 	teq	r4, ip
 80007d4:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007d8:	bf18      	it	ne
 80007da:	ea95 0f0c 	teqne	r5, ip
 80007de:	d00c      	beq.n	80007fa <__aeabi_dmul+0x206>
 80007e0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e4:	bf18      	it	ne
 80007e6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ea:	d1d1      	bne.n	8000790 <__aeabi_dmul+0x19c>
 80007ec:	ea81 0103 	eor.w	r1, r1, r3
 80007f0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f4:	f04f 0000 	mov.w	r0, #0
 80007f8:	bd70      	pop	{r4, r5, r6, pc}
 80007fa:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007fe:	bf06      	itte	eq
 8000800:	4610      	moveq	r0, r2
 8000802:	4619      	moveq	r1, r3
 8000804:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000808:	d019      	beq.n	800083e <__aeabi_dmul+0x24a>
 800080a:	ea94 0f0c 	teq	r4, ip
 800080e:	d102      	bne.n	8000816 <__aeabi_dmul+0x222>
 8000810:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000814:	d113      	bne.n	800083e <__aeabi_dmul+0x24a>
 8000816:	ea95 0f0c 	teq	r5, ip
 800081a:	d105      	bne.n	8000828 <__aeabi_dmul+0x234>
 800081c:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000820:	bf1c      	itt	ne
 8000822:	4610      	movne	r0, r2
 8000824:	4619      	movne	r1, r3
 8000826:	d10a      	bne.n	800083e <__aeabi_dmul+0x24a>
 8000828:	ea81 0103 	eor.w	r1, r1, r3
 800082c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000830:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000834:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000842:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000846:	bd70      	pop	{r4, r5, r6, pc}

08000848 <__aeabi_ddiv>:
 8000848:	b570      	push	{r4, r5, r6, lr}
 800084a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800084e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000852:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000856:	bf1d      	ittte	ne
 8000858:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800085c:	ea94 0f0c 	teqne	r4, ip
 8000860:	ea95 0f0c 	teqne	r5, ip
 8000864:	f000 f8a7 	bleq	80009b6 <__aeabi_ddiv+0x16e>
 8000868:	eba4 0405 	sub.w	r4, r4, r5
 800086c:	ea81 0e03 	eor.w	lr, r1, r3
 8000870:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000874:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000878:	f000 8088 	beq.w	800098c <__aeabi_ddiv+0x144>
 800087c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000880:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000884:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000888:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 800088c:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000890:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000894:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000898:	ea4f 2600 	mov.w	r6, r0, lsl #8
 800089c:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a0:	429d      	cmp	r5, r3
 80008a2:	bf08      	it	eq
 80008a4:	4296      	cmpeq	r6, r2
 80008a6:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008aa:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008ae:	d202      	bcs.n	80008b6 <__aeabi_ddiv+0x6e>
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	1ab6      	subs	r6, r6, r2
 80008b8:	eb65 0503 	sbc.w	r5, r5, r3
 80008bc:	085b      	lsrs	r3, r3, #1
 80008be:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c2:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008c6:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ca:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ce:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d2:	bf22      	ittt	cs
 80008d4:	1ab6      	subcs	r6, r6, r2
 80008d6:	4675      	movcs	r5, lr
 80008d8:	ea40 000c 	orrcs.w	r0, r0, ip
 80008dc:	085b      	lsrs	r3, r3, #1
 80008de:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e2:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ea:	bf22      	ittt	cs
 80008ec:	1ab6      	subcs	r6, r6, r2
 80008ee:	4675      	movcs	r5, lr
 80008f0:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fe:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000902:	bf22      	ittt	cs
 8000904:	1ab6      	subcs	r6, r6, r2
 8000906:	4675      	movcs	r5, lr
 8000908:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 800090c:	085b      	lsrs	r3, r3, #1
 800090e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000912:	ebb6 0e02 	subs.w	lr, r6, r2
 8000916:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091a:	bf22      	ittt	cs
 800091c:	1ab6      	subcs	r6, r6, r2
 800091e:	4675      	movcs	r5, lr
 8000920:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000924:	ea55 0e06 	orrs.w	lr, r5, r6
 8000928:	d018      	beq.n	800095c <__aeabi_ddiv+0x114>
 800092a:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800092e:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000932:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000936:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093a:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800093e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000942:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000946:	d1c0      	bne.n	80008ca <__aeabi_ddiv+0x82>
 8000948:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800094c:	d10b      	bne.n	8000966 <__aeabi_ddiv+0x11e>
 800094e:	ea41 0100 	orr.w	r1, r1, r0
 8000952:	f04f 0000 	mov.w	r0, #0
 8000956:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095a:	e7b6      	b.n	80008ca <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	bf04      	itt	eq
 8000962:	4301      	orreq	r1, r0
 8000964:	2000      	moveq	r0, #0
 8000966:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096a:	bf88      	it	hi
 800096c:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000970:	f63f aeaf 	bhi.w	80006d2 <__aeabi_dmul+0xde>
 8000974:	ebb5 0c03 	subs.w	ip, r5, r3
 8000978:	bf04      	itt	eq
 800097a:	ebb6 0c02 	subseq.w	ip, r6, r2
 800097e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000982:	f150 0000 	adcs.w	r0, r0, #0
 8000986:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098a:	bd70      	pop	{r4, r5, r6, pc}
 800098c:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000990:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000994:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000998:	bfc2      	ittt	gt
 800099a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800099e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a2:	bd70      	popgt	{r4, r5, r6, pc}
 80009a4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009a8:	f04f 0e00 	mov.w	lr, #0
 80009ac:	3c01      	subs	r4, #1
 80009ae:	e690      	b.n	80006d2 <__aeabi_dmul+0xde>
 80009b0:	ea45 0e06 	orr.w	lr, r5, r6
 80009b4:	e68d      	b.n	80006d2 <__aeabi_dmul+0xde>
 80009b6:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ba:	ea94 0f0c 	teq	r4, ip
 80009be:	bf08      	it	eq
 80009c0:	ea95 0f0c 	teqeq	r5, ip
 80009c4:	f43f af3b 	beq.w	800083e <__aeabi_dmul+0x24a>
 80009c8:	ea94 0f0c 	teq	r4, ip
 80009cc:	d10a      	bne.n	80009e4 <__aeabi_ddiv+0x19c>
 80009ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d2:	f47f af34 	bne.w	800083e <__aeabi_dmul+0x24a>
 80009d6:	ea95 0f0c 	teq	r5, ip
 80009da:	f47f af25 	bne.w	8000828 <__aeabi_dmul+0x234>
 80009de:	4610      	mov	r0, r2
 80009e0:	4619      	mov	r1, r3
 80009e2:	e72c      	b.n	800083e <__aeabi_dmul+0x24a>
 80009e4:	ea95 0f0c 	teq	r5, ip
 80009e8:	d106      	bne.n	80009f8 <__aeabi_ddiv+0x1b0>
 80009ea:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009ee:	f43f aefd 	beq.w	80007ec <__aeabi_dmul+0x1f8>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e722      	b.n	800083e <__aeabi_dmul+0x24a>
 80009f8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009fc:	bf18      	it	ne
 80009fe:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a02:	f47f aec5 	bne.w	8000790 <__aeabi_dmul+0x19c>
 8000a06:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0a:	f47f af0d 	bne.w	8000828 <__aeabi_dmul+0x234>
 8000a0e:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a12:	f47f aeeb 	bne.w	80007ec <__aeabi_dmul+0x1f8>
 8000a16:	e712      	b.n	800083e <__aeabi_dmul+0x24a>

08000a18 <__aeabi_d2uiz>:
 8000a18:	004a      	lsls	r2, r1, #1
 8000a1a:	d211      	bcs.n	8000a40 <__aeabi_d2uiz+0x28>
 8000a1c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a20:	d211      	bcs.n	8000a46 <__aeabi_d2uiz+0x2e>
 8000a22:	d50d      	bpl.n	8000a40 <__aeabi_d2uiz+0x28>
 8000a24:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a28:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a2c:	d40e      	bmi.n	8000a4c <__aeabi_d2uiz+0x34>
 8000a2e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a32:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a36:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a3a:	fa23 f002 	lsr.w	r0, r3, r2
 8000a3e:	4770      	bx	lr
 8000a40:	f04f 0000 	mov.w	r0, #0
 8000a44:	4770      	bx	lr
 8000a46:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a4a:	d102      	bne.n	8000a52 <__aeabi_d2uiz+0x3a>
 8000a4c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000a50:	4770      	bx	lr
 8000a52:	f04f 0000 	mov.w	r0, #0
 8000a56:	4770      	bx	lr

08000a58 <ADC0_1_IRQHandler>:
 8000a58:	e7fe      	b.n	8000a58 <ADC0_1_IRQHandler>

08000a5a <PixelDmxStartStop::~PixelDmxStartStop()>:
 8000a5a:	4770      	bx	lr

08000a5c <PixelDmxStartStop::Start()>:
 8000a5c:	4b01      	ldr	r3, [pc, #4]	; (8000a64 <PixelDmxStartStop::Start()+0x8>)
 8000a5e:	2204      	movs	r2, #4
 8000a60:	611a      	str	r2, [r3, #16]
 8000a62:	4770      	bx	lr
 8000a64:	40011000 	andmi	r1, r1, r0

08000a68 <PixelDmxStartStop::Stop()>:
 8000a68:	4b01      	ldr	r3, [pc, #4]	; (8000a70 <PixelDmxStartStop::Stop()+0x8>)
 8000a6a:	2204      	movs	r2, #4
 8000a6c:	615a      	str	r2, [r3, #20]
 8000a6e:	4770      	bx	lr
 8000a70:	40011000 	andmi	r1, r1, r0

08000a74 <PixelDmxStartStop::~PixelDmxStartStop()>:
 8000a74:	b510      	push	{r4, lr}
 8000a76:	4604      	mov	r4, r0
 8000a78:	f007 fc87 	bl	800838a <operator delete(void*)>
 8000a7c:	4620      	mov	r0, r4
 8000a7e:	bd10      	pop	{r4, pc}

08000a80 <RDMResponder::PersonalityUpdate(LightSet*)>:
 8000a80:	b570      	push	{r4, r5, r6, lr}
 8000a82:	4e0a      	ldr	r6, [pc, #40]	; (8000aac <RDMResponder::PersonalityUpdate(LightSet*)+0x2c>)
 8000a84:	4604      	mov	r4, r0
 8000a86:	6830      	ldr	r0, [r6, #0]
 8000a88:	4281      	cmp	r1, r0
 8000a8a:	460d      	mov	r5, r1
 8000a8c:	d007      	beq.n	8000a9e <RDMResponder::PersonalityUpdate(LightSet*)+0x1e>
 8000a8e:	6803      	ldr	r3, [r0, #0]
 8000a90:	2100      	movs	r1, #0
 8000a92:	68db      	ldr	r3, [r3, #12]
 8000a94:	4798      	blx	r3
 8000a96:	4b06      	ldr	r3, [pc, #24]	; (8000ab0 <RDMResponder::PersonalityUpdate(LightSet*)+0x30>)
 8000a98:	6035      	str	r5, [r6, #0]
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	701a      	strb	r2, [r3, #0]
 8000a9e:	f894 10a9 	ldrb.w	r1, [r4, #169]	; 0xa9
 8000aa2:	4620      	mov	r0, r4
 8000aa4:	f000 fbe8 	bl	8001278 <RDMResponder::PersonalityUpdate(unsigned int)>
 8000aa8:	bd70      	pop	{r4, r5, r6, pc}
 8000aaa:	bf00      	nop
 8000aac:	200001a0 	andcs	r0, r0, r0, lsr #3
 8000ab0:	2000019c 	mulcs	r0, ip, r1

08000ab4 <RDMResponder::DmxStartAddressUpdate()>:
 8000ab4:	b508      	push	{r3, lr}
 8000ab6:	f890 20ab 	ldrb.w	r2, [r0, #171]	; 0xab
 8000aba:	f890 10ac 	ldrb.w	r1, [r0, #172]	; 0xac
 8000abe:	eb01 2102 	add.w	r1, r1, r2, lsl #8
 8000ac2:	b289      	uxth	r1, r1
 8000ac4:	f000 fbc4 	bl	8001250 <RDMResponder::DmxStartAddressUpdate(unsigned short)>
 8000ac8:	bd08      	pop	{r3, pc}

08000aca <Display::ClearLine(unsigned int) [clone .isra.0]>:
 8000aca:	b110      	cbz	r0, 8000ad2 <Display::ClearLine(unsigned int) [clone .isra.0]+0x8>
 8000acc:	6803      	ldr	r3, [r0, #0]
 8000ace:	691b      	ldr	r3, [r3, #16]
 8000ad0:	4718      	bx	r3
 8000ad2:	4770      	bx	lr

08000ad4 <RDMResponder::~RDMResponder()>:
 8000ad4:	4b0e      	ldr	r3, [pc, #56]	; (8000b10 <RDMResponder::~RDMResponder()+0x3c>)
 8000ad6:	b510      	push	{r4, lr}
 8000ad8:	4604      	mov	r4, r0
 8000ada:	f840 3b8c 	str.w	r3, [r0], #140
 8000ade:	f002 fb21 	bl	8003124 <RDMSubDevices::~RDMSubDevices()>
 8000ae2:	f104 0084 	add.w	r0, r4, #132	; 0x84
 8000ae6:	f001 fb27 	bl	8002138 <RDMSensors::~RDMSensors()>
 8000aea:	2300      	movs	r3, #0
 8000aec:	2201      	movs	r2, #1
 8000aee:	4619      	mov	r1, r3
 8000af0:	f104 00cc 	add.w	r0, r4, #204	; 0xcc
 8000af4:	f002 ff1c 	bl	8003930 <Dmx::SetPortDirection(unsigned int, dmx::PortDirection, bool)>
 8000af8:	4b06      	ldr	r3, [pc, #24]	; (8000b14 <RDMResponder::~RDMResponder()+0x40>)
 8000afa:	6818      	ldr	r0, [r3, #0]
 8000afc:	6803      	ldr	r3, [r0, #0]
 8000afe:	2100      	movs	r1, #0
 8000b00:	68db      	ldr	r3, [r3, #12]
 8000b02:	4798      	blx	r3
 8000b04:	4b04      	ldr	r3, [pc, #16]	; (8000b18 <RDMResponder::~RDMResponder()+0x44>)
 8000b06:	2200      	movs	r2, #0
 8000b08:	701a      	strb	r2, [r3, #0]
 8000b0a:	4620      	mov	r0, r4
 8000b0c:	bd10      	pop	{r4, pc}
 8000b0e:	bf00      	nop
 8000b10:	0800a3a8 	stmdaeq	r0, {r3, r5, r7, r8, r9, sp, pc}
 8000b14:	200001a0 	andcs	r0, r0, r0, lsr #3
 8000b18:	2000019c 	mulcs	r0, ip, r1

08000b1c <RDMResponder::~RDMResponder()>:
 8000b1c:	b510      	push	{r4, lr}
 8000b1e:	4604      	mov	r4, r0
 8000b20:	f7ff ffd8 	bl	8000ad4 <RDMResponder::~RDMResponder()>
 8000b24:	4620      	mov	r0, r4
 8000b26:	f007 fc30 	bl	800838a <operator delete(void*)>
 8000b2a:	4620      	mov	r0, r4
 8000b2c:	bd10      	pop	{r4, pc}

08000b2e <Display::Printf(unsigned int, char const*, ...)>:
 8000b2e:	b40c      	push	{r2, r3}
 8000b30:	b570      	push	{r4, r5, r6, lr}
 8000b32:	6984      	ldr	r4, [r0, #24]
 8000b34:	b08a      	sub	sp, #40	; 0x28
 8000b36:	4605      	mov	r5, r0
 8000b38:	460e      	mov	r6, r1
 8000b3a:	b174      	cbz	r4, 8000b5a <Display::Printf(unsigned int, char const*, ...)+0x2c>
 8000b3c:	ab0f      	add	r3, sp, #60	; 0x3c
 8000b3e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8000b40:	9301      	str	r3, [sp, #4]
 8000b42:	2120      	movs	r1, #32
 8000b44:	a802      	add	r0, sp, #8
 8000b46:	f001 f8b5 	bl	8001cb4 <vsnprintf>
 8000b4a:	4604      	mov	r4, r0
 8000b4c:	69a8      	ldr	r0, [r5, #24]
 8000b4e:	6803      	ldr	r3, [r0, #0]
 8000b50:	aa02      	add	r2, sp, #8
 8000b52:	69dd      	ldr	r5, [r3, #28]
 8000b54:	4631      	mov	r1, r6
 8000b56:	4623      	mov	r3, r4
 8000b58:	47a8      	blx	r5
 8000b5a:	4620      	mov	r0, r4
 8000b5c:	b00a      	add	sp, #40	; 0x28
 8000b5e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8000b62:	b002      	add	sp, #8
 8000b64:	4770      	bx	lr
	...

08000b68 <Display::SetSleep(bool)>:
 8000b68:	b538      	push	{r3, r4, r5, lr}
 8000b6a:	4604      	mov	r4, r0
 8000b6c:	6980      	ldr	r0, [r0, #24]
 8000b6e:	460d      	mov	r5, r1
 8000b70:	b138      	cbz	r0, 8000b82 <Display::SetSleep(bool)+0x1a>
 8000b72:	6803      	ldr	r3, [r0, #0]
 8000b74:	7421      	strb	r1, [r4, #16]
 8000b76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b78:	4798      	blx	r3
 8000b7a:	b915      	cbnz	r5, 8000b82 <Display::SetSleep(bool)+0x1a>
 8000b7c:	4b01      	ldr	r3, [pc, #4]	; (8000b84 <Display::SetSleep(bool)+0x1c>)
 8000b7e:	681b      	ldr	r3, [r3, #0]
 8000b80:	6063      	str	r3, [r4, #4]
 8000b82:	bd38      	pop	{r3, r4, r5, pc}
 8000b84:	200017ac 	andcs	r1, r0, ip, lsr #15

08000b88 <RDMPersonality::RDMPersonality(char const*, LightSet*)>:
 8000b88:	2300      	movs	r3, #0
 8000b8a:	b570      	push	{r4, r5, r6, lr}
 8000b8c:	4604      	mov	r4, r0
 8000b8e:	460e      	mov	r6, r1
 8000b90:	6043      	str	r3, [r0, #4]
 8000b92:	6283      	str	r3, [r0, #40]	; 0x28
 8000b94:	4615      	mov	r5, r2
 8000b96:	b972      	cbnz	r2, 8000bb6 <RDMPersonality::RDMPersonality(char const*, LightSet*)+0x2e>
 8000b98:	8002      	strh	r2, [r0, #0]
 8000b9a:	f104 0208 	add.w	r2, r4, #8
 8000b9e:	1e71      	subs	r1, r6, #1
 8000ba0:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	62a3      	str	r3, [r4, #40]	; 0x28
 8000ba8:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8000bac:	b10b      	cbz	r3, 8000bb2 <RDMPersonality::RDMPersonality(char const*, LightSet*)+0x2a>
 8000bae:	4290      	cmp	r0, r2
 8000bb0:	d108      	bne.n	8000bc4 <RDMPersonality::RDMPersonality(char const*, LightSet*)+0x3c>
 8000bb2:	4620      	mov	r0, r4
 8000bb4:	bd70      	pop	{r4, r5, r6, pc}
 8000bb6:	6813      	ldr	r3, [r2, #0]
 8000bb8:	4610      	mov	r0, r2
 8000bba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000bbc:	4798      	blx	r3
 8000bbe:	6065      	str	r5, [r4, #4]
 8000bc0:	8020      	strh	r0, [r4, #0]
 8000bc2:	e7ea      	b.n	8000b9a <RDMPersonality::RDMPersonality(char const*, LightSet*)+0x12>
 8000bc4:	f802 3b01 	strb.w	r3, [r2], #1
 8000bc8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000bca:	3301      	adds	r3, #1
 8000bcc:	e7eb      	b.n	8000ba6 <RDMPersonality::RDMPersonality(char const*, LightSet*)+0x1e>
	...

08000bd0 <display::timeout::gpio_init()>:
 8000bd0:	b510      	push	{r4, lr}
 8000bd2:	f240 6003 	movw	r0, #1539	; 0x603
 8000bd6:	f008 f877 	bl	8008cc8 <rcu_periph_clock_enable>
 8000bda:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000bde:	4803      	ldr	r0, [pc, #12]	; (8000bec <display::timeout::gpio_init()+0x1c>)
 8000be0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000be4:	2203      	movs	r2, #3
 8000be6:	2148      	movs	r1, #72	; 0x48
 8000be8:	f007 bfd6 	b.w	8008b98 <gpio_init>
 8000bec:	40010c00 	andmi	r0, r1, r0, lsl #24

08000bf0 <display::timeout::gpio_renew()>:
 8000bf0:	4b03      	ldr	r3, [pc, #12]	; (8000c00 <display::timeout::gpio_renew()+0x10>)
 8000bf2:	f8d3 0c08 	ldr.w	r0, [r3, #3080]	; 0xc08
 8000bf6:	f480 4080 	eor.w	r0, r0, #16384	; 0x4000
 8000bfa:	f3c0 3080 	ubfx	r0, r0, #14, #1
 8000bfe:	4770      	bx	lr
 8000c00:	40010000 	andmi	r0, r1, r0

08000c04 <is_config_mode()>:
 8000c04:	b508      	push	{r3, lr}
 8000c06:	f240 6002 	movw	r0, #1538	; 0x602
 8000c0a:	f008 f85d 	bl	8008cc8 <rcu_periph_clock_enable>
 8000c0e:	2340      	movs	r3, #64	; 0x40
 8000c10:	2203      	movs	r2, #3
 8000c12:	4806      	ldr	r0, [pc, #24]	; (8000c2c <is_config_mode()+0x28>)
 8000c14:	2148      	movs	r1, #72	; 0x48
 8000c16:	f007 ffbf 	bl	8008b98 <gpio_init>
 8000c1a:	2140      	movs	r1, #64	; 0x40
 8000c1c:	4803      	ldr	r0, [pc, #12]	; (8000c2c <is_config_mode()+0x28>)
 8000c1e:	f008 f815 	bl	8008c4c <gpio_input_bit_get>
 8000c22:	fab0 f080 	clz	r0, r0
 8000c26:	0940      	lsrs	r0, r0, #5
 8000c28:	bd08      	pop	{r3, pc}
 8000c2a:	bf00      	nop
 8000c2c:	40010800 	andmi	r0, r1, r0, lsl #16

08000c30 <Hardware::RebootHandler()>:
 8000c30:	4b01      	ldr	r3, [pc, #4]	; (8000c38 <Hardware::RebootHandler()+0x8>)
 8000c32:	6818      	ldr	r0, [r3, #0]
 8000c34:	f005 bff2 	b.w	8006c1c <WS28xx::Blackout()>
 8000c38:	20000630 	andcs	r0, r0, r0, lsr r6

08000c3c <main>:
 8000c3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000c40:	f5ad 7d4f 	sub.w	sp, sp, #828	; 0x33c
 8000c44:	a82c      	add	r0, sp, #176	; 0xb0
 8000c46:	f007 f975 	bl	8007f34 <Hardware::Hardware()>
 8000c4a:	a815      	add	r0, sp, #84	; 0x54
 8000c4c:	f006 f878 	bl	8006d40 <Network::Network()>
 8000c50:	a865      	add	r0, sp, #404	; 0x194
 8000c52:	f006 f899 	bl	8006d88 <DisplayUdf::DisplayUdf()>
 8000c56:	4bb1      	ldr	r3, [pc, #708]	; (8000f1c <main+0x2e0>)
 8000c58:	4ab1      	ldr	r2, [pc, #708]	; (8000f20 <main+0x2e4>)
 8000c5a:	49b2      	ldr	r1, [pc, #712]	; (8000f24 <main+0x2e8>)
 8000c5c:	a807      	add	r0, sp, #28
 8000c5e:	f007 f8f9 	bl	8007e54 <FirmwareVersion::FirmwareVersion(char const*, char const*, char const*)>
 8000c62:	a809      	add	r0, sp, #36	; 0x24
 8000c64:	f006 fa12 	bl	800708c <ConfigStore::ConfigStore()>
 8000c68:	f7ff ffcc 	bl	8000c04 <is_config_mode()>
 8000c6c:	4606      	mov	r6, r0
 8000c6e:	48ae      	ldr	r0, [pc, #696]	; (8000f28 <main+0x2ec>)
 8000c70:	f001 f830 	bl	8001cd4 <puts>
 8000c74:	49ad      	ldr	r1, [pc, #692]	; (8000f2c <main+0x2f0>)
 8000c76:	48ae      	ldr	r0, [pc, #696]	; (8000f30 <main+0x2f4>)
 8000c78:	f000 fff4 	bl	8001c64 <printf>
 8000c7c:	22aa      	movs	r2, #170	; 0xaa
 8000c7e:	2303      	movs	r3, #3
 8000c80:	e9cd 323f 	strd	r3, r2, [sp, #252]	; 0xfc
 8000c84:	2106      	movs	r1, #6
 8000c86:	2300      	movs	r3, #0
 8000c88:	e9cd 1341 	strd	r1, r3, [sp, #260]	; 0x104
 8000c8c:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
 8000c90:	9343      	str	r3, [sp, #268]	; 0x10c
 8000c92:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000c96:	f8ad 3110 	strh.w	r3, [sp, #272]	; 0x110
 8000c9a:	4ba6      	ldr	r3, [pc, #664]	; (8000f34 <main+0x2f8>)
 8000c9c:	9345      	str	r3, [sp, #276]	; 0x114
 8000c9e:	a80f      	add	r0, sp, #60	; 0x3c
 8000ca0:	2301      	movs	r3, #1
 8000ca2:	e9cd 3346 	strd	r3, r3, [sp, #280]	; 0x118
 8000ca6:	9248      	str	r2, [sp, #288]	; 0x120
 8000ca8:	f8ad 3128 	strh.w	r3, [sp, #296]	; 0x128
 8000cac:	f006 fc1c 	bl	80074e8 <StorePixelDmx::StorePixelDmx()>
 8000cb0:	a90f      	add	r1, sp, #60	; 0x3c
 8000cb2:	a81d      	add	r0, sp, #116	; 0x74
 8000cb4:	f004 fcee 	bl	8005694 <PixelDmxParams::PixelDmxParams(PixelDmxParamsStore*)>
 8000cb8:	a81d      	add	r0, sp, #116	; 0x74
 8000cba:	f004 fd01 	bl	80056c0 <PixelDmxParams::Load()>
 8000cbe:	b130      	cbz	r0, 8000cce <main+0x92>
 8000cc0:	a81d      	add	r0, sp, #116	; 0x74
 8000cc2:	a93f      	add	r1, sp, #252	; 0xfc
 8000cc4:	f004 fd08 	bl	80056d8 <PixelDmxParams::Set(PixelDmxConfiguration*)>
 8000cc8:	a81d      	add	r0, sp, #116	; 0x74
 8000cca:	f004 fd42 	bl	8005752 <PixelDmxParams::Dump()>
 8000cce:	ab19      	add	r3, sp, #100	; 0x64
 8000cd0:	aa0a      	add	r2, sp, #40	; 0x28
 8000cd2:	2101      	movs	r1, #1
 8000cd4:	a83f      	add	r0, sp, #252	; 0xfc
 8000cd6:	f004 fb31 	bl	800533c <PixelDmxConfiguration::Validate(unsigned int, unsigned int&, pixeldmxconfiguration::PortInfo&)>
 8000cda:	9b49      	ldr	r3, [sp, #292]	; 0x124
 8000cdc:	2b01      	cmp	r3, #1
 8000cde:	d90a      	bls.n	8000cf6 <main+0xba>
 8000ce0:	9947      	ldr	r1, [sp, #284]	; 0x11c
 8000ce2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8000ce4:	ebb2 2f41 	cmp.w	r2, r1, lsl #9
 8000ce8:	ea4f 2341 	mov.w	r3, r1, lsl #9
 8000cec:	bf8c      	ite	hi
 8000cee:	23aa      	movhi	r3, #170	; 0xaa
 8000cf0:	fbb3 f3f2 	udivls	r3, r3, r2
 8000cf4:	9340      	str	r3, [sp, #256]	; 0x100
 8000cf6:	a93f      	add	r1, sp, #252	; 0xfc
 8000cf8:	4f8f      	ldr	r7, [pc, #572]	; (8000f38 <main+0x2fc>)
 8000cfa:	a87a      	add	r0, sp, #488	; 0x1e8
 8000cfc:	f004 fc90 	bl	8005620 <WS28xxDmx::WS28xxDmx(PixelDmxConfiguration&)>
 8000d00:	f10d 0940 	add.w	r9, sp, #64	; 0x40
 8000d04:	4b8d      	ldr	r3, [pc, #564]	; (8000f3c <main+0x300>)
 8000d06:	930b      	str	r3, [sp, #44]	; 0x2c
 8000d08:	f240 6004 	movw	r0, #1540	; 0x604
 8000d0c:	f8cd 9238 	str.w	r9, [sp, #568]	; 0x238
 8000d10:	f007 ffda 	bl	8008cc8 <rcu_periph_clock_enable>
 8000d14:	2304      	movs	r3, #4
 8000d16:	2203      	movs	r2, #3
 8000d18:	2110      	movs	r1, #16
 8000d1a:	4638      	mov	r0, r7
 8000d1c:	f007 ff3c 	bl	8008b98 <gpio_init>
 8000d20:	2304      	movs	r3, #4
 8000d22:	617b      	str	r3, [r7, #20]
 8000d24:	ac0b      	add	r4, sp, #44	; 0x2c
 8000d26:	948f      	str	r4, [sp, #572]	; 0x23c
 8000d28:	2101      	movs	r1, #1
 8000d2a:	f89d 4088 	ldrb.w	r4, [sp, #136]	; 0x88
 8000d2e:	a808      	add	r0, sp, #32
 8000d30:	f004 ff08 	bl	8005b44 <PixelPatterns::PixelPatterns(unsigned int)>
 8000d34:	4b82      	ldr	r3, [pc, #520]	; (8000f40 <main+0x304>)
 8000d36:	2c05      	cmp	r4, #5
 8000d38:	601c      	str	r4, [r3, #0]
 8000d3a:	f340 81da 	ble.w	80010f2 <main+0x4b6>
 8000d3e:	4649      	mov	r1, r9
 8000d40:	a80c      	add	r0, sp, #48	; 0x30
 8000d42:	f004 fd23 	bl	800578c <PixelDmxParamsRdm::PixelDmxParamsRdm(PixelDmxStore*)>
 8000d46:	983f      	ldr	r0, [sp, #252]	; 0xfc
 8000d48:	f004 fe76 	bl	8005a38 <PixelType::GetType(pixel::Type)>
 8000d4c:	9005      	str	r0, [sp, #20]
 8000d4e:	9841      	ldr	r0, [sp, #260]	; 0x104
 8000d50:	9d40      	ldr	r5, [sp, #256]	; 0x100
 8000d52:	f8dd 811c 	ldr.w	r8, [sp, #284]	; 0x11c
 8000d56:	f004 fe7b 	bl	8005a50 <PixelType::GetMap(pixel::Map)>
 8000d5a:	9b05      	ldr	r3, [sp, #20]
 8000d5c:	4a79      	ldr	r2, [pc, #484]	; (8000f44 <main+0x308>)
 8000d5e:	9500      	str	r5, [sp, #0]
 8000d60:	e9cd 8001 	strd	r8, r0, [sp, #4]
 8000d64:	211f      	movs	r1, #31
 8000d66:	a824      	add	r0, sp, #144	; 0x90
 8000d68:	f000 ff8c 	bl	8001c84 <snprintf>
 8000d6c:	202c      	movs	r0, #44	; 0x2c
 8000d6e:	f007 fb10 	bl	8008392 <operator new(unsigned int)>
 8000d72:	aa7a      	add	r2, sp, #488	; 0x1e8
 8000d74:	a924      	add	r1, sp, #144	; 0x90
 8000d76:	4605      	mov	r5, r0
 8000d78:	f7ff ff06 	bl	8000b88 <RDMPersonality::RDMPersonality(char const*, LightSet*)>
 8000d7c:	202c      	movs	r0, #44	; 0x2c
 8000d7e:	9511      	str	r5, [sp, #68]	; 0x44
 8000d80:	f007 fb07 	bl	8008392 <operator new(unsigned int)>
 8000d84:	4970      	ldr	r1, [pc, #448]	; (8000f48 <main+0x30c>)
 8000d86:	aa0c      	add	r2, sp, #48	; 0x30
 8000d88:	4605      	mov	r5, r0
 8000d8a:	f7ff fefd 	bl	8000b88 <RDMPersonality::RDMPersonality(char const*, LightSet*)>
 8000d8e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8000d90:	9512      	str	r5, [sp, #72]	; 0x48
 8000d92:	a8c4      	add	r0, sp, #784	; 0x310
 8000d94:	f8d3 8004 	ldr.w	r8, [r3, #4]
 8000d98:	ad91      	add	r5, sp, #580	; 0x244
 8000d9a:	f002 fdf7 	bl	800398c <Dmx::Dmx()>
 8000d9e:	4b6b      	ldr	r3, [pc, #428]	; (8000f4c <main+0x310>)
 8000da0:	2202      	movs	r2, #2
 8000da2:	a911      	add	r1, sp, #68	; 0x44
 8000da4:	4628      	mov	r0, r5
 8000da6:	f8c3 8000 	str.w	r8, [r3]
 8000daa:	f003 f807 	bl	8003dbc <RDMDeviceResponder::RDMDeviceResponder(RDMPersonality**, unsigned int)>
 8000dae:	2101      	movs	r1, #1
 8000db0:	a8cb      	add	r0, sp, #812	; 0x32c
 8000db2:	f003 f9ee 	bl	8004192 <RDMHandler::RDMHandler(bool)>
 8000db6:	4b66      	ldr	r3, [pc, #408]	; (8000f50 <main+0x314>)
 8000db8:	9391      	str	r3, [sp, #580]	; 0x244
 8000dba:	4b66      	ldr	r3, [pc, #408]	; (8000f54 <main+0x318>)
 8000dbc:	a80d      	add	r0, sp, #52	; 0x34
 8000dbe:	601d      	str	r5, [r3, #0]
 8000dc0:	f006 fc2a 	bl	8007618 <StoreRDMSensors::StoreRDMSensors()>
 8000dc4:	a90d      	add	r1, sp, #52	; 0x34
 8000dc6:	a857      	add	r0, sp, #348	; 0x15c
 8000dc8:	f001 fb70 	bl	80024ac <RDMSensorsParams::RDMSensorsParams(RDMSensorsParamsStore*)>
 8000dcc:	a857      	add	r0, sp, #348	; 0x15c
 8000dce:	f001 fb77 	bl	80024c0 <RDMSensorsParams::Load()>
 8000dd2:	b128      	cbz	r0, 8000de0 <main+0x1a4>
 8000dd4:	a857      	add	r0, sp, #348	; 0x15c
 8000dd6:	f001 fba1 	bl	800251c <RDMSensorsParams::Set()>
 8000dda:	a857      	add	r0, sp, #348	; 0x15c
 8000ddc:	f001 fb86 	bl	80024ec <RDMSensorsParams::Dump()>
 8000de0:	4628      	mov	r0, r5
 8000de2:	f003 f839 	bl	8003e58 <RDMDeviceResponder::Init()>
 8000de6:	a813      	add	r0, sp, #76	; 0x4c
 8000de8:	f006 fbde 	bl	80075a8 <StoreRDMDevice::StoreRDMDevice()>
 8000dec:	a913      	add	r1, sp, #76	; 0x4c
 8000dee:	a84b      	add	r0, sp, #300	; 0x12c
 8000df0:	f002 ff72 	bl	8003cd8 <RDMDeviceParams::RDMDeviceParams(RDMDeviceParamsStore*)>
 8000df4:	a84b      	add	r0, sp, #300	; 0x12c
 8000df6:	f002 ff84 	bl	8003d02 <RDMDeviceParams::Load()>
 8000dfa:	b130      	cbz	r0, 8000e0a <main+0x1ce>
 8000dfc:	a84b      	add	r0, sp, #300	; 0x12c
 8000dfe:	a992      	add	r1, sp, #584	; 0x248
 8000e00:	f002 ff8a 	bl	8003d18 <RDMDeviceParams::Set(RDMDevice*)>
 8000e04:	a84b      	add	r0, sp, #300	; 0x12c
 8000e06:	f002 ffbc 	bl	8003d82 <RDMDeviceParams::Dump()>
 8000e0a:	ab14      	add	r3, sp, #80	; 0x50
 8000e0c:	93b0      	str	r3, [sp, #704]	; 0x2c0
 8000e0e:	2301      	movs	r3, #1
 8000e10:	461a      	mov	r2, r3
 8000e12:	2100      	movs	r1, #0
 8000e14:	a8c4      	add	r0, sp, #784	; 0x310
 8000e16:	f002 fd8b 	bl	8003930 <Dmx::SetPortDirection(unsigned int, dmx::PortDirection, bool)>
 8000e1a:	2e00      	cmp	r6, #0
 8000e1c:	f040 814a 	bne.w	80010b4 <main+0x478>
 8000e20:	1e23      	subs	r3, r4, #0
 8000e22:	bf18      	it	ne
 8000e24:	2301      	movne	r3, #1
 8000e26:	f8df 814c 	ldr.w	r8, [pc, #332]	; 8000f74 <main+0x338>
 8000e2a:	4628      	mov	r0, r5
 8000e2c:	f888 3000 	strb.w	r3, [r8]
 8000e30:	f003 f8a6 	bl	8003f80 <RDMDeviceResponder::Print()>
 8000e34:	f898 1000 	ldrb.w	r1, [r8]
 8000e38:	4a47      	ldr	r2, [pc, #284]	; (8000f58 <main+0x31c>)
 8000e3a:	4b48      	ldr	r3, [pc, #288]	; (8000f5c <main+0x320>)
 8000e3c:	4848      	ldr	r0, [pc, #288]	; (8000f60 <main+0x324>)
 8000e3e:	2900      	cmp	r1, #0
 8000e40:	bf14      	ite	ne
 8000e42:	4611      	movne	r1, r2
 8000e44:	4619      	moveq	r1, r3
 8000e46:	f000 ff0d 	bl	8001c64 <printf>
 8000e4a:	2e00      	cmp	r6, #0
 8000e4c:	f040 814d 	bne.w	80010ea <main+0x4ae>
 8000e50:	a87b      	add	r0, sp, #492	; 0x1ec
 8000e52:	f004 fab7 	bl	80053c4 <PixelDmxConfiguration::Print()>
 8000e56:	b13c      	cbz	r4, 8000e68 <main+0x22c>
 8000e58:	4620      	mov	r0, r4
 8000e5a:	f004 fe93 	bl	8005b84 <PixelPatterns::GetName(pixelpatterns::Pattern)>
 8000e5e:	4622      	mov	r2, r4
 8000e60:	4601      	mov	r1, r0
 8000e62:	4840      	ldr	r0, [pc, #256]	; (8000f64 <main+0x328>)
 8000e64:	f000 fefe 	bl	8001c64 <printf>
 8000e68:	493f      	ldr	r1, [pc, #252]	; (8000f68 <main+0x32c>)
 8000e6a:	a865      	add	r0, sp, #404	; 0x194
 8000e6c:	f005 ffa0 	bl	8006db0 <DisplayUdf::SetTitle(char const*, ...)>
 8000e70:	2203      	movs	r2, #3
 8000e72:	2102      	movs	r1, #2
 8000e74:	a865      	add	r0, sp, #404	; 0x194
 8000e76:	f005 ffae 	bl	8006dd6 <DisplayUdf::Set(unsigned int, displayudf::Labels)>
 8000e7a:	220d      	movs	r2, #13
 8000e7c:	2106      	movs	r1, #6
 8000e7e:	a865      	add	r0, sp, #404	; 0x194
 8000e80:	f005 ffa9 	bl	8006dd6 <DisplayUdf::Set(unsigned int, displayudf::Labels)>
 8000e84:	983f      	ldr	r0, [sp, #252]	; 0xfc
 8000e86:	f004 fdd7 	bl	8005a38 <PixelType::GetType(pixel::Type)>
 8000e8a:	9005      	str	r0, [sp, #20]
 8000e8c:	9841      	ldr	r0, [sp, #260]	; 0x104
 8000e8e:	f8dd 8100 	ldr.w	r8, [sp, #256]	; 0x100
 8000e92:	f8dd 911c 	ldr.w	r9, [sp, #284]	; 0x11c
 8000e96:	f004 fddb 	bl	8005a50 <PixelType::GetMap(pixel::Map)>
 8000e9a:	9b05      	ldr	r3, [sp, #20]
 8000e9c:	4a33      	ldr	r2, [pc, #204]	; (8000f6c <main+0x330>)
 8000e9e:	f8cd 8000 	str.w	r8, [sp]
 8000ea2:	2107      	movs	r1, #7
 8000ea4:	e9cd 9001 	strd	r9, r0, [sp, #4]
 8000ea8:	a865      	add	r0, sp, #404	; 0x194
 8000eaa:	f7ff fe40 	bl	8000b2e <Display::Printf(unsigned int, char const*, ...)>
 8000eae:	a80e      	add	r0, sp, #56	; 0x38
 8000eb0:	f006 fa16 	bl	80072e0 <StoreDisplayUdf::StoreDisplayUdf()>
 8000eb4:	a90e      	add	r1, sp, #56	; 0x38
 8000eb6:	a835      	add	r0, sp, #212	; 0xd4
 8000eb8:	f005 fffa 	bl	8006eb0 <DisplayUdfParams::DisplayUdfParams(DisplayUdfParamsStore*)>
 8000ebc:	a835      	add	r0, sp, #212	; 0xd4
 8000ebe:	f006 f804 	bl	8006eca <DisplayUdfParams::Load()>
 8000ec2:	b130      	cbz	r0, 8000ed2 <main+0x296>
 8000ec4:	a835      	add	r0, sp, #212	; 0xd4
 8000ec6:	f006 f83f 	bl	8006f48 <DisplayUdfParams::Dump()>
 8000eca:	a965      	add	r1, sp, #404	; 0x194
 8000ecc:	a835      	add	r0, sp, #212	; 0xd4
 8000ece:	f006 f808 	bl	8006ee2 <DisplayUdfParams::Set(DisplayUdf*)>
 8000ed2:	a865      	add	r0, sp, #404	; 0x194
 8000ed4:	f005 ff9a 	bl	8006e0c <DisplayUdf::Show()>
 8000ed8:	2e00      	cmp	r6, #0
 8000eda:	f000 80ed 	beq.w	80010b8 <main+0x47c>
 8000ede:	986b      	ldr	r0, [sp, #428]	; 0x1ac
 8000ee0:	2103      	movs	r1, #3
 8000ee2:	f7ff fdf2 	bl	8000aca <Display::ClearLine(unsigned int) [clone .isra.0]>
 8000ee6:	986b      	ldr	r0, [sp, #428]	; 0x1ac
 8000ee8:	2104      	movs	r1, #4
 8000eea:	f7ff fdee 	bl	8000aca <Display::ClearLine(unsigned int) [clone .isra.0]>
 8000eee:	986b      	ldr	r0, [sp, #428]	; 0x1ac
 8000ef0:	b178      	cbz	r0, 8000f12 <main+0x2d6>
 8000ef2:	6844      	ldr	r4, [r0, #4]
 8000ef4:	491e      	ldr	r1, [pc, #120]	; (8000f70 <main+0x334>)
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	429c      	cmp	r4, r3
 8000efa:	f103 0301 	add.w	r3, r3, #1
 8000efe:	d903      	bls.n	8000f08 <main+0x2cc>
 8000f00:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8000f04:	2a00      	cmp	r2, #0
 8000f06:	d1f7      	bne.n	8000ef8 <main+0x2bc>
 8000f08:	6802      	ldr	r2, [r0, #0]
 8000f0a:	2104      	movs	r1, #4
 8000f0c:	69d4      	ldr	r4, [r2, #28]
 8000f0e:	4a18      	ldr	r2, [pc, #96]	; (8000f70 <main+0x334>)
 8000f10:	47a0      	blx	r4
 8000f12:	986b      	ldr	r0, [sp, #428]	; 0x1ac
 8000f14:	2105      	movs	r1, #5
 8000f16:	f7ff fdd8 	bl	8000aca <Display::ClearLine(unsigned int) [clone .isra.0]>
 8000f1a:	e02d      	b.n	8000f78 <main+0x33c>
 8000f1c:	08009efe 	stmdaeq	r0, {r1, r2, r3, r4, r5, r6, r7, r9, sl, fp, ip, pc}
 8000f20:	08009f07 	stmdaeq	r0, {r0, r1, r2, r8, r9, sl, fp, ip, pc}
 8000f24:	08009fc8 	stmdaeq	r0, {r3, r6, r7, r8, r9, sl, fp, ip, pc}
 8000f28:	2000172a 	andcs	r1, r0, sl, lsr #14
 8000f2c:	08009f13 	stmdaeq	r0, {r0, r1, r4, r8, r9, sl, fp, ip, pc}
 8000f30:	08009f21 	stmdaeq	r0, {r0, r5, r8, r9, sl, fp, ip, pc}
 8000f34:	08009fcc 	stmdaeq	r0, {r2, r3, r6, r7, r8, r9, sl, fp, ip, pc}
 8000f38:	40011000 	andmi	r1, r1, r0
 8000f3c:	08009fb8 	stmdaeq	r0, {r3, r4, r5, r7, r8, r9, sl, fp, ip, pc}
 8000f40:	20000628 	andcs	r0, r0, r8, lsr #12
 8000f44:	08009f2e 	stmdaeq	r0, {r1, r2, r3, r5, r8, r9, sl, fp, ip, pc}
 8000f48:	08009f3d 	stmdaeq	r0, {r0, r2, r3, r4, r5, r8, r9, sl, fp, ip, pc}
 8000f4c:	200001a0 	andcs	r0, r0, r0, lsr #3
 8000f50:	08009fa0 	stmdaeq	r0, {r5, r7, r8, r9, sl, fp, ip, pc}
 8000f54:	20000190 	mulcs	r0, r0, r1
 8000f58:	08009ee1 	stmdaeq	r0, {r0, r5, r6, r7, r9, sl, fp, ip, pc}
 8000f5c:	08009eea 	stmdaeq	r0, {r1, r3, r5, r6, r7, r9, sl, fp, ip, pc}
 8000f60:	08009f49 	stmdaeq	r0, {r0, r3, r6, r8, r9, sl, fp, ip, pc}
 8000f64:	08009f55 	stmdaeq	r0, {r0, r2, r4, r6, r8, r9, sl, fp, ip, pc}
 8000f68:	08009f6d 	stmdaeq	r0, {r0, r2, r3, r5, r6, r8, r9, sl, fp, ip, pc}
 8000f6c:	08009f83 	stmdaeq	r0, {r0, r1, r7, r8, r9, sl, fp, ip, pc}
 8000f70:	08009ef2 	stmdaeq	r0, {r1, r4, r5, r6, r7, r9, sl, fp, ip, pc}
 8000f74:	200001a4 	andcs	r0, r0, r4, lsr #3
 8000f78:	2102      	movs	r1, #2
 8000f7a:	a82c      	add	r0, sp, #176	; 0xb0
 8000f7c:	f006 ffa3 	bl	8007ec6 <Hardware::SetMode(hardware::ledblink::Mode)>
 8000f80:	2102      	movs	r1, #2
 8000f82:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8000f86:	f007 fddd 	bl	8008b44 <fwdgt_config>
 8000f8a:	2801      	cmp	r0, #1
 8000f8c:	bf0c      	ite	eq
 8000f8e:	2301      	moveq	r3, #1
 8000f90:	2300      	movne	r3, #0
 8000f92:	f88d 30bc 	strb.w	r3, [sp, #188]	; 0xbc
 8000f96:	d101      	bne.n	8000f9c <main+0x360>
 8000f98:	f007 fdc4 	bl	8008b24 <fwdgt_enable>
 8000f9c:	4e5e      	ldr	r6, [pc, #376]	; (8001118 <main+0x4dc>)
 8000f9e:	4c5f      	ldr	r4, [pc, #380]	; (800111c <main+0x4e0>)
 8000fa0:	f007 fdc8 	bl	8008b34 <fwdgt_counter_reload>
 8000fa4:	4628      	mov	r0, r5
 8000fa6:	f001 f869 	bl	800207c <RDMResponder::Run()>
 8000faa:	a809      	add	r0, sp, #36	; 0x24
 8000fac:	f006 f916 	bl	80071dc <ConfigStore::Flash()>
 8000fb0:	6833      	ldr	r3, [r6, #0]
 8000fb2:	b113      	cbz	r3, 8000fba <main+0x37e>
 8000fb4:	a808      	add	r0, sp, #32
 8000fb6:	f005 f805 	bl	8005fc4 <PixelPatterns::Run()>
 8000fba:	9a6a      	ldr	r2, [sp, #424]	; 0x1a8
 8000fbc:	b16a      	cbz	r2, 8000fda <main+0x39e>
 8000fbe:	f89d 31a4 	ldrb.w	r3, [sp, #420]	; 0x1a4
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	f040 808a 	bne.w	80010dc <main+0x4a0>
 8000fc8:	6823      	ldr	r3, [r4, #0]
 8000fca:	9966      	ldr	r1, [sp, #408]	; 0x198
 8000fcc:	1a5b      	subs	r3, r3, r1
 8000fce:	429a      	cmp	r2, r3
 8000fd0:	d203      	bcs.n	8000fda <main+0x39e>
 8000fd2:	2101      	movs	r1, #1
 8000fd4:	a865      	add	r0, sp, #404	; 0x194
 8000fd6:	f7ff fdc7 	bl	8000b68 <Display::SetSleep(bool)>
 8000fda:	9a32      	ldr	r2, [sp, #200]	; 0xc8
 8000fdc:	2a00      	cmp	r2, #0
 8000fde:	d0df      	beq.n	8000fa0 <main+0x364>
 8000fe0:	6823      	ldr	r3, [r4, #0]
 8000fe2:	9934      	ldr	r1, [sp, #208]	; 0xd0
 8000fe4:	1a5b      	subs	r3, r3, r1
 8000fe6:	429a      	cmp	r2, r3
 8000fe8:	d8da      	bhi.n	8000fa0 <main+0x364>
 8000fea:	6823      	ldr	r3, [r4, #0]
 8000fec:	9334      	str	r3, [sp, #208]	; 0xd0
 8000fee:	9b33      	ldr	r3, [sp, #204]	; 0xcc
 8000ff0:	2b01      	cmp	r3, #1
 8000ff2:	f083 0201 	eor.w	r2, r3, #1
 8000ff6:	bf18      	it	ne
 8000ff8:	2301      	movne	r3, #1
 8000ffa:	9233      	str	r2, [sp, #204]	; 0xcc
 8000ffc:	bf14      	ite	ne
 8000ffe:	613b      	strne	r3, [r7, #16]
 8001000:	617b      	streq	r3, [r7, #20]
 8001002:	e7cd      	b.n	8000fa0 <main+0x364>
 8001004:	2300      	movs	r3, #0
 8001006:	2264      	movs	r2, #100	; 0x64
 8001008:	4619      	mov	r1, r3
 800100a:	a808      	add	r0, sp, #32
 800100c:	f004 fdc6 	bl	8005b9c <PixelPatterns::RainbowCycle(unsigned int, unsigned int, pixelpatterns::Direction)>
 8001010:	e695      	b.n	8000d3e <main+0x102>
 8001012:	2200      	movs	r2, #0
 8001014:	2364      	movs	r3, #100	; 0x64
 8001016:	e9cd 3200 	strd	r3, r2, [sp]
 800101a:	4611      	mov	r1, r2
 800101c:	4b40      	ldr	r3, [pc, #256]	; (8001120 <main+0x4e4>)
 800101e:	a808      	add	r0, sp, #32
 8001020:	f004 fdd0 	bl	8005bc4 <PixelPatterns::TheaterChase(unsigned int, unsigned int, unsigned int, unsigned int, pixelpatterns::Direction)>
 8001024:	e68b      	b.n	8000d3e <main+0x102>
 8001026:	2100      	movs	r1, #0
 8001028:	4a3d      	ldr	r2, [pc, #244]	; (8001120 <main+0x4e4>)
 800102a:	9100      	str	r1, [sp, #0]
 800102c:	2364      	movs	r3, #100	; 0x64
 800102e:	a808      	add	r0, sp, #32
 8001030:	f004 fde4 	bl	8005bfc <PixelPatterns::ColourWipe(unsigned int, unsigned int, unsigned int, pixelpatterns::Direction)>
 8001034:	e683      	b.n	8000d3e <main+0x102>
 8001036:	2364      	movs	r3, #100	; 0x64
 8001038:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 800103c:	2100      	movs	r1, #0
 800103e:	a808      	add	r0, sp, #32
 8001040:	f004 fdf6 	bl	8005c30 <PixelPatterns::Scanner(unsigned int, unsigned int, unsigned int)>
 8001044:	e67b      	b.n	8000d3e <main+0x102>
 8001046:	2200      	movs	r2, #0
 8001048:	2364      	movs	r3, #100	; 0x64
 800104a:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800104e:	230a      	movs	r3, #10
 8001050:	9300      	str	r3, [sp, #0]
 8001052:	4611      	mov	r1, r2
 8001054:	4b32      	ldr	r3, [pc, #200]	; (8001120 <main+0x4e4>)
 8001056:	a808      	add	r0, sp, #32
 8001058:	f004 fe1c 	bl	8005c94 <PixelPatterns::Fade(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, pixelpatterns::Direction)>
 800105c:	e66f      	b.n	8000d3e <main+0x102>
 800105e:	4b31      	ldr	r3, [pc, #196]	; (8001124 <main+0x4e8>)
 8001060:	f8df a0d0 	ldr.w	sl, [pc, #208]	; 8001134 <main+0x4f8>
 8001064:	f8df b0c0 	ldr.w	fp, [pc, #192]	; 8001128 <main+0x4ec>
 8001068:	2500      	movs	r5, #0
 800106a:	61dd      	str	r5, [r3, #28]
 800106c:	46a8      	mov	r8, r5
 800106e:	f8da 3000 	ldr.w	r3, [sl]
 8001072:	429d      	cmp	r5, r3
 8001074:	d308      	bcc.n	8001088 <main+0x44c>
 8001076:	f008 fbef 	bl	8009858 <gd32_spi_dma_tx_is_active()>
 800107a:	2800      	cmp	r0, #0
 800107c:	d1fb      	bne.n	8001076 <main+0x43a>
 800107e:	4b2a      	ldr	r3, [pc, #168]	; (8001128 <main+0x4ec>)
 8001080:	6818      	ldr	r0, [r3, #0]
 8001082:	f005 fdaf 	bl	8006be4 <WS28xx::Update()>
 8001086:	e65a      	b.n	8000d3e <main+0x102>
 8001088:	f8db 0000 	ldr.w	r0, [fp]
 800108c:	6803      	ldr	r3, [r0, #0]
 800108e:	2b07      	cmp	r3, #7
 8001090:	d008      	beq.n	80010a4 <main+0x468>
 8001092:	2300      	movs	r3, #0
 8001094:	f8cd 8000 	str.w	r8, [sp]
 8001098:	461a      	mov	r2, r3
 800109a:	4629      	mov	r1, r5
 800109c:	f004 ffba 	bl	8006014 <WS28xx::SetPixel(unsigned int, unsigned char, unsigned char, unsigned char)>
 80010a0:	3501      	adds	r5, #1
 80010a2:	e7e4      	b.n	800106e <main+0x432>
 80010a4:	2300      	movs	r3, #0
 80010a6:	e9cd 8800 	strd	r8, r8, [sp]
 80010aa:	461a      	mov	r2, r3
 80010ac:	4629      	mov	r1, r5
 80010ae:	f005 fc2b 	bl	8006908 <WS28xx::SetPixel(unsigned int, unsigned char, unsigned char, unsigned char, unsigned char)>
 80010b2:	e7f5      	b.n	80010a0 <main+0x464>
 80010b4:	2300      	movs	r3, #0
 80010b6:	e6b6      	b.n	8000e26 <main+0x1ea>
 80010b8:	2c00      	cmp	r4, #0
 80010ba:	f43f af5d 	beq.w	8000f78 <main+0x33c>
 80010be:	986b      	ldr	r0, [sp, #428]	; 0x1ac
 80010c0:	2106      	movs	r1, #6
 80010c2:	f7ff fd02 	bl	8000aca <Display::ClearLine(unsigned int) [clone .isra.0]>
 80010c6:	4620      	mov	r0, r4
 80010c8:	f004 fd5c 	bl	8005b84 <PixelPatterns::GetName(pixelpatterns::Pattern)>
 80010cc:	4a17      	ldr	r2, [pc, #92]	; (800112c <main+0x4f0>)
 80010ce:	9400      	str	r4, [sp, #0]
 80010d0:	4603      	mov	r3, r0
 80010d2:	2106      	movs	r1, #6
 80010d4:	a865      	add	r0, sp, #404	; 0x194
 80010d6:	f7ff fd2a 	bl	8000b2e <Display::Printf(unsigned int, char const*, ...)>
 80010da:	e74d      	b.n	8000f78 <main+0x33c>
 80010dc:	f7ff fd88 	bl	8000bf0 <display::timeout::gpio_renew()>
 80010e0:	2800      	cmp	r0, #0
 80010e2:	f43f af7a 	beq.w	8000fda <main+0x39e>
 80010e6:	2100      	movs	r1, #0
 80010e8:	e774      	b.n	8000fd4 <main+0x398>
 80010ea:	4811      	ldr	r0, [pc, #68]	; (8001130 <main+0x4f4>)
 80010ec:	f000 fdf2 	bl	8001cd4 <puts>
 80010f0:	e6ba      	b.n	8000e68 <main+0x22c>
 80010f2:	2c05      	cmp	r4, #5
 80010f4:	f63f ae23 	bhi.w	8000d3e <main+0x102>
 80010f8:	a301      	add	r3, pc, #4	; (adr r3, 8001100 <main+0x4c4>)
 80010fa:	f853 f024 	ldr.w	pc, [r3, r4, lsl #2]
 80010fe:	bf00      	nop
 8001100:	0800105f 	stmdaeq	r0, {r0, r1, r2, r3, r4, r6, ip}
 8001104:	08001005 	stmdaeq	r0, {r0, r2, ip}
 8001108:	08001013 	stmdaeq	r0, {r0, r1, r4, ip}
 800110c:	08001027 	stmdaeq	r0, {r0, r1, r2, r5, ip}
 8001110:	08001037 	stmdaeq	r0, {r0, r1, r2, r4, r5, ip}
 8001114:	08001047 	stmdaeq	r0, {r0, r1, r2, r6, ip}
 8001118:	20000628 	andcs	r0, r0, r8, lsr #12
 800111c:	200017ac 	andcs	r1, r0, ip, lsr #15
 8001120:	00646464 	rsbeq	r6, r4, r4, ror #8
 8001124:	200005f4 	strdcs	r0, [r0], -r4
 8001128:	20000620 	andcs	r0, r0, r0, lsr #12
 800112c:	08009f90 	stmdaeq	r0, {r4, r7, r8, r9, sl, fp, ip, pc}
 8001130:	08009f3d 	stmdaeq	r0, {r0, r2, r3, r4, r5, r8, r9, sl, fp, ip, pc}
 8001134:	2000061c 	andcs	r0, r0, ip, lsl r6

08001138 <Display::ClearLine(unsigned int) [clone .isra.0]>:
 8001138:	b110      	cbz	r0, 8001140 <Display::ClearLine(unsigned int) [clone .isra.0]+0x8>
 800113a:	6803      	ldr	r3, [r0, #0]
 800113c:	691b      	ldr	r3, [r3, #16]
 800113e:	4718      	bx	r3
 8001140:	4770      	bx	lr

08001142 <Display::TextStatus(char const*)>:
 8001142:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8001146:	4604      	mov	r4, r0
 8001148:	6980      	ldr	r0, [r0, #24]
 800114a:	460d      	mov	r5, r1
 800114c:	2800      	cmp	r0, #0
 800114e:	d02f      	beq.n	80011b0 <Display::TextStatus(char const*)+0x6e>
 8001150:	e9d0 8701 	ldrd	r8, r7, [r0, #4]
 8001154:	6803      	ldr	r3, [r0, #0]
 8001156:	1e7a      	subs	r2, r7, #1
 8001158:	9201      	str	r2, [sp, #4]
 800115a:	6a1b      	ldr	r3, [r3, #32]
 800115c:	2100      	movs	r1, #0
 800115e:	4798      	blx	r3
 8001160:	9a01      	ldr	r2, [sp, #4]
 8001162:	2600      	movs	r6, #0
 8001164:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 8001168:	45b0      	cmp	r8, r6
 800116a:	69a0      	ldr	r0, [r4, #24]
 800116c:	d817      	bhi.n	800119e <Display::TextStatus(char const*)+0x5c>
 800116e:	b118      	cbz	r0, 8001178 <Display::TextStatus(char const*)+0x36>
 8001170:	6803      	ldr	r3, [r0, #0]
 8001172:	2100      	movs	r1, #0
 8001174:	6a1b      	ldr	r3, [r3, #32]
 8001176:	4798      	blx	r3
 8001178:	69a0      	ldr	r0, [r4, #24]
 800117a:	b1c8      	cbz	r0, 80011b0 <Display::TextStatus(char const*)+0x6e>
 800117c:	6841      	ldr	r1, [r0, #4]
 800117e:	2300      	movs	r3, #0
 8001180:	5cea      	ldrb	r2, [r5, r3]
 8001182:	b11a      	cbz	r2, 800118c <Display::TextStatus(char const*)+0x4a>
 8001184:	1c5a      	adds	r2, r3, #1
 8001186:	4299      	cmp	r1, r3
 8001188:	4613      	mov	r3, r2
 800118a:	d8f9      	bhi.n	8001180 <Display::TextStatus(char const*)+0x3e>
 800118c:	6802      	ldr	r2, [r0, #0]
 800118e:	69d4      	ldr	r4, [r2, #28]
 8001190:	4639      	mov	r1, r7
 8001192:	462a      	mov	r2, r5
 8001194:	46a4      	mov	ip, r4
 8001196:	b002      	add	sp, #8
 8001198:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800119c:	4760      	bx	ip
 800119e:	b128      	cbz	r0, 80011ac <Display::TextStatus(char const*)+0x6a>
 80011a0:	6803      	ldr	r3, [r0, #0]
 80011a2:	9201      	str	r2, [sp, #4]
 80011a4:	695b      	ldr	r3, [r3, #20]
 80011a6:	2120      	movs	r1, #32
 80011a8:	4798      	blx	r3
 80011aa:	9a01      	ldr	r2, [sp, #4]
 80011ac:	3601      	adds	r6, #1
 80011ae:	e7db      	b.n	8001168 <Display::TextStatus(char const*)+0x26>
 80011b0:	b002      	add	sp, #8
 80011b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

080011b8 <PixelDmxParamsRdm::Display(unsigned char const*)>:
 80011b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80011bc:	4d1f      	ldr	r5, [pc, #124]	; (800123c <PixelDmxParamsRdm::Display(unsigned char const*)+0x84>)
 80011be:	7908      	ldrb	r0, [r1, #4]
 80011c0:	682e      	ldr	r6, [r5, #0]
 80011c2:	b086      	sub	sp, #24
 80011c4:	460c      	mov	r4, r1
 80011c6:	bb30      	cbnz	r0, 8001216 <PixelDmxParamsRdm::Display(unsigned char const*)+0x5e>
 80011c8:	69b0      	ldr	r0, [r6, #24]
 80011ca:	2106      	movs	r1, #6
 80011cc:	f7ff ffb4 	bl	8001138 <Display::ClearLine(unsigned int) [clone .isra.0]>
 80011d0:	7820      	ldrb	r0, [r4, #0]
 80011d2:	682e      	ldr	r6, [r5, #0]
 80011d4:	f004 fc30 	bl	8005a38 <PixelType::GetType(pixel::Type)>
 80011d8:	9005      	str	r0, [sp, #20]
 80011da:	78e0      	ldrb	r0, [r4, #3]
 80011dc:	7867      	ldrb	r7, [r4, #1]
 80011de:	f894 8002 	ldrb.w	r8, [r4, #2]
 80011e2:	f004 fc35 	bl	8005a50 <PixelType::GetMap(pixel::Map)>
 80011e6:	9b05      	ldr	r3, [sp, #20]
 80011e8:	4a15      	ldr	r2, [pc, #84]	; (8001240 <PixelDmxParamsRdm::Display(unsigned char const*)+0x88>)
 80011ea:	9700      	str	r7, [sp, #0]
 80011ec:	e9cd 8001 	strd	r8, r0, [sp, #4]
 80011f0:	2107      	movs	r1, #7
 80011f2:	4630      	mov	r0, r6
 80011f4:	f7ff fc9b 	bl	8000b2e <Display::Printf(unsigned int, char const*, ...)>
 80011f8:	7963      	ldrb	r3, [r4, #5]
 80011fa:	2bff      	cmp	r3, #255	; 0xff
 80011fc:	4b11      	ldr	r3, [pc, #68]	; (8001244 <PixelDmxParamsRdm::Display(unsigned char const*)+0x8c>)
 80011fe:	d113      	bne.n	8001228 <PixelDmxParamsRdm::Display(unsigned char const*)+0x70>
 8001200:	781a      	ldrb	r2, [r3, #0]
 8001202:	b92a      	cbnz	r2, 8001210 <PixelDmxParamsRdm::Display(unsigned char const*)+0x58>
 8001204:	2201      	movs	r2, #1
 8001206:	4910      	ldr	r1, [pc, #64]	; (8001248 <PixelDmxParamsRdm::Display(unsigned char const*)+0x90>)
 8001208:	6828      	ldr	r0, [r5, #0]
 800120a:	701a      	strb	r2, [r3, #0]
 800120c:	f7ff ff99 	bl	8001142 <Display::TextStatus(char const*)>
 8001210:	b006      	add	sp, #24
 8001212:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001216:	f004 fcb5 	bl	8005b84 <PixelPatterns::GetName(pixelpatterns::Pattern)>
 800121a:	4a0c      	ldr	r2, [pc, #48]	; (800124c <PixelDmxParamsRdm::Display(unsigned char const*)+0x94>)
 800121c:	4603      	mov	r3, r0
 800121e:	2106      	movs	r1, #6
 8001220:	4630      	mov	r0, r6
 8001222:	f7ff fc84 	bl	8000b2e <Display::Printf(unsigned int, char const*, ...)>
 8001226:	e7d3      	b.n	80011d0 <PixelDmxParamsRdm::Display(unsigned char const*)+0x18>
 8001228:	2200      	movs	r2, #0
 800122a:	701a      	strb	r2, [r3, #0]
 800122c:	682b      	ldr	r3, [r5, #0]
 800122e:	6998      	ldr	r0, [r3, #24]
 8001230:	2108      	movs	r1, #8
 8001232:	b006      	add	sp, #24
 8001234:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001238:	f7ff bf7e 	b.w	8001138 <Display::ClearLine(unsigned int) [clone .isra.0]>
 800123c:	20000638 	andcs	r0, r0, r8, lsr r6
 8001240:	0800a0d2 	stmdaeq	r0, {r1, r4, r6, r7, sp, pc}
 8001244:	20000080 	andcs	r0, r0, r0, lsl #1
 8001248:	0800a0e7 	stmdaeq	r0, {r0, r1, r2, r5, r6, r7, sp, pc}
 800124c:	0800a0cc 	stmdaeq	r0, {r2, r3, r6, r7, sp, pc}

08001250 <RDMResponder::DmxStartAddressUpdate(unsigned short)>:
 8001250:	4b01      	ldr	r3, [pc, #4]	; (8001258 <RDMResponder::DmxStartAddressUpdate(unsigned short)+0x8>)
 8001252:	6818      	ldr	r0, [r3, #0]
 8001254:	f005 bdda 	b.w	8006e0c <DisplayUdf::Show()>
 8001258:	20000638 	andcs	r0, r0, r8, lsr r6

0800125c <rdm::device::responder::factorydefaults()>:
 800125c:	4b02      	ldr	r3, [pc, #8]	; (8001268 <rdm::device::responder::factorydefaults()+0xc>)
 800125e:	210b      	movs	r1, #11
 8001260:	6818      	ldr	r0, [r3, #0]
 8001262:	f005 bf37 	b.w	80070d4 <ConfigStore::ResetSetList(configstore::Store)>
 8001266:	bf00      	nop
 8001268:	20001650 	andcs	r1, r0, r0, asr r6

0800126c <Display::ClearLine(unsigned int) [clone .isra.0]>:
 800126c:	b110      	cbz	r0, 8001274 <Display::ClearLine(unsigned int) [clone .isra.0]+0x8>
 800126e:	6803      	ldr	r3, [r0, #0]
 8001270:	691b      	ldr	r3, [r3, #16]
 8001272:	4718      	bx	r3
 8001274:	4770      	bx	lr
	...

08001278 <RDMResponder::PersonalityUpdate(unsigned int)>:
 8001278:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800127c:	4c30      	ldr	r4, [pc, #192]	; (8001340 <RDMResponder::PersonalityUpdate(unsigned int)+0xc8>)
 800127e:	4e31      	ldr	r6, [pc, #196]	; (8001344 <RDMResponder::PersonalityUpdate(unsigned int)+0xcc>)
 8001280:	6823      	ldr	r3, [r4, #0]
 8001282:	b086      	sub	sp, #24
 8001284:	6998      	ldr	r0, [r3, #24]
 8001286:	460d      	mov	r5, r1
 8001288:	2107      	movs	r1, #7
 800128a:	f7ff ffef 	bl	800126c <Display::ClearLine(unsigned int) [clone .isra.0]>
 800128e:	6833      	ldr	r3, [r6, #0]
 8001290:	6827      	ldr	r7, [r4, #0]
 8001292:	6858      	ldr	r0, [r3, #4]
 8001294:	f004 fbd0 	bl	8005a38 <PixelType::GetType(pixel::Type)>
 8001298:	6832      	ldr	r2, [r6, #0]
 800129a:	9005      	str	r0, [sp, #20]
 800129c:	68d0      	ldr	r0, [r2, #12]
 800129e:	6896      	ldr	r6, [r2, #8]
 80012a0:	f8d2 8024 	ldr.w	r8, [r2, #36]	; 0x24
 80012a4:	f004 fbd4 	bl	8005a50 <PixelType::GetMap(pixel::Map)>
 80012a8:	9b05      	ldr	r3, [sp, #20]
 80012aa:	4a27      	ldr	r2, [pc, #156]	; (8001348 <RDMResponder::PersonalityUpdate(unsigned int)+0xd0>)
 80012ac:	9600      	str	r6, [sp, #0]
 80012ae:	e9cd 8001 	strd	r8, r0, [sp, #4]
 80012b2:	2107      	movs	r1, #7
 80012b4:	4638      	mov	r0, r7
 80012b6:	f7ff fc3a 	bl	8000b2e <Display::Printf(unsigned int, char const*, ...)>
 80012ba:	6820      	ldr	r0, [r4, #0]
 80012bc:	f005 fda6 	bl	8006e0c <DisplayUdf::Show()>
 80012c0:	2d01      	cmp	r5, #1
 80012c2:	d115      	bne.n	80012f0 <RDMResponder::PersonalityUpdate(unsigned int)+0x78>
 80012c4:	4b21      	ldr	r3, [pc, #132]	; (800134c <RDMResponder::PersonalityUpdate(unsigned int)+0xd4>)
 80012c6:	681d      	ldr	r5, [r3, #0]
 80012c8:	b17d      	cbz	r5, 80012ea <RDMResponder::PersonalityUpdate(unsigned int)+0x72>
 80012ca:	6823      	ldr	r3, [r4, #0]
 80012cc:	2106      	movs	r1, #6
 80012ce:	6998      	ldr	r0, [r3, #24]
 80012d0:	f7ff ffcc 	bl	800126c <Display::ClearLine(unsigned int) [clone .isra.0]>
 80012d4:	4628      	mov	r0, r5
 80012d6:	6824      	ldr	r4, [r4, #0]
 80012d8:	f004 fc54 	bl	8005b84 <PixelPatterns::GetName(pixelpatterns::Pattern)>
 80012dc:	4a1c      	ldr	r2, [pc, #112]	; (8001350 <RDMResponder::PersonalityUpdate(unsigned int)+0xd8>)
 80012de:	9500      	str	r5, [sp, #0]
 80012e0:	4603      	mov	r3, r0
 80012e2:	2106      	movs	r1, #6
 80012e4:	4620      	mov	r0, r4
 80012e6:	f7ff fc22 	bl	8000b2e <Display::Printf(unsigned int, char const*, ...)>
 80012ea:	b006      	add	sp, #24
 80012ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80012f0:	2d02      	cmp	r5, #2
 80012f2:	d1fa      	bne.n	80012ea <RDMResponder::PersonalityUpdate(unsigned int)+0x72>
 80012f4:	6823      	ldr	r3, [r4, #0]
 80012f6:	2103      	movs	r1, #3
 80012f8:	6998      	ldr	r0, [r3, #24]
 80012fa:	f7ff ffb7 	bl	800126c <Display::ClearLine(unsigned int) [clone .isra.0]>
 80012fe:	6823      	ldr	r3, [r4, #0]
 8001300:	2104      	movs	r1, #4
 8001302:	6998      	ldr	r0, [r3, #24]
 8001304:	f7ff ffb2 	bl	800126c <Display::ClearLine(unsigned int) [clone .isra.0]>
 8001308:	6823      	ldr	r3, [r4, #0]
 800130a:	6998      	ldr	r0, [r3, #24]
 800130c:	b178      	cbz	r0, 800132e <RDMResponder::PersonalityUpdate(unsigned int)+0xb6>
 800130e:	6845      	ldr	r5, [r0, #4]
 8001310:	4910      	ldr	r1, [pc, #64]	; (8001354 <RDMResponder::PersonalityUpdate(unsigned int)+0xdc>)
 8001312:	2300      	movs	r3, #0
 8001314:	42ab      	cmp	r3, r5
 8001316:	f103 0301 	add.w	r3, r3, #1
 800131a:	d203      	bcs.n	8001324 <RDMResponder::PersonalityUpdate(unsigned int)+0xac>
 800131c:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8001320:	2a00      	cmp	r2, #0
 8001322:	d1f7      	bne.n	8001314 <RDMResponder::PersonalityUpdate(unsigned int)+0x9c>
 8001324:	6802      	ldr	r2, [r0, #0]
 8001326:	2104      	movs	r1, #4
 8001328:	69d5      	ldr	r5, [r2, #28]
 800132a:	4a0a      	ldr	r2, [pc, #40]	; (8001354 <RDMResponder::PersonalityUpdate(unsigned int)+0xdc>)
 800132c:	47a8      	blx	r5
 800132e:	6823      	ldr	r3, [r4, #0]
 8001330:	6998      	ldr	r0, [r3, #24]
 8001332:	2105      	movs	r1, #5
 8001334:	b006      	add	sp, #24
 8001336:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800133a:	f7ff bf97 	b.w	800126c <Display::ClearLine(unsigned int) [clone .isra.0]>
 800133e:	bf00      	nop
 8001340:	20000638 	andcs	r0, r0, r8, lsr r6
 8001344:	200005e8 	andcs	r0, r0, r8, ror #11
 8001348:	08009f83 	stmdaeq	r0, {r0, r1, r7, r8, r9, sl, fp, ip, pc}
 800134c:	20000628 	andcs	r0, r0, r8, lsr #12
 8001350:	08009f90 	stmdaeq	r0, {r4, r7, r8, r9, sl, fp, ip, pc}
 8001354:	08009ef2 	stmdaeq	r0, {r1, r4, r5, r6, r7, r9, sl, fp, ip, pc}

08001358 <PixelTestPattern::SetPattern(pixelpatterns::Pattern)>:
 8001358:	b5f0      	push	{r4, r5, r6, r7, lr}
 800135a:	2905      	cmp	r1, #5
 800135c:	b085      	sub	sp, #20
 800135e:	dc57      	bgt.n	8001410 <PixelTestPattern::SetPattern(pixelpatterns::Pattern)+0xb8>
 8001360:	4b2d      	ldr	r3, [pc, #180]	; (8001418 <PixelTestPattern::SetPattern(pixelpatterns::Pattern)+0xc0>)
 8001362:	6019      	str	r1, [r3, #0]
 8001364:	2905      	cmp	r1, #5
 8001366:	d809      	bhi.n	800137c <PixelTestPattern::SetPattern(pixelpatterns::Pattern)+0x24>
 8001368:	e8df f001 	tbb	[pc, r1]
 800136c:	130a032c 	movwne	r0, #41772	; 0xa32c
 8001370:	2300211a 	movwcs	r2, #282	; 0x11a
 8001374:	2264      	movs	r2, #100	; 0x64
 8001376:	4619      	mov	r1, r3
 8001378:	f004 fc10 	bl	8005b9c <PixelPatterns::RainbowCycle(unsigned int, unsigned int, pixelpatterns::Direction)>
 800137c:	2001      	movs	r0, #1
 800137e:	e048      	b.n	8001412 <PixelTestPattern::SetPattern(pixelpatterns::Pattern)+0xba>
 8001380:	2200      	movs	r2, #0
 8001382:	2364      	movs	r3, #100	; 0x64
 8001384:	e9cd 3200 	strd	r3, r2, [sp]
 8001388:	4611      	mov	r1, r2
 800138a:	4b24      	ldr	r3, [pc, #144]	; (800141c <PixelTestPattern::SetPattern(pixelpatterns::Pattern)+0xc4>)
 800138c:	f004 fc1a 	bl	8005bc4 <PixelPatterns::TheaterChase(unsigned int, unsigned int, unsigned int, unsigned int, pixelpatterns::Direction)>
 8001390:	e7f4      	b.n	800137c <PixelTestPattern::SetPattern(pixelpatterns::Pattern)+0x24>
 8001392:	2100      	movs	r1, #0
 8001394:	4a21      	ldr	r2, [pc, #132]	; (800141c <PixelTestPattern::SetPattern(pixelpatterns::Pattern)+0xc4>)
 8001396:	9100      	str	r1, [sp, #0]
 8001398:	2364      	movs	r3, #100	; 0x64
 800139a:	f004 fc2f 	bl	8005bfc <PixelPatterns::ColourWipe(unsigned int, unsigned int, unsigned int, pixelpatterns::Direction)>
 800139e:	e7ed      	b.n	800137c <PixelTestPattern::SetPattern(pixelpatterns::Pattern)+0x24>
 80013a0:	2364      	movs	r3, #100	; 0x64
 80013a2:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 80013a6:	2100      	movs	r1, #0
 80013a8:	f004 fc42 	bl	8005c30 <PixelPatterns::Scanner(unsigned int, unsigned int, unsigned int)>
 80013ac:	e7e6      	b.n	800137c <PixelTestPattern::SetPattern(pixelpatterns::Pattern)+0x24>
 80013ae:	2200      	movs	r2, #0
 80013b0:	2364      	movs	r3, #100	; 0x64
 80013b2:	e9cd 3201 	strd	r3, r2, [sp, #4]
 80013b6:	230a      	movs	r3, #10
 80013b8:	9300      	str	r3, [sp, #0]
 80013ba:	4611      	mov	r1, r2
 80013bc:	4b17      	ldr	r3, [pc, #92]	; (800141c <PixelTestPattern::SetPattern(pixelpatterns::Pattern)+0xc4>)
 80013be:	f004 fc69 	bl	8005c94 <PixelPatterns::Fade(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, pixelpatterns::Direction)>
 80013c2:	e7db      	b.n	800137c <PixelTestPattern::SetPattern(pixelpatterns::Pattern)+0x24>
 80013c4:	4b16      	ldr	r3, [pc, #88]	; (8001420 <PixelTestPattern::SetPattern(pixelpatterns::Pattern)+0xc8>)
 80013c6:	4e17      	ldr	r6, [pc, #92]	; (8001424 <PixelTestPattern::SetPattern(pixelpatterns::Pattern)+0xcc>)
 80013c8:	4f17      	ldr	r7, [pc, #92]	; (8001428 <PixelTestPattern::SetPattern(pixelpatterns::Pattern)+0xd0>)
 80013ca:	2400      	movs	r4, #0
 80013cc:	61dc      	str	r4, [r3, #28]
 80013ce:	4625      	mov	r5, r4
 80013d0:	6833      	ldr	r3, [r6, #0]
 80013d2:	429c      	cmp	r4, r3
 80013d4:	d308      	bcc.n	80013e8 <PixelTestPattern::SetPattern(pixelpatterns::Pattern)+0x90>
 80013d6:	f008 fa3f 	bl	8009858 <gd32_spi_dma_tx_is_active()>
 80013da:	2800      	cmp	r0, #0
 80013dc:	d1fb      	bne.n	80013d6 <PixelTestPattern::SetPattern(pixelpatterns::Pattern)+0x7e>
 80013de:	4b12      	ldr	r3, [pc, #72]	; (8001428 <PixelTestPattern::SetPattern(pixelpatterns::Pattern)+0xd0>)
 80013e0:	6818      	ldr	r0, [r3, #0]
 80013e2:	f005 fbff 	bl	8006be4 <WS28xx::Update()>
 80013e6:	e7c9      	b.n	800137c <PixelTestPattern::SetPattern(pixelpatterns::Pattern)+0x24>
 80013e8:	6838      	ldr	r0, [r7, #0]
 80013ea:	6803      	ldr	r3, [r0, #0]
 80013ec:	2b07      	cmp	r3, #7
 80013ee:	d007      	beq.n	8001400 <PixelTestPattern::SetPattern(pixelpatterns::Pattern)+0xa8>
 80013f0:	2300      	movs	r3, #0
 80013f2:	9500      	str	r5, [sp, #0]
 80013f4:	461a      	mov	r2, r3
 80013f6:	4621      	mov	r1, r4
 80013f8:	f004 fe0c 	bl	8006014 <WS28xx::SetPixel(unsigned int, unsigned char, unsigned char, unsigned char)>
 80013fc:	3401      	adds	r4, #1
 80013fe:	e7e7      	b.n	80013d0 <PixelTestPattern::SetPattern(pixelpatterns::Pattern)+0x78>
 8001400:	2300      	movs	r3, #0
 8001402:	e9cd 5500 	strd	r5, r5, [sp]
 8001406:	461a      	mov	r2, r3
 8001408:	4621      	mov	r1, r4
 800140a:	f005 fa7d 	bl	8006908 <WS28xx::SetPixel(unsigned int, unsigned char, unsigned char, unsigned char, unsigned char)>
 800140e:	e7f5      	b.n	80013fc <PixelTestPattern::SetPattern(pixelpatterns::Pattern)+0xa4>
 8001410:	2000      	movs	r0, #0
 8001412:	b005      	add	sp, #20
 8001414:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001416:	bf00      	nop
 8001418:	20000628 	andcs	r0, r0, r8, lsr #12
 800141c:	00646464 	rsbeq	r6, r4, r4, ror #8
 8001420:	200005f4 	strdcs	r0, [r0], -r4
 8001424:	2000061c 	andcs	r0, r0, ip, lsl r6
 8001428:	20000620 	andcs	r0, r0, r0, lsr #12

0800142c <rdm::selftest::Get()>:
 800142c:	4b01      	ldr	r3, [pc, #4]	; (8001434 <rdm::selftest::Get()+0x8>)
 800142e:	7818      	ldrb	r0, [r3, #0]
 8001430:	4770      	bx	lr
 8001432:	bf00      	nop
 8001434:	20000628 	andcs	r0, r0, r8, lsr #12

08001438 <rdm::selftest::Set(unsigned char)>:
 8001438:	4b14      	ldr	r3, [pc, #80]	; (800148c <rdm::selftest::Set(unsigned char)+0x54>)
 800143a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800143c:	4601      	mov	r1, r0
 800143e:	4604      	mov	r4, r0
 8001440:	6818      	ldr	r0, [r3, #0]
 8001442:	f7ff ff89 	bl	8001358 <PixelTestPattern::SetPattern(pixelpatterns::Pattern)>
 8001446:	4605      	mov	r5, r0
 8001448:	b1b0      	cbz	r0, 8001478 <rdm::selftest::Set(unsigned char)+0x40>
 800144a:	4b11      	ldr	r3, [pc, #68]	; (8001490 <rdm::selftest::Set(unsigned char)+0x58>)
 800144c:	b1bc      	cbz	r4, 800147e <rdm::selftest::Set(unsigned char)+0x46>
 800144e:	4e11      	ldr	r6, [pc, #68]	; (8001494 <rdm::selftest::Set(unsigned char)+0x5c>)
 8001450:	2201      	movs	r2, #1
 8001452:	701a      	strb	r2, [r3, #0]
 8001454:	6833      	ldr	r3, [r6, #0]
 8001456:	6998      	ldr	r0, [r3, #24]
 8001458:	b118      	cbz	r0, 8001462 <rdm::selftest::Set(unsigned char)+0x2a>
 800145a:	6803      	ldr	r3, [r0, #0]
 800145c:	2106      	movs	r1, #6
 800145e:	691b      	ldr	r3, [r3, #16]
 8001460:	4798      	blx	r3
 8001462:	4620      	mov	r0, r4
 8001464:	6836      	ldr	r6, [r6, #0]
 8001466:	f004 fb8d 	bl	8005b84 <PixelPatterns::GetName(pixelpatterns::Pattern)>
 800146a:	4a0b      	ldr	r2, [pc, #44]	; (8001498 <rdm::selftest::Set(unsigned char)+0x60>)
 800146c:	9400      	str	r4, [sp, #0]
 800146e:	4603      	mov	r3, r0
 8001470:	2106      	movs	r1, #6
 8001472:	4630      	mov	r0, r6
 8001474:	f7ff fb5b 	bl	8000b2e <Display::Printf(unsigned int, char const*, ...)>
 8001478:	4628      	mov	r0, r5
 800147a:	b002      	add	sp, #8
 800147c:	bd70      	pop	{r4, r5, r6, pc}
 800147e:	701c      	strb	r4, [r3, #0]
 8001480:	4b06      	ldr	r3, [pc, #24]	; (800149c <rdm::selftest::Set(unsigned char)+0x64>)
 8001482:	6818      	ldr	r0, [r3, #0]
 8001484:	f005 fcc2 	bl	8006e0c <DisplayUdf::Show()>
 8001488:	e7f6      	b.n	8001478 <rdm::selftest::Set(unsigned char)+0x40>
 800148a:	bf00      	nop
 800148c:	20000624 	andcs	r0, r0, r4, lsr #12
 8001490:	200001a4 	andcs	r0, r0, r4, lsr #3
 8001494:	20001684 	andcs	r1, r0, r4, lsl #13
 8001498:	08009f90 	stmdaeq	r0, {r4, r7, r8, r9, sl, fp, ip, pc}
 800149c:	20000638 	andcs	r0, r0, r8, lsr r6

080014a0 <rdm::selftest::GetDescription(unsigned char, unsigned int&)>:
 80014a0:	b510      	push	{r4, lr}
 80014a2:	460c      	mov	r4, r1
 80014a4:	f004 fb6e 	bl	8005b84 <PixelPatterns::GetName(pixelpatterns::Pattern)>
 80014a8:	b140      	cbz	r0, 80014bc <rdm::selftest::GetDescription(unsigned char, unsigned int&)+0x1c>
 80014aa:	4602      	mov	r2, r0
 80014ac:	4613      	mov	r3, r2
 80014ae:	3201      	adds	r2, #1
 80014b0:	7819      	ldrb	r1, [r3, #0]
 80014b2:	2900      	cmp	r1, #0
 80014b4:	d1fa      	bne.n	80014ac <rdm::selftest::GetDescription(unsigned char, unsigned int&)+0xc>
 80014b6:	1a1b      	subs	r3, r3, r0
 80014b8:	6023      	str	r3, [r4, #0]
 80014ba:	bd10      	pop	{r4, pc}
 80014bc:	4603      	mov	r3, r0
 80014be:	e7fb      	b.n	80014b8 <rdm::selftest::GetDescription(unsigned char, unsigned int&)+0x18>

080014c0 <PixelTestPattern::SetPattern(pixelpatterns::Pattern) [clone .isra.0]>:
 80014c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80014c2:	2905      	cmp	r1, #5
 80014c4:	b085      	sub	sp, #20
 80014c6:	dc18      	bgt.n	80014fa <PixelTestPattern::SetPattern(pixelpatterns::Pattern) [clone .isra.0]+0x3a>
 80014c8:	4b2e      	ldr	r3, [pc, #184]	; (8001584 <PixelTestPattern::SetPattern(pixelpatterns::Pattern) [clone .isra.0]+0xc4>)
 80014ca:	6019      	str	r1, [r3, #0]
 80014cc:	2905      	cmp	r1, #5
 80014ce:	d814      	bhi.n	80014fa <PixelTestPattern::SetPattern(pixelpatterns::Pattern) [clone .isra.0]+0x3a>
 80014d0:	e8df f001 	tbb	[pc, r1]
 80014d4:	150b0330 	strne	r0, [fp, #-816]	; 0xfffffcd0
 80014d8:	2300251c 	movwcs	r2, #1308	; 0x51c
 80014dc:	2264      	movs	r2, #100	; 0x64
 80014de:	4619      	mov	r1, r3
 80014e0:	b005      	add	sp, #20
 80014e2:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 80014e6:	f004 bb59 	b.w	8005b9c <PixelPatterns::RainbowCycle(unsigned int, unsigned int, pixelpatterns::Direction)>
 80014ea:	2364      	movs	r3, #100	; 0x64
 80014ec:	2200      	movs	r2, #0
 80014ee:	e9cd 3200 	strd	r3, r2, [sp]
 80014f2:	4611      	mov	r1, r2
 80014f4:	4b24      	ldr	r3, [pc, #144]	; (8001588 <PixelTestPattern::SetPattern(pixelpatterns::Pattern) [clone .isra.0]+0xc8>)
 80014f6:	f004 fb65 	bl	8005bc4 <PixelPatterns::TheaterChase(unsigned int, unsigned int, unsigned int, unsigned int, pixelpatterns::Direction)>
 80014fa:	b005      	add	sp, #20
 80014fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80014fe:	2100      	movs	r1, #0
 8001500:	4a21      	ldr	r2, [pc, #132]	; (8001588 <PixelTestPattern::SetPattern(pixelpatterns::Pattern) [clone .isra.0]+0xc8>)
 8001502:	9100      	str	r1, [sp, #0]
 8001504:	2364      	movs	r3, #100	; 0x64
 8001506:	f004 fb79 	bl	8005bfc <PixelPatterns::ColourWipe(unsigned int, unsigned int, unsigned int, pixelpatterns::Direction)>
 800150a:	e7f6      	b.n	80014fa <PixelTestPattern::SetPattern(pixelpatterns::Pattern) [clone .isra.0]+0x3a>
 800150c:	2364      	movs	r3, #100	; 0x64
 800150e:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 8001512:	2100      	movs	r1, #0
 8001514:	b005      	add	sp, #20
 8001516:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800151a:	f004 bb89 	b.w	8005c30 <PixelPatterns::Scanner(unsigned int, unsigned int, unsigned int)>
 800151e:	2200      	movs	r2, #0
 8001520:	2364      	movs	r3, #100	; 0x64
 8001522:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8001526:	230a      	movs	r3, #10
 8001528:	9300      	str	r3, [sp, #0]
 800152a:	4611      	mov	r1, r2
 800152c:	4b16      	ldr	r3, [pc, #88]	; (8001588 <PixelTestPattern::SetPattern(pixelpatterns::Pattern) [clone .isra.0]+0xc8>)
 800152e:	f004 fbb1 	bl	8005c94 <PixelPatterns::Fade(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, pixelpatterns::Direction)>
 8001532:	e7e2      	b.n	80014fa <PixelTestPattern::SetPattern(pixelpatterns::Pattern) [clone .isra.0]+0x3a>
 8001534:	4b15      	ldr	r3, [pc, #84]	; (800158c <PixelTestPattern::SetPattern(pixelpatterns::Pattern) [clone .isra.0]+0xcc>)
 8001536:	4e16      	ldr	r6, [pc, #88]	; (8001590 <PixelTestPattern::SetPattern(pixelpatterns::Pattern) [clone .isra.0]+0xd0>)
 8001538:	4f16      	ldr	r7, [pc, #88]	; (8001594 <PixelTestPattern::SetPattern(pixelpatterns::Pattern) [clone .isra.0]+0xd4>)
 800153a:	2400      	movs	r4, #0
 800153c:	61dc      	str	r4, [r3, #28]
 800153e:	4625      	mov	r5, r4
 8001540:	6833      	ldr	r3, [r6, #0]
 8001542:	429c      	cmp	r4, r3
 8001544:	d30a      	bcc.n	800155c <PixelTestPattern::SetPattern(pixelpatterns::Pattern) [clone .isra.0]+0x9c>
 8001546:	f008 f987 	bl	8009858 <gd32_spi_dma_tx_is_active()>
 800154a:	2800      	cmp	r0, #0
 800154c:	d1fb      	bne.n	8001546 <PixelTestPattern::SetPattern(pixelpatterns::Pattern) [clone .isra.0]+0x86>
 800154e:	4b11      	ldr	r3, [pc, #68]	; (8001594 <PixelTestPattern::SetPattern(pixelpatterns::Pattern) [clone .isra.0]+0xd4>)
 8001550:	6818      	ldr	r0, [r3, #0]
 8001552:	b005      	add	sp, #20
 8001554:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8001558:	f005 bb44 	b.w	8006be4 <WS28xx::Update()>
 800155c:	6838      	ldr	r0, [r7, #0]
 800155e:	6803      	ldr	r3, [r0, #0]
 8001560:	2b07      	cmp	r3, #7
 8001562:	d007      	beq.n	8001574 <PixelTestPattern::SetPattern(pixelpatterns::Pattern) [clone .isra.0]+0xb4>
 8001564:	2300      	movs	r3, #0
 8001566:	9500      	str	r5, [sp, #0]
 8001568:	461a      	mov	r2, r3
 800156a:	4621      	mov	r1, r4
 800156c:	f004 fd52 	bl	8006014 <WS28xx::SetPixel(unsigned int, unsigned char, unsigned char, unsigned char)>
 8001570:	3401      	adds	r4, #1
 8001572:	e7e5      	b.n	8001540 <PixelTestPattern::SetPattern(pixelpatterns::Pattern) [clone .isra.0]+0x80>
 8001574:	2300      	movs	r3, #0
 8001576:	e9cd 5500 	strd	r5, r5, [sp]
 800157a:	461a      	mov	r2, r3
 800157c:	4621      	mov	r1, r4
 800157e:	f005 f9c3 	bl	8006908 <WS28xx::SetPixel(unsigned int, unsigned char, unsigned char, unsigned char, unsigned char)>
 8001582:	e7f5      	b.n	8001570 <PixelTestPattern::SetPattern(pixelpatterns::Pattern) [clone .isra.0]+0xb0>
 8001584:	20000628 	andcs	r0, r0, r8, lsr #12
 8001588:	00646464 	rsbeq	r6, r4, r4, ror #8
 800158c:	200005f4 	strdcs	r0, [r0], -r4
 8001590:	2000061c 	andcs	r0, r0, ip, lsl r6
 8001594:	20000620 	andcs	r0, r0, r0, lsr #12

08001598 <RDMIdentify::On(rdm::identify::Mode)>:
 8001598:	29ff      	cmp	r1, #255	; 0xff
 800159a:	b510      	push	{r4, lr}
 800159c:	d10f      	bne.n	80015be <RDMIdentify::On(rdm::identify::Mode)+0x26>
 800159e:	4b08      	ldr	r3, [pc, #32]	; (80015c0 <RDMIdentify::On(rdm::identify::Mode)+0x28>)
 80015a0:	781a      	ldrb	r2, [r3, #0]
 80015a2:	b962      	cbnz	r2, 80015be <RDMIdentify::On(rdm::identify::Mode)+0x26>
 80015a4:	2401      	movs	r4, #1
 80015a6:	701c      	strb	r4, [r3, #0]
 80015a8:	4b06      	ldr	r3, [pc, #24]	; (80015c4 <RDMIdentify::On(rdm::identify::Mode)+0x2c>)
 80015aa:	681a      	ldr	r2, [r3, #0]
 80015ac:	4b06      	ldr	r3, [pc, #24]	; (80015c8 <RDMIdentify::On(rdm::identify::Mode)+0x30>)
 80015ae:	601a      	str	r2, [r3, #0]
 80015b0:	4b06      	ldr	r3, [pc, #24]	; (80015cc <RDMIdentify::On(rdm::identify::Mode)+0x34>)
 80015b2:	2105      	movs	r1, #5
 80015b4:	6818      	ldr	r0, [r3, #0]
 80015b6:	f7ff ff83 	bl	80014c0 <PixelTestPattern::SetPattern(pixelpatterns::Pattern) [clone .isra.0]>
 80015ba:	4b05      	ldr	r3, [pc, #20]	; (80015d0 <RDMIdentify::On(rdm::identify::Mode)+0x38>)
 80015bc:	701c      	strb	r4, [r3, #0]
 80015be:	bd10      	pop	{r4, pc}
 80015c0:	20000081 	andcs	r0, r0, r1, lsl #1
 80015c4:	20000628 	andcs	r0, r0, r8, lsr #12
 80015c8:	20000084 	andcs	r0, r0, r4, lsl #1
 80015cc:	20000624 	andcs	r0, r0, r4, lsr #12
 80015d0:	200001a4 	andcs	r0, r0, r4, lsr #3

080015d4 <RDMIdentify::Off(rdm::identify::Mode)>:
 80015d4:	4b09      	ldr	r3, [pc, #36]	; (80015fc <RDMIdentify::Off(rdm::identify::Mode)+0x28>)
 80015d6:	781a      	ldrb	r2, [r3, #0]
 80015d8:	b510      	push	{r4, lr}
 80015da:	b16a      	cbz	r2, 80015f8 <RDMIdentify::Off(rdm::identify::Mode)+0x24>
 80015dc:	2200      	movs	r2, #0
 80015de:	701a      	strb	r2, [r3, #0]
 80015e0:	4c07      	ldr	r4, [pc, #28]	; (8001600 <RDMIdentify::Off(rdm::identify::Mode)+0x2c>)
 80015e2:	4b08      	ldr	r3, [pc, #32]	; (8001604 <RDMIdentify::Off(rdm::identify::Mode)+0x30>)
 80015e4:	6821      	ldr	r1, [r4, #0]
 80015e6:	6818      	ldr	r0, [r3, #0]
 80015e8:	f7ff ff6a 	bl	80014c0 <PixelTestPattern::SetPattern(pixelpatterns::Pattern) [clone .isra.0]>
 80015ec:	6823      	ldr	r3, [r4, #0]
 80015ee:	4a06      	ldr	r2, [pc, #24]	; (8001608 <RDMIdentify::Off(rdm::identify::Mode)+0x34>)
 80015f0:	3b00      	subs	r3, #0
 80015f2:	bf18      	it	ne
 80015f4:	2301      	movne	r3, #1
 80015f6:	7013      	strb	r3, [r2, #0]
 80015f8:	bd10      	pop	{r4, pc}
 80015fa:	bf00      	nop
 80015fc:	20000081 	andcs	r0, r0, r1, lsl #1
 8001600:	20000084 	andcs	r0, r0, r4, lsl #1
 8001604:	20000624 	andcs	r0, r0, r4, lsr #12
 8001608:	200001a4 	andcs	r0, r0, r4, lsr #3

0800160c <RDMSlotInfo::GetCategoryTextUndefined(unsigned short, unsigned int&)>:
 800160c:	2805      	cmp	r0, #5
 800160e:	d814      	bhi.n	800163a <RDMSlotInfo::GetCategoryTextUndefined(unsigned short, unsigned int&)+0x2e>
 8001610:	e8df f000 	tbb	[pc, r0]
 8001614:	0a071603 	beq	81c6e28 <__exidx_end+0x1baebc>
 8001618:	480b100d 	stmdami	fp, {r0, r2, r3, ip}
 800161c:	2304      	movs	r3, #4
 800161e:	600b      	str	r3, [r1, #0]
 8001620:	4770      	bx	lr
 8001622:	480a      	ldr	r0, [pc, #40]	; (800164c <RDMSlotInfo::GetCategoryTextUndefined(unsigned short, unsigned int&)+0x40>)
 8001624:	230e      	movs	r3, #14
 8001626:	e7fa      	b.n	800161e <RDMSlotInfo::GetCategoryTextUndefined(unsigned short, unsigned int&)+0x12>
 8001628:	4809      	ldr	r0, [pc, #36]	; (8001650 <RDMSlotInfo::GetCategoryTextUndefined(unsigned short, unsigned int&)+0x44>)
 800162a:	2303      	movs	r3, #3
 800162c:	e7f7      	b.n	800161e <RDMSlotInfo::GetCategoryTextUndefined(unsigned short, unsigned int&)+0x12>
 800162e:	4809      	ldr	r0, [pc, #36]	; (8001654 <RDMSlotInfo::GetCategoryTextUndefined(unsigned short, unsigned int&)+0x48>)
 8001630:	230c      	movs	r3, #12
 8001632:	e7f4      	b.n	800161e <RDMSlotInfo::GetCategoryTextUndefined(unsigned short, unsigned int&)+0x12>
 8001634:	4808      	ldr	r0, [pc, #32]	; (8001658 <RDMSlotInfo::GetCategoryTextUndefined(unsigned short, unsigned int&)+0x4c>)
 8001636:	2307      	movs	r3, #7
 8001638:	e7f1      	b.n	800161e <RDMSlotInfo::GetCategoryTextUndefined(unsigned short, unsigned int&)+0x12>
 800163a:	4808      	ldr	r0, [pc, #32]	; (800165c <RDMSlotInfo::GetCategoryTextUndefined(unsigned short, unsigned int&)+0x50>)
 800163c:	2309      	movs	r3, #9
 800163e:	e7ee      	b.n	800161e <RDMSlotInfo::GetCategoryTextUndefined(unsigned short, unsigned int&)+0x12>
 8001640:	4807      	ldr	r0, [pc, #28]	; (8001660 <RDMSlotInfo::GetCategoryTextUndefined(unsigned short, unsigned int&)+0x54>)
 8001642:	2305      	movs	r3, #5
 8001644:	e7eb      	b.n	800161e <RDMSlotInfo::GetCategoryTextUndefined(unsigned short, unsigned int&)+0x12>
 8001646:	bf00      	nop
 8001648:	0800a0f2 	stmdaeq	r0, {r1, r4, r5, r6, r7, sp, pc}
 800164c:	0800a0f7 	stmdaeq	r0, {r0, r1, r2, r4, r5, r6, r7, sp, pc}
 8001650:	0800a106 	stmdaeq	r0, {r1, r2, r8, sp, pc}
 8001654:	0800a10a 	stmdaeq	r0, {r1, r3, r8, sp, pc}
 8001658:	0800a117 	stmdaeq	r0, {r0, r1, r2, r4, r8, sp, pc}
 800165c:	0800a11f 	stmdaeq	r0, {r0, r1, r2, r3, r4, r8, sp, pc}
 8001660:	0800a100 	stmdaeq	r0, {r8, sp, pc}

08001664 <RDMSoftwareVersion::GetVersion()>:
 8001664:	4800      	ldr	r0, [pc, #0]	; (8001668 <RDMSoftwareVersion::GetVersion()+0x4>)
 8001666:	4770      	bx	lr
 8001668:	0800a129 	stmdaeq	r0, {r0, r3, r5, r8, sp, pc}

0800166c <RDMSoftwareVersion::GetVersionLength()>:
 800166c:	2003      	movs	r0, #3
 800166e:	4770      	bx	lr

08001670 <RDMSoftwareVersion::GetVersionId()>:
 8001670:	4800      	ldr	r0, [pc, #0]	; (8001674 <RDMSoftwareVersion::GetVersionId()+0x4>)
 8001672:	4770      	bx	lr
 8001674:	64172279 	ldrvs	r2, [r7], #-633	; 0xfffffd87

08001678 <_itostr>:
 8001678:	b5f0      	push	{r4, r5, r6, r7, lr}
 800167a:	0fc7      	lsrs	r7, r0, #31
 800167c:	b091      	sub	sp, #68	; 0x44
 800167e:	bf18      	it	ne
 8001680:	4240      	negne	r0, r0
 8001682:	f10d 043f 	add.w	r4, sp, #63	; 0x3f
 8001686:	b9c8      	cbnz	r0, 80016bc <_itostr+0x44>
 8001688:	2330      	movs	r3, #48	; 0x30
 800168a:	f88d 303f 	strb.w	r3, [sp, #63]	; 0x3f
 800168e:	f10d 033e 	add.w	r3, sp, #62	; 0x3e
 8001692:	b132      	cbz	r2, 80016a2 <_itostr+0x2a>
 8001694:	4668      	mov	r0, sp
 8001696:	2530      	movs	r5, #48	; 0x30
 8001698:	1ae6      	subs	r6, r4, r3
 800169a:	4296      	cmp	r6, r2
 800169c:	da01      	bge.n	80016a2 <_itostr+0x2a>
 800169e:	4283      	cmp	r3, r0
 80016a0:	d81c      	bhi.n	80016dc <_itostr+0x64>
 80016a2:	b117      	cbz	r7, 80016aa <_itostr+0x32>
 80016a4:	222d      	movs	r2, #45	; 0x2d
 80016a6:	f803 2901 	strb.w	r2, [r3], #-1
 80016aa:	3301      	adds	r3, #1
 80016ac:	1ae0      	subs	r0, r4, r3
 80016ae:	3901      	subs	r1, #1
 80016b0:	aa10      	add	r2, sp, #64	; 0x40
 80016b2:	4293      	cmp	r3, r2
 80016b4:	d315      	bcc.n	80016e2 <_itostr+0x6a>
 80016b6:	3001      	adds	r0, #1
 80016b8:	b011      	add	sp, #68	; 0x44
 80016ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80016bc:	4623      	mov	r3, r4
 80016be:	250a      	movs	r5, #10
 80016c0:	46ec      	mov	ip, sp
 80016c2:	fb90 f6f5 	sdiv	r6, r0, r5
 80016c6:	fb05 0016 	mls	r0, r5, r6, r0
 80016ca:	3030      	adds	r0, #48	; 0x30
 80016cc:	f803 0901 	strb.w	r0, [r3], #-1
 80016d0:	4630      	mov	r0, r6
 80016d2:	2e00      	cmp	r6, #0
 80016d4:	d0dd      	beq.n	8001692 <_itostr+0x1a>
 80016d6:	4563      	cmp	r3, ip
 80016d8:	d1f3      	bne.n	80016c2 <_itostr+0x4a>
 80016da:	e7da      	b.n	8001692 <_itostr+0x1a>
 80016dc:	f803 5901 	strb.w	r5, [r3], #-1
 80016e0:	e7da      	b.n	8001698 <_itostr+0x20>
 80016e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80016e6:	f801 2f01 	strb.w	r2, [r1, #1]!
 80016ea:	e7e1      	b.n	80016b0 <_itostr+0x38>

080016ec <_xputch>:
 80016ec:	4603      	mov	r3, r0
 80016ee:	b410      	push	{r4}
 80016f0:	4c09      	ldr	r4, [pc, #36]	; (8001718 <_xputch+0x2c>)
 80016f2:	68da      	ldr	r2, [r3, #12]
 80016f4:	4608      	mov	r0, r1
 80016f6:	6821      	ldr	r1, [r4, #0]
 80016f8:	3201      	adds	r2, #1
 80016fa:	60da      	str	r2, [r3, #12]
 80016fc:	b141      	cbz	r1, 8001710 <_xputch+0x24>
 80016fe:	691b      	ldr	r3, [r3, #16]
 8001700:	429a      	cmp	r2, r3
 8001702:	da02      	bge.n	800170a <_xputch+0x1e>
 8001704:	1c4b      	adds	r3, r1, #1
 8001706:	6023      	str	r3, [r4, #0]
 8001708:	7008      	strb	r0, [r1, #0]
 800170a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800170e:	4770      	bx	lr
 8001710:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001714:	f006 bb9a 	b.w	8007e4c <console_putc>
 8001718:	20000088 	andcs	r0, r0, r8, lsl #1

0800171c <_format_int>:
 800171c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001720:	4698      	mov	r8, r3
 8001722:	b091      	sub	sp, #68	; 0x44
 8001724:	ea52 0308 	orrs.w	r3, r2, r8
 8001728:	4606      	mov	r6, r0
 800172a:	4617      	mov	r7, r2
 800172c:	f10d 053f 	add.w	r5, sp, #63	; 0x3f
 8001730:	d133      	bne.n	800179a <_format_int+0x7e>
 8001732:	2330      	movs	r3, #48	; 0x30
 8001734:	f88d 303f 	strb.w	r3, [sp, #63]	; 0x3f
 8001738:	f10d 043e 	add.w	r4, sp, #62	; 0x3e
 800173c:	6833      	ldr	r3, [r6, #0]
 800173e:	07d8      	lsls	r0, r3, #31
 8001740:	d507      	bpl.n	8001752 <_format_int+0x36>
 8001742:	6871      	ldr	r1, [r6, #4]
 8001744:	466a      	mov	r2, sp
 8001746:	2030      	movs	r0, #48	; 0x30
 8001748:	1b2f      	subs	r7, r5, r4
 800174a:	428f      	cmp	r7, r1
 800174c:	da01      	bge.n	8001752 <_format_int+0x36>
 800174e:	4294      	cmp	r4, r2
 8001750:	d839      	bhi.n	80017c6 <_format_int+0xaa>
 8001752:	0699      	lsls	r1, r3, #26
 8001754:	d507      	bpl.n	8001766 <_format_int+0x4a>
 8001756:	68b1      	ldr	r1, [r6, #8]
 8001758:	466a      	mov	r2, sp
 800175a:	2030      	movs	r0, #48	; 0x30
 800175c:	1b2f      	subs	r7, r5, r4
 800175e:	428f      	cmp	r7, r1
 8001760:	da01      	bge.n	8001766 <_format_int+0x4a>
 8001762:	4294      	cmp	r4, r2
 8001764:	d832      	bhi.n	80017cc <_format_int+0xb0>
 8001766:	071a      	lsls	r2, r3, #28
 8001768:	bf44      	itt	mi
 800176a:	222d      	movmi	r2, #45	; 0x2d
 800176c:	f804 2901 	strbmi.w	r2, [r4], #-1
 8001770:	065b      	lsls	r3, r3, #25
 8001772:	d407      	bmi.n	8001784 <_format_int+0x68>
 8001774:	68b2      	ldr	r2, [r6, #8]
 8001776:	466b      	mov	r3, sp
 8001778:	2120      	movs	r1, #32
 800177a:	1b28      	subs	r0, r5, r4
 800177c:	4290      	cmp	r0, r2
 800177e:	da01      	bge.n	8001784 <_format_int+0x68>
 8001780:	429c      	cmp	r4, r3
 8001782:	d826      	bhi.n	80017d2 <_format_int+0xb6>
 8001784:	1b2d      	subs	r5, r5, r4
 8001786:	3401      	adds	r4, #1
 8001788:	ab10      	add	r3, sp, #64	; 0x40
 800178a:	429c      	cmp	r4, r3
 800178c:	d324      	bcc.n	80017d8 <_format_int+0xbc>
 800178e:	68b3      	ldr	r3, [r6, #8]
 8001790:	42ab      	cmp	r3, r5
 8001792:	dc27      	bgt.n	80017e4 <_format_int+0xc8>
 8001794:	b011      	add	sp, #68	; 0x44
 8001796:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800179a:	462c      	mov	r4, r5
 800179c:	46e9      	mov	r9, sp
 800179e:	4638      	mov	r0, r7
 80017a0:	4641      	mov	r1, r8
 80017a2:	220a      	movs	r2, #10
 80017a4:	2300      	movs	r3, #0
 80017a6:	f7fe fd4f 	bl	8000248 <__aeabi_uldivmod>
 80017aa:	3230      	adds	r2, #48	; 0x30
 80017ac:	f804 2901 	strb.w	r2, [r4], #-1
 80017b0:	463a      	mov	r2, r7
 80017b2:	4643      	mov	r3, r8
 80017b4:	2a0a      	cmp	r2, #10
 80017b6:	f173 0300 	sbcs.w	r3, r3, #0
 80017ba:	4607      	mov	r7, r0
 80017bc:	4688      	mov	r8, r1
 80017be:	d3bd      	bcc.n	800173c <_format_int+0x20>
 80017c0:	454c      	cmp	r4, r9
 80017c2:	d1ec      	bne.n	800179e <_format_int+0x82>
 80017c4:	e7ba      	b.n	800173c <_format_int+0x20>
 80017c6:	f804 0901 	strb.w	r0, [r4], #-1
 80017ca:	e7bd      	b.n	8001748 <_format_int+0x2c>
 80017cc:	f804 0901 	strb.w	r0, [r4], #-1
 80017d0:	e7c4      	b.n	800175c <_format_int+0x40>
 80017d2:	f804 1901 	strb.w	r1, [r4], #-1
 80017d6:	e7d0      	b.n	800177a <_format_int+0x5e>
 80017d8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80017dc:	4630      	mov	r0, r6
 80017de:	f7ff ff85 	bl	80016ec <_xputch>
 80017e2:	e7d1      	b.n	8001788 <_format_int+0x6c>
 80017e4:	2120      	movs	r1, #32
 80017e6:	4630      	mov	r0, r6
 80017e8:	f7ff ff80 	bl	80016ec <_xputch>
 80017ec:	3501      	adds	r5, #1
 80017ee:	e7ce      	b.n	800178e <_format_int+0x72>

080017f0 <_format_hex>:
 80017f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80017f2:	b091      	sub	sp, #68	; 0x44
 80017f4:	6804      	ldr	r4, [r0, #0]
 80017f6:	4606      	mov	r6, r0
 80017f8:	f10d 023f 	add.w	r2, sp, #63	; 0x3f
 80017fc:	bb61      	cbnz	r1, 8001858 <_format_hex+0x68>
 80017fe:	2330      	movs	r3, #48	; 0x30
 8001800:	f88d 303f 	strb.w	r3, [sp, #63]	; 0x3f
 8001804:	f10d 033e 	add.w	r3, sp, #62	; 0x3e
 8001808:	07e5      	lsls	r5, r4, #31
 800180a:	d507      	bpl.n	800181c <_format_hex+0x2c>
 800180c:	6870      	ldr	r0, [r6, #4]
 800180e:	4669      	mov	r1, sp
 8001810:	2530      	movs	r5, #48	; 0x30
 8001812:	1ad7      	subs	r7, r2, r3
 8001814:	4287      	cmp	r7, r0
 8001816:	da01      	bge.n	800181c <_format_hex+0x2c>
 8001818:	428b      	cmp	r3, r1
 800181a:	d831      	bhi.n	8001880 <_format_hex+0x90>
 800181c:	06a0      	lsls	r0, r4, #26
 800181e:	d507      	bpl.n	8001830 <_format_hex+0x40>
 8001820:	68b0      	ldr	r0, [r6, #8]
 8001822:	4669      	mov	r1, sp
 8001824:	2530      	movs	r5, #48	; 0x30
 8001826:	1ad7      	subs	r7, r2, r3
 8001828:	4287      	cmp	r7, r0
 800182a:	da01      	bge.n	8001830 <_format_hex+0x40>
 800182c:	428b      	cmp	r3, r1
 800182e:	d82a      	bhi.n	8001886 <_format_hex+0x96>
 8001830:	0661      	lsls	r1, r4, #25
 8001832:	d407      	bmi.n	8001844 <_format_hex+0x54>
 8001834:	68b0      	ldr	r0, [r6, #8]
 8001836:	4669      	mov	r1, sp
 8001838:	2420      	movs	r4, #32
 800183a:	1ad5      	subs	r5, r2, r3
 800183c:	4285      	cmp	r5, r0
 800183e:	da01      	bge.n	8001844 <_format_hex+0x54>
 8001840:	428b      	cmp	r3, r1
 8001842:	d823      	bhi.n	800188c <_format_hex+0x9c>
 8001844:	1ad5      	subs	r5, r2, r3
 8001846:	1c5c      	adds	r4, r3, #1
 8001848:	ab10      	add	r3, sp, #64	; 0x40
 800184a:	429c      	cmp	r4, r3
 800184c:	d321      	bcc.n	8001892 <_format_hex+0xa2>
 800184e:	68b3      	ldr	r3, [r6, #8]
 8001850:	429d      	cmp	r5, r3
 8001852:	db24      	blt.n	800189e <_format_hex+0xae>
 8001854:	b011      	add	sp, #68	; 0x44
 8001856:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001858:	f014 0f02 	tst.w	r4, #2
 800185c:	bf0c      	ite	eq
 800185e:	2757      	moveq	r7, #87	; 0x57
 8001860:	2737      	movne	r7, #55	; 0x37
 8001862:	4613      	mov	r3, r2
 8001864:	466d      	mov	r5, sp
 8001866:	f001 000f 	and.w	r0, r1, #15
 800186a:	2809      	cmp	r0, #9
 800186c:	bf94      	ite	ls
 800186e:	3030      	addls	r0, #48	; 0x30
 8001870:	19c0      	addhi	r0, r0, r7
 8001872:	0909      	lsrs	r1, r1, #4
 8001874:	f803 0901 	strb.w	r0, [r3], #-1
 8001878:	d0c6      	beq.n	8001808 <_format_hex+0x18>
 800187a:	42ab      	cmp	r3, r5
 800187c:	d1f3      	bne.n	8001866 <_format_hex+0x76>
 800187e:	e7c3      	b.n	8001808 <_format_hex+0x18>
 8001880:	f803 5901 	strb.w	r5, [r3], #-1
 8001884:	e7c5      	b.n	8001812 <_format_hex+0x22>
 8001886:	f803 5901 	strb.w	r5, [r3], #-1
 800188a:	e7cc      	b.n	8001826 <_format_hex+0x36>
 800188c:	f803 4901 	strb.w	r4, [r3], #-1
 8001890:	e7d3      	b.n	800183a <_format_hex+0x4a>
 8001892:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001896:	4630      	mov	r0, r6
 8001898:	f7ff ff28 	bl	80016ec <_xputch>
 800189c:	e7d4      	b.n	8001848 <_format_hex+0x58>
 800189e:	2120      	movs	r1, #32
 80018a0:	4630      	mov	r0, r6
 80018a2:	f7ff ff23 	bl	80016ec <_xputch>
 80018a6:	3501      	adds	r5, #1
 80018a8:	e7d1      	b.n	800184e <_format_hex+0x5e>
	...

080018ac <_vprintf>:
 80018ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80018b0:	f04f 0800 	mov.w	r8, #0
 80018b4:	b096      	sub	sp, #88	; 0x58
 80018b6:	e9cd 8004 	strd	r8, r0, [sp, #16]
 80018ba:	4614      	mov	r4, r2
 80018bc:	af06      	add	r7, sp, #24
 80018be:	780b      	ldrb	r3, [r1, #0]
 80018c0:	b91b      	cbnz	r3, 80018ca <_vprintf+0x1e>
 80018c2:	9804      	ldr	r0, [sp, #16]
 80018c4:	b016      	add	sp, #88	; 0x58
 80018c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80018ca:	2b25      	cmp	r3, #37	; 0x25
 80018cc:	f101 0601 	add.w	r6, r1, #1
 80018d0:	d005      	beq.n	80018de <_vprintf+0x32>
 80018d2:	4619      	mov	r1, r3
 80018d4:	a801      	add	r0, sp, #4
 80018d6:	f7ff ff09 	bl	80016ec <_xputch>
 80018da:	4631      	mov	r1, r6
 80018dc:	e7ef      	b.n	80018be <_vprintf+0x12>
 80018de:	784b      	ldrb	r3, [r1, #1]
 80018e0:	f8cd 800c 	str.w	r8, [sp, #12]
 80018e4:	2b30      	cmp	r3, #48	; 0x30
 80018e6:	e9cd 8801 	strd	r8, r8, [sp, #4]
 80018ea:	d129      	bne.n	8001940 <_vprintf+0x94>
 80018ec:	2320      	movs	r3, #32
 80018ee:	9301      	str	r3, [sp, #4]
 80018f0:	1c8e      	adds	r6, r1, #2
 80018f2:	2200      	movs	r2, #0
 80018f4:	4635      	mov	r5, r6
 80018f6:	4613      	mov	r3, r2
 80018f8:	f04f 0c0a 	mov.w	ip, #10
 80018fc:	7829      	ldrb	r1, [r5, #0]
 80018fe:	f1a1 0030 	sub.w	r0, r1, #48	; 0x30
 8001902:	2809      	cmp	r0, #9
 8001904:	462e      	mov	r6, r5
 8001906:	f105 0501 	add.w	r5, r5, #1
 800190a:	d91d      	bls.n	8001948 <_vprintf+0x9c>
 800190c:	b12a      	cbz	r2, 800191a <_vprintf+0x6e>
 800190e:	9303      	str	r3, [sp, #12]
 8001910:	b11b      	cbz	r3, 800191a <_vprintf+0x6e>
 8001912:	9b01      	ldr	r3, [sp, #4]
 8001914:	f043 0310 	orr.w	r3, r3, #16
 8001918:	9301      	str	r3, [sp, #4]
 800191a:	292e      	cmp	r1, #46	; 0x2e
 800191c:	d123      	bne.n	8001966 <_vprintf+0xba>
 800191e:	7873      	ldrb	r3, [r6, #1]
 8001920:	2b2a      	cmp	r3, #42	; 0x2a
 8001922:	d015      	beq.n	8001950 <_vprintf+0xa4>
 8001924:	2100      	movs	r1, #0
 8001926:	1c70      	adds	r0, r6, #1
 8001928:	460a      	mov	r2, r1
 800192a:	250a      	movs	r5, #10
 800192c:	7803      	ldrb	r3, [r0, #0]
 800192e:	3b30      	subs	r3, #48	; 0x30
 8001930:	2b09      	cmp	r3, #9
 8001932:	4606      	mov	r6, r0
 8001934:	f100 0001 	add.w	r0, r0, #1
 8001938:	d958      	bls.n	80019ec <_vprintf+0x140>
 800193a:	b181      	cbz	r1, 800195e <_vprintf+0xb2>
 800193c:	9202      	str	r2, [sp, #8]
 800193e:	e00e      	b.n	800195e <_vprintf+0xb2>
 8001940:	2b2d      	cmp	r3, #45	; 0x2d
 8001942:	d1d6      	bne.n	80018f2 <_vprintf+0x46>
 8001944:	2340      	movs	r3, #64	; 0x40
 8001946:	e7d2      	b.n	80018ee <_vprintf+0x42>
 8001948:	fb0c 0303 	mla	r3, ip, r3, r0
 800194c:	2201      	movs	r2, #1
 800194e:	e7d5      	b.n	80018fc <_vprintf+0x50>
 8001950:	f854 3b04 	ldr.w	r3, [r4], #4
 8001954:	2b00      	cmp	r3, #0
 8001956:	bfb8      	it	lt
 8001958:	425b      	neglt	r3, r3
 800195a:	3602      	adds	r6, #2
 800195c:	9302      	str	r3, [sp, #8]
 800195e:	9b01      	ldr	r3, [sp, #4]
 8001960:	f043 0301 	orr.w	r3, r3, #1
 8001964:	9301      	str	r3, [sp, #4]
 8001966:	7833      	ldrb	r3, [r6, #0]
 8001968:	2b6c      	cmp	r3, #108	; 0x6c
 800196a:	bf04      	itt	eq
 800196c:	3601      	addeq	r6, #1
 800196e:	9b01      	ldreq	r3, [sp, #4]
 8001970:	7831      	ldrb	r1, [r6, #0]
 8001972:	bf04      	itt	eq
 8001974:	f043 0304 	orreq.w	r3, r3, #4
 8001978:	9301      	streq	r3, [sp, #4]
 800197a:	2958      	cmp	r1, #88	; 0x58
 800197c:	f000 8169 	beq.w	8001c52 <_vprintf+0x3a6>
 8001980:	f1a1 0363 	sub.w	r3, r1, #99	; 0x63
 8001984:	b2da      	uxtb	r2, r3
 8001986:	2a15      	cmp	r2, #21
 8001988:	d8a4      	bhi.n	80018d4 <_vprintf+0x28>
 800198a:	2b15      	cmp	r3, #21
 800198c:	d8a2      	bhi.n	80018d4 <_vprintf+0x28>
 800198e:	a201      	add	r2, pc, #4	; (adr r2, 8001994 <_vprintf+0xe8>)
 8001990:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001994:	080019f5 	stmdaeq	r0, {r0, r2, r4, r5, r6, r7, r8, fp, ip}
 8001998:	08001a07 	stmdaeq	r0, {r0, r1, r2, r9, fp, ip}
 800199c:	080018d5 	stmdaeq	r0, {r0, r2, r4, r6, r7, fp, ip}
 80019a0:	08001a3d 	stmdaeq	r0, {r0, r2, r3, r4, r5, r9, fp, ip}
 80019a4:	080018d5 	stmdaeq	r0, {r0, r2, r4, r6, r7, fp, ip}
 80019a8:	080018d5 	stmdaeq	r0, {r0, r2, r4, r6, r7, fp, ip}
 80019ac:	08001a07 	stmdaeq	r0, {r0, r1, r2, r9, fp, ip}
 80019b0:	080018d5 	stmdaeq	r0, {r0, r2, r4, r6, r7, fp, ip}
 80019b4:	080018d5 	stmdaeq	r0, {r0, r2, r4, r6, r7, fp, ip}
 80019b8:	080018d5 	stmdaeq	r0, {r0, r2, r4, r6, r7, fp, ip}
 80019bc:	080018d5 	stmdaeq	r0, {r0, r2, r4, r6, r7, fp, ip}
 80019c0:	080018d5 	stmdaeq	r0, {r0, r2, r4, r6, r7, fp, ip}
 80019c4:	080018d5 	stmdaeq	r0, {r0, r2, r4, r6, r7, fp, ip}
 80019c8:	08001b95 	stmdaeq	r0, {r0, r2, r4, r7, r8, r9, fp, ip}
 80019cc:	080018d5 	stmdaeq	r0, {r0, r2, r4, r6, r7, fp, ip}
 80019d0:	080018d5 	stmdaeq	r0, {r0, r2, r4, r6, r7, fp, ip}
 80019d4:	08001bbd 	stmdaeq	r0, {r0, r2, r3, r4, r5, r7, r8, r9, fp, ip}
 80019d8:	080018d5 	stmdaeq	r0, {r0, r2, r4, r6, r7, fp, ip}
 80019dc:	08001c33 	stmdaeq	r0, {r0, r1, r4, r5, sl, fp, ip}
 80019e0:	080018d5 	stmdaeq	r0, {r0, r2, r4, r6, r7, fp, ip}
 80019e4:	080018d5 	stmdaeq	r0, {r0, r2, r4, r6, r7, fp, ip}
 80019e8:	08001c5b 	stmdaeq	r0, {r0, r1, r3, r4, r6, sl, fp, ip}
 80019ec:	fb05 3202 	mla	r2, r5, r2, r3
 80019f0:	2101      	movs	r1, #1
 80019f2:	e79b      	b.n	800192c <_vprintf+0x80>
 80019f4:	4625      	mov	r5, r4
 80019f6:	a801      	add	r0, sp, #4
 80019f8:	f855 1b04 	ldr.w	r1, [r5], #4
 80019fc:	f7ff fe76 	bl	80016ec <_xputch>
 8001a00:	3601      	adds	r6, #1
 8001a02:	462c      	mov	r4, r5
 8001a04:	e769      	b.n	80018da <_vprintf+0x2e>
 8001a06:	9901      	ldr	r1, [sp, #4]
 8001a08:	074d      	lsls	r5, r1, #29
 8001a0a:	bf4b      	itete	mi
 8001a0c:	3407      	addmi	r4, #7
 8001a0e:	4625      	movpl	r5, r4
 8001a10:	f024 0407 	bicmi.w	r4, r4, #7
 8001a14:	f855 2b04 	ldrpl.w	r2, [r5], #4
 8001a18:	bf45      	ittet	mi
 8001a1a:	6863      	ldrmi	r3, [r4, #4]
 8001a1c:	4625      	movmi	r5, r4
 8001a1e:	17d3      	asrpl	r3, r2, #31
 8001a20:	f855 2b08 	ldrmi.w	r2, [r5], #8
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	da05      	bge.n	8001a34 <_vprintf+0x188>
 8001a28:	f041 0108 	orr.w	r1, r1, #8
 8001a2c:	4252      	negs	r2, r2
 8001a2e:	9101      	str	r1, [sp, #4]
 8001a30:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8001a34:	a801      	add	r0, sp, #4
 8001a36:	f7ff fe71 	bl	800171c <_format_int>
 8001a3a:	e7e1      	b.n	8001a00 <_vprintf+0x154>
 8001a3c:	3407      	adds	r4, #7
 8001a3e:	f024 0507 	bic.w	r5, r4, #7
 8001a42:	e8f5 0102 	ldrd	r0, r1, [r5], #8
 8001a46:	f7fe fbaf 	bl	80001a8 <__aeabi_d2f>
 8001a4a:	9b01      	ldr	r3, [sp, #4]
 8001a4c:	ee07 0a90 	vmov	s15, r0
 8001a50:	07dc      	lsls	r4, r3, #31
 8001a52:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001a56:	bf4c      	ite	mi
 8001a58:	9c02      	ldrmi	r4, [sp, #8]
 8001a5a:	2406      	movpl	r4, #6
 8001a5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a60:	bf48      	it	mi
 8001a62:	eef1 7a67 	vnegmi.f32	s15, s15
 8001a66:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8001a6a:	bf4a      	itet	mi
 8001a6c:	f10d 0a19 	addmi.w	sl, sp, #25
 8001a70:	46ba      	movpl	sl, r7
 8001a72:	232d      	movmi	r3, #45	; 0x2d
 8001a74:	ee17 0a10 	vmov	r0, s14
 8001a78:	f04f 0200 	mov.w	r2, #0
 8001a7c:	4651      	mov	r1, sl
 8001a7e:	bf48      	it	mi
 8001a80:	f88d 3018 	strbmi.w	r3, [sp, #24]
 8001a84:	f7ff fdf8 	bl	8001678 <_itostr>
 8001a88:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8001a8c:	232e      	movs	r3, #46	; 0x2e
 8001a8e:	f80a 3000 	strb.w	r3, [sl, r0]
 8001a92:	eb0a 0900 	add.w	r9, sl, r0
 8001a96:	230a      	movs	r3, #10
 8001a98:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001a9c:	1c62      	adds	r2, r4, #1
 8001a9e:	f109 0901 	add.w	r9, r9, #1
 8001aa2:	4619      	mov	r1, r3
 8001aa4:	2c00      	cmp	r4, #0
 8001aa6:	dc3d      	bgt.n	8001b24 <_vprintf+0x278>
 8001aa8:	ee07 3a10 	vmov	s14, r3
 8001aac:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8001ab0:	4649      	mov	r1, r9
 8001ab2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001ab6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001aba:	ee17 0a90 	vmov	r0, s15
 8001abe:	f7ff fddb 	bl	8001678 <_itostr>
 8001ac2:	4448      	add	r0, r9
 8001ac4:	1bc0      	subs	r0, r0, r7
 8001ac6:	1e44      	subs	r4, r0, #1
 8001ac8:	193a      	adds	r2, r7, r4
 8001aca:	5d3b      	ldrb	r3, [r7, r4]
 8001acc:	2b34      	cmp	r3, #52	; 0x34
 8001ace:	d911      	bls.n	8001af4 <_vprintf+0x248>
 8001ad0:	f812 1c01 	ldrb.w	r1, [r2, #-1]
 8001ad4:	292e      	cmp	r1, #46	; 0x2e
 8001ad6:	f102 33ff 	add.w	r3, r2, #4294967295	; 0xffffffff
 8001ada:	d029      	beq.n	8001b30 <_vprintf+0x284>
 8001adc:	469c      	mov	ip, r3
 8001ade:	f04f 0e30 	mov.w	lr, #48	; 0x30
 8001ae2:	4663      	mov	r3, ip
 8001ae4:	f81c 1901 	ldrb.w	r1, [ip], #-1
 8001ae8:	2939      	cmp	r1, #57	; 0x39
 8001aea:	d01e      	beq.n	8001b2a <_vprintf+0x27e>
 8001aec:	292e      	cmp	r1, #46	; 0x2e
 8001aee:	d01f      	beq.n	8001b30 <_vprintf+0x284>
 8001af0:	3101      	adds	r1, #1
 8001af2:	7019      	strb	r1, [r3, #0]
 8001af4:	f104 0358 	add.w	r3, r4, #88	; 0x58
 8001af8:	446b      	add	r3, sp
 8001afa:	f813 3c41 	ldrb.w	r3, [r3, #-65]
 8001afe:	2b2e      	cmp	r3, #46	; 0x2e
 8001b00:	bf08      	it	eq
 8001b02:	f104 34ff 	addeq.w	r4, r4, #4294967295	; 0xffffffff
 8001b06:	46a1      	mov	r9, r4
 8001b08:	9b03      	ldr	r3, [sp, #12]
 8001b0a:	4599      	cmp	r9, r3
 8001b0c:	db3b      	blt.n	8001b86 <_vprintf+0x2da>
 8001b0e:	46b9      	mov	r9, r7
 8001b10:	2c00      	cmp	r4, #0
 8001b12:	f77f af75 	ble.w	8001a00 <_vprintf+0x154>
 8001b16:	f819 1b01 	ldrb.w	r1, [r9], #1
 8001b1a:	a801      	add	r0, sp, #4
 8001b1c:	f7ff fde6 	bl	80016ec <_xputch>
 8001b20:	3c01      	subs	r4, #1
 8001b22:	e7f5      	b.n	8001b10 <_vprintf+0x264>
 8001b24:	434b      	muls	r3, r1
 8001b26:	3c01      	subs	r4, #1
 8001b28:	e7bc      	b.n	8001aa4 <_vprintf+0x1f8>
 8001b2a:	f88c e001 	strb.w	lr, [ip, #1]
 8001b2e:	e7d8      	b.n	8001ae2 <_vprintf+0x236>
 8001b30:	3b01      	subs	r3, #1
 8001b32:	f04f 0c30 	mov.w	ip, #48	; 0x30
 8001b36:	7819      	ldrb	r1, [r3, #0]
 8001b38:	2939      	cmp	r1, #57	; 0x39
 8001b3a:	d112      	bne.n	8001b62 <_vprintf+0x2b6>
 8001b3c:	42bb      	cmp	r3, r7
 8001b3e:	d20d      	bcs.n	8001b5c <_vprintf+0x2b0>
 8001b40:	1c5c      	adds	r4, r3, #1
 8001b42:	1c99      	adds	r1, r3, #2
 8001b44:	428c      	cmp	r4, r1
 8001b46:	eba2 0203 	sub.w	r2, r2, r3
 8001b4a:	d913      	bls.n	8001b74 <_vprintf+0x2c8>
 8001b4c:	4619      	mov	r1, r3
 8001b4e:	441a      	add	r2, r3
 8001b50:	428a      	cmp	r2, r1
 8001b52:	d10b      	bne.n	8001b6c <_vprintf+0x2c0>
 8001b54:	2231      	movs	r2, #49	; 0x31
 8001b56:	705a      	strb	r2, [r3, #1]
 8001b58:	4604      	mov	r4, r0
 8001b5a:	e7cb      	b.n	8001af4 <_vprintf+0x248>
 8001b5c:	f803 c901 	strb.w	ip, [r3], #-1
 8001b60:	e7e9      	b.n	8001b36 <_vprintf+0x28a>
 8001b62:	42bb      	cmp	r3, r7
 8001b64:	d3ec      	bcc.n	8001b40 <_vprintf+0x294>
 8001b66:	292d      	cmp	r1, #45	; 0x2d
 8001b68:	d0ea      	beq.n	8001b40 <_vprintf+0x294>
 8001b6a:	e7c1      	b.n	8001af0 <_vprintf+0x244>
 8001b6c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8001b70:	704c      	strb	r4, [r1, #1]
 8001b72:	e7ed      	b.n	8001b50 <_vprintf+0x2a4>
 8001b74:	4414      	add	r4, r2
 8001b76:	440a      	add	r2, r1
 8001b78:	428a      	cmp	r2, r1
 8001b7a:	d0eb      	beq.n	8001b54 <_vprintf+0x2a8>
 8001b7c:	f814 cd01 	ldrb.w	ip, [r4, #-1]!
 8001b80:	f802 cd01 	strb.w	ip, [r2, #-1]!
 8001b84:	e7f8      	b.n	8001b78 <_vprintf+0x2cc>
 8001b86:	2120      	movs	r1, #32
 8001b88:	a801      	add	r0, sp, #4
 8001b8a:	f7ff fdaf 	bl	80016ec <_xputch>
 8001b8e:	f109 0901 	add.w	r9, r9, #1
 8001b92:	e7b9      	b.n	8001b08 <_vprintf+0x25c>
 8001b94:	4625      	mov	r5, r4
 8001b96:	2308      	movs	r3, #8
 8001b98:	f855 4b04 	ldr.w	r4, [r5], #4
 8001b9c:	9303      	str	r3, [sp, #12]
 8001b9e:	2130      	movs	r1, #48	; 0x30
 8001ba0:	2320      	movs	r3, #32
 8001ba2:	a801      	add	r0, sp, #4
 8001ba4:	9301      	str	r3, [sp, #4]
 8001ba6:	f7ff fda1 	bl	80016ec <_xputch>
 8001baa:	2178      	movs	r1, #120	; 0x78
 8001bac:	a801      	add	r0, sp, #4
 8001bae:	f7ff fd9d 	bl	80016ec <_xputch>
 8001bb2:	4621      	mov	r1, r4
 8001bb4:	a801      	add	r0, sp, #4
 8001bb6:	f7ff fe1b 	bl	80017f0 <_format_hex>
 8001bba:	e721      	b.n	8001a00 <_vprintf+0x154>
 8001bbc:	4625      	mov	r5, r4
 8001bbe:	2400      	movs	r4, #0
 8001bc0:	f855 9b04 	ldr.w	r9, [r5], #4
 8001bc4:	f819 3004 	ldrb.w	r3, [r9, r4]
 8001bc8:	b993      	cbnz	r3, 8001bf0 <_vprintf+0x344>
 8001bca:	9b01      	ldr	r3, [sp, #4]
 8001bcc:	07d9      	lsls	r1, r3, #31
 8001bce:	d503      	bpl.n	8001bd8 <_vprintf+0x32c>
 8001bd0:	9b02      	ldr	r3, [sp, #8]
 8001bd2:	429c      	cmp	r4, r3
 8001bd4:	bfa8      	it	ge
 8001bd6:	461c      	movge	r4, r3
 8001bd8:	9b01      	ldr	r3, [sp, #4]
 8001bda:	065a      	lsls	r2, r3, #25
 8001bdc:	f104 0a01 	add.w	sl, r4, #1
 8001be0:	d403      	bmi.n	8001bea <_vprintf+0x33e>
 8001be2:	9b03      	ldr	r3, [sp, #12]
 8001be4:	429c      	cmp	r4, r3
 8001be6:	db05      	blt.n	8001bf4 <_vprintf+0x348>
 8001be8:	4654      	mov	r4, sl
 8001bea:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 8001bee:	e00d      	b.n	8001c0c <_vprintf+0x360>
 8001bf0:	3401      	adds	r4, #1
 8001bf2:	e7e7      	b.n	8001bc4 <_vprintf+0x318>
 8001bf4:	2120      	movs	r1, #32
 8001bf6:	a801      	add	r0, sp, #4
 8001bf8:	f7ff fd78 	bl	80016ec <_xputch>
 8001bfc:	4654      	mov	r4, sl
 8001bfe:	e7eb      	b.n	8001bd8 <_vprintf+0x32c>
 8001c00:	a801      	add	r0, sp, #4
 8001c02:	f7ff fd73 	bl	80016ec <_xputch>
 8001c06:	9b02      	ldr	r3, [sp, #8]
 8001c08:	3b01      	subs	r3, #1
 8001c0a:	9302      	str	r3, [sp, #8]
 8001c0c:	9b01      	ldr	r3, [sp, #4]
 8001c0e:	07db      	lsls	r3, r3, #31
 8001c10:	d501      	bpl.n	8001c16 <_vprintf+0x36a>
 8001c12:	9b02      	ldr	r3, [sp, #8]
 8001c14:	b11b      	cbz	r3, 8001c1e <_vprintf+0x372>
 8001c16:	f819 1f01 	ldrb.w	r1, [r9, #1]!
 8001c1a:	2900      	cmp	r1, #0
 8001c1c:	d1f0      	bne.n	8001c00 <_vprintf+0x354>
 8001c1e:	9b03      	ldr	r3, [sp, #12]
 8001c20:	429c      	cmp	r4, r3
 8001c22:	f6bf aeed 	bge.w	8001a00 <_vprintf+0x154>
 8001c26:	2120      	movs	r1, #32
 8001c28:	a801      	add	r0, sp, #4
 8001c2a:	f7ff fd5f 	bl	80016ec <_xputch>
 8001c2e:	3401      	adds	r4, #1
 8001c30:	e7f5      	b.n	8001c1e <_vprintf+0x372>
 8001c32:	9b01      	ldr	r3, [sp, #4]
 8001c34:	f013 0304 	ands.w	r3, r3, #4
 8001c38:	bf1d      	ittte	ne
 8001c3a:	3407      	addne	r4, #7
 8001c3c:	f024 0407 	bicne.w	r4, r4, #7
 8001c40:	4625      	movne	r5, r4
 8001c42:	4625      	moveq	r5, r4
 8001c44:	bf1a      	itte	ne
 8001c46:	f855 2b08 	ldrne.w	r2, [r5], #8
 8001c4a:	6863      	ldrne	r3, [r4, #4]
 8001c4c:	f855 2b04 	ldreq.w	r2, [r5], #4
 8001c50:	e6f0      	b.n	8001a34 <_vprintf+0x188>
 8001c52:	9b01      	ldr	r3, [sp, #4]
 8001c54:	f043 0302 	orr.w	r3, r3, #2
 8001c58:	9301      	str	r3, [sp, #4]
 8001c5a:	4625      	mov	r5, r4
 8001c5c:	f855 1b04 	ldr.w	r1, [r5], #4
 8001c60:	e7a8      	b.n	8001bb4 <_vprintf+0x308>
 8001c62:	bf00      	nop

08001c64 <printf>:
 8001c64:	b40f      	push	{r0, r1, r2, r3}
 8001c66:	b507      	push	{r0, r1, r2, lr}
 8001c68:	aa04      	add	r2, sp, #16
 8001c6a:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 8001c6e:	f852 1b04 	ldr.w	r1, [r2], #4
 8001c72:	9201      	str	r2, [sp, #4]
 8001c74:	f7ff fe1a 	bl	80018ac <_vprintf>
 8001c78:	b003      	add	sp, #12
 8001c7a:	f85d eb04 	ldr.w	lr, [sp], #4
 8001c7e:	b004      	add	sp, #16
 8001c80:	4770      	bx	lr
	...

08001c84 <snprintf>:
 8001c84:	b40c      	push	{r2, r3}
 8001c86:	b513      	push	{r0, r1, r4, lr}
 8001c88:	4c09      	ldr	r4, [pc, #36]	; (8001cb0 <snprintf+0x2c>)
 8001c8a:	aa04      	add	r2, sp, #16
 8001c8c:	460b      	mov	r3, r1
 8001c8e:	6020      	str	r0, [r4, #0]
 8001c90:	f852 1b04 	ldr.w	r1, [r2], #4
 8001c94:	9201      	str	r2, [sp, #4]
 8001c96:	4618      	mov	r0, r3
 8001c98:	f7ff fe08 	bl	80018ac <_vprintf>
 8001c9c:	6822      	ldr	r2, [r4, #0]
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	7013      	strb	r3, [r2, #0]
 8001ca2:	6023      	str	r3, [r4, #0]
 8001ca4:	b002      	add	sp, #8
 8001ca6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001caa:	b002      	add	sp, #8
 8001cac:	4770      	bx	lr
 8001cae:	bf00      	nop
 8001cb0:	20000088 	andcs	r0, r0, r8, lsl #1

08001cb4 <vsnprintf>:
 8001cb4:	b538      	push	{r3, r4, r5, lr}
 8001cb6:	4c06      	ldr	r4, [pc, #24]	; (8001cd0 <vsnprintf+0x1c>)
 8001cb8:	4605      	mov	r5, r0
 8001cba:	4608      	mov	r0, r1
 8001cbc:	4611      	mov	r1, r2
 8001cbe:	461a      	mov	r2, r3
 8001cc0:	6025      	str	r5, [r4, #0]
 8001cc2:	f7ff fdf3 	bl	80018ac <_vprintf>
 8001cc6:	6822      	ldr	r2, [r4, #0]
 8001cc8:	2300      	movs	r3, #0
 8001cca:	7013      	strb	r3, [r2, #0]
 8001ccc:	6023      	str	r3, [r4, #0]
 8001cce:	bd38      	pop	{r3, r4, r5, pc}
 8001cd0:	20000088 	andcs	r0, r0, r8, lsl #1

08001cd4 <puts>:
 8001cd4:	b508      	push	{r3, lr}
 8001cd6:	f006 f8bb 	bl	8007e50 <console_puts>
 8001cda:	200a      	movs	r0, #10
 8001cdc:	f006 f8b6 	bl	8007e4c <console_putc>
 8001ce0:	2001      	movs	r0, #1
 8001ce2:	bd08      	pop	{r3, pc}

08001ce4 <__udivmoddi4>:
 8001ce4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001ce8:	9e08      	ldr	r6, [sp, #32]
 8001cea:	460d      	mov	r5, r1
 8001cec:	4604      	mov	r4, r0
 8001cee:	460f      	mov	r7, r1
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d14a      	bne.n	8001d8a <__udivmoddi4+0xa6>
 8001cf4:	428a      	cmp	r2, r1
 8001cf6:	4694      	mov	ip, r2
 8001cf8:	d965      	bls.n	8001dc6 <__udivmoddi4+0xe2>
 8001cfa:	fab2 f382 	clz	r3, r2
 8001cfe:	b143      	cbz	r3, 8001d12 <__udivmoddi4+0x2e>
 8001d00:	fa02 fc03 	lsl.w	ip, r2, r3
 8001d04:	f1c3 0220 	rsb	r2, r3, #32
 8001d08:	409f      	lsls	r7, r3
 8001d0a:	fa20 f202 	lsr.w	r2, r0, r2
 8001d0e:	4317      	orrs	r7, r2
 8001d10:	409c      	lsls	r4, r3
 8001d12:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8001d16:	fa1f f58c 	uxth.w	r5, ip
 8001d1a:	fbb7 f1fe 	udiv	r1, r7, lr
 8001d1e:	0c22      	lsrs	r2, r4, #16
 8001d20:	fb0e 7711 	mls	r7, lr, r1, r7
 8001d24:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8001d28:	fb01 f005 	mul.w	r0, r1, r5
 8001d2c:	4290      	cmp	r0, r2
 8001d2e:	d90a      	bls.n	8001d46 <__udivmoddi4+0x62>
 8001d30:	eb1c 0202 	adds.w	r2, ip, r2
 8001d34:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8001d38:	f080 811c 	bcs.w	8001f74 <__udivmoddi4+0x290>
 8001d3c:	4290      	cmp	r0, r2
 8001d3e:	f240 8119 	bls.w	8001f74 <__udivmoddi4+0x290>
 8001d42:	3902      	subs	r1, #2
 8001d44:	4462      	add	r2, ip
 8001d46:	1a12      	subs	r2, r2, r0
 8001d48:	b2a4      	uxth	r4, r4
 8001d4a:	fbb2 f0fe 	udiv	r0, r2, lr
 8001d4e:	fb0e 2210 	mls	r2, lr, r0, r2
 8001d52:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8001d56:	fb00 f505 	mul.w	r5, r0, r5
 8001d5a:	42a5      	cmp	r5, r4
 8001d5c:	d90a      	bls.n	8001d74 <__udivmoddi4+0x90>
 8001d5e:	eb1c 0404 	adds.w	r4, ip, r4
 8001d62:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8001d66:	f080 8107 	bcs.w	8001f78 <__udivmoddi4+0x294>
 8001d6a:	42a5      	cmp	r5, r4
 8001d6c:	f240 8104 	bls.w	8001f78 <__udivmoddi4+0x294>
 8001d70:	4464      	add	r4, ip
 8001d72:	3802      	subs	r0, #2
 8001d74:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8001d78:	1b64      	subs	r4, r4, r5
 8001d7a:	2100      	movs	r1, #0
 8001d7c:	b11e      	cbz	r6, 8001d86 <__udivmoddi4+0xa2>
 8001d7e:	40dc      	lsrs	r4, r3
 8001d80:	2300      	movs	r3, #0
 8001d82:	e9c6 4300 	strd	r4, r3, [r6]
 8001d86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001d8a:	428b      	cmp	r3, r1
 8001d8c:	d908      	bls.n	8001da0 <__udivmoddi4+0xbc>
 8001d8e:	2e00      	cmp	r6, #0
 8001d90:	f000 80ed 	beq.w	8001f6e <__udivmoddi4+0x28a>
 8001d94:	2100      	movs	r1, #0
 8001d96:	e9c6 0500 	strd	r0, r5, [r6]
 8001d9a:	4608      	mov	r0, r1
 8001d9c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001da0:	fab3 f183 	clz	r1, r3
 8001da4:	2900      	cmp	r1, #0
 8001da6:	d149      	bne.n	8001e3c <__udivmoddi4+0x158>
 8001da8:	42ab      	cmp	r3, r5
 8001daa:	d302      	bcc.n	8001db2 <__udivmoddi4+0xce>
 8001dac:	4282      	cmp	r2, r0
 8001dae:	f200 80f8 	bhi.w	8001fa2 <__udivmoddi4+0x2be>
 8001db2:	1a84      	subs	r4, r0, r2
 8001db4:	eb65 0203 	sbc.w	r2, r5, r3
 8001db8:	2001      	movs	r0, #1
 8001dba:	4617      	mov	r7, r2
 8001dbc:	2e00      	cmp	r6, #0
 8001dbe:	d0e2      	beq.n	8001d86 <__udivmoddi4+0xa2>
 8001dc0:	e9c6 4700 	strd	r4, r7, [r6]
 8001dc4:	e7df      	b.n	8001d86 <__udivmoddi4+0xa2>
 8001dc6:	b902      	cbnz	r2, 8001dca <__udivmoddi4+0xe6>
 8001dc8:	deff      	udf	#255	; 0xff
 8001dca:	fab2 f382 	clz	r3, r2
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	f040 8090 	bne.w	8001ef4 <__udivmoddi4+0x210>
 8001dd4:	1a8a      	subs	r2, r1, r2
 8001dd6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8001dda:	fa1f fe8c 	uxth.w	lr, ip
 8001dde:	2101      	movs	r1, #1
 8001de0:	fbb2 f5f7 	udiv	r5, r2, r7
 8001de4:	fb07 2015 	mls	r0, r7, r5, r2
 8001de8:	0c22      	lsrs	r2, r4, #16
 8001dea:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8001dee:	fb0e f005 	mul.w	r0, lr, r5
 8001df2:	4290      	cmp	r0, r2
 8001df4:	d908      	bls.n	8001e08 <__udivmoddi4+0x124>
 8001df6:	eb1c 0202 	adds.w	r2, ip, r2
 8001dfa:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8001dfe:	d202      	bcs.n	8001e06 <__udivmoddi4+0x122>
 8001e00:	4290      	cmp	r0, r2
 8001e02:	f200 80cb 	bhi.w	8001f9c <__udivmoddi4+0x2b8>
 8001e06:	4645      	mov	r5, r8
 8001e08:	1a12      	subs	r2, r2, r0
 8001e0a:	b2a4      	uxth	r4, r4
 8001e0c:	fbb2 f0f7 	udiv	r0, r2, r7
 8001e10:	fb07 2210 	mls	r2, r7, r0, r2
 8001e14:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8001e18:	fb0e fe00 	mul.w	lr, lr, r0
 8001e1c:	45a6      	cmp	lr, r4
 8001e1e:	d908      	bls.n	8001e32 <__udivmoddi4+0x14e>
 8001e20:	eb1c 0404 	adds.w	r4, ip, r4
 8001e24:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8001e28:	d202      	bcs.n	8001e30 <__udivmoddi4+0x14c>
 8001e2a:	45a6      	cmp	lr, r4
 8001e2c:	f200 80bb 	bhi.w	8001fa6 <__udivmoddi4+0x2c2>
 8001e30:	4610      	mov	r0, r2
 8001e32:	eba4 040e 	sub.w	r4, r4, lr
 8001e36:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8001e3a:	e79f      	b.n	8001d7c <__udivmoddi4+0x98>
 8001e3c:	f1c1 0720 	rsb	r7, r1, #32
 8001e40:	408b      	lsls	r3, r1
 8001e42:	fa22 fc07 	lsr.w	ip, r2, r7
 8001e46:	ea4c 0c03 	orr.w	ip, ip, r3
 8001e4a:	fa05 f401 	lsl.w	r4, r5, r1
 8001e4e:	fa20 f307 	lsr.w	r3, r0, r7
 8001e52:	40fd      	lsrs	r5, r7
 8001e54:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8001e58:	4323      	orrs	r3, r4
 8001e5a:	fbb5 f8f9 	udiv	r8, r5, r9
 8001e5e:	fa1f fe8c 	uxth.w	lr, ip
 8001e62:	fb09 5518 	mls	r5, r9, r8, r5
 8001e66:	0c1c      	lsrs	r4, r3, #16
 8001e68:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8001e6c:	fb08 f50e 	mul.w	r5, r8, lr
 8001e70:	42a5      	cmp	r5, r4
 8001e72:	fa02 f201 	lsl.w	r2, r2, r1
 8001e76:	fa00 f001 	lsl.w	r0, r0, r1
 8001e7a:	d90b      	bls.n	8001e94 <__udivmoddi4+0x1b0>
 8001e7c:	eb1c 0404 	adds.w	r4, ip, r4
 8001e80:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8001e84:	f080 8088 	bcs.w	8001f98 <__udivmoddi4+0x2b4>
 8001e88:	42a5      	cmp	r5, r4
 8001e8a:	f240 8085 	bls.w	8001f98 <__udivmoddi4+0x2b4>
 8001e8e:	f1a8 0802 	sub.w	r8, r8, #2
 8001e92:	4464      	add	r4, ip
 8001e94:	1b64      	subs	r4, r4, r5
 8001e96:	b29d      	uxth	r5, r3
 8001e98:	fbb4 f3f9 	udiv	r3, r4, r9
 8001e9c:	fb09 4413 	mls	r4, r9, r3, r4
 8001ea0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8001ea4:	fb03 fe0e 	mul.w	lr, r3, lr
 8001ea8:	45a6      	cmp	lr, r4
 8001eaa:	d908      	bls.n	8001ebe <__udivmoddi4+0x1da>
 8001eac:	eb1c 0404 	adds.w	r4, ip, r4
 8001eb0:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8001eb4:	d26c      	bcs.n	8001f90 <__udivmoddi4+0x2ac>
 8001eb6:	45a6      	cmp	lr, r4
 8001eb8:	d96a      	bls.n	8001f90 <__udivmoddi4+0x2ac>
 8001eba:	3b02      	subs	r3, #2
 8001ebc:	4464      	add	r4, ip
 8001ebe:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8001ec2:	fba3 9502 	umull	r9, r5, r3, r2
 8001ec6:	eba4 040e 	sub.w	r4, r4, lr
 8001eca:	42ac      	cmp	r4, r5
 8001ecc:	46c8      	mov	r8, r9
 8001ece:	46ae      	mov	lr, r5
 8001ed0:	d356      	bcc.n	8001f80 <__udivmoddi4+0x29c>
 8001ed2:	d053      	beq.n	8001f7c <__udivmoddi4+0x298>
 8001ed4:	b156      	cbz	r6, 8001eec <__udivmoddi4+0x208>
 8001ed6:	ebb0 0208 	subs.w	r2, r0, r8
 8001eda:	eb64 040e 	sbc.w	r4, r4, lr
 8001ede:	fa04 f707 	lsl.w	r7, r4, r7
 8001ee2:	40ca      	lsrs	r2, r1
 8001ee4:	40cc      	lsrs	r4, r1
 8001ee6:	4317      	orrs	r7, r2
 8001ee8:	e9c6 7400 	strd	r7, r4, [r6]
 8001eec:	4618      	mov	r0, r3
 8001eee:	2100      	movs	r1, #0
 8001ef0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001ef4:	f1c3 0120 	rsb	r1, r3, #32
 8001ef8:	fa02 fc03 	lsl.w	ip, r2, r3
 8001efc:	fa20 f201 	lsr.w	r2, r0, r1
 8001f00:	fa25 f101 	lsr.w	r1, r5, r1
 8001f04:	409d      	lsls	r5, r3
 8001f06:	432a      	orrs	r2, r5
 8001f08:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8001f0c:	fa1f fe8c 	uxth.w	lr, ip
 8001f10:	fbb1 f0f7 	udiv	r0, r1, r7
 8001f14:	fb07 1510 	mls	r5, r7, r0, r1
 8001f18:	0c11      	lsrs	r1, r2, #16
 8001f1a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8001f1e:	fb00 f50e 	mul.w	r5, r0, lr
 8001f22:	428d      	cmp	r5, r1
 8001f24:	fa04 f403 	lsl.w	r4, r4, r3
 8001f28:	d908      	bls.n	8001f3c <__udivmoddi4+0x258>
 8001f2a:	eb1c 0101 	adds.w	r1, ip, r1
 8001f2e:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8001f32:	d22f      	bcs.n	8001f94 <__udivmoddi4+0x2b0>
 8001f34:	428d      	cmp	r5, r1
 8001f36:	d92d      	bls.n	8001f94 <__udivmoddi4+0x2b0>
 8001f38:	3802      	subs	r0, #2
 8001f3a:	4461      	add	r1, ip
 8001f3c:	1b49      	subs	r1, r1, r5
 8001f3e:	b292      	uxth	r2, r2
 8001f40:	fbb1 f5f7 	udiv	r5, r1, r7
 8001f44:	fb07 1115 	mls	r1, r7, r5, r1
 8001f48:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8001f4c:	fb05 f10e 	mul.w	r1, r5, lr
 8001f50:	4291      	cmp	r1, r2
 8001f52:	d908      	bls.n	8001f66 <__udivmoddi4+0x282>
 8001f54:	eb1c 0202 	adds.w	r2, ip, r2
 8001f58:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8001f5c:	d216      	bcs.n	8001f8c <__udivmoddi4+0x2a8>
 8001f5e:	4291      	cmp	r1, r2
 8001f60:	d914      	bls.n	8001f8c <__udivmoddi4+0x2a8>
 8001f62:	3d02      	subs	r5, #2
 8001f64:	4462      	add	r2, ip
 8001f66:	1a52      	subs	r2, r2, r1
 8001f68:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8001f6c:	e738      	b.n	8001de0 <__udivmoddi4+0xfc>
 8001f6e:	4631      	mov	r1, r6
 8001f70:	4630      	mov	r0, r6
 8001f72:	e708      	b.n	8001d86 <__udivmoddi4+0xa2>
 8001f74:	4639      	mov	r1, r7
 8001f76:	e6e6      	b.n	8001d46 <__udivmoddi4+0x62>
 8001f78:	4610      	mov	r0, r2
 8001f7a:	e6fb      	b.n	8001d74 <__udivmoddi4+0x90>
 8001f7c:	4548      	cmp	r0, r9
 8001f7e:	d2a9      	bcs.n	8001ed4 <__udivmoddi4+0x1f0>
 8001f80:	ebb9 0802 	subs.w	r8, r9, r2
 8001f84:	eb65 0e0c 	sbc.w	lr, r5, ip
 8001f88:	3b01      	subs	r3, #1
 8001f8a:	e7a3      	b.n	8001ed4 <__udivmoddi4+0x1f0>
 8001f8c:	4645      	mov	r5, r8
 8001f8e:	e7ea      	b.n	8001f66 <__udivmoddi4+0x282>
 8001f90:	462b      	mov	r3, r5
 8001f92:	e794      	b.n	8001ebe <__udivmoddi4+0x1da>
 8001f94:	4640      	mov	r0, r8
 8001f96:	e7d1      	b.n	8001f3c <__udivmoddi4+0x258>
 8001f98:	46d0      	mov	r8, sl
 8001f9a:	e77b      	b.n	8001e94 <__udivmoddi4+0x1b0>
 8001f9c:	3d02      	subs	r5, #2
 8001f9e:	4462      	add	r2, ip
 8001fa0:	e732      	b.n	8001e08 <__udivmoddi4+0x124>
 8001fa2:	4608      	mov	r0, r1
 8001fa4:	e70a      	b.n	8001dbc <__udivmoddi4+0xd8>
 8001fa6:	4464      	add	r4, ip
 8001fa8:	3802      	subs	r0, #2
 8001faa:	e742      	b.n	8001e32 <__udivmoddi4+0x14e>

08001fac <DMXReceiver::Run(short&)>:
 8001fac:	4b23      	ldr	r3, [pc, #140]	; (800203c <DMXReceiver::Run(short&)+0x90>)
 8001fae:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8001fb0:	460d      	mov	r5, r1
 8001fb2:	7819      	ldrb	r1, [r3, #0]
 8001fb4:	4606      	mov	r6, r0
 8001fb6:	b121      	cbz	r1, 8001fc2 <DMXReceiver::Run(short&)+0x16>
 8001fb8:	2400      	movs	r4, #0
 8001fba:	802c      	strh	r4, [r5, #0]
 8001fbc:	4620      	mov	r0, r4
 8001fbe:	b002      	add	sp, #8
 8001fc0:	bd70      	pop	{r4, r5, r6, pc}
 8001fc2:	9101      	str	r1, [sp, #4]
 8001fc4:	f001 fdd2 	bl	8003b6c <Dmx::GetUpdatesPerSecond(unsigned int)>
 8001fc8:	9901      	ldr	r1, [sp, #4]
 8001fca:	4604      	mov	r4, r0
 8001fcc:	b998      	cbnz	r0, 8001ff6 <DMXReceiver::Run(short&)+0x4a>
 8001fce:	4e1c      	ldr	r6, [pc, #112]	; (8002040 <DMXReceiver::Run(short&)+0x94>)
 8001fd0:	7833      	ldrb	r3, [r6, #0]
 8001fd2:	b15b      	cbz	r3, 8001fec <DMXReceiver::Run(short&)+0x40>
 8001fd4:	4b1b      	ldr	r3, [pc, #108]	; (8002044 <DMXReceiver::Run(short&)+0x98>)
 8001fd6:	6818      	ldr	r0, [r3, #0]
 8001fd8:	6803      	ldr	r3, [r0, #0]
 8001fda:	4621      	mov	r1, r4
 8001fdc:	68db      	ldr	r3, [r3, #12]
 8001fde:	4798      	blx	r3
 8001fe0:	4b19      	ldr	r3, [pc, #100]	; (8002048 <DMXReceiver::Run(short&)+0x9c>)
 8001fe2:	7034      	strb	r4, [r6, #0]
 8001fe4:	6818      	ldr	r0, [r3, #0]
 8001fe6:	2102      	movs	r1, #2
 8001fe8:	f005 ff6d 	bl	8007ec6 <Hardware::SetMode(hardware::ledblink::Mode)>
 8001fec:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001ff0:	802b      	strh	r3, [r5, #0]
 8001ff2:	2400      	movs	r4, #0
 8001ff4:	e7e2      	b.n	8001fbc <DMXReceiver::Run(short&)+0x10>
 8001ff6:	4630      	mov	r0, r6
 8001ff8:	9101      	str	r1, [sp, #4]
 8001ffa:	f001 fda3 	bl	8003b44 <Dmx::GetDmxAvailable(unsigned int)>
 8001ffe:	2800      	cmp	r0, #0
 8002000:	d0da      	beq.n	8001fb8 <DMXReceiver::Run(short&)+0xc>
 8002002:	4e10      	ldr	r6, [pc, #64]	; (8002044 <DMXReceiver::Run(short&)+0x98>)
 8002004:	f8d0 3204 	ldr.w	r3, [r0, #516]	; 0x204
 8002008:	802b      	strh	r3, [r5, #0]
 800200a:	1c44      	adds	r4, r0, #1
 800200c:	6830      	ldr	r0, [r6, #0]
 800200e:	9901      	ldr	r1, [sp, #4]
 8002010:	6802      	ldr	r2, [r0, #0]
 8002012:	b29b      	uxth	r3, r3
 8002014:	6915      	ldr	r5, [r2, #16]
 8002016:	4622      	mov	r2, r4
 8002018:	47a8      	blx	r5
 800201a:	4d09      	ldr	r5, [pc, #36]	; (8002040 <DMXReceiver::Run(short&)+0x94>)
 800201c:	7829      	ldrb	r1, [r5, #0]
 800201e:	2900      	cmp	r1, #0
 8002020:	d1cc      	bne.n	8001fbc <DMXReceiver::Run(short&)+0x10>
 8002022:	6830      	ldr	r0, [r6, #0]
 8002024:	6803      	ldr	r3, [r0, #0]
 8002026:	689b      	ldr	r3, [r3, #8]
 8002028:	4798      	blx	r3
 800202a:	2301      	movs	r3, #1
 800202c:	702b      	strb	r3, [r5, #0]
 800202e:	4b06      	ldr	r3, [pc, #24]	; (8002048 <DMXReceiver::Run(short&)+0x9c>)
 8002030:	2103      	movs	r1, #3
 8002032:	6818      	ldr	r0, [r3, #0]
 8002034:	f005 ff47 	bl	8007ec6 <Hardware::SetMode(hardware::ledblink::Mode)>
 8002038:	e7c0      	b.n	8001fbc <DMXReceiver::Run(short&)+0x10>
 800203a:	bf00      	nop
 800203c:	200001a4 	andcs	r0, r0, r4, lsr #3
 8002040:	2000019c 	mulcs	r0, ip, r1
 8002044:	200001a0 	andcs	r0, r0, r0, lsr #3
 8002048:	20001770 	andcs	r1, r0, r0, ror r7

0800204c <RDMResponder::HandleResponse(unsigned char*)>:
 800204c:	780a      	ldrb	r2, [r1, #0]
 800204e:	2acc      	cmp	r2, #204	; 0xcc
 8002050:	b510      	push	{r4, lr}
 8002052:	d107      	bne.n	8002064 <RDMResponder::HandleResponse(unsigned char*)+0x18>
 8002054:	788c      	ldrb	r4, [r1, #2]
 8002056:	3402      	adds	r4, #2
 8002058:	4622      	mov	r2, r4
 800205a:	2000      	movs	r0, #0
 800205c:	f001 fde6 	bl	8003c2c <Rdm::SendRawRespondMessage(unsigned int, unsigned char const*, unsigned int)>
 8002060:	4620      	mov	r0, r4
 8002062:	bd10      	pop	{r4, pc}
 8002064:	2afe      	cmp	r2, #254	; 0xfe
 8002066:	d105      	bne.n	8002074 <RDMResponder::HandleResponse(unsigned char*)+0x28>
 8002068:	2218      	movs	r2, #24
 800206a:	2000      	movs	r0, #0
 800206c:	f001 fdf2 	bl	8003c54 <Rdm::SendDiscoveryRespondMessage(unsigned int, unsigned char const*, unsigned int)>
 8002070:	2418      	movs	r4, #24
 8002072:	e7f5      	b.n	8002060 <RDMResponder::HandleResponse(unsigned char*)+0x14>
 8002074:	f06f 0402 	mvn.w	r4, #2
 8002078:	e7f2      	b.n	8002060 <RDMResponder::HandleResponse(unsigned char*)+0x14>
	...

0800207c <RDMResponder::Run()>:
 800207c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800207e:	4604      	mov	r4, r0
 8002080:	f10d 0106 	add.w	r1, sp, #6
 8002084:	30cc      	adds	r0, #204	; 0xcc
 8002086:	f7ff ff91 	bl	8001fac <DMXReceiver::Run(short&)>
 800208a:	4e1f      	ldr	r6, [pc, #124]	; (8002108 <RDMResponder::Run()+0x8c>)
 800208c:	4601      	mov	r1, r0
 800208e:	6830      	ldr	r0, [r6, #0]
 8002090:	8883      	ldrh	r3, [r0, #4]
 8002092:	b153      	cbz	r3, 80020aa <RDMResponder::Run()+0x2e>
 8002094:	f9bd 2006 	ldrsh.w	r2, [sp, #6]
 8002098:	1c53      	adds	r3, r2, #1
 800209a:	d120      	bne.n	80020de <RDMResponder::Run()+0x62>
 800209c:	4d1b      	ldr	r5, [pc, #108]	; (800210c <RDMResponder::Run()+0x90>)
 800209e:	782b      	ldrb	r3, [r5, #0]
 80020a0:	b11b      	cbz	r3, 80020aa <RDMResponder::Run()+0x2e>
 80020a2:	f001 f8c1 	bl	8003228 <RDMSubDevices::Stop()>
 80020a6:	2300      	movs	r3, #0
 80020a8:	702b      	strb	r3, [r5, #0]
 80020aa:	2000      	movs	r0, #0
 80020ac:	f001 f96e 	bl	800338c <Rdm::Receive(unsigned int)>
 80020b0:	b198      	cbz	r0, 80020da <RDMResponder::Run()+0x5e>
 80020b2:	7803      	ldrb	r3, [r0, #0]
 80020b4:	2bcc      	cmp	r3, #204	; 0xcc
 80020b6:	d120      	bne.n	80020fa <RDMResponder::Run()+0x7e>
 80020b8:	7d03      	ldrb	r3, [r0, #20]
 80020ba:	2b20      	cmp	r3, #32
 80020bc:	d003      	beq.n	80020c6 <RDMResponder::Run()+0x4a>
 80020be:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80020c2:	2b10      	cmp	r3, #16
 80020c4:	d11c      	bne.n	8002100 <RDMResponder::Run()+0x84>
 80020c6:	1c41      	adds	r1, r0, #1
 80020c8:	4a11      	ldr	r2, [pc, #68]	; (8002110 <RDMResponder::Run()+0x94>)
 80020ca:	f104 00e8 	add.w	r0, r4, #232	; 0xe8
 80020ce:	f002 ff37 	bl	8004f40 <RDMHandler::HandleData(unsigned char const*, unsigned char*)>
 80020d2:	490f      	ldr	r1, [pc, #60]	; (8002110 <RDMResponder::Run()+0x94>)
 80020d4:	4620      	mov	r0, r4
 80020d6:	f7ff ffb9 	bl	800204c <RDMResponder::HandleResponse(unsigned char*)>
 80020da:	b002      	add	sp, #8
 80020dc:	bd70      	pop	{r4, r5, r6, pc}
 80020de:	2900      	cmp	r1, #0
 80020e0:	d0e3      	beq.n	80020aa <RDMResponder::Run()+0x2e>
 80020e2:	4d0a      	ldr	r5, [pc, #40]	; (800210c <RDMResponder::Run()+0x90>)
 80020e4:	b292      	uxth	r2, r2
 80020e6:	f001 f8af 	bl	8003248 <RDMSubDevices::SetData(unsigned char const*, unsigned int)>
 80020ea:	782b      	ldrb	r3, [r5, #0]
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d1dc      	bne.n	80020aa <RDMResponder::Run()+0x2e>
 80020f0:	6830      	ldr	r0, [r6, #0]
 80020f2:	f001 f889 	bl	8003208 <RDMSubDevices::Start()>
 80020f6:	2301      	movs	r3, #1
 80020f8:	e7d6      	b.n	80020a8 <RDMResponder::Run()+0x2c>
 80020fa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80020fe:	e7ec      	b.n	80020da <RDMResponder::Run()+0x5e>
 8002100:	f06f 0001 	mvn.w	r0, #1
 8002104:	e7e9      	b.n	80020da <RDMResponder::Run()+0x5e>
 8002106:	bf00      	nop
 8002108:	20000198 	mulcs	r0, r8, r1
 800210c:	2000018d 	andcs	r0, r0, sp, lsl #3
 8002110:	2000008c 	andcs	r0, r0, ip, lsl #1

08002114 <CpuTemperature::Initialize()>:
 8002114:	2001      	movs	r0, #1
 8002116:	4770      	bx	lr

08002118 <CpuTemperature::~CpuTemperature()>:
 8002118:	4770      	bx	lr

0800211a <CpuTemperature::GetValue()>:
 800211a:	b508      	push	{r3, lr}
 800211c:	f007 f95c 	bl	80093d8 <gd32_adc_gettemp()>
 8002120:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8002124:	ee10 3a10 	vmov	r3, s0
 8002128:	b218      	sxth	r0, r3
 800212a:	bd08      	pop	{r3, pc}

0800212c <CpuTemperature::~CpuTemperature()>:
 800212c:	b510      	push	{r4, lr}
 800212e:	4604      	mov	r4, r0
 8002130:	f006 f92b 	bl	800838a <operator delete(void*)>
 8002134:	4620      	mov	r0, r4
 8002136:	bd10      	pop	{r4, pc}

08002138 <RDMSensors::~RDMSensors()>:
 8002138:	b570      	push	{r4, r5, r6, lr}
 800213a:	2500      	movs	r5, #0
 800213c:	4604      	mov	r4, r0
 800213e:	462e      	mov	r6, r5
 8002140:	7923      	ldrb	r3, [r4, #4]
 8002142:	6820      	ldr	r0, [r4, #0]
 8002144:	42ab      	cmp	r3, r5
 8002146:	d804      	bhi.n	8002152 <RDMSensors::~RDMSensors()+0x1a>
 8002148:	b108      	cbz	r0, 800214e <RDMSensors::~RDMSensors()+0x16>
 800214a:	f006 f920 	bl	800838e <operator delete[](void*)>
 800214e:	4620      	mov	r0, r4
 8002150:	bd70      	pop	{r4, r5, r6, pc}
 8002152:	f850 0025 	ldr.w	r0, [r0, r5, lsl #2]
 8002156:	b128      	cbz	r0, 8002164 <RDMSensors::~RDMSensors()+0x2c>
 8002158:	6803      	ldr	r3, [r0, #0]
 800215a:	685b      	ldr	r3, [r3, #4]
 800215c:	4798      	blx	r3
 800215e:	6823      	ldr	r3, [r4, #0]
 8002160:	f843 6025 	str.w	r6, [r3, r5, lsl #2]
 8002164:	3501      	adds	r5, #1
 8002166:	e7eb      	b.n	8002140 <RDMSensors::~RDMSensors()+0x8>

08002168 <RDMSensors::GetDefintion(unsigned char)>:
 8002168:	6803      	ldr	r3, [r0, #0]
 800216a:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
 800216e:	3006      	adds	r0, #6
 8002170:	4770      	bx	lr

08002172 <RDMSensors::GetValues(unsigned char)>:
 8002172:	6803      	ldr	r3, [r0, #0]
 8002174:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
 8002178:	f000 bba2 	b.w	80028c0 <RDMSensor::GetValues()>

0800217c <RDMSensors::SetValues(unsigned char)>:
 800217c:	29ff      	cmp	r1, #255	; 0xff
 800217e:	b538      	push	{r3, r4, r5, lr}
 8002180:	4604      	mov	r4, r0
 8002182:	d010      	beq.n	80021a6 <RDMSensors::SetValues(unsigned char)+0x2a>
 8002184:	6803      	ldr	r3, [r0, #0]
 8002186:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
 800218a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800218e:	f000 bbac 	b.w	80028ea <RDMSensor::SetValues()>
 8002192:	6823      	ldr	r3, [r4, #0]
 8002194:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8002198:	f000 fba7 	bl	80028ea <RDMSensor::SetValues()>
 800219c:	3501      	adds	r5, #1
 800219e:	7923      	ldrb	r3, [r4, #4]
 80021a0:	42ab      	cmp	r3, r5
 80021a2:	d8f6      	bhi.n	8002192 <RDMSensors::SetValues(unsigned char)+0x16>
 80021a4:	bd38      	pop	{r3, r4, r5, pc}
 80021a6:	2500      	movs	r5, #0
 80021a8:	e7f9      	b.n	800219e <RDMSensors::SetValues(unsigned char)+0x22>

080021aa <RDMSensors::SetRecord(unsigned char)>:
 80021aa:	29ff      	cmp	r1, #255	; 0xff
 80021ac:	b538      	push	{r3, r4, r5, lr}
 80021ae:	4604      	mov	r4, r0
 80021b0:	d010      	beq.n	80021d4 <RDMSensors::SetRecord(unsigned char)+0x2a>
 80021b2:	6803      	ldr	r3, [r0, #0]
 80021b4:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
 80021b8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80021bc:	f000 bb9f 	b.w	80028fe <RDMSensor::Record()>
 80021c0:	6823      	ldr	r3, [r4, #0]
 80021c2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80021c6:	f000 fb9a 	bl	80028fe <RDMSensor::Record()>
 80021ca:	3501      	adds	r5, #1
 80021cc:	7923      	ldrb	r3, [r4, #4]
 80021ce:	42ab      	cmp	r3, r5
 80021d0:	d8f6      	bhi.n	80021c0 <RDMSensors::SetRecord(unsigned char)+0x16>
 80021d2:	bd38      	pop	{r3, r4, r5, pc}
 80021d4:	2500      	movs	r5, #0
 80021d6:	e7f9      	b.n	80021cc <RDMSensors::SetRecord(unsigned char)+0x22>

080021d8 <RDMSensors::Add(RDMSensor*)>:
 80021d8:	6803      	ldr	r3, [r0, #0]
 80021da:	b510      	push	{r4, lr}
 80021dc:	b143      	cbz	r3, 80021f0 <RDMSensors::Add(RDMSensor*)+0x18>
 80021de:	7902      	ldrb	r2, [r0, #4]
 80021e0:	2a10      	cmp	r2, #16
 80021e2:	d005      	beq.n	80021f0 <RDMSensors::Add(RDMSensor*)+0x18>
 80021e4:	1c54      	adds	r4, r2, #1
 80021e6:	7104      	strb	r4, [r0, #4]
 80021e8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 80021ec:	2001      	movs	r0, #1
 80021ee:	bd10      	pop	{r4, pc}
 80021f0:	2000      	movs	r0, #0
 80021f2:	e7fc      	b.n	80021ee <RDMSensors::Add(RDMSensor*)+0x16>

080021f4 <RDMSensors::RDMSensors()>:
 80021f4:	4b12      	ldr	r3, [pc, #72]	; (8002240 <RDMSensors::RDMSensors()+0x4c>)
 80021f6:	b570      	push	{r4, r5, r6, lr}
 80021f8:	2600      	movs	r6, #0
 80021fa:	4604      	mov	r4, r0
 80021fc:	6018      	str	r0, [r3, #0]
 80021fe:	6006      	str	r6, [r0, #0]
 8002200:	7106      	strb	r6, [r0, #4]
 8002202:	2040      	movs	r0, #64	; 0x40
 8002204:	f006 f8c7 	bl	8008396 <operator new[](unsigned int)>
 8002208:	6020      	str	r0, [r4, #0]
 800220a:	2040      	movs	r0, #64	; 0x40
 800220c:	f006 f8c1 	bl	8008392 <operator new(unsigned int)>
 8002210:	7921      	ldrb	r1, [r4, #4]
 8002212:	4605      	mov	r5, r0
 8002214:	f000 fb34 	bl	8002880 <RDMSensor::RDMSensor(unsigned char)>
 8002218:	4b0a      	ldr	r3, [pc, #40]	; (8002244 <RDMSensors::RDMSensors()+0x50>)
 800221a:	602b      	str	r3, [r5, #0]
 800221c:	4b0a      	ldr	r3, [pc, #40]	; (8002248 <RDMSensors::RDMSensors()+0x54>)
 800221e:	60ab      	str	r3, [r5, #8]
 8002220:	3354      	adds	r3, #84	; 0x54
 8002222:	60eb      	str	r3, [r5, #12]
 8002224:	4628      	mov	r0, r5
 8002226:	2355      	movs	r3, #85	; 0x55
 8002228:	4908      	ldr	r1, [pc, #32]	; (800224c <RDMSensors::RDMSensors()+0x58>)
 800222a:	822b      	strh	r3, [r5, #16]
 800222c:	71ee      	strb	r6, [r5, #7]
 800222e:	f000 fb39 	bl	80028a4 <RDMSensor::SetDescription(char const*)>
 8002232:	4629      	mov	r1, r5
 8002234:	4620      	mov	r0, r4
 8002236:	f7ff ffcf 	bl	80021d8 <RDMSensors::Add(RDMSensor*)>
 800223a:	4620      	mov	r0, r4
 800223c:	bd70      	pop	{r4, r5, r6, pc}
 800223e:	bf00      	nop
 8002240:	20000194 	mulcs	r0, r4, r1
 8002244:	0800a13c 	stmdaeq	r0, {r2, r3, r4, r5, r8, sp, pc}
 8002248:	ffd80001 			; <UNDEFINED> instruction: 0xffd80001
 800224c:	0800a12d 	stmdaeq	r0, {r0, r2, r3, r5, r8, sp, pc}

08002250 <RDMSensorBH170::Initialize()>:
 8002250:	f890 0048 	ldrb.w	r0, [r0, #72]	; 0x48
 8002254:	4770      	bx	lr

08002256 <RDMSensorMCP9808::Initialize()>:
 8002256:	f890 0048 	ldrb.w	r0, [r0, #72]	; 0x48
 800225a:	4770      	bx	lr

0800225c <RDMSensorHTU21DHumidity::Initialize()>:
 800225c:	f890 0048 	ldrb.w	r0, [r0, #72]	; 0x48
 8002260:	4770      	bx	lr

08002262 <RDMSensorHTU21DTemperature::Initialize()>:
 8002262:	f890 0048 	ldrb.w	r0, [r0, #72]	; 0x48
 8002266:	4770      	bx	lr

08002268 <RDMSensorINA219Current::Initialize()>:
 8002268:	f890 0048 	ldrb.w	r0, [r0, #72]	; 0x48
 800226c:	4770      	bx	lr

0800226e <RDMSensorINA219Power::Initialize()>:
 800226e:	f890 0048 	ldrb.w	r0, [r0, #72]	; 0x48
 8002272:	4770      	bx	lr

08002274 <RDMSensorINA219Voltage::Initialize()>:
 8002274:	f890 0048 	ldrb.w	r0, [r0, #72]	; 0x48
 8002278:	4770      	bx	lr

0800227a <RDMSensorSI7021Humidity::Initialize()>:
 800227a:	f890 0048 	ldrb.w	r0, [r0, #72]	; 0x48
 800227e:	4770      	bx	lr

08002280 <RDMSensorSI7021Temperature::Initialize()>:
 8002280:	f890 0048 	ldrb.w	r0, [r0, #72]	; 0x48
 8002284:	4770      	bx	lr

08002286 <RDMSensorThermistor::Initialize()>:
 8002286:	f890 0048 	ldrb.w	r0, [r0, #72]	; 0x48
 800228a:	4770      	bx	lr
 800228c:	0000      	movs	r0, r0
	...

08002290 <RDMSensorThermistor::GetValue()>:
 8002290:	b508      	push	{r3, lr}
 8002292:	3040      	adds	r0, #64	; 0x40
 8002294:	7e01      	ldrb	r1, [r0, #24]
 8002296:	f000 fe31 	bl	8002efc <MCP3424::GetVoltage(unsigned char)>
 800229a:	a11b      	add	r1, pc, #108	; (adr r1, 8002308 <RDMSensorThermistor::GetValue()+0x78>)
 800229c:	e9d1 0100 	ldrd	r0, r1, [r1]
 80022a0:	ec53 2b10 	vmov	r2, r3, d0
 80022a4:	f7fe fad0 	bl	8000848 <__aeabi_ddiv>
 80022a8:	f7fe fbb6 	bl	8000a18 <__aeabi_d2uiz>
 80022ac:	f5a0 4083 	sub.w	r0, r0, #16768	; 0x4180
 80022b0:	3820      	subs	r0, #32
 80022b2:	ee07 0a90 	vmov	s15, r0
 80022b6:	ed9f 0a10 	vldr	s0, [pc, #64]	; 80022f8 <RDMSensorThermistor::GetValue()+0x68>
 80022ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80022be:	ee87 0a80 	vdiv.f32	s0, s15, s0
 80022c2:	f006 f8ad 	bl	8008420 <logf>
 80022c6:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 80022fc <RDMSensorThermistor::GetValue()+0x6c>
 80022ca:	eec0 7a07 	vdiv.f32	s15, s0, s14
 80022ce:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8002300 <RDMSensorThermistor::GetValue()+0x70>
 80022d2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80022d6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80022da:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80022de:	ed9f 7a09 	vldr	s14, [pc, #36]	; 8002304 <RDMSensorThermistor::GetValue()+0x74>
 80022e2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80022e6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80022ea:	ee17 3a90 	vmov	r3, s15
 80022ee:	b218      	sxth	r0, r3
 80022f0:	bd08      	pop	{r3, pc}
 80022f2:	bf00      	nop
 80022f4:	f3af 8000 	nop.w
 80022f8:	461c4000 	ldrmi	r4, [ip], -r0
 80022fc:	4576e000 	ldrbmi	lr, [r6, #-0]!
 8002300:	3b5bcf0f 	blcc	96f5f44 <__exidx_end+0x16e9fd8>
 8002304:	43889333 	orrmi	r9, r8, #-872415232	; 0xcc000000
 8002308:	00000000 	andeq	r0, r0, r0
 800230c:	40e09a00 	rscmi	r9, r0, r0, lsl #20

08002310 <RDMSensorSI7021Temperature::GetValue()>:
 8002310:	b508      	push	{r3, lr}
 8002312:	3040      	adds	r0, #64	; 0x40
 8002314:	f000 fed8 	bl	80030c8 <sensor::SI7021::GetTemperature()>
 8002318:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800231c:	ee10 3a10 	vmov	r3, s0
 8002320:	b218      	sxth	r0, r3
 8002322:	bd08      	pop	{r3, pc}

08002324 <RDMSensorSI7021Humidity::GetValue()>:
 8002324:	b508      	push	{r3, lr}
 8002326:	3040      	adds	r0, #64	; 0x40
 8002328:	f000 fee2 	bl	80030f0 <sensor::SI7021::GetHumidity()>
 800232c:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8002330:	ee10 3a10 	vmov	r3, s0
 8002334:	b218      	sxth	r0, r3
 8002336:	bd08      	pop	{r3, pc}

08002338 <RDMSensorINA219Voltage::GetValue()>:
 8002338:	b508      	push	{r3, lr}
 800233a:	3040      	adds	r0, #64	; 0x40
 800233c:	f000 fcfa 	bl	8002d34 <sensor::INA219::GetBusVoltage()>
 8002340:	eddf 7a04 	vldr	s15, [pc, #16]	; 8002354 <RDMSensorINA219Voltage::GetValue()+0x1c>
 8002344:	ee20 0a27 	vmul.f32	s0, s0, s15
 8002348:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800234c:	ee10 3a10 	vmov	r3, s0
 8002350:	b218      	sxth	r0, r3
 8002352:	bd08      	pop	{r3, pc}
 8002354:	447a0000 	ldrbtmi	r0, [sl], #-0

08002358 <RDMSensorINA219Power::GetValue()>:
 8002358:	b508      	push	{r3, lr}
 800235a:	3040      	adds	r0, #64	; 0x40
 800235c:	f000 fcf8 	bl	8002d50 <sensor::INA219::GetBusPower()>
 8002360:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8002364:	ee10 3a10 	vmov	r3, s0
 8002368:	b218      	sxth	r0, r3
 800236a:	bd08      	pop	{r3, pc}

0800236c <RDMSensorINA219Current::GetValue()>:
 800236c:	b508      	push	{r3, lr}
 800236e:	3040      	adds	r0, #64	; 0x40
 8002370:	f000 fcc4 	bl	8002cfc <sensor::INA219::GetShuntCurrent()>
 8002374:	eddf 7a04 	vldr	s15, [pc, #16]	; 8002388 <RDMSensorINA219Current::GetValue()+0x1c>
 8002378:	ee20 0a27 	vmul.f32	s0, s0, s15
 800237c:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8002380:	ee10 3a10 	vmov	r3, s0
 8002384:	b218      	sxth	r0, r3
 8002386:	bd08      	pop	{r3, pc}
 8002388:	447a0000 	ldrbtmi	r0, [sl], #-0

0800238c <RDMSensorHTU21DTemperature::GetValue()>:
 800238c:	b508      	push	{r3, lr}
 800238e:	3040      	adds	r0, #64	; 0x40
 8002390:	f000 fb94 	bl	8002abc <sensor::HTU21D::GetTemperature()>
 8002394:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8002398:	ee10 3a10 	vmov	r3, s0
 800239c:	b218      	sxth	r0, r3
 800239e:	bd08      	pop	{r3, pc}

080023a0 <RDMSensorHTU21DHumidity::GetValue()>:
 80023a0:	b508      	push	{r3, lr}
 80023a2:	3040      	adds	r0, #64	; 0x40
 80023a4:	f000 fb9e 	bl	8002ae4 <sensor::HTU21D::GetHumidity()>
 80023a8:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 80023ac:	ee10 3a10 	vmov	r3, s0
 80023b0:	b218      	sxth	r0, r3
 80023b2:	bd08      	pop	{r3, pc}

080023b4 <RDMSensorMCP9808::GetValue()>:
 80023b4:	b508      	push	{r3, lr}
 80023b6:	3040      	adds	r0, #64	; 0x40
 80023b8:	f000 fe10 	bl	8002fdc <sensor::MCP9808::Get()>
 80023bc:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 80023c0:	ee10 3a10 	vmov	r3, s0
 80023c4:	b218      	sxth	r0, r3
 80023c6:	bd08      	pop	{r3, pc}

080023c8 <RDMSensorBH170::GetValue()>:
 80023c8:	b508      	push	{r3, lr}
 80023ca:	3040      	adds	r0, #64	; 0x40
 80023cc:	f000 faf0 	bl	80029b0 <sensor::BH170::Get()>
 80023d0:	f3c0 000e 	ubfx	r0, r0, #0, #15
 80023d4:	bd08      	pop	{r3, pc}

080023d6 <RDMSensorThermistor::~RDMSensorThermistor()>:
 80023d6:	4770      	bx	lr

080023d8 <RDMSensorThermistor::~RDMSensorThermistor()>:
 80023d8:	b510      	push	{r4, lr}
 80023da:	4604      	mov	r4, r0
 80023dc:	f005 ffd5 	bl	800838a <operator delete(void*)>
 80023e0:	4620      	mov	r0, r4
 80023e2:	bd10      	pop	{r4, pc}

080023e4 <RDMSensorSI7021Temperature::~RDMSensorSI7021Temperature()>:
 80023e4:	4770      	bx	lr

080023e6 <RDMSensorSI7021Temperature::~RDMSensorSI7021Temperature()>:
 80023e6:	b510      	push	{r4, lr}
 80023e8:	4604      	mov	r4, r0
 80023ea:	f005 ffce 	bl	800838a <operator delete(void*)>
 80023ee:	4620      	mov	r0, r4
 80023f0:	bd10      	pop	{r4, pc}

080023f2 <RDMSensorSI7021Humidity::~RDMSensorSI7021Humidity()>:
 80023f2:	4770      	bx	lr

080023f4 <RDMSensorSI7021Humidity::~RDMSensorSI7021Humidity()>:
 80023f4:	b510      	push	{r4, lr}
 80023f6:	4604      	mov	r4, r0
 80023f8:	f005 ffc7 	bl	800838a <operator delete(void*)>
 80023fc:	4620      	mov	r0, r4
 80023fe:	bd10      	pop	{r4, pc}

08002400 <RDMSensorINA219Voltage::~RDMSensorINA219Voltage()>:
 8002400:	4770      	bx	lr

08002402 <RDMSensorINA219Voltage::~RDMSensorINA219Voltage()>:
 8002402:	b510      	push	{r4, lr}
 8002404:	4604      	mov	r4, r0
 8002406:	f005 ffc0 	bl	800838a <operator delete(void*)>
 800240a:	4620      	mov	r0, r4
 800240c:	bd10      	pop	{r4, pc}

0800240e <RDMSensorINA219Power::~RDMSensorINA219Power()>:
 800240e:	4770      	bx	lr

08002410 <RDMSensorINA219Power::~RDMSensorINA219Power()>:
 8002410:	b510      	push	{r4, lr}
 8002412:	4604      	mov	r4, r0
 8002414:	f005 ffb9 	bl	800838a <operator delete(void*)>
 8002418:	4620      	mov	r0, r4
 800241a:	bd10      	pop	{r4, pc}

0800241c <RDMSensorINA219Current::~RDMSensorINA219Current()>:
 800241c:	4770      	bx	lr

0800241e <RDMSensorINA219Current::~RDMSensorINA219Current()>:
 800241e:	b510      	push	{r4, lr}
 8002420:	4604      	mov	r4, r0
 8002422:	f005 ffb2 	bl	800838a <operator delete(void*)>
 8002426:	4620      	mov	r0, r4
 8002428:	bd10      	pop	{r4, pc}

0800242a <RDMSensorHTU21DTemperature::~RDMSensorHTU21DTemperature()>:
 800242a:	4770      	bx	lr

0800242c <RDMSensorHTU21DTemperature::~RDMSensorHTU21DTemperature()>:
 800242c:	b510      	push	{r4, lr}
 800242e:	4604      	mov	r4, r0
 8002430:	f005 ffab 	bl	800838a <operator delete(void*)>
 8002434:	4620      	mov	r0, r4
 8002436:	bd10      	pop	{r4, pc}

08002438 <RDMSensorHTU21DHumidity::~RDMSensorHTU21DHumidity()>:
 8002438:	4770      	bx	lr

0800243a <RDMSensorHTU21DHumidity::~RDMSensorHTU21DHumidity()>:
 800243a:	b510      	push	{r4, lr}
 800243c:	4604      	mov	r4, r0
 800243e:	f005 ffa4 	bl	800838a <operator delete(void*)>
 8002442:	4620      	mov	r0, r4
 8002444:	bd10      	pop	{r4, pc}

08002446 <RDMSensorMCP9808::~RDMSensorMCP9808()>:
 8002446:	4770      	bx	lr

08002448 <RDMSensorMCP9808::~RDMSensorMCP9808()>:
 8002448:	b510      	push	{r4, lr}
 800244a:	4604      	mov	r4, r0
 800244c:	f005 ff9d 	bl	800838a <operator delete(void*)>
 8002450:	4620      	mov	r0, r4
 8002452:	bd10      	pop	{r4, pc}

08002454 <RDMSensorBH170::~RDMSensorBH170()>:
 8002454:	4770      	bx	lr

08002456 <RDMSensorBH170::~RDMSensorBH170()>:
 8002456:	b510      	push	{r4, lr}
 8002458:	4604      	mov	r4, r0
 800245a:	f005 ff96 	bl	800838a <operator delete(void*)>
 800245e:	4620      	mov	r0, r4
 8002460:	bd10      	pop	{r4, pc}
	...

08002464 <RDMSensorThermistor::RDMSensorThermistor(unsigned char, unsigned char, unsigned char)>:
 8002464:	b570      	push	{r4, r5, r6, lr}
 8002466:	4604      	mov	r4, r0
 8002468:	4616      	mov	r6, r2
 800246a:	461d      	mov	r5, r3
 800246c:	f000 fa08 	bl	8002880 <RDMSensor::RDMSensor(unsigned char)>
 8002470:	4631      	mov	r1, r6
 8002472:	f104 0040 	add.w	r0, r4, #64	; 0x40
 8002476:	f000 fcaf 	bl	8002dd8 <MCP3424::MCP3424(unsigned char)>
 800247a:	4b09      	ldr	r3, [pc, #36]	; (80024a0 <RDMSensorThermistor::RDMSensorThermistor(unsigned char, unsigned char, unsigned char)+0x3c>)
 800247c:	6023      	str	r3, [r4, #0]
 800247e:	2300      	movs	r3, #0
 8002480:	71e3      	strb	r3, [r4, #7]
 8002482:	4b08      	ldr	r3, [pc, #32]	; (80024a4 <RDMSensorThermistor::RDMSensorThermistor(unsigned char, unsigned char, unsigned char)+0x40>)
 8002484:	60a3      	str	r3, [r4, #8]
 8002486:	337c      	adds	r3, #124	; 0x7c
 8002488:	60e3      	str	r3, [r4, #12]
 800248a:	237d      	movs	r3, #125	; 0x7d
 800248c:	4620      	mov	r0, r4
 800248e:	4906      	ldr	r1, [pc, #24]	; (80024a8 <RDMSensorThermistor::RDMSensorThermistor(unsigned char, unsigned char, unsigned char)+0x44>)
 8002490:	f884 5058 	strb.w	r5, [r4, #88]	; 0x58
 8002494:	8223      	strh	r3, [r4, #16]
 8002496:	f000 fa05 	bl	80028a4 <RDMSensor::SetDescription(char const*)>
 800249a:	4620      	mov	r0, r4
 800249c:	bd70      	pop	{r4, r5, r6, pc}
 800249e:	bf00      	nop
 80024a0:	0800a22c 	stmdaeq	r0, {r2, r3, r5, r9, sp, pc}
 80024a4:	ffc90001 			; <UNDEFINED> instruction: 0xffc90001
 80024a8:	0800a23c 	stmdaeq	r0, {r2, r3, r4, r5, r9, sp, pc}

080024ac <RDMSensorsParams::RDMSensorsParams(RDMSensorsParamsStore*)>:
 80024ac:	b510      	push	{r4, lr}
 80024ae:	2234      	movs	r2, #52	; 0x34
 80024b0:	4604      	mov	r4, r0
 80024b2:	f840 1b04 	str.w	r1, [r0], #4
 80024b6:	2100      	movs	r1, #0
 80024b8:	f006 f81b 	bl	80084f2 <memset>
 80024bc:	4620      	mov	r0, r4
 80024be:	bd10      	pop	{r4, pc}

080024c0 <RDMSensorsParams::Load()>:
 80024c0:	b570      	push	{r4, r5, r6, lr}
 80024c2:	2600      	movs	r6, #0
 80024c4:	4604      	mov	r4, r0
 80024c6:	6046      	str	r6, [r0, #4]
 80024c8:	6800      	ldr	r0, [r0, #0]
 80024ca:	b140      	cbz	r0, 80024de <RDMSensorsParams::Load()+0x1e>
 80024cc:	6803      	ldr	r3, [r0, #0]
 80024ce:	1d25      	adds	r5, r4, #4
 80024d0:	68db      	ldr	r3, [r3, #12]
 80024d2:	4629      	mov	r1, r5
 80024d4:	4798      	blx	r3
 80024d6:	6863      	ldr	r3, [r4, #4]
 80024d8:	2b0f      	cmp	r3, #15
 80024da:	d801      	bhi.n	80024e0 <RDMSensorsParams::Load()+0x20>
 80024dc:	2001      	movs	r0, #1
 80024de:	bd70      	pop	{r4, r5, r6, pc}
 80024e0:	2234      	movs	r2, #52	; 0x34
 80024e2:	4631      	mov	r1, r6
 80024e4:	4628      	mov	r0, r5
 80024e6:	f006 f804 	bl	80084f2 <memset>
 80024ea:	e7f7      	b.n	80024dc <RDMSensorsParams::Load()+0x1c>

080024ec <RDMSensorsParams::Dump()>:
 80024ec:	4770      	bx	lr
	...

080024f0 <RDMSensorsParams::Add(RDMSensor*)>:
 80024f0:	b538      	push	{r3, r4, r5, lr}
 80024f2:	680b      	ldr	r3, [r1, #0]
 80024f4:	4608      	mov	r0, r1
 80024f6:	689b      	ldr	r3, [r3, #8]
 80024f8:	460c      	mov	r4, r1
 80024fa:	4798      	blx	r3
 80024fc:	4605      	mov	r5, r0
 80024fe:	b130      	cbz	r0, 800250e <RDMSensorsParams::Add(RDMSensor*)+0x1e>
 8002500:	4b05      	ldr	r3, [pc, #20]	; (8002518 <RDMSensorsParams::Add(RDMSensor*)+0x28>)
 8002502:	4621      	mov	r1, r4
 8002504:	6818      	ldr	r0, [r3, #0]
 8002506:	f7ff fe67 	bl	80021d8 <RDMSensors::Add(RDMSensor*)>
 800250a:	4628      	mov	r0, r5
 800250c:	bd38      	pop	{r3, r4, r5, pc}
 800250e:	6823      	ldr	r3, [r4, #0]
 8002510:	4620      	mov	r0, r4
 8002512:	685b      	ldr	r3, [r3, #4]
 8002514:	4798      	blx	r3
 8002516:	e7f8      	b.n	800250a <RDMSensorsParams::Add(RDMSensor*)+0x1a>
 8002518:	20000194 	mulcs	r0, r4, r1

0800251c <RDMSensorsParams::Set()>:
 800251c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002520:	f8df b358 	ldr.w	fp, [pc, #856]	; 800287c <RDMSensorsParams::Set()+0x360>
 8002524:	4605      	mov	r5, r0
 8002526:	4607      	mov	r7, r0
 8002528:	f04f 0800 	mov.w	r8, #0
 800252c:	686b      	ldr	r3, [r5, #4]
 800252e:	4543      	cmp	r3, r8
 8002530:	d801      	bhi.n	8002536 <RDMSensorsParams::Set()+0x1a>
 8002532:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002536:	4bb7      	ldr	r3, [pc, #732]	; (8002814 <RDMSensorsParams::Set()+0x2f8>)
 8002538:	7a7e      	ldrb	r6, [r7, #9]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	791c      	ldrb	r4, [r3, #4]
 800253e:	7a3b      	ldrb	r3, [r7, #8]
 8002540:	2b05      	cmp	r3, #5
 8002542:	d868      	bhi.n	8002616 <RDMSensorsParams::Set()+0xfa>
 8002544:	e8df f013 	tbh	[pc, r3, lsl #1]
 8002548:	00250006 	eoreq	r0, r5, r6
 800254c:	00d5006b 	sbcseq	r0, r5, fp, rrx
 8002550:	012e00f0 	strdeq	r0, [lr, -r0]!	; <UNPREDICTABLE>
 8002554:	204c      	movs	r0, #76	; 0x4c
 8002556:	f005 ff1c 	bl	8008392 <operator new(unsigned int)>
 800255a:	4621      	mov	r1, r4
 800255c:	4681      	mov	r9, r0
 800255e:	f000 f98f 	bl	8002880 <RDMSensor::RDMSensor(unsigned char)>
 8002562:	4631      	mov	r1, r6
 8002564:	f109 0040 	add.w	r0, r9, #64	; 0x40
 8002568:	f000 f9ee 	bl	8002948 <sensor::BH170::BH170(unsigned char)>
 800256c:	4baa      	ldr	r3, [pc, #680]	; (8002818 <RDMSensorsParams::Set()+0x2fc>)
 800256e:	f8c9 3000 	str.w	r3, [r9]
 8002572:	2318      	movs	r3, #24
 8002574:	f889 3007 	strb.w	r3, [r9, #7]
 8002578:	241a      	movs	r4, #26
 800257a:	f647 73ff 	movw	r3, #32767	; 0x7fff
 800257e:	e9c9 4302 	strd	r4, r3, [r9, #8]
 8002582:	49a6      	ldr	r1, [pc, #664]	; (800281c <RDMSensorsParams::Set()+0x300>)
 8002584:	f8a9 3010 	strh.w	r3, [r9, #16]
 8002588:	4648      	mov	r0, r9
 800258a:	f000 f98b 	bl	80028a4 <RDMSensor::SetDescription(char const*)>
 800258e:	4649      	mov	r1, r9
 8002590:	e03e      	b.n	8002610 <RDMSensorsParams::Set()+0xf4>
 8002592:	204c      	movs	r0, #76	; 0x4c
 8002594:	f005 fefd 	bl	8008392 <operator new(unsigned int)>
 8002598:	4621      	mov	r1, r4
 800259a:	4682      	mov	sl, r0
 800259c:	f000 f970 	bl	8002880 <RDMSensor::RDMSensor(unsigned char)>
 80025a0:	4631      	mov	r1, r6
 80025a2:	f10a 0040 	add.w	r0, sl, #64	; 0x40
 80025a6:	f000 fa27 	bl	80029f8 <sensor::HTU21D::HTU21D(unsigned char)>
 80025aa:	4a9d      	ldr	r2, [pc, #628]	; (8002820 <RDMSensorsParams::Set()+0x304>)
 80025ac:	f8ca 2000 	str.w	r2, [sl]
 80025b0:	221f      	movs	r2, #31
 80025b2:	f88a 2007 	strb.w	r2, [sl, #7]
 80025b6:	f04f 0900 	mov.w	r9, #0
 80025ba:	2264      	movs	r2, #100	; 0x64
 80025bc:	4999      	ldr	r1, [pc, #612]	; (8002824 <RDMSensorsParams::Set()+0x308>)
 80025be:	f8aa 2010 	strh.w	r2, [sl, #16]
 80025c2:	4650      	mov	r0, sl
 80025c4:	e9ca 9202 	strd	r9, r2, [sl, #8]
 80025c8:	f000 f96c 	bl	80028a4 <RDMSensor::SetDescription(char const*)>
 80025cc:	4651      	mov	r1, sl
 80025ce:	4628      	mov	r0, r5
 80025d0:	f7ff ff8e 	bl	80024f0 <RDMSensorsParams::Add(RDMSensor*)>
 80025d4:	b1f8      	cbz	r0, 8002616 <RDMSensorsParams::Set()+0xfa>
 80025d6:	204c      	movs	r0, #76	; 0x4c
 80025d8:	f005 fedb 	bl	8008392 <operator new(unsigned int)>
 80025dc:	1c61      	adds	r1, r4, #1
 80025de:	4682      	mov	sl, r0
 80025e0:	b2c9      	uxtb	r1, r1
 80025e2:	f000 f94d 	bl	8002880 <RDMSensor::RDMSensor(unsigned char)>
 80025e6:	4631      	mov	r1, r6
 80025e8:	f10a 0040 	add.w	r0, sl, #64	; 0x40
 80025ec:	f000 fa04 	bl	80029f8 <sensor::HTU21D::HTU21D(unsigned char)>
 80025f0:	4b8d      	ldr	r3, [pc, #564]	; (8002828 <RDMSensorsParams::Set()+0x30c>)
 80025f2:	4a8e      	ldr	r2, [pc, #568]	; (800282c <RDMSensorsParams::Set()+0x310>)
 80025f4:	f8ca 2000 	str.w	r2, [sl]
 80025f8:	e9ca 3b02 	strd	r3, fp, [sl, #8]
 80025fc:	227d      	movs	r2, #125	; 0x7d
 80025fe:	498c      	ldr	r1, [pc, #560]	; (8002830 <RDMSensorsParams::Set()+0x314>)
 8002600:	f88a 9007 	strb.w	r9, [sl, #7]
 8002604:	f8aa 2010 	strh.w	r2, [sl, #16]
 8002608:	4650      	mov	r0, sl
 800260a:	f000 f94b 	bl	80028a4 <RDMSensor::SetDescription(char const*)>
 800260e:	4651      	mov	r1, sl
 8002610:	4628      	mov	r0, r5
 8002612:	f7ff ff6d 	bl	80024f0 <RDMSensorsParams::Add(RDMSensor*)>
 8002616:	f108 0801 	add.w	r8, r8, #1
 800261a:	3703      	adds	r7, #3
 800261c:	e786      	b.n	800252c <RDMSensorsParams::Set()+0x10>
 800261e:	2060      	movs	r0, #96	; 0x60
 8002620:	f005 feb7 	bl	8008392 <operator new(unsigned int)>
 8002624:	4621      	mov	r1, r4
 8002626:	4682      	mov	sl, r0
 8002628:	f000 f92a 	bl	8002880 <RDMSensor::RDMSensor(unsigned char)>
 800262c:	4631      	mov	r1, r6
 800262e:	f10a 0040 	add.w	r0, sl, #64	; 0x40
 8002632:	f000 fb21 	bl	8002c78 <sensor::INA219::INA219(unsigned char)>
 8002636:	4a7f      	ldr	r2, [pc, #508]	; (8002834 <RDMSensorsParams::Set()+0x318>)
 8002638:	f8ca 2000 	str.w	r2, [sl]
 800263c:	4a7e      	ldr	r2, [pc, #504]	; (8002838 <RDMSensorsParams::Set()+0x31c>)
 800263e:	f8ca 2008 	str.w	r2, [sl, #8]
 8002642:	f202 42cb 	addw	r2, r2, #1227	; 0x4cb
 8002646:	f8ca 200c 	str.w	r2, [sl, #12]
 800264a:	f04f 0902 	mov.w	r9, #2
 800264e:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8002652:	497a      	ldr	r1, [pc, #488]	; (800283c <RDMSensorsParams::Set()+0x320>)
 8002654:	f88a 9007 	strb.w	r9, [sl, #7]
 8002658:	4650      	mov	r0, sl
 800265a:	f8aa 2010 	strh.w	r2, [sl, #16]
 800265e:	f000 f921 	bl	80028a4 <RDMSensor::SetDescription(char const*)>
 8002662:	4651      	mov	r1, sl
 8002664:	4628      	mov	r0, r5
 8002666:	f7ff ff43 	bl	80024f0 <RDMSensorsParams::Add(RDMSensor*)>
 800266a:	2800      	cmp	r0, #0
 800266c:	d0d3      	beq.n	8002616 <RDMSensorsParams::Set()+0xfa>
 800266e:	2060      	movs	r0, #96	; 0x60
 8002670:	f005 fe8f 	bl	8008392 <operator new(unsigned int)>
 8002674:	1c61      	adds	r1, r4, #1
 8002676:	4682      	mov	sl, r0
 8002678:	b2c9      	uxtb	r1, r1
 800267a:	f000 f901 	bl	8002880 <RDMSensor::RDMSensor(unsigned char)>
 800267e:	4631      	mov	r1, r6
 8002680:	f10a 0040 	add.w	r0, sl, #64	; 0x40
 8002684:	f000 faf8 	bl	8002c78 <sensor::INA219::INA219(unsigned char)>
 8002688:	4a6d      	ldr	r2, [pc, #436]	; (8002840 <RDMSensorsParams::Set()+0x324>)
 800268a:	f8ca 2000 	str.w	r2, [sl]
 800268e:	4a6d      	ldr	r2, [pc, #436]	; (8002844 <RDMSensorsParams::Set()+0x328>)
 8002690:	f8ca 2008 	str.w	r2, [sl, #8]
 8002694:	f46f 7131 	mvn.w	r1, #708	; 0x2c4
 8002698:	440a      	add	r2, r1
 800269a:	f8ca 200c 	str.w	r2, [sl, #12]
 800269e:	2240      	movs	r2, #64	; 0x40
 80026a0:	f8aa 2010 	strh.w	r2, [sl, #16]
 80026a4:	4650      	mov	r0, sl
 80026a6:	4968      	ldr	r1, [pc, #416]	; (8002848 <RDMSensorsParams::Set()+0x32c>)
 80026a8:	f88a 9007 	strb.w	r9, [sl, #7]
 80026ac:	f000 f8fa 	bl	80028a4 <RDMSensor::SetDescription(char const*)>
 80026b0:	4651      	mov	r1, sl
 80026b2:	4628      	mov	r0, r5
 80026b4:	f7ff ff1c 	bl	80024f0 <RDMSensorsParams::Add(RDMSensor*)>
 80026b8:	2060      	movs	r0, #96	; 0x60
 80026ba:	f005 fe6a 	bl	8008392 <operator new(unsigned int)>
 80026be:	eb04 0109 	add.w	r1, r4, r9
 80026c2:	4682      	mov	sl, r0
 80026c4:	b2c9      	uxtb	r1, r1
 80026c6:	f000 f8db 	bl	8002880 <RDMSensor::RDMSensor(unsigned char)>
 80026ca:	4631      	mov	r1, r6
 80026cc:	f10a 0040 	add.w	r0, sl, #64	; 0x40
 80026d0:	f000 fad2 	bl	8002c78 <sensor::INA219::INA219(unsigned char)>
 80026d4:	4a5d      	ldr	r2, [pc, #372]	; (800284c <RDMSensorsParams::Set()+0x330>)
 80026d6:	485e      	ldr	r0, [pc, #376]	; (8002850 <RDMSensorsParams::Set()+0x334>)
 80026d8:	f8ca 2000 	str.w	r2, [sl]
 80026dc:	4a5d      	ldr	r2, [pc, #372]	; (8002854 <RDMSensorsParams::Set()+0x338>)
 80026de:	495e      	ldr	r1, [pc, #376]	; (8002858 <RDMSensorsParams::Set()+0x33c>)
 80026e0:	f88a 9007 	strb.w	r9, [sl, #7]
 80026e4:	e9ca 0202 	strd	r0, r2, [sl, #8]
 80026e8:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
 80026ec:	f8aa 2010 	strh.w	r2, [sl, #16]
 80026f0:	e78a      	b.n	8002608 <RDMSensorsParams::Set()+0xec>
 80026f2:	204c      	movs	r0, #76	; 0x4c
 80026f4:	f005 fe4d 	bl	8008392 <operator new(unsigned int)>
 80026f8:	4621      	mov	r1, r4
 80026fa:	4681      	mov	r9, r0
 80026fc:	f000 f8c0 	bl	8002880 <RDMSensor::RDMSensor(unsigned char)>
 8002700:	4631      	mov	r1, r6
 8002702:	f109 0040 	add.w	r0, r9, #64	; 0x40
 8002706:	f000 fc2b 	bl	8002f60 <sensor::MCP9808::MCP9808(unsigned char)>
 800270a:	4b54      	ldr	r3, [pc, #336]	; (800285c <RDMSensorsParams::Set()+0x340>)
 800270c:	f8c9 3000 	str.w	r3, [r9]
 8002710:	2300      	movs	r3, #0
 8002712:	4a53      	ldr	r2, [pc, #332]	; (8002860 <RDMSensorsParams::Set()+0x344>)
 8002714:	f889 3007 	strb.w	r3, [r9, #7]
 8002718:	4b52      	ldr	r3, [pc, #328]	; (8002864 <RDMSensorsParams::Set()+0x348>)
 800271a:	4953      	ldr	r1, [pc, #332]	; (8002868 <RDMSensorsParams::Set()+0x34c>)
 800271c:	e9c9 2302 	strd	r2, r3, [r9, #8]
 8002720:	2328      	movs	r3, #40	; 0x28
 8002722:	f8a9 3010 	strh.w	r3, [r9, #16]
 8002726:	e72f      	b.n	8002588 <RDMSensorsParams::Set()+0x6c>
 8002728:	204c      	movs	r0, #76	; 0x4c
 800272a:	f005 fe32 	bl	8008392 <operator new(unsigned int)>
 800272e:	4621      	mov	r1, r4
 8002730:	4682      	mov	sl, r0
 8002732:	f000 f8a5 	bl	8002880 <RDMSensor::RDMSensor(unsigned char)>
 8002736:	4631      	mov	r1, r6
 8002738:	f10a 0040 	add.w	r0, sl, #64	; 0x40
 800273c:	f000 fc62 	bl	8003004 <sensor::SI7021::SI7021(unsigned char)>
 8002740:	4a4a      	ldr	r2, [pc, #296]	; (800286c <RDMSensorsParams::Set()+0x350>)
 8002742:	f8ca 2000 	str.w	r2, [sl]
 8002746:	221f      	movs	r2, #31
 8002748:	f88a 2007 	strb.w	r2, [sl, #7]
 800274c:	f04f 0900 	mov.w	r9, #0
 8002750:	2264      	movs	r2, #100	; 0x64
 8002752:	4947      	ldr	r1, [pc, #284]	; (8002870 <RDMSensorsParams::Set()+0x354>)
 8002754:	f8aa 2010 	strh.w	r2, [sl, #16]
 8002758:	4650      	mov	r0, sl
 800275a:	e9ca 9202 	strd	r9, r2, [sl, #8]
 800275e:	f000 f8a1 	bl	80028a4 <RDMSensor::SetDescription(char const*)>
 8002762:	4651      	mov	r1, sl
 8002764:	4628      	mov	r0, r5
 8002766:	f7ff fec3 	bl	80024f0 <RDMSensorsParams::Add(RDMSensor*)>
 800276a:	2800      	cmp	r0, #0
 800276c:	f43f af53 	beq.w	8002616 <RDMSensorsParams::Set()+0xfa>
 8002770:	204c      	movs	r0, #76	; 0x4c
 8002772:	f005 fe0e 	bl	8008392 <operator new(unsigned int)>
 8002776:	1c61      	adds	r1, r4, #1
 8002778:	4682      	mov	sl, r0
 800277a:	b2c9      	uxtb	r1, r1
 800277c:	f000 f880 	bl	8002880 <RDMSensor::RDMSensor(unsigned char)>
 8002780:	4631      	mov	r1, r6
 8002782:	f10a 0040 	add.w	r0, sl, #64	; 0x40
 8002786:	f000 fc3d 	bl	8003004 <sensor::SI7021::SI7021(unsigned char)>
 800278a:	4a3a      	ldr	r2, [pc, #232]	; (8002874 <RDMSensorsParams::Set()+0x358>)
 800278c:	4b26      	ldr	r3, [pc, #152]	; (8002828 <RDMSensorsParams::Set()+0x30c>)
 800278e:	f8ca 2000 	str.w	r2, [sl]
 8002792:	227d      	movs	r2, #125	; 0x7d
 8002794:	e9ca 3b02 	strd	r3, fp, [sl, #8]
 8002798:	4937      	ldr	r1, [pc, #220]	; (8002878 <RDMSensorsParams::Set()+0x35c>)
 800279a:	f88a 9007 	strb.w	r9, [sl, #7]
 800279e:	f8aa 2010 	strh.w	r2, [sl, #16]
 80027a2:	e731      	b.n	8002608 <RDMSensorsParams::Set()+0xec>
 80027a4:	2060      	movs	r0, #96	; 0x60
 80027a6:	f005 fdf4 	bl	8008392 <operator new(unsigned int)>
 80027aa:	4621      	mov	r1, r4
 80027ac:	4681      	mov	r9, r0
 80027ae:	2300      	movs	r3, #0
 80027b0:	4632      	mov	r2, r6
 80027b2:	f7ff fe57 	bl	8002464 <RDMSensorThermistor::RDMSensorThermistor(unsigned char, unsigned char, unsigned char)>
 80027b6:	4649      	mov	r1, r9
 80027b8:	4628      	mov	r0, r5
 80027ba:	f7ff fe99 	bl	80024f0 <RDMSensorsParams::Add(RDMSensor*)>
 80027be:	2800      	cmp	r0, #0
 80027c0:	f43f af29 	beq.w	8002616 <RDMSensorsParams::Set()+0xfa>
 80027c4:	2060      	movs	r0, #96	; 0x60
 80027c6:	f005 fde4 	bl	8008392 <operator new(unsigned int)>
 80027ca:	1c61      	adds	r1, r4, #1
 80027cc:	4632      	mov	r2, r6
 80027ce:	2301      	movs	r3, #1
 80027d0:	4681      	mov	r9, r0
 80027d2:	b2c9      	uxtb	r1, r1
 80027d4:	f7ff fe46 	bl	8002464 <RDMSensorThermistor::RDMSensorThermistor(unsigned char, unsigned char, unsigned char)>
 80027d8:	4649      	mov	r1, r9
 80027da:	4628      	mov	r0, r5
 80027dc:	f7ff fe88 	bl	80024f0 <RDMSensorsParams::Add(RDMSensor*)>
 80027e0:	2060      	movs	r0, #96	; 0x60
 80027e2:	f005 fdd6 	bl	8008392 <operator new(unsigned int)>
 80027e6:	1ca1      	adds	r1, r4, #2
 80027e8:	4632      	mov	r2, r6
 80027ea:	2302      	movs	r3, #2
 80027ec:	4681      	mov	r9, r0
 80027ee:	b2c9      	uxtb	r1, r1
 80027f0:	f7ff fe38 	bl	8002464 <RDMSensorThermistor::RDMSensorThermistor(unsigned char, unsigned char, unsigned char)>
 80027f4:	4649      	mov	r1, r9
 80027f6:	4628      	mov	r0, r5
 80027f8:	f7ff fe7a 	bl	80024f0 <RDMSensorsParams::Add(RDMSensor*)>
 80027fc:	2060      	movs	r0, #96	; 0x60
 80027fe:	f005 fdc8 	bl	8008392 <operator new(unsigned int)>
 8002802:	1ce1      	adds	r1, r4, #3
 8002804:	2303      	movs	r3, #3
 8002806:	4632      	mov	r2, r6
 8002808:	b2c9      	uxtb	r1, r1
 800280a:	4681      	mov	r9, r0
 800280c:	f7ff fe2a 	bl	8002464 <RDMSensorThermistor::RDMSensorThermistor(unsigned char, unsigned char, unsigned char)>
 8002810:	e6bd      	b.n	800258e <RDMSensorsParams::Set()+0x72>
 8002812:	bf00      	nop
 8002814:	20000194 	mulcs	r0, r4, r1
 8002818:	0800a154 	stmdaeq	r0, {r2, r4, r6, r8, sp, pc}
 800281c:	0800a250 	stmdaeq	r0, {r4, r6, r9, sp, pc}
 8002820:	0800a184 	stmdaeq	r0, {r2, r7, r8, sp, pc}
 8002824:	0800a272 	stmdaeq	r0, {r1, r4, r5, r6, r9, sp, pc}
 8002828:	ffd80001 			; <UNDEFINED> instruction: 0xffd80001
 800282c:	0800a19c 	stmdaeq	r0, {r2, r3, r4, r7, r8, sp, pc}
 8002830:	0800a25e 	stmdaeq	r0, {r1, r2, r3, r4, r6, r9, sp, pc}
 8002834:	0800a1b4 	stmdaeq	r0, {r2, r4, r5, r7, r8, sp, pc}
 8002838:	f8300305 			; <UNDEFINED> instruction: 0xf8300305
 800283c:	0800a28a 	stmdaeq	r0, {r1, r3, r7, r9, sp, pc}
 8002840:	0800a1cc 	stmdaeq	r0, {r2, r3, r6, r7, r8, sp, pc}
 8002844:	ffc00305 			; <UNDEFINED> instruction: 0xffc00305
 8002848:	0800a284 	stmdaeq	r0, {r2, r7, r9, sp, pc}
 800284c:	0800a1e4 	stmdaeq	r0, {r2, r5, r6, r7, r8, sp, pc}
 8002850:	83000305 	movwhi	r0, #773	; 0x305
 8002854:	83007d00 	movwhi	r7, #3328	; 0xd00
 8002858:	0800a292 	stmdaeq	r0, {r1, r4, r7, r9, sp, pc}
 800285c:	0800a16c 	stmdaeq	r0, {r2, r3, r5, r6, r8, sp, pc}
 8002860:	ffec0001 			; <UNDEFINED> instruction: 0xffec0001
 8002864:	00120064 	andseq	r0, r2, r4, rrx
 8002868:	0800a2c0 	stmdaeq	r0, {r6, r7, r9, sp, pc}
 800286c:	0800a1fc 	stmdaeq	r0, {r2, r3, r4, r5, r6, r7, r8, sp, pc}
 8002870:	0800a2ae 	stmdaeq	r0, {r1, r2, r3, r5, r7, r9, sp, pc}
 8002874:	0800a214 	stmdaeq	r0, {r2, r4, r9, sp, pc}
 8002878:	0800a29a 	stmdaeq	r0, {r1, r3, r4, r7, r9, sp, pc}
 800287c:	ffd8007d 			; <UNDEFINED> instruction: 0xffd8007d

08002880 <RDMSensor::RDMSensor(unsigned char)>:
 8002880:	4a07      	ldr	r2, [pc, #28]	; (80028a0 <RDMSensor::RDMSensor(unsigned char)+0x20>)
 8002882:	6002      	str	r2, [r0, #0]
 8002884:	2203      	movs	r2, #3
 8002886:	f880 2033 	strb.w	r2, [r0, #51]	; 0x33
 800288a:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800288e:	86c2      	strh	r2, [r0, #54]	; 0x36
 8002890:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002894:	7101      	strb	r1, [r0, #4]
 8002896:	7181      	strb	r1, [r0, #6]
 8002898:	f880 103c 	strb.w	r1, [r0, #60]	; 0x3c
 800289c:	8702      	strh	r2, [r0, #56]	; 0x38
 800289e:	4770      	bx	lr
 80028a0:	0800a2dc 	stmdaeq	r0, {r2, r3, r4, r6, r7, r9, sp, pc}

080028a4 <RDMSensor::SetDescription(char const*)>:
 80028a4:	b510      	push	{r4, lr}
 80028a6:	2300      	movs	r3, #0
 80028a8:	f100 0411 	add.w	r4, r0, #17
 80028ac:	5cca      	ldrb	r2, [r1, r3]
 80028ae:	b122      	cbz	r2, 80028ba <RDMSensor::SetDescription(char const*)+0x16>
 80028b0:	3301      	adds	r3, #1
 80028b2:	2b20      	cmp	r3, #32
 80028b4:	f804 2f01 	strb.w	r2, [r4, #1]!
 80028b8:	d1f8      	bne.n	80028ac <RDMSensor::SetDescription(char const*)+0x8>
 80028ba:	f880 3032 	strb.w	r3, [r0, #50]	; 0x32
 80028be:	bd10      	pop	{r4, pc}

080028c0 <RDMSensor::GetValues()>:
 80028c0:	6803      	ldr	r3, [r0, #0]
 80028c2:	b510      	push	{r4, lr}
 80028c4:	68db      	ldr	r3, [r3, #12]
 80028c6:	4604      	mov	r4, r0
 80028c8:	4798      	blx	r3
 80028ca:	f9b4 3036 	ldrsh.w	r3, [r4, #54]	; 0x36
 80028ce:	86a0      	strh	r0, [r4, #52]	; 0x34
 80028d0:	4283      	cmp	r3, r0
 80028d2:	bfa8      	it	ge
 80028d4:	4603      	movge	r3, r0
 80028d6:	86e3      	strh	r3, [r4, #54]	; 0x36
 80028d8:	f9b4 3038 	ldrsh.w	r3, [r4, #56]	; 0x38
 80028dc:	4283      	cmp	r3, r0
 80028de:	bfb8      	it	lt
 80028e0:	4603      	movlt	r3, r0
 80028e2:	8723      	strh	r3, [r4, #56]	; 0x38
 80028e4:	f104 0034 	add.w	r0, r4, #52	; 0x34
 80028e8:	bd10      	pop	{r4, pc}

080028ea <RDMSensor::SetValues()>:
 80028ea:	6803      	ldr	r3, [r0, #0]
 80028ec:	b510      	push	{r4, lr}
 80028ee:	68db      	ldr	r3, [r3, #12]
 80028f0:	4604      	mov	r4, r0
 80028f2:	4798      	blx	r3
 80028f4:	86a0      	strh	r0, [r4, #52]	; 0x34
 80028f6:	86e0      	strh	r0, [r4, #54]	; 0x36
 80028f8:	8720      	strh	r0, [r4, #56]	; 0x38
 80028fa:	8760      	strh	r0, [r4, #58]	; 0x3a
 80028fc:	bd10      	pop	{r4, pc}

080028fe <RDMSensor::Record()>:
 80028fe:	6803      	ldr	r3, [r0, #0]
 8002900:	b510      	push	{r4, lr}
 8002902:	68db      	ldr	r3, [r3, #12]
 8002904:	4604      	mov	r4, r0
 8002906:	4798      	blx	r3
 8002908:	f9b4 3036 	ldrsh.w	r3, [r4, #54]	; 0x36
 800290c:	86a0      	strh	r0, [r4, #52]	; 0x34
 800290e:	4283      	cmp	r3, r0
 8002910:	bfa8      	it	ge
 8002912:	4603      	movge	r3, r0
 8002914:	86e3      	strh	r3, [r4, #54]	; 0x36
 8002916:	f9b4 3038 	ldrsh.w	r3, [r4, #56]	; 0x38
 800291a:	8760      	strh	r0, [r4, #58]	; 0x3a
 800291c:	4283      	cmp	r3, r0
 800291e:	bfb8      	it	lt
 8002920:	4603      	movlt	r3, r0
 8002922:	8723      	strh	r3, [r4, #56]	; 0x38
 8002924:	bd10      	pop	{r4, pc}

08002926 <HAL_I2C::Write(char)>:
 8002926:	b513      	push	{r0, r1, r4, lr}
 8002928:	4604      	mov	r4, r0
 800292a:	7800      	ldrb	r0, [r0, #0]
 800292c:	f88d 1007 	strb.w	r1, [sp, #7]
 8002930:	f006 fdd8 	bl	80094e4 <gd32_i2c_set_address>
 8002934:	6860      	ldr	r0, [r4, #4]
 8002936:	f006 fdcd 	bl	80094d4 <gd32_i2c_set_baudrate>
 800293a:	2101      	movs	r1, #1
 800293c:	f10d 0007 	add.w	r0, sp, #7
 8002940:	f006 fdd6 	bl	80094f0 <gd32_i2c_write>
 8002944:	b002      	add	sp, #8
 8002946:	bd10      	pop	{r4, pc}

08002948 <sensor::BH170::BH170(unsigned char)>:
 8002948:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800294a:	1e0c      	subs	r4, r1, #0
 800294c:	bf08      	it	eq
 800294e:	2423      	moveq	r4, #35	; 0x23
 8002950:	4f16      	ldr	r7, [pc, #88]	; (80029ac <sensor::BH170::BH170(unsigned char)+0x64>)
 8002952:	7004      	strb	r4, [r0, #0]
 8002954:	2600      	movs	r6, #0
 8002956:	6047      	str	r7, [r0, #4]
 8002958:	7206      	strb	r6, [r0, #8]
 800295a:	4605      	mov	r5, r0
 800295c:	4620      	mov	r0, r4
 800295e:	f006 fdc1 	bl	80094e4 <gd32_i2c_set_address>
 8002962:	4638      	mov	r0, r7
 8002964:	f006 fdb6 	bl	80094d4 <gd32_i2c_set_baudrate>
 8002968:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 800296c:	2b07      	cmp	r3, #7
 800296e:	d902      	bls.n	8002976 <sensor::BH170::BH170(unsigned char)+0x2e>
 8002970:	3c50      	subs	r4, #80	; 0x50
 8002972:	2c0f      	cmp	r4, #15
 8002974:	d814      	bhi.n	80029a0 <sensor::BH170::BH170(unsigned char)+0x58>
 8002976:	2101      	movs	r1, #1
 8002978:	f10d 0007 	add.w	r0, sp, #7
 800297c:	f006 fe1e 	bl	80095bc <gd32_i2c_read>
 8002980:	fab0 f080 	clz	r0, r0
 8002984:	0940      	lsrs	r0, r0, #5
 8002986:	7228      	strb	r0, [r5, #8]
 8002988:	b138      	cbz	r0, 800299a <sensor::BH170::BH170(unsigned char)+0x52>
 800298a:	2101      	movs	r1, #1
 800298c:	4628      	mov	r0, r5
 800298e:	f7ff ffca 	bl	8002926 <HAL_I2C::Write(char)>
 8002992:	2110      	movs	r1, #16
 8002994:	4628      	mov	r0, r5
 8002996:	f7ff ffc6 	bl	8002926 <HAL_I2C::Write(char)>
 800299a:	4628      	mov	r0, r5
 800299c:	b003      	add	sp, #12
 800299e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80029a0:	4631      	mov	r1, r6
 80029a2:	4630      	mov	r0, r6
 80029a4:	f006 fda4 	bl	80094f0 <gd32_i2c_write>
 80029a8:	e7ea      	b.n	8002980 <sensor::BH170::BH170(unsigned char)+0x38>
 80029aa:	bf00      	nop
 80029ac:	00061a80 	andeq	r1, r6, r0, lsl #21

080029b0 <sensor::BH170::Get()>:
 80029b0:	b513      	push	{r0, r1, r4, lr}
 80029b2:	4604      	mov	r4, r0
 80029b4:	2300      	movs	r3, #0
 80029b6:	7800      	ldrb	r0, [r0, #0]
 80029b8:	f8ad 3004 	strh.w	r3, [sp, #4]
 80029bc:	f006 fd92 	bl	80094e4 <gd32_i2c_set_address>
 80029c0:	6860      	ldr	r0, [r4, #4]
 80029c2:	f006 fd87 	bl	80094d4 <gd32_i2c_set_baudrate>
 80029c6:	2102      	movs	r1, #2
 80029c8:	a801      	add	r0, sp, #4
 80029ca:	f006 fdf7 	bl	80095bc <gd32_i2c_read>
 80029ce:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 80029d2:	eddf 6a08 	vldr	s13, [pc, #32]	; 80029f4 <sensor::BH170::Get()+0x44>
 80029d6:	ba5b      	rev16	r3, r3
 80029d8:	b29b      	uxth	r3, r3
 80029da:	ee07 3a90 	vmov	s15, r3
 80029de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80029e2:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80029e6:	eefc 7ac7 	vcvt.u32.f32	s15, s14
 80029ea:	ee17 3a90 	vmov	r3, s15
 80029ee:	b298      	uxth	r0, r3
 80029f0:	b002      	add	sp, #8
 80029f2:	bd10      	pop	{r4, pc}
 80029f4:	3f99999a 	svccc	0x0099999a

080029f8 <sensor::HTU21D::HTU21D(unsigned char)>:
 80029f8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80029fa:	1e0c      	subs	r4, r1, #0
 80029fc:	bf08      	it	eq
 80029fe:	2440      	moveq	r4, #64	; 0x40
 8002a00:	4f11      	ldr	r7, [pc, #68]	; (8002a48 <sensor::HTU21D::HTU21D(unsigned char)+0x50>)
 8002a02:	7004      	strb	r4, [r0, #0]
 8002a04:	2600      	movs	r6, #0
 8002a06:	6047      	str	r7, [r0, #4]
 8002a08:	7206      	strb	r6, [r0, #8]
 8002a0a:	4605      	mov	r5, r0
 8002a0c:	4620      	mov	r0, r4
 8002a0e:	f006 fd69 	bl	80094e4 <gd32_i2c_set_address>
 8002a12:	4638      	mov	r0, r7
 8002a14:	f006 fd5e 	bl	80094d4 <gd32_i2c_set_baudrate>
 8002a18:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8002a1c:	2b07      	cmp	r3, #7
 8002a1e:	d902      	bls.n	8002a26 <sensor::HTU21D::HTU21D(unsigned char)+0x2e>
 8002a20:	3c50      	subs	r4, #80	; 0x50
 8002a22:	2c0f      	cmp	r4, #15
 8002a24:	d80b      	bhi.n	8002a3e <sensor::HTU21D::HTU21D(unsigned char)+0x46>
 8002a26:	2101      	movs	r1, #1
 8002a28:	f10d 0007 	add.w	r0, sp, #7
 8002a2c:	f006 fdc6 	bl	80095bc <gd32_i2c_read>
 8002a30:	fab0 f380 	clz	r3, r0
 8002a34:	095b      	lsrs	r3, r3, #5
 8002a36:	4628      	mov	r0, r5
 8002a38:	722b      	strb	r3, [r5, #8]
 8002a3a:	b003      	add	sp, #12
 8002a3c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002a3e:	4631      	mov	r1, r6
 8002a40:	4630      	mov	r0, r6
 8002a42:	f006 fd55 	bl	80094f0 <gd32_i2c_write>
 8002a46:	e7f3      	b.n	8002a30 <sensor::HTU21D::HTU21D(unsigned char)+0x38>
 8002a48:	00061a80 	andeq	r1, r6, r0, lsl #21

08002a4c <sensor::HTU21D::ReadRaw(unsigned char)>:
 8002a4c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8002a4e:	4604      	mov	r4, r0
 8002a50:	7800      	ldrb	r0, [r0, #0]
 8002a52:	f88d 1004 	strb.w	r1, [sp, #4]
 8002a56:	f006 fd45 	bl	80094e4 <gd32_i2c_set_address>
 8002a5a:	6860      	ldr	r0, [r4, #4]
 8002a5c:	f006 fd3a 	bl	80094d4 <gd32_i2c_set_baudrate>
 8002a60:	2101      	movs	r1, #1
 8002a62:	a801      	add	r0, sp, #4
 8002a64:	f006 fd44 	bl	80094f0 <gd32_i2c_write>
 8002a68:	4b13      	ldr	r3, [pc, #76]	; (8002ab8 <sensor::HTU21D::ReadRaw(unsigned char)+0x6c>)
 8002a6a:	881b      	ldrh	r3, [r3, #0]
 8002a6c:	f8ad 3004 	strh.w	r3, [sp, #4]
 8002a70:	2300      	movs	r3, #0
 8002a72:	f88d 3006 	strb.w	r3, [sp, #6]
 8002a76:	2508      	movs	r5, #8
 8002a78:	2100      	movs	r1, #0
 8002a7a:	f242 7010 	movw	r0, #10000	; 0x2710
 8002a7e:	f006 fff5 	bl	8009a6c <udelay(unsigned int, unsigned int)>
 8002a82:	7820      	ldrb	r0, [r4, #0]
 8002a84:	f006 fd2e 	bl	80094e4 <gd32_i2c_set_address>
 8002a88:	6860      	ldr	r0, [r4, #4]
 8002a8a:	f006 fd23 	bl	80094d4 <gd32_i2c_set_baudrate>
 8002a8e:	2103      	movs	r1, #3
 8002a90:	a801      	add	r0, sp, #4
 8002a92:	f006 fd93 	bl	80095bc <gd32_i2c_read>
 8002a96:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8002a9a:	f003 0303 	and.w	r3, r3, #3
 8002a9e:	2b02      	cmp	r3, #2
 8002aa0:	d001      	beq.n	8002aa6 <sensor::HTU21D::ReadRaw(unsigned char)+0x5a>
 8002aa2:	3d01      	subs	r5, #1
 8002aa4:	d1e8      	bne.n	8002a78 <sensor::HTU21D::ReadRaw(unsigned char)+0x2c>
 8002aa6:	f8bd 0004 	ldrh.w	r0, [sp, #4]
 8002aaa:	ba40      	rev16	r0, r0
 8002aac:	f020 0003 	bic.w	r0, r0, #3
 8002ab0:	b280      	uxth	r0, r0
 8002ab2:	b003      	add	sp, #12
 8002ab4:	bd30      	pop	{r4, r5, pc}
 8002ab6:	bf00      	nop
 8002ab8:	08009eb8 	stmdaeq	r0, {r3, r4, r5, r7, r9, sl, fp, ip, pc}

08002abc <sensor::HTU21D::GetTemperature()>:
 8002abc:	b508      	push	{r3, lr}
 8002abe:	21f3      	movs	r1, #243	; 0xf3
 8002ac0:	f7ff ffc4 	bl	8002a4c <sensor::HTU21D::ReadRaw(unsigned char)>
 8002ac4:	ee07 0a90 	vmov	s15, r0
 8002ac8:	ed9f 7a04 	vldr	s14, [pc, #16]	; 8002adc <sensor::HTU21D::GetTemperature()+0x20>
 8002acc:	ed9f 0a04 	vldr	s0, [pc, #16]	; 8002ae0 <sensor::HTU21D::GetTemperature()+0x24>
 8002ad0:	eefb 7ac8 	vcvt.f32.u32	s15, s15, #16
 8002ad4:	eea7 0a87 	vfma.f32	s0, s15, s14
 8002ad8:	bd08      	pop	{r3, pc}
 8002ada:	bf00      	nop
 8002adc:	432fb852 			; <UNDEFINED> instruction: 0x432fb852
 8002ae0:	c23b6666 	eorsgt	r6, fp, #106954752	; 0x6600000

08002ae4 <sensor::HTU21D::GetHumidity()>:
 8002ae4:	b508      	push	{r3, lr}
 8002ae6:	21f5      	movs	r1, #245	; 0xf5
 8002ae8:	f7ff ffb0 	bl	8002a4c <sensor::HTU21D::ReadRaw(unsigned char)>
 8002aec:	ee07 0a90 	vmov	s15, r0
 8002af0:	ed9f 7a04 	vldr	s14, [pc, #16]	; 8002b04 <sensor::HTU21D::GetHumidity()+0x20>
 8002af4:	eefb 7ac8 	vcvt.f32.u32	s15, s15, #16
 8002af8:	eeb9 0a08 	vmov.f32	s0, #152	; 0xc0c00000 -6.0
 8002afc:	eea7 0a87 	vfma.f32	s0, s15, s14
 8002b00:	bd08      	pop	{r3, pc}
 8002b02:	bf00      	nop
 8002b04:	42fa0000 	rscsmi	r0, sl, #0

08002b08 <HAL_I2C::WriteRegister(unsigned char, unsigned short)>:
 8002b08:	b513      	push	{r0, r1, r4, lr}
 8002b0a:	4604      	mov	r4, r0
 8002b0c:	0a13      	lsrs	r3, r2, #8
 8002b0e:	7800      	ldrb	r0, [r0, #0]
 8002b10:	f88d 1004 	strb.w	r1, [sp, #4]
 8002b14:	f88d 3005 	strb.w	r3, [sp, #5]
 8002b18:	f88d 2006 	strb.w	r2, [sp, #6]
 8002b1c:	f006 fce2 	bl	80094e4 <gd32_i2c_set_address>
 8002b20:	6860      	ldr	r0, [r4, #4]
 8002b22:	f006 fcd7 	bl	80094d4 <gd32_i2c_set_baudrate>
 8002b26:	2103      	movs	r1, #3
 8002b28:	a801      	add	r0, sp, #4
 8002b2a:	f006 fce1 	bl	80094f0 <gd32_i2c_write>
 8002b2e:	b002      	add	sp, #8
 8002b30:	bd10      	pop	{r4, pc}

08002b32 <HAL_I2C::ReadRegister16DelayUs(unsigned char, unsigned int)>:
 8002b32:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8002b34:	4604      	mov	r4, r0
 8002b36:	2600      	movs	r6, #0
 8002b38:	7800      	ldrb	r0, [r0, #0]
 8002b3a:	f8ad 6004 	strh.w	r6, [sp, #4]
 8002b3e:	4615      	mov	r5, r2
 8002b40:	f88d 1004 	strb.w	r1, [sp, #4]
 8002b44:	f006 fcce 	bl	80094e4 <gd32_i2c_set_address>
 8002b48:	6860      	ldr	r0, [r4, #4]
 8002b4a:	f006 fcc3 	bl	80094d4 <gd32_i2c_set_baudrate>
 8002b4e:	2101      	movs	r1, #1
 8002b50:	a801      	add	r0, sp, #4
 8002b52:	f006 fccd 	bl	80094f0 <gd32_i2c_write>
 8002b56:	4631      	mov	r1, r6
 8002b58:	4628      	mov	r0, r5
 8002b5a:	f006 ff87 	bl	8009a6c <udelay(unsigned int, unsigned int)>
 8002b5e:	2102      	movs	r1, #2
 8002b60:	a801      	add	r0, sp, #4
 8002b62:	f006 fd2b 	bl	80095bc <gd32_i2c_read>
 8002b66:	f8bd 0004 	ldrh.w	r0, [sp, #4]
 8002b6a:	ba40      	rev16	r0, r0
 8002b6c:	b280      	uxth	r0, r0
 8002b6e:	b002      	add	sp, #8
 8002b70:	bd70      	pop	{r4, r5, r6, pc}
	...

08002b74 <sensor::INA219::Configure(sensor::ina219::Config&)>:
 8002b74:	880b      	ldrh	r3, [r1, #0]
 8002b76:	b510      	push	{r4, lr}
 8002b78:	b1d3      	cbz	r3, 8002bb0 <sensor::INA219::Configure(sensor::ina219::Config&)+0x3c>
 8002b7a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002b7e:	d102      	bne.n	8002b86 <sensor::INA219::Configure(sensor::ina219::Config&)+0x12>
 8002b80:	f04f 4284 	mov.w	r2, #1107296256	; 0x42000000
 8002b84:	6182      	str	r2, [r0, #24]
 8002b86:	884a      	ldrh	r2, [r1, #2]
 8002b88:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 8002b8c:	d019      	beq.n	8002bc2 <sensor::INA219::Configure(sensor::ina219::Config&)+0x4e>
 8002b8e:	d812      	bhi.n	8002bb6 <sensor::INA219::Configure(sensor::ina219::Config&)+0x42>
 8002b90:	b1da      	cbz	r2, 8002bca <sensor::INA219::Configure(sensor::ina219::Config&)+0x56>
 8002b92:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 8002b96:	d016      	beq.n	8002bc6 <sensor::INA219::Configure(sensor::ina219::Config&)+0x52>
 8002b98:	431a      	orrs	r2, r3
 8002b9a:	888b      	ldrh	r3, [r1, #4]
 8002b9c:	431a      	orrs	r2, r3
 8002b9e:	88cb      	ldrh	r3, [r1, #6]
 8002ba0:	431a      	orrs	r2, r3
 8002ba2:	890b      	ldrh	r3, [r1, #8]
 8002ba4:	431a      	orrs	r2, r3
 8002ba6:	b292      	uxth	r2, r2
 8002ba8:	2100      	movs	r1, #0
 8002baa:	f7ff ffad 	bl	8002b08 <HAL_I2C::WriteRegister(unsigned char, unsigned short)>
 8002bae:	bd10      	pop	{r4, pc}
 8002bb0:	f04f 4283 	mov.w	r2, #1098907648	; 0x41800000
 8002bb4:	e7e6      	b.n	8002b84 <sensor::INA219::Configure(sensor::ina219::Config&)+0x10>
 8002bb6:	f5b2 5fc0 	cmp.w	r2, #6144	; 0x1800
 8002bba:	d1ed      	bne.n	8002b98 <sensor::INA219::Configure(sensor::ina219::Config&)+0x24>
 8002bbc:	4c04      	ldr	r4, [pc, #16]	; (8002bd0 <sensor::INA219::Configure(sensor::ina219::Config&)+0x5c>)
 8002bbe:	6144      	str	r4, [r0, #20]
 8002bc0:	e7ea      	b.n	8002b98 <sensor::INA219::Configure(sensor::ina219::Config&)+0x24>
 8002bc2:	4c04      	ldr	r4, [pc, #16]	; (8002bd4 <sensor::INA219::Configure(sensor::ina219::Config&)+0x60>)
 8002bc4:	e7fb      	b.n	8002bbe <sensor::INA219::Configure(sensor::ina219::Config&)+0x4a>
 8002bc6:	4c04      	ldr	r4, [pc, #16]	; (8002bd8 <sensor::INA219::Configure(sensor::ina219::Config&)+0x64>)
 8002bc8:	e7f9      	b.n	8002bbe <sensor::INA219::Configure(sensor::ina219::Config&)+0x4a>
 8002bca:	4c04      	ldr	r4, [pc, #16]	; (8002bdc <sensor::INA219::Configure(sensor::ina219::Config&)+0x68>)
 8002bcc:	e7f7      	b.n	8002bbe <sensor::INA219::Configure(sensor::ina219::Config&)+0x4a>
 8002bce:	bf00      	nop
 8002bd0:	3ea3d70a 	cdpcc	7, 10, cr13, cr3, cr10, {0}
 8002bd4:	3e23d70a 	cdpcc	7, 2, cr13, cr3, cr10, {0}
 8002bd8:	3da3d70a 	stccc	7, cr13, [r3, #40]!	; 0x28
 8002bdc:	3d23d70a 	stccc	7, cr13, [r3, #-40]!	; 0xffffffd8

08002be0 <sensor::INA219::Calibrate(float, float)>:
 8002be0:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8002c68 <sensor::INA219::Calibrate(float, float)+0x88>
 8002be4:	eddf 6a21 	vldr	s13, [pc, #132]	; 8002c6c <sensor::INA219::Calibrate(float, float)+0x8c>
 8002be8:	ed80 0a07 	vstr	s0, [r0, #28]
 8002bec:	eec0 7a87 	vdiv.f32	s15, s1, s14
 8002bf0:	b508      	push	{r3, lr}
 8002bf2:	2105      	movs	r1, #5
 8002bf4:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 8002c70 <sensor::INA219::Calibrate(float, float)+0x90>
 8002bf8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002bfc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002c00:	ee17 3a90 	vmov	r3, s15
 8002c04:	b29b      	uxth	r3, r3
 8002c06:	ee07 3a90 	vmov	s15, r3
 8002c0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002c0e:	eec7 5a87 	vdiv.f32	s11, s15, s14
 8002c12:	ee85 6aa6 	vdiv.f32	s12, s11, s13
 8002c16:	eebd 7ac6 	vcvt.s32.f32	s14, s12
 8002c1a:	eef8 7ac7 	vcvt.f32.s32	s15, s14
 8002c1e:	eeb4 6a67 	vcmp.f32	s12, s15
 8002c22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c26:	bf1f      	itttt	ne
 8002c28:	ee17 3a10 	vmovne	r3, s14
 8002c2c:	3301      	addne	r3, #1
 8002c2e:	ee07 3a10 	vmovne	s14, r3
 8002c32:	eef8 7ac7 	vcvtne.f32.s32	s15, s14
 8002c36:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8002c3a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002c3e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002c42:	ee27 0a80 	vmul.f32	s0, s15, s0
 8002c46:	ed80 7a04 	vstr	s14, [r0, #16]
 8002c4a:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 8002c74 <sensor::INA219::Calibrate(float, float)+0x94>
 8002c4e:	edc0 7a03 	vstr	s15, [r0, #12]
 8002c52:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8002c56:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002c5a:	ee17 3a90 	vmov	r3, s15
 8002c5e:	b29a      	uxth	r2, r3
 8002c60:	f7ff ff52 	bl	8002b08 <HAL_I2C::WriteRegister(unsigned char, unsigned short)>
 8002c64:	bd08      	pop	{r3, pc}
 8002c66:	bf00      	nop
 8002c68:	46fffe00 	ldrbtmi	pc, [pc], r0, lsl #28	; <UNPREDICTABLE>
 8002c6c:	38d1b717 	ldmcc	r1, {r0, r1, r2, r4, r8, r9, sl, ip, sp, pc}^
 8002c70:	4cbebc20 	ldcmi	12, cr11, [lr], #128	; 0x80
 8002c74:	3d27c5ac 	cfstr32cc	mvfx12, [r7, #-688]!	; 0xfffffd50

08002c78 <sensor::INA219::INA219(unsigned char)>:
 8002c78:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002c7a:	1e0c      	subs	r4, r1, #0
 8002c7c:	bf08      	it	eq
 8002c7e:	2440      	moveq	r4, #64	; 0x40
 8002c80:	4f1b      	ldr	r7, [pc, #108]	; (8002cf0 <sensor::INA219::INA219(unsigned char)+0x78>)
 8002c82:	7004      	strb	r4, [r0, #0]
 8002c84:	2600      	movs	r6, #0
 8002c86:	b085      	sub	sp, #20
 8002c88:	6047      	str	r7, [r0, #4]
 8002c8a:	7206      	strb	r6, [r0, #8]
 8002c8c:	4605      	mov	r5, r0
 8002c8e:	4620      	mov	r0, r4
 8002c90:	f006 fc28 	bl	80094e4 <gd32_i2c_set_address>
 8002c94:	4638      	mov	r0, r7
 8002c96:	f006 fc1d 	bl	80094d4 <gd32_i2c_set_baudrate>
 8002c9a:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8002c9e:	2b07      	cmp	r3, #7
 8002ca0:	d902      	bls.n	8002ca8 <sensor::INA219::INA219(unsigned char)+0x30>
 8002ca2:	3c50      	subs	r4, #80	; 0x50
 8002ca4:	2c0f      	cmp	r4, #15
 8002ca6:	d81d      	bhi.n	8002ce4 <sensor::INA219::INA219(unsigned char)+0x6c>
 8002ca8:	2101      	movs	r1, #1
 8002caa:	a801      	add	r0, sp, #4
 8002cac:	f006 fc86 	bl	80095bc <gd32_i2c_read>
 8002cb0:	fab0 f080 	clz	r0, r0
 8002cb4:	0940      	lsrs	r0, r0, #5
 8002cb6:	7228      	strb	r0, [r5, #8]
 8002cb8:	b188      	cbz	r0, 8002cde <sensor::INA219::INA219(unsigned char)+0x66>
 8002cba:	4a0e      	ldr	r2, [pc, #56]	; (8002cf4 <sensor::INA219::INA219(unsigned char)+0x7c>)
 8002cbc:	6810      	ldr	r0, [r2, #0]
 8002cbe:	6851      	ldr	r1, [r2, #4]
 8002cc0:	8912      	ldrh	r2, [r2, #8]
 8002cc2:	ab01      	add	r3, sp, #4
 8002cc4:	c303      	stmia	r3!, {r0, r1}
 8002cc6:	4628      	mov	r0, r5
 8002cc8:	801a      	strh	r2, [r3, #0]
 8002cca:	a901      	add	r1, sp, #4
 8002ccc:	f7ff ff52 	bl	8002b74 <sensor::INA219::Configure(sensor::ina219::Config&)>
 8002cd0:	ed9f 0a09 	vldr	s0, [pc, #36]	; 8002cf8 <sensor::INA219::INA219(unsigned char)+0x80>
 8002cd4:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 8002cd8:	4628      	mov	r0, r5
 8002cda:	f7ff ff81 	bl	8002be0 <sensor::INA219::Calibrate(float, float)>
 8002cde:	4628      	mov	r0, r5
 8002ce0:	b005      	add	sp, #20
 8002ce2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002ce4:	4631      	mov	r1, r6
 8002ce6:	4630      	mov	r0, r6
 8002ce8:	f006 fc02 	bl	80094f0 <gd32_i2c_write>
 8002cec:	e7e0      	b.n	8002cb0 <sensor::INA219::INA219(unsigned char)+0x38>
 8002cee:	bf00      	nop
 8002cf0:	00061a80 	andeq	r1, r6, r0, lsl #21
 8002cf4:	08009ebc 	stmdaeq	r0, {r2, r3, r4, r5, r7, r9, sl, fp, ip, pc}
 8002cf8:	3dcccccd 	stclcc	12, cr12, [ip, #820]	; 0x334

08002cfc <sensor::INA219::GetShuntCurrent()>:
 8002cfc:	b510      	push	{r4, lr}
 8002cfe:	f44f 7248 	mov.w	r2, #800	; 0x320
 8002d02:	2104      	movs	r1, #4
 8002d04:	4604      	mov	r4, r0
 8002d06:	f7ff ff14 	bl	8002b32 <HAL_I2C::ReadRegister16DelayUs(unsigned char, unsigned int)>
 8002d0a:	ee07 0a90 	vmov	s15, r0
 8002d0e:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 8002d12:	edd4 7a03 	vldr	s15, [r4, #12]
 8002d16:	ee20 0a27 	vmul.f32	s0, s0, s15
 8002d1a:	bd10      	pop	{r4, pc}

08002d1c <sensor::INA219::GetBusVoltageRaw()>:
 8002d1c:	b508      	push	{r3, lr}
 8002d1e:	f44f 7248 	mov.w	r2, #800	; 0x320
 8002d22:	2102      	movs	r1, #2
 8002d24:	f7ff ff05 	bl	8002b32 <HAL_I2C::ReadRegister16DelayUs(unsigned char, unsigned int)>
 8002d28:	f340 004f 	sbfx	r0, r0, #1, #16
 8002d2c:	f020 0003 	bic.w	r0, r0, #3
 8002d30:	bd08      	pop	{r3, pc}
	...

08002d34 <sensor::INA219::GetBusVoltage()>:
 8002d34:	b508      	push	{r3, lr}
 8002d36:	f7ff fff1 	bl	8002d1c <sensor::INA219::GetBusVoltageRaw()>
 8002d3a:	ee07 0a90 	vmov	s15, r0
 8002d3e:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 8002d42:	eddf 7a02 	vldr	s15, [pc, #8]	; 8002d4c <sensor::INA219::GetBusVoltage()+0x18>
 8002d46:	ee20 0a27 	vmul.f32	s0, s0, s15
 8002d4a:	bd08      	pop	{r3, pc}
 8002d4c:	3a83126f 	bcc	60c7710 <__heap_size+0x60c6710>

08002d50 <sensor::INA219::GetBusPower()>:
 8002d50:	b510      	push	{r4, lr}
 8002d52:	f44f 7248 	mov.w	r2, #800	; 0x320
 8002d56:	2103      	movs	r1, #3
 8002d58:	4604      	mov	r4, r0
 8002d5a:	f7ff feea 	bl	8002b32 <HAL_I2C::ReadRegister16DelayUs(unsigned char, unsigned int)>
 8002d5e:	ee07 0a90 	vmov	s15, r0
 8002d62:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 8002d66:	edd4 7a04 	vldr	s15, [r4, #16]
 8002d6a:	ee20 0a27 	vmul.f32	s0, s0, s15
 8002d6e:	bd10      	pop	{r4, pc}

08002d70 <MCP3424::SetResolution(adc::mcp3424::Resolution)>:
 8002d70:	7a42      	ldrb	r2, [r0, #9]
 8002d72:	008b      	lsls	r3, r1, #2
 8002d74:	f003 030c 	and.w	r3, r3, #12
 8002d78:	f022 020c 	bic.w	r2, r2, #12
 8002d7c:	b530      	push	{r4, r5, lr}
 8002d7e:	4313      	orrs	r3, r2
 8002d80:	2903      	cmp	r1, #3
 8002d82:	d80a      	bhi.n	8002d9a <MCP3424::SetResolution(adc::mcp3424::Resolution)+0x2a>
 8002d84:	e8df f001 	tbb	[pc, r1]
 8002d88:	0902110d 	stmdbeq	r2, {r0, r2, r3, r8, ip}
 8002d8c:	a50a      	add	r5, pc, #40	; (adr r5, 8002db8 <MCP3424::SetResolution(adc::mcp3424::Resolution)+0x48>)
 8002d8e:	e9d5 4500 	ldrd	r4, r5, [r5]
 8002d92:	e9c0 4504 	strd	r4, r5, [r0, #16]
 8002d96:	7243      	strb	r3, [r0, #9]
 8002d98:	bd30      	pop	{r4, r5, pc}
 8002d9a:	a509      	add	r5, pc, #36	; (adr r5, 8002dc0 <MCP3424::SetResolution(adc::mcp3424::Resolution)+0x50>)
 8002d9c:	e9d5 4500 	ldrd	r4, r5, [r5]
 8002da0:	e7f7      	b.n	8002d92 <MCP3424::SetResolution(adc::mcp3424::Resolution)+0x22>
 8002da2:	a509      	add	r5, pc, #36	; (adr r5, 8002dc8 <MCP3424::SetResolution(adc::mcp3424::Resolution)+0x58>)
 8002da4:	e9d5 4500 	ldrd	r4, r5, [r5]
 8002da8:	e7f3      	b.n	8002d92 <MCP3424::SetResolution(adc::mcp3424::Resolution)+0x22>
 8002daa:	a509      	add	r5, pc, #36	; (adr r5, 8002dd0 <MCP3424::SetResolution(adc::mcp3424::Resolution)+0x60>)
 8002dac:	e9d5 4500 	ldrd	r4, r5, [r5]
 8002db0:	e7ef      	b.n	8002d92 <MCP3424::SetResolution(adc::mcp3424::Resolution)+0x22>
 8002db2:	bf00      	nop
 8002db4:	f3af 8000 	nop.w
 8002db8:	e0000000 	and	r0, r0, r0
 8002dbc:	3f00624d 	svccc	0x0000624d
 8002dc0:	e0000000 	and	r0, r0, r0
 8002dc4:	3ee0624d 	cdpcc	2, 14, cr6, cr0, cr13, {2}
 8002dc8:	e0000000 	and	r0, r0, r0
 8002dcc:	3f40624d 	svccc	0x0040624d
 8002dd0:	e0000000 	and	r0, r0, r0
 8002dd4:	3f20624d 	svccc	0x0020624d

08002dd8 <MCP3424::MCP3424(unsigned char)>:
 8002dd8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002dda:	7a43      	ldrb	r3, [r0, #9]
 8002ddc:	4f19      	ldr	r7, [pc, #100]	; (8002e44 <MCP3424::MCP3424(unsigned char)+0x6c>)
 8002dde:	6047      	str	r7, [r0, #4]
 8002de0:	1e0d      	subs	r5, r1, #0
 8002de2:	bf08      	it	eq
 8002de4:	2568      	moveq	r5, #104	; 0x68
 8002de6:	f023 0303 	bic.w	r3, r3, #3
 8002dea:	2600      	movs	r6, #0
 8002dec:	7243      	strb	r3, [r0, #9]
 8002dee:	4631      	mov	r1, r6
 8002df0:	7005      	strb	r5, [r0, #0]
 8002df2:	7206      	strb	r6, [r0, #8]
 8002df4:	f7ff ffbc 	bl	8002d70 <MCP3424::SetResolution(adc::mcp3424::Resolution)>
 8002df8:	7a43      	ldrb	r3, [r0, #9]
 8002dfa:	f023 0310 	bic.w	r3, r3, #16
 8002dfe:	f043 0310 	orr.w	r3, r3, #16
 8002e02:	7243      	strb	r3, [r0, #9]
 8002e04:	4604      	mov	r4, r0
 8002e06:	4628      	mov	r0, r5
 8002e08:	f006 fb6c 	bl	80094e4 <gd32_i2c_set_address>
 8002e0c:	4638      	mov	r0, r7
 8002e0e:	f006 fb61 	bl	80094d4 <gd32_i2c_set_baudrate>
 8002e12:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
 8002e16:	2b07      	cmp	r3, #7
 8002e18:	d902      	bls.n	8002e20 <MCP3424::MCP3424(unsigned char)+0x48>
 8002e1a:	3d50      	subs	r5, #80	; 0x50
 8002e1c:	2d0f      	cmp	r5, #15
 8002e1e:	d80b      	bhi.n	8002e38 <MCP3424::MCP3424(unsigned char)+0x60>
 8002e20:	2101      	movs	r1, #1
 8002e22:	f10d 0007 	add.w	r0, sp, #7
 8002e26:	f006 fbc9 	bl	80095bc <gd32_i2c_read>
 8002e2a:	fab0 f080 	clz	r0, r0
 8002e2e:	0940      	lsrs	r0, r0, #5
 8002e30:	7220      	strb	r0, [r4, #8]
 8002e32:	4620      	mov	r0, r4
 8002e34:	b003      	add	sp, #12
 8002e36:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002e38:	4631      	mov	r1, r6
 8002e3a:	4630      	mov	r0, r6
 8002e3c:	f006 fb58 	bl	80094f0 <gd32_i2c_write>
 8002e40:	e7f3      	b.n	8002e2a <MCP3424::MCP3424(unsigned char)+0x52>
 8002e42:	bf00      	nop
 8002e44:	00061a80 	andeq	r1, r6, r0, lsl #21

08002e48 <MCP3424::GetRaw(unsigned char)>:
 8002e48:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8002e4a:	7a43      	ldrb	r3, [r0, #9]
 8002e4c:	0149      	lsls	r1, r1, #5
 8002e4e:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 8002e52:	f001 0160 	and.w	r1, r1, #96	; 0x60
 8002e56:	430b      	orrs	r3, r1
 8002e58:	7243      	strb	r3, [r0, #9]
 8002e5a:	f003 030c 	and.w	r3, r3, #12
 8002e5e:	2b0c      	cmp	r3, #12
 8002e60:	4604      	mov	r4, r0
 8002e62:	bf14      	ite	ne
 8002e64:	2603      	movne	r6, #3
 8002e66:	2604      	moveq	r6, #4
 8002e68:	f641 7541 	movw	r5, #8001	; 0x1f41
 8002e6c:	7a63      	ldrb	r3, [r4, #9]
 8002e6e:	7820      	ldrb	r0, [r4, #0]
 8002e70:	f88d 3003 	strb.w	r3, [sp, #3]
 8002e74:	f006 fb36 	bl	80094e4 <gd32_i2c_set_address>
 8002e78:	6860      	ldr	r0, [r4, #4]
 8002e7a:	f006 fb2b 	bl	80094d4 <gd32_i2c_set_baudrate>
 8002e7e:	2101      	movs	r1, #1
 8002e80:	f10d 0003 	add.w	r0, sp, #3
 8002e84:	f006 fb34 	bl	80094f0 <gd32_i2c_write>
 8002e88:	7820      	ldrb	r0, [r4, #0]
 8002e8a:	f006 fb2b 	bl	80094e4 <gd32_i2c_set_address>
 8002e8e:	6860      	ldr	r0, [r4, #4]
 8002e90:	f006 fb20 	bl	80094d4 <gd32_i2c_set_baudrate>
 8002e94:	4631      	mov	r1, r6
 8002e96:	a801      	add	r0, sp, #4
 8002e98:	f006 fb90 	bl	80095bc <gd32_i2c_read>
 8002e9c:	2e04      	cmp	r6, #4
 8002e9e:	bf0c      	ite	eq
 8002ea0:	f99d 3007 	ldrsbeq.w	r3, [sp, #7]
 8002ea4:	f99d 3006 	ldrsbne.w	r3, [sp, #6]
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	da04      	bge.n	8002eb6 <MCP3424::GetRaw(unsigned char)+0x6e>
 8002eac:	3d01      	subs	r5, #1
 8002eae:	d1dd      	bne.n	8002e6c <MCP3424::GetRaw(unsigned char)+0x24>
 8002eb0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002eb4:	e013      	b.n	8002ede <MCP3424::GetRaw(unsigned char)+0x96>
 8002eb6:	7a62      	ldrb	r2, [r4, #9]
 8002eb8:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8002ebc:	f89d 0005 	ldrb.w	r0, [sp, #5]
 8002ec0:	f3c2 0281 	ubfx	r2, r2, #2, #2
 8002ec4:	2a02      	cmp	r2, #2
 8002ec6:	d00c      	beq.n	8002ee2 <MCP3424::GetRaw(unsigned char)+0x9a>
 8002ec8:	2a03      	cmp	r2, #3
 8002eca:	d00f      	beq.n	8002eec <MCP3424::GetRaw(unsigned char)+0xa4>
 8002ecc:	2a01      	cmp	r2, #1
 8002ece:	ea4f 2303 	mov.w	r3, r3, lsl #8
 8002ed2:	bf14      	ite	ne
 8002ed4:	f403 6370 	andne.w	r3, r3, #3840	; 0xf00
 8002ed8:	f403 537c 	andeq.w	r3, r3, #16128	; 0x3f00
 8002edc:	4318      	orrs	r0, r3
 8002ede:	b002      	add	sp, #8
 8002ee0:	bd70      	pop	{r4, r5, r6, pc}
 8002ee2:	f8bd 0004 	ldrh.w	r0, [sp, #4]
 8002ee6:	ba40      	rev16	r0, r0
 8002ee8:	b280      	uxth	r0, r0
 8002eea:	e7f8      	b.n	8002ede <MCP3424::GetRaw(unsigned char)+0x96>
 8002eec:	f8bd 0005 	ldrh.w	r0, [sp, #5]
 8002ef0:	041b      	lsls	r3, r3, #16
 8002ef2:	ba40      	rev16	r0, r0
 8002ef4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002ef8:	b280      	uxth	r0, r0
 8002efa:	e7ef      	b.n	8002edc <MCP3424::GetRaw(unsigned char)+0x94>

08002efc <MCP3424::GetVoltage(unsigned char)>:
 8002efc:	b510      	push	{r4, lr}
 8002efe:	4604      	mov	r4, r0
 8002f00:	f7ff ffa2 	bl	8002e48 <MCP3424::GetRaw(unsigned char)>
 8002f04:	f7fd fafc 	bl	8000500 <__aeabi_ui2d>
 8002f08:	4602      	mov	r2, r0
 8002f0a:	460b      	mov	r3, r1
 8002f0c:	f7fd f9bc 	bl	8000288 <__adddf3>
 8002f10:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
 8002f14:	f7fd fb6e 	bl	80005f4 <__aeabi_dmul>
 8002f18:	ec41 0b10 	vmov	d0, r0, r1
 8002f1c:	bd10      	pop	{r4, pc}

08002f1e <HAL_I2C::ReadRegister16(unsigned char)>:
 8002f1e:	b513      	push	{r0, r1, r4, lr}
 8002f20:	4604      	mov	r4, r0
 8002f22:	7800      	ldrb	r0, [r0, #0]
 8002f24:	f88d 1000 	strb.w	r1, [sp]
 8002f28:	f006 fadc 	bl	80094e4 <gd32_i2c_set_address>
 8002f2c:	6860      	ldr	r0, [r4, #4]
 8002f2e:	f006 fad1 	bl	80094d4 <gd32_i2c_set_baudrate>
 8002f32:	2101      	movs	r1, #1
 8002f34:	4668      	mov	r0, sp
 8002f36:	f006 fadb 	bl	80094f0 <gd32_i2c_write>
 8002f3a:	2300      	movs	r3, #0
 8002f3c:	7820      	ldrb	r0, [r4, #0]
 8002f3e:	f8ad 3004 	strh.w	r3, [sp, #4]
 8002f42:	f006 facf 	bl	80094e4 <gd32_i2c_set_address>
 8002f46:	6860      	ldr	r0, [r4, #4]
 8002f48:	f006 fac4 	bl	80094d4 <gd32_i2c_set_baudrate>
 8002f4c:	2102      	movs	r1, #2
 8002f4e:	a801      	add	r0, sp, #4
 8002f50:	f006 fb34 	bl	80095bc <gd32_i2c_read>
 8002f54:	f8bd 0004 	ldrh.w	r0, [sp, #4]
 8002f58:	ba40      	rev16	r0, r0
 8002f5a:	b280      	uxth	r0, r0
 8002f5c:	b002      	add	sp, #8
 8002f5e:	bd10      	pop	{r4, pc}

08002f60 <sensor::MCP9808::MCP9808(unsigned char)>:
 8002f60:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002f62:	1e0d      	subs	r5, r1, #0
 8002f64:	bf08      	it	eq
 8002f66:	2518      	moveq	r5, #24
 8002f68:	4f1b      	ldr	r7, [pc, #108]	; (8002fd8 <sensor::MCP9808::MCP9808(unsigned char)+0x78>)
 8002f6a:	7005      	strb	r5, [r0, #0]
 8002f6c:	2600      	movs	r6, #0
 8002f6e:	6047      	str	r7, [r0, #4]
 8002f70:	7206      	strb	r6, [r0, #8]
 8002f72:	4604      	mov	r4, r0
 8002f74:	4628      	mov	r0, r5
 8002f76:	f006 fab5 	bl	80094e4 <gd32_i2c_set_address>
 8002f7a:	4638      	mov	r0, r7
 8002f7c:	f006 faaa 	bl	80094d4 <gd32_i2c_set_baudrate>
 8002f80:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
 8002f84:	2b07      	cmp	r3, #7
 8002f86:	d902      	bls.n	8002f8e <sensor::MCP9808::MCP9808(unsigned char)+0x2e>
 8002f88:	3d50      	subs	r5, #80	; 0x50
 8002f8a:	2d0f      	cmp	r5, #15
 8002f8c:	d81f      	bhi.n	8002fce <sensor::MCP9808::MCP9808(unsigned char)+0x6e>
 8002f8e:	2101      	movs	r1, #1
 8002f90:	f10d 0007 	add.w	r0, sp, #7
 8002f94:	f006 fb12 	bl	80095bc <gd32_i2c_read>
 8002f98:	fab0 f080 	clz	r0, r0
 8002f9c:	0940      	lsrs	r0, r0, #5
 8002f9e:	7220      	strb	r0, [r4, #8]
 8002fa0:	b190      	cbz	r0, 8002fc8 <sensor::MCP9808::MCP9808(unsigned char)+0x68>
 8002fa2:	2106      	movs	r1, #6
 8002fa4:	4620      	mov	r0, r4
 8002fa6:	f7ff ffba 	bl	8002f1e <HAL_I2C::ReadRegister16(unsigned char)>
 8002faa:	2854      	cmp	r0, #84	; 0x54
 8002fac:	bf0c      	ite	eq
 8002fae:	2301      	moveq	r3, #1
 8002fb0:	2300      	movne	r3, #0
 8002fb2:	7223      	strb	r3, [r4, #8]
 8002fb4:	d108      	bne.n	8002fc8 <sensor::MCP9808::MCP9808(unsigned char)+0x68>
 8002fb6:	2107      	movs	r1, #7
 8002fb8:	4620      	mov	r0, r4
 8002fba:	f7ff ffb0 	bl	8002f1e <HAL_I2C::ReadRegister16(unsigned char)>
 8002fbe:	f5a0 6380 	sub.w	r3, r0, #1024	; 0x400
 8002fc2:	4258      	negs	r0, r3
 8002fc4:	4158      	adcs	r0, r3
 8002fc6:	7220      	strb	r0, [r4, #8]
 8002fc8:	4620      	mov	r0, r4
 8002fca:	b003      	add	sp, #12
 8002fcc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002fce:	4631      	mov	r1, r6
 8002fd0:	4630      	mov	r0, r6
 8002fd2:	f006 fa8d 	bl	80094f0 <gd32_i2c_write>
 8002fd6:	e7df      	b.n	8002f98 <sensor::MCP9808::MCP9808(unsigned char)+0x38>
 8002fd8:	00061a80 	andeq	r1, r6, r0, lsl #21

08002fdc <sensor::MCP9808::Get()>:
 8002fdc:	b508      	push	{r3, lr}
 8002fde:	2105      	movs	r1, #5
 8002fe0:	f7ff ff9d 	bl	8002f1e <HAL_I2C::ReadRegister16(unsigned char)>
 8002fe4:	f3c0 030b 	ubfx	r3, r0, #0, #12
 8002fe8:	ee00 3a10 	vmov	s0, r3
 8002fec:	04c3      	lsls	r3, r0, #19
 8002fee:	eeba 0ace 	vcvt.f32.s32	s0, s0, #4
 8002ff2:	bf44      	itt	mi
 8002ff4:	eddf 7a02 	vldrmi	s15, [pc, #8]	; 8003000 <sensor::MCP9808::Get()+0x24>
 8002ff8:	ee30 0a67 	vsubmi.f32	s0, s0, s15
 8002ffc:	bd08      	pop	{r3, pc}
 8002ffe:	bf00      	nop
 8003000:	43800000 	orrmi	r0, r0, #0

08003004 <sensor::SI7021::SI7021(unsigned char)>:
 8003004:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003006:	1e0c      	subs	r4, r1, #0
 8003008:	bf08      	it	eq
 800300a:	2440      	moveq	r4, #64	; 0x40
 800300c:	4f11      	ldr	r7, [pc, #68]	; (8003054 <sensor::SI7021::SI7021(unsigned char)+0x50>)
 800300e:	7004      	strb	r4, [r0, #0]
 8003010:	2600      	movs	r6, #0
 8003012:	6047      	str	r7, [r0, #4]
 8003014:	7206      	strb	r6, [r0, #8]
 8003016:	4605      	mov	r5, r0
 8003018:	4620      	mov	r0, r4
 800301a:	f006 fa63 	bl	80094e4 <gd32_i2c_set_address>
 800301e:	4638      	mov	r0, r7
 8003020:	f006 fa58 	bl	80094d4 <gd32_i2c_set_baudrate>
 8003024:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8003028:	2b07      	cmp	r3, #7
 800302a:	d902      	bls.n	8003032 <sensor::SI7021::SI7021(unsigned char)+0x2e>
 800302c:	3c50      	subs	r4, #80	; 0x50
 800302e:	2c0f      	cmp	r4, #15
 8003030:	d80b      	bhi.n	800304a <sensor::SI7021::SI7021(unsigned char)+0x46>
 8003032:	2101      	movs	r1, #1
 8003034:	f10d 0007 	add.w	r0, sp, #7
 8003038:	f006 fac0 	bl	80095bc <gd32_i2c_read>
 800303c:	fab0 f380 	clz	r3, r0
 8003040:	095b      	lsrs	r3, r3, #5
 8003042:	4628      	mov	r0, r5
 8003044:	722b      	strb	r3, [r5, #8]
 8003046:	b003      	add	sp, #12
 8003048:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800304a:	4631      	mov	r1, r6
 800304c:	4630      	mov	r0, r6
 800304e:	f006 fa4f 	bl	80094f0 <gd32_i2c_write>
 8003052:	e7f3      	b.n	800303c <sensor::SI7021::SI7021(unsigned char)+0x38>
 8003054:	00061a80 	andeq	r1, r6, r0, lsl #21

08003058 <sensor::SI7021::ReadRaw(unsigned char)>:
 8003058:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800305a:	4604      	mov	r4, r0
 800305c:	7800      	ldrb	r0, [r0, #0]
 800305e:	f88d 1004 	strb.w	r1, [sp, #4]
 8003062:	f006 fa3f 	bl	80094e4 <gd32_i2c_set_address>
 8003066:	6860      	ldr	r0, [r4, #4]
 8003068:	f006 fa34 	bl	80094d4 <gd32_i2c_set_baudrate>
 800306c:	2101      	movs	r1, #1
 800306e:	a801      	add	r0, sp, #4
 8003070:	f006 fa3e 	bl	80094f0 <gd32_i2c_write>
 8003074:	4b13      	ldr	r3, [pc, #76]	; (80030c4 <sensor::SI7021::ReadRaw(unsigned char)+0x6c>)
 8003076:	881b      	ldrh	r3, [r3, #0]
 8003078:	f8ad 3004 	strh.w	r3, [sp, #4]
 800307c:	2300      	movs	r3, #0
 800307e:	f88d 3006 	strb.w	r3, [sp, #6]
 8003082:	2508      	movs	r5, #8
 8003084:	2100      	movs	r1, #0
 8003086:	f242 7010 	movw	r0, #10000	; 0x2710
 800308a:	f006 fcef 	bl	8009a6c <udelay(unsigned int, unsigned int)>
 800308e:	7820      	ldrb	r0, [r4, #0]
 8003090:	f006 fa28 	bl	80094e4 <gd32_i2c_set_address>
 8003094:	6860      	ldr	r0, [r4, #4]
 8003096:	f006 fa1d 	bl	80094d4 <gd32_i2c_set_baudrate>
 800309a:	2103      	movs	r1, #3
 800309c:	a801      	add	r0, sp, #4
 800309e:	f006 fa8d 	bl	80095bc <gd32_i2c_read>
 80030a2:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80030a6:	f003 0303 	and.w	r3, r3, #3
 80030aa:	2b02      	cmp	r3, #2
 80030ac:	d001      	beq.n	80030b2 <sensor::SI7021::ReadRaw(unsigned char)+0x5a>
 80030ae:	3d01      	subs	r5, #1
 80030b0:	d1e8      	bne.n	8003084 <sensor::SI7021::ReadRaw(unsigned char)+0x2c>
 80030b2:	f8bd 0004 	ldrh.w	r0, [sp, #4]
 80030b6:	ba40      	rev16	r0, r0
 80030b8:	f020 0003 	bic.w	r0, r0, #3
 80030bc:	b280      	uxth	r0, r0
 80030be:	b003      	add	sp, #12
 80030c0:	bd30      	pop	{r4, r5, pc}
 80030c2:	bf00      	nop
 80030c4:	08009ec6 	stmdaeq	r0, {r1, r2, r6, r7, r9, sl, fp, ip, pc}

080030c8 <sensor::SI7021::GetTemperature()>:
 80030c8:	b508      	push	{r3, lr}
 80030ca:	21f3      	movs	r1, #243	; 0xf3
 80030cc:	f7ff ffc4 	bl	8003058 <sensor::SI7021::ReadRaw(unsigned char)>
 80030d0:	ee07 0a90 	vmov	s15, r0
 80030d4:	ed9f 7a04 	vldr	s14, [pc, #16]	; 80030e8 <sensor::SI7021::GetTemperature()+0x20>
 80030d8:	ed9f 0a04 	vldr	s0, [pc, #16]	; 80030ec <sensor::SI7021::GetTemperature()+0x24>
 80030dc:	eefb 7ac8 	vcvt.f32.u32	s15, s15, #16
 80030e0:	eea7 0a87 	vfma.f32	s0, s15, s14
 80030e4:	bd08      	pop	{r3, pc}
 80030e6:	bf00      	nop
 80030e8:	432fb852 			; <UNDEFINED> instruction: 0x432fb852
 80030ec:	c23b6666 	eorsgt	r6, fp, #106954752	; 0x6600000

080030f0 <sensor::SI7021::GetHumidity()>:
 80030f0:	b508      	push	{r3, lr}
 80030f2:	21f5      	movs	r1, #245	; 0xf5
 80030f4:	f7ff ffb0 	bl	8003058 <sensor::SI7021::ReadRaw(unsigned char)>
 80030f8:	ee07 0a90 	vmov	s15, r0
 80030fc:	ed9f 7a04 	vldr	s14, [pc, #16]	; 8003110 <sensor::SI7021::GetHumidity()+0x20>
 8003100:	eefb 7ac8 	vcvt.f32.u32	s15, s15, #16
 8003104:	eeb9 0a08 	vmov.f32	s0, #152	; 0xc0c00000 -6.0
 8003108:	eea7 0a87 	vfma.f32	s0, s15, s14
 800310c:	bd08      	pop	{r3, pc}
 800310e:	bf00      	nop
 8003110:	42fa0000 	rscsmi	r0, sl, #0

08003114 <RDMSubDevices::RDMSubDevices()>:
 8003114:	2200      	movs	r2, #0
 8003116:	6002      	str	r2, [r0, #0]
 8003118:	8082      	strh	r2, [r0, #4]
 800311a:	4a01      	ldr	r2, [pc, #4]	; (8003120 <RDMSubDevices::RDMSubDevices()+0xc>)
 800311c:	6010      	str	r0, [r2, #0]
 800311e:	4770      	bx	lr
 8003120:	20000198 	mulcs	r0, r8, r1

08003124 <RDMSubDevices::~RDMSubDevices()>:
 8003124:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003126:	2500      	movs	r5, #0
 8003128:	4604      	mov	r4, r0
 800312a:	462e      	mov	r6, r5
 800312c:	88a3      	ldrh	r3, [r4, #4]
 800312e:	6820      	ldr	r0, [r4, #0]
 8003130:	42ab      	cmp	r3, r5
 8003132:	d804      	bhi.n	800313e <RDMSubDevices::~RDMSubDevices()+0x1a>
 8003134:	b108      	cbz	r0, 800313a <RDMSubDevices::~RDMSubDevices()+0x16>
 8003136:	f005 f92a 	bl	800838e <operator delete[](void*)>
 800313a:	4620      	mov	r0, r4
 800313c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800313e:	f850 0025 	ldr.w	r0, [r0, r5, lsl #2]
 8003142:	00af      	lsls	r7, r5, #2
 8003144:	b110      	cbz	r0, 800314c <RDMSubDevices::~RDMSubDevices()+0x28>
 8003146:	6803      	ldr	r3, [r0, #0]
 8003148:	685b      	ldr	r3, [r3, #4]
 800314a:	4798      	blx	r3
 800314c:	6823      	ldr	r3, [r4, #0]
 800314e:	3501      	adds	r5, #1
 8003150:	51de      	str	r6, [r3, r7]
 8003152:	e7eb      	b.n	800312c <RDMSubDevices::~RDMSubDevices()+0x8>

08003154 <RDMSubDevices::GetInfo(unsigned short)>:
 8003154:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 8003158:	6803      	ldr	r3, [r0, #0]
 800315a:	3901      	subs	r1, #1
 800315c:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
 8003160:	3010      	adds	r0, #16
 8003162:	4770      	bx	lr

08003164 <RDMSubDevices::GetLabel(unsigned short, TRDMDeviceInfoData*)>:
 8003164:	f101 4380 	add.w	r3, r1, #1073741824	; 0x40000000
 8003168:	6800      	ldr	r0, [r0, #0]
 800316a:	3b01      	subs	r3, #1
 800316c:	4611      	mov	r1, r2
 800316e:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 8003172:	f000 b8b2 	b.w	80032da <RDMSubDevice::GetLabel(TRDMDeviceInfoData*)>

08003176 <RDMSubDevices::SetLabel(unsigned short, char const*, unsigned char)>:
 8003176:	b410      	push	{r4}
 8003178:	460c      	mov	r4, r1
 800317a:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
 800317e:	3c01      	subs	r4, #1
 8003180:	6800      	ldr	r0, [r0, #0]
 8003182:	4611      	mov	r1, r2
 8003184:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 8003188:	f85d 4b04 	ldr.w	r4, [sp], #4
 800318c:	461a      	mov	r2, r3
 800318e:	f000 b8b9 	b.w	8003304 <RDMSubDevice::SetLabel(char const*, unsigned char)>

08003192 <RDMSubDevices::GetDmxStartAddress(unsigned short)>:
 8003192:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 8003196:	6803      	ldr	r3, [r0, #0]
 8003198:	3901      	subs	r1, #1
 800319a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800319e:	8a58      	ldrh	r0, [r3, #18]
 80031a0:	4770      	bx	lr

080031a2 <RDMSubDevices::SetDmxStartAddress(unsigned short, unsigned short)>:
 80031a2:	f101 4380 	add.w	r3, r1, #1073741824	; 0x40000000
 80031a6:	6800      	ldr	r0, [r0, #0]
 80031a8:	3b01      	subs	r3, #1
 80031aa:	4611      	mov	r1, r2
 80031ac:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 80031b0:	f000 b887 	b.w	80032c2 <RDMSubDevice::SetDmxStartAddress(unsigned short)>

080031b4 <RDMSubDevices::GetDmxFootPrint(unsigned short)>:
 80031b4:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 80031b8:	6803      	ldr	r3, [r0, #0]
 80031ba:	3901      	subs	r1, #1
 80031bc:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80031c0:	8a18      	ldrh	r0, [r3, #16]
 80031c2:	4770      	bx	lr

080031c4 <RDMSubDevices::GetPersonalityCurrent(unsigned short)>:
 80031c4:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 80031c8:	6803      	ldr	r3, [r0, #0]
 80031ca:	3901      	subs	r1, #1
 80031cc:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80031d0:	7d18      	ldrb	r0, [r3, #20]
 80031d2:	4770      	bx	lr

080031d4 <RDMSubDevices::SetPersonalityCurrent(unsigned short, unsigned char)>:
 80031d4:	f101 4380 	add.w	r3, r1, #1073741824	; 0x40000000
 80031d8:	6800      	ldr	r0, [r0, #0]
 80031da:	3b01      	subs	r3, #1
 80031dc:	4611      	mov	r1, r2
 80031de:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 80031e2:	f000 b89e 	b.w	8003322 <RDMSubDevice::SetPersonalityCurrent(unsigned char)>

080031e6 <RDMSubDevices::GetPersonalityCount(unsigned short)>:
 80031e6:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 80031ea:	6803      	ldr	r3, [r0, #0]
 80031ec:	3901      	subs	r1, #1
 80031ee:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80031f2:	7d58      	ldrb	r0, [r3, #21]
 80031f4:	4770      	bx	lr

080031f6 <RDMSubDevices::GetPersonality(unsigned short, unsigned char)>:
 80031f6:	f101 4380 	add.w	r3, r1, #1073741824	; 0x40000000
 80031fa:	6800      	ldr	r0, [r0, #0]
 80031fc:	3b01      	subs	r3, #1
 80031fe:	4611      	mov	r1, r2
 8003200:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 8003204:	f000 b862 	b.w	80032cc <RDMSubDevice::GetPersonality(unsigned char)>

08003208 <RDMSubDevices::Start()>:
 8003208:	b538      	push	{r3, r4, r5, lr}
 800320a:	4605      	mov	r5, r0
 800320c:	2400      	movs	r4, #0
 800320e:	88ab      	ldrh	r3, [r5, #4]
 8003210:	42a3      	cmp	r3, r4
 8003212:	d800      	bhi.n	8003216 <RDMSubDevices::Start()+0xe>
 8003214:	bd38      	pop	{r3, r4, r5, pc}
 8003216:	682b      	ldr	r3, [r5, #0]
 8003218:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800321c:	b110      	cbz	r0, 8003224 <RDMSubDevices::Start()+0x1c>
 800321e:	6803      	ldr	r3, [r0, #0]
 8003220:	68db      	ldr	r3, [r3, #12]
 8003222:	4798      	blx	r3
 8003224:	3401      	adds	r4, #1
 8003226:	e7f2      	b.n	800320e <RDMSubDevices::Start()+0x6>

08003228 <RDMSubDevices::Stop()>:
 8003228:	b538      	push	{r3, r4, r5, lr}
 800322a:	4605      	mov	r5, r0
 800322c:	2400      	movs	r4, #0
 800322e:	88ab      	ldrh	r3, [r5, #4]
 8003230:	42a3      	cmp	r3, r4
 8003232:	d800      	bhi.n	8003236 <RDMSubDevices::Stop()+0xe>
 8003234:	bd38      	pop	{r3, r4, r5, pc}
 8003236:	682b      	ldr	r3, [r5, #0]
 8003238:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800323c:	b110      	cbz	r0, 8003244 <RDMSubDevices::Stop()+0x1c>
 800323e:	6803      	ldr	r3, [r0, #0]
 8003240:	691b      	ldr	r3, [r3, #16]
 8003242:	4798      	blx	r3
 8003244:	3401      	adds	r4, #1
 8003246:	e7f2      	b.n	800322e <RDMSubDevices::Stop()+0x6>

08003248 <RDMSubDevices::SetData(unsigned char const*, unsigned int)>:
 8003248:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800324a:	4605      	mov	r5, r0
 800324c:	460f      	mov	r7, r1
 800324e:	4616      	mov	r6, r2
 8003250:	2400      	movs	r4, #0
 8003252:	88ab      	ldrh	r3, [r5, #4]
 8003254:	42a3      	cmp	r3, r4
 8003256:	d800      	bhi.n	800325a <RDMSubDevices::SetData(unsigned char const*, unsigned int)+0x12>
 8003258:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800325a:	682b      	ldr	r3, [r5, #0]
 800325c:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8003260:	b158      	cbz	r0, 800327a <RDMSubDevices::SetData(unsigned char const*, unsigned int)+0x32>
 8003262:	8a43      	ldrh	r3, [r0, #18]
 8003264:	8a02      	ldrh	r2, [r0, #16]
 8003266:	4413      	add	r3, r2
 8003268:	b29b      	uxth	r3, r3
 800326a:	3b01      	subs	r3, #1
 800326c:	42b3      	cmp	r3, r6
 800326e:	d804      	bhi.n	800327a <RDMSubDevices::SetData(unsigned char const*, unsigned int)+0x32>
 8003270:	6803      	ldr	r3, [r0, #0]
 8003272:	4632      	mov	r2, r6
 8003274:	695b      	ldr	r3, [r3, #20]
 8003276:	4639      	mov	r1, r7
 8003278:	4798      	blx	r3
 800327a:	3401      	adds	r4, #1
 800327c:	e7e9      	b.n	8003252 <RDMSubDevices::SetData(unsigned char const*, unsigned int)+0xa>

0800327e <RDMSubDevices::GetFactoryDefaults()>:
 800327e:	b538      	push	{r3, r4, r5, lr}
 8003280:	4605      	mov	r5, r0
 8003282:	2400      	movs	r4, #0
 8003284:	88ab      	ldrh	r3, [r5, #4]
 8003286:	42a3      	cmp	r3, r4
 8003288:	d801      	bhi.n	800328e <RDMSubDevices::GetFactoryDefaults()+0x10>
 800328a:	2001      	movs	r0, #1
 800328c:	e009      	b.n	80032a2 <RDMSubDevices::GetFactoryDefaults()+0x24>
 800328e:	682b      	ldr	r3, [r5, #0]
 8003290:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8003294:	b908      	cbnz	r0, 800329a <RDMSubDevices::GetFactoryDefaults()+0x1c>
 8003296:	3401      	adds	r4, #1
 8003298:	e7f4      	b.n	8003284 <RDMSubDevices::GetFactoryDefaults()+0x6>
 800329a:	f000 f86a 	bl	8003372 <RDMSubDevice::GetFactoryDefaults()>
 800329e:	2800      	cmp	r0, #0
 80032a0:	d1f9      	bne.n	8003296 <RDMSubDevices::GetFactoryDefaults()+0x18>
 80032a2:	bd38      	pop	{r3, r4, r5, pc}

080032a4 <RDMSubDevices::SetFactoryDefaults()>:
 80032a4:	b538      	push	{r3, r4, r5, lr}
 80032a6:	4605      	mov	r5, r0
 80032a8:	2400      	movs	r4, #0
 80032aa:	88ab      	ldrh	r3, [r5, #4]
 80032ac:	42a3      	cmp	r3, r4
 80032ae:	d800      	bhi.n	80032b2 <RDMSubDevices::SetFactoryDefaults()+0xe>
 80032b0:	bd38      	pop	{r3, r4, r5, pc}
 80032b2:	682b      	ldr	r3, [r5, #0]
 80032b4:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 80032b8:	b108      	cbz	r0, 80032be <RDMSubDevices::SetFactoryDefaults()+0x1a>
 80032ba:	f000 f834 	bl	8003326 <RDMSubDevice::SetFactoryDefaults()>
 80032be:	3401      	adds	r4, #1
 80032c0:	e7f3      	b.n	80032aa <RDMSubDevices::SetFactoryDefaults()+0x6>

080032c2 <RDMSubDevice::SetDmxStartAddress(unsigned short)>:
 80032c2:	6803      	ldr	r3, [r0, #0]
 80032c4:	8241      	strh	r1, [r0, #18]
 80032c6:	699b      	ldr	r3, [r3, #24]
 80032c8:	2100      	movs	r1, #0
 80032ca:	4718      	bx	r3

080032cc <RDMSubDevice::GetPersonality(unsigned char)>:
 80032cc:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 80032d0:	6843      	ldr	r3, [r0, #4]
 80032d2:	3901      	subs	r1, #1
 80032d4:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
 80032d8:	4770      	bx	lr

080032da <RDMSubDevice::GetLabel(TRDMDeviceInfoData*)>:
 80032da:	f100 0316 	add.w	r3, r0, #22
 80032de:	600b      	str	r3, [r1, #0]
 80032e0:	f890 3036 	ldrb.w	r3, [r0, #54]	; 0x36
 80032e4:	710b      	strb	r3, [r1, #4]
 80032e6:	4770      	bx	lr

080032e8 <RDMSubDevice::SetLabel(char const*)>:
 80032e8:	b510      	push	{r4, lr}
 80032ea:	2300      	movs	r3, #0
 80032ec:	f100 0415 	add.w	r4, r0, #21
 80032f0:	5cca      	ldrb	r2, [r1, r3]
 80032f2:	b122      	cbz	r2, 80032fe <RDMSubDevice::SetLabel(char const*)+0x16>
 80032f4:	3301      	adds	r3, #1
 80032f6:	2b20      	cmp	r3, #32
 80032f8:	f804 2f01 	strb.w	r2, [r4, #1]!
 80032fc:	d1f8      	bne.n	80032f0 <RDMSubDevice::SetLabel(char const*)+0x8>
 80032fe:	f880 3036 	strb.w	r3, [r0, #54]	; 0x36
 8003302:	bd10      	pop	{r4, pc}

08003304 <RDMSubDevice::SetLabel(char const*, unsigned char)>:
 8003304:	b530      	push	{r4, r5, lr}
 8003306:	2300      	movs	r3, #0
 8003308:	f100 0415 	add.w	r4, r0, #21
 800330c:	429a      	cmp	r2, r3
 800330e:	d905      	bls.n	800331c <RDMSubDevice::SetLabel(char const*, unsigned char)+0x18>
 8003310:	5ccd      	ldrb	r5, [r1, r3]
 8003312:	f804 5f01 	strb.w	r5, [r4, #1]!
 8003316:	3301      	adds	r3, #1
 8003318:	2b20      	cmp	r3, #32
 800331a:	d1f7      	bne.n	800330c <RDMSubDevice::SetLabel(char const*, unsigned char)+0x8>
 800331c:	f880 3036 	strb.w	r3, [r0, #54]	; 0x36
 8003320:	bd30      	pop	{r4, r5, pc}

08003322 <RDMSubDevice::SetPersonalityCurrent(unsigned char)>:
 8003322:	7501      	strb	r1, [r0, #20]
 8003324:	4770      	bx	lr

08003326 <RDMSubDevice::SetFactoryDefaults()>:
 8003326:	7a03      	ldrb	r3, [r0, #8]
 8003328:	b510      	push	{r4, lr}
 800332a:	b94b      	cbnz	r3, 8003340 <RDMSubDevice::SetFactoryDefaults()+0x1a>
 800332c:	f100 0138 	add.w	r1, r0, #56	; 0x38
 8003330:	f7ff ffda 	bl	80032e8 <RDMSubDevice::SetLabel(char const*)>
 8003334:	8983      	ldrh	r3, [r0, #12]
 8003336:	8243      	strh	r3, [r0, #18]
 8003338:	7b83      	ldrb	r3, [r0, #14]
 800333a:	7503      	strb	r3, [r0, #20]
 800333c:	2301      	movs	r3, #1
 800333e:	7203      	strb	r3, [r0, #8]
 8003340:	bd10      	pop	{r4, pc}

08003342 <RDMSubDevice::CalculateChecksum()>:
 8003342:	b510      	push	{r4, lr}
 8003344:	8a43      	ldrh	r3, [r0, #18]
 8003346:	7d02      	ldrb	r2, [r0, #20]
 8003348:	f890 4036 	ldrb.w	r4, [r0, #54]	; 0x36
 800334c:	4413      	add	r3, r2
 800334e:	f100 0215 	add.w	r2, r0, #21
 8003352:	f1c0 20ff 	rsb	r0, r0, #4278255360	; 0xff00ff00
 8003356:	f500 007f 	add.w	r0, r0, #16711680	; 0xff0000
 800335a:	b29b      	uxth	r3, r3
 800335c:	30eb      	adds	r0, #235	; 0xeb
 800335e:	1881      	adds	r1, r0, r2
 8003360:	428c      	cmp	r4, r1
 8003362:	d801      	bhi.n	8003368 <RDMSubDevice::CalculateChecksum()+0x26>
 8003364:	4618      	mov	r0, r3
 8003366:	bd10      	pop	{r4, pc}
 8003368:	f812 1f01 	ldrb.w	r1, [r2, #1]!
 800336c:	440b      	add	r3, r1
 800336e:	b29b      	uxth	r3, r3
 8003370:	e7f5      	b.n	800335e <RDMSubDevice::CalculateChecksum()+0x1c>

08003372 <RDMSubDevice::GetFactoryDefaults()>:
 8003372:	7a03      	ldrb	r3, [r0, #8]
 8003374:	b510      	push	{r4, lr}
 8003376:	4604      	mov	r4, r0
 8003378:	b133      	cbz	r3, 8003388 <RDMSubDevice::GetFactoryDefaults()+0x16>
 800337a:	f7ff ffe2 	bl	8003342 <RDMSubDevice::CalculateChecksum()>
 800337e:	8963      	ldrh	r3, [r4, #10]
 8003380:	4283      	cmp	r3, r0
 8003382:	bf1c      	itt	ne
 8003384:	2300      	movne	r3, #0
 8003386:	7223      	strbne	r3, [r4, #8]
 8003388:	7a20      	ldrb	r0, [r4, #8]
 800338a:	bd10      	pop	{r4, pc}

0800338c <Rdm::Receive(unsigned int)>:
 800338c:	4b02      	ldr	r3, [pc, #8]	; (8003398 <Rdm::Receive(unsigned int)+0xc>)
 800338e:	4601      	mov	r1, r0
 8003390:	6818      	ldr	r0, [r3, #0]
 8003392:	f000 bc39 	b.w	8003c08 <Dmx::RdmReceive(unsigned int)>
 8003396:	bf00      	nop
 8003398:	200005d4 	ldrdcs	r0, [r0], -r4

0800339c <Rdm::SendRaw(unsigned int, unsigned char const*, unsigned int)>:
 800339c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80033a0:	4d0d      	ldr	r5, [pc, #52]	; (80033d8 <Rdm::SendRaw(unsigned int, unsigned char const*, unsigned int)+0x3c>)
 80033a2:	2300      	movs	r3, #0
 80033a4:	4604      	mov	r4, r0
 80033a6:	460e      	mov	r6, r1
 80033a8:	4617      	mov	r7, r2
 80033aa:	4601      	mov	r1, r0
 80033ac:	461a      	mov	r2, r3
 80033ae:	6828      	ldr	r0, [r5, #0]
 80033b0:	f000 fabe 	bl	8003930 <Dmx::SetPortDirection(unsigned int, dmx::PortDirection, bool)>
 80033b4:	463b      	mov	r3, r7
 80033b6:	4632      	mov	r2, r6
 80033b8:	6828      	ldr	r0, [r5, #0]
 80033ba:	4621      	mov	r1, r4
 80033bc:	f000 fbde 	bl	8003b7c <Dmx::RdmSendRaw(unsigned int, unsigned char const*, unsigned int)>
 80033c0:	2100      	movs	r1, #0
 80033c2:	2004      	movs	r0, #4
 80033c4:	f006 fb52 	bl	8009a6c <udelay(unsigned int, unsigned int)>
 80033c8:	2301      	movs	r3, #1
 80033ca:	6828      	ldr	r0, [r5, #0]
 80033cc:	4621      	mov	r1, r4
 80033ce:	461a      	mov	r2, r3
 80033d0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80033d4:	f000 baac 	b.w	8003930 <Dmx::SetPortDirection(unsigned int, dmx::PortDirection, bool)>
 80033d8:	200005d4 	ldrdcs	r0, [r0], -r4

080033dc <USART2_IRQHandler>:
 80033dc:	4977      	ldr	r1, [pc, #476]	; (80035bc <USART2_IRQHandler+0x1e0>)
 80033de:	b510      	push	{r4, lr}
 80033e0:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 80033e4:	2408      	movs	r4, #8
 80033e6:	f8c1 4c10 	str.w	r4, [r1, #3088]	; 0xc10
 80033ea:	f8d2 3800 	ldr.w	r3, [r2, #2048]	; 0x800
 80033ee:	f013 0f02 	tst.w	r3, #2
 80033f2:	4b73      	ldr	r3, [pc, #460]	; (80035c0 <USART2_IRQHandler+0x1e4>)
 80033f4:	d018      	beq.n	8003428 <USART2_IRQHandler+0x4c>
 80033f6:	f8d2 0800 	ldr.w	r0, [r2, #2048]	; 0x800
 80033fa:	f020 0002 	bic.w	r0, r0, #2
 80033fe:	f8c2 0800 	str.w	r0, [r2, #2048]	; 0x800
 8003402:	f8d2 2804 	ldr.w	r2, [r2, #2052]	; 0x804
 8003406:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800340a:	b962      	cbnz	r2, 8003426 <USART2_IRQHandler+0x4a>
 800340c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8003410:	2201      	movs	r2, #1
 8003412:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
 8003416:	2310      	movs	r3, #16
 8003418:	f8c1 4c14 	str.w	r4, [r1, #3092]	; 0xc14
 800341c:	f8c1 3c14 	str.w	r3, [r1, #3092]	; 0xc14
 8003420:	2320      	movs	r3, #32
 8003422:	f8c1 3c14 	str.w	r3, [r1, #3092]	; 0xc14
 8003426:	bd10      	pop	{r4, pc}
 8003428:	f8d2 2804 	ldr.w	r2, [r2, #2052]	; 0x804
 800342c:	f8d3 020c 	ldr.w	r0, [r3, #524]	; 0x20c
 8003430:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003434:	2807      	cmp	r0, #7
 8003436:	f200 80bc 	bhi.w	80035b2 <USART2_IRQHandler+0x1d6>
 800343a:	e8df f000 	tbb	[pc, r0]
 800343e:	41ba1804 			; <UNDEFINED> instruction: 0x41ba1804
 8003442:	a1807056 	orrge	r7, r0, r6, asr r0
 8003446:	701a      	strb	r2, [r3, #0]
 8003448:	2107      	movs	r1, #7
 800344a:	2201      	movs	r2, #1
 800344c:	f8c3 120c 	str.w	r1, [r3, #524]	; 0x20c
 8003450:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8003454:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003458:	4a5a      	ldr	r2, [pc, #360]	; (80035c4 <USART2_IRQHandler+0x1e8>)
 800345a:	f8d3 3424 	ldr.w	r3, [r3, #1060]	; 0x424
 800345e:	b29b      	uxth	r3, r3
 8003460:	8193      	strh	r3, [r2, #12]
 8003462:	4b56      	ldr	r3, [pc, #344]	; (80035bc <USART2_IRQHandler+0x1e0>)
 8003464:	2210      	movs	r2, #16
 8003466:	f8c3 2c10 	str.w	r2, [r3, #3088]	; 0xc10
 800346a:	2220      	movs	r2, #32
 800346c:	e017      	b.n	800349e <USART2_IRQHandler+0xc2>
 800346e:	b11a      	cbz	r2, 8003478 <USART2_IRQHandler+0x9c>
 8003470:	2acc      	cmp	r2, #204	; 0xcc
 8003472:	d01b      	beq.n	80034ac <USART2_IRQHandler+0xd0>
 8003474:	2200      	movs	r2, #0
 8003476:	e05f      	b.n	8003538 <USART2_IRQHandler+0x15c>
 8003478:	701a      	strb	r2, [r3, #0]
 800347a:	2201      	movs	r2, #1
 800347c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8003480:	4a50      	ldr	r2, [pc, #320]	; (80035c4 <USART2_IRQHandler+0x1e8>)
 8003482:	6851      	ldr	r1, [r2, #4]
 8003484:	3101      	adds	r1, #1
 8003486:	6051      	str	r1, [r2, #4]
 8003488:	2103      	movs	r1, #3
 800348a:	f8c3 120c 	str.w	r1, [r3, #524]	; 0x20c
 800348e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003492:	f8d3 3424 	ldr.w	r3, [r3, #1060]	; 0x424
 8003496:	b29b      	uxth	r3, r3
 8003498:	8193      	strh	r3, [r2, #12]
 800349a:	4b48      	ldr	r3, [pc, #288]	; (80035bc <USART2_IRQHandler+0x1e0>)
 800349c:	2210      	movs	r2, #16
 800349e:	f8c3 2c10 	str.w	r2, [r3, #3088]	; 0xc10
 80034a2:	4b46      	ldr	r3, [pc, #280]	; (80035bc <USART2_IRQHandler+0x1e0>)
 80034a4:	2208      	movs	r2, #8
 80034a6:	f8c3 2c14 	str.w	r2, [r3, #3092]	; 0xc14
 80034aa:	e7bc      	b.n	8003426 <USART2_IRQHandler+0x4a>
 80034ac:	701a      	strb	r2, [r3, #0]
 80034ae:	f8a3 2208 	strh.w	r2, [r3, #520]	; 0x208
 80034b2:	2201      	movs	r2, #1
 80034b4:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 80034b8:	2204      	movs	r2, #4
 80034ba:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
 80034be:	e7ec      	b.n	800349a <USART2_IRQHandler+0xbe>
 80034c0:	f8d3 1204 	ldr.w	r1, [r3, #516]	; 0x204
 80034c4:	545a      	strb	r2, [r3, r1]
 80034c6:	1c4a      	adds	r2, r1, #1
 80034c8:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 80034cc:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 80034d0:	d95e      	bls.n	8003590 <USART2_IRQHandler+0x1b4>
 80034d2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80034d6:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 80034da:	2200      	movs	r2, #0
 80034dc:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
 80034e0:	4b36      	ldr	r3, [pc, #216]	; (80035bc <USART2_IRQHandler+0x1e0>)
 80034e2:	2210      	movs	r2, #16
 80034e4:	f8c3 2c14 	str.w	r2, [r3, #3092]	; 0xc14
 80034e8:	e7db      	b.n	80034a2 <USART2_IRQHandler+0xc6>
 80034ea:	f8d3 1204 	ldr.w	r1, [r3, #516]	; 0x204
 80034ee:	f8b3 4208 	ldrh.w	r4, [r3, #520]	; 0x208
 80034f2:	545a      	strb	r2, [r3, r1]
 80034f4:	1c48      	adds	r0, r1, #1
 80034f6:	3917      	subs	r1, #23
 80034f8:	4422      	add	r2, r4
 80034fa:	29e9      	cmp	r1, #233	; 0xe9
 80034fc:	f8c3 0204 	str.w	r0, [r3, #516]	; 0x204
 8003500:	f8a3 2208 	strh.w	r2, [r3, #520]	; 0x208
 8003504:	d807      	bhi.n	8003516 <USART2_IRQHandler+0x13a>
 8003506:	789a      	ldrb	r2, [r3, #2]
 8003508:	4290      	cmp	r0, r2
 800350a:	d104      	bne.n	8003516 <USART2_IRQHandler+0x13a>
 800350c:	2205      	movs	r2, #5
 800350e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
 8003512:	4b2a      	ldr	r3, [pc, #168]	; (80035bc <USART2_IRQHandler+0x1e0>)
 8003514:	e7a9      	b.n	800346a <USART2_IRQHandler+0x8e>
 8003516:	f5b0 7f81 	cmp.w	r0, #258	; 0x102
 800351a:	d3c2      	bcc.n	80034a2 <USART2_IRQHandler+0xc6>
 800351c:	e7aa      	b.n	8003474 <USART2_IRQHandler+0x98>
 800351e:	f8d3 1204 	ldr.w	r1, [r3, #516]	; 0x204
 8003522:	545a      	strb	r2, [r3, r1]
 8003524:	3101      	adds	r1, #1
 8003526:	f8c3 1204 	str.w	r1, [r3, #516]	; 0x204
 800352a:	f8b3 1208 	ldrh.w	r1, [r3, #520]	; 0x208
 800352e:	eba1 2202 	sub.w	r2, r1, r2, lsl #8
 8003532:	f8a3 2208 	strh.w	r2, [r3, #520]	; 0x208
 8003536:	2206      	movs	r2, #6
 8003538:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
 800353c:	e7b1      	b.n	80034a2 <USART2_IRQHandler+0xc6>
 800353e:	2020      	movs	r0, #32
 8003540:	f8c1 0c14 	str.w	r0, [r1, #3092]	; 0xc14
 8003544:	f8b3 4208 	ldrh.w	r4, [r3, #520]	; 0x208
 8003548:	f8d3 0204 	ldr.w	r0, [r3, #516]	; 0x204
 800354c:	541a      	strb	r2, [r3, r0]
 800354e:	1aa2      	subs	r2, r4, r2
 8003550:	b292      	uxth	r2, r2
 8003552:	f8a3 2208 	strh.w	r2, [r3, #520]	; 0x208
 8003556:	b912      	cbnz	r2, 800355e <USART2_IRQHandler+0x182>
 8003558:	785a      	ldrb	r2, [r3, #1]
 800355a:	2a01      	cmp	r2, #1
 800355c:	d003      	beq.n	8003566 <USART2_IRQHandler+0x18a>
 800355e:	2200      	movs	r2, #0
 8003560:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8003564:	e786      	b.n	8003474 <USART2_IRQHandler+0x98>
 8003566:	3001      	adds	r0, #1
 8003568:	4a17      	ldr	r2, [pc, #92]	; (80035c8 <USART2_IRQHandler+0x1ec>)
 800356a:	f440 4080 	orr.w	r0, r0, #16384	; 0x4000
 800356e:	f8c3 0204 	str.w	r0, [r3, #516]	; 0x204
 8003572:	6850      	ldr	r0, [r2, #4]
 8003574:	4a15      	ldr	r2, [pc, #84]	; (80035cc <USART2_IRQHandler+0x1f0>)
 8003576:	6010      	str	r0, [r2, #0]
 8003578:	2210      	movs	r2, #16
 800357a:	f8c1 2c14 	str.w	r2, [r1, #3092]	; 0xc14
 800357e:	e779      	b.n	8003474 <USART2_IRQHandler+0x98>
 8003580:	f8d3 1204 	ldr.w	r1, [r3, #516]	; 0x204
 8003584:	2917      	cmp	r1, #23
 8003586:	bf9e      	ittt	ls
 8003588:	545a      	strbls	r2, [r3, r1]
 800358a:	3101      	addls	r1, #1
 800358c:	f8c3 1204 	strls.w	r1, [r3, #516]	; 0x204
 8003590:	480c      	ldr	r0, [pc, #48]	; (80035c4 <USART2_IRQHandler+0x1e8>)
 8003592:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8003596:	f8d1 2424 	ldr.w	r2, [r1, #1060]	; 0x424
 800359a:	8983      	ldrh	r3, [r0, #12]
 800359c:	b29b      	uxth	r3, r3
 800359e:	b292      	uxth	r2, r2
 80035a0:	f1c3 0304 	rsb	r3, r3, #4
 80035a4:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 80035a8:	b29b      	uxth	r3, r3
 80035aa:	8182      	strh	r2, [r0, #12]
 80035ac:	f8c1 3434 	str.w	r3, [r1, #1076]	; 0x434
 80035b0:	e777      	b.n	80034a2 <USART2_IRQHandler+0xc6>
 80035b2:	2200      	movs	r2, #0
 80035b4:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 80035b8:	e7be      	b.n	8003538 <USART2_IRQHandler+0x15c>
 80035ba:	bf00      	nop
 80035bc:	40010000 	andmi	r0, r1, r0
 80035c0:	200001a8 	andcs	r0, r0, r8, lsr #3
 80035c4:	200005c0 	andcs	r0, r0, r0, asr #11
 80035c8:	e0001000 	and	r1, r0, r0
 80035cc:	200005d8 	ldrdcs	r0, [r0], -r8

080035d0 <TIMER1_IRQHandler>:
 80035d0:	b538      	push	{r3, r4, r5, lr}
 80035d2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80035d6:	4a24      	ldr	r2, [pc, #144]	; (8003668 <TIMER1_IRQHandler+0x98>)
 80035d8:	691c      	ldr	r4, [r3, #16]
 80035da:	4924      	ldr	r1, [pc, #144]	; (800366c <TIMER1_IRQHandler+0x9c>)
 80035dc:	8813      	ldrh	r3, [r2, #0]
 80035de:	2008      	movs	r0, #8
 80035e0:	f8c1 0c10 	str.w	r0, [r1, #3088]	; 0xc10
 80035e4:	07a1      	lsls	r1, r4, #30
 80035e6:	b29b      	uxth	r3, r3
 80035e8:	d51b      	bpl.n	8003622 <TIMER1_IRQHandler+0x52>
 80035ea:	07dd      	lsls	r5, r3, #31
 80035ec:	d50f      	bpl.n	800360e <TIMER1_IRQHandler+0x3e>
 80035ee:	8813      	ldrh	r3, [r2, #0]
 80035f0:	4d1f      	ldr	r5, [pc, #124]	; (8003670 <TIMER1_IRQHandler+0xa0>)
 80035f2:	b29b      	uxth	r3, r3
 80035f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80035f8:	8013      	strh	r3, [r2, #0]
 80035fa:	2110      	movs	r1, #16
 80035fc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003600:	2203      	movs	r2, #3
 8003602:	4628      	mov	r0, r5
 8003604:	f005 fac8 	bl	8008b98 <gpio_init>
 8003608:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800360c:	616b      	str	r3, [r5, #20]
 800360e:	4621      	mov	r1, r4
 8003610:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8003614:	f005 fd91 	bl	800913a <timer_interrupt_flag_clear>
 8003618:	4b14      	ldr	r3, [pc, #80]	; (800366c <TIMER1_IRQHandler+0x9c>)
 800361a:	2208      	movs	r2, #8
 800361c:	f8c3 2c14 	str.w	r2, [r3, #3092]	; 0xc14
 8003620:	bd38      	pop	{r3, r4, r5, pc}
 8003622:	0760      	lsls	r0, r4, #29
 8003624:	d509      	bpl.n	800363a <TIMER1_IRQHandler+0x6a>
 8003626:	05d9      	lsls	r1, r3, #23
 8003628:	d5f1      	bpl.n	800360e <TIMER1_IRQHandler+0x3e>
 800362a:	4811      	ldr	r0, [pc, #68]	; (8003670 <TIMER1_IRQHandler+0xa0>)
 800362c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003630:	2203      	movs	r2, #3
 8003632:	2118      	movs	r1, #24
 8003634:	f005 fab0 	bl	8008b98 <gpio_init>
 8003638:	e7e9      	b.n	800360e <TIMER1_IRQHandler+0x3e>
 800363a:	0722      	lsls	r2, r4, #28
 800363c:	d5e7      	bpl.n	800360e <TIMER1_IRQHandler+0x3e>
 800363e:	05db      	lsls	r3, r3, #23
 8003640:	d5e5      	bpl.n	800360e <TIMER1_IRQHandler+0x3e>
 8003642:	4b0c      	ldr	r3, [pc, #48]	; (8003674 <TIMER1_IRQHandler+0xa4>)
 8003644:	480c      	ldr	r0, [pc, #48]	; (8003678 <TIMER1_IRQHandler+0xa8>)
 8003646:	69da      	ldr	r2, [r3, #28]
 8003648:	f022 0201 	bic.w	r2, r2, #1
 800364c:	61da      	str	r2, [r3, #28]
 800364e:	4a0b      	ldr	r2, [pc, #44]	; (800367c <TIMER1_IRQHandler+0xac>)
 8003650:	629a      	str	r2, [r3, #40]	; 0x28
 8003652:	f8b2 2202 	ldrh.w	r2, [r2, #514]	; 0x202
 8003656:	621a      	str	r2, [r3, #32]
 8003658:	69da      	ldr	r2, [r3, #28]
 800365a:	f042 0201 	orr.w	r2, r2, #1
 800365e:	61da      	str	r2, [r3, #28]
 8003660:	2180      	movs	r1, #128	; 0x80
 8003662:	f005 fe3d 	bl	80092e0 <usart_dma_transmit_config>
 8003666:	e7d2      	b.n	800360e <TIMER1_IRQHandler+0x3e>
 8003668:	200005d0 	ldrdcs	r0, [r0], -r0	; <UNPREDICTABLE>
 800366c:	40010000 	andmi	r0, r1, r0
 8003670:	40011000 	andmi	r1, r1, r0
 8003674:	40020000 	andmi	r0, r2, r0
 8003678:	40004800 	andmi	r4, r0, r0, lsl #16
 800367c:	200003b8 			; <UNDEFINED> instruction: 0x200003b8

08003680 <TIMER2_IRQHandler>:
 8003680:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003684:	f8d3 1410 	ldr.w	r1, [r3, #1040]	; 0x410
 8003688:	078b      	lsls	r3, r1, #30
 800368a:	d511      	bpl.n	80036b0 <TIMER2_IRQHandler+0x30>
 800368c:	4b13      	ldr	r3, [pc, #76]	; (80036dc <TIMER2_IRQHandler+0x5c>)
 800368e:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8003692:	2a03      	cmp	r2, #3
 8003694:	d10f      	bne.n	80036b6 <TIMER2_IRQHandler+0x36>
 8003696:	2200      	movs	r2, #0
 8003698:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
 800369c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80036a0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80036a4:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 80036a8:	4b0d      	ldr	r3, [pc, #52]	; (80036e0 <TIMER2_IRQHandler+0x60>)
 80036aa:	2210      	movs	r2, #16
 80036ac:	f8c3 2c14 	str.w	r2, [r3, #3092]	; 0xc14
 80036b0:	480c      	ldr	r0, [pc, #48]	; (80036e4 <TIMER2_IRQHandler+0x64>)
 80036b2:	f005 bd42 	b.w	800913a <timer_interrupt_flag_clear>
 80036b6:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80036ba:	2a07      	cmp	r2, #7
 80036bc:	d1f8      	bne.n	80036b0 <TIMER2_IRQHandler+0x30>
 80036be:	2200      	movs	r2, #0
 80036c0:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
 80036c4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80036c8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80036cc:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 80036d0:	4b03      	ldr	r3, [pc, #12]	; (80036e0 <TIMER2_IRQHandler+0x60>)
 80036d2:	2210      	movs	r2, #16
 80036d4:	f8c3 2c14 	str.w	r2, [r3, #3092]	; 0xc14
 80036d8:	2220      	movs	r2, #32
 80036da:	e7e7      	b.n	80036ac <TIMER2_IRQHandler+0x2c>
 80036dc:	200001a8 	andcs	r0, r0, r8, lsr #3
 80036e0:	40010000 	andmi	r0, r1, r0
 80036e4:	40000400 	andmi	r0, r0, r0, lsl #8

080036e8 <TIMER3_IRQHandler>:
 80036e8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80036ec:	4802      	ldr	r0, [pc, #8]	; (80036f8 <TIMER3_IRQHandler+0x10>)
 80036ee:	f8d3 1810 	ldr.w	r1, [r3, #2064]	; 0x810
 80036f2:	f005 bd22 	b.w	800913a <timer_interrupt_flag_clear>
 80036f6:	bf00      	nop
 80036f8:	40000800 	andmi	r0, r0, r0, lsl #16

080036fc <TIMER6_IRQHandler>:
 80036fc:	4b05      	ldr	r3, [pc, #20]	; (8003714 <TIMER6_IRQHandler+0x18>)
 80036fe:	4806      	ldr	r0, [pc, #24]	; (8003718 <TIMER6_IRQHandler+0x1c>)
 8003700:	685a      	ldr	r2, [r3, #4]
 8003702:	6899      	ldr	r1, [r3, #8]
 8003704:	1a52      	subs	r2, r2, r1
 8003706:	601a      	str	r2, [r3, #0]
 8003708:	685a      	ldr	r2, [r3, #4]
 800370a:	609a      	str	r2, [r3, #8]
 800370c:	2101      	movs	r1, #1
 800370e:	f005 bd14 	b.w	800913a <timer_interrupt_flag_clear>
 8003712:	bf00      	nop
 8003714:	200005c0 	andcs	r0, r0, r0, asr #11
 8003718:	40001400 	andmi	r1, r0, r0, lsl #8

0800371c <Dmx::ClearData(unsigned int)>:
 800371c:	4a0a      	ldr	r2, [pc, #40]	; (8003748 <Dmx::ClearData(unsigned int)+0x2c>)
 800371e:	f44f 7301 	mov.w	r3, #516	; 0x204
 8003722:	fb03 2301 	mla	r3, r3, r1, r2
 8003726:	b510      	push	{r4, lr}
 8003728:	f203 2002 	addw	r0, r3, #514	; 0x202
 800372c:	2400      	movs	r4, #0
 800372e:	f823 4b02 	strh.w	r4, [r3], #2
 8003732:	4283      	cmp	r3, r0
 8003734:	d1fb      	bne.n	800372e <Dmx::ClearData(unsigned int)+0x12>
 8003736:	f44f 7301 	mov.w	r3, #516	; 0x204
 800373a:	fb03 2101 	mla	r1, r3, r1, r2
 800373e:	f240 2301 	movw	r3, #513	; 0x201
 8003742:	f8a1 3202 	strh.w	r3, [r1, #514]	; 0x202
 8003746:	bd10      	pop	{r4, pc}
 8003748:	200003b8 			; <UNDEFINED> instruction: 0x200003b8

0800374c <Dmx::StartData(unsigned int, unsigned int)>:
 800374c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800374e:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 8003752:	b085      	sub	sp, #20
 8003754:	6943      	ldr	r3, [r0, #20]
 8003756:	460c      	mov	r4, r1
 8003758:	4615      	mov	r5, r2
 800375a:	2b00      	cmp	r3, #0
 800375c:	d168      	bne.n	8003830 <Dmx::StartData(unsigned int, unsigned int)+0xe4>
 800375e:	4e46      	ldr	r6, [pc, #280]	; (8003878 <Dmx::StartData(unsigned int, unsigned int)+0x12c>)
 8003760:	8834      	ldrh	r4, [r6, #0]
 8003762:	b2a4      	uxth	r4, r4
 8003764:	2c00      	cmp	r4, #0
 8003766:	d157      	bne.n	8003818 <Dmx::StartData(unsigned int, unsigned int)+0xcc>
 8003768:	f44f 60e0 	mov.w	r0, #1792	; 0x700
 800376c:	f005 faac 	bl	8008cc8 <rcu_periph_clock_enable>
 8003770:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8003774:	f005 fc38 	bl	8008fe8 <timer_deinit>
 8003778:	4b40      	ldr	r3, [pc, #256]	; (800387c <Dmx::StartData(unsigned int, unsigned int)+0x130>)
 800377a:	f88d 400c 	strb.w	r4, [sp, #12]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	9302      	str	r3, [sp, #8]
 8003782:	4669      	mov	r1, sp
 8003784:	2377      	movs	r3, #119	; 0x77
 8003786:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800378a:	e9cd 3400 	strd	r3, r4, [sp]
 800378e:	f005 fc8d 	bl	80090ac <timer_init>
 8003792:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003796:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800379a:	f005 fcd1 	bl	8009140 <timer_flag_clear>
 800379e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80037a2:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80037a6:	f005 fcc8 	bl	800913a <timer_interrupt_flag_clear>
 80037aa:	2210      	movs	r2, #16
 80037ac:	4621      	mov	r1, r4
 80037ae:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80037b2:	f005 fcc8 	bl	8009146 <timer_channel_output_mode_config>
 80037b6:	2210      	movs	r2, #16
 80037b8:	2101      	movs	r1, #1
 80037ba:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80037be:	f005 fcc2 	bl	8009146 <timer_channel_output_mode_config>
 80037c2:	4f2f      	ldr	r7, [pc, #188]	; (8003880 <Dmx::StartData(unsigned int, unsigned int)+0x134>)
 80037c4:	2210      	movs	r2, #16
 80037c6:	2102      	movs	r1, #2
 80037c8:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80037cc:	f005 fcbb 	bl	8009146 <timer_channel_output_mode_config>
 80037d0:	4622      	mov	r2, r4
 80037d2:	4621      	mov	r1, r4
 80037d4:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80037d8:	f005 fcdb 	bl	8009192 <timer_channel_output_pulse_value_config>
 80037dc:	683a      	ldr	r2, [r7, #0]
 80037de:	2101      	movs	r1, #1
 80037e0:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80037e4:	f005 fcd5 	bl	8009192 <timer_channel_output_pulse_value_config>
 80037e8:	4b26      	ldr	r3, [pc, #152]	; (8003884 <Dmx::StartData(unsigned int, unsigned int)+0x138>)
 80037ea:	683a      	ldr	r2, [r7, #0]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	2102      	movs	r1, #2
 80037f0:	441a      	add	r2, r3
 80037f2:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80037f6:	f005 fccc 	bl	8009192 <timer_channel_output_pulse_value_config>
 80037fa:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80037fe:	210e      	movs	r1, #14
 8003800:	f005 fc97 	bl	8009132 <timer_interrupt_enable>
 8003804:	4b20      	ldr	r3, [pc, #128]	; (8003888 <Dmx::StartData(unsigned int, unsigned int)+0x13c>)
 8003806:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800380a:	f883 431c 	strb.w	r4, [r3, #796]	; 0x31c
 800380e:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8003812:	601a      	str	r2, [r3, #0]
 8003814:	f005 fc88 	bl	8009128 <timer_enable>
 8003818:	8831      	ldrh	r1, [r6, #0]
 800381a:	2201      	movs	r2, #1
 800381c:	fa02 f305 	lsl.w	r3, r2, r5
 8003820:	430b      	orrs	r3, r1
 8003822:	b29b      	uxth	r3, r3
 8003824:	8033      	strh	r3, [r6, #0]
 8003826:	4b19      	ldr	r3, [pc, #100]	; (800388c <Dmx::StartData(unsigned int, unsigned int)+0x140>)
 8003828:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800382c:	b005      	add	sp, #20
 800382e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003830:	4b17      	ldr	r3, [pc, #92]	; (8003890 <Dmx::StartData(unsigned int, unsigned int)+0x144>)
 8003832:	f44f 7204 	mov.w	r2, #528	; 0x210
 8003836:	fb02 3305 	mla	r3, r2, r5, r3
 800383a:	2200      	movs	r2, #0
 800383c:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
 8003840:	2107      	movs	r1, #7
 8003842:	4620      	mov	r0, r4
 8003844:	f005 fd52 	bl	80092ec <usart_flag_get>
 8003848:	2800      	cmp	r0, #0
 800384a:	d0f9      	beq.n	8003840 <Dmx::StartData(unsigned int, unsigned int)+0xf4>
 800384c:	4911      	ldr	r1, [pc, #68]	; (8003894 <Dmx::StartData(unsigned int, unsigned int)+0x148>)
 800384e:	4620      	mov	r0, r4
 8003850:	f005 fd6e 	bl	8009330 <usart_interrupt_flag_clear>
 8003854:	f240 3105 	movw	r1, #773	; 0x305
 8003858:	4620      	mov	r0, r4
 800385a:	f005 fd5d 	bl	8009318 <usart_interrupt_enable>
 800385e:	4b0b      	ldr	r3, [pc, #44]	; (800388c <Dmx::StartData(unsigned int, unsigned int)+0x140>)
 8003860:	2202      	movs	r2, #2
 8003862:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8003866:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800386a:	f8d2 340c 	ldr.w	r3, [r2, #1036]	; 0x40c
 800386e:	f043 0302 	orr.w	r3, r3, #2
 8003872:	f8c2 340c 	str.w	r3, [r2, #1036]	; 0x40c
 8003876:	e7d9      	b.n	800382c <Dmx::StartData(unsigned int, unsigned int)+0xe0>
 8003878:	200005d0 	ldrdcs	r0, [r0], -r0	; <UNPREDICTABLE>
 800387c:	20000000 	andcs	r0, r0, r0
 8003880:	20000008 	andcs	r0, r0, r8
 8003884:	20000004 	andcs	r0, r0, r4
 8003888:	e000e100 	and	lr, r0, r0, lsl #2
 800388c:	200005bc 			; <UNDEFINED> instruction: 0x200005bc
 8003890:	200001a8 	andcs	r0, r0, r8, lsr #3
 8003894:	00050305 	andeq	r0, r5, r5, lsl #6

08003898 <Dmx::StopData(unsigned int, unsigned int)>:
 8003898:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800389c:	4f21      	ldr	r7, [pc, #132]	; (8003924 <Dmx::StopData(unsigned int, unsigned int)+0x8c>)
 800389e:	f857 3022 	ldr.w	r3, [r7, r2, lsl #2]
 80038a2:	4688      	mov	r8, r1
 80038a4:	4614      	mov	r4, r2
 80038a6:	b323      	cbz	r3, 80038f2 <Dmx::StopData(unsigned int, unsigned int)+0x5a>
 80038a8:	6943      	ldr	r3, [r0, #20]
 80038aa:	bb23      	cbnz	r3, 80038f6 <Dmx::StopData(unsigned int, unsigned int)+0x5e>
 80038ac:	4d1e      	ldr	r5, [pc, #120]	; (8003928 <Dmx::StopData(unsigned int, unsigned int)+0x90>)
 80038ae:	882b      	ldrh	r3, [r5, #0]
 80038b0:	2601      	movs	r6, #1
 80038b2:	fa06 f202 	lsl.w	r2, r6, r2
 80038b6:	b29b      	uxth	r3, r3
 80038b8:	ea23 0302 	bic.w	r3, r3, r2
 80038bc:	802b      	strh	r3, [r5, #0]
 80038be:	f3bf 8f5f 	dmb	sy
 80038c2:	882b      	ldrh	r3, [r5, #0]
 80038c4:	f104 0208 	add.w	r2, r4, #8
 80038c8:	b29b      	uxth	r3, r3
 80038ca:	4096      	lsls	r6, r2
 80038cc:	ea36 0303 	bics.w	r3, r6, r3
 80038d0:	d105      	bne.n	80038de <Dmx::StopData(unsigned int, unsigned int)+0x46>
 80038d2:	2107      	movs	r1, #7
 80038d4:	4640      	mov	r0, r8
 80038d6:	f005 fd09 	bl	80092ec <usart_flag_get>
 80038da:	2801      	cmp	r0, #1
 80038dc:	d1f9      	bne.n	80038d2 <Dmx::StopData(unsigned int, unsigned int)+0x3a>
 80038de:	882b      	ldrh	r3, [r5, #0]
 80038e0:	b29b      	uxth	r3, r3
 80038e2:	ea23 0306 	bic.w	r3, r3, r6
 80038e6:	802b      	strh	r3, [r5, #0]
 80038e8:	f3bf 8f4f 	dsb	sy
 80038ec:	2300      	movs	r3, #0
 80038ee:	f847 3024 	str.w	r3, [r7, r4, lsl #2]
 80038f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80038f6:	f240 3105 	movw	r1, #773	; 0x305
 80038fa:	4640      	mov	r0, r8
 80038fc:	f005 fd16 	bl	800932c <usart_interrupt_disable>
 8003900:	4b0a      	ldr	r3, [pc, #40]	; (800392c <Dmx::StopData(unsigned int, unsigned int)+0x94>)
 8003902:	f44f 7204 	mov.w	r2, #528	; 0x210
 8003906:	fb02 3304 	mla	r3, r2, r4, r3
 800390a:	2200      	movs	r2, #0
 800390c:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
 8003910:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003914:	f8d2 340c 	ldr.w	r3, [r2, #1036]	; 0x40c
 8003918:	f023 0302 	bic.w	r3, r3, #2
 800391c:	f8c2 340c 	str.w	r3, [r2, #1036]	; 0x40c
 8003920:	e7e4      	b.n	80038ec <Dmx::StopData(unsigned int, unsigned int)+0x54>
 8003922:	bf00      	nop
 8003924:	200005bc 			; <UNDEFINED> instruction: 0x200005bc
 8003928:	200005d0 	ldrdcs	r0, [r0], -r0	; <UNPREDICTABLE>
 800392c:	200001a8 	andcs	r0, r0, r8, lsr #3

08003930 <Dmx::SetPortDirection(unsigned int, dmx::PortDirection, bool)>:
 8003930:	b570      	push	{r4, r5, r6, lr}
 8003932:	461d      	mov	r5, r3
 8003934:	6943      	ldr	r3, [r0, #20]
 8003936:	4293      	cmp	r3, r2
 8003938:	4606      	mov	r6, r0
 800393a:	4614      	mov	r4, r2
 800393c:	d014      	beq.n	8003968 <Dmx::SetPortDirection(unsigned int, dmx::PortDirection, bool)+0x38>
 800393e:	6142      	str	r2, [r0, #20]
 8003940:	4910      	ldr	r1, [pc, #64]	; (8003984 <Dmx::SetPortDirection(unsigned int, dmx::PortDirection, bool)+0x54>)
 8003942:	2200      	movs	r2, #0
 8003944:	f7ff ffa8 	bl	8003898 <Dmx::StopData(unsigned int, unsigned int)>
 8003948:	b934      	cbnz	r4, 8003958 <Dmx::SetPortDirection(unsigned int, dmx::PortDirection, bool)+0x28>
 800394a:	4b0f      	ldr	r3, [pc, #60]	; (8003988 <Dmx::SetPortDirection(unsigned int, dmx::PortDirection, bool)+0x58>)
 800394c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003950:	f8c3 2c10 	str.w	r2, [r3, #3088]	; 0xc10
 8003954:	b94d      	cbnz	r5, 800396a <Dmx::SetPortDirection(unsigned int, dmx::PortDirection, bool)+0x3a>
 8003956:	bd70      	pop	{r4, r5, r6, pc}
 8003958:	2c01      	cmp	r4, #1
 800395a:	d1fb      	bne.n	8003954 <Dmx::SetPortDirection(unsigned int, dmx::PortDirection, bool)+0x24>
 800395c:	4b0a      	ldr	r3, [pc, #40]	; (8003988 <Dmx::SetPortDirection(unsigned int, dmx::PortDirection, bool)+0x58>)
 800395e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003962:	f8c3 2c14 	str.w	r2, [r3, #3092]	; 0xc14
 8003966:	e7f5      	b.n	8003954 <Dmx::SetPortDirection(unsigned int, dmx::PortDirection, bool)+0x24>
 8003968:	b135      	cbz	r5, 8003978 <Dmx::SetPortDirection(unsigned int, dmx::PortDirection, bool)+0x48>
 800396a:	4630      	mov	r0, r6
 800396c:	4905      	ldr	r1, [pc, #20]	; (8003984 <Dmx::SetPortDirection(unsigned int, dmx::PortDirection, bool)+0x54>)
 800396e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8003972:	2200      	movs	r2, #0
 8003974:	f7ff beea 	b.w	800374c <Dmx::StartData(unsigned int, unsigned int)>
 8003978:	462a      	mov	r2, r5
 800397a:	4902      	ldr	r1, [pc, #8]	; (8003984 <Dmx::SetPortDirection(unsigned int, dmx::PortDirection, bool)+0x54>)
 800397c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8003980:	f7ff bf8a 	b.w	8003898 <Dmx::StopData(unsigned int, unsigned int)>
 8003984:	40004800 	andmi	r4, r0, r0, lsl #16
 8003988:	40010000 	andmi	r0, r1, r0

0800398c <Dmx::Dmx()>:
 800398c:	225c      	movs	r2, #92	; 0x5c
 800398e:	230c      	movs	r3, #12
 8003990:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003994:	e9c0 2300 	strd	r2, r3, [r0]
 8003998:	f246 13a8 	movw	r3, #25000	; 0x61a8
 800399c:	e9c0 3302 	strd	r3, r3, [r0, #8]
 80039a0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80039a4:	8203      	strh	r3, [r0, #16]
 80039a6:	4b5b      	ldr	r3, [pc, #364]	; (8003b14 <Dmx::Dmx()+0x188>)
 80039a8:	4e5b      	ldr	r6, [pc, #364]	; (8003b18 <Dmx::Dmx()+0x18c>)
 80039aa:	6018      	str	r0, [r3, #0]
 80039ac:	4b5b      	ldr	r3, [pc, #364]	; (8003b1c <Dmx::Dmx()+0x190>)
 80039ae:	f8df 8190 	ldr.w	r8, [pc, #400]	; 8003b40 <Dmx::Dmx()+0x1b4>
 80039b2:	2400      	movs	r4, #0
 80039b4:	b08b      	sub	sp, #44	; 0x2c
 80039b6:	4605      	mov	r5, r0
 80039b8:	801c      	strh	r4, [r3, #0]
 80039ba:	2203      	movs	r2, #3
 80039bc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80039c0:	4857      	ldr	r0, [pc, #348]	; (8003b20 <Dmx::Dmx()+0x194>)
 80039c2:	2110      	movs	r1, #16
 80039c4:	f005 f8e8 	bl	8008b98 <gpio_init>
 80039c8:	4621      	mov	r1, r4
 80039ca:	4628      	mov	r0, r5
 80039cc:	f7ff fea6 	bl	800371c <Dmx::ClearData(unsigned int)>
 80039d0:	4b54      	ldr	r3, [pc, #336]	; (8003b24 <Dmx::Dmx()+0x198>)
 80039d2:	2201      	movs	r2, #1
 80039d4:	4621      	mov	r1, r4
 80039d6:	601c      	str	r4, [r3, #0]
 80039d8:	4628      	mov	r0, r5
 80039da:	4623      	mov	r3, r4
 80039dc:	f7ff ffa8 	bl	8003930 <Dmx::SetPortDirection(unsigned int, dmx::PortDirection, bool)>
 80039e0:	4b51      	ldr	r3, [pc, #324]	; (8003b28 <Dmx::Dmx()+0x19c>)
 80039e2:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 80039e6:	f8c3 420c 	str.w	r4, [r3, #524]	; 0x20c
 80039ea:	f005 f96d 	bl	8008cc8 <rcu_periph_clock_enable>
 80039ee:	f240 5001 	movw	r0, #1281	; 0x501
 80039f2:	f005 f969 	bl	8008cc8 <rcu_periph_clock_enable>
 80039f6:	484d      	ldr	r0, [pc, #308]	; (8003b2c <Dmx::Dmx()+0x1a0>)
 80039f8:	2101      	movs	r1, #1
 80039fa:	f004 ffc1 	bl	8008980 <dma_deinit>
 80039fe:	4b4c      	ldr	r3, [pc, #304]	; (8003b30 <Dmx::Dmx()+0x1a4>)
 8003a00:	484a      	ldr	r0, [pc, #296]	; (8003b2c <Dmx::Dmx()+0x1a0>)
 8003a02:	9406      	str	r4, [sp, #24]
 8003a04:	2701      	movs	r7, #1
 8003a06:	e9cd 3403 	strd	r3, r4, [sp, #12]
 8003a0a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003a0e:	aa03      	add	r2, sp, #12
 8003a10:	9308      	str	r3, [sp, #32]
 8003a12:	4639      	mov	r1, r7
 8003a14:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003a18:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
 8003a1c:	f88d 7026 	strb.w	r7, [sp, #38]	; 0x26
 8003a20:	f004 ffd6 	bl	80089d0 <dma_init>
 8003a24:	4639      	mov	r1, r7
 8003a26:	4841      	ldr	r0, [pc, #260]	; (8003b2c <Dmx::Dmx()+0x1a0>)
 8003a28:	f005 f80c 	bl	8008a44 <dma_circulation_disable>
 8003a2c:	4639      	mov	r1, r7
 8003a2e:	483f      	ldr	r0, [pc, #252]	; (8003b2c <Dmx::Dmx()+0x1a0>)
 8003a30:	f005 f818 	bl	8008a64 <dma_memory_to_memory_disable>
 8003a34:	f240 7001 	movw	r0, #1793	; 0x701
 8003a38:	f005 f946 	bl	8008cc8 <rcu_periph_clock_enable>
 8003a3c:	4630      	mov	r0, r6
 8003a3e:	f005 fad3 	bl	8008fe8 <timer_deinit>
 8003a42:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
 8003a46:	2377      	movs	r3, #119	; 0x77
 8003a48:	a903      	add	r1, sp, #12
 8003a4a:	4630      	mov	r0, r6
 8003a4c:	e9cd 3403 	strd	r3, r4, [sp, #12]
 8003a50:	f8cd 9014 	str.w	r9, [sp, #20]
 8003a54:	f88d 4018 	strb.w	r4, [sp, #24]
 8003a58:	f005 fb28 	bl	80090ac <timer_init>
 8003a5c:	4649      	mov	r1, r9
 8003a5e:	4630      	mov	r0, r6
 8003a60:	f005 fb6e 	bl	8009140 <timer_flag_clear>
 8003a64:	4649      	mov	r1, r9
 8003a66:	4630      	mov	r0, r6
 8003a68:	f005 fb67 	bl	800913a <timer_interrupt_flag_clear>
 8003a6c:	4621      	mov	r1, r4
 8003a6e:	4630      	mov	r0, r6
 8003a70:	2210      	movs	r2, #16
 8003a72:	f005 fb68 	bl	8009146 <timer_channel_output_mode_config>
 8003a76:	4639      	mov	r1, r7
 8003a78:	4630      	mov	r0, r6
 8003a7a:	2210      	movs	r2, #16
 8003a7c:	f005 fb63 	bl	8009146 <timer_channel_output_mode_config>
 8003a80:	4630      	mov	r0, r6
 8003a82:	2210      	movs	r2, #16
 8003a84:	2102      	movs	r1, #2
 8003a86:	f005 fb5e 	bl	8009146 <timer_channel_output_mode_config>
 8003a8a:	2210      	movs	r2, #16
 8003a8c:	2103      	movs	r1, #3
 8003a8e:	4630      	mov	r0, r6
 8003a90:	f005 fb59 	bl	8009146 <timer_channel_output_mode_config>
 8003a94:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8003a98:	f888 431d 	strb.w	r4, [r8, #797]	; 0x31d
 8003a9c:	4630      	mov	r0, r6
 8003a9e:	f8c8 3000 	str.w	r3, [r8]
 8003aa2:	f005 fb41 	bl	8009128 <timer_enable>
 8003aa6:	f240 7005 	movw	r0, #1797	; 0x705
 8003aaa:	f005 f90d 	bl	8008cc8 <rcu_periph_clock_enable>
 8003aae:	4821      	ldr	r0, [pc, #132]	; (8003b34 <Dmx::Dmx()+0x1a8>)
 8003ab0:	f005 fa9a 	bl	8008fe8 <timer_deinit>
 8003ab4:	f642 63df 	movw	r3, #11999	; 0x2edf
 8003ab8:	f8ad 300c 	strh.w	r3, [sp, #12]
 8003abc:	a903      	add	r1, sp, #12
 8003abe:	f242 7310 	movw	r3, #10000	; 0x2710
 8003ac2:	481c      	ldr	r0, [pc, #112]	; (8003b34 <Dmx::Dmx()+0x1a8>)
 8003ac4:	9305      	str	r3, [sp, #20]
 8003ac6:	f005 faf1 	bl	80090ac <timer_init>
 8003aca:	4649      	mov	r1, r9
 8003acc:	4819      	ldr	r0, [pc, #100]	; (8003b34 <Dmx::Dmx()+0x1a8>)
 8003ace:	f005 fb37 	bl	8009140 <timer_flag_clear>
 8003ad2:	4649      	mov	r1, r9
 8003ad4:	4817      	ldr	r0, [pc, #92]	; (8003b34 <Dmx::Dmx()+0x1a8>)
 8003ad6:	f005 fb30 	bl	800913a <timer_interrupt_flag_clear>
 8003ada:	4639      	mov	r1, r7
 8003adc:	4815      	ldr	r0, [pc, #84]	; (8003b34 <Dmx::Dmx()+0x1a8>)
 8003ade:	f005 fb28 	bl	8009132 <timer_interrupt_enable>
 8003ae2:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8003ae6:	f888 4337 	strb.w	r4, [r8, #823]	; 0x337
 8003aea:	4812      	ldr	r0, [pc, #72]	; (8003b34 <Dmx::Dmx()+0x1a8>)
 8003aec:	f8c8 3004 	str.w	r3, [r8, #4]
 8003af0:	f005 fb1a 	bl	8009128 <timer_enable>
 8003af4:	2302      	movs	r3, #2
 8003af6:	9300      	str	r3, [sp, #0]
 8003af8:	490f      	ldr	r1, [pc, #60]	; (8003b38 <Dmx::Dmx()+0x1ac>)
 8003afa:	4810      	ldr	r0, [pc, #64]	; (8003b3c <Dmx::Dmx()+0x1b0>)
 8003afc:	4623      	mov	r3, r4
 8003afe:	2208      	movs	r2, #8
 8003b00:	f005 feb4 	bl	800986c <gd32_uart_begin>
 8003b04:	2380      	movs	r3, #128	; 0x80
 8003b06:	4628      	mov	r0, r5
 8003b08:	f8c8 3004 	str.w	r3, [r8, #4]
 8003b0c:	b00b      	add	sp, #44	; 0x2c
 8003b0e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003b12:	bf00      	nop
 8003b14:	200005d4 	ldrdcs	r0, [r0], -r4
 8003b18:	40000400 	andmi	r0, r0, r0, lsl #8
 8003b1c:	200005d0 	ldrdcs	r0, [r0], -r0	; <UNPREDICTABLE>
 8003b20:	40010c00 	andmi	r0, r1, r0, lsl #24
 8003b24:	200005bc 			; <UNDEFINED> instruction: 0x200005bc
 8003b28:	200001a8 	andcs	r0, r0, r8, lsr #3
 8003b2c:	40020000 	andmi	r0, r2, r0
 8003b30:	40004804 	andmi	r4, r0, r4, lsl #16
 8003b34:	40001400 	andmi	r1, r0, r0, lsl #8
 8003b38:	0003d090 	muleq	r3, r0, r0
 8003b3c:	40004800 	andmi	r4, r0, r0, lsl #16
 8003b40:	e000e100 	and	lr, r0, r0, lsl #2

08003b44 <Dmx::GetDmxAvailable(unsigned int)>:
 8003b44:	4b08      	ldr	r3, [pc, #32]	; (8003b68 <Dmx::GetDmxAvailable(unsigned int)+0x24>)
 8003b46:	f44f 7204 	mov.w	r2, #528	; 0x210
 8003b4a:	fb02 3101 	mla	r1, r2, r1, r3
 8003b4e:	f8d1 3204 	ldr.w	r3, [r1, #516]	; 0x204
 8003b52:	f413 4000 	ands.w	r0, r3, #32768	; 0x8000
 8003b56:	bf1f      	itttt	ne
 8003b58:	f423 4300 	bicne.w	r3, r3, #32768	; 0x8000
 8003b5c:	f103 33ff 	addne.w	r3, r3, #4294967295	; 0xffffffff
 8003b60:	f8c1 3204 	strne.w	r3, [r1, #516]	; 0x204
 8003b64:	4608      	movne	r0, r1
 8003b66:	4770      	bx	lr
 8003b68:	200001a8 	andcs	r0, r0, r8, lsr #3

08003b6c <Dmx::GetUpdatesPerSecond(unsigned int)>:
 8003b6c:	f3bf 8f5f 	dmb	sy
 8003b70:	4b01      	ldr	r3, [pc, #4]	; (8003b78 <Dmx::GetUpdatesPerSecond(unsigned int)+0xc>)
 8003b72:	0109      	lsls	r1, r1, #4
 8003b74:	5858      	ldr	r0, [r3, r1]
 8003b76:	4770      	bx	lr
 8003b78:	200005c0 	andcs	r0, r0, r0, asr #11

08003b7c <Dmx::RdmSendRaw(unsigned int, unsigned char const*, unsigned int)>:
 8003b7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b7e:	4e20      	ldr	r6, [pc, #128]	; (8003c00 <Dmx::RdmSendRaw(unsigned int, unsigned char const*, unsigned int)+0x84>)
 8003b80:	4614      	mov	r4, r2
 8003b82:	461d      	mov	r5, r3
 8003b84:	2106      	movs	r1, #6
 8003b86:	4630      	mov	r0, r6
 8003b88:	f005 fbb0 	bl	80092ec <usart_flag_get>
 8003b8c:	2800      	cmp	r0, #0
 8003b8e:	d0f9      	beq.n	8003b84 <Dmx::RdmSendRaw(unsigned int, unsigned char const*, unsigned int)+0x8>
 8003b90:	4e1c      	ldr	r6, [pc, #112]	; (8003c04 <Dmx::RdmSendRaw(unsigned int, unsigned char const*, unsigned int)+0x88>)
 8003b92:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003b96:	2203      	movs	r2, #3
 8003b98:	4630      	mov	r0, r6
 8003b9a:	f44f 6780 	mov.w	r7, #1024	; 0x400
 8003b9e:	2110      	movs	r1, #16
 8003ba0:	f004 fffa 	bl	8008b98 <gpio_init>
 8003ba4:	6177      	str	r7, [r6, #20]
 8003ba6:	2100      	movs	r1, #0
 8003ba8:	20b0      	movs	r0, #176	; 0xb0
 8003baa:	f005 ff5f 	bl	8009a6c <udelay(unsigned int, unsigned int)>
 8003bae:	463b      	mov	r3, r7
 8003bb0:	4630      	mov	r0, r6
 8003bb2:	2203      	movs	r2, #3
 8003bb4:	2118      	movs	r1, #24
 8003bb6:	f004 ffef 	bl	8008b98 <gpio_init>
 8003bba:	2100      	movs	r1, #0
 8003bbc:	200c      	movs	r0, #12
 8003bbe:	f005 ff55 	bl	8009a6c <udelay(unsigned int, unsigned int)>
 8003bc2:	4425      	add	r5, r4
 8003bc4:	f5a6 4648 	sub.w	r6, r6, #51200	; 0xc800
 8003bc8:	f04f 2740 	mov.w	r7, #1073758208	; 0x40004000
 8003bcc:	42ac      	cmp	r4, r5
 8003bce:	d109      	bne.n	8003be4 <Dmx::RdmSendRaw(unsigned int, unsigned char const*, unsigned int)+0x68>
 8003bd0:	4c0b      	ldr	r4, [pc, #44]	; (8003c00 <Dmx::RdmSendRaw(unsigned int, unsigned char const*, unsigned int)+0x84>)
 8003bd2:	f04f 2540 	mov.w	r5, #1073758208	; 0x40004000
 8003bd6:	2106      	movs	r1, #6
 8003bd8:	4620      	mov	r0, r4
 8003bda:	f005 fb87 	bl	80092ec <usart_flag_get>
 8003bde:	2801      	cmp	r0, #1
 8003be0:	d10b      	bne.n	8003bfa <Dmx::RdmSendRaw(unsigned int, unsigned char const*, unsigned int)+0x7e>
 8003be2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003be4:	2107      	movs	r1, #7
 8003be6:	4630      	mov	r0, r6
 8003be8:	f005 fb80 	bl	80092ec <usart_flag_get>
 8003bec:	2800      	cmp	r0, #0
 8003bee:	d0f9      	beq.n	8003be4 <Dmx::RdmSendRaw(unsigned int, unsigned char const*, unsigned int)+0x68>
 8003bf0:	f814 3b01 	ldrb.w	r3, [r4], #1
 8003bf4:	f8c7 3804 	str.w	r3, [r7, #2052]	; 0x804
 8003bf8:	e7e8      	b.n	8003bcc <Dmx::RdmSendRaw(unsigned int, unsigned char const*, unsigned int)+0x50>
 8003bfa:	f8d5 3804 	ldr.w	r3, [r5, #2052]	; 0x804
 8003bfe:	e7ea      	b.n	8003bd6 <Dmx::RdmSendRaw(unsigned int, unsigned char const*, unsigned int)+0x5a>
 8003c00:	40004800 	andmi	r4, r0, r0, lsl #16
 8003c04:	40011000 	andmi	r1, r1, r0

08003c08 <Dmx::RdmReceive(unsigned int)>:
 8003c08:	4b07      	ldr	r3, [pc, #28]	; (8003c28 <Dmx::RdmReceive(unsigned int)+0x20>)
 8003c0a:	f44f 7204 	mov.w	r2, #528	; 0x210
 8003c0e:	fb02 3101 	mla	r1, r2, r1, r3
 8003c12:	f8d1 3204 	ldr.w	r3, [r1, #516]	; 0x204
 8003c16:	f413 4080 	ands.w	r0, r3, #16384	; 0x4000
 8003c1a:	bf1e      	ittt	ne
 8003c1c:	2300      	movne	r3, #0
 8003c1e:	f8c1 3204 	strne.w	r3, [r1, #516]	; 0x204
 8003c22:	4608      	movne	r0, r1
 8003c24:	4770      	bx	lr
 8003c26:	bf00      	nop
 8003c28:	200001a8 	andcs	r0, r0, r8, lsr #3

08003c2c <Rdm::SendRawRespondMessage(unsigned int, unsigned char const*, unsigned int)>:
 8003c2c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003c2e:	4b08      	ldr	r3, [pc, #32]	; (8003c50 <Rdm::SendRawRespondMessage(unsigned int, unsigned char const*, unsigned int)+0x24>)
 8003c30:	9201      	str	r2, [sp, #4]
 8003c32:	4604      	mov	r4, r0
 8003c34:	460d      	mov	r5, r1
 8003c36:	20c8      	movs	r0, #200	; 0xc8
 8003c38:	6819      	ldr	r1, [r3, #0]
 8003c3a:	f005 ff17 	bl	8009a6c <udelay(unsigned int, unsigned int)>
 8003c3e:	9a01      	ldr	r2, [sp, #4]
 8003c40:	4629      	mov	r1, r5
 8003c42:	4620      	mov	r0, r4
 8003c44:	b003      	add	sp, #12
 8003c46:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003c4a:	f7ff bba7 	b.w	800339c <Rdm::SendRaw(unsigned int, unsigned char const*, unsigned int)>
 8003c4e:	bf00      	nop
 8003c50:	200005d8 	ldrdcs	r0, [r0], -r8

08003c54 <Rdm::SendDiscoveryRespondMessage(unsigned int, unsigned char const*, unsigned int)>:
 8003c54:	4b1d      	ldr	r3, [pc, #116]	; (8003ccc <Rdm::SendDiscoveryRespondMessage(unsigned int, unsigned char const*, unsigned int)+0x78>)
 8003c56:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003c5a:	4606      	mov	r6, r0
 8003c5c:	460c      	mov	r4, r1
 8003c5e:	20c8      	movs	r0, #200	; 0xc8
 8003c60:	6819      	ldr	r1, [r3, #0]
 8003c62:	4f1b      	ldr	r7, [pc, #108]	; (8003cd0 <Rdm::SendDiscoveryRespondMessage(unsigned int, unsigned char const*, unsigned int)+0x7c>)
 8003c64:	4615      	mov	r5, r2
 8003c66:	f005 ff01 	bl	8009a6c <udelay(unsigned int, unsigned int)>
 8003c6a:	2300      	movs	r3, #0
 8003c6c:	4631      	mov	r1, r6
 8003c6e:	6838      	ldr	r0, [r7, #0]
 8003c70:	4e18      	ldr	r6, [pc, #96]	; (8003cd4 <Rdm::SendDiscoveryRespondMessage(unsigned int, unsigned char const*, unsigned int)+0x80>)
 8003c72:	461a      	mov	r2, r3
 8003c74:	f7ff fe5c 	bl	8003930 <Dmx::SetPortDirection(unsigned int, dmx::PortDirection, bool)>
 8003c78:	4425      	add	r5, r4
 8003c7a:	f04f 2840 	mov.w	r8, #1073758208	; 0x40004000
 8003c7e:	42ac      	cmp	r4, r5
 8003c80:	d115      	bne.n	8003cae <Rdm::SendDiscoveryRespondMessage(unsigned int, unsigned char const*, unsigned int)+0x5a>
 8003c82:	4d14      	ldr	r5, [pc, #80]	; (8003cd4 <Rdm::SendDiscoveryRespondMessage(unsigned int, unsigned char const*, unsigned int)+0x80>)
 8003c84:	f04f 2640 	mov.w	r6, #1073758208	; 0x40004000
 8003c88:	2106      	movs	r1, #6
 8003c8a:	4628      	mov	r0, r5
 8003c8c:	f005 fb2e 	bl	80092ec <usart_flag_get>
 8003c90:	2801      	cmp	r0, #1
 8003c92:	4604      	mov	r4, r0
 8003c94:	d116      	bne.n	8003cc4 <Rdm::SendDiscoveryRespondMessage(unsigned int, unsigned char const*, unsigned int)+0x70>
 8003c96:	2100      	movs	r1, #0
 8003c98:	2004      	movs	r0, #4
 8003c9a:	f005 fee7 	bl	8009a6c <udelay(unsigned int, unsigned int)>
 8003c9e:	6838      	ldr	r0, [r7, #0]
 8003ca0:	4623      	mov	r3, r4
 8003ca2:	4622      	mov	r2, r4
 8003ca4:	2100      	movs	r1, #0
 8003ca6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003caa:	f7ff be41 	b.w	8003930 <Dmx::SetPortDirection(unsigned int, dmx::PortDirection, bool)>
 8003cae:	2107      	movs	r1, #7
 8003cb0:	4630      	mov	r0, r6
 8003cb2:	f005 fb1b 	bl	80092ec <usart_flag_get>
 8003cb6:	2800      	cmp	r0, #0
 8003cb8:	d0f9      	beq.n	8003cae <Rdm::SendDiscoveryRespondMessage(unsigned int, unsigned char const*, unsigned int)+0x5a>
 8003cba:	f814 3b01 	ldrb.w	r3, [r4], #1
 8003cbe:	f8c8 3804 	str.w	r3, [r8, #2052]	; 0x804
 8003cc2:	e7dc      	b.n	8003c7e <Rdm::SendDiscoveryRespondMessage(unsigned int, unsigned char const*, unsigned int)+0x2a>
 8003cc4:	f8d6 3804 	ldr.w	r3, [r6, #2052]	; 0x804
 8003cc8:	e7de      	b.n	8003c88 <Rdm::SendDiscoveryRespondMessage(unsigned int, unsigned char const*, unsigned int)+0x34>
 8003cca:	bf00      	nop
 8003ccc:	200005d8 	ldrdcs	r0, [r0], -r8
 8003cd0:	200005d4 	ldrdcs	r0, [r0], -r4
 8003cd4:	40004800 	andmi	r4, r0, r0, lsl #16

08003cd8 <RDMDeviceParams::RDMDeviceParams(RDMDeviceParamsStore*)>:
 8003cd8:	b510      	push	{r4, lr}
 8003cda:	2225      	movs	r2, #37	; 0x25
 8003cdc:	4604      	mov	r4, r0
 8003cde:	f840 1b04 	str.w	r1, [r0], #4
 8003ce2:	2100      	movs	r1, #0
 8003ce4:	f004 fc05 	bl	80084f2 <memset>
 8003ce8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003cec:	237f      	movs	r3, #127	; 0x7f
 8003cee:	f884 2029 	strb.w	r2, [r4, #41]	; 0x29
 8003cf2:	f884 302a 	strb.w	r3, [r4, #42]	; 0x2a
 8003cf6:	f884 202b 	strb.w	r2, [r4, #43]	; 0x2b
 8003cfa:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
 8003cfe:	4620      	mov	r0, r4
 8003d00:	bd10      	pop	{r4, pc}

08003d02 <RDMDeviceParams::Load()>:
 8003d02:	4601      	mov	r1, r0
 8003d04:	6800      	ldr	r0, [r0, #0]
 8003d06:	b130      	cbz	r0, 8003d16 <RDMDeviceParams::Load()+0x14>
 8003d08:	b508      	push	{r3, lr}
 8003d0a:	6803      	ldr	r3, [r0, #0]
 8003d0c:	3104      	adds	r1, #4
 8003d0e:	68db      	ldr	r3, [r3, #12]
 8003d10:	4798      	blx	r3
 8003d12:	2001      	movs	r0, #1
 8003d14:	bd08      	pop	{r3, pc}
 8003d16:	4770      	bx	lr

08003d18 <RDMDeviceParams::Set(RDMDevice*)>:
 8003d18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d1a:	6843      	ldr	r3, [r0, #4]
 8003d1c:	460c      	mov	r4, r1
 8003d1e:	07d9      	lsls	r1, r3, #31
 8003d20:	4605      	mov	r5, r0
 8003d22:	d518      	bpl.n	8003d56 <RDMDeviceParams::Set(RDMDevice*)+0x3e>
 8003d24:	f890 6028 	ldrb.w	r6, [r0, #40]	; 0x28
 8003d28:	7823      	ldrb	r3, [r4, #0]
 8003d2a:	2e20      	cmp	r6, #32
 8003d2c:	f100 0108 	add.w	r1, r0, #8
 8003d30:	bf28      	it	cs
 8003d32:	2620      	movcs	r6, #32
 8003d34:	b1eb      	cbz	r3, 8003d72 <RDMDeviceParams::Set(RDMDevice*)+0x5a>
 8003d36:	f104 030b 	add.w	r3, r4, #11
 8003d3a:	4618      	mov	r0, r3
 8003d3c:	4632      	mov	r2, r6
 8003d3e:	f004 fbc1 	bl	80084c4 <memmove>
 8003d42:	4603      	mov	r3, r0
 8003d44:	6fa0      	ldr	r0, [r4, #120]	; 0x78
 8003d46:	f884 602b 	strb.w	r6, [r4, #43]	; 0x2b
 8003d4a:	b120      	cbz	r0, 8003d56 <RDMDeviceParams::Set(RDMDevice*)+0x3e>
 8003d4c:	6802      	ldr	r2, [r0, #0]
 8003d4e:	4619      	mov	r1, r3
 8003d50:	6897      	ldr	r7, [r2, #8]
 8003d52:	4632      	mov	r2, r6
 8003d54:	47b8      	blx	r7
 8003d56:	686b      	ldr	r3, [r5, #4]
 8003d58:	079a      	lsls	r2, r3, #30
 8003d5a:	bf44      	itt	mi
 8003d5c:	f8b5 2029 	ldrhmi.w	r2, [r5, #41]	; 0x29
 8003d60:	f8a4 204e 	strhmi.w	r2, [r4, #78]	; 0x4e
 8003d64:	075b      	lsls	r3, r3, #29
 8003d66:	bf44      	itt	mi
 8003d68:	f8b5 302b 	ldrhmi.w	r3, [r5, #43]	; 0x2b
 8003d6c:	f8a4 3050 	strhmi.w	r3, [r4, #80]	; 0x50
 8003d70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003d72:	4632      	mov	r2, r6
 8003d74:	f104 0052 	add.w	r0, r4, #82	; 0x52
 8003d78:	f004 fba4 	bl	80084c4 <memmove>
 8003d7c:	f884 6072 	strb.w	r6, [r4, #114]	; 0x72
 8003d80:	e7e9      	b.n	8003d56 <RDMDeviceParams::Set(RDMDevice*)+0x3e>

08003d82 <RDMDeviceParams::Dump()>:
 8003d82:	4770      	bx	lr

08003d84 <RDMDeviceResponder::PersonalityUpdate(LightSet*)>:
 8003d84:	4770      	bx	lr

08003d86 <RDMDeviceResponder::DmxStartAddressUpdate()>:
 8003d86:	4770      	bx	lr

08003d88 <RDMDeviceResponder::~RDMDeviceResponder()>:
 8003d88:	b510      	push	{r4, lr}
 8003d8a:	4b06      	ldr	r3, [pc, #24]	; (8003da4 <RDMDeviceResponder::~RDMDeviceResponder()+0x1c>)
 8003d8c:	4604      	mov	r4, r0
 8003d8e:	f840 3b8c 	str.w	r3, [r0], #140
 8003d92:	f7ff f9c7 	bl	8003124 <RDMSubDevices::~RDMSubDevices()>
 8003d96:	f104 0084 	add.w	r0, r4, #132	; 0x84
 8003d9a:	f7fe f9cd 	bl	8002138 <RDMSensors::~RDMSensors()>
 8003d9e:	4620      	mov	r0, r4
 8003da0:	bd10      	pop	{r4, pc}
 8003da2:	bf00      	nop
 8003da4:	0800a3a8 	stmdaeq	r0, {r3, r5, r7, r8, r9, sp, pc}

08003da8 <RDMDeviceResponder::~RDMDeviceResponder()>:
 8003da8:	b510      	push	{r4, lr}
 8003daa:	4604      	mov	r4, r0
 8003dac:	f7ff ffec 	bl	8003d88 <RDMDeviceResponder::~RDMDeviceResponder()>
 8003db0:	4620      	mov	r0, r4
 8003db2:	f004 faea 	bl	800838a <operator delete(void*)>
 8003db6:	4620      	mov	r0, r4
 8003db8:	bd10      	pop	{r4, pc}
	...

08003dbc <RDMDeviceResponder::RDMDeviceResponder(RDMPersonality**, unsigned int)>:
 8003dbc:	b570      	push	{r4, r5, r6, lr}
 8003dbe:	4604      	mov	r4, r0
 8003dc0:	3004      	adds	r0, #4
 8003dc2:	460e      	mov	r6, r1
 8003dc4:	4615      	mov	r5, r2
 8003dc6:	f001 fa03 	bl	80051d0 <RDMDevice::RDMDevice()>
 8003dca:	4620      	mov	r0, r4
 8003dcc:	4b20      	ldr	r3, [pc, #128]	; (8003e50 <RDMDeviceResponder::RDMDeviceResponder(RDMPersonality**, unsigned int)+0x94>)
 8003dce:	f840 3b80 	str.w	r3, [r0], #128
 8003dd2:	f001 f9bd 	bl	8005150 <RDMIdentify::RDMIdentify()>
 8003dd6:	f104 0084 	add.w	r0, r4, #132	; 0x84
 8003dda:	f7fe fa0b 	bl	80021f4 <RDMSensors::RDMSensors()>
 8003dde:	f104 008c 	add.w	r0, r4, #140	; 0x8c
 8003de2:	f7ff f997 	bl	8003114 <RDMSubDevices::RDMSubDevices()>
 8003de6:	4b1b      	ldr	r3, [pc, #108]	; (8003e54 <RDMDeviceResponder::RDMDeviceResponder(RDMPersonality**, unsigned int)+0x98>)
 8003de8:	f8c4 6094 	str.w	r6, [r4, #148]	; 0x94
 8003dec:	601c      	str	r4, [r3, #0]
 8003dee:	2365      	movs	r3, #101	; 0x65
 8003df0:	f884 30c3 	strb.w	r3, [r4, #195]	; 0xc3
 8003df4:	f44f 73b7 	mov.w	r3, #366	; 0x16e
 8003df8:	f8c4 30c4 	str.w	r3, [r4, #196]	; 0xc4
 8003dfc:	2301      	movs	r3, #1
 8003dfe:	f8a4 30c8 	strh.w	r3, [r4, #200]	; 0xc8
 8003e02:	f104 02b0 	add.w	r2, r4, #176	; 0xb0
 8003e06:	f104 039d 	add.w	r3, r4, #157	; 0x9d
 8003e0a:	2100      	movs	r1, #0
 8003e0c:	4293      	cmp	r3, r2
 8003e0e:	d119      	bne.n	8003e44 <RDMDeviceResponder::RDMDeviceResponder(RDMPersonality**, unsigned int)+0x88>
 8003e10:	f104 02c3 	add.w	r2, r4, #195	; 0xc3
 8003e14:	2100      	movs	r1, #0
 8003e16:	4293      	cmp	r3, r2
 8003e18:	d117      	bne.n	8003e4a <RDMDeviceResponder::RDMDeviceResponder(RDMPersonality**, unsigned int)+0x8e>
 8003e1a:	f884 50aa 	strb.w	r5, [r4, #170]	; 0xaa
 8003e1e:	f7fd fc21 	bl	8001664 <RDMSoftwareVersion::GetVersion()>
 8003e22:	f8c4 0098 	str.w	r0, [r4, #152]	; 0x98
 8003e26:	f7fd fc21 	bl	800166c <RDMSoftwareVersion::GetVersionLength()>
 8003e2a:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8003e2e:	f884 009c 	strb.w	r0, [r4, #156]	; 0x9c
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	685b      	ldr	r3, [r3, #4]
 8003e36:	b91b      	cbnz	r3, 8003e40 <RDMDeviceResponder::RDMDeviceResponder(RDMPersonality**, unsigned int)+0x84>
 8003e38:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003e3c:	f8a4 30c8 	strh.w	r3, [r4, #200]	; 0xc8
 8003e40:	4620      	mov	r0, r4
 8003e42:	bd70      	pop	{r4, r5, r6, pc}
 8003e44:	f803 1b01 	strb.w	r1, [r3], #1
 8003e48:	e7e0      	b.n	8003e0c <RDMDeviceResponder::RDMDeviceResponder(RDMPersonality**, unsigned int)+0x50>
 8003e4a:	f803 1b01 	strb.w	r1, [r3], #1
 8003e4e:	e7e2      	b.n	8003e16 <RDMDeviceResponder::RDMDeviceResponder(RDMPersonality**, unsigned int)+0x5a>
 8003e50:	0800a3a8 	stmdaeq	r0, {r3, r5, r7, r8, r9, sp, pc}
 8003e54:	200005dc 	ldrdcs	r0, [r0], -ip

08003e58 <RDMDeviceResponder::Init()>:
 8003e58:	b570      	push	{r4, r5, r6, lr}
 8003e5a:	2301      	movs	r3, #1
 8003e5c:	4604      	mov	r4, r0
 8003e5e:	7103      	strb	r3, [r0, #4]
 8003e60:	f894 2076 	ldrb.w	r2, [r4, #118]	; 0x76
 8003e64:	2a20      	cmp	r2, #32
 8003e66:	bf28      	it	cs
 8003e68:	2220      	movcs	r2, #32
 8003e6a:	3056      	adds	r0, #86	; 0x56
 8003e6c:	f104 010f 	add.w	r1, r4, #15
 8003e70:	4613      	mov	r3, r2
 8003e72:	3b01      	subs	r3, #1
 8003e74:	d25d      	bcs.n	8003f32 <RDMDeviceResponder::Init()+0xda>
 8003e76:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 8003e78:	f884 202f 	strb.w	r2, [r4, #47]	; 0x2f
 8003e7c:	b110      	cbz	r0, 8003e84 <RDMDeviceResponder::Init()+0x2c>
 8003e7e:	6803      	ldr	r3, [r0, #0]
 8003e80:	689b      	ldr	r3, [r3, #8]
 8003e82:	4798      	blx	r3
 8003e84:	f06f 050d 	mvn.w	r5, #13
 8003e88:	f894 3076 	ldrb.w	r3, [r4, #118]	; 0x76
 8003e8c:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
 8003e90:	f104 020e 	add.w	r2, r4, #14
 8003e94:	1b2d      	subs	r5, r5, r4
 8003e96:	18a9      	adds	r1, r5, r2
 8003e98:	4288      	cmp	r0, r1
 8003e9a:	d84f      	bhi.n	8003f3c <RDMDeviceResponder::Init()+0xe4>
 8003e9c:	f8a4 3078 	strh.w	r3, [r4, #120]	; 0x78
 8003ea0:	f7fd fbe6 	bl	8001670 <RDMSoftwareVersion::GetVersionId()>
 8003ea4:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
 8003ea8:	f884 30a2 	strb.w	r3, [r4, #162]	; 0xa2
 8003eac:	2201      	movs	r2, #1
 8003eae:	f884 209d 	strb.w	r2, [r4, #157]	; 0x9d
 8003eb2:	2200      	movs	r2, #0
 8003eb4:	f8a4 209e 	strh.w	r2, [r4, #158]	; 0x9e
 8003eb8:	f884 20a0 	strb.w	r2, [r4, #160]	; 0xa0
 8003ebc:	0a1a      	lsrs	r2, r3, #8
 8003ebe:	0e03      	lsrs	r3, r0, #24
 8003ec0:	f884 30a3 	strb.w	r3, [r4, #163]	; 0xa3
 8003ec4:	0c03      	lsrs	r3, r0, #16
 8003ec6:	f884 30a4 	strb.w	r3, [r4, #164]	; 0xa4
 8003eca:	0a03      	lsrs	r3, r0, #8
 8003ecc:	f884 30a5 	strb.w	r3, [r4, #165]	; 0xa5
 8003ed0:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8003ed4:	f884 20a1 	strb.w	r2, [r4, #161]	; 0xa1
 8003ed8:	f884 00a6 	strb.w	r0, [r4, #166]	; 0xa6
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	f8b4 6090 	ldrh.w	r6, [r4, #144]	; 0x90
 8003ee2:	685d      	ldr	r5, [r3, #4]
 8003ee4:	bb7d      	cbnz	r5, 8003f46 <RDMDeviceResponder::Init()+0xee>
 8003ee6:	f8b4 00c8 	ldrh.w	r0, [r4, #200]	; 0xc8
 8003eea:	f884 50a7 	strb.w	r5, [r4, #167]	; 0xa7
 8003eee:	0a03      	lsrs	r3, r0, #8
 8003ef0:	f884 50a8 	strb.w	r5, [r4, #168]	; 0xa8
 8003ef4:	f884 30ab 	strb.w	r3, [r4, #171]	; 0xab
 8003ef8:	2301      	movs	r3, #1
 8003efa:	f884 30a9 	strb.w	r3, [r4, #169]	; 0xa9
 8003efe:	0a33      	lsrs	r3, r6, #8
 8003f00:	b2c0      	uxtb	r0, r0
 8003f02:	f884 30ad 	strb.w	r3, [r4, #173]	; 0xad
 8003f06:	f894 3088 	ldrb.w	r3, [r4, #136]	; 0x88
 8003f0a:	f884 30af 	strb.w	r3, [r4, #175]	; 0xaf
 8003f0e:	f884 00ac 	strb.w	r0, [r4, #172]	; 0xac
 8003f12:	f884 60ae 	strb.w	r6, [r4, #174]	; 0xae
 8003f16:	f104 039d 	add.w	r3, r4, #157	; 0x9d
 8003f1a:	f104 02b0 	add.w	r2, r4, #176	; 0xb0
 8003f1e:	4293      	cmp	r3, r2
 8003f20:	d12a      	bne.n	8003f78 <RDMDeviceResponder::Init()+0x120>
 8003f22:	f894 30ac 	ldrb.w	r3, [r4, #172]	; 0xac
 8003f26:	f894 20a9 	ldrb.w	r2, [r4, #169]	; 0xa9
 8003f2a:	4413      	add	r3, r2
 8003f2c:	f8a4 30c6 	strh.w	r3, [r4, #198]	; 0xc6
 8003f30:	bd70      	pop	{r4, r5, r6, pc}
 8003f32:	f810 5b01 	ldrb.w	r5, [r0], #1
 8003f36:	f800 5c48 	strb.w	r5, [r0, #-72]
 8003f3a:	e79a      	b.n	8003e72 <RDMDeviceResponder::Init()+0x1a>
 8003f3c:	f812 1f01 	ldrb.w	r1, [r2, #1]!
 8003f40:	440b      	add	r3, r1
 8003f42:	b29b      	uxth	r3, r3
 8003f44:	e7a7      	b.n	8003e96 <RDMDeviceResponder::Init()+0x3e>
 8003f46:	682b      	ldr	r3, [r5, #0]
 8003f48:	4628      	mov	r0, r5
 8003f4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f4c:	4798      	blx	r3
 8003f4e:	0a00      	lsrs	r0, r0, #8
 8003f50:	f884 00a7 	strb.w	r0, [r4, #167]	; 0xa7
 8003f54:	682b      	ldr	r3, [r5, #0]
 8003f56:	4628      	mov	r0, r5
 8003f58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f5a:	4798      	blx	r3
 8003f5c:	f884 00a8 	strb.w	r0, [r4, #168]	; 0xa8
 8003f60:	682b      	ldr	r3, [r5, #0]
 8003f62:	4628      	mov	r0, r5
 8003f64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f66:	4798      	blx	r3
 8003f68:	0a00      	lsrs	r0, r0, #8
 8003f6a:	f884 00ab 	strb.w	r0, [r4, #171]	; 0xab
 8003f6e:	682b      	ldr	r3, [r5, #0]
 8003f70:	4628      	mov	r0, r5
 8003f72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f74:	4798      	blx	r3
 8003f76:	e7bf      	b.n	8003ef8 <RDMDeviceResponder::Init()+0xa0>
 8003f78:	f813 1b01 	ldrb.w	r1, [r3], #1
 8003f7c:	7499      	strb	r1, [r3, #18]
 8003f7e:	e7ce      	b.n	8003f1e <RDMDeviceResponder::Init()+0xc6>

08003f80 <RDMDeviceResponder::Print()>:
 8003f80:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003f82:	4604      	mov	r4, r0
 8003f84:	3004      	adds	r0, #4
 8003f86:	f001 f997 	bl	80052b8 <RDMDevice::Print()>
 8003f8a:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8003f8e:	481c      	ldr	r0, [pc, #112]	; (8004000 <RDMDeviceResponder::Print()+0x80>)
 8003f90:	681d      	ldr	r5, [r3, #0]
 8003f92:	6aae      	ldr	r6, [r5, #40]	; 0x28
 8003f94:	f7fd fe66 	bl	8001c64 <printf>
 8003f98:	f894 209e 	ldrb.w	r2, [r4, #158]	; 0x9e
 8003f9c:	f894 109d 	ldrb.w	r1, [r4, #157]	; 0x9d
 8003fa0:	4818      	ldr	r0, [pc, #96]	; (8004004 <RDMDeviceResponder::Print()+0x84>)
 8003fa2:	f7fd fe5f 	bl	8001c64 <printf>
 8003fa6:	f894 30ac 	ldrb.w	r3, [r4, #172]	; 0xac
 8003faa:	f894 10ab 	ldrb.w	r1, [r4, #171]	; 0xab
 8003fae:	4816      	ldr	r0, [pc, #88]	; (8004008 <RDMDeviceResponder::Print()+0x88>)
 8003fb0:	eb03 2101 	add.w	r1, r3, r1, lsl #8
 8003fb4:	f7fd fe56 	bl	8001c64 <printf>
 8003fb8:	f894 30a8 	ldrb.w	r3, [r4, #168]	; 0xa8
 8003fbc:	f894 10a7 	ldrb.w	r1, [r4, #167]	; 0xa7
 8003fc0:	4812      	ldr	r0, [pc, #72]	; (800400c <RDMDeviceResponder::Print()+0x8c>)
 8003fc2:	eb03 2101 	add.w	r1, r3, r1, lsl #8
 8003fc6:	3508      	adds	r5, #8
 8003fc8:	f7fd fe4c 	bl	8001c64 <printf>
 8003fcc:	f894 20aa 	ldrb.w	r2, [r4, #170]	; 0xaa
 8003fd0:	f894 10a9 	ldrb.w	r1, [r4, #169]	; 0xa9
 8003fd4:	9500      	str	r5, [sp, #0]
 8003fd6:	b2f3      	uxtb	r3, r6
 8003fd8:	480d      	ldr	r0, [pc, #52]	; (8004010 <RDMDeviceResponder::Print()+0x90>)
 8003fda:	f7fd fe43 	bl	8001c64 <printf>
 8003fde:	f894 10ad 	ldrb.w	r1, [r4, #173]	; 0xad
 8003fe2:	f894 30ae 	ldrb.w	r3, [r4, #174]	; 0xae
 8003fe6:	480b      	ldr	r0, [pc, #44]	; (8004014 <RDMDeviceResponder::Print()+0x94>)
 8003fe8:	eb03 2101 	add.w	r1, r3, r1, lsl #8
 8003fec:	f7fd fe3a 	bl	8001c64 <printf>
 8003ff0:	f894 10af 	ldrb.w	r1, [r4, #175]	; 0xaf
 8003ff4:	4808      	ldr	r0, [pc, #32]	; (8004018 <RDMDeviceResponder::Print()+0x98>)
 8003ff6:	b002      	add	sp, #8
 8003ff8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8003ffc:	f7fd be32 	b.w	8001c64 <printf>
 8004000:	0800a2ec 	stmdaeq	r0, {r2, r3, r5, r6, r7, r9, sp, pc}
 8004004:	0800a309 	stmdaeq	r0, {r0, r3, r8, r9, sp, pc}
 8004008:	0800a322 	stmdaeq	r0, {r1, r5, r8, r9, sp, pc}
 800400c:	0800a33a 	stmdaeq	r0, {r1, r3, r4, r5, r8, r9, sp, pc}
 8004010:	0800a352 	stmdaeq	r0, {r1, r4, r6, r8, r9, sp, pc}
 8004014:	0800a370 	stmdaeq	r0, {r4, r5, r6, r8, r9, sp, pc}
 8004018:	0800a388 	stmdaeq	r0, {r3, r7, r8, r9, sp, pc}

0800401c <memcmp>:
 800401c:	b510      	push	{r4, lr}
 800401e:	3901      	subs	r1, #1
 8004020:	4402      	add	r2, r0
 8004022:	4290      	cmp	r0, r2
 8004024:	d101      	bne.n	800402a <memcmp+0xe>
 8004026:	2000      	movs	r0, #0
 8004028:	e005      	b.n	8004036 <memcmp+0x1a>
 800402a:	7803      	ldrb	r3, [r0, #0]
 800402c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8004030:	42a3      	cmp	r3, r4
 8004032:	d001      	beq.n	8004038 <memcmp+0x1c>
 8004034:	1b18      	subs	r0, r3, r4
 8004036:	bd10      	pop	{r4, pc}
 8004038:	3001      	adds	r0, #1
 800403a:	e7f2      	b.n	8004022 <memcmp+0x6>

0800403c <RDMDeviceResponder::GetSlotInfo(unsigned short, unsigned short, lightset::SlotInfo&) [clone .part.0]>:
 800403c:	f890 30a9 	ldrb.w	r3, [r0, #169]	; 0xa9
 8004040:	f8d0 0094 	ldr.w	r0, [r0, #148]	; 0x94
 8004044:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004048:	3b01      	subs	r3, #1
 800404a:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 800404e:	6858      	ldr	r0, [r3, #4]
 8004050:	6803      	ldr	r3, [r0, #0]
 8004052:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004054:	4718      	bx	r3

08004056 <memcpy.isra.0>:
 8004056:	3801      	subs	r0, #1
 8004058:	440a      	add	r2, r1
 800405a:	4291      	cmp	r1, r2
 800405c:	d100      	bne.n	8004060 <memcpy.isra.0+0xa>
 800405e:	4770      	bx	lr
 8004060:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004064:	f800 3f01 	strb.w	r3, [r0, #1]!
 8004068:	e7f7      	b.n	800405a <memcpy.isra.0+0x4>

0800406a <RDMDevice::SetLabel(TRDMDeviceInfoData const*)>:
 800406a:	b570      	push	{r4, r5, r6, lr}
 800406c:	790d      	ldrb	r5, [r1, #4]
 800406e:	7803      	ldrb	r3, [r0, #0]
 8004070:	6809      	ldr	r1, [r1, #0]
 8004072:	2d20      	cmp	r5, #32
 8004074:	4604      	mov	r4, r0
 8004076:	bf28      	it	cs
 8004078:	2520      	movcs	r5, #32
 800407a:	b18b      	cbz	r3, 80040a0 <RDMDevice::SetLabel(TRDMDeviceInfoData const*)+0x36>
 800407c:	f100 060b 	add.w	r6, r0, #11
 8004080:	4630      	mov	r0, r6
 8004082:	462a      	mov	r2, r5
 8004084:	f7ff ffe7 	bl	8004056 <memcpy.isra.0>
 8004088:	6fa0      	ldr	r0, [r4, #120]	; 0x78
 800408a:	f884 502b 	strb.w	r5, [r4, #43]	; 0x2b
 800408e:	b168      	cbz	r0, 80040ac <RDMDevice::SetLabel(TRDMDeviceInfoData const*)+0x42>
 8004090:	6802      	ldr	r2, [r0, #0]
 8004092:	6894      	ldr	r4, [r2, #8]
 8004094:	4631      	mov	r1, r6
 8004096:	462a      	mov	r2, r5
 8004098:	4623      	mov	r3, r4
 800409a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800409e:	4718      	bx	r3
 80040a0:	462a      	mov	r2, r5
 80040a2:	3052      	adds	r0, #82	; 0x52
 80040a4:	f7ff ffd7 	bl	8004056 <memcpy.isra.0>
 80040a8:	f884 5072 	strb.w	r5, [r4, #114]	; 0x72
 80040ac:	bd70      	pop	{r4, r5, r6, pc}

080040ae <RDMDeviceResponder::SetDmxStartAddress(unsigned short, unsigned short)>:
 80040ae:	b570      	push	{r4, r5, r6, lr}
 80040b0:	4604      	mov	r4, r0
 80040b2:	1e50      	subs	r0, r2, #1
 80040b4:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 80040b8:	4615      	mov	r5, r2
 80040ba:	d221      	bcs.n	8004100 <RDMDeviceResponder::SetDmxStartAddress(unsigned short, unsigned short)+0x52>
 80040bc:	b129      	cbz	r1, 80040ca <RDMDeviceResponder::SetDmxStartAddress(unsigned short, unsigned short)+0x1c>
 80040be:	f104 008c 	add.w	r0, r4, #140	; 0x8c
 80040c2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80040c6:	f7ff b86c 	b.w	80031a2 <RDMSubDevices::SetDmxStartAddress(unsigned short, unsigned short)>
 80040ca:	f894 30a9 	ldrb.w	r3, [r4, #169]	; 0xa9
 80040ce:	f8d4 2094 	ldr.w	r2, [r4, #148]	; 0x94
 80040d2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80040d6:	3b01      	subs	r3, #1
 80040d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80040dc:	6858      	ldr	r0, [r3, #4]
 80040de:	b178      	cbz	r0, 8004100 <RDMDeviceResponder::SetDmxStartAddress(unsigned short, unsigned short)+0x52>
 80040e0:	6803      	ldr	r3, [r0, #0]
 80040e2:	4629      	mov	r1, r5
 80040e4:	6a1b      	ldr	r3, [r3, #32]
 80040e6:	4798      	blx	r3
 80040e8:	b120      	cbz	r0, 80040f4 <RDMDeviceResponder::SetDmxStartAddress(unsigned short, unsigned short)+0x46>
 80040ea:	0a2b      	lsrs	r3, r5, #8
 80040ec:	f884 30ab 	strb.w	r3, [r4, #171]	; 0xab
 80040f0:	f884 50ac 	strb.w	r5, [r4, #172]	; 0xac
 80040f4:	6823      	ldr	r3, [r4, #0]
 80040f6:	4620      	mov	r0, r4
 80040f8:	68db      	ldr	r3, [r3, #12]
 80040fa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80040fe:	4718      	bx	r3
 8004100:	bd70      	pop	{r4, r5, r6, pc}

08004102 <RDMDeviceResponder::GetPersonality(unsigned short, unsigned char)>:
 8004102:	b111      	cbz	r1, 800410a <RDMDeviceResponder::GetPersonality(unsigned short, unsigned char)+0x8>
 8004104:	308c      	adds	r0, #140	; 0x8c
 8004106:	f7ff b876 	b.w	80031f6 <RDMSubDevices::GetPersonality(unsigned short, unsigned char)>
 800410a:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 800410e:	f8d0 3094 	ldr.w	r3, [r0, #148]	; 0x94
 8004112:	3a01      	subs	r2, #1
 8004114:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8004118:	4770      	bx	lr

0800411a <RDMDeviceResponder::GetPersonalityCount(unsigned short)>:
 800411a:	b111      	cbz	r1, 8004122 <RDMDeviceResponder::GetPersonalityCount(unsigned short)+0x8>
 800411c:	308c      	adds	r0, #140	; 0x8c
 800411e:	f7ff b862 	b.w	80031e6 <RDMSubDevices::GetPersonalityCount(unsigned short)>
 8004122:	f890 00aa 	ldrb.w	r0, [r0, #170]	; 0xaa
 8004126:	4770      	bx	lr

08004128 <RDMDeviceResponder::SetPersonalityCurrent(unsigned short, unsigned char)>:
 8004128:	b570      	push	{r4, r5, r6, lr}
 800412a:	4604      	mov	r4, r0
 800412c:	b121      	cbz	r1, 8004138 <RDMDeviceResponder::SetPersonalityCurrent(unsigned short, unsigned char)+0x10>
 800412e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8004132:	308c      	adds	r0, #140	; 0x8c
 8004134:	f7ff b84e 	b.w	80031d4 <RDMSubDevices::SetPersonalityCurrent(unsigned short, unsigned char)>
 8004138:	f884 20a9 	strb.w	r2, [r4, #169]	; 0xa9
 800413c:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 8004140:	f8d0 3094 	ldr.w	r3, [r0, #148]	; 0x94
 8004144:	3a01      	subs	r2, #1
 8004146:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800414a:	685d      	ldr	r5, [r3, #4]
 800414c:	b305      	cbz	r5, 8004190 <RDMDeviceResponder::SetPersonalityCurrent(unsigned short, unsigned char)+0x68>
 800414e:	682b      	ldr	r3, [r5, #0]
 8004150:	4628      	mov	r0, r5
 8004152:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004154:	4798      	blx	r3
 8004156:	0a00      	lsrs	r0, r0, #8
 8004158:	f884 00a7 	strb.w	r0, [r4, #167]	; 0xa7
 800415c:	682b      	ldr	r3, [r5, #0]
 800415e:	4628      	mov	r0, r5
 8004160:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004162:	4798      	blx	r3
 8004164:	f884 00a8 	strb.w	r0, [r4, #168]	; 0xa8
 8004168:	682b      	ldr	r3, [r5, #0]
 800416a:	4628      	mov	r0, r5
 800416c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800416e:	4798      	blx	r3
 8004170:	0a00      	lsrs	r0, r0, #8
 8004172:	f884 00ab 	strb.w	r0, [r4, #171]	; 0xab
 8004176:	682b      	ldr	r3, [r5, #0]
 8004178:	4628      	mov	r0, r5
 800417a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800417c:	4798      	blx	r3
 800417e:	6823      	ldr	r3, [r4, #0]
 8004180:	f884 00ac 	strb.w	r0, [r4, #172]	; 0xac
 8004184:	4629      	mov	r1, r5
 8004186:	4620      	mov	r0, r4
 8004188:	689b      	ldr	r3, [r3, #8]
 800418a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800418e:	4718      	bx	r3
 8004190:	bd70      	pop	{r4, r5, r6, pc}

08004192 <RDMHandler::RDMHandler(bool)>:
 8004192:	2200      	movs	r2, #0
 8004194:	e9c0 2201 	strd	r2, r2, [r0, #4]
 8004198:	7001      	strb	r1, [r0, #0]
 800419a:	7042      	strb	r2, [r0, #1]
 800419c:	4770      	bx	lr

0800419e <RDMHandler::HandleString(char const*, unsigned int)>:
 800419e:	6883      	ldr	r3, [r0, #8]
 80041a0:	f803 2f17 	strb.w	r2, [r3, #23]!
 80041a4:	440a      	add	r2, r1
 80041a6:	4291      	cmp	r1, r2
 80041a8:	d100      	bne.n	80041ac <RDMHandler::HandleString(char const*, unsigned int)+0xe>
 80041aa:	4770      	bx	lr
 80041ac:	f811 0b01 	ldrb.w	r0, [r1], #1
 80041b0:	f803 0f01 	strb.w	r0, [r3, #1]!
 80041b4:	e7f7      	b.n	80041a6 <RDMHandler::HandleString(char const*, unsigned int)+0x8>
	...

080041b8 <RDMHandler::CreateRespondMessage(unsigned char, unsigned short)>:
 80041b8:	b570      	push	{r4, r5, r6, lr}
 80041ba:	e9d0 4301 	ldrd	r4, r3, [r0, #4]
 80041be:	25cc      	movs	r5, #204	; 0xcc
 80041c0:	701d      	strb	r5, [r3, #0]
 80041c2:	7825      	ldrb	r5, [r4, #0]
 80041c4:	705d      	strb	r5, [r3, #1]
 80041c6:	7ba5      	ldrb	r5, [r4, #14]
 80041c8:	73dd      	strb	r5, [r3, #15]
 80041ca:	2500      	movs	r5, #0
 80041cc:	745d      	strb	r5, [r3, #17]
 80041ce:	7c65      	ldrb	r5, [r4, #17]
 80041d0:	749d      	strb	r5, [r3, #18]
 80041d2:	7ca5      	ldrb	r5, [r4, #18]
 80041d4:	74dd      	strb	r5, [r3, #19]
 80041d6:	7ce5      	ldrb	r5, [r4, #19]
 80041d8:	3501      	adds	r5, #1
 80041da:	751d      	strb	r5, [r3, #20]
 80041dc:	7d25      	ldrb	r5, [r4, #20]
 80041de:	755d      	strb	r5, [r3, #21]
 80041e0:	7d65      	ldrb	r5, [r4, #21]
 80041e2:	759d      	strb	r5, [r3, #22]
 80041e4:	b119      	cbz	r1, 80041ee <RDMHandler::CreateRespondMessage(unsigned char, unsigned short)+0x36>
 80041e6:	1e4d      	subs	r5, r1, #1
 80041e8:	2d01      	cmp	r5, #1
 80041ea:	d921      	bls.n	8004230 <RDMHandler::CreateRespondMessage(unsigned char, unsigned short)+0x78>
 80041ec:	bd70      	pop	{r4, r5, r6, pc}
 80041ee:	7dda      	ldrb	r2, [r3, #23]
 80041f0:	7419      	strb	r1, [r3, #16]
 80041f2:	3218      	adds	r2, #24
 80041f4:	709a      	strb	r2, [r3, #2]
 80041f6:	4a15      	ldr	r2, [pc, #84]	; (800424c <RDMHandler::CreateRespondMessage(unsigned char, unsigned short)+0x94>)
 80041f8:	6812      	ldr	r2, [r2, #0]
 80041fa:	1de1      	adds	r1, r4, #7
 80041fc:	1c9d      	adds	r5, r3, #2
 80041fe:	3204      	adds	r2, #4
 8004200:	340d      	adds	r4, #13
 8004202:	f811 6f01 	ldrb.w	r6, [r1, #1]!
 8004206:	f805 6f01 	strb.w	r6, [r5, #1]!
 800420a:	42a1      	cmp	r1, r4
 800420c:	f812 6f01 	ldrb.w	r6, [r2, #1]!
 8004210:	71ae      	strb	r6, [r5, #6]
 8004212:	d1f6      	bne.n	8004202 <RDMHandler::CreateRespondMessage(unsigned char, unsigned short)+0x4a>
 8004214:	2200      	movs	r2, #0
 8004216:	6884      	ldr	r4, [r0, #8]
 8004218:	7899      	ldrb	r1, [r3, #2]
 800421a:	4613      	mov	r3, r2
 800421c:	428a      	cmp	r2, r1
 800421e:	eb04 0502 	add.w	r5, r4, r2
 8004222:	d30e      	bcc.n	8004242 <RDMHandler::CreateRespondMessage(unsigned char, unsigned short)+0x8a>
 8004224:	0a1a      	lsrs	r2, r3, #8
 8004226:	702a      	strb	r2, [r5, #0]
 8004228:	6882      	ldr	r2, [r0, #8]
 800422a:	440a      	add	r2, r1
 800422c:	7053      	strb	r3, [r2, #1]
 800422e:	e7dd      	b.n	80041ec <RDMHandler::CreateRespondMessage(unsigned char, unsigned short)+0x34>
 8004230:	7419      	strb	r1, [r3, #16]
 8004232:	2102      	movs	r1, #2
 8004234:	251a      	movs	r5, #26
 8004236:	75d9      	strb	r1, [r3, #23]
 8004238:	0a11      	lsrs	r1, r2, #8
 800423a:	709d      	strb	r5, [r3, #2]
 800423c:	7619      	strb	r1, [r3, #24]
 800423e:	765a      	strb	r2, [r3, #25]
 8004240:	e7d9      	b.n	80041f6 <RDMHandler::CreateRespondMessage(unsigned char, unsigned short)+0x3e>
 8004242:	5ca5      	ldrb	r5, [r4, r2]
 8004244:	442b      	add	r3, r5
 8004246:	b29b      	uxth	r3, r3
 8004248:	3201      	adds	r2, #1
 800424a:	e7e7      	b.n	800421c <RDMHandler::CreateRespondMessage(unsigned char, unsigned short)+0x64>
 800424c:	200005dc 	ldrdcs	r0, [r0], -ip

08004250 <RDMHandler::RespondMessageAck()>:
 8004250:	6843      	ldr	r3, [r0, #4]
 8004252:	7d9a      	ldrb	r2, [r3, #22]
 8004254:	b90a      	cbnz	r2, 800425a <RDMHandler::RespondMessageAck()+0xa>
 8004256:	2218      	movs	r2, #24
 8004258:	705a      	strb	r2, [r3, #1]
 800425a:	2200      	movs	r2, #0
 800425c:	4611      	mov	r1, r2
 800425e:	f7ff bfab 	b.w	80041b8 <RDMHandler::CreateRespondMessage(unsigned char, unsigned short)>
	...

08004264 <RDMHandler::GetSupportedParameters(unsigned short)>:
 8004264:	4b18      	ldr	r3, [pc, #96]	; (80042c8 <RDMHandler::GetSupportedParameters(unsigned short)+0x64>)
 8004266:	4a19      	ldr	r2, [pc, #100]	; (80042cc <RDMHandler::GetSupportedParameters(unsigned short)+0x68>)
 8004268:	2900      	cmp	r1, #0
 800426a:	bf08      	it	eq
 800426c:	461a      	moveq	r2, r3
 800426e:	b4f0      	push	{r4, r5, r6, r7}
 8004270:	bf14      	ite	ne
 8004272:	2108      	movne	r1, #8
 8004274:	211e      	moveq	r1, #30
 8004276:	2518      	movs	r5, #24
 8004278:	4614      	mov	r4, r2
 800427a:	fb05 2501 	mla	r5, r5, r1, r2
 800427e:	2300      	movs	r3, #0
 8004280:	7d66      	ldrb	r6, [r4, #21]
 8004282:	b10e      	cbz	r6, 8004288 <RDMHandler::GetSupportedParameters(unsigned short)+0x24>
 8004284:	3301      	adds	r3, #1
 8004286:	b2db      	uxtb	r3, r3
 8004288:	3418      	adds	r4, #24
 800428a:	42ac      	cmp	r4, r5
 800428c:	d1f8      	bne.n	8004280 <RDMHandler::GetSupportedParameters(unsigned short)+0x1c>
 800428e:	6886      	ldr	r6, [r0, #8]
 8004290:	005b      	lsls	r3, r3, #1
 8004292:	75f3      	strb	r3, [r6, #23]
 8004294:	230c      	movs	r3, #12
 8004296:	4359      	muls	r1, r3
 8004298:	2300      	movs	r3, #0
 800429a:	461c      	mov	r4, r3
 800429c:	f102 0c15 	add.w	ip, r2, #21
 80042a0:	f81c 5013 	ldrb.w	r5, [ip, r3, lsl #1]
 80042a4:	b14d      	cbz	r5, 80042ba <RDMHandler::GetSupportedParameters(unsigned short)+0x56>
 80042a6:	f832 5013 	ldrh.w	r5, [r2, r3, lsl #1]
 80042aa:	eb06 0744 	add.w	r7, r6, r4, lsl #1
 80042ae:	0a2d      	lsrs	r5, r5, #8
 80042b0:	763d      	strb	r5, [r7, #24]
 80042b2:	f832 5013 	ldrh.w	r5, [r2, r3, lsl #1]
 80042b6:	767d      	strb	r5, [r7, #25]
 80042b8:	3401      	adds	r4, #1
 80042ba:	330c      	adds	r3, #12
 80042bc:	4299      	cmp	r1, r3
 80042be:	d1ef      	bne.n	80042a0 <RDMHandler::GetSupportedParameters(unsigned short)+0x3c>
 80042c0:	bcf0      	pop	{r4, r5, r6, r7}
 80042c2:	f7ff bfc5 	b.w	8004250 <RDMHandler::RespondMessageAck()>
 80042c6:	bf00      	nop
 80042c8:	0800a3d4 	stmdaeq	r0, {r2, r4, r6, r7, r8, r9, sp, pc}
 80042cc:	0800a6a4 	stmdaeq	r0, {r2, r5, r7, r9, sl, sp, pc}

080042d0 <RDMHandler::GetDeviceInfo(unsigned short)>:
 80042d0:	b538      	push	{r3, r4, r5, lr}
 80042d2:	4b18      	ldr	r3, [pc, #96]	; (8004334 <RDMHandler::GetDeviceInfo(unsigned short)+0x64>)
 80042d4:	4605      	mov	r5, r0
 80042d6:	681c      	ldr	r4, [r3, #0]
 80042d8:	b349      	cbz	r1, 800432e <RDMHandler::GetDeviceInfo(unsigned short)+0x5e>
 80042da:	f104 008c 	add.w	r0, r4, #140	; 0x8c
 80042de:	f7fe ff39 	bl	8003154 <RDMSubDevices::GetInfo(unsigned short)>
 80042e2:	b1b8      	cbz	r0, 8004314 <RDMHandler::GetDeviceInfo(unsigned short)+0x44>
 80042e4:	8803      	ldrh	r3, [r0, #0]
 80042e6:	0a1b      	lsrs	r3, r3, #8
 80042e8:	f884 30ba 	strb.w	r3, [r4, #186]	; 0xba
 80042ec:	8803      	ldrh	r3, [r0, #0]
 80042ee:	f884 30bb 	strb.w	r3, [r4, #187]	; 0xbb
 80042f2:	7903      	ldrb	r3, [r0, #4]
 80042f4:	f884 30bc 	strb.w	r3, [r4, #188]	; 0xbc
 80042f8:	7943      	ldrb	r3, [r0, #5]
 80042fa:	f884 30bd 	strb.w	r3, [r4, #189]	; 0xbd
 80042fe:	8843      	ldrh	r3, [r0, #2]
 8004300:	0a1b      	lsrs	r3, r3, #8
 8004302:	f884 30be 	strb.w	r3, [r4, #190]	; 0xbe
 8004306:	8843      	ldrh	r3, [r0, #2]
 8004308:	f884 30bf 	strb.w	r3, [r4, #191]	; 0xbf
 800430c:	f890 3027 	ldrb.w	r3, [r0, #39]	; 0x27
 8004310:	f884 30c2 	strb.w	r3, [r4, #194]	; 0xc2
 8004314:	f104 01b0 	add.w	r1, r4, #176	; 0xb0
 8004318:	68a8      	ldr	r0, [r5, #8]
 800431a:	2213      	movs	r2, #19
 800431c:	75c2      	strb	r2, [r0, #23]
 800431e:	3018      	adds	r0, #24
 8004320:	f7ff fe99 	bl	8004056 <memcpy.isra.0>
 8004324:	4628      	mov	r0, r5
 8004326:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800432a:	f7ff bf91 	b.w	8004250 <RDMHandler::RespondMessageAck()>
 800432e:	f104 019d 	add.w	r1, r4, #157	; 0x9d
 8004332:	e7f1      	b.n	8004318 <RDMHandler::GetDeviceInfo(unsigned short)+0x48>
 8004334:	200005dc 	ldrdcs	r0, [r0], -ip

08004338 <RDMHandler::GetFactoryDefaults(unsigned short)>:
 8004338:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800433a:	6886      	ldr	r6, [r0, #8]
 800433c:	2301      	movs	r3, #1
 800433e:	75f3      	strb	r3, [r6, #23]
 8004340:	4b1c      	ldr	r3, [pc, #112]	; (80043b4 <RDMHandler::GetFactoryDefaults(unsigned short)+0x7c>)
 8004342:	681c      	ldr	r4, [r3, #0]
 8004344:	f894 30c5 	ldrb.w	r3, [r4, #197]	; 0xc5
 8004348:	4605      	mov	r5, r0
 800434a:	b37b      	cbz	r3, 80043ac <RDMHandler::GetFactoryDefaults(unsigned short)+0x74>
 800434c:	f06f 0c0d 	mvn.w	ip, #13
 8004350:	f8b4 1078 	ldrh.w	r1, [r4, #120]	; 0x78
 8004354:	f894 3076 	ldrb.w	r3, [r4, #118]	; 0x76
 8004358:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
 800435c:	f104 020e 	add.w	r2, r4, #14
 8004360:	ebac 0c04 	sub.w	ip, ip, r4
 8004364:	eb0c 0702 	add.w	r7, ip, r2
 8004368:	4287      	cmp	r7, r0
 800436a:	d30a      	bcc.n	8004382 <RDMHandler::GetFactoryDefaults(unsigned short)+0x4a>
 800436c:	4299      	cmp	r1, r3
 800436e:	d00d      	beq.n	800438c <RDMHandler::GetFactoryDefaults(unsigned short)+0x54>
 8004370:	2300      	movs	r3, #0
 8004372:	f884 30c5 	strb.w	r3, [r4, #197]	; 0xc5
 8004376:	7633      	strb	r3, [r6, #24]
 8004378:	4628      	mov	r0, r5
 800437a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800437e:	f7ff bf67 	b.w	8004250 <RDMHandler::RespondMessageAck()>
 8004382:	f812 7f01 	ldrb.w	r7, [r2, #1]!
 8004386:	443b      	add	r3, r7
 8004388:	b29b      	uxth	r3, r3
 800438a:	e7eb      	b.n	8004364 <RDMHandler::GetFactoryDefaults(unsigned short)+0x2c>
 800438c:	f894 30ac 	ldrb.w	r3, [r4, #172]	; 0xac
 8004390:	f894 10a9 	ldrb.w	r1, [r4, #169]	; 0xa9
 8004394:	f8b4 20c6 	ldrh.w	r2, [r4, #198]	; 0xc6
 8004398:	440b      	add	r3, r1
 800439a:	429a      	cmp	r2, r3
 800439c:	d1e8      	bne.n	8004370 <RDMHandler::GetFactoryDefaults(unsigned short)+0x38>
 800439e:	f104 008c 	add.w	r0, r4, #140	; 0x8c
 80043a2:	f7fe ff6c 	bl	800327e <RDMSubDevices::GetFactoryDefaults()>
 80043a6:	4603      	mov	r3, r0
 80043a8:	2800      	cmp	r0, #0
 80043aa:	d0e2      	beq.n	8004372 <RDMHandler::GetFactoryDefaults(unsigned short)+0x3a>
 80043ac:	f894 30c5 	ldrb.w	r3, [r4, #197]	; 0xc5
 80043b0:	e7e1      	b.n	8004376 <RDMHandler::GetFactoryDefaults(unsigned short)+0x3e>
 80043b2:	bf00      	nop
 80043b4:	200005dc 	ldrdcs	r0, [r0], -ip

080043b8 <RDMHandler::GetProductDetailIdList(unsigned short)>:
 80043b8:	4b05      	ldr	r3, [pc, #20]	; (80043d0 <RDMHandler::GetProductDetailIdList(unsigned short)+0x18>)
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	f8b3 2054 	ldrh.w	r2, [r3, #84]	; 0x54
 80043c0:	6883      	ldr	r3, [r0, #8]
 80043c2:	2102      	movs	r1, #2
 80043c4:	75d9      	strb	r1, [r3, #23]
 80043c6:	0a11      	lsrs	r1, r2, #8
 80043c8:	7619      	strb	r1, [r3, #24]
 80043ca:	765a      	strb	r2, [r3, #25]
 80043cc:	f7ff bf40 	b.w	8004250 <RDMHandler::RespondMessageAck()>
 80043d0:	200005dc 	ldrdcs	r0, [r0], -ip

080043d4 <RDMHandler::GetDeviceModelDescription(unsigned short)>:
 80043d4:	b510      	push	{r4, lr}
 80043d6:	4905      	ldr	r1, [pc, #20]	; (80043ec <RDMHandler::GetDeviceModelDescription(unsigned short)+0x18>)
 80043d8:	4604      	mov	r4, r0
 80043da:	220a      	movs	r2, #10
 80043dc:	f7ff fedf 	bl	800419e <RDMHandler::HandleString(char const*, unsigned int)>
 80043e0:	4620      	mov	r0, r4
 80043e2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80043e6:	f7ff bf33 	b.w	8004250 <RDMHandler::RespondMessageAck()>
 80043ea:	bf00      	nop
 80043ec:	0800a3b8 	stmdaeq	r0, {r3, r4, r5, r7, r8, r9, sp, pc}

080043f0 <RDMHandler::GetManufacturerLabel(unsigned short)>:
 80043f0:	b510      	push	{r4, lr}
 80043f2:	4b06      	ldr	r3, [pc, #24]	; (800440c <RDMHandler::GetManufacturerLabel(unsigned short)+0x1c>)
 80043f4:	6819      	ldr	r1, [r3, #0]
 80043f6:	4604      	mov	r4, r0
 80043f8:	f891 2050 	ldrb.w	r2, [r1, #80]	; 0x50
 80043fc:	3130      	adds	r1, #48	; 0x30
 80043fe:	f7ff fece 	bl	800419e <RDMHandler::HandleString(char const*, unsigned int)>
 8004402:	4620      	mov	r0, r4
 8004404:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004408:	f7ff bf22 	b.w	8004250 <RDMHandler::RespondMessageAck()>
 800440c:	200005dc 	ldrdcs	r0, [r0], -ip

08004410 <RDMHandler::GetDeviceLabel(unsigned short)>:
 8004410:	4b0d      	ldr	r3, [pc, #52]	; (8004448 <RDMHandler::GetDeviceLabel(unsigned short)+0x38>)
 8004412:	b513      	push	{r0, r1, r4, lr}
 8004414:	4604      	mov	r4, r0
 8004416:	6818      	ldr	r0, [r3, #0]
 8004418:	b171      	cbz	r1, 8004438 <RDMHandler::GetDeviceLabel(unsigned short)+0x28>
 800441a:	466a      	mov	r2, sp
 800441c:	308c      	adds	r0, #140	; 0x8c
 800441e:	f7fe fea1 	bl	8003164 <RDMSubDevices::GetLabel(unsigned short, TRDMDeviceInfoData*)>
 8004422:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8004426:	9900      	ldr	r1, [sp, #0]
 8004428:	4620      	mov	r0, r4
 800442a:	f7ff feb8 	bl	800419e <RDMHandler::HandleString(char const*, unsigned int)>
 800442e:	4620      	mov	r0, r4
 8004430:	f7ff ff0e 	bl	8004250 <RDMHandler::RespondMessageAck()>
 8004434:	b002      	add	sp, #8
 8004436:	bd10      	pop	{r4, pc}
 8004438:	f100 030f 	add.w	r3, r0, #15
 800443c:	9300      	str	r3, [sp, #0]
 800443e:	f890 302f 	ldrb.w	r3, [r0, #47]	; 0x2f
 8004442:	f88d 3004 	strb.w	r3, [sp, #4]
 8004446:	e7ec      	b.n	8004422 <RDMHandler::GetDeviceLabel(unsigned short)+0x12>
 8004448:	200005dc 	ldrdcs	r0, [r0], -ip

0800444c <RDMHandler::GetSoftwareVersionLabel(unsigned short)>:
 800444c:	b510      	push	{r4, lr}
 800444e:	4b07      	ldr	r3, [pc, #28]	; (800446c <RDMHandler::GetSoftwareVersionLabel(unsigned short)+0x20>)
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	4604      	mov	r4, r0
 8004454:	f893 209c 	ldrb.w	r2, [r3, #156]	; 0x9c
 8004458:	f8d3 1098 	ldr.w	r1, [r3, #152]	; 0x98
 800445c:	f7ff fe9f 	bl	800419e <RDMHandler::HandleString(char const*, unsigned int)>
 8004460:	4620      	mov	r0, r4
 8004462:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004466:	f7ff bef3 	b.w	8004250 <RDMHandler::RespondMessageAck()>
 800446a:	bf00      	nop
 800446c:	200005dc 	ldrdcs	r0, [r0], -ip

08004470 <RDMHandler::GetIdentifyDevice(unsigned short)>:
 8004470:	6883      	ldr	r3, [r0, #8]
 8004472:	2201      	movs	r2, #1
 8004474:	75da      	strb	r2, [r3, #23]
 8004476:	4a02      	ldr	r2, [pc, #8]	; (8004480 <RDMHandler::GetIdentifyDevice(unsigned short)+0x10>)
 8004478:	7812      	ldrb	r2, [r2, #0]
 800447a:	761a      	strb	r2, [r3, #24]
 800447c:	f7ff bee8 	b.w	8004250 <RDMHandler::RespondMessageAck()>
 8004480:	200005e0 	andcs	r0, r0, r0, ror #11

08004484 <RDMHandler::GetLanguage(unsigned short)>:
 8004484:	b510      	push	{r4, lr}
 8004486:	4b06      	ldr	r3, [pc, #24]	; (80044a0 <RDMHandler::GetLanguage(unsigned short)+0x1c>)
 8004488:	6819      	ldr	r1, [r3, #0]
 800448a:	4604      	mov	r4, r0
 800448c:	2202      	movs	r2, #2
 800448e:	31c3      	adds	r1, #195	; 0xc3
 8004490:	f7ff fe85 	bl	800419e <RDMHandler::HandleString(char const*, unsigned int)>
 8004494:	4620      	mov	r0, r4
 8004496:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800449a:	f7ff bed9 	b.w	8004250 <RDMHandler::RespondMessageAck()>
 800449e:	bf00      	nop
 80044a0:	200005dc 	ldrdcs	r0, [r0], -ip

080044a4 <RDMHandler::GetPersonality(unsigned short)>:
 80044a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80044a6:	4f0d      	ldr	r7, [pc, #52]	; (80044dc <RDMHandler::GetPersonality(unsigned short)+0x38>)
 80044a8:	4604      	mov	r4, r0
 80044aa:	460e      	mov	r6, r1
 80044ac:	6838      	ldr	r0, [r7, #0]
 80044ae:	b189      	cbz	r1, 80044d4 <RDMHandler::GetPersonality(unsigned short)+0x30>
 80044b0:	308c      	adds	r0, #140	; 0x8c
 80044b2:	f7fe fe87 	bl	80031c4 <RDMSubDevices::GetPersonalityCurrent(unsigned short)>
 80044b6:	4605      	mov	r5, r0
 80044b8:	6838      	ldr	r0, [r7, #0]
 80044ba:	4631      	mov	r1, r6
 80044bc:	f7ff fe2d 	bl	800411a <RDMDeviceResponder::GetPersonalityCount(unsigned short)>
 80044c0:	68a3      	ldr	r3, [r4, #8]
 80044c2:	2202      	movs	r2, #2
 80044c4:	7658      	strb	r0, [r3, #25]
 80044c6:	75da      	strb	r2, [r3, #23]
 80044c8:	761d      	strb	r5, [r3, #24]
 80044ca:	4620      	mov	r0, r4
 80044cc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80044d0:	f7ff bebe 	b.w	8004250 <RDMHandler::RespondMessageAck()>
 80044d4:	f890 50a9 	ldrb.w	r5, [r0, #169]	; 0xa9
 80044d8:	e7ee      	b.n	80044b8 <RDMHandler::GetPersonality(unsigned short)+0x14>
 80044da:	bf00      	nop
 80044dc:	200005dc 	ldrdcs	r0, [r0], -ip

080044e0 <RDMHandler::GetDmxStartAddress(unsigned short)>:
 80044e0:	4b0d      	ldr	r3, [pc, #52]	; (8004518 <RDMHandler::GetDmxStartAddress(unsigned short)+0x38>)
 80044e2:	b510      	push	{r4, lr}
 80044e4:	4604      	mov	r4, r0
 80044e6:	6818      	ldr	r0, [r3, #0]
 80044e8:	b169      	cbz	r1, 8004506 <RDMHandler::GetDmxStartAddress(unsigned short)+0x26>
 80044ea:	308c      	adds	r0, #140	; 0x8c
 80044ec:	f7fe fe51 	bl	8003192 <RDMSubDevices::GetDmxStartAddress(unsigned short)>
 80044f0:	68a3      	ldr	r3, [r4, #8]
 80044f2:	2202      	movs	r2, #2
 80044f4:	75da      	strb	r2, [r3, #23]
 80044f6:	0a02      	lsrs	r2, r0, #8
 80044f8:	7658      	strb	r0, [r3, #25]
 80044fa:	761a      	strb	r2, [r3, #24]
 80044fc:	4620      	mov	r0, r4
 80044fe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004502:	f7ff bea5 	b.w	8004250 <RDMHandler::RespondMessageAck()>
 8004506:	f890 20ab 	ldrb.w	r2, [r0, #171]	; 0xab
 800450a:	f890 30ac 	ldrb.w	r3, [r0, #172]	; 0xac
 800450e:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8004512:	b298      	uxth	r0, r3
 8004514:	e7ec      	b.n	80044f0 <RDMHandler::GetDmxStartAddress(unsigned short)+0x10>
 8004516:	bf00      	nop
 8004518:	200005dc 	ldrdcs	r0, [r0], -ip

0800451c <RDMHandler::GetDeviceHours(unsigned short)>:
 800451c:	4b07      	ldr	r3, [pc, #28]	; (800453c <RDMHandler::GetDeviceHours(unsigned short)+0x20>)
 800451e:	681a      	ldr	r2, [r3, #0]
 8004520:	4b07      	ldr	r3, [pc, #28]	; (8004540 <RDMHandler::GetDeviceHours(unsigned short)+0x24>)
 8004522:	fbb2 f2f3 	udiv	r2, r2, r3
 8004526:	6883      	ldr	r3, [r0, #8]
 8004528:	2104      	movs	r1, #4
 800452a:	75d9      	strb	r1, [r3, #23]
 800452c:	2100      	movs	r1, #0
 800452e:	7619      	strb	r1, [r3, #24]
 8004530:	7659      	strb	r1, [r3, #25]
 8004532:	0a11      	lsrs	r1, r2, #8
 8004534:	7699      	strb	r1, [r3, #26]
 8004536:	76da      	strb	r2, [r3, #27]
 8004538:	f7ff be8a 	b.w	8004250 <RDMHandler::RespondMessageAck()>
 800453c:	200017ac 	andcs	r1, r0, ip, lsr #15
 8004540:	0036ee80 	eorseq	lr, r6, r0, lsl #29

08004544 <RDMHandler::GetDisplayInvert(unsigned short)>:
 8004544:	6882      	ldr	r2, [r0, #8]
 8004546:	2301      	movs	r3, #1
 8004548:	75d3      	strb	r3, [r2, #23]
 800454a:	4b04      	ldr	r3, [pc, #16]	; (800455c <RDMHandler::GetDisplayInvert(unsigned short)+0x18>)
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	699b      	ldr	r3, [r3, #24]
 8004550:	b103      	cbz	r3, 8004554 <RDMHandler::GetDisplayInvert(unsigned short)+0x10>
 8004552:	7b5b      	ldrb	r3, [r3, #13]
 8004554:	7613      	strb	r3, [r2, #24]
 8004556:	f7ff be7b 	b.w	8004250 <RDMHandler::RespondMessageAck()>
 800455a:	bf00      	nop
 800455c:	20001684 	andcs	r1, r0, r4, lsl #13

08004560 <RDMHandler::GetDisplayLevel(unsigned short)>:
 8004560:	6882      	ldr	r2, [r0, #8]
 8004562:	2301      	movs	r3, #1
 8004564:	75d3      	strb	r3, [r2, #23]
 8004566:	4b04      	ldr	r3, [pc, #16]	; (8004578 <RDMHandler::GetDisplayLevel(unsigned short)+0x18>)
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	699b      	ldr	r3, [r3, #24]
 800456c:	b103      	cbz	r3, 8004570 <RDMHandler::GetDisplayLevel(unsigned short)+0x10>
 800456e:	7b1b      	ldrb	r3, [r3, #12]
 8004570:	7613      	strb	r3, [r2, #24]
 8004572:	f7ff be6d 	b.w	8004250 <RDMHandler::RespondMessageAck()>
 8004576:	bf00      	nop
 8004578:	20001684 	andcs	r1, r0, r4, lsl #13

0800457c <RDMHandler::GetRealTimeClock(unsigned short)>:
 800457c:	b510      	push	{r4, lr}
 800457e:	4b10      	ldr	r3, [pc, #64]	; (80045c0 <RDMHandler::GetRealTimeClock(unsigned short)+0x44>)
 8004580:	b08a      	sub	sp, #40	; 0x28
 8004582:	4604      	mov	r4, r0
 8004584:	a901      	add	r1, sp, #4
 8004586:	6818      	ldr	r0, [r3, #0]
 8004588:	f003 fd5b 	bl	8008042 <Hardware::GetTime(tm*)>
 800458c:	9a06      	ldr	r2, [sp, #24]
 800458e:	68a3      	ldr	r3, [r4, #8]
 8004590:	f202 726c 	addw	r2, r2, #1900	; 0x76c
 8004594:	f3c2 2107 	ubfx	r1, r2, #8, #8
 8004598:	765a      	strb	r2, [r3, #25]
 800459a:	9a05      	ldr	r2, [sp, #20]
 800459c:	7619      	strb	r1, [r3, #24]
 800459e:	3201      	adds	r2, #1
 80045a0:	769a      	strb	r2, [r3, #26]
 80045a2:	9a04      	ldr	r2, [sp, #16]
 80045a4:	76da      	strb	r2, [r3, #27]
 80045a6:	9a03      	ldr	r2, [sp, #12]
 80045a8:	771a      	strb	r2, [r3, #28]
 80045aa:	9a02      	ldr	r2, [sp, #8]
 80045ac:	775a      	strb	r2, [r3, #29]
 80045ae:	9a01      	ldr	r2, [sp, #4]
 80045b0:	779a      	strb	r2, [r3, #30]
 80045b2:	2207      	movs	r2, #7
 80045b4:	75da      	strb	r2, [r3, #23]
 80045b6:	4620      	mov	r0, r4
 80045b8:	f7ff fe4a 	bl	8004250 <RDMHandler::RespondMessageAck()>
 80045bc:	b00a      	add	sp, #40	; 0x28
 80045be:	bd10      	pop	{r4, pc}
 80045c0:	20001770 	andcs	r1, r0, r0, ror r7

080045c4 <RDMHandler::GetPowerState(unsigned short)>:
 80045c4:	6883      	ldr	r3, [r0, #8]
 80045c6:	2201      	movs	r2, #1
 80045c8:	75da      	strb	r2, [r3, #23]
 80045ca:	22ff      	movs	r2, #255	; 0xff
 80045cc:	761a      	strb	r2, [r3, #24]
 80045ce:	f7ff be3f 	b.w	8004250 <RDMHandler::RespondMessageAck()>

080045d2 <RDMHandler::GetPerformSelfTest(unsigned short)>:
 80045d2:	b538      	push	{r3, r4, r5, lr}
 80045d4:	6885      	ldr	r5, [r0, #8]
 80045d6:	2301      	movs	r3, #1
 80045d8:	75eb      	strb	r3, [r5, #23]
 80045da:	4604      	mov	r4, r0
 80045dc:	f7fc ff26 	bl	800142c <rdm::selftest::Get()>
 80045e0:	3800      	subs	r0, #0
 80045e2:	bf18      	it	ne
 80045e4:	2001      	movne	r0, #1
 80045e6:	7628      	strb	r0, [r5, #24]
 80045e8:	4620      	mov	r0, r4
 80045ea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80045ee:	f7ff be2f 	b.w	8004250 <RDMHandler::RespondMessageAck()>
	...

080045f4 <RDMHandler::GetBootSoftwareVersionLabel(unsigned short)>:
 80045f4:	b510      	push	{r4, lr}
 80045f6:	4905      	ldr	r1, [pc, #20]	; (800460c <RDMHandler::GetBootSoftwareVersionLabel(unsigned short)+0x18>)
 80045f8:	4604      	mov	r4, r0
 80045fa:	2208      	movs	r2, #8
 80045fc:	f7ff fdcf 	bl	800419e <RDMHandler::HandleString(char const*, unsigned int)>
 8004600:	4620      	mov	r0, r4
 8004602:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004606:	f7ff be23 	b.w	8004250 <RDMHandler::RespondMessageAck()>
 800460a:	bf00      	nop
 800460c:	0800a3c3 	stmdaeq	r0, {r0, r1, r6, r7, r8, r9, sp, pc}

08004610 <RDMHandler::GetSlotInfo(unsigned short)>:
 8004610:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8004614:	f8df 8084 	ldr.w	r8, [pc, #132]	; 800469c <RDMHandler::GetSlotInfo(unsigned short)+0x8c>
 8004618:	6887      	ldr	r7, [r0, #8]
 800461a:	4606      	mov	r6, r0
 800461c:	4689      	mov	r9, r1
 800461e:	f8d8 0000 	ldr.w	r0, [r8]
 8004622:	b1b9      	cbz	r1, 8004654 <RDMHandler::GetSlotInfo(unsigned short)+0x44>
 8004624:	308c      	adds	r0, #140	; 0x8c
 8004626:	f7fe fdc5 	bl	80031b4 <RDMSubDevices::GetDmxFootPrint(unsigned short)>
 800462a:	282e      	cmp	r0, #46	; 0x2e
 800462c:	bf28      	it	cs
 800462e:	202e      	movcs	r0, #46	; 0x2e
 8004630:	f04f 0a00 	mov.w	sl, #0
 8004634:	b285      	uxth	r5, r0
 8004636:	4654      	mov	r4, sl
 8004638:	fa1f f18a 	uxth.w	r1, sl
 800463c:	42a9      	cmp	r1, r5
 800463e:	d311      	bcc.n	8004664 <RDMHandler::GetSlotInfo(unsigned short)+0x54>
 8004640:	b2e4      	uxtb	r4, r4
 8004642:	75fc      	strb	r4, [r7, #23]
 8004644:	3418      	adds	r4, #24
 8004646:	70bc      	strb	r4, [r7, #2]
 8004648:	4630      	mov	r0, r6
 800464a:	f7ff fe01 	bl	8004250 <RDMHandler::RespondMessageAck()>
 800464e:	b002      	add	sp, #8
 8004650:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004654:	f890 30a7 	ldrb.w	r3, [r0, #167]	; 0xa7
 8004658:	f890 00a8 	ldrb.w	r0, [r0, #168]	; 0xa8
 800465c:	eb00 2303 	add.w	r3, r0, r3, lsl #8
 8004660:	b298      	uxth	r0, r3
 8004662:	e7e2      	b.n	800462a <RDMHandler::GetSlotInfo(unsigned short)+0x1a>
 8004664:	f1b9 0f00 	cmp.w	r9, #0
 8004668:	d115      	bne.n	8004696 <RDMHandler::GetSlotInfo(unsigned short)+0x86>
 800466a:	f8d8 0000 	ldr.w	r0, [r8]
 800466e:	aa01      	add	r2, sp, #4
 8004670:	f7ff fce4 	bl	800403c <RDMDeviceResponder::GetSlotInfo(unsigned short, unsigned short, lightset::SlotInfo&) [clone .part.0]>
 8004674:	b178      	cbz	r0, 8004696 <RDMHandler::GetSlotInfo(unsigned short)+0x86>
 8004676:	193a      	adds	r2, r7, r4
 8004678:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800467c:	f8bd 1004 	ldrh.w	r1, [sp, #4]
 8004680:	7693      	strb	r3, [r2, #26]
 8004682:	1d23      	adds	r3, r4, #4
 8004684:	443b      	add	r3, r7
 8004686:	0a08      	lsrs	r0, r1, #8
 8004688:	f882 9018 	strb.w	r9, [r2, #24]
 800468c:	f882 a019 	strb.w	sl, [r2, #25]
 8004690:	76d0      	strb	r0, [r2, #27]
 8004692:	3405      	adds	r4, #5
 8004694:	7619      	strb	r1, [r3, #24]
 8004696:	f10a 0a01 	add.w	sl, sl, #1
 800469a:	e7cd      	b.n	8004638 <RDMHandler::GetSlotInfo(unsigned short)+0x28>
 800469c:	200005dc 	ldrdcs	r0, [r0], -ip

080046a0 <RDMHandler::RespondMessageNack(unsigned short)>:
 80046a0:	460a      	mov	r2, r1
 80046a2:	2102      	movs	r1, #2
 80046a4:	f7ff bd88 	b.w	80041b8 <RDMHandler::CreateRespondMessage(unsigned char, unsigned short)>

080046a8 <RDMHandler::SetResetDevice(bool, unsigned short)>:
 80046a8:	b510      	push	{r4, lr}
 80046aa:	6843      	ldr	r3, [r0, #4]
 80046ac:	7d9a      	ldrb	r2, [r3, #22]
 80046ae:	2a01      	cmp	r2, #1
 80046b0:	4604      	mov	r4, r0
 80046b2:	d004      	beq.n	80046be <RDMHandler::SetResetDevice(bool, unsigned short)+0x16>
 80046b4:	2101      	movs	r1, #1
 80046b6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80046ba:	f7ff bff1 	b.w	80046a0 <RDMHandler::RespondMessageNack(unsigned short)>
 80046be:	7ddb      	ldrb	r3, [r3, #23]
 80046c0:	2b01      	cmp	r3, #1
 80046c2:	d003      	beq.n	80046cc <RDMHandler::SetResetDevice(bool, unsigned short)+0x24>
 80046c4:	2bff      	cmp	r3, #255	; 0xff
 80046c6:	d001      	beq.n	80046cc <RDMHandler::SetResetDevice(bool, unsigned short)+0x24>
 80046c8:	2106      	movs	r1, #6
 80046ca:	e7f4      	b.n	80046b6 <RDMHandler::SetResetDevice(bool, unsigned short)+0xe>
 80046cc:	68a2      	ldr	r2, [r4, #8]
 80046ce:	2100      	movs	r1, #0
 80046d0:	2bff      	cmp	r3, #255	; 0xff
 80046d2:	75d1      	strb	r1, [r2, #23]
 80046d4:	d102      	bne.n	80046dc <RDMHandler::SetResetDevice(bool, unsigned short)+0x34>
 80046d6:	2104      	movs	r1, #4
 80046d8:	4620      	mov	r0, r4
 80046da:	e7ec      	b.n	80046b6 <RDMHandler::SetResetDevice(bool, unsigned short)+0xe>
 80046dc:	4b03      	ldr	r3, [pc, #12]	; (80046ec <RDMHandler::SetResetDevice(bool, unsigned short)+0x44>)
 80046de:	6818      	ldr	r0, [r3, #0]
 80046e0:	f003 fcc6 	bl	8008070 <Hardware::Reboot()>
 80046e4:	2800      	cmp	r0, #0
 80046e6:	d0f6      	beq.n	80046d6 <RDMHandler::SetResetDevice(bool, unsigned short)+0x2e>
 80046e8:	bd10      	pop	{r4, pc}
 80046ea:	bf00      	nop
 80046ec:	20001770 	andcs	r1, r0, r0, ror r7

080046f0 <RDMHandler::SetIdentifyDevice(bool, unsigned short)>:
 80046f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80046f2:	6843      	ldr	r3, [r0, #4]
 80046f4:	7d9a      	ldrb	r2, [r3, #22]
 80046f6:	2a01      	cmp	r2, #1
 80046f8:	4604      	mov	r4, r0
 80046fa:	460d      	mov	r5, r1
 80046fc:	d004      	beq.n	8004708 <RDMHandler::SetIdentifyDevice(bool, unsigned short)+0x18>
 80046fe:	2101      	movs	r1, #1
 8004700:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8004704:	f7ff bfcc 	b.w	80046a0 <RDMHandler::RespondMessageNack(unsigned short)>
 8004708:	7ddb      	ldrb	r3, [r3, #23]
 800470a:	2b01      	cmp	r3, #1
 800470c:	d901      	bls.n	8004712 <RDMHandler::SetIdentifyDevice(bool, unsigned short)+0x22>
 800470e:	2106      	movs	r1, #6
 8004710:	e7f6      	b.n	8004700 <RDMHandler::SetIdentifyDevice(bool, unsigned short)+0x10>
 8004712:	4912      	ldr	r1, [pc, #72]	; (800475c <RDMHandler::SetIdentifyDevice(bool, unsigned short)+0x6c>)
 8004714:	4f12      	ldr	r7, [pc, #72]	; (8004760 <RDMHandler::SetIdentifyDevice(bool, unsigned short)+0x70>)
 8004716:	680e      	ldr	r6, [r1, #0]
 8004718:	4912      	ldr	r1, [pc, #72]	; (8004764 <RDMHandler::SetIdentifyDevice(bool, unsigned short)+0x74>)
 800471a:	6808      	ldr	r0, [r1, #0]
 800471c:	4912      	ldr	r1, [pc, #72]	; (8004768 <RDMHandler::SetIdentifyDevice(bool, unsigned short)+0x78>)
 800471e:	b98b      	cbnz	r3, 8004744 <RDMHandler::SetIdentifyDevice(bool, unsigned short)+0x54>
 8004720:	700b      	strb	r3, [r1, #0]
 8004722:	461a      	mov	r2, r3
 8004724:	2102      	movs	r1, #2
 8004726:	f003 fbfc 	bl	8007f22 <Hardware::SetModeWithLock(hardware::ledblink::Mode, bool)>
 800472a:	7839      	ldrb	r1, [r7, #0]
 800472c:	b111      	cbz	r1, 8004734 <RDMHandler::SetIdentifyDevice(bool, unsigned short)+0x44>
 800472e:	4630      	mov	r0, r6
 8004730:	f7fc ff50 	bl	80015d4 <RDMIdentify::Off(rdm::identify::Mode)>
 8004734:	b98d      	cbnz	r5, 800475a <RDMHandler::SetIdentifyDevice(bool, unsigned short)+0x6a>
 8004736:	68a3      	ldr	r3, [r4, #8]
 8004738:	75dd      	strb	r5, [r3, #23]
 800473a:	4620      	mov	r0, r4
 800473c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8004740:	f7ff bd86 	b.w	8004250 <RDMHandler::RespondMessageAck()>
 8004744:	700a      	strb	r2, [r1, #0]
 8004746:	2104      	movs	r1, #4
 8004748:	f003 fbeb 	bl	8007f22 <Hardware::SetModeWithLock(hardware::ledblink::Mode, bool)>
 800474c:	7839      	ldrb	r1, [r7, #0]
 800474e:	2900      	cmp	r1, #0
 8004750:	d0f0      	beq.n	8004734 <RDMHandler::SetIdentifyDevice(bool, unsigned short)+0x44>
 8004752:	4630      	mov	r0, r6
 8004754:	f7fc ff20 	bl	8001598 <RDMIdentify::On(rdm::identify::Mode)>
 8004758:	e7ec      	b.n	8004734 <RDMHandler::SetIdentifyDevice(bool, unsigned short)+0x44>
 800475a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800475c:	200005e4 	andcs	r0, r0, r4, ror #11
 8004760:	200005e1 	andcs	r0, r0, r1, ror #11
 8004764:	20001770 	andcs	r1, r0, r0, ror r7
 8004768:	200005e0 	andcs	r0, r0, r0, ror #11

0800476c <RDMHandler::SetLanguage(bool, unsigned short)>:
 800476c:	b470      	push	{r4, r5, r6}
 800476e:	6842      	ldr	r2, [r0, #4]
 8004770:	7d94      	ldrb	r4, [r2, #22]
 8004772:	2c02      	cmp	r4, #2
 8004774:	4603      	mov	r3, r0
 8004776:	d003      	beq.n	8004780 <RDMHandler::SetLanguage(bool, unsigned short)+0x14>
 8004778:	2101      	movs	r1, #1
 800477a:	bc70      	pop	{r4, r5, r6}
 800477c:	f7ff bf90 	b.w	80046a0 <RDMHandler::RespondMessageNack(unsigned short)>
 8004780:	4c0b      	ldr	r4, [pc, #44]	; (80047b0 <RDMHandler::SetLanguage(bool, unsigned short)+0x44>)
 8004782:	7dd6      	ldrb	r6, [r2, #23]
 8004784:	6824      	ldr	r4, [r4, #0]
 8004786:	f894 50c3 	ldrb.w	r5, [r4, #195]	; 0xc3
 800478a:	42ae      	cmp	r6, r5
 800478c:	d104      	bne.n	8004798 <RDMHandler::SetLanguage(bool, unsigned short)+0x2c>
 800478e:	7e15      	ldrb	r5, [r2, #24]
 8004790:	f894 20c4 	ldrb.w	r2, [r4, #196]	; 0xc4
 8004794:	4295      	cmp	r5, r2
 8004796:	d002      	beq.n	800479e <RDMHandler::SetLanguage(bool, unsigned short)+0x32>
 8004798:	2106      	movs	r1, #6
 800479a:	4618      	mov	r0, r3
 800479c:	e7ed      	b.n	800477a <RDMHandler::SetLanguage(bool, unsigned short)+0xe>
 800479e:	b921      	cbnz	r1, 80047aa <RDMHandler::SetLanguage(bool, unsigned short)+0x3e>
 80047a0:	6883      	ldr	r3, [r0, #8]
 80047a2:	75d9      	strb	r1, [r3, #23]
 80047a4:	bc70      	pop	{r4, r5, r6}
 80047a6:	f7ff bd53 	b.w	8004250 <RDMHandler::RespondMessageAck()>
 80047aa:	bc70      	pop	{r4, r5, r6}
 80047ac:	4770      	bx	lr
 80047ae:	bf00      	nop
 80047b0:	200005dc 	ldrdcs	r0, [r0], -ip

080047b4 <RDMHandler::GetBootSoftwareVersionId(unsigned short)>:
 80047b4:	6842      	ldr	r2, [r0, #4]
 80047b6:	7d92      	ldrb	r2, [r2, #22]
 80047b8:	b112      	cbz	r2, 80047c0 <RDMHandler::GetBootSoftwareVersionId(unsigned short)+0xc>
 80047ba:	2101      	movs	r1, #1
 80047bc:	f7ff bf70 	b.w	80046a0 <RDMHandler::RespondMessageNack(unsigned short)>
 80047c0:	6883      	ldr	r3, [r0, #8]
 80047c2:	2104      	movs	r1, #4
 80047c4:	75d9      	strb	r1, [r3, #23]
 80047c6:	761a      	strb	r2, [r3, #24]
 80047c8:	765a      	strb	r2, [r3, #25]
 80047ca:	769a      	strb	r2, [r3, #26]
 80047cc:	76da      	strb	r2, [r3, #27]
 80047ce:	f7ff bd3f 	b.w	8004250 <RDMHandler::RespondMessageAck()>
	...

080047d4 <RDMHandler::SetPersonality(bool, unsigned short)>:
 80047d4:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80047d6:	6843      	ldr	r3, [r0, #4]
 80047d8:	4611      	mov	r1, r2
 80047da:	7d9a      	ldrb	r2, [r3, #22]
 80047dc:	2a01      	cmp	r2, #1
 80047de:	4604      	mov	r4, r0
 80047e0:	d005      	beq.n	80047ee <RDMHandler::SetPersonality(bool, unsigned short)+0x1a>
 80047e2:	2101      	movs	r1, #1
 80047e4:	b002      	add	sp, #8
 80047e6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80047ea:	f7ff bf59 	b.w	80046a0 <RDMHandler::RespondMessageNack(unsigned short)>
 80047ee:	4e0d      	ldr	r6, [pc, #52]	; (8004824 <RDMHandler::SetPersonality(bool, unsigned short)+0x50>)
 80047f0:	7ddd      	ldrb	r5, [r3, #23]
 80047f2:	6830      	ldr	r0, [r6, #0]
 80047f4:	9101      	str	r1, [sp, #4]
 80047f6:	f7ff fc90 	bl	800411a <RDMDeviceResponder::GetPersonalityCount(unsigned short)>
 80047fa:	b115      	cbz	r5, 8004802 <RDMHandler::SetPersonality(bool, unsigned short)+0x2e>
 80047fc:	4285      	cmp	r5, r0
 80047fe:	9901      	ldr	r1, [sp, #4]
 8004800:	d902      	bls.n	8004808 <RDMHandler::SetPersonality(bool, unsigned short)+0x34>
 8004802:	2106      	movs	r1, #6
 8004804:	4620      	mov	r0, r4
 8004806:	e7ed      	b.n	80047e4 <RDMHandler::SetPersonality(bool, unsigned short)+0x10>
 8004808:	6830      	ldr	r0, [r6, #0]
 800480a:	462a      	mov	r2, r5
 800480c:	f7ff fc8c 	bl	8004128 <RDMDeviceResponder::SetPersonalityCurrent(unsigned short, unsigned char)>
 8004810:	68a3      	ldr	r3, [r4, #8]
 8004812:	2200      	movs	r2, #0
 8004814:	4620      	mov	r0, r4
 8004816:	75da      	strb	r2, [r3, #23]
 8004818:	b002      	add	sp, #8
 800481a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800481e:	f7ff bd17 	b.w	8004250 <RDMHandler::RespondMessageAck()>
 8004822:	bf00      	nop
 8004824:	200005dc 	ldrdcs	r0, [r0], -ip

08004828 <RDMHandler::GetPersonalityDescription(unsigned short)>:
 8004828:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800482c:	6843      	ldr	r3, [r0, #4]
 800482e:	f8df 9078 	ldr.w	r9, [pc, #120]	; 80048a8 <RDMHandler::GetPersonalityDescription(unsigned short)+0x80>
 8004832:	7dde      	ldrb	r6, [r3, #23]
 8004834:	4604      	mov	r4, r0
 8004836:	f8d9 0000 	ldr.w	r0, [r9]
 800483a:	460f      	mov	r7, r1
 800483c:	f7ff fc6d 	bl	800411a <RDMDeviceResponder::GetPersonalityCount(unsigned short)>
 8004840:	b10e      	cbz	r6, 8004846 <RDMHandler::GetPersonalityDescription(unsigned short)+0x1e>
 8004842:	4286      	cmp	r6, r0
 8004844:	d905      	bls.n	8004852 <RDMHandler::GetPersonalityDescription(unsigned short)+0x2a>
 8004846:	4620      	mov	r0, r4
 8004848:	2106      	movs	r1, #6
 800484a:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800484e:	f7ff bf27 	b.w	80046a0 <RDMHandler::RespondMessageNack(unsigned short)>
 8004852:	4632      	mov	r2, r6
 8004854:	4639      	mov	r1, r7
 8004856:	f8d9 0000 	ldr.w	r0, [r9]
 800485a:	f7ff fc52 	bl	8004102 <RDMDeviceResponder::GetPersonality(unsigned short, unsigned char)>
 800485e:	8803      	ldrh	r3, [r0, #0]
 8004860:	68a5      	ldr	r5, [r4, #8]
 8004862:	f8d9 0000 	ldr.w	r0, [r9]
 8004866:	76ab      	strb	r3, [r5, #26]
 8004868:	0a1a      	lsrs	r2, r3, #8
 800486a:	766a      	strb	r2, [r5, #25]
 800486c:	4639      	mov	r1, r7
 800486e:	762e      	strb	r6, [r5, #24]
 8004870:	4632      	mov	r2, r6
 8004872:	f7ff fc46 	bl	8004102 <RDMDeviceResponder::GetPersonality(unsigned short, unsigned char)>
 8004876:	f105 081b 	add.w	r8, r5, #27
 800487a:	1dc1      	adds	r1, r0, #7
 800487c:	2300      	movs	r3, #0
 800487e:	6a86      	ldr	r6, [r0, #40]	; 0x28
 8004880:	42b3      	cmp	r3, r6
 8004882:	b2da      	uxtb	r2, r3
 8004884:	d203      	bcs.n	800488e <RDMHandler::GetPersonalityDescription(unsigned short)+0x66>
 8004886:	3301      	adds	r3, #1
 8004888:	2b21      	cmp	r3, #33	; 0x21
 800488a:	d107      	bne.n	800489c <RDMHandler::GetPersonalityDescription(unsigned short)+0x74>
 800488c:	2220      	movs	r2, #32
 800488e:	3203      	adds	r2, #3
 8004890:	75ea      	strb	r2, [r5, #23]
 8004892:	4620      	mov	r0, r4
 8004894:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004898:	f7ff bcda 	b.w	8004250 <RDMHandler::RespondMessageAck()>
 800489c:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80048a0:	f808 2b01 	strb.w	r2, [r8], #1
 80048a4:	e7eb      	b.n	800487e <RDMHandler::GetPersonalityDescription(unsigned short)+0x56>
 80048a6:	bf00      	nop
 80048a8:	200005dc 	ldrdcs	r0, [r0], -ip

080048ac <RDMHandler::SetDmxStartAddress(bool, unsigned short)>:
 80048ac:	b538      	push	{r3, r4, r5, lr}
 80048ae:	6843      	ldr	r3, [r0, #4]
 80048b0:	460d      	mov	r5, r1
 80048b2:	4611      	mov	r1, r2
 80048b4:	7d9a      	ldrb	r2, [r3, #22]
 80048b6:	2a02      	cmp	r2, #2
 80048b8:	4604      	mov	r4, r0
 80048ba:	d004      	beq.n	80048c6 <RDMHandler::SetDmxStartAddress(bool, unsigned short)+0x1a>
 80048bc:	2101      	movs	r1, #1
 80048be:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80048c2:	f7ff beed 	b.w	80046a0 <RDMHandler::RespondMessageNack(unsigned short)>
 80048c6:	7dda      	ldrb	r2, [r3, #23]
 80048c8:	7e1b      	ldrb	r3, [r3, #24]
 80048ca:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 80048ce:	b29a      	uxth	r2, r3
 80048d0:	1e53      	subs	r3, r2, #1
 80048d2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80048d6:	d301      	bcc.n	80048dc <RDMHandler::SetDmxStartAddress(bool, unsigned short)+0x30>
 80048d8:	2106      	movs	r1, #6
 80048da:	e7f0      	b.n	80048be <RDMHandler::SetDmxStartAddress(bool, unsigned short)+0x12>
 80048dc:	4b06      	ldr	r3, [pc, #24]	; (80048f8 <RDMHandler::SetDmxStartAddress(bool, unsigned short)+0x4c>)
 80048de:	6818      	ldr	r0, [r3, #0]
 80048e0:	f7ff fbe5 	bl	80040ae <RDMDeviceResponder::SetDmxStartAddress(unsigned short, unsigned short)>
 80048e4:	b935      	cbnz	r5, 80048f4 <RDMHandler::SetDmxStartAddress(bool, unsigned short)+0x48>
 80048e6:	68a3      	ldr	r3, [r4, #8]
 80048e8:	75dd      	strb	r5, [r3, #23]
 80048ea:	4620      	mov	r0, r4
 80048ec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80048f0:	f7ff bcae 	b.w	8004250 <RDMHandler::RespondMessageAck()>
 80048f4:	bd38      	pop	{r3, r4, r5, pc}
 80048f6:	bf00      	nop
 80048f8:	200005dc 	ldrdcs	r0, [r0], -ip

080048fc <RDMHandler::GetSensorDefinition(unsigned short)>:
 80048fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80048fe:	6843      	ldr	r3, [r0, #4]
 8004900:	7dde      	ldrb	r6, [r3, #23]
 8004902:	2eff      	cmp	r6, #255	; 0xff
 8004904:	4605      	mov	r5, r0
 8004906:	d004      	beq.n	8004912 <RDMHandler::GetSensorDefinition(unsigned short)+0x16>
 8004908:	4b25      	ldr	r3, [pc, #148]	; (80049a0 <RDMHandler::GetSensorDefinition(unsigned short)+0xa4>)
 800490a:	6818      	ldr	r0, [r3, #0]
 800490c:	7903      	ldrb	r3, [r0, #4]
 800490e:	42b3      	cmp	r3, r6
 8004910:	d805      	bhi.n	800491e <RDMHandler::GetSensorDefinition(unsigned short)+0x22>
 8004912:	4628      	mov	r0, r5
 8004914:	2106      	movs	r1, #6
 8004916:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800491a:	f7ff bec1 	b.w	80046a0 <RDMHandler::RespondMessageNack(unsigned short)>
 800491e:	4631      	mov	r1, r6
 8004920:	68ac      	ldr	r4, [r5, #8]
 8004922:	f7fd fc21 	bl	8002168 <RDMSensors::GetDefintion(unsigned char)>
 8004926:	7802      	ldrb	r2, [r0, #0]
 8004928:	42b2      	cmp	r2, r6
 800492a:	4603      	mov	r3, r0
 800492c:	d1f1      	bne.n	8004912 <RDMHandler::GetSensorDefinition(unsigned short)+0x16>
 800492e:	7622      	strb	r2, [r4, #24]
 8004930:	7842      	ldrb	r2, [r0, #1]
 8004932:	7662      	strb	r2, [r4, #25]
 8004934:	7882      	ldrb	r2, [r0, #2]
 8004936:	76a2      	strb	r2, [r4, #26]
 8004938:	78c2      	ldrb	r2, [r0, #3]
 800493a:	76e2      	strb	r2, [r4, #27]
 800493c:	f990 2005 	ldrsb.w	r2, [r0, #5]
 8004940:	7722      	strb	r2, [r4, #28]
 8004942:	8882      	ldrh	r2, [r0, #4]
 8004944:	7762      	strb	r2, [r4, #29]
 8004946:	f990 2007 	ldrsb.w	r2, [r0, #7]
 800494a:	77a2      	strb	r2, [r4, #30]
 800494c:	88c2      	ldrh	r2, [r0, #6]
 800494e:	77e2      	strb	r2, [r4, #31]
 8004950:	f990 2009 	ldrsb.w	r2, [r0, #9]
 8004954:	f884 2020 	strb.w	r2, [r4, #32]
 8004958:	8902      	ldrh	r2, [r0, #8]
 800495a:	f884 2021 	strb.w	r2, [r4, #33]	; 0x21
 800495e:	f990 200b 	ldrsb.w	r2, [r0, #11]
 8004962:	f884 2022 	strb.w	r2, [r4, #34]	; 0x22
 8004966:	8942      	ldrh	r2, [r0, #10]
 8004968:	f884 2023 	strb.w	r2, [r4, #35]	; 0x23
 800496c:	4621      	mov	r1, r4
 800496e:	f890 202d 	ldrb.w	r2, [r0, #45]	; 0x2d
 8004972:	f801 2f24 	strb.w	r2, [r1, #36]!
 8004976:	300b      	adds	r0, #11
 8004978:	220d      	movs	r2, #13
 800497a:	f893 702c 	ldrb.w	r7, [r3, #44]	; 0x2c
 800497e:	f1a2 060d 	sub.w	r6, r2, #13
 8004982:	42b7      	cmp	r7, r6
 8004984:	dc05      	bgt.n	8004992 <RDMHandler::GetSensorDefinition(unsigned short)+0x96>
 8004986:	75e2      	strb	r2, [r4, #23]
 8004988:	4628      	mov	r0, r5
 800498a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800498e:	f7ff bc5f 	b.w	8004250 <RDMHandler::RespondMessageAck()>
 8004992:	f810 6f01 	ldrb.w	r6, [r0, #1]!
 8004996:	f801 6f01 	strb.w	r6, [r1, #1]!
 800499a:	3201      	adds	r2, #1
 800499c:	e7ed      	b.n	800497a <RDMHandler::GetSensorDefinition(unsigned short)+0x7e>
 800499e:	bf00      	nop
 80049a0:	20000194 	mulcs	r0, r4, r1

080049a4 <RDMHandler::GetSensorValue(unsigned short)>:
 80049a4:	b570      	push	{r4, r5, r6, lr}
 80049a6:	6843      	ldr	r3, [r0, #4]
 80049a8:	7d9a      	ldrb	r2, [r3, #22]
 80049aa:	2a01      	cmp	r2, #1
 80049ac:	4605      	mov	r5, r0
 80049ae:	d004      	beq.n	80049ba <RDMHandler::GetSensorValue(unsigned short)+0x16>
 80049b0:	2101      	movs	r1, #1
 80049b2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80049b6:	f7ff be73 	b.w	80046a0 <RDMHandler::RespondMessageNack(unsigned short)>
 80049ba:	7dde      	ldrb	r6, [r3, #23]
 80049bc:	2eff      	cmp	r6, #255	; 0xff
 80049be:	d004      	beq.n	80049ca <RDMHandler::GetSensorValue(unsigned short)+0x26>
 80049c0:	4b17      	ldr	r3, [pc, #92]	; (8004a20 <RDMHandler::GetSensorValue(unsigned short)+0x7c>)
 80049c2:	6818      	ldr	r0, [r3, #0]
 80049c4:	7903      	ldrb	r3, [r0, #4]
 80049c6:	42b3      	cmp	r3, r6
 80049c8:	d802      	bhi.n	80049d0 <RDMHandler::GetSensorValue(unsigned short)+0x2c>
 80049ca:	2106      	movs	r1, #6
 80049cc:	4628      	mov	r0, r5
 80049ce:	e7f0      	b.n	80049b2 <RDMHandler::GetSensorValue(unsigned short)+0xe>
 80049d0:	4631      	mov	r1, r6
 80049d2:	68ac      	ldr	r4, [r5, #8]
 80049d4:	f7fd fbcd 	bl	8002172 <RDMSensors::GetValues(unsigned char)>
 80049d8:	7a03      	ldrb	r3, [r0, #8]
 80049da:	42b3      	cmp	r3, r6
 80049dc:	d1f5      	bne.n	80049ca <RDMHandler::GetSensorValue(unsigned short)+0x26>
 80049de:	2309      	movs	r3, #9
 80049e0:	75e3      	strb	r3, [r4, #23]
 80049e2:	2321      	movs	r3, #33	; 0x21
 80049e4:	70a3      	strb	r3, [r4, #2]
 80049e6:	7a03      	ldrb	r3, [r0, #8]
 80049e8:	7623      	strb	r3, [r4, #24]
 80049ea:	f990 3001 	ldrsb.w	r3, [r0, #1]
 80049ee:	7663      	strb	r3, [r4, #25]
 80049f0:	8803      	ldrh	r3, [r0, #0]
 80049f2:	76a3      	strb	r3, [r4, #26]
 80049f4:	f990 3003 	ldrsb.w	r3, [r0, #3]
 80049f8:	76e3      	strb	r3, [r4, #27]
 80049fa:	8843      	ldrh	r3, [r0, #2]
 80049fc:	7723      	strb	r3, [r4, #28]
 80049fe:	f990 3005 	ldrsb.w	r3, [r0, #5]
 8004a02:	7763      	strb	r3, [r4, #29]
 8004a04:	8883      	ldrh	r3, [r0, #4]
 8004a06:	77a3      	strb	r3, [r4, #30]
 8004a08:	f990 3007 	ldrsb.w	r3, [r0, #7]
 8004a0c:	77e3      	strb	r3, [r4, #31]
 8004a0e:	88c3      	ldrh	r3, [r0, #6]
 8004a10:	f884 3020 	strb.w	r3, [r4, #32]
 8004a14:	4628      	mov	r0, r5
 8004a16:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8004a1a:	f7ff bc19 	b.w	8004250 <RDMHandler::RespondMessageAck()>
 8004a1e:	bf00      	nop
 8004a20:	20000194 	mulcs	r0, r4, r1

08004a24 <RDMHandler::SetSensorValue(bool, unsigned short)>:
 8004a24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004a28:	6843      	ldr	r3, [r0, #4]
 8004a2a:	7d9a      	ldrb	r2, [r3, #22]
 8004a2c:	2a01      	cmp	r2, #1
 8004a2e:	4606      	mov	r6, r0
 8004a30:	460d      	mov	r5, r1
 8004a32:	d004      	beq.n	8004a3e <RDMHandler::SetSensorValue(bool, unsigned short)+0x1a>
 8004a34:	2101      	movs	r1, #1
 8004a36:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004a3a:	f7ff be31 	b.w	80046a0 <RDMHandler::RespondMessageNack(unsigned short)>
 8004a3e:	7ddf      	ldrb	r7, [r3, #23]
 8004a40:	f8df 8090 	ldr.w	r8, [pc, #144]	; 8004ad4 <RDMHandler::SetSensorValue(bool, unsigned short)+0xb0>
 8004a44:	2fff      	cmp	r7, #255	; 0xff
 8004a46:	f8d8 3000 	ldr.w	r3, [r8]
 8004a4a:	d004      	beq.n	8004a56 <RDMHandler::SetSensorValue(bool, unsigned short)+0x32>
 8004a4c:	791a      	ldrb	r2, [r3, #4]
 8004a4e:	42ba      	cmp	r2, r7
 8004a50:	d801      	bhi.n	8004a56 <RDMHandler::SetSensorValue(bool, unsigned short)+0x32>
 8004a52:	2106      	movs	r1, #6
 8004a54:	e7ef      	b.n	8004a36 <RDMHandler::SetSensorValue(bool, unsigned short)+0x12>
 8004a56:	4639      	mov	r1, r7
 8004a58:	4618      	mov	r0, r3
 8004a5a:	f7fd fb8f 	bl	800217c <RDMSensors::SetValues(unsigned char)>
 8004a5e:	bbb5      	cbnz	r5, 8004ace <RDMHandler::SetSensorValue(bool, unsigned short)+0xaa>
 8004a60:	2fff      	cmp	r7, #255	; 0xff
 8004a62:	68b4      	ldr	r4, [r6, #8]
 8004a64:	d112      	bne.n	8004a8c <RDMHandler::SetSensorValue(bool, unsigned short)+0x68>
 8004a66:	2309      	movs	r3, #9
 8004a68:	75e3      	strb	r3, [r4, #23]
 8004a6a:	2321      	movs	r3, #33	; 0x21
 8004a6c:	70a3      	strb	r3, [r4, #2]
 8004a6e:	7625      	strb	r5, [r4, #24]
 8004a70:	7665      	strb	r5, [r4, #25]
 8004a72:	76a5      	strb	r5, [r4, #26]
 8004a74:	76e5      	strb	r5, [r4, #27]
 8004a76:	7725      	strb	r5, [r4, #28]
 8004a78:	7765      	strb	r5, [r4, #29]
 8004a7a:	77a5      	strb	r5, [r4, #30]
 8004a7c:	77e5      	strb	r5, [r4, #31]
 8004a7e:	f884 5020 	strb.w	r5, [r4, #32]
 8004a82:	4630      	mov	r0, r6
 8004a84:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004a88:	f7ff bbe2 	b.w	8004250 <RDMHandler::RespondMessageAck()>
 8004a8c:	f8d8 0000 	ldr.w	r0, [r8]
 8004a90:	4639      	mov	r1, r7
 8004a92:	f7fd fb6e 	bl	8002172 <RDMSensors::GetValues(unsigned char)>
 8004a96:	2309      	movs	r3, #9
 8004a98:	75e3      	strb	r3, [r4, #23]
 8004a9a:	2321      	movs	r3, #33	; 0x21
 8004a9c:	70a3      	strb	r3, [r4, #2]
 8004a9e:	7a03      	ldrb	r3, [r0, #8]
 8004aa0:	7623      	strb	r3, [r4, #24]
 8004aa2:	f990 3001 	ldrsb.w	r3, [r0, #1]
 8004aa6:	7663      	strb	r3, [r4, #25]
 8004aa8:	8803      	ldrh	r3, [r0, #0]
 8004aaa:	76a3      	strb	r3, [r4, #26]
 8004aac:	f990 3003 	ldrsb.w	r3, [r0, #3]
 8004ab0:	76e3      	strb	r3, [r4, #27]
 8004ab2:	8843      	ldrh	r3, [r0, #2]
 8004ab4:	7723      	strb	r3, [r4, #28]
 8004ab6:	f990 3005 	ldrsb.w	r3, [r0, #5]
 8004aba:	7763      	strb	r3, [r4, #29]
 8004abc:	8883      	ldrh	r3, [r0, #4]
 8004abe:	77a3      	strb	r3, [r4, #30]
 8004ac0:	f990 3007 	ldrsb.w	r3, [r0, #7]
 8004ac4:	77e3      	strb	r3, [r4, #31]
 8004ac6:	88c3      	ldrh	r3, [r0, #6]
 8004ac8:	f884 3020 	strb.w	r3, [r4, #32]
 8004acc:	e7d9      	b.n	8004a82 <RDMHandler::SetSensorValue(bool, unsigned short)+0x5e>
 8004ace:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004ad2:	bf00      	nop
 8004ad4:	20000194 	mulcs	r0, r4, r1

08004ad8 <RDMHandler::SetRecordSensors(bool, unsigned short)>:
 8004ad8:	b538      	push	{r3, r4, r5, lr}
 8004ada:	6843      	ldr	r3, [r0, #4]
 8004adc:	7d9a      	ldrb	r2, [r3, #22]
 8004ade:	2a01      	cmp	r2, #1
 8004ae0:	4604      	mov	r4, r0
 8004ae2:	460d      	mov	r5, r1
 8004ae4:	d004      	beq.n	8004af0 <RDMHandler::SetRecordSensors(bool, unsigned short)+0x18>
 8004ae6:	2101      	movs	r1, #1
 8004ae8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004aec:	f7ff bdd8 	b.w	80046a0 <RDMHandler::RespondMessageNack(unsigned short)>
 8004af0:	7dd9      	ldrb	r1, [r3, #23]
 8004af2:	4b0b      	ldr	r3, [pc, #44]	; (8004b20 <RDMHandler::SetRecordSensors(bool, unsigned short)+0x48>)
 8004af4:	6818      	ldr	r0, [r3, #0]
 8004af6:	29ff      	cmp	r1, #255	; 0xff
 8004af8:	7903      	ldrb	r3, [r0, #4]
 8004afa:	d103      	bne.n	8004b04 <RDMHandler::SetRecordSensors(bool, unsigned short)+0x2c>
 8004afc:	b923      	cbnz	r3, 8004b08 <RDMHandler::SetRecordSensors(bool, unsigned short)+0x30>
 8004afe:	2106      	movs	r1, #6
 8004b00:	4620      	mov	r0, r4
 8004b02:	e7f1      	b.n	8004ae8 <RDMHandler::SetRecordSensors(bool, unsigned short)+0x10>
 8004b04:	4299      	cmp	r1, r3
 8004b06:	d2fa      	bcs.n	8004afe <RDMHandler::SetRecordSensors(bool, unsigned short)+0x26>
 8004b08:	f7fd fb4f 	bl	80021aa <RDMSensors::SetRecord(unsigned char)>
 8004b0c:	b935      	cbnz	r5, 8004b1c <RDMHandler::SetRecordSensors(bool, unsigned short)+0x44>
 8004b0e:	68a3      	ldr	r3, [r4, #8]
 8004b10:	75dd      	strb	r5, [r3, #23]
 8004b12:	4620      	mov	r0, r4
 8004b14:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004b18:	f7ff bb9a 	b.w	8004250 <RDMHandler::RespondMessageAck()>
 8004b1c:	bd38      	pop	{r3, r4, r5, pc}
 8004b1e:	bf00      	nop
 8004b20:	20000194 	mulcs	r0, r4, r1

08004b24 <RDMHandler::SetDeviceHours(bool, unsigned short)>:
 8004b24:	2104      	movs	r1, #4
 8004b26:	f7ff bdbb 	b.w	80046a0 <RDMHandler::RespondMessageNack(unsigned short)>
	...

08004b2c <RDMHandler::SetDisplayInvert(bool, unsigned short)>:
 8004b2c:	b538      	push	{r3, r4, r5, lr}
 8004b2e:	6843      	ldr	r3, [r0, #4]
 8004b30:	7d9a      	ldrb	r2, [r3, #22]
 8004b32:	2a01      	cmp	r2, #1
 8004b34:	4604      	mov	r4, r0
 8004b36:	d004      	beq.n	8004b42 <RDMHandler::SetDisplayInvert(bool, unsigned short)+0x16>
 8004b38:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004b3c:	2101      	movs	r1, #1
 8004b3e:	f7ff bdaf 	b.w	80046a0 <RDMHandler::RespondMessageNack(unsigned short)>
 8004b42:	7ddd      	ldrb	r5, [r3, #23]
 8004b44:	2d02      	cmp	r5, #2
 8004b46:	d102      	bne.n	8004b4e <RDMHandler::SetDisplayInvert(bool, unsigned short)+0x22>
 8004b48:	2106      	movs	r1, #6
 8004b4a:	f7ff fda9 	bl	80046a0 <RDMHandler::RespondMessageNack(unsigned short)>
 8004b4e:	1e6b      	subs	r3, r5, #1
 8004b50:	4259      	negs	r1, r3
 8004b52:	4159      	adcs	r1, r3
 8004b54:	4b07      	ldr	r3, [pc, #28]	; (8004b74 <RDMHandler::SetDisplayInvert(bool, unsigned short)+0x48>)
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	6998      	ldr	r0, [r3, #24]
 8004b5a:	b110      	cbz	r0, 8004b62 <RDMHandler::SetDisplayInvert(bool, unsigned short)+0x36>
 8004b5c:	6803      	ldr	r3, [r0, #0]
 8004b5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b60:	4798      	blx	r3
 8004b62:	68a3      	ldr	r3, [r4, #8]
 8004b64:	2200      	movs	r2, #0
 8004b66:	75da      	strb	r2, [r3, #23]
 8004b68:	4620      	mov	r0, r4
 8004b6a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004b6e:	f7ff bb6f 	b.w	8004250 <RDMHandler::RespondMessageAck()>
 8004b72:	bf00      	nop
 8004b74:	20001684 	andcs	r1, r0, r4, lsl #13

08004b78 <RDMHandler::SetDisplayLevel(bool, unsigned short)>:
 8004b78:	b570      	push	{r4, r5, r6, lr}
 8004b7a:	6843      	ldr	r3, [r0, #4]
 8004b7c:	7d99      	ldrb	r1, [r3, #22]
 8004b7e:	2901      	cmp	r1, #1
 8004b80:	4604      	mov	r4, r0
 8004b82:	d004      	beq.n	8004b8e <RDMHandler::SetDisplayLevel(bool, unsigned short)+0x16>
 8004b84:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8004b88:	2101      	movs	r1, #1
 8004b8a:	f7ff bd89 	b.w	80046a0 <RDMHandler::RespondMessageNack(unsigned short)>
 8004b8e:	4e0b      	ldr	r6, [pc, #44]	; (8004bbc <RDMHandler::SetDisplayLevel(bool, unsigned short)+0x44>)
 8004b90:	7ddd      	ldrb	r5, [r3, #23]
 8004b92:	6830      	ldr	r0, [r6, #0]
 8004b94:	b105      	cbz	r5, 8004b98 <RDMHandler::SetDisplayLevel(bool, unsigned short)+0x20>
 8004b96:	2100      	movs	r1, #0
 8004b98:	f7fb ffe6 	bl	8000b68 <Display::SetSleep(bool)>
 8004b9c:	6833      	ldr	r3, [r6, #0]
 8004b9e:	6998      	ldr	r0, [r3, #24]
 8004ba0:	b118      	cbz	r0, 8004baa <RDMHandler::SetDisplayLevel(bool, unsigned short)+0x32>
 8004ba2:	6803      	ldr	r3, [r0, #0]
 8004ba4:	4629      	mov	r1, r5
 8004ba6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ba8:	4798      	blx	r3
 8004baa:	68a3      	ldr	r3, [r4, #8]
 8004bac:	2200      	movs	r2, #0
 8004bae:	75da      	strb	r2, [r3, #23]
 8004bb0:	4620      	mov	r0, r4
 8004bb2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8004bb6:	f7ff bb4b 	b.w	8004250 <RDMHandler::RespondMessageAck()>
 8004bba:	bf00      	nop
 8004bbc:	20001684 	andcs	r1, r0, r4, lsl #13

08004bc0 <RDMHandler::SetRealTimeClock(bool, unsigned short)>:
 8004bc0:	b510      	push	{r4, lr}
 8004bc2:	6843      	ldr	r3, [r0, #4]
 8004bc4:	7d9a      	ldrb	r2, [r3, #22]
 8004bc6:	2a07      	cmp	r2, #7
 8004bc8:	b08a      	sub	sp, #40	; 0x28
 8004bca:	4604      	mov	r4, r0
 8004bcc:	d005      	beq.n	8004bda <RDMHandler::SetRealTimeClock(bool, unsigned short)+0x1a>
 8004bce:	2101      	movs	r1, #1
 8004bd0:	b00a      	add	sp, #40	; 0x28
 8004bd2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004bd6:	f7ff bd63 	b.w	80046a0 <RDMHandler::RespondMessageNack(unsigned short)>
 8004bda:	7dd8      	ldrb	r0, [r3, #23]
 8004bdc:	7e1a      	ldrb	r2, [r3, #24]
 8004bde:	eb02 2200 	add.w	r2, r2, r0, lsl #8
 8004be2:	f2a2 726c 	subw	r2, r2, #1900	; 0x76c
 8004be6:	9206      	str	r2, [sp, #24]
 8004be8:	7e5a      	ldrb	r2, [r3, #25]
 8004bea:	3a01      	subs	r2, #1
 8004bec:	9205      	str	r2, [sp, #20]
 8004bee:	7e9a      	ldrb	r2, [r3, #26]
 8004bf0:	9204      	str	r2, [sp, #16]
 8004bf2:	7eda      	ldrb	r2, [r3, #27]
 8004bf4:	9203      	str	r2, [sp, #12]
 8004bf6:	7f1a      	ldrb	r2, [r3, #28]
 8004bf8:	7f5b      	ldrb	r3, [r3, #29]
 8004bfa:	9202      	str	r2, [sp, #8]
 8004bfc:	9301      	str	r3, [sp, #4]
 8004bfe:	b979      	cbnz	r1, 8004c20 <RDMHandler::SetRealTimeClock(bool, unsigned short)+0x60>
 8004c00:	4b08      	ldr	r3, [pc, #32]	; (8004c24 <RDMHandler::SetRealTimeClock(bool, unsigned short)+0x64>)
 8004c02:	a901      	add	r1, sp, #4
 8004c04:	6818      	ldr	r0, [r3, #0]
 8004c06:	f003 fa07 	bl	8008018 <Hardware::SetTime(tm const*)>
 8004c0a:	b918      	cbnz	r0, 8004c14 <RDMHandler::SetRealTimeClock(bool, unsigned short)+0x54>
 8004c0c:	2104      	movs	r1, #4
 8004c0e:	4620      	mov	r0, r4
 8004c10:	f7ff fd46 	bl	80046a0 <RDMHandler::RespondMessageNack(unsigned short)>
 8004c14:	68a3      	ldr	r3, [r4, #8]
 8004c16:	2200      	movs	r2, #0
 8004c18:	75da      	strb	r2, [r3, #23]
 8004c1a:	4620      	mov	r0, r4
 8004c1c:	f7ff fb18 	bl	8004250 <RDMHandler::RespondMessageAck()>
 8004c20:	b00a      	add	sp, #40	; 0x28
 8004c22:	bd10      	pop	{r4, pc}
 8004c24:	20001770 	andcs	r1, r0, r0, ror r7

08004c28 <RDMHandler::SetPowerState(bool, unsigned short)>:
 8004c28:	6842      	ldr	r2, [r0, #4]
 8004c2a:	7d91      	ldrb	r1, [r2, #22]
 8004c2c:	2901      	cmp	r1, #1
 8004c2e:	d002      	beq.n	8004c36 <RDMHandler::SetPowerState(bool, unsigned short)+0xe>
 8004c30:	2101      	movs	r1, #1
 8004c32:	f7ff bd35 	b.w	80046a0 <RDMHandler::RespondMessageNack(unsigned short)>
 8004c36:	7dd1      	ldrb	r1, [r2, #23]
 8004c38:	1eca      	subs	r2, r1, #3
 8004c3a:	b2d2      	uxtb	r2, r2
 8004c3c:	2afb      	cmp	r2, #251	; 0xfb
 8004c3e:	d801      	bhi.n	8004c44 <RDMHandler::SetPowerState(bool, unsigned short)+0x1c>
 8004c40:	2106      	movs	r1, #6
 8004c42:	e7f6      	b.n	8004c32 <RDMHandler::SetPowerState(bool, unsigned short)+0xa>
 8004c44:	29ff      	cmp	r1, #255	; 0xff
 8004c46:	6883      	ldr	r3, [r0, #8]
 8004c48:	d103      	bne.n	8004c52 <RDMHandler::SetPowerState(bool, unsigned short)+0x2a>
 8004c4a:	2200      	movs	r2, #0
 8004c4c:	75da      	strb	r2, [r3, #23]
 8004c4e:	f7ff baff 	b.w	8004250 <RDMHandler::RespondMessageAck()>
 8004c52:	2104      	movs	r1, #4
 8004c54:	e7ed      	b.n	8004c32 <RDMHandler::SetPowerState(bool, unsigned short)+0xa>

08004c56 <RDMHandler::SetPerformSelfTest(bool, unsigned short)>:
 8004c56:	b510      	push	{r4, lr}
 8004c58:	6843      	ldr	r3, [r0, #4]
 8004c5a:	7d9a      	ldrb	r2, [r3, #22]
 8004c5c:	2a01      	cmp	r2, #1
 8004c5e:	4604      	mov	r4, r0
 8004c60:	d004      	beq.n	8004c6c <RDMHandler::SetPerformSelfTest(bool, unsigned short)+0x16>
 8004c62:	2101      	movs	r1, #1
 8004c64:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004c68:	f7ff bd1a 	b.w	80046a0 <RDMHandler::RespondMessageNack(unsigned short)>
 8004c6c:	7dd8      	ldrb	r0, [r3, #23]
 8004c6e:	f7fc fbe3 	bl	8001438 <rdm::selftest::Set(unsigned char)>
 8004c72:	b910      	cbnz	r0, 8004c7a <RDMHandler::SetPerformSelfTest(bool, unsigned short)+0x24>
 8004c74:	2106      	movs	r1, #6
 8004c76:	4620      	mov	r0, r4
 8004c78:	e7f4      	b.n	8004c64 <RDMHandler::SetPerformSelfTest(bool, unsigned short)+0xe>
 8004c7a:	68a3      	ldr	r3, [r4, #8]
 8004c7c:	2200      	movs	r2, #0
 8004c7e:	75da      	strb	r2, [r3, #23]
 8004c80:	4620      	mov	r0, r4
 8004c82:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004c86:	f7ff bae3 	b.w	8004250 <RDMHandler::RespondMessageAck()>

08004c8a <RDMHandler::GetSelfTestDescription(unsigned short)>:
 8004c8a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004c8c:	6845      	ldr	r5, [r0, #4]
 8004c8e:	4604      	mov	r4, r0
 8004c90:	a901      	add	r1, sp, #4
 8004c92:	7de8      	ldrb	r0, [r5, #23]
 8004c94:	f7fc fc04 	bl	80014a0 <rdm::selftest::GetDescription(unsigned char, unsigned int&)>
 8004c98:	4603      	mov	r3, r0
 8004c9a:	b928      	cbnz	r0, 8004ca8 <RDMHandler::GetSelfTestDescription(unsigned short)+0x1e>
 8004c9c:	2106      	movs	r1, #6
 8004c9e:	4620      	mov	r0, r4
 8004ca0:	f7ff fcfe 	bl	80046a0 <RDMHandler::RespondMessageNack(unsigned short)>
 8004ca4:	b003      	add	sp, #12
 8004ca6:	bd30      	pop	{r4, r5, pc}
 8004ca8:	9a01      	ldr	r2, [sp, #4]
 8004caa:	2a20      	cmp	r2, #32
 8004cac:	bf84      	itt	hi
 8004cae:	2220      	movhi	r2, #32
 8004cb0:	9201      	strhi	r2, [sp, #4]
 8004cb2:	9901      	ldr	r1, [sp, #4]
 8004cb4:	68a2      	ldr	r2, [r4, #8]
 8004cb6:	1c48      	adds	r0, r1, #1
 8004cb8:	75d0      	strb	r0, [r2, #23]
 8004cba:	7de8      	ldrb	r0, [r5, #23]
 8004cbc:	f802 0f18 	strb.w	r0, [r2, #24]!
 8004cc0:	4419      	add	r1, r3
 8004cc2:	428b      	cmp	r3, r1
 8004cc4:	d103      	bne.n	8004cce <RDMHandler::GetSelfTestDescription(unsigned short)+0x44>
 8004cc6:	4620      	mov	r0, r4
 8004cc8:	f7ff fac2 	bl	8004250 <RDMHandler::RespondMessageAck()>
 8004ccc:	e7ea      	b.n	8004ca4 <RDMHandler::GetSelfTestDescription(unsigned short)+0x1a>
 8004cce:	f813 0b01 	ldrb.w	r0, [r3], #1
 8004cd2:	f802 0f01 	strb.w	r0, [r2, #1]!
 8004cd6:	e7f4      	b.n	8004cc2 <RDMHandler::GetSelfTestDescription(unsigned short)+0x38>

08004cd8 <RDMHandler::GetSlotDescription(unsigned short)>:
 8004cd8:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004cda:	4a1c      	ldr	r2, [pc, #112]	; (8004d4c <RDMHandler::GetSlotDescription(unsigned short)+0x74>)
 8004cdc:	6846      	ldr	r6, [r0, #4]
 8004cde:	4604      	mov	r4, r0
 8004ce0:	7df3      	ldrb	r3, [r6, #23]
 8004ce2:	7e35      	ldrb	r5, [r6, #24]
 8004ce4:	6810      	ldr	r0, [r2, #0]
 8004ce6:	b939      	cbnz	r1, 8004cf8 <RDMHandler::GetSlotDescription(unsigned short)+0x20>
 8004ce8:	eb05 2503 	add.w	r5, r5, r3, lsl #8
 8004cec:	b2ad      	uxth	r5, r5
 8004cee:	466a      	mov	r2, sp
 8004cf0:	4629      	mov	r1, r5
 8004cf2:	f7ff f9a3 	bl	800403c <RDMDeviceResponder::GetSlotInfo(unsigned short, unsigned short, lightset::SlotInfo&) [clone .part.0]>
 8004cf6:	b928      	cbnz	r0, 8004d04 <RDMHandler::GetSlotDescription(unsigned short)+0x2c>
 8004cf8:	2106      	movs	r1, #6
 8004cfa:	4620      	mov	r0, r4
 8004cfc:	f7ff fcd0 	bl	80046a0 <RDMHandler::RespondMessageNack(unsigned short)>
 8004d00:	b002      	add	sp, #8
 8004d02:	bd70      	pop	{r4, r5, r6, pc}
 8004d04:	f8bd 1000 	ldrh.w	r1, [sp]
 8004d08:	aa01      	add	r2, sp, #4
 8004d0a:	4628      	mov	r0, r5
 8004d0c:	f000 fa3e 	bl	800518c <RDMSlotInfo::GetCategoryText(unsigned short, unsigned short, unsigned int&)>
 8004d10:	4603      	mov	r3, r0
 8004d12:	2800      	cmp	r0, #0
 8004d14:	d0f0      	beq.n	8004cf8 <RDMHandler::GetSlotDescription(unsigned short)+0x20>
 8004d16:	9a01      	ldr	r2, [sp, #4]
 8004d18:	2a20      	cmp	r2, #32
 8004d1a:	bf84      	itt	hi
 8004d1c:	2220      	movhi	r2, #32
 8004d1e:	9201      	strhi	r2, [sp, #4]
 8004d20:	9901      	ldr	r1, [sp, #4]
 8004d22:	68a2      	ldr	r2, [r4, #8]
 8004d24:	1c88      	adds	r0, r1, #2
 8004d26:	75d0      	strb	r0, [r2, #23]
 8004d28:	7df0      	ldrb	r0, [r6, #23]
 8004d2a:	7610      	strb	r0, [r2, #24]
 8004d2c:	7e30      	ldrb	r0, [r6, #24]
 8004d2e:	f802 0f19 	strb.w	r0, [r2, #25]!
 8004d32:	4419      	add	r1, r3
 8004d34:	428b      	cmp	r3, r1
 8004d36:	d103      	bne.n	8004d40 <RDMHandler::GetSlotDescription(unsigned short)+0x68>
 8004d38:	4620      	mov	r0, r4
 8004d3a:	f7ff fa89 	bl	8004250 <RDMHandler::RespondMessageAck()>
 8004d3e:	e7df      	b.n	8004d00 <RDMHandler::GetSlotDescription(unsigned short)+0x28>
 8004d40:	f813 0b01 	ldrb.w	r0, [r3], #1
 8004d44:	f802 0f01 	strb.w	r0, [r2, #1]!
 8004d48:	e7f4      	b.n	8004d34 <RDMHandler::GetSlotDescription(unsigned short)+0x5c>
 8004d4a:	bf00      	nop
 8004d4c:	200005dc 	ldrdcs	r0, [r0], -ip

08004d50 <RDMHandler::SetFactoryDefaults(bool, unsigned short)>:
 8004d50:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004d52:	6843      	ldr	r3, [r0, #4]
 8004d54:	7d9b      	ldrb	r3, [r3, #22]
 8004d56:	4605      	mov	r5, r0
 8004d58:	460e      	mov	r6, r1
 8004d5a:	b12b      	cbz	r3, 8004d68 <RDMHandler::SetFactoryDefaults(bool, unsigned short)+0x18>
 8004d5c:	2101      	movs	r1, #1
 8004d5e:	b003      	add	sp, #12
 8004d60:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8004d64:	f7ff bc9c 	b.w	80046a0 <RDMHandler::RespondMessageNack(unsigned short)>
 8004d68:	4b26      	ldr	r3, [pc, #152]	; (8004e04 <RDMHandler::SetFactoryDefaults(bool, unsigned short)+0xb4>)
 8004d6a:	681c      	ldr	r4, [r3, #0]
 8004d6c:	f104 0356 	add.w	r3, r4, #86	; 0x56
 8004d70:	9300      	str	r3, [sp, #0]
 8004d72:	1d20      	adds	r0, r4, #4
 8004d74:	f894 3076 	ldrb.w	r3, [r4, #118]	; 0x76
 8004d78:	f88d 3004 	strb.w	r3, [sp, #4]
 8004d7c:	4669      	mov	r1, sp
 8004d7e:	f7ff f974 	bl	800406a <RDMDevice::SetLabel(TRDMDeviceInfoData const*)>
 8004d82:	f06f 070d 	mvn.w	r7, #13
 8004d86:	f894 3076 	ldrb.w	r3, [r4, #118]	; 0x76
 8004d8a:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
 8004d8e:	f104 020e 	add.w	r2, r4, #14
 8004d92:	1b3f      	subs	r7, r7, r4
 8004d94:	18b9      	adds	r1, r7, r2
 8004d96:	4288      	cmp	r0, r1
 8004d98:	d82c      	bhi.n	8004df4 <RDMHandler::SetFactoryDefaults(bool, unsigned short)+0xa4>
 8004d9a:	f8a4 3078 	strh.w	r3, [r4, #120]	; 0x78
 8004d9e:	2201      	movs	r2, #1
 8004da0:	2100      	movs	r1, #0
 8004da2:	4620      	mov	r0, r4
 8004da4:	f7ff f9c0 	bl	8004128 <RDMDeviceResponder::SetPersonalityCurrent(unsigned short, unsigned char)>
 8004da8:	f8b4 20c8 	ldrh.w	r2, [r4, #200]	; 0xc8
 8004dac:	2100      	movs	r1, #0
 8004dae:	4620      	mov	r0, r4
 8004db0:	f7ff f97d 	bl	80040ae <RDMDeviceResponder::SetDmxStartAddress(unsigned short, unsigned short)>
 8004db4:	2213      	movs	r2, #19
 8004db6:	f104 019d 	add.w	r1, r4, #157	; 0x9d
 8004dba:	f104 00b0 	add.w	r0, r4, #176	; 0xb0
 8004dbe:	f7ff f94a 	bl	8004056 <memcpy.isra.0>
 8004dc2:	f104 008c 	add.w	r0, r4, #140	; 0x8c
 8004dc6:	f7fe fa6d 	bl	80032a4 <RDMSubDevices::SetFactoryDefaults()>
 8004dca:	f894 30ac 	ldrb.w	r3, [r4, #172]	; 0xac
 8004dce:	f894 20a9 	ldrb.w	r2, [r4, #169]	; 0xa9
 8004dd2:	4413      	add	r3, r2
 8004dd4:	f8a4 30c6 	strh.w	r3, [r4, #198]	; 0xc6
 8004dd8:	2301      	movs	r3, #1
 8004dda:	f884 30c5 	strb.w	r3, [r4, #197]	; 0xc5
 8004dde:	f7fc fa3d 	bl	800125c <rdm::device::responder::factorydefaults()>
 8004de2:	b966      	cbnz	r6, 8004dfe <RDMHandler::SetFactoryDefaults(bool, unsigned short)+0xae>
 8004de4:	68ab      	ldr	r3, [r5, #8]
 8004de6:	4628      	mov	r0, r5
 8004de8:	75de      	strb	r6, [r3, #23]
 8004dea:	b003      	add	sp, #12
 8004dec:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8004df0:	f7ff ba2e 	b.w	8004250 <RDMHandler::RespondMessageAck()>
 8004df4:	f812 1f01 	ldrb.w	r1, [r2, #1]!
 8004df8:	440b      	add	r3, r1
 8004dfa:	b29b      	uxth	r3, r3
 8004dfc:	e7ca      	b.n	8004d94 <RDMHandler::SetFactoryDefaults(bool, unsigned short)+0x44>
 8004dfe:	b003      	add	sp, #12
 8004e00:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004e02:	bf00      	nop
 8004e04:	200005dc 	ldrdcs	r0, [r0], -ip

08004e08 <RDMHandler::SetDeviceLabel(bool, unsigned short)>:
 8004e08:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004e0a:	6845      	ldr	r5, [r0, #4]
 8004e0c:	7dab      	ldrb	r3, [r5, #22]
 8004e0e:	2b20      	cmp	r3, #32
 8004e10:	460e      	mov	r6, r1
 8004e12:	4604      	mov	r4, r0
 8004e14:	4611      	mov	r1, r2
 8004e16:	d905      	bls.n	8004e24 <RDMHandler::SetDeviceLabel(bool, unsigned short)+0x1c>
 8004e18:	2101      	movs	r1, #1
 8004e1a:	b002      	add	sp, #8
 8004e1c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8004e20:	f7ff bc3e 	b.w	80046a0 <RDMHandler::RespondMessageNack(unsigned short)>
 8004e24:	4a0d      	ldr	r2, [pc, #52]	; (8004e5c <RDMHandler::SetDeviceLabel(bool, unsigned short)+0x54>)
 8004e26:	6810      	ldr	r0, [r2, #0]
 8004e28:	f105 0217 	add.w	r2, r5, #23
 8004e2c:	b159      	cbz	r1, 8004e46 <RDMHandler::SetDeviceLabel(bool, unsigned short)+0x3e>
 8004e2e:	308c      	adds	r0, #140	; 0x8c
 8004e30:	f7fe f9a1 	bl	8003176 <RDMSubDevices::SetLabel(unsigned short, char const*, unsigned char)>
 8004e34:	b97e      	cbnz	r6, 8004e56 <RDMHandler::SetDeviceLabel(bool, unsigned short)+0x4e>
 8004e36:	68a3      	ldr	r3, [r4, #8]
 8004e38:	4620      	mov	r0, r4
 8004e3a:	75de      	strb	r6, [r3, #23]
 8004e3c:	b002      	add	sp, #8
 8004e3e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8004e42:	f7ff ba05 	b.w	8004250 <RDMHandler::RespondMessageAck()>
 8004e46:	4669      	mov	r1, sp
 8004e48:	3004      	adds	r0, #4
 8004e4a:	9200      	str	r2, [sp, #0]
 8004e4c:	f88d 3004 	strb.w	r3, [sp, #4]
 8004e50:	f7ff f90b 	bl	800406a <RDMDevice::SetLabel(TRDMDeviceInfoData const*)>
 8004e54:	e7ee      	b.n	8004e34 <RDMHandler::SetDeviceLabel(bool, unsigned short)+0x2c>
 8004e56:	b002      	add	sp, #8
 8004e58:	bd70      	pop	{r4, r5, r6, pc}
 8004e5a:	bf00      	nop
 8004e5c:	200005dc 	ldrdcs	r0, [r0], -ip

08004e60 <RDMHandler::Handlers(bool, unsigned char, unsigned short, unsigned char, unsigned short)>:
 8004e60:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004e64:	4616      	mov	r6, r2
 8004e66:	4604      	mov	r4, r0
 8004e68:	f006 00ef 	and.w	r0, r6, #239	; 0xef
 8004e6c:	2700      	movs	r7, #0
 8004e6e:	2820      	cmp	r0, #32
 8004e70:	f89d 801c 	ldrb.w	r8, [sp, #28]
 8004e74:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 8004e78:	46be      	mov	lr, r7
 8004e7a:	d005      	beq.n	8004e88 <RDMHandler::Handlers(bool, unsigned char, unsigned short, unsigned char, unsigned short)+0x28>
 8004e7c:	2105      	movs	r1, #5
 8004e7e:	4620      	mov	r0, r4
 8004e80:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004e84:	f7ff bc0c 	b.w	80046a0 <RDMHandler::RespondMessageNack(unsigned short)>
 8004e88:	482b      	ldr	r0, [pc, #172]	; (8004f38 <RDMHandler::Handlers(bool, unsigned char, unsigned short, unsigned char, unsigned short)+0xd8>)
 8004e8a:	6800      	ldr	r0, [r0, #0]
 8004e8c:	8880      	ldrh	r0, [r0, #4]
 8004e8e:	4290      	cmp	r0, r2
 8004e90:	d205      	bcs.n	8004e9e <RDMHandler::Handlers(bool, unsigned char, unsigned short, unsigned char, unsigned short)+0x3e>
 8004e92:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8004e96:	4282      	cmp	r2, r0
 8004e98:	d001      	beq.n	8004e9e <RDMHandler::Handlers(bool, unsigned char, unsigned short, unsigned char, unsigned short)+0x3e>
 8004e9a:	2109      	movs	r1, #9
 8004e9c:	e7ef      	b.n	8004e7e <RDMHandler::Handlers(bool, unsigned char, unsigned short, unsigned char, unsigned short)+0x1e>
 8004e9e:	4d27      	ldr	r5, [pc, #156]	; (8004f3c <RDMHandler::Handlers(bool, unsigned char, unsigned short, unsigned char, unsigned short)+0xdc>)
 8004ea0:	f04f 0c1e 	mov.w	ip, #30
 8004ea4:	2000      	movs	r0, #0
 8004ea6:	f8b5 9000 	ldrh.w	r9, [r5]
 8004eaa:	4599      	cmp	r9, r3
 8004eac:	bf02      	ittt	eq
 8004eae:	7daf      	ldrbeq	r7, [r5, #22]
 8004eb0:	f895 e017 	ldrbeq.w	lr, [r5, #23]
 8004eb4:	4628      	moveq	r0, r5
 8004eb6:	f1bc 0c01 	subs.w	ip, ip, #1
 8004eba:	f105 0518 	add.w	r5, r5, #24
 8004ebe:	d1f2      	bne.n	8004ea6 <RDMHandler::Handlers(bool, unsigned char, unsigned short, unsigned char, unsigned short)+0x46>
 8004ec0:	b908      	cbnz	r0, 8004ec6 <RDMHandler::Handlers(bool, unsigned char, unsigned short, unsigned char, unsigned short)+0x66>
 8004ec2:	2100      	movs	r1, #0
 8004ec4:	e7db      	b.n	8004e7e <RDMHandler::Handlers(bool, unsigned char, unsigned short, unsigned char, unsigned short)+0x1e>
 8004ec6:	7823      	ldrb	r3, [r4, #0]
 8004ec8:	b193      	cbz	r3, 8004ef0 <RDMHandler::Handlers(bool, unsigned char, unsigned short, unsigned char, unsigned short)+0x90>
 8004eca:	2f00      	cmp	r7, #0
 8004ecc:	d0f9      	beq.n	8004ec2 <RDMHandler::Handlers(bool, unsigned char, unsigned short, unsigned char, unsigned short)+0x62>
 8004ece:	2e20      	cmp	r6, #32
 8004ed0:	d11f      	bne.n	8004f12 <RDMHandler::Handlers(bool, unsigned char, unsigned short, unsigned char, unsigned short)+0xb2>
 8004ed2:	bb71      	cbnz	r1, 8004f32 <RDMHandler::Handlers(bool, unsigned char, unsigned short, unsigned char, unsigned short)+0xd2>
 8004ed4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004ed8:	429a      	cmp	r2, r3
 8004eda:	d0de      	beq.n	8004e9a <RDMHandler::Handlers(bool, unsigned char, unsigned short, unsigned char, unsigned short)+0x3a>
 8004edc:	6843      	ldr	r3, [r0, #4]
 8004ede:	b913      	cbnz	r3, 8004ee6 <RDMHandler::Handlers(bool, unsigned char, unsigned short, unsigned char, unsigned short)+0x86>
 8004ee0:	6881      	ldr	r1, [r0, #8]
 8004ee2:	07cd      	lsls	r5, r1, #31
 8004ee4:	d5ca      	bpl.n	8004e7c <RDMHandler::Handlers(bool, unsigned char, unsigned short, unsigned char, unsigned short)+0x1c>
 8004ee6:	7d01      	ldrb	r1, [r0, #20]
 8004ee8:	4541      	cmp	r1, r8
 8004eea:	d005      	beq.n	8004ef8 <RDMHandler::Handlers(bool, unsigned char, unsigned short, unsigned char, unsigned short)+0x98>
 8004eec:	2101      	movs	r1, #1
 8004eee:	e7c6      	b.n	8004e7e <RDMHandler::Handlers(bool, unsigned char, unsigned short, unsigned char, unsigned short)+0x1e>
 8004ef0:	f1be 0f00 	cmp.w	lr, #0
 8004ef4:	d1eb      	bne.n	8004ece <RDMHandler::Handlers(bool, unsigned char, unsigned short, unsigned char, unsigned short)+0x6e>
 8004ef6:	e7e4      	b.n	8004ec2 <RDMHandler::Handlers(bool, unsigned char, unsigned short, unsigned char, unsigned short)+0x62>
 8004ef8:	6881      	ldr	r1, [r0, #8]
 8004efa:	104d      	asrs	r5, r1, #1
 8004efc:	eb04 0061 	add.w	r0, r4, r1, asr #1
 8004f00:	07c9      	lsls	r1, r1, #31
 8004f02:	bf48      	it	mi
 8004f04:	5961      	ldrmi	r1, [r4, r5]
 8004f06:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004f0a:	bf48      	it	mi
 8004f0c:	58cb      	ldrmi	r3, [r1, r3]
 8004f0e:	4611      	mov	r1, r2
 8004f10:	4718      	bx	r3
 8004f12:	e9d0 3003 	ldrd	r3, r0, [r0, #12]
 8004f16:	f000 0501 	and.w	r5, r0, #1
 8004f1a:	b90b      	cbnz	r3, 8004f20 <RDMHandler::Handlers(bool, unsigned char, unsigned short, unsigned char, unsigned short)+0xc0>
 8004f1c:	2d00      	cmp	r5, #0
 8004f1e:	d0ad      	beq.n	8004e7c <RDMHandler::Handlers(bool, unsigned char, unsigned short, unsigned char, unsigned short)+0x1c>
 8004f20:	1046      	asrs	r6, r0, #1
 8004f22:	eb04 0060 	add.w	r0, r4, r0, asr #1
 8004f26:	b10d      	cbz	r5, 8004f2c <RDMHandler::Handlers(bool, unsigned char, unsigned short, unsigned char, unsigned short)+0xcc>
 8004f28:	59a4      	ldr	r4, [r4, r6]
 8004f2a:	58e3      	ldr	r3, [r4, r3]
 8004f2c:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004f30:	4718      	bx	r3
 8004f32:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004f36:	bf00      	nop
 8004f38:	20000198 	mulcs	r0, r8, r1
 8004f3c:	0800a3d4 	stmdaeq	r0, {r2, r4, r6, r7, r8, r9, sp, pc}

08004f40 <RDMHandler::HandleData(unsigned char const*, unsigned char*)>:
 8004f40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004f44:	23ff      	movs	r3, #255	; 0xff
 8004f46:	7013      	strb	r3, [r2, #0]
 8004f48:	e9c0 1201 	strd	r1, r2, [r0, #4]
 8004f4c:	b085      	sub	sp, #20
 8004f4e:	7ccb      	ldrb	r3, [r1, #19]
 8004f50:	7d4f      	ldrb	r7, [r1, #21]
 8004f52:	9303      	str	r3, [sp, #12]
 8004f54:	7d0b      	ldrb	r3, [r1, #20]
 8004f56:	f101 0a02 	add.w	sl, r1, #2
 8004f5a:	eb07 2703 	add.w	r7, r7, r3, lsl #8
 8004f5e:	4b5c      	ldr	r3, [pc, #368]	; (80050d0 <RDMHandler::HandleData(unsigned char const*, unsigned char*)+0x190>)
 8004f60:	4606      	mov	r6, r0
 8004f62:	460d      	mov	r5, r1
 8004f64:	4614      	mov	r4, r2
 8004f66:	495b      	ldr	r1, [pc, #364]	; (80050d4 <RDMHandler::HandleData(unsigned char const*, unsigned char*)+0x194>)
 8004f68:	f8d3 8000 	ldr.w	r8, [r3]
 8004f6c:	2206      	movs	r2, #6
 8004f6e:	4650      	mov	r0, sl
 8004f70:	f7ff f854 	bl	800401c <memcmp>
 8004f74:	f108 0905 	add.w	r9, r8, #5
 8004f78:	4683      	mov	fp, r0
 8004f7a:	2202      	movs	r2, #2
 8004f7c:	4649      	mov	r1, r9
 8004f7e:	4650      	mov	r0, sl
 8004f80:	b2bf      	uxth	r7, r7
 8004f82:	f7ff f84b 	bl	800401c <memcmp>
 8004f86:	b928      	cbnz	r0, 8004f94 <RDMHandler::HandleData(unsigned char const*, unsigned char*)+0x54>
 8004f88:	2204      	movs	r2, #4
 8004f8a:	4952      	ldr	r1, [pc, #328]	; (80050d4 <RDMHandler::HandleData(unsigned char const*, unsigned char*)+0x194>)
 8004f8c:	18a8      	adds	r0, r5, r2
 8004f8e:	f7ff f845 	bl	800401c <memcmp>
 8004f92:	b158      	cbz	r0, 8004fac <RDMHandler::HandleData(unsigned char const*, unsigned char*)+0x6c>
 8004f94:	2206      	movs	r2, #6
 8004f96:	4649      	mov	r1, r9
 8004f98:	4650      	mov	r0, sl
 8004f9a:	f7ff f83f 	bl	800401c <memcmp>
 8004f9e:	b130      	cbz	r0, 8004fae <RDMHandler::HandleData(unsigned char const*, unsigned char*)+0x6e>
 8004fa0:	f1bb 0f00 	cmp.w	fp, #0
 8004fa4:	d04b      	beq.n	800503e <RDMHandler::HandleData(unsigned char const*, unsigned char*)+0xfe>
 8004fa6:	b005      	add	sp, #20
 8004fa8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004fac:	2001      	movs	r0, #1
 8004fae:	2301      	movs	r3, #1
 8004fb0:	9a03      	ldr	r2, [sp, #12]
 8004fb2:	2a10      	cmp	r2, #16
 8004fb4:	d177      	bne.n	80050a6 <RDMHandler::HandleData(unsigned char const*, unsigned char*)+0x166>
 8004fb6:	2f01      	cmp	r7, #1
 8004fb8:	d144      	bne.n	8005044 <RDMHandler::HandleData(unsigned char const*, unsigned char*)+0x104>
 8004fba:	7873      	ldrb	r3, [r6, #1]
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d1f2      	bne.n	8004fa6 <RDMHandler::HandleData(unsigned char const*, unsigned char*)+0x66>
 8004fc0:	2206      	movs	r2, #6
 8004fc2:	4649      	mov	r1, r9
 8004fc4:	f105 0017 	add.w	r0, r5, #23
 8004fc8:	f7ff f828 	bl	800401c <memcmp>
 8004fcc:	2800      	cmp	r0, #0
 8004fce:	dcea      	bgt.n	8004fa6 <RDMHandler::HandleData(unsigned char const*, unsigned char*)+0x66>
 8004fd0:	2206      	movs	r2, #6
 8004fd2:	f105 011d 	add.w	r1, r5, #29
 8004fd6:	4648      	mov	r0, r9
 8004fd8:	f7ff f820 	bl	800401c <memcmp>
 8004fdc:	2800      	cmp	r0, #0
 8004fde:	dce2      	bgt.n	8004fa6 <RDMHandler::HandleData(unsigned char const*, unsigned char*)+0x66>
 8004fe0:	23fe      	movs	r3, #254	; 0xfe
 8004fe2:	7023      	strb	r3, [r4, #0]
 8004fe4:	7063      	strb	r3, [r4, #1]
 8004fe6:	70a3      	strb	r3, [r4, #2]
 8004fe8:	70e3      	strb	r3, [r4, #3]
 8004fea:	7123      	strb	r3, [r4, #4]
 8004fec:	7163      	strb	r3, [r4, #5]
 8004fee:	71a3      	strb	r3, [r4, #6]
 8004ff0:	23aa      	movs	r3, #170	; 0xaa
 8004ff2:	71e3      	strb	r3, [r4, #7]
 8004ff4:	f108 0204 	add.w	r2, r8, #4
 8004ff8:	4621      	mov	r1, r4
 8004ffa:	f108 080a 	add.w	r8, r8, #10
 8004ffe:	f240 53fa 	movw	r3, #1530	; 0x5fa
 8005002:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 8005006:	f060 0055 	orn	r0, r0, #85	; 0x55
 800500a:	7208      	strb	r0, [r1, #8]
 800500c:	7810      	ldrb	r0, [r2, #0]
 800500e:	f040 0055 	orr.w	r0, r0, #85	; 0x55
 8005012:	7248      	strb	r0, [r1, #9]
 8005014:	7810      	ldrb	r0, [r2, #0]
 8005016:	4542      	cmp	r2, r8
 8005018:	4403      	add	r3, r0
 800501a:	b29b      	uxth	r3, r3
 800501c:	f101 0102 	add.w	r1, r1, #2
 8005020:	d1ef      	bne.n	8005002 <RDMHandler::HandleData(unsigned char const*, unsigned char*)+0xc2>
 8005022:	0a1a      	lsrs	r2, r3, #8
 8005024:	f062 0155 	orn	r1, r2, #85	; 0x55
 8005028:	f042 0255 	orr.w	r2, r2, #85	; 0x55
 800502c:	7562      	strb	r2, [r4, #21]
 800502e:	f063 0255 	orn	r2, r3, #85	; 0x55
 8005032:	f043 0355 	orr.w	r3, r3, #85	; 0x55
 8005036:	7521      	strb	r1, [r4, #20]
 8005038:	75a2      	strb	r2, [r4, #22]
 800503a:	75e3      	strb	r3, [r4, #23]
 800503c:	e7b3      	b.n	8004fa6 <RDMHandler::HandleData(unsigned char const*, unsigned char*)+0x66>
 800503e:	4658      	mov	r0, fp
 8005040:	465b      	mov	r3, fp
 8005042:	e7b5      	b.n	8004fb0 <RDMHandler::HandleData(unsigned char const*, unsigned char*)+0x70>
 8005044:	2f03      	cmp	r7, #3
 8005046:	d11a      	bne.n	800507e <RDMHandler::HandleData(unsigned char const*, unsigned char*)+0x13e>
 8005048:	7daa      	ldrb	r2, [r5, #22]
 800504a:	2a00      	cmp	r2, #0
 800504c:	d1ab      	bne.n	8004fa6 <RDMHandler::HandleData(unsigned char const*, unsigned char*)+0x66>
 800504e:	7072      	strb	r2, [r6, #1]
 8005050:	f1bb 0f00 	cmp.w	fp, #0
 8005054:	d0a7      	beq.n	8004fa6 <RDMHandler::HandleData(unsigned char const*, unsigned char*)+0x66>
 8005056:	2b00      	cmp	r3, #0
 8005058:	d0a5      	beq.n	8004fa6 <RDMHandler::HandleData(unsigned char const*, unsigned char*)+0x66>
 800505a:	2302      	movs	r3, #2
 800505c:	75e3      	strb	r3, [r4, #23]
 800505e:	4b1e      	ldr	r3, [pc, #120]	; (80050d8 <RDMHandler::HandleData(unsigned char const*, unsigned char*)+0x198>)
 8005060:	7622      	strb	r2, [r4, #24]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	7662      	strb	r2, [r4, #25]
 8005066:	889b      	ldrh	r3, [r3, #4]
 8005068:	3b00      	subs	r3, #0
 800506a:	bf18      	it	ne
 800506c:	2301      	movne	r3, #1
 800506e:	005b      	lsls	r3, r3, #1
 8005070:	4630      	mov	r0, r6
 8005072:	7663      	strb	r3, [r4, #25]
 8005074:	b005      	add	sp, #20
 8005076:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800507a:	f7ff b8e9 	b.w	8004250 <RDMHandler::RespondMessageAck()>
 800507e:	2f02      	cmp	r7, #2
 8005080:	d191      	bne.n	8004fa6 <RDMHandler::HandleData(unsigned char const*, unsigned char*)+0x66>
 8005082:	7daa      	ldrb	r2, [r5, #22]
 8005084:	2a00      	cmp	r2, #0
 8005086:	d18e      	bne.n	8004fa6 <RDMHandler::HandleData(unsigned char const*, unsigned char*)+0x66>
 8005088:	2101      	movs	r1, #1
 800508a:	7071      	strb	r1, [r6, #1]
 800508c:	2b00      	cmp	r3, #0
 800508e:	d08a      	beq.n	8004fa6 <RDMHandler::HandleData(unsigned char const*, unsigned char*)+0x66>
 8005090:	4b11      	ldr	r3, [pc, #68]	; (80050d8 <RDMHandler::HandleData(unsigned char const*, unsigned char*)+0x198>)
 8005092:	75e7      	strb	r7, [r4, #23]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	7622      	strb	r2, [r4, #24]
 8005098:	7662      	strb	r2, [r4, #25]
 800509a:	889b      	ldrh	r3, [r3, #4]
 800509c:	3b00      	subs	r3, #0
 800509e:	bf18      	it	ne
 80050a0:	2301      	movne	r3, #1
 80050a2:	408b      	lsls	r3, r1
 80050a4:	e7e4      	b.n	8005070 <RDMHandler::HandleData(unsigned char const*, unsigned char*)+0x130>
 80050a6:	7c6a      	ldrb	r2, [r5, #17]
 80050a8:	7cab      	ldrb	r3, [r5, #18]
 80050aa:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 80050ae:	b29b      	uxth	r3, r3
 80050b0:	f1bb 0f00 	cmp.w	fp, #0
 80050b4:	9301      	str	r3, [sp, #4]
 80050b6:	7dab      	ldrb	r3, [r5, #22]
 80050b8:	9300      	str	r3, [sp, #0]
 80050ba:	bf18      	it	ne
 80050bc:	4601      	movne	r1, r0
 80050be:	9a03      	ldr	r2, [sp, #12]
 80050c0:	463b      	mov	r3, r7
 80050c2:	bf08      	it	eq
 80050c4:	2101      	moveq	r1, #1
 80050c6:	4630      	mov	r0, r6
 80050c8:	f7ff feca 	bl	8004e60 <RDMHandler::Handlers(bool, unsigned char, unsigned short, unsigned char, unsigned short)>
 80050cc:	e76b      	b.n	8004fa6 <RDMHandler::HandleData(unsigned char const*, unsigned char*)+0x66>
 80050ce:	bf00      	nop
 80050d0:	200005dc 	ldrdcs	r0, [r0], -ip
 80050d4:	0800a3cc 	stmdaeq	r0, {r2, r3, r6, r7, r8, r9, sp, pc}
 80050d8:	20000198 	mulcs	r0, r8, r1

080050dc <RDMHandler::GetIdentifyMode(unsigned short)>:
 80050dc:	6883      	ldr	r3, [r0, #8]
 80050de:	2201      	movs	r2, #1
 80050e0:	75da      	strb	r2, [r3, #23]
 80050e2:	4a02      	ldr	r2, [pc, #8]	; (80050ec <RDMHandler::GetIdentifyMode(unsigned short)+0x10>)
 80050e4:	7812      	ldrb	r2, [r2, #0]
 80050e6:	761a      	strb	r2, [r3, #24]
 80050e8:	f7ff b8b2 	b.w	8004250 <RDMHandler::RespondMessageAck()>
 80050ec:	200005e1 	andcs	r0, r0, r1, ror #11

080050f0 <RDMHandler::SetIdentifyMode(bool, unsigned short)>:
 80050f0:	b538      	push	{r3, r4, r5, lr}
 80050f2:	6843      	ldr	r3, [r0, #4]
 80050f4:	7d9a      	ldrb	r2, [r3, #22]
 80050f6:	2a01      	cmp	r2, #1
 80050f8:	4604      	mov	r4, r0
 80050fa:	460d      	mov	r5, r1
 80050fc:	d004      	beq.n	8005108 <RDMHandler::SetIdentifyMode(bool, unsigned short)+0x18>
 80050fe:	2101      	movs	r1, #1
 8005100:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005104:	f7ff bacc 	b.w	80046a0 <RDMHandler::RespondMessageNack(unsigned short)>
 8005108:	7dd9      	ldrb	r1, [r3, #23]
 800510a:	1e4b      	subs	r3, r1, #1
 800510c:	b2db      	uxtb	r3, r3
 800510e:	2bfd      	cmp	r3, #253	; 0xfd
 8005110:	d801      	bhi.n	8005116 <RDMHandler::SetIdentifyMode(bool, unsigned short)+0x26>
 8005112:	2106      	movs	r1, #6
 8005114:	e7f4      	b.n	8005100 <RDMHandler::SetIdentifyMode(bool, unsigned short)+0x10>
 8005116:	4b0b      	ldr	r3, [pc, #44]	; (8005144 <RDMHandler::SetIdentifyMode(bool, unsigned short)+0x54>)
 8005118:	6818      	ldr	r0, [r3, #0]
 800511a:	4b0b      	ldr	r3, [pc, #44]	; (8005148 <RDMHandler::SetIdentifyMode(bool, unsigned short)+0x58>)
 800511c:	7019      	strb	r1, [r3, #0]
 800511e:	4b0b      	ldr	r3, [pc, #44]	; (800514c <RDMHandler::SetIdentifyMode(bool, unsigned short)+0x5c>)
 8005120:	781b      	ldrb	r3, [r3, #0]
 8005122:	b15b      	cbz	r3, 800513c <RDMHandler::SetIdentifyMode(bool, unsigned short)+0x4c>
 8005124:	b151      	cbz	r1, 800513c <RDMHandler::SetIdentifyMode(bool, unsigned short)+0x4c>
 8005126:	21ff      	movs	r1, #255	; 0xff
 8005128:	f7fc fa36 	bl	8001598 <RDMIdentify::On(rdm::identify::Mode)>
 800512c:	b94d      	cbnz	r5, 8005142 <RDMHandler::SetIdentifyMode(bool, unsigned short)+0x52>
 800512e:	68a3      	ldr	r3, [r4, #8]
 8005130:	75dd      	strb	r5, [r3, #23]
 8005132:	4620      	mov	r0, r4
 8005134:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005138:	f7ff b88a 	b.w	8004250 <RDMHandler::RespondMessageAck()>
 800513c:	f7fc fa4a 	bl	80015d4 <RDMIdentify::Off(rdm::identify::Mode)>
 8005140:	e7f4      	b.n	800512c <RDMHandler::SetIdentifyMode(bool, unsigned short)+0x3c>
 8005142:	bd38      	pop	{r3, r4, r5, pc}
 8005144:	200005e4 	andcs	r0, r0, r4, ror #11
 8005148:	200005e1 	andcs	r0, r0, r1, ror #11
 800514c:	200005e0 	andcs	r0, r0, r0, ror #11

08005150 <RDMIdentify::RDMIdentify()>:
 8005150:	4b01      	ldr	r3, [pc, #4]	; (8005158 <RDMIdentify::RDMIdentify()+0x8>)
 8005152:	6018      	str	r0, [r3, #0]
 8005154:	4770      	bx	lr
 8005156:	bf00      	nop
 8005158:	200005e4 	andcs	r0, r0, r4, ror #11

0800515c <RDMSlotInfo::bsearch(unsigned short)>:
 800515c:	b530      	push	{r4, r5, lr}
 800515e:	4c0a      	ldr	r4, [pc, #40]	; (8005188 <RDMSlotInfo::bsearch(unsigned short)+0x2c>)
 8005160:	2128      	movs	r1, #40	; 0x28
 8005162:	2200      	movs	r2, #0
 8005164:	1a8b      	subs	r3, r1, r2
 8005166:	eb02 0363 	add.w	r3, r2, r3, asr #1
 800516a:	f834 5033 	ldrh.w	r5, [r4, r3, lsl #3]
 800516e:	4285      	cmp	r5, r0
 8005170:	d206      	bcs.n	8005180 <RDMSlotInfo::bsearch(unsigned short)+0x24>
 8005172:	1c5a      	adds	r2, r3, #1
 8005174:	428a      	cmp	r2, r1
 8005176:	ddf5      	ble.n	8005164 <RDMSlotInfo::bsearch(unsigned short)+0x8>
 8005178:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800517c:	4618      	mov	r0, r3
 800517e:	bd30      	pop	{r4, r5, pc}
 8005180:	d9fc      	bls.n	800517c <RDMSlotInfo::bsearch(unsigned short)+0x20>
 8005182:	1e59      	subs	r1, r3, #1
 8005184:	e7f6      	b.n	8005174 <RDMSlotInfo::bsearch(unsigned short)+0x18>
 8005186:	bf00      	nop
 8005188:	0800abf8 	stmdaeq	r0, {r3, r4, r5, r6, r7, r8, r9, fp, sp, pc}

0800518c <RDMSlotInfo::GetCategoryText(unsigned short, unsigned short, unsigned int&)>:
 800518c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005190:	4299      	cmp	r1, r3
 8005192:	b510      	push	{r4, lr}
 8005194:	4614      	mov	r4, r2
 8005196:	d103      	bne.n	80051a0 <RDMSlotInfo::GetCategoryText(unsigned short, unsigned short, unsigned int&)+0x14>
 8005198:	4611      	mov	r1, r2
 800519a:	f7fc fa37 	bl	800160c <RDMSlotInfo::GetCategoryTextUndefined(unsigned short, unsigned int&)>
 800519e:	bd10      	pop	{r4, pc}
 80051a0:	4608      	mov	r0, r1
 80051a2:	f7ff ffdb 	bl	800515c <RDMSlotInfo::bsearch(unsigned short)>
 80051a6:	2800      	cmp	r0, #0
 80051a8:	da02      	bge.n	80051b0 <RDMSlotInfo::GetCategoryText(unsigned short, unsigned short, unsigned int&)+0x24>
 80051aa:	2000      	movs	r0, #0
 80051ac:	6020      	str	r0, [r4, #0]
 80051ae:	e7f6      	b.n	800519e <RDMSlotInfo::GetCategoryText(unsigned short, unsigned short, unsigned int&)+0x12>
 80051b0:	4b06      	ldr	r3, [pc, #24]	; (80051cc <RDMSlotInfo::GetCategoryText(unsigned short, unsigned short, unsigned int&)+0x40>)
 80051b2:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
 80051b6:	6858      	ldr	r0, [r3, #4]
 80051b8:	4602      	mov	r2, r0
 80051ba:	4613      	mov	r3, r2
 80051bc:	3201      	adds	r2, #1
 80051be:	7819      	ldrb	r1, [r3, #0]
 80051c0:	2900      	cmp	r1, #0
 80051c2:	d1fa      	bne.n	80051ba <RDMSlotInfo::GetCategoryText(unsigned short, unsigned short, unsigned int&)+0x2e>
 80051c4:	1a1b      	subs	r3, r3, r0
 80051c6:	b29b      	uxth	r3, r3
 80051c8:	6023      	str	r3, [r4, #0]
 80051ca:	e7e8      	b.n	800519e <RDMSlotInfo::GetCategoryText(unsigned short, unsigned short, unsigned int&)+0x12>
 80051cc:	0800abf8 	stmdaeq	r0, {r3, r4, r5, r6, r7, r8, r9, fp, sp, pc}

080051d0 <RDMDevice::RDMDevice()>:
 80051d0:	4a34      	ldr	r2, [pc, #208]	; (80052a4 <RDMDevice::RDMDevice()+0xd4>)
 80051d2:	2300      	movs	r3, #0
 80051d4:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80051d6:	4604      	mov	r4, r0
 80051d8:	7003      	strb	r3, [r0, #0]
 80051da:	f880 3072 	strb.w	r3, [r0, #114]	; 0x72
 80051de:	f8a0 3074 	strh.w	r3, [r0, #116]	; 0x74
 80051e2:	6783      	str	r3, [r0, #120]	; 0x78
 80051e4:	4611      	mov	r1, r2
 80051e6:	4613      	mov	r3, r2
 80051e8:	3201      	adds	r2, #1
 80051ea:	7818      	ldrb	r0, [r3, #0]
 80051ec:	2800      	cmp	r0, #0
 80051ee:	d1fa      	bne.n	80051e6 <RDMDevice::RDMDevice()+0x16>
 80051f0:	1a5b      	subs	r3, r3, r1
 80051f2:	2b20      	cmp	r3, #32
 80051f4:	bf28      	it	cs
 80051f6:	2320      	movcs	r3, #32
 80051f8:	f104 052b 	add.w	r5, r4, #43	; 0x2b
 80051fc:	4829      	ldr	r0, [pc, #164]	; (80052a4 <RDMDevice::RDMDevice()+0xd4>)
 80051fe:	4629      	mov	r1, r5
 8005200:	461a      	mov	r2, r3
 8005202:	3a01      	subs	r2, #1
 8005204:	d23e      	bcs.n	8005284 <RDMDevice::RDMDevice()+0xb4>
 8005206:	f884 304c 	strb.w	r3, [r4, #76]	; 0x4c
 800520a:	4b27      	ldr	r3, [pc, #156]	; (80052a8 <RDMDevice::RDMDevice()+0xd8>)
 800520c:	781a      	ldrb	r2, [r3, #0]
 800520e:	7062      	strb	r2, [r4, #1]
 8005210:	785b      	ldrb	r3, [r3, #1]
 8005212:	70a3      	strb	r3, [r4, #2]
 8005214:	4b25      	ldr	r3, [pc, #148]	; (80052ac <RDMDevice::RDMDevice()+0xdc>)
 8005216:	4669      	mov	r1, sp
 8005218:	6818      	ldr	r0, [r3, #0]
 800521a:	f001 fda1 	bl	8006d60 <Network::MacAddressCopyTo(unsigned char*)>
 800521e:	f89d 3002 	ldrb.w	r3, [sp, #2]
 8005222:	70e3      	strb	r3, [r4, #3]
 8005224:	72a3      	strb	r3, [r4, #10]
 8005226:	4b22      	ldr	r3, [pc, #136]	; (80052b0 <RDMDevice::RDMDevice()+0xe0>)
 8005228:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800522c:	f89d 1004 	ldrb.w	r1, [sp, #4]
 8005230:	f89d 0005 	ldrb.w	r0, [sp, #5]
 8005234:	7122      	strb	r2, [r4, #4]
 8005236:	7262      	strb	r2, [r4, #9]
 8005238:	7161      	strb	r1, [r4, #5]
 800523a:	71a0      	strb	r0, [r4, #6]
 800523c:	71e0      	strb	r0, [r4, #7]
 800523e:	7221      	strb	r1, [r4, #8]
 8005240:	461a      	mov	r2, r3
 8005242:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 8005246:	2900      	cmp	r1, #0
 8005248:	d1fb      	bne.n	8005242 <RDMDevice::RDMDevice()+0x72>
 800524a:	1a9b      	subs	r3, r3, r2
 800524c:	2b20      	cmp	r3, #32
 800524e:	bf28      	it	cs
 8005250:	2320      	movcs	r3, #32
 8005252:	4917      	ldr	r1, [pc, #92]	; (80052b0 <RDMDevice::RDMDevice()+0xe0>)
 8005254:	461a      	mov	r2, r3
 8005256:	3a01      	subs	r2, #1
 8005258:	d219      	bcs.n	800528e <RDMDevice::RDMDevice()+0xbe>
 800525a:	f884 304c 	strb.w	r3, [r4, #76]	; 0x4c
 800525e:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8005262:	f8a4 304e 	strh.w	r3, [r4, #78]	; 0x4e
 8005266:	f8a4 3050 	strh.w	r3, [r4, #80]	; 0x50
 800526a:	4a12      	ldr	r2, [pc, #72]	; (80052b4 <RDMDevice::RDMDevice()+0xe4>)
 800526c:	2315      	movs	r3, #21
 800526e:	f884 3072 	strb.w	r3, [r4, #114]	; 0x72
 8005272:	f104 0166 	add.w	r1, r4, #102	; 0x66
 8005276:	f104 0351 	add.w	r3, r4, #81	; 0x51
 800527a:	4299      	cmp	r1, r3
 800527c:	d10c      	bne.n	8005298 <RDMDevice::RDMDevice()+0xc8>
 800527e:	4620      	mov	r0, r4
 8005280:	b002      	add	sp, #8
 8005282:	bd70      	pop	{r4, r5, r6, pc}
 8005284:	f810 6b01 	ldrb.w	r6, [r0], #1
 8005288:	f801 6f01 	strb.w	r6, [r1, #1]!
 800528c:	e7b9      	b.n	8005202 <RDMDevice::RDMDevice()+0x32>
 800528e:	f811 0b01 	ldrb.w	r0, [r1], #1
 8005292:	f805 0f01 	strb.w	r0, [r5, #1]!
 8005296:	e7de      	b.n	8005256 <RDMDevice::RDMDevice()+0x86>
 8005298:	f812 0b01 	ldrb.w	r0, [r2], #1
 800529c:	f803 0f01 	strb.w	r0, [r3, #1]!
 80052a0:	e7eb      	b.n	800527a <RDMDevice::RDMDevice()+0xaa>
 80052a2:	bf00      	nop
 80052a4:	0800ae39 	stmdaeq	r0, {r0, r3, r4, r5, r9, sl, fp, sp, pc}
 80052a8:	0800ae37 	stmdaeq	r0, {r0, r1, r2, r4, r5, r9, sl, fp, sp, pc}
 80052ac:	20000634 	andcs	r0, r0, r4, lsr r6
 80052b0:	0800ad38 	stmdaeq	r0, {r3, r4, r5, r8, sl, fp, sp, pc}
 80052b4:	0800ae21 	stmdaeq	r0, {r0, r5, r9, sl, fp, sp, pc}

080052b8 <RDMDevice::Print()>:
 80052b8:	b513      	push	{r0, r1, r4, lr}
 80052ba:	4604      	mov	r4, r0
 80052bc:	4818      	ldr	r0, [pc, #96]	; (8005320 <RDMDevice::Print()+0x68>)
 80052be:	f7fc fcd1 	bl	8001c64 <printf>
 80052c2:	f894 104c 	ldrb.w	r1, [r4, #76]	; 0x4c
 80052c6:	4817      	ldr	r0, [pc, #92]	; (8005324 <RDMDevice::Print()+0x6c>)
 80052c8:	f104 022c 	add.w	r2, r4, #44	; 0x2c
 80052cc:	f7fc fcca 	bl	8001c64 <printf>
 80052d0:	78a2      	ldrb	r2, [r4, #2]
 80052d2:	7861      	ldrb	r1, [r4, #1]
 80052d4:	4814      	ldr	r0, [pc, #80]	; (8005328 <RDMDevice::Print()+0x70>)
 80052d6:	f7fc fcc5 	bl	8001c64 <printf>
 80052da:	79e3      	ldrb	r3, [r4, #7]
 80052dc:	7a62      	ldrb	r2, [r4, #9]
 80052de:	7aa1      	ldrb	r1, [r4, #10]
 80052e0:	9300      	str	r3, [sp, #0]
 80052e2:	4812      	ldr	r0, [pc, #72]	; (800532c <RDMDevice::Print()+0x74>)
 80052e4:	7a23      	ldrb	r3, [r4, #8]
 80052e6:	f7fc fcbd 	bl	8001c64 <printf>
 80052ea:	f894 102b 	ldrb.w	r1, [r4, #43]	; 0x2b
 80052ee:	4810      	ldr	r0, [pc, #64]	; (8005330 <RDMDevice::Print()+0x78>)
 80052f0:	f104 020b 	add.w	r2, r4, #11
 80052f4:	f7fc fcb6 	bl	8001c64 <printf>
 80052f8:	f8b4 104e 	ldrh.w	r1, [r4, #78]	; 0x4e
 80052fc:	f894 204e 	ldrb.w	r2, [r4, #78]	; 0x4e
 8005300:	480c      	ldr	r0, [pc, #48]	; (8005334 <RDMDevice::Print()+0x7c>)
 8005302:	0a09      	lsrs	r1, r1, #8
 8005304:	f7fc fcae 	bl	8001c64 <printf>
 8005308:	f8b4 1050 	ldrh.w	r1, [r4, #80]	; 0x50
 800530c:	f894 2050 	ldrb.w	r2, [r4, #80]	; 0x50
 8005310:	4809      	ldr	r0, [pc, #36]	; (8005338 <RDMDevice::Print()+0x80>)
 8005312:	0a09      	lsrs	r1, r1, #8
 8005314:	b002      	add	sp, #8
 8005316:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800531a:	f7fc bca3 	b.w	8001c64 <printf>
 800531e:	bf00      	nop
 8005320:	0800ad4d 	stmdaeq	r0, {r0, r2, r3, r6, r8, sl, fp, sp, pc}
 8005324:	0800ad67 	stmdaeq	r0, {r0, r1, r2, r5, r6, r8, sl, fp, sp, pc}
 8005328:	0800ad82 	stmdaeq	r0, {r1, r7, r8, sl, fp, sp, pc}
 800532c:	0800ada1 	stmdaeq	r0, {r0, r5, r7, r8, sl, fp, sp, pc}
 8005330:	0800adc8 	stmdaeq	r0, {r3, r6, r7, r8, sl, fp, sp, pc}
 8005334:	0800ade3 	stmdaeq	r0, {r0, r1, r5, r6, r7, r8, sl, fp, sp, pc}
 8005338:	0800ae02 	stmdaeq	r0, {r1, r9, sl, fp, sp, pc}

0800533c <PixelDmxConfiguration::Validate(unsigned int, unsigned int&, pixeldmxconfiguration::PortInfo&)>:
 800533c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800533e:	4604      	mov	r4, r0
 8005340:	460e      	mov	r6, r1
 8005342:	4611      	mov	r1, r2
 8005344:	9201      	str	r2, [sp, #4]
 8005346:	461d      	mov	r5, r3
 8005348:	f000 fa78 	bl	800583c <PixelConfiguration::Validate(unsigned int&)>
 800534c:	7d62      	ldrb	r2, [r4, #21]
 800534e:	b94a      	cbnz	r2, 8005364 <PixelDmxConfiguration::Validate(unsigned int, unsigned int&, pixeldmxconfiguration::PortInfo&)+0x28>
 8005350:	6823      	ldr	r3, [r4, #0]
 8005352:	9901      	ldr	r1, [sp, #4]
 8005354:	b11b      	cbz	r3, 800535e <PixelDmxConfiguration::Validate(unsigned int, unsigned int&, pixeldmxconfiguration::PortInfo&)+0x22>
 8005356:	3b0b      	subs	r3, #11
 8005358:	2b01      	cmp	r3, #1
 800535a:	bf88      	it	hi
 800535c:	6022      	strhi	r2, [r4, #0]
 800535e:	4620      	mov	r0, r4
 8005360:	f000 fa6c 	bl	800583c <PixelConfiguration::Validate(unsigned int&)>
 8005364:	6823      	ldr	r3, [r4, #0]
 8005366:	2b07      	cmp	r3, #7
 8005368:	bf15      	itete	ne
 800536a:	f44f 71aa 	movne.w	r1, #340	; 0x154
 800536e:	f44f 7180 	moveq.w	r1, #256	; 0x100
 8005372:	23aa      	movne	r3, #170	; 0xaa
 8005374:	2380      	moveq	r3, #128	; 0x80
 8005376:	e9c5 3100 	strd	r3, r1, [r5]
 800537a:	6a21      	ldr	r1, [r4, #32]
 800537c:	bf14      	ite	ne
 800537e:	f44f 72ff 	movne.w	r2, #510	; 0x1fe
 8005382:	f44f 72c0 	moveq.w	r2, #384	; 0x180
 8005386:	60aa      	str	r2, [r5, #8]
 8005388:	6862      	ldr	r2, [r4, #4]
 800538a:	b109      	cbz	r1, 8005390 <PixelDmxConfiguration::Validate(unsigned int, unsigned int&, pixeldmxconfiguration::PortInfo&)+0x54>
 800538c:	4291      	cmp	r1, r2
 800538e:	d900      	bls.n	8005392 <PixelDmxConfiguration::Validate(unsigned int, unsigned int&, pixeldmxconfiguration::PortInfo&)+0x56>
 8005390:	6222      	str	r2, [r4, #32]
 8005392:	69e0      	ldr	r0, [r4, #28]
 8005394:	6a21      	ldr	r1, [r4, #32]
 8005396:	fbb2 f2f1 	udiv	r2, r2, r1
 800539a:	42b0      	cmp	r0, r6
 800539c:	bf28      	it	cs
 800539e:	4630      	movcs	r0, r6
 80053a0:	6262      	str	r2, [r4, #36]	; 0x24
 80053a2:	2e01      	cmp	r6, #1
 80053a4:	f103 0301 	add.w	r3, r3, #1
 80053a8:	fbb2 f2f3 	udiv	r2, r2, r3
 80053ac:	f102 0301 	add.w	r3, r2, #1
 80053b0:	62a3      	str	r3, [r4, #40]	; 0x28
 80053b2:	bf1c      	itt	ne
 80053b4:	4343      	mulne	r3, r0
 80053b6:	f103 32ff 	addne.w	r2, r3, #4294967295	; 0xffffffff
 80053ba:	61e0      	str	r0, [r4, #28]
 80053bc:	60ea      	str	r2, [r5, #12]
 80053be:	b002      	add	sp, #8
 80053c0:	bd70      	pop	{r4, r5, r6, pc}
	...

080053c4 <PixelDmxConfiguration::Print()>:
 80053c4:	b510      	push	{r4, lr}
 80053c6:	4604      	mov	r4, r0
 80053c8:	f000 face 	bl	8005968 <PixelConfiguration::Print()>
 80053cc:	4806      	ldr	r0, [pc, #24]	; (80053e8 <PixelDmxConfiguration::Print()+0x24>)
 80053ce:	f7fc fc49 	bl	8001c64 <printf>
 80053d2:	69e1      	ldr	r1, [r4, #28]
 80053d4:	4805      	ldr	r0, [pc, #20]	; (80053ec <PixelDmxConfiguration::Print()+0x28>)
 80053d6:	f7fc fc45 	bl	8001c64 <printf>
 80053da:	e9d4 1208 	ldrd	r1, r2, [r4, #32]
 80053de:	4804      	ldr	r0, [pc, #16]	; (80053f0 <PixelDmxConfiguration::Print()+0x2c>)
 80053e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80053e4:	f7fc bc3e 	b.w	8001c64 <printf>
 80053e8:	0800ae55 	stmdaeq	r0, {r0, r2, r4, r6, r9, sl, fp, sp, pc}
 80053ec:	0800ae6e 	stmdaeq	r0, {r1, r2, r3, r5, r6, r9, sl, fp, sp, pc}
 80053f0:	0800ae7d 	stmdaeq	r0, {r0, r2, r3, r4, r5, r6, r9, sl, fp, sp, pc}

080053f4 <WS28xxDmx::GetDmxStartAddress()>:
 80053f4:	f8b0 0048 	ldrh.w	r0, [r0, #72]	; 0x48
 80053f8:	4770      	bx	lr

080053fa <WS28xxDmx::GetDmxFootprint()>:
 80053fa:	f8b0 004a 	ldrh.w	r0, [r0, #74]	; 0x4a
 80053fe:	4770      	bx	lr

08005400 <WS28xxDmx::~WS28xxDmx()>:
 8005400:	b538      	push	{r3, r4, r5, lr}
 8005402:	6cc5      	ldr	r5, [r0, #76]	; 0x4c
 8005404:	4b05      	ldr	r3, [pc, #20]	; (800541c <WS28xxDmx::~WS28xxDmx()+0x1c>)
 8005406:	6003      	str	r3, [r0, #0]
 8005408:	4604      	mov	r4, r0
 800540a:	b12d      	cbz	r5, 8005418 <WS28xxDmx::~WS28xxDmx()+0x18>
 800540c:	4628      	mov	r0, r5
 800540e:	f001 fb87 	bl	8006b20 <WS28xx::~WS28xx()>
 8005412:	4628      	mov	r0, r5
 8005414:	f002 ffb9 	bl	800838a <operator delete(void*)>
 8005418:	4620      	mov	r0, r4
 800541a:	bd38      	pop	{r3, r4, r5, pc}
 800541c:	0800aeac 	stmdaeq	r0, {r2, r3, r5, r7, r9, sl, fp, sp, pc}

08005420 <WS28xxDmx::~WS28xxDmx()>:
 8005420:	b510      	push	{r4, lr}
 8005422:	4604      	mov	r4, r0
 8005424:	f7ff ffec 	bl	8005400 <WS28xxDmx::~WS28xxDmx()>
 8005428:	4620      	mov	r0, r4
 800542a:	f002 ffae 	bl	800838a <operator delete(void*)>
 800542e:	4620      	mov	r0, r4
 8005430:	bd10      	pop	{r4, pc}

08005432 <WS28xxDmx::Blackout(bool)>:
 8005432:	b538      	push	{r3, r4, r5, lr}
 8005434:	4605      	mov	r5, r0
 8005436:	460c      	mov	r4, r1
 8005438:	f880 1059 	strb.w	r1, [r0, #89]	; 0x59
 800543c:	f004 fa0c 	bl	8009858 <gd32_spi_dma_tx_is_active()>
 8005440:	2800      	cmp	r0, #0
 8005442:	d1fb      	bne.n	800543c <WS28xxDmx::Blackout(bool)+0xa>
 8005444:	6ce8      	ldr	r0, [r5, #76]	; 0x4c
 8005446:	b11c      	cbz	r4, 8005450 <WS28xxDmx::Blackout(bool)+0x1e>
 8005448:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800544c:	f001 bbe6 	b.w	8006c1c <WS28xx::Blackout()>
 8005450:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005454:	f001 bbc6 	b.w	8006be4 <WS28xx::Update()>

08005458 <WS28xxDmx::SetData(unsigned int, unsigned char const*, unsigned int)>:
 8005458:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800545c:	b087      	sub	sp, #28
 800545e:	4607      	mov	r7, r0
 8005460:	9104      	str	r1, [sp, #16]
 8005462:	4692      	mov	sl, r2
 8005464:	9303      	str	r3, [sp, #12]
 8005466:	f004 f9f7 	bl	8009858 <gd32_spi_dma_tx_is_active()>
 800546a:	2800      	cmp	r0, #0
 800546c:	d171      	bne.n	8005552 <WS28xxDmx::SetData(unsigned int, unsigned char const*, unsigned int)+0xfa>
 800546e:	9b04      	ldr	r3, [sp, #16]
 8005470:	9c03      	ldr	r4, [sp, #12]
 8005472:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005474:	f003 0103 	and.w	r1, r3, #3
 8005478:	2902      	cmp	r1, #2
 800547a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800547c:	fbb4 f6f3 	udiv	r6, r4, r3
 8005480:	d026      	beq.n	80054d0 <WS28xxDmx::SetData(unsigned int, unsigned char const*, unsigned int)+0x78>
 8005482:	2903      	cmp	r1, #3
 8005484:	d02b      	beq.n	80054de <WS28xxDmx::SetData(unsigned int, unsigned char const*, unsigned int)+0x86>
 8005486:	2901      	cmp	r1, #1
 8005488:	6b7d      	ldr	r5, [r7, #52]	; 0x34
 800548a:	d022      	beq.n	80054d2 <WS28xxDmx::SetData(unsigned int, unsigned char const*, unsigned int)+0x7a>
 800548c:	4296      	cmp	r6, r2
 800548e:	bf28      	it	cs
 8005490:	4616      	movcs	r6, r2
 8005492:	4295      	cmp	r5, r2
 8005494:	d925      	bls.n	80054e2 <WS28xxDmx::SetData(unsigned int, unsigned char const*, unsigned int)+0x8a>
 8005496:	8e3c      	ldrh	r4, [r7, #48]	; 0x30
 8005498:	4605      	mov	r5, r0
 800549a:	3c01      	subs	r4, #1
 800549c:	f8d7 9024 	ldr.w	r9, [r7, #36]	; 0x24
 80054a0:	2b03      	cmp	r3, #3
 80054a2:	fb09 f805 	mul.w	r8, r9, r5
 80054a6:	4454      	add	r4, sl
 80054a8:	eb08 0b09 	add.w	fp, r8, r9
 80054ac:	d035      	beq.n	800551a <WS28xxDmx::SetData(unsigned int, unsigned char const*, unsigned int)+0xc2>
 80054ae:	42ae      	cmp	r6, r5
 80054b0:	d935      	bls.n	800551e <WS28xxDmx::SetData(unsigned int, unsigned char const*, unsigned int)+0xc6>
 80054b2:	9a03      	ldr	r2, [sp, #12]
 80054b4:	eba4 030a 	sub.w	r3, r4, sl
 80054b8:	429a      	cmp	r2, r3
 80054ba:	d930      	bls.n	800551e <WS28xxDmx::SetData(unsigned int, unsigned char const*, unsigned int)+0xc6>
 80054bc:	f894 f000 	pld	[r4]
 80054c0:	4641      	mov	r1, r8
 80054c2:	458b      	cmp	fp, r1
 80054c4:	d138      	bne.n	8005538 <WS28xxDmx::SetData(unsigned int, unsigned char const*, unsigned int)+0xe0>
 80054c6:	3501      	adds	r5, #1
 80054c8:	44c8      	add	r8, r9
 80054ca:	44cb      	add	fp, r9
 80054cc:	3404      	adds	r4, #4
 80054ce:	e7ee      	b.n	80054ae <WS28xxDmx::SetData(unsigned int, unsigned char const*, unsigned int)+0x56>
 80054d0:	6bbd      	ldr	r5, [r7, #56]	; 0x38
 80054d2:	442e      	add	r6, r5
 80054d4:	4296      	cmp	r6, r2
 80054d6:	bf28      	it	cs
 80054d8:	4616      	movcs	r6, r2
 80054da:	4604      	mov	r4, r0
 80054dc:	e7de      	b.n	800549c <WS28xxDmx::SetData(unsigned int, unsigned char const*, unsigned int)+0x44>
 80054de:	6bfd      	ldr	r5, [r7, #60]	; 0x3c
 80054e0:	e7f7      	b.n	80054d2 <WS28xxDmx::SetData(unsigned int, unsigned char const*, unsigned int)+0x7a>
 80054e2:	4605      	mov	r5, r0
 80054e4:	4604      	mov	r4, r0
 80054e6:	e7d9      	b.n	800549c <WS28xxDmx::SetData(unsigned int, unsigned char const*, unsigned int)+0x44>
 80054e8:	78a2      	ldrb	r2, [r4, #2]
 80054ea:	7863      	ldrb	r3, [r4, #1]
 80054ec:	9200      	str	r2, [sp, #0]
 80054ee:	7822      	ldrb	r2, [r4, #0]
 80054f0:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 80054f2:	9105      	str	r1, [sp, #20]
 80054f4:	f000 fd8e 	bl	8006014 <WS28xx::SetPixel(unsigned int, unsigned char, unsigned char, unsigned char)>
 80054f8:	9905      	ldr	r1, [sp, #20]
 80054fa:	3101      	adds	r1, #1
 80054fc:	e007      	b.n	800550e <WS28xxDmx::SetData(unsigned int, unsigned char const*, unsigned int)+0xb6>
 80054fe:	9a03      	ldr	r2, [sp, #12]
 8005500:	eba4 030a 	sub.w	r3, r4, sl
 8005504:	429a      	cmp	r2, r3
 8005506:	d90a      	bls.n	800551e <WS28xxDmx::SetData(unsigned int, unsigned char const*, unsigned int)+0xc6>
 8005508:	f894 f000 	pld	[r4]
 800550c:	4641      	mov	r1, r8
 800550e:	458b      	cmp	fp, r1
 8005510:	d1ea      	bne.n	80054e8 <WS28xxDmx::SetData(unsigned int, unsigned char const*, unsigned int)+0x90>
 8005512:	3501      	adds	r5, #1
 8005514:	44c8      	add	r8, r9
 8005516:	44cb      	add	fp, r9
 8005518:	3403      	adds	r4, #3
 800551a:	42ae      	cmp	r6, r5
 800551c:	d8ef      	bhi.n	80054fe <WS28xxDmx::SetData(unsigned int, unsigned char const*, unsigned int)+0xa6>
 800551e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005520:	9a04      	ldr	r2, [sp, #16]
 8005522:	4293      	cmp	r3, r2
 8005524:	d115      	bne.n	8005552 <WS28xxDmx::SetData(unsigned int, unsigned char const*, unsigned int)+0xfa>
 8005526:	f897 3059 	ldrb.w	r3, [r7, #89]	; 0x59
 800552a:	b993      	cbnz	r3, 8005552 <WS28xxDmx::SetData(unsigned int, unsigned char const*, unsigned int)+0xfa>
 800552c:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800552e:	b007      	add	sp, #28
 8005530:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005534:	f001 bb56 	b.w	8006be4 <WS28xx::Update()>
 8005538:	78e2      	ldrb	r2, [r4, #3]
 800553a:	7863      	ldrb	r3, [r4, #1]
 800553c:	9201      	str	r2, [sp, #4]
 800553e:	78a2      	ldrb	r2, [r4, #2]
 8005540:	9200      	str	r2, [sp, #0]
 8005542:	7822      	ldrb	r2, [r4, #0]
 8005544:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8005546:	9105      	str	r1, [sp, #20]
 8005548:	f001 f9de 	bl	8006908 <WS28xx::SetPixel(unsigned int, unsigned char, unsigned char, unsigned char, unsigned char)>
 800554c:	9905      	ldr	r1, [sp, #20]
 800554e:	3101      	adds	r1, #1
 8005550:	e7b7      	b.n	80054c2 <WS28xxDmx::SetData(unsigned int, unsigned char const*, unsigned int)+0x6a>
 8005552:	b007      	add	sp, #28
 8005554:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08005558 <WS28xxDmx::FullOn()>:
 8005558:	b510      	push	{r4, lr}
 800555a:	4604      	mov	r4, r0
 800555c:	f004 f97c 	bl	8009858 <gd32_spi_dma_tx_is_active()>
 8005560:	2800      	cmp	r0, #0
 8005562:	d1fb      	bne.n	800555c <WS28xxDmx::FullOn()+0x4>
 8005564:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8005566:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800556a:	f001 bb9e 	b.w	8006caa <WS28xx::FullOn()>

0800556e <WS28xxDmx::Print()>:
 800556e:	3004      	adds	r0, #4
 8005570:	f7ff bf28 	b.w	80053c4 <PixelDmxConfiguration::Print()>

08005574 <WS28xxDmx::Start(unsigned int)>:
 8005574:	f890 3058 	ldrb.w	r3, [r0, #88]	; 0x58
 8005578:	b93b      	cbnz	r3, 800558a <WS28xxDmx::Start(unsigned int)+0x16>
 800557a:	2301      	movs	r3, #1
 800557c:	f880 3058 	strb.w	r3, [r0, #88]	; 0x58
 8005580:	6d40      	ldr	r0, [r0, #84]	; 0x54
 8005582:	b110      	cbz	r0, 800558a <WS28xxDmx::Start(unsigned int)+0x16>
 8005584:	6803      	ldr	r3, [r0, #0]
 8005586:	689b      	ldr	r3, [r3, #8]
 8005588:	4718      	bx	r3
 800558a:	4770      	bx	lr

0800558c <WS28xxDmx::Stop(unsigned int)>:
 800558c:	f890 3058 	ldrb.w	r3, [r0, #88]	; 0x58
 8005590:	b13b      	cbz	r3, 80055a2 <WS28xxDmx::Stop(unsigned int)+0x16>
 8005592:	2300      	movs	r3, #0
 8005594:	f880 3058 	strb.w	r3, [r0, #88]	; 0x58
 8005598:	6d40      	ldr	r0, [r0, #84]	; 0x54
 800559a:	b110      	cbz	r0, 80055a2 <WS28xxDmx::Stop(unsigned int)+0x16>
 800559c:	6803      	ldr	r3, [r0, #0]
 800559e:	68db      	ldr	r3, [r3, #12]
 80055a0:	4718      	bx	r3
 80055a2:	4770      	bx	lr

080055a4 <WS28xxDmx::SetDmxStartAddress(unsigned short)>:
 80055a4:	f8b0 2048 	ldrh.w	r2, [r0, #72]	; 0x48
 80055a8:	428a      	cmp	r2, r1
 80055aa:	b508      	push	{r3, lr}
 80055ac:	d101      	bne.n	80055b2 <WS28xxDmx::SetDmxStartAddress(unsigned short)+0xe>
 80055ae:	2001      	movs	r0, #1
 80055b0:	bd08      	pop	{r3, pc}
 80055b2:	f8b0 204a 	ldrh.w	r2, [r0, #74]	; 0x4a
 80055b6:	440a      	add	r2, r1
 80055b8:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 80055bc:	dc0c      	bgt.n	80055d8 <WS28xxDmx::SetDmxStartAddress(unsigned short)+0x34>
 80055be:	1e4a      	subs	r2, r1, #1
 80055c0:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 80055c4:	d208      	bcs.n	80055d8 <WS28xxDmx::SetDmxStartAddress(unsigned short)+0x34>
 80055c6:	f8a0 1048 	strh.w	r1, [r0, #72]	; 0x48
 80055ca:	6d00      	ldr	r0, [r0, #80]	; 0x50
 80055cc:	2800      	cmp	r0, #0
 80055ce:	d0ee      	beq.n	80055ae <WS28xxDmx::SetDmxStartAddress(unsigned short)+0xa>
 80055d0:	6803      	ldr	r3, [r0, #0]
 80055d2:	69db      	ldr	r3, [r3, #28]
 80055d4:	4798      	blx	r3
 80055d6:	e7ea      	b.n	80055ae <WS28xxDmx::SetDmxStartAddress(unsigned short)+0xa>
 80055d8:	2000      	movs	r0, #0
 80055da:	e7e9      	b.n	80055b0 <WS28xxDmx::SetDmxStartAddress(unsigned short)+0xc>

080055dc <WS28xxDmx::GetSlotInfo(unsigned short, lightset::SlotInfo&)>:
 80055dc:	f8b0 304a 	ldrh.w	r3, [r0, #74]	; 0x4a
 80055e0:	428b      	cmp	r3, r1
 80055e2:	f04f 0300 	mov.w	r3, #0
 80055e6:	d319      	bcc.n	800561c <WS28xxDmx::GetSlotInfo(unsigned short, lightset::SlotInfo&)+0x40>
 80055e8:	7093      	strb	r3, [r2, #2]
 80055ea:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80055ec:	fbb1 f0f3 	udiv	r0, r1, r3
 80055f0:	fb03 1110 	mls	r1, r3, r0, r1
 80055f4:	2903      	cmp	r1, #3
 80055f6:	d80e      	bhi.n	8005616 <WS28xxDmx::GetSlotInfo(unsigned short, lightset::SlotInfo&)+0x3a>
 80055f8:	e8df f001 	tbb	[pc, r1]
 80055fc:	0d0a0702 	stceq	7, cr0, [sl, #-8]
 8005600:	f240 2305 	movw	r3, #517	; 0x205
 8005604:	8013      	strh	r3, [r2, #0]
 8005606:	2001      	movs	r0, #1
 8005608:	4770      	bx	lr
 800560a:	f240 2306 	movw	r3, #518	; 0x206
 800560e:	e7f9      	b.n	8005604 <WS28xxDmx::GetSlotInfo(unsigned short, lightset::SlotInfo&)+0x28>
 8005610:	f240 2307 	movw	r3, #519	; 0x207
 8005614:	e7f6      	b.n	8005604 <WS28xxDmx::GetSlotInfo(unsigned short, lightset::SlotInfo&)+0x28>
 8005616:	f240 2312 	movw	r3, #530	; 0x212
 800561a:	e7f3      	b.n	8005604 <WS28xxDmx::GetSlotInfo(unsigned short, lightset::SlotInfo&)+0x28>
 800561c:	4618      	mov	r0, r3
 800561e:	4770      	bx	lr

08005620 <WS28xxDmx::WS28xxDmx(PixelDmxConfiguration&)>:
 8005620:	b570      	push	{r4, r5, r6, lr}
 8005622:	4605      	mov	r5, r0
 8005624:	4b19      	ldr	r3, [pc, #100]	; (800568c <WS28xxDmx::WS28xxDmx(PixelDmxConfiguration&)+0x6c>)
 8005626:	f845 3b04 	str.w	r3, [r5], #4
 800562a:	460e      	mov	r6, r1
 800562c:	4604      	mov	r4, r0
 800562e:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8005630:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005632:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8005634:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005636:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 800563a:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 800563e:	2300      	movs	r3, #0
 8005640:	e9c4 3313 	strd	r3, r3, [r4, #76]	; 0x4c
 8005644:	6563      	str	r3, [r4, #84]	; 0x54
 8005646:	f8a4 3058 	strh.w	r3, [r4, #88]	; 0x58
 800564a:	4b11      	ldr	r3, [pc, #68]	; (8005690 <WS28xxDmx::WS28xxDmx(PixelDmxConfiguration&)+0x70>)
 800564c:	1d26      	adds	r6, r4, #4
 800564e:	f104 0244 	add.w	r2, r4, #68	; 0x44
 8005652:	601c      	str	r4, [r3, #0]
 8005654:	2101      	movs	r1, #1
 8005656:	f104 0334 	add.w	r3, r4, #52	; 0x34
 800565a:	4630      	mov	r0, r6
 800565c:	f7ff fe6e 	bl	800533c <PixelDmxConfiguration::Validate(unsigned int, unsigned int&, pixeldmxconfiguration::PortInfo&)>
 8005660:	2028      	movs	r0, #40	; 0x28
 8005662:	f002 fe96 	bl	8008392 <operator new(unsigned int)>
 8005666:	4631      	mov	r1, r6
 8005668:	4605      	mov	r5, r0
 800566a:	f001 fa77 	bl	8006b5c <WS28xx::WS28xx(PixelConfiguration&)>
 800566e:	4628      	mov	r0, r5
 8005670:	64e5      	str	r5, [r4, #76]	; 0x4c
 8005672:	f001 fad3 	bl	8006c1c <WS28xx::Blackout()>
 8005676:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 8005678:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800567a:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
 800567e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8005680:	fb13 f302 	smulbb	r3, r3, r2
 8005684:	f8a4 304a 	strh.w	r3, [r4, #74]	; 0x4a
 8005688:	4620      	mov	r0, r4
 800568a:	bd70      	pop	{r4, r5, r6, pc}
 800568c:	0800aeac 	stmdaeq	r0, {r2, r3, r5, r7, r9, sl, fp, sp, pc}
 8005690:	200005e8 	andcs	r0, r0, r8, ror #11

08005694 <PixelDmxParams::PixelDmxParams(PixelDmxParamsStore*)>:
 8005694:	4a07      	ldr	r2, [pc, #28]	; (80056b4 <PixelDmxParams::PixelDmxParams(PixelDmxParamsStore*)+0x20>)
 8005696:	6001      	str	r1, [r0, #0]
 8005698:	2100      	movs	r1, #0
 800569a:	e9c0 1201 	strd	r1, r2, [r0, #4]
 800569e:	4a06      	ldr	r2, [pc, #24]	; (80056b8 <PixelDmxParams::PixelDmxParams(PixelDmxParamsStore*)+0x24>)
 80056a0:	4906      	ldr	r1, [pc, #24]	; (80056bc <PixelDmxParams::PixelDmxParams(PixelDmxParamsStore*)+0x28>)
 80056a2:	f04f 6c10 	mov.w	ip, #150994944	; 0x9000000
 80056a6:	e9c0 c203 	strd	ip, r2, [r0, #12]
 80056aa:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80056ae:	e9c0 1205 	strd	r1, r2, [r0, #20]
 80056b2:	4770      	bx	lr
 80056b4:	0100aa03 	tsteq	r0, r3, lsl #20
 80056b8:	01ff003d 	mvnseq	r0, sp, lsr r0
 80056bc:	06000100 	streq	r0, [r0], -r0, lsl #2

080056c0 <PixelDmxParams::Load()>:
 80056c0:	b508      	push	{r3, lr}
 80056c2:	2300      	movs	r3, #0
 80056c4:	4601      	mov	r1, r0
 80056c6:	6043      	str	r3, [r0, #4]
 80056c8:	6800      	ldr	r0, [r0, #0]
 80056ca:	b120      	cbz	r0, 80056d6 <PixelDmxParams::Load()+0x16>
 80056cc:	6803      	ldr	r3, [r0, #0]
 80056ce:	3104      	adds	r1, #4
 80056d0:	68db      	ldr	r3, [r3, #12]
 80056d2:	4798      	blx	r3
 80056d4:	2001      	movs	r0, #1
 80056d6:	bd08      	pop	{r3, pc}

080056d8 <PixelDmxParams::Set(PixelDmxConfiguration*)>:
 80056d8:	6843      	ldr	r3, [r0, #4]
 80056da:	07da      	lsls	r2, r3, #31
 80056dc:	bf44      	itt	mi
 80056de:	7a02      	ldrbmi	r2, [r0, #8]
 80056e0:	600a      	strmi	r2, [r1, #0]
 80056e2:	079a      	lsls	r2, r3, #30
 80056e4:	d505      	bpl.n	80056f2 <PixelDmxParams::Set(PixelDmxConfiguration*)+0x1a>
 80056e6:	f8b0 2009 	ldrh.w	r2, [r0, #9]
 80056ea:	2a00      	cmp	r2, #0
 80056ec:	bf08      	it	eq
 80056ee:	22aa      	moveq	r2, #170	; 0xaa
 80056f0:	604a      	str	r2, [r1, #4]
 80056f2:	059a      	lsls	r2, r3, #22
 80056f4:	bf44      	itt	mi
 80056f6:	7dc2      	ldrbmi	r2, [r0, #23]
 80056f8:	608a      	strmi	r2, [r1, #8]
 80056fa:	055a      	lsls	r2, r3, #21
 80056fc:	bf44      	itt	mi
 80056fe:	7e02      	ldrbmi	r2, [r0, #24]
 8005700:	740a      	strbmi	r2, [r1, #16]
 8005702:	051a      	lsls	r2, r3, #20
 8005704:	bf44      	itt	mi
 8005706:	7e42      	ldrbmi	r2, [r0, #25]
 8005708:	744a      	strbmi	r2, [r1, #17]
 800570a:	06da      	lsls	r2, r3, #27
 800570c:	bf44      	itt	mi
 800570e:	f8d0 200e 	ldrmi.w	r2, [r0, #14]
 8005712:	60ca      	strmi	r2, [r1, #12]
 8005714:	069a      	lsls	r2, r3, #26
 8005716:	bf44      	itt	mi
 8005718:	7c82      	ldrbmi	r2, [r0, #18]
 800571a:	748a      	strbmi	r2, [r1, #18]
 800571c:	061a      	lsls	r2, r3, #24
 800571e:	d504      	bpl.n	800572a <PixelDmxParams::Set(PixelDmxConfiguration*)+0x52>
 8005720:	2201      	movs	r2, #1
 8005722:	750a      	strb	r2, [r1, #20]
 8005724:	7b42      	ldrb	r2, [r0, #13]
 8005726:	b102      	cbz	r2, 800572a <PixelDmxParams::Set(PixelDmxConfiguration*)+0x52>
 8005728:	74ca      	strb	r2, [r1, #19]
 800572a:	075a      	lsls	r2, r3, #29
 800572c:	d50b      	bpl.n	8005746 <PixelDmxParams::Set(PixelDmxConfiguration*)+0x6e>
 800572e:	7ac2      	ldrb	r2, [r0, #11]
 8005730:	b510      	push	{r4, lr}
 8005732:	7b04      	ldrb	r4, [r0, #12]
 8005734:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
 8005738:	858a      	strh	r2, [r1, #44]	; 0x2c
 800573a:	05da      	lsls	r2, r3, #23
 800573c:	bf44      	itt	mi
 800573e:	f8b0 3015 	ldrhmi.w	r3, [r0, #21]
 8005742:	620b      	strmi	r3, [r1, #32]
 8005744:	bd10      	pop	{r4, pc}
 8005746:	05db      	lsls	r3, r3, #23
 8005748:	bf44      	itt	mi
 800574a:	f8b0 3015 	ldrhmi.w	r3, [r0, #21]
 800574e:	620b      	strmi	r3, [r1, #32]
 8005750:	4770      	bx	lr

08005752 <PixelDmxParams::Dump()>:
 8005752:	4770      	bx	lr

08005754 <LightSet::Blackout(bool)>:
 8005754:	4770      	bx	lr

08005756 <LightSet::FullOn()>:
 8005756:	4770      	bx	lr

08005758 <LightSet::Print()>:
 8005758:	4770      	bx	lr

0800575a <PixelDmxParamsRdm::SetDmxStartAddress(unsigned short)>:
 800575a:	2000      	movs	r0, #0
 800575c:	4770      	bx	lr

0800575e <PixelDmxParamsRdm::GetDmxStartAddress()>:
 800575e:	2001      	movs	r0, #1
 8005760:	4770      	bx	lr

08005762 <PixelDmxParamsRdm::GetDmxFootprint()>:
 8005762:	2006      	movs	r0, #6
 8005764:	4770      	bx	lr

08005766 <PixelDmxParamsRdm::Stop(unsigned int)>:
 8005766:	4770      	bx	lr

08005768 <PixelDmxParamsRdm::GetSlotInfo(unsigned short, lightset::SlotInfo&)>:
 8005768:	2905      	cmp	r1, #5
 800576a:	f04f 0000 	mov.w	r0, #0
 800576e:	bf9f      	itttt	ls
 8005770:	f64f 73ff 	movwls	r3, #65535	; 0xffff
 8005774:	7090      	strbls	r0, [r2, #2]
 8005776:	8013      	strhls	r3, [r2, #0]
 8005778:	2001      	movls	r0, #1
 800577a:	4770      	bx	lr

0800577c <PixelDmxParamsRdm::~PixelDmxParamsRdm()>:
 800577c:	4770      	bx	lr

0800577e <PixelDmxParamsRdm::~PixelDmxParamsRdm()>:
 800577e:	b510      	push	{r4, lr}
 8005780:	4604      	mov	r4, r0
 8005782:	f002 fe02 	bl	800838a <operator delete(void*)>
 8005786:	4620      	mov	r0, r4
 8005788:	bd10      	pop	{r4, pc}
	...

0800578c <PixelDmxParamsRdm::PixelDmxParamsRdm(PixelDmxStore*)>:
 800578c:	4b02      	ldr	r3, [pc, #8]	; (8005798 <PixelDmxParamsRdm::PixelDmxParamsRdm(PixelDmxStore*)+0xc>)
 800578e:	6003      	str	r3, [r0, #0]
 8005790:	4b02      	ldr	r3, [pc, #8]	; (800579c <PixelDmxParamsRdm::PixelDmxParamsRdm(PixelDmxStore*)+0x10>)
 8005792:	6019      	str	r1, [r3, #0]
 8005794:	4770      	bx	lr
 8005796:	bf00      	nop
 8005798:	0800aee4 	stmdaeq	r0, {r2, r5, r6, r7, r9, sl, fp, sp, pc}
 800579c:	200005ec 	andcs	r0, r0, ip, ror #11

080057a0 <PixelDmxParamsRdm::SetData(unsigned int, unsigned char const*, unsigned int)>:
 80057a0:	2b05      	cmp	r3, #5
 80057a2:	b570      	push	{r4, r5, r6, lr}
 80057a4:	4606      	mov	r6, r0
 80057a6:	4614      	mov	r4, r2
 80057a8:	d934      	bls.n	8005814 <PixelDmxParamsRdm::SetData(unsigned int, unsigned char const*, unsigned int)+0x74>
 80057aa:	7953      	ldrb	r3, [r2, #5]
 80057ac:	b933      	cbnz	r3, 80057bc <PixelDmxParamsRdm::SetData(unsigned int, unsigned char const*, unsigned int)+0x1c>
 80057ae:	4a1a      	ldr	r2, [pc, #104]	; (8005818 <PixelDmxParamsRdm::SetData(unsigned int, unsigned char const*, unsigned int)+0x78>)
 80057b0:	7013      	strb	r3, [r2, #0]
 80057b2:	4621      	mov	r1, r4
 80057b4:	4630      	mov	r0, r6
 80057b6:	f7fb fcff 	bl	80011b8 <PixelDmxParamsRdm::Display(unsigned char const*)>
 80057ba:	e02b      	b.n	8005814 <PixelDmxParamsRdm::SetData(unsigned int, unsigned char const*, unsigned int)+0x74>
 80057bc:	2bff      	cmp	r3, #255	; 0xff
 80057be:	d124      	bne.n	800580a <PixelDmxParamsRdm::SetData(unsigned int, unsigned char const*, unsigned int)+0x6a>
 80057c0:	4a15      	ldr	r2, [pc, #84]	; (8005818 <PixelDmxParamsRdm::SetData(unsigned int, unsigned char const*, unsigned int)+0x78>)
 80057c2:	7811      	ldrb	r1, [r2, #0]
 80057c4:	2900      	cmp	r1, #0
 80057c6:	d1f4      	bne.n	80057b2 <PixelDmxParamsRdm::SetData(unsigned int, unsigned char const*, unsigned int)+0x12>
 80057c8:	4d14      	ldr	r5, [pc, #80]	; (800581c <PixelDmxParamsRdm::SetData(unsigned int, unsigned char const*, unsigned int)+0x7c>)
 80057ca:	7013      	strb	r3, [r2, #0]
 80057cc:	6828      	ldr	r0, [r5, #0]
 80057ce:	7821      	ldrb	r1, [r4, #0]
 80057d0:	6803      	ldr	r3, [r0, #0]
 80057d2:	290e      	cmp	r1, #14
 80057d4:	bf28      	it	cs
 80057d6:	210e      	movcs	r1, #14
 80057d8:	689b      	ldr	r3, [r3, #8]
 80057da:	4798      	blx	r3
 80057dc:	6828      	ldr	r0, [r5, #0]
 80057de:	7861      	ldrb	r1, [r4, #1]
 80057e0:	6803      	ldr	r3, [r0, #0]
 80057e2:	68db      	ldr	r3, [r3, #12]
 80057e4:	4798      	blx	r3
 80057e6:	6828      	ldr	r0, [r5, #0]
 80057e8:	78a1      	ldrb	r1, [r4, #2]
 80057ea:	6803      	ldr	r3, [r0, #0]
 80057ec:	691b      	ldr	r3, [r3, #16]
 80057ee:	4798      	blx	r3
 80057f0:	6828      	ldr	r0, [r5, #0]
 80057f2:	78e1      	ldrb	r1, [r4, #3]
 80057f4:	6803      	ldr	r3, [r0, #0]
 80057f6:	2906      	cmp	r1, #6
 80057f8:	695b      	ldr	r3, [r3, #20]
 80057fa:	bf28      	it	cs
 80057fc:	2106      	movcs	r1, #6
 80057fe:	4798      	blx	r3
 8005800:	6828      	ldr	r0, [r5, #0]
 8005802:	7921      	ldrb	r1, [r4, #4]
 8005804:	6803      	ldr	r3, [r0, #0]
 8005806:	699b      	ldr	r3, [r3, #24]
 8005808:	4798      	blx	r3
 800580a:	7963      	ldrb	r3, [r4, #5]
 800580c:	3b01      	subs	r3, #1
 800580e:	b2db      	uxtb	r3, r3
 8005810:	2bfd      	cmp	r3, #253	; 0xfd
 8005812:	d8ce      	bhi.n	80057b2 <PixelDmxParamsRdm::SetData(unsigned int, unsigned char const*, unsigned int)+0x12>
 8005814:	bd70      	pop	{r4, r5, r6, pc}
 8005816:	bf00      	nop
 8005818:	200005f0 	strdcs	r0, [r0], -r0	; <UNPREDICTABLE>
 800581c:	200005ec 	andcs	r0, r0, ip, ror #11

08005820 <PixelConfiguration::GetTxH(pixel::Type, unsigned char&, unsigned char&)>:
 8005820:	23c0      	movs	r3, #192	; 0xc0
 8005822:	2803      	cmp	r0, #3
 8005824:	700b      	strb	r3, [r1, #0]
 8005826:	d006      	beq.n	8005836 <PixelConfiguration::GetTxH(pixel::Type, unsigned char&, unsigned char&)+0x16>
 8005828:	3808      	subs	r0, #8
 800582a:	2803      	cmp	r0, #3
 800582c:	bf34      	ite	cc
 800582e:	23fc      	movcc	r3, #252	; 0xfc
 8005830:	23f0      	movcs	r3, #240	; 0xf0
 8005832:	7013      	strb	r3, [r2, #0]
 8005834:	4770      	bx	lr
 8005836:	23f8      	movs	r3, #248	; 0xf8
 8005838:	e7fb      	b.n	8005832 <PixelConfiguration::GetTxH(pixel::Type, unsigned char&, unsigned char&)+0x12>
	...

0800583c <PixelConfiguration::Validate(unsigned int&)>:
 800583c:	b513      	push	{r0, r1, r4, lr}
 800583e:	4604      	mov	r4, r0
 8005840:	6800      	ldr	r0, [r0, #0]
 8005842:	6863      	ldr	r3, [r4, #4]
 8005844:	68a2      	ldr	r2, [r4, #8]
 8005846:	2807      	cmp	r0, #7
 8005848:	d127      	bne.n	800589a <PixelConfiguration::Validate(unsigned int&)+0x5e>
 800584a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800584e:	bf28      	it	cs
 8005850:	f44f 7300 	movcs.w	r3, #512	; 0x200
 8005854:	6063      	str	r3, [r4, #4]
 8005856:	2304      	movs	r3, #4
 8005858:	600b      	str	r3, [r1, #0]
 800585a:	2301      	movs	r3, #1
 800585c:	2a06      	cmp	r2, #6
 800585e:	7563      	strb	r3, [r4, #21]
 8005860:	d102      	bne.n	8005868 <PixelConfiguration::Validate(unsigned int&)+0x2c>
 8005862:	f000 f901 	bl	8005a68 <PixelType::GetMap(pixel::Type)>
 8005866:	60a0      	str	r0, [r4, #8]
 8005868:	7c63      	ldrb	r3, [r4, #17]
 800586a:	7c22      	ldrb	r2, [r4, #16]
 800586c:	6820      	ldr	r0, [r4, #0]
 800586e:	429a      	cmp	r2, r3
 8005870:	bf24      	itt	cs
 8005872:	2300      	movcs	r3, #0
 8005874:	8223      	strhcs	r3, [r4, #16]
 8005876:	f10d 0207 	add.w	r2, sp, #7
 800587a:	f10d 0106 	add.w	r1, sp, #6
 800587e:	f7ff ffcf 	bl	8005820 <PixelConfiguration::GetTxH(pixel::Type, unsigned char&, unsigned char&)>
 8005882:	7c23      	ldrb	r3, [r4, #16]
 8005884:	b913      	cbnz	r3, 800588c <PixelConfiguration::Validate(unsigned int&)+0x50>
 8005886:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800588a:	7423      	strb	r3, [r4, #16]
 800588c:	7c63      	ldrb	r3, [r4, #17]
 800588e:	b913      	cbnz	r3, 8005896 <PixelConfiguration::Validate(unsigned int&)+0x5a>
 8005890:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8005894:	7463      	strb	r3, [r4, #17]
 8005896:	4b2a      	ldr	r3, [pc, #168]	; (8005940 <PixelConfiguration::Validate(unsigned int&)+0x104>)
 8005898:	e01e      	b.n	80058d8 <PixelConfiguration::Validate(unsigned int&)+0x9c>
 800589a:	f5b3 7f2a 	cmp.w	r3, #680	; 0x2a8
 800589e:	bf28      	it	cs
 80058a0:	f44f 732a 	movcs.w	r3, #680	; 0x2a8
 80058a4:	6063      	str	r3, [r4, #4]
 80058a6:	2303      	movs	r3, #3
 80058a8:	600b      	str	r3, [r1, #0]
 80058aa:	f1a0 030b 	sub.w	r3, r0, #11
 80058ae:	2b01      	cmp	r3, #1
 80058b0:	d806      	bhi.n	80058c0 <PixelConfiguration::Validate(unsigned int&)+0x84>
 80058b2:	7ca3      	ldrb	r3, [r4, #18]
 80058b4:	2b1f      	cmp	r3, #31
 80058b6:	d83d      	bhi.n	8005934 <PixelConfiguration::Validate(unsigned int&)+0xf8>
 80058b8:	f043 03e0 	orr.w	r3, r3, #224	; 0xe0
 80058bc:	74a3      	strb	r3, [r4, #18]
 80058be:	e001      	b.n	80058c4 <PixelConfiguration::Validate(unsigned int&)+0x88>
 80058c0:	2800      	cmp	r0, #0
 80058c2:	d139      	bne.n	8005938 <PixelConfiguration::Validate(unsigned int&)+0xfc>
 80058c4:	2300      	movs	r3, #0
 80058c6:	2a06      	cmp	r2, #6
 80058c8:	bf08      	it	eq
 80058ca:	60a3      	streq	r3, [r4, #8]
 80058cc:	280d      	cmp	r0, #13
 80058ce:	7563      	strb	r3, [r4, #21]
 80058d0:	68e3      	ldr	r3, [r4, #12]
 80058d2:	d119      	bne.n	8005908 <PixelConfiguration::Validate(unsigned int&)+0xcc>
 80058d4:	b913      	cbnz	r3, 80058dc <PixelConfiguration::Validate(unsigned int&)+0xa0>
 80058d6:	4b1b      	ldr	r3, [pc, #108]	; (8005944 <PixelConfiguration::Validate(unsigned int&)+0x108>)
 80058d8:	60e3      	str	r3, [r4, #12]
 80058da:	e003      	b.n	80058e4 <PixelConfiguration::Validate(unsigned int&)+0xa8>
 80058dc:	4a1a      	ldr	r2, [pc, #104]	; (8005948 <PixelConfiguration::Validate(unsigned int&)+0x10c>)
 80058de:	4293      	cmp	r3, r2
 80058e0:	d900      	bls.n	80058e4 <PixelConfiguration::Validate(unsigned int&)+0xa8>
 80058e2:	60e2      	str	r2, [r4, #12]
 80058e4:	7d23      	ldrb	r3, [r4, #20]
 80058e6:	b31b      	cbz	r3, 8005930 <PixelConfiguration::Validate(unsigned int&)+0xf4>
 80058e8:	7ce3      	ldrb	r3, [r4, #19]
 80058ea:	b9ab      	cbnz	r3, 8005918 <PixelConfiguration::Validate(unsigned int&)+0xdc>
 80058ec:	6822      	ldr	r2, [r4, #0]
 80058ee:	b17a      	cbz	r2, 8005910 <PixelConfiguration::Validate(unsigned int&)+0xd4>
 80058f0:	f1a2 030b 	sub.w	r3, r2, #11
 80058f4:	2b01      	cmp	r3, #1
 80058f6:	d90d      	bls.n	8005914 <PixelConfiguration::Validate(unsigned int&)+0xd8>
 80058f8:	4b14      	ldr	r3, [pc, #80]	; (800594c <PixelConfiguration::Validate(unsigned int&)+0x110>)
 80058fa:	4915      	ldr	r1, [pc, #84]	; (8005950 <PixelConfiguration::Validate(unsigned int&)+0x114>)
 80058fc:	2a0d      	cmp	r2, #13
 80058fe:	bf08      	it	eq
 8005900:	460b      	moveq	r3, r1
 8005902:	61a3      	str	r3, [r4, #24]
 8005904:	b002      	add	sp, #8
 8005906:	bd10      	pop	{r4, pc}
 8005908:	2b00      	cmp	r3, #0
 800590a:	d0e4      	beq.n	80058d6 <PixelConfiguration::Validate(unsigned int&)+0x9a>
 800590c:	4a11      	ldr	r2, [pc, #68]	; (8005954 <PixelConfiguration::Validate(unsigned int&)+0x118>)
 800590e:	e7e6      	b.n	80058de <PixelConfiguration::Validate(unsigned int&)+0xa2>
 8005910:	4b11      	ldr	r3, [pc, #68]	; (8005958 <PixelConfiguration::Validate(unsigned int&)+0x11c>)
 8005912:	e7f6      	b.n	8005902 <PixelConfiguration::Validate(unsigned int&)+0xc6>
 8005914:	4b11      	ldr	r3, [pc, #68]	; (800595c <PixelConfiguration::Validate(unsigned int&)+0x120>)
 8005916:	e7f4      	b.n	8005902 <PixelConfiguration::Validate(unsigned int&)+0xc6>
 8005918:	f1a3 0214 	sub.w	r2, r3, #20
 800591c:	2a05      	cmp	r2, #5
 800591e:	d807      	bhi.n	8005930 <PixelConfiguration::Validate(unsigned int&)+0xf4>
 8005920:	3b15      	subs	r3, #21
 8005922:	2b04      	cmp	r3, #4
 8005924:	bf96      	itet	ls
 8005926:	4a0e      	ldrls	r2, [pc, #56]	; (8005960 <PixelConfiguration::Validate(unsigned int&)+0x124>)
 8005928:	4b0e      	ldrhi	r3, [pc, #56]	; (8005964 <PixelConfiguration::Validate(unsigned int&)+0x128>)
 800592a:	f852 3023 	ldrls.w	r3, [r2, r3, lsl #2]
 800592e:	e7e8      	b.n	8005902 <PixelConfiguration::Validate(unsigned int&)+0xc6>
 8005930:	4b07      	ldr	r3, [pc, #28]	; (8005950 <PixelConfiguration::Validate(unsigned int&)+0x114>)
 8005932:	e7e6      	b.n	8005902 <PixelConfiguration::Validate(unsigned int&)+0xc6>
 8005934:	23ff      	movs	r3, #255	; 0xff
 8005936:	e7c1      	b.n	80058bc <PixelConfiguration::Validate(unsigned int&)+0x80>
 8005938:	280d      	cmp	r0, #13
 800593a:	d18e      	bne.n	800585a <PixelConfiguration::Validate(unsigned int&)+0x1e>
 800593c:	e7c2      	b.n	80058c4 <PixelConfiguration::Validate(unsigned int&)+0x88>
 800593e:	bf00      	nop
 8005940:	0061a800 	rsbeq	sl, r1, r0, lsl #16
 8005944:	003d0900 	eorseq	r0, sp, r0, lsl #18
 8005948:	00e4e1c0 	rsceq	lr, r4, r0, asr #3
 800594c:	0800b2e8 	stmdaeq	r0, {r3, r5, r6, r7, r9, ip, sp, pc}
 8005950:	0800afe8 	stmdaeq	r0, {r3, r5, r6, r7, r8, r9, sl, fp, sp, pc}
 8005954:	017d7840 	cmneq	sp, r0, asr #16
 8005958:	0800b5e8 	stmdaeq	r0, {r3, r5, r6, r7, r8, sl, ip, sp, pc}
 800595c:	0800b6e8 	stmdaeq	r0, {r3, r5, r6, r7, r9, sl, ip, sp, pc}
 8005960:	0800afd4 	stmdaeq	r0, {r2, r4, r6, r7, r8, r9, sl, fp, sp, pc}
 8005964:	0800b0e8 	stmdaeq	r0, {r3, r5, r6, r7, ip, sp, pc}

08005968 <PixelConfiguration::Print()>:
 8005968:	b513      	push	{r0, r1, r4, lr}
 800596a:	4604      	mov	r4, r0
 800596c:	4827      	ldr	r0, [pc, #156]	; (8005a0c <PixelConfiguration::Print()+0xa4>)
 800596e:	f7fc f979 	bl	8001c64 <printf>
 8005972:	6820      	ldr	r0, [r4, #0]
 8005974:	f000 f860 	bl	8005a38 <PixelType::GetType(pixel::Type)>
 8005978:	6822      	ldr	r2, [r4, #0]
 800597a:	4601      	mov	r1, r0
 800597c:	4824      	ldr	r0, [pc, #144]	; (8005a10 <PixelConfiguration::Print()+0xa8>)
 800597e:	f7fc f971 	bl	8001c64 <printf>
 8005982:	6861      	ldr	r1, [r4, #4]
 8005984:	4823      	ldr	r0, [pc, #140]	; (8005a14 <PixelConfiguration::Print()+0xac>)
 8005986:	f7fc f96d 	bl	8001c64 <printf>
 800598a:	7d63      	ldrb	r3, [r4, #21]
 800598c:	2b00      	cmp	r3, #0
 800598e:	d034      	beq.n	80059fa <PixelConfiguration::Print()+0x92>
 8005990:	68a0      	ldr	r0, [r4, #8]
 8005992:	f000 f85d 	bl	8005a50 <PixelType::GetMap(pixel::Map)>
 8005996:	68a2      	ldr	r2, [r4, #8]
 8005998:	4601      	mov	r1, r0
 800599a:	481f      	ldr	r0, [pc, #124]	; (8005a18 <PixelConfiguration::Print()+0xb0>)
 800599c:	f7fc f962 	bl	8001c64 <printf>
 80059a0:	7c20      	ldrb	r0, [r4, #16]
 80059a2:	f000 f86b 	bl	8005a7c <PixelType::ConvertTxH(unsigned char)>
 80059a6:	ee10 0a10 	vmov	r0, s0
 80059aa:	f7fa fdcb 	bl	8000544 <__aeabi_f2d>
 80059ae:	460b      	mov	r3, r1
 80059b0:	7c21      	ldrb	r1, [r4, #16]
 80059b2:	9100      	str	r1, [sp, #0]
 80059b4:	4602      	mov	r2, r0
 80059b6:	4819      	ldr	r0, [pc, #100]	; (8005a1c <PixelConfiguration::Print()+0xb4>)
 80059b8:	f7fc f954 	bl	8001c64 <printf>
 80059bc:	7c60      	ldrb	r0, [r4, #17]
 80059be:	f000 f85d 	bl	8005a7c <PixelType::ConvertTxH(unsigned char)>
 80059c2:	ee10 0a10 	vmov	r0, s0
 80059c6:	f7fa fdbd 	bl	8000544 <__aeabi_f2d>
 80059ca:	460b      	mov	r3, r1
 80059cc:	7c61      	ldrb	r1, [r4, #17]
 80059ce:	9100      	str	r1, [sp, #0]
 80059d0:	4602      	mov	r2, r0
 80059d2:	4813      	ldr	r0, [pc, #76]	; (8005a20 <PixelConfiguration::Print()+0xb8>)
 80059d4:	f7fc f946 	bl	8001c64 <printf>
 80059d8:	7d21      	ldrb	r1, [r4, #20]
 80059da:	4a12      	ldr	r2, [pc, #72]	; (8005a24 <PixelConfiguration::Print()+0xbc>)
 80059dc:	4b12      	ldr	r3, [pc, #72]	; (8005a28 <PixelConfiguration::Print()+0xc0>)
 80059de:	4813      	ldr	r0, [pc, #76]	; (8005a2c <PixelConfiguration::Print()+0xc4>)
 80059e0:	2900      	cmp	r1, #0
 80059e2:	bf14      	ite	ne
 80059e4:	4611      	movne	r1, r2
 80059e6:	4619      	moveq	r1, r3
 80059e8:	f7fc f93c 	bl	8001c64 <printf>
 80059ec:	68e1      	ldr	r1, [r4, #12]
 80059ee:	4810      	ldr	r0, [pc, #64]	; (8005a30 <PixelConfiguration::Print()+0xc8>)
 80059f0:	b002      	add	sp, #8
 80059f2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80059f6:	f7fc b935 	b.w	8001c64 <printf>
 80059fa:	6823      	ldr	r3, [r4, #0]
 80059fc:	3b0b      	subs	r3, #11
 80059fe:	2b01      	cmp	r3, #1
 8005a00:	d8ea      	bhi.n	80059d8 <PixelConfiguration::Print()+0x70>
 8005a02:	7ca1      	ldrb	r1, [r4, #18]
 8005a04:	480b      	ldr	r0, [pc, #44]	; (8005a34 <PixelConfiguration::Print()+0xcc>)
 8005a06:	f7fc f92d 	bl	8001c64 <printf>
 8005a0a:	e7e5      	b.n	80059d8 <PixelConfiguration::Print()+0x70>
 8005a0c:	0800af1b 	stmdaeq	r0, {r0, r1, r3, r4, r8, r9, sl, fp, sp, pc}
 8005a10:	0800af30 	stmdaeq	r0, {r4, r5, r8, r9, sl, fp, sp, pc}
 8005a14:	0800af44 	stmdaeq	r0, {r2, r6, r8, r9, sl, fp, sp, pc}
 8005a18:	0800af53 	stmdaeq	r0, {r0, r1, r4, r6, r8, r9, sl, fp, sp, pc}
 8005a1c:	0800af67 	stmdaeq	r0, {r0, r1, r2, r5, r6, r8, r9, sl, fp, sp, pc}
 8005a20:	0800af7f 	stmdaeq	r0, {r0, r1, r2, r3, r4, r5, r6, r8, r9, sl, fp, sp, pc}
 8005a24:	0800af14 	stmdaeq	r0, {r2, r4, r8, r9, sl, fp, sp, pc}
 8005a28:	0800af18 	stmdaeq	r0, {r3, r4, r8, r9, sl, fp, sp, pc}
 8005a2c:	0800afae 	stmdaeq	r0, {r1, r2, r3, r5, r7, r8, r9, sl, fp, sp, pc}
 8005a30:	0800afc4 	stmdaeq	r0, {r2, r6, r7, r8, r9, sl, fp, sp, pc}
 8005a34:	0800af97 	stmdaeq	r0, {r0, r1, r2, r4, r7, r8, r9, sl, fp, sp, pc}

08005a38 <PixelType::GetType(pixel::Type)>:
 8005a38:	280d      	cmp	r0, #13
 8005a3a:	bfda      	itte	le
 8005a3c:	4b02      	ldrle	r3, [pc, #8]	; (8005a48 <PixelType::GetType(pixel::Type)+0x10>)
 8005a3e:	eb03 00c0 	addle.w	r0, r3, r0, lsl #3
 8005a42:	4802      	ldrgt	r0, [pc, #8]	; (8005a4c <PixelType::GetType(pixel::Type)+0x14>)
 8005a44:	4770      	bx	lr
 8005a46:	bf00      	nop
 8005a48:	0800b812 	stmdaeq	r0, {r1, r4, fp, ip, sp, pc}
 8005a4c:	0800b7e8 	stmdaeq	r0, {r3, r5, r6, r7, r8, r9, sl, ip, sp, pc}

08005a50 <PixelType::GetMap(pixel::Map)>:
 8005a50:	2805      	cmp	r0, #5
 8005a52:	bfda      	itte	le
 8005a54:	4b02      	ldrle	r3, [pc, #8]	; (8005a60 <PixelType::GetMap(pixel::Map)+0x10>)
 8005a56:	eb03 0080 	addle.w	r0, r3, r0, lsl #2
 8005a5a:	4802      	ldrgt	r0, [pc, #8]	; (8005a64 <PixelType::GetMap(pixel::Map)+0x14>)
 8005a5c:	4770      	bx	lr
 8005a5e:	bf00      	nop
 8005a60:	0800b7fa 	stmdaeq	r0, {r1, r3, r4, r5, r6, r7, r8, r9, sl, ip, sp, pc}
 8005a64:	0800a11f 	stmdaeq	r0, {r0, r1, r2, r3, r4, r8, sp, pc}

08005a68 <PixelType::GetMap(pixel::Type)>:
 8005a68:	3801      	subs	r0, #1
 8005a6a:	2809      	cmp	r0, #9
 8005a6c:	bf9a      	itte	ls
 8005a6e:	4b02      	ldrls	r3, [pc, #8]	; (8005a78 <PixelType::GetMap(pixel::Type)+0x10>)
 8005a70:	5618      	ldrsbls	r0, [r3, r0]
 8005a72:	2002      	movhi	r0, #2
 8005a74:	4770      	bx	lr
 8005a76:	bf00      	nop
 8005a78:	0800b7f0 	stmdaeq	r0, {r4, r5, r6, r7, r8, r9, sl, ip, sp, pc}

08005a7c <PixelType::ConvertTxH(unsigned char)>:
 8005a7c:	28f0      	cmp	r0, #240	; 0xf0
 8005a7e:	d017      	beq.n	8005ab0 <PixelType::ConvertTxH(unsigned char)+0x34>
 8005a80:	d80c      	bhi.n	8005a9c <PixelType::ConvertTxH(unsigned char)+0x20>
 8005a82:	28c0      	cmp	r0, #192	; 0xc0
 8005a84:	d017      	beq.n	8005ab6 <PixelType::ConvertTxH(unsigned char)+0x3a>
 8005a86:	28e0      	cmp	r0, #224	; 0xe0
 8005a88:	d018      	beq.n	8005abc <PixelType::ConvertTxH(unsigned char)+0x40>
 8005a8a:	ed9f 0a11 	vldr	s0, [pc, #68]	; 8005ad0 <PixelType::ConvertTxH(unsigned char)+0x54>
 8005a8e:	2880      	cmp	r0, #128	; 0x80
 8005a90:	eef4 7a04 	vmov.f32	s15, #68	; 0x3e200000  0.1562500
 8005a94:	bf08      	it	eq
 8005a96:	eeb0 0a67 	vmoveq.f32	s0, s15
 8005a9a:	4770      	bx	lr
 8005a9c:	28fc      	cmp	r0, #252	; 0xfc
 8005a9e:	d010      	beq.n	8005ac2 <PixelType::ConvertTxH(unsigned char)+0x46>
 8005aa0:	28fe      	cmp	r0, #254	; 0xfe
 8005aa2:	d011      	beq.n	8005ac8 <PixelType::ConvertTxH(unsigned char)+0x4c>
 8005aa4:	ed9f 0a0a 	vldr	s0, [pc, #40]	; 8005ad0 <PixelType::ConvertTxH(unsigned char)+0x54>
 8005aa8:	28f8      	cmp	r0, #248	; 0xf8
 8005aaa:	eef6 7a09 	vmov.f32	s15, #105	; 0x3f480000  0.7812500
 8005aae:	e7f1      	b.n	8005a94 <PixelType::ConvertTxH(unsigned char)+0x18>
 8005ab0:	eeb6 0a04 	vmov.f32	s0, #100	; 0x3f200000  0.625
 8005ab4:	4770      	bx	lr
 8005ab6:	eeb5 0a04 	vmov.f32	s0, #84	; 0x3ea00000  0.3125000
 8005aba:	4770      	bx	lr
 8005abc:	eeb5 0a0e 	vmov.f32	s0, #94	; 0x3ef00000  0.4687500
 8005ac0:	4770      	bx	lr
 8005ac2:	eeb6 0a0e 	vmov.f32	s0, #110	; 0x3f700000  0.9375000
 8005ac6:	4770      	bx	lr
 8005ac8:	ed9f 0a02 	vldr	s0, [pc, #8]	; 8005ad4 <PixelType::ConvertTxH(unsigned char)+0x58>
 8005acc:	4770      	bx	lr
 8005ace:	bf00      	nop
 8005ad0:	00000000 	andeq	r0, r0, r0
 8005ad4:	3f8c0000 	svccc	0x008c0000

08005ad8 <PixelPatterns::SetPixelColour(unsigned int, unsigned int, unsigned int) [clone .isra.0]>:
 8005ad8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005ada:	f3c1 2307 	ubfx	r3, r1, #8, #8
 8005ade:	f3c1 4207 	ubfx	r2, r1, #16, #8
 8005ae2:	b2cc      	uxtb	r4, r1
 8005ae4:	490e      	ldr	r1, [pc, #56]	; (8005b20 <PixelPatterns::SetPixelColour(unsigned int, unsigned int, unsigned int) [clone .isra.0]+0x48>)
 8005ae6:	4605      	mov	r5, r0
 8005ae8:	6808      	ldr	r0, [r1, #0]
 8005aea:	6801      	ldr	r1, [r0, #0]
 8005aec:	2907      	cmp	r1, #7
 8005aee:	d005      	beq.n	8005afc <PixelPatterns::SetPixelColour(unsigned int, unsigned int, unsigned int) [clone .isra.0]+0x24>
 8005af0:	9400      	str	r4, [sp, #0]
 8005af2:	4629      	mov	r1, r5
 8005af4:	f000 fa8e 	bl	8006014 <WS28xx::SetPixel(unsigned int, unsigned char, unsigned char, unsigned char)>
 8005af8:	b003      	add	sp, #12
 8005afa:	bd30      	pop	{r4, r5, pc}
 8005afc:	429a      	cmp	r2, r3
 8005afe:	f04f 0100 	mov.w	r1, #0
 8005b02:	d109      	bne.n	8005b18 <PixelPatterns::SetPixelColour(unsigned int, unsigned int, unsigned int) [clone .isra.0]+0x40>
 8005b04:	42a2      	cmp	r2, r4
 8005b06:	d107      	bne.n	8005b18 <PixelPatterns::SetPixelColour(unsigned int, unsigned int, unsigned int) [clone .isra.0]+0x40>
 8005b08:	e9cd 1200 	strd	r1, r2, [sp]
 8005b0c:	460b      	mov	r3, r1
 8005b0e:	460a      	mov	r2, r1
 8005b10:	4629      	mov	r1, r5
 8005b12:	f000 fef9 	bl	8006908 <WS28xx::SetPixel(unsigned int, unsigned char, unsigned char, unsigned char, unsigned char)>
 8005b16:	e7ef      	b.n	8005af8 <PixelPatterns::SetPixelColour(unsigned int, unsigned int, unsigned int) [clone .isra.0]+0x20>
 8005b18:	e9cd 4100 	strd	r4, r1, [sp]
 8005b1c:	e7f8      	b.n	8005b10 <PixelPatterns::SetPixelColour(unsigned int, unsigned int, unsigned int) [clone .isra.0]+0x38>
 8005b1e:	bf00      	nop
 8005b20:	20000620 	andcs	r0, r0, r0, lsr #12

08005b24 <PixelPatterns::Clear(unsigned int) [clone .isra.0]>:
 8005b24:	b538      	push	{r3, r4, r5, lr}
 8005b26:	4d06      	ldr	r5, [pc, #24]	; (8005b40 <PixelPatterns::Clear(unsigned int) [clone .isra.0]+0x1c>)
 8005b28:	2400      	movs	r4, #0
 8005b2a:	682b      	ldr	r3, [r5, #0]
 8005b2c:	429c      	cmp	r4, r3
 8005b2e:	d300      	bcc.n	8005b32 <PixelPatterns::Clear(unsigned int) [clone .isra.0]+0xe>
 8005b30:	bd38      	pop	{r3, r4, r5, pc}
 8005b32:	4620      	mov	r0, r4
 8005b34:	2100      	movs	r1, #0
 8005b36:	f7ff ffcf 	bl	8005ad8 <PixelPatterns::SetPixelColour(unsigned int, unsigned int, unsigned int) [clone .isra.0]>
 8005b3a:	3401      	adds	r4, #1
 8005b3c:	e7f5      	b.n	8005b2a <PixelPatterns::Clear(unsigned int) [clone .isra.0]+0x6>
 8005b3e:	bf00      	nop
 8005b40:	2000061c 	andcs	r0, r0, ip, lsl r6

08005b44 <PixelPatterns::PixelPatterns(unsigned int)>:
 8005b44:	4b09      	ldr	r3, [pc, #36]	; (8005b6c <PixelPatterns::PixelPatterns(unsigned int)+0x28>)
 8005b46:	4a0a      	ldr	r2, [pc, #40]	; (8005b70 <PixelPatterns::PixelPatterns(unsigned int)+0x2c>)
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	6013      	str	r3, [r2, #0]
 8005b4c:	2901      	cmp	r1, #1
 8005b4e:	4a09      	ldr	r2, [pc, #36]	; (8005b74 <PixelPatterns::PixelPatterns(unsigned int)+0x30>)
 8005b50:	bf28      	it	cs
 8005b52:	2101      	movcs	r1, #1
 8005b54:	6011      	str	r1, [r2, #0]
 8005b56:	685a      	ldr	r2, [r3, #4]
 8005b58:	4b07      	ldr	r3, [pc, #28]	; (8005b78 <PixelPatterns::PixelPatterns(unsigned int)+0x34>)
 8005b5a:	601a      	str	r2, [r3, #0]
 8005b5c:	4b07      	ldr	r3, [pc, #28]	; (8005b7c <PixelPatterns::PixelPatterns(unsigned int)+0x38>)
 8005b5e:	6819      	ldr	r1, [r3, #0]
 8005b60:	4b07      	ldr	r3, [pc, #28]	; (8005b80 <PixelPatterns::PixelPatterns(unsigned int)+0x3c>)
 8005b62:	2200      	movs	r2, #0
 8005b64:	61da      	str	r2, [r3, #28]
 8005b66:	6019      	str	r1, [r3, #0]
 8005b68:	619a      	str	r2, [r3, #24]
 8005b6a:	4770      	bx	lr
 8005b6c:	20000630 	andcs	r0, r0, r0, lsr r6
 8005b70:	20000620 	andcs	r0, r0, r0, lsr #12
 8005b74:	20000614 	andcs	r0, r0, r4, lsl r6
 8005b78:	2000061c 	andcs	r0, r0, ip, lsl r6
 8005b7c:	200017ac 	andcs	r1, r0, ip, lsr #15
 8005b80:	200005f4 	strdcs	r0, [r0], -r4

08005b84 <PixelPatterns::GetName(pixelpatterns::Pattern)>:
 8005b84:	2805      	cmp	r0, #5
 8005b86:	bfdd      	ittte	le
 8005b88:	4b02      	ldrle	r3, [pc, #8]	; (8005b94 <PixelPatterns::GetName(pixelpatterns::Pattern)+0x10>)
 8005b8a:	220e      	movle	r2, #14
 8005b8c:	fb02 3000 	mlale	r0, r2, r0, r3
 8005b90:	4801      	ldrgt	r0, [pc, #4]	; (8005b98 <PixelPatterns::GetName(pixelpatterns::Pattern)+0x14>)
 8005b92:	4770      	bx	lr
 8005b94:	0800b882 	stmdaeq	r0, {r1, r7, fp, ip, sp, pc}
 8005b98:	0800b7e8 	stmdaeq	r0, {r3, r5, r6, r7, r8, r9, sl, ip, sp, pc}

08005b9c <PixelPatterns::RainbowCycle(unsigned int, unsigned int, pixelpatterns::Direction)>:
 8005b9c:	b570      	push	{r4, r5, r6, lr}
 8005b9e:	460e      	mov	r6, r1
 8005ba0:	4615      	mov	r5, r2
 8005ba2:	461c      	mov	r4, r3
 8005ba4:	f7ff ffbe 	bl	8005b24 <PixelPatterns::Clear(unsigned int) [clone .isra.0]>
 8005ba8:	4905      	ldr	r1, [pc, #20]	; (8005bc0 <PixelPatterns::RainbowCycle(unsigned int, unsigned int, pixelpatterns::Direction)+0x24>)
 8005baa:	eb01 1146 	add.w	r1, r1, r6, lsl #5
 8005bae:	2301      	movs	r3, #1
 8005bb0:	61cb      	str	r3, [r1, #28]
 8005bb2:	22ff      	movs	r2, #255	; 0xff
 8005bb4:	2300      	movs	r3, #0
 8005bb6:	e9c1 2304 	strd	r2, r3, [r1, #16]
 8005bba:	604d      	str	r5, [r1, #4]
 8005bbc:	618c      	str	r4, [r1, #24]
 8005bbe:	bd70      	pop	{r4, r5, r6, pc}
 8005bc0:	200005f4 	strdcs	r0, [r0], -r4

08005bc4 <PixelPatterns::TheaterChase(unsigned int, unsigned int, unsigned int, unsigned int, pixelpatterns::Direction)>:
 8005bc4:	b570      	push	{r4, r5, r6, lr}
 8005bc6:	460e      	mov	r6, r1
 8005bc8:	461c      	mov	r4, r3
 8005bca:	4615      	mov	r5, r2
 8005bcc:	f7ff ffaa 	bl	8005b24 <PixelPatterns::Clear(unsigned int) [clone .isra.0]>
 8005bd0:	4908      	ldr	r1, [pc, #32]	; (8005bf4 <PixelPatterns::TheaterChase(unsigned int, unsigned int, unsigned int, unsigned int, pixelpatterns::Direction)+0x30>)
 8005bd2:	eb01 1146 	add.w	r1, r1, r6, lsl #5
 8005bd6:	2302      	movs	r3, #2
 8005bd8:	61cb      	str	r3, [r1, #28]
 8005bda:	9b04      	ldr	r3, [sp, #16]
 8005bdc:	604b      	str	r3, [r1, #4]
 8005bde:	4b06      	ldr	r3, [pc, #24]	; (8005bf8 <PixelPatterns::TheaterChase(unsigned int, unsigned int, unsigned int, unsigned int, pixelpatterns::Direction)+0x34>)
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	610b      	str	r3, [r1, #16]
 8005be4:	2300      	movs	r3, #0
 8005be6:	614b      	str	r3, [r1, #20]
 8005be8:	9b05      	ldr	r3, [sp, #20]
 8005bea:	618b      	str	r3, [r1, #24]
 8005bec:	e9c1 5402 	strd	r5, r4, [r1, #8]
 8005bf0:	bd70      	pop	{r4, r5, r6, pc}
 8005bf2:	bf00      	nop
 8005bf4:	200005f4 	strdcs	r0, [r0], -r4
 8005bf8:	2000061c 	andcs	r0, r0, ip, lsl r6

08005bfc <PixelPatterns::ColourWipe(unsigned int, unsigned int, unsigned int, pixelpatterns::Direction)>:
 8005bfc:	b570      	push	{r4, r5, r6, lr}
 8005bfe:	460e      	mov	r6, r1
 8005c00:	461d      	mov	r5, r3
 8005c02:	4614      	mov	r4, r2
 8005c04:	f7ff ff8e 	bl	8005b24 <PixelPatterns::Clear(unsigned int) [clone .isra.0]>
 8005c08:	4907      	ldr	r1, [pc, #28]	; (8005c28 <PixelPatterns::ColourWipe(unsigned int, unsigned int, unsigned int, pixelpatterns::Direction)+0x2c>)
 8005c0a:	eb01 1146 	add.w	r1, r1, r6, lsl #5
 8005c0e:	2303      	movs	r3, #3
 8005c10:	61cb      	str	r3, [r1, #28]
 8005c12:	4b06      	ldr	r3, [pc, #24]	; (8005c2c <PixelPatterns::ColourWipe(unsigned int, unsigned int, unsigned int, pixelpatterns::Direction)+0x30>)
 8005c14:	604d      	str	r5, [r1, #4]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	610b      	str	r3, [r1, #16]
 8005c1a:	2300      	movs	r3, #0
 8005c1c:	614b      	str	r3, [r1, #20]
 8005c1e:	9b04      	ldr	r3, [sp, #16]
 8005c20:	608c      	str	r4, [r1, #8]
 8005c22:	618b      	str	r3, [r1, #24]
 8005c24:	bd70      	pop	{r4, r5, r6, pc}
 8005c26:	bf00      	nop
 8005c28:	200005f4 	strdcs	r0, [r0], -r4
 8005c2c:	2000061c 	andcs	r0, r0, ip, lsl r6

08005c30 <PixelPatterns::Scanner(unsigned int, unsigned int, unsigned int)>:
 8005c30:	b570      	push	{r4, r5, r6, lr}
 8005c32:	461d      	mov	r5, r3
 8005c34:	460e      	mov	r6, r1
 8005c36:	4614      	mov	r4, r2
 8005c38:	f7ff ff74 	bl	8005b24 <PixelPatterns::Clear(unsigned int) [clone .isra.0]>
 8005c3c:	4912      	ldr	r1, [pc, #72]	; (8005c88 <PixelPatterns::Scanner(unsigned int, unsigned int, unsigned int)+0x58>)
 8005c3e:	eb01 1146 	add.w	r1, r1, r6, lsl #5
 8005c42:	2304      	movs	r3, #4
 8005c44:	604d      	str	r5, [r1, #4]
 8005c46:	4d11      	ldr	r5, [pc, #68]	; (8005c8c <PixelPatterns::Scanner(unsigned int, unsigned int, unsigned int)+0x5c>)
 8005c48:	61cb      	str	r3, [r1, #28]
 8005c4a:	6828      	ldr	r0, [r5, #0]
 8005c4c:	608c      	str	r4, [r1, #8]
 8005c4e:	1e43      	subs	r3, r0, #1
 8005c50:	005b      	lsls	r3, r3, #1
 8005c52:	b29b      	uxth	r3, r3
 8005c54:	4c0e      	ldr	r4, [pc, #56]	; (8005c90 <PixelPatterns::Scanner(unsigned int, unsigned int, unsigned int)+0x60>)
 8005c56:	610b      	str	r3, [r1, #16]
 8005c58:	2300      	movs	r3, #0
 8005c5a:	614b      	str	r3, [r1, #20]
 8005c5c:	6823      	ldr	r3, [r4, #0]
 8005c5e:	b97b      	cbnz	r3, 8005c80 <PixelPatterns::Scanner(unsigned int, unsigned int, unsigned int)+0x50>
 8005c60:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
 8005c64:	4298      	cmp	r0, r3
 8005c66:	bf34      	ite	cc
 8005c68:	0080      	lslcc	r0, r0, #2
 8005c6a:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
 8005c6e:	f002 fb92 	bl	8008396 <operator new[](unsigned int)>
 8005c72:	682b      	ldr	r3, [r5, #0]
 8005c74:	6020      	str	r0, [r4, #0]
 8005c76:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8005c7a:	2200      	movs	r2, #0
 8005c7c:	4298      	cmp	r0, r3
 8005c7e:	d100      	bne.n	8005c82 <PixelPatterns::Scanner(unsigned int, unsigned int, unsigned int)+0x52>
 8005c80:	bd70      	pop	{r4, r5, r6, pc}
 8005c82:	f840 2b04 	str.w	r2, [r0], #4
 8005c86:	e7f9      	b.n	8005c7c <PixelPatterns::Scanner(unsigned int, unsigned int, unsigned int)+0x4c>
 8005c88:	200005f4 	strdcs	r0, [r0], -r4
 8005c8c:	2000061c 	andcs	r0, r0, ip, lsl r6
 8005c90:	20000618 	andcs	r0, r0, r8, lsl r6

08005c94 <PixelPatterns::Fade(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, pixelpatterns::Direction)>:
 8005c94:	b570      	push	{r4, r5, r6, lr}
 8005c96:	460e      	mov	r6, r1
 8005c98:	461c      	mov	r4, r3
 8005c9a:	4615      	mov	r5, r2
 8005c9c:	f7ff ff42 	bl	8005b24 <PixelPatterns::Clear(unsigned int) [clone .isra.0]>
 8005ca0:	4907      	ldr	r1, [pc, #28]	; (8005cc0 <PixelPatterns::Fade(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, pixelpatterns::Direction)+0x2c>)
 8005ca2:	eb01 1146 	add.w	r1, r1, r6, lsl #5
 8005ca6:	2305      	movs	r3, #5
 8005ca8:	61cb      	str	r3, [r1, #28]
 8005caa:	9b05      	ldr	r3, [sp, #20]
 8005cac:	604b      	str	r3, [r1, #4]
 8005cae:	9b04      	ldr	r3, [sp, #16]
 8005cb0:	610b      	str	r3, [r1, #16]
 8005cb2:	2300      	movs	r3, #0
 8005cb4:	614b      	str	r3, [r1, #20]
 8005cb6:	9b06      	ldr	r3, [sp, #24]
 8005cb8:	618b      	str	r3, [r1, #24]
 8005cba:	e9c1 5402 	strd	r5, r4, [r1, #8]
 8005cbe:	bd70      	pop	{r4, r5, r6, pc}
 8005cc0:	200005f4 	strdcs	r0, [r0], -r4

08005cc4 <PixelPatterns::Wheel(unsigned char)>:
 8005cc4:	43cb      	mvns	r3, r1
 8005cc6:	b2db      	uxtb	r3, r3
 8005cc8:	2b54      	cmp	r3, #84	; 0x54
 8005cca:	d809      	bhi.n	8005ce0 <PixelPatterns::Wheel(unsigned char)+0x1c>
 8005ccc:	eba3 0383 	sub.w	r3, r3, r3, lsl #2
 8005cd0:	b2db      	uxtb	r3, r3
 8005cd2:	1e5a      	subs	r2, r3, #1
 8005cd4:	4258      	negs	r0, r3
 8005cd6:	b2d2      	uxtb	r2, r2
 8005cd8:	b2c0      	uxtb	r0, r0
 8005cda:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 8005cde:	4770      	bx	lr
 8005ce0:	2ba9      	cmp	r3, #169	; 0xa9
 8005ce2:	d809      	bhi.n	8005cf8 <PixelPatterns::Wheel(unsigned char)+0x34>
 8005ce4:	f1c1 01aa 	rsb	r1, r1, #170	; 0xaa
 8005ce8:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8005cec:	b2c9      	uxtb	r1, r1
 8005cee:	43c8      	mvns	r0, r1
 8005cf0:	b2c0      	uxtb	r0, r0
 8005cf2:	ea40 2001 	orr.w	r0, r0, r1, lsl #8
 8005cf6:	4770      	bx	lr
 8005cf8:	f1c1 0155 	rsb	r1, r1, #85	; 0x55
 8005cfc:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8005d00:	b2c9      	uxtb	r1, r1
 8005d02:	0208      	lsls	r0, r1, #8
 8005d04:	f480 407f 	eor.w	r0, r0, #65280	; 0xff00
 8005d08:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8005d0c:	4770      	bx	lr
	...

08005d10 <PixelPatterns::Increment(unsigned int)>:
 8005d10:	4a0d      	ldr	r2, [pc, #52]	; (8005d48 <PixelPatterns::Increment(unsigned int)+0x38>)
 8005d12:	b510      	push	{r4, lr}
 8005d14:	014c      	lsls	r4, r1, #5
 8005d16:	eb02 1141 	add.w	r1, r2, r1, lsl #5
 8005d1a:	e9d1 3005 	ldrd	r3, r0, [r1, #20]
 8005d1e:	b930      	cbnz	r0, 8005d2e <PixelPatterns::Increment(unsigned int)+0x1e>
 8005d20:	690a      	ldr	r2, [r1, #16]
 8005d22:	3301      	adds	r3, #1
 8005d24:	4293      	cmp	r3, r2
 8005d26:	bf18      	it	ne
 8005d28:	4618      	movne	r0, r3
 8005d2a:	6148      	str	r0, [r1, #20]
 8005d2c:	bd10      	pop	{r4, pc}
 8005d2e:	b92b      	cbnz	r3, 8005d3c <PixelPatterns::Increment(unsigned int)+0x2c>
 8005d30:	4422      	add	r2, r4
 8005d32:	6913      	ldr	r3, [r2, #16]
 8005d34:	3b01      	subs	r3, #1
 8005d36:	b29b      	uxth	r3, r3
 8005d38:	6153      	str	r3, [r2, #20]
 8005d3a:	e7f7      	b.n	8005d2c <PixelPatterns::Increment(unsigned int)+0x1c>
 8005d3c:	3b01      	subs	r3, #1
 8005d3e:	614b      	str	r3, [r1, #20]
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d1f3      	bne.n	8005d2c <PixelPatterns::Increment(unsigned int)+0x1c>
 8005d44:	e7f4      	b.n	8005d30 <PixelPatterns::Increment(unsigned int)+0x20>
 8005d46:	bf00      	nop
 8005d48:	200005f4 	strdcs	r0, [r0], -r4

08005d4c <PixelPatterns::RainbowCycleUpdate(unsigned int)>:
 8005d4c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005d50:	4b11      	ldr	r3, [pc, #68]	; (8005d98 <PixelPatterns::RainbowCycleUpdate(unsigned int)+0x4c>)
 8005d52:	f8df 8048 	ldr.w	r8, [pc, #72]	; 8005d9c <PixelPatterns::RainbowCycleUpdate(unsigned int)+0x50>
 8005d56:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8005d5a:	4604      	mov	r4, r0
 8005d5c:	f8d3 9014 	ldr.w	r9, [r3, #20]
 8005d60:	460d      	mov	r5, r1
 8005d62:	2700      	movs	r7, #0
 8005d64:	f8d8 2000 	ldr.w	r2, [r8]
 8005d68:	b2be      	uxth	r6, r7
 8005d6a:	42b2      	cmp	r2, r6
 8005d6c:	f107 0701 	add.w	r7, r7, #1
 8005d70:	d805      	bhi.n	8005d7e <PixelPatterns::RainbowCycleUpdate(unsigned int)+0x32>
 8005d72:	4629      	mov	r1, r5
 8005d74:	4620      	mov	r0, r4
 8005d76:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005d7a:	f7ff bfc9 	b.w	8005d10 <PixelPatterns::Increment(unsigned int)>
 8005d7e:	0233      	lsls	r3, r6, #8
 8005d80:	fbb3 f3f2 	udiv	r3, r3, r2
 8005d84:	444b      	add	r3, r9
 8005d86:	b2d9      	uxtb	r1, r3
 8005d88:	4620      	mov	r0, r4
 8005d8a:	f7ff ff9b 	bl	8005cc4 <PixelPatterns::Wheel(unsigned char)>
 8005d8e:	4601      	mov	r1, r0
 8005d90:	4630      	mov	r0, r6
 8005d92:	f7ff fea1 	bl	8005ad8 <PixelPatterns::SetPixelColour(unsigned int, unsigned int, unsigned int) [clone .isra.0]>
 8005d96:	e7e5      	b.n	8005d64 <PixelPatterns::RainbowCycleUpdate(unsigned int)+0x18>
 8005d98:	200005f4 	strdcs	r0, [r0], -r4
 8005d9c:	2000061c 	andcs	r0, r0, ip, lsl r6

08005da0 <PixelPatterns::TheaterChaseUpdate(unsigned int)>:
 8005da0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005da4:	4b13      	ldr	r3, [pc, #76]	; (8005df4 <PixelPatterns::TheaterChaseUpdate(unsigned int)+0x54>)
 8005da6:	4e14      	ldr	r6, [pc, #80]	; (8005df8 <PixelPatterns::TheaterChaseUpdate(unsigned int)+0x58>)
 8005da8:	f8df a050 	ldr.w	sl, [pc, #80]	; 8005dfc <PixelPatterns::TheaterChaseUpdate(unsigned int)+0x5c>
 8005dac:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8005db0:	e9d3 7802 	ldrd	r7, r8, [r3, #8]
 8005db4:	f8d3 9014 	ldr.w	r9, [r3, #20]
 8005db8:	4605      	mov	r5, r0
 8005dba:	460c      	mov	r4, r1
 8005dbc:	f04f 0b00 	mov.w	fp, #0
 8005dc0:	6833      	ldr	r3, [r6, #0]
 8005dc2:	fa1f f08b 	uxth.w	r0, fp
 8005dc6:	4283      	cmp	r3, r0
 8005dc8:	d805      	bhi.n	8005dd6 <PixelPatterns::TheaterChaseUpdate(unsigned int)+0x36>
 8005dca:	4621      	mov	r1, r4
 8005dcc:	4628      	mov	r0, r5
 8005dce:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005dd2:	f7ff bf9d 	b.w	8005d10 <PixelPatterns::Increment(unsigned int)>
 8005dd6:	eb09 0300 	add.w	r3, r9, r0
 8005dda:	fb0a f303 	mul.w	r3, sl, r3
 8005dde:	f1b3 3f55 	cmp.w	r3, #1431655765	; 0x55555555
 8005de2:	bf94      	ite	ls
 8005de4:	4639      	movls	r1, r7
 8005de6:	4641      	movhi	r1, r8
 8005de8:	f7ff fe76 	bl	8005ad8 <PixelPatterns::SetPixelColour(unsigned int, unsigned int, unsigned int) [clone .isra.0]>
 8005dec:	f10b 0b01 	add.w	fp, fp, #1
 8005df0:	e7e6      	b.n	8005dc0 <PixelPatterns::TheaterChaseUpdate(unsigned int)+0x20>
 8005df2:	bf00      	nop
 8005df4:	200005f4 	strdcs	r0, [r0], -r4
 8005df8:	2000061c 	andcs	r0, r0, ip, lsl r6
 8005dfc:	aaaaaaab 	bge	6ab08b0 <__heap_size+0x6aaf8b0>

08005e00 <PixelPatterns::ColourWipeUpdate(unsigned int)>:
 8005e00:	b538      	push	{r3, r4, r5, lr}
 8005e02:	4b07      	ldr	r3, [pc, #28]	; (8005e20 <PixelPatterns::ColourWipeUpdate(unsigned int)+0x20>)
 8005e04:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8005e08:	4605      	mov	r5, r0
 8005e0a:	460c      	mov	r4, r1
 8005e0c:	6958      	ldr	r0, [r3, #20]
 8005e0e:	6899      	ldr	r1, [r3, #8]
 8005e10:	f7ff fe62 	bl	8005ad8 <PixelPatterns::SetPixelColour(unsigned int, unsigned int, unsigned int) [clone .isra.0]>
 8005e14:	4621      	mov	r1, r4
 8005e16:	4628      	mov	r0, r5
 8005e18:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005e1c:	f7ff bf78 	b.w	8005d10 <PixelPatterns::Increment(unsigned int)>
 8005e20:	200005f4 	strdcs	r0, [r0], -r4

08005e24 <PixelPatterns::ScannerUpdate(unsigned int)>:
 8005e24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e28:	4a2b      	ldr	r2, [pc, #172]	; (8005ed8 <PixelPatterns::ScannerUpdate(unsigned int)+0xb4>)
 8005e2a:	f8df a0b0 	ldr.w	sl, [pc, #176]	; 8005edc <PixelPatterns::ScannerUpdate(unsigned int)+0xb8>
 8005e2e:	f8df 80b0 	ldr.w	r8, [pc, #176]	; 8005ee0 <PixelPatterns::ScannerUpdate(unsigned int)+0xbc>
 8005e32:	ed2d 8b02 	vpush	{d8}
 8005e36:	eb02 1241 	add.w	r2, r2, r1, lsl #5
 8005e3a:	e9d2 7604 	ldrd	r7, r6, [r2, #16]
 8005e3e:	b083      	sub	sp, #12
 8005e40:	00b3      	lsls	r3, r6, #2
 8005e42:	ee08 0a10 	vmov	s16, r0
 8005e46:	f8d2 b008 	ldr.w	fp, [r2, #8]
 8005e4a:	9300      	str	r3, [sp, #0]
 8005e4c:	460d      	mov	r5, r1
 8005e4e:	f04f 0900 	mov.w	r9, #0
 8005e52:	1bbf      	subs	r7, r7, r6
 8005e54:	f8da 1000 	ldr.w	r1, [sl]
 8005e58:	fa1f f489 	uxth.w	r4, r9
 8005e5c:	42a1      	cmp	r1, r4
 8005e5e:	d809      	bhi.n	8005e74 <PixelPatterns::ScannerUpdate(unsigned int)+0x50>
 8005e60:	ee18 0a10 	vmov	r0, s16
 8005e64:	4629      	mov	r1, r5
 8005e66:	b003      	add	sp, #12
 8005e68:	ecbd 8b02 	vpop	{d8}
 8005e6c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e70:	f7ff bf4e 	b.w	8005d10 <PixelPatterns::Increment(unsigned int)>
 8005e74:	42a6      	cmp	r6, r4
 8005e76:	d10b      	bne.n	8005e90 <PixelPatterns::ScannerUpdate(unsigned int)+0x6c>
 8005e78:	4659      	mov	r1, fp
 8005e7a:	4630      	mov	r0, r6
 8005e7c:	f7ff fe2c 	bl	8005ad8 <PixelPatterns::SetPixelColour(unsigned int, unsigned int, unsigned int) [clone .isra.0]>
 8005e80:	f8d8 1000 	ldr.w	r1, [r8]
 8005e84:	9b00      	ldr	r3, [sp, #0]
 8005e86:	f841 b003 	str.w	fp, [r1, r3]
 8005e8a:	f109 0901 	add.w	r9, r9, #1
 8005e8e:	e7e1      	b.n	8005e54 <PixelPatterns::ScannerUpdate(unsigned int)+0x30>
 8005e90:	42a7      	cmp	r7, r4
 8005e92:	d108      	bne.n	8005ea6 <PixelPatterns::ScannerUpdate(unsigned int)+0x82>
 8005e94:	4659      	mov	r1, fp
 8005e96:	4638      	mov	r0, r7
 8005e98:	f7ff fe1e 	bl	8005ad8 <PixelPatterns::SetPixelColour(unsigned int, unsigned int, unsigned int) [clone .isra.0]>
 8005e9c:	f8d8 1000 	ldr.w	r1, [r8]
 8005ea0:	f841 b024 	str.w	fp, [r1, r4, lsl #2]
 8005ea4:	e7f1      	b.n	8005e8a <PixelPatterns::ScannerUpdate(unsigned int)+0x66>
 8005ea6:	f8d8 1000 	ldr.w	r1, [r8]
 8005eaa:	f851 0024 	ldr.w	r0, [r1, r4, lsl #2]
 8005eae:	f3c0 2146 	ubfx	r1, r0, #9, #7
 8005eb2:	f3c0 4c46 	ubfx	ip, r0, #17, #7
 8005eb6:	0209      	lsls	r1, r1, #8
 8005eb8:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8005ebc:	f3c0 0046 	ubfx	r0, r0, #1, #7
 8005ec0:	4301      	orrs	r1, r0
 8005ec2:	4620      	mov	r0, r4
 8005ec4:	9101      	str	r1, [sp, #4]
 8005ec6:	f7ff fe07 	bl	8005ad8 <PixelPatterns::SetPixelColour(unsigned int, unsigned int, unsigned int) [clone .isra.0]>
 8005eca:	f8d8 0000 	ldr.w	r0, [r8]
 8005ece:	9901      	ldr	r1, [sp, #4]
 8005ed0:	f840 1024 	str.w	r1, [r0, r4, lsl #2]
 8005ed4:	e7d9      	b.n	8005e8a <PixelPatterns::ScannerUpdate(unsigned int)+0x66>
 8005ed6:	bf00      	nop
 8005ed8:	200005f4 	strdcs	r0, [r0], -r4
 8005edc:	2000061c 	andcs	r0, r0, ip, lsl r6
 8005ee0:	20000618 	andcs	r0, r0, r8, lsl r6

08005ee4 <PixelPatterns::FadeUpdate(unsigned int)>:
 8005ee4:	4a21      	ldr	r2, [pc, #132]	; (8005f6c <PixelPatterns::FadeUpdate(unsigned int)+0x88>)
 8005ee6:	eb02 1241 	add.w	r2, r2, r1, lsl #5
 8005eea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005eee:	460c      	mov	r4, r1
 8005ef0:	e9d2 1302 	ldrd	r1, r3, [r2, #8]
 8005ef4:	4605      	mov	r5, r0
 8005ef6:	e9d2 0704 	ldrd	r0, r7, [r2, #16]
 8005efa:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8005efe:	1bc6      	subs	r6, r0, r7
 8005f00:	f3c1 2c07 	ubfx	ip, r1, #8, #8
 8005f04:	437a      	muls	r2, r7
 8005f06:	fb06 220c 	mla	r2, r6, ip, r2
 8005f0a:	fbb2 f2f0 	udiv	r2, r2, r0
 8005f0e:	0212      	lsls	r2, r2, #8
 8005f10:	fa1f fc82 	uxth.w	ip, r2
 8005f14:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8005f18:	f3c1 4e07 	ubfx	lr, r1, #16, #8
 8005f1c:	437a      	muls	r2, r7
 8005f1e:	fb06 220e 	mla	r2, r6, lr, r2
 8005f22:	b2db      	uxtb	r3, r3
 8005f24:	fbb2 f2f0 	udiv	r2, r2, r0
 8005f28:	0412      	lsls	r2, r2, #16
 8005f2a:	437b      	muls	r3, r7
 8005f2c:	f402 027f 	and.w	r2, r2, #16711680	; 0xff0000
 8005f30:	b2c9      	uxtb	r1, r1
 8005f32:	fb06 3301 	mla	r3, r6, r1, r3
 8005f36:	ea4c 0202 	orr.w	r2, ip, r2
 8005f3a:	fbb3 f3f0 	udiv	r3, r3, r0
 8005f3e:	f8df 8030 	ldr.w	r8, [pc, #48]	; 8005f70 <PixelPatterns::FadeUpdate(unsigned int)+0x8c>
 8005f42:	b2db      	uxtb	r3, r3
 8005f44:	ea42 0603 	orr.w	r6, r2, r3
 8005f48:	2700      	movs	r7, #0
 8005f4a:	f8d8 3000 	ldr.w	r3, [r8]
 8005f4e:	429f      	cmp	r7, r3
 8005f50:	d305      	bcc.n	8005f5e <PixelPatterns::FadeUpdate(unsigned int)+0x7a>
 8005f52:	4621      	mov	r1, r4
 8005f54:	4628      	mov	r0, r5
 8005f56:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005f5a:	f7ff bed9 	b.w	8005d10 <PixelPatterns::Increment(unsigned int)>
 8005f5e:	4638      	mov	r0, r7
 8005f60:	4631      	mov	r1, r6
 8005f62:	f7ff fdb9 	bl	8005ad8 <PixelPatterns::SetPixelColour(unsigned int, unsigned int, unsigned int) [clone .isra.0]>
 8005f66:	3701      	adds	r7, #1
 8005f68:	e7ef      	b.n	8005f4a <PixelPatterns::FadeUpdate(unsigned int)+0x66>
 8005f6a:	bf00      	nop
 8005f6c:	200005f4 	strdcs	r0, [r0], -r4
 8005f70:	2000061c 	andcs	r0, r0, ip, lsl r6

08005f74 <PixelPatterns::PortUpdate(unsigned int, unsigned int)>:
 8005f74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f76:	4b12      	ldr	r3, [pc, #72]	; (8005fc0 <PixelPatterns::PortUpdate(unsigned int, unsigned int)+0x4c>)
 8005f78:	014e      	lsls	r6, r1, #5
 8005f7a:	eb03 1541 	add.w	r5, r3, r1, lsl #5
 8005f7e:	599c      	ldr	r4, [r3, r6]
 8005f80:	686f      	ldr	r7, [r5, #4]
 8005f82:	1b14      	subs	r4, r2, r4
 8005f84:	42bc      	cmp	r4, r7
 8005f86:	d319      	bcc.n	8005fbc <PixelPatterns::PortUpdate(unsigned int, unsigned int)+0x48>
 8005f88:	519a      	str	r2, [r3, r6]
 8005f8a:	69eb      	ldr	r3, [r5, #28]
 8005f8c:	3b01      	subs	r3, #1
 8005f8e:	2b04      	cmp	r3, #4
 8005f90:	d814      	bhi.n	8005fbc <PixelPatterns::PortUpdate(unsigned int, unsigned int)+0x48>
 8005f92:	e8df f003 	tbb	[pc, r3]
 8005f96:	0d0a0703 	stceq	7, cr0, [sl, #-12]
 8005f9a:	f7ff0010 			; <UNDEFINED> instruction: 0xf7ff0010
 8005f9e:	fed6 2001 	cdp2	0, 13, cr2, cr6, cr1, {0}
 8005fa2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005fa4:	f7ff fefc 	bl	8005da0 <PixelPatterns::TheaterChaseUpdate(unsigned int)>
 8005fa8:	e7fa      	b.n	8005fa0 <PixelPatterns::PortUpdate(unsigned int, unsigned int)+0x2c>
 8005faa:	f7ff ff29 	bl	8005e00 <PixelPatterns::ColourWipeUpdate(unsigned int)>
 8005fae:	e7f7      	b.n	8005fa0 <PixelPatterns::PortUpdate(unsigned int, unsigned int)+0x2c>
 8005fb0:	f7ff ff38 	bl	8005e24 <PixelPatterns::ScannerUpdate(unsigned int)>
 8005fb4:	e7f4      	b.n	8005fa0 <PixelPatterns::PortUpdate(unsigned int, unsigned int)+0x2c>
 8005fb6:	f7ff ff95 	bl	8005ee4 <PixelPatterns::FadeUpdate(unsigned int)>
 8005fba:	e7f1      	b.n	8005fa0 <PixelPatterns::PortUpdate(unsigned int, unsigned int)+0x2c>
 8005fbc:	2000      	movs	r0, #0
 8005fbe:	e7f0      	b.n	8005fa2 <PixelPatterns::PortUpdate(unsigned int, unsigned int)+0x2e>
 8005fc0:	200005f4 	strdcs	r0, [r0], -r4

08005fc4 <PixelPatterns::Run()>:
 8005fc4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005fc8:	4606      	mov	r6, r0
 8005fca:	f003 fc45 	bl	8009858 <gd32_spi_dma_tx_is_active()>
 8005fce:	4604      	mov	r4, r0
 8005fd0:	b9c0      	cbnz	r0, 8006004 <PixelPatterns::Run()+0x40>
 8005fd2:	4b0d      	ldr	r3, [pc, #52]	; (8006008 <PixelPatterns::Run()+0x44>)
 8005fd4:	4f0d      	ldr	r7, [pc, #52]	; (800600c <PixelPatterns::Run()+0x48>)
 8005fd6:	f8d3 8000 	ldr.w	r8, [r3]
 8005fda:	4605      	mov	r5, r0
 8005fdc:	683b      	ldr	r3, [r7, #0]
 8005fde:	b2e9      	uxtb	r1, r5
 8005fe0:	428b      	cmp	r3, r1
 8005fe2:	f105 0501 	add.w	r5, r5, #1
 8005fe6:	d806      	bhi.n	8005ff6 <PixelPatterns::Run()+0x32>
 8005fe8:	b164      	cbz	r4, 8006004 <PixelPatterns::Run()+0x40>
 8005fea:	4b09      	ldr	r3, [pc, #36]	; (8006010 <PixelPatterns::Run()+0x4c>)
 8005fec:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005ff0:	6818      	ldr	r0, [r3, #0]
 8005ff2:	f000 bdf7 	b.w	8006be4 <WS28xx::Update()>
 8005ff6:	4642      	mov	r2, r8
 8005ff8:	4630      	mov	r0, r6
 8005ffa:	f7ff ffbb 	bl	8005f74 <PixelPatterns::PortUpdate(unsigned int, unsigned int)>
 8005ffe:	4304      	orrs	r4, r0
 8006000:	b2e4      	uxtb	r4, r4
 8006002:	e7eb      	b.n	8005fdc <PixelPatterns::Run()+0x18>
 8006004:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006008:	200017ac 	andcs	r1, r0, ip, lsr #15
 800600c:	20000614 	andcs	r0, r0, r4, lsl r6
 8006010:	20000620 	andcs	r0, r0, r0, lsr #12

08006014 <WS28xx::SetPixel(unsigned int, unsigned char, unsigned char, unsigned char)>:
 8006014:	b570      	push	{r4, r5, r6, lr}
 8006016:	6984      	ldr	r4, [r0, #24]
 8006018:	f89d e010 	ldrb.w	lr, [sp, #16]
 800601c:	f814 c003 	ldrb.w	ip, [r4, r3]
 8006020:	7d43      	ldrb	r3, [r0, #21]
 8006022:	5ca2      	ldrb	r2, [r4, r2]
 8006024:	f814 e00e 	ldrb.w	lr, [r4, lr]
 8006028:	b993      	cbnz	r3, 8006050 <WS28xx::SetPixel(unsigned int, unsigned char, unsigned char, unsigned char)+0x3c>
 800602a:	6803      	ldr	r3, [r0, #0]
 800602c:	f1a3 040b 	sub.w	r4, r3, #11
 8006030:	2c01      	cmp	r4, #1
 8006032:	d93e      	bls.n	80060b2 <WS28xx::SetPixel(unsigned int, unsigned char, unsigned char, unsigned char)+0x9e>
 8006034:	b9db      	cbnz	r3, 800606e <WS28xx::SetPixel(unsigned int, unsigned char, unsigned char, unsigned char)+0x5a>
 8006036:	6a03      	ldr	r3, [r0, #32]
 8006038:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 800603c:	545a      	strb	r2, [r3, r1]
 800603e:	6a03      	ldr	r3, [r0, #32]
 8006040:	440b      	add	r3, r1
 8006042:	f883 c001 	strb.w	ip, [r3, #1]
 8006046:	6a03      	ldr	r3, [r0, #32]
 8006048:	440b      	add	r3, r1
 800604a:	f883 e002 	strb.w	lr, [r3, #2]
 800604e:	bd70      	pop	{r4, r5, r6, pc}
 8006050:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8006054:	00cb      	lsls	r3, r1, #3
 8006056:	6881      	ldr	r1, [r0, #8]
 8006058:	2905      	cmp	r1, #5
 800605a:	f200 80ff 	bhi.w	800625c <WS28xx::SetPixel(unsigned int, unsigned char, unsigned char, unsigned char)+0x248>
 800605e:	e8df f011 	tbh	[pc, r1, lsl #1]
 8006062:	029400fd 	addseq	r0, r4, #253	; 0xfd
 8006066:	03930313 	orrseq	r0, r3, #1275068416	; 0x4c000000
 800606a:	01b9003c 			; <UNDEFINED> instruction: 0x01b9003c
 800606e:	ea6f 039e 	mvn.w	r3, lr, lsr #2
 8006072:	f082 04c0 	eor.w	r4, r2, #192	; 0xc0
 8006076:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800607a:	ea43 1394 	orr.w	r3, r3, r4, lsr #6
 800607e:	ea6f 141c 	mvn.w	r4, ip, lsr #4
 8006082:	f004 040c 	and.w	r4, r4, #12
 8006086:	3101      	adds	r1, #1
 8006088:	4323      	orrs	r3, r4
 800608a:	6a04      	ldr	r4, [r0, #32]
 800608c:	f063 033f 	orn	r3, r3, #63	; 0x3f
 8006090:	f804 3021 	strb.w	r3, [r4, r1, lsl #2]
 8006094:	6a03      	ldr	r3, [r0, #32]
 8006096:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 800609a:	f883 e001 	strb.w	lr, [r3, #1]
 800609e:	6a03      	ldr	r3, [r0, #32]
 80060a0:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 80060a4:	f883 c002 	strb.w	ip, [r3, #2]
 80060a8:	6a03      	ldr	r3, [r0, #32]
 80060aa:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 80060ae:	70da      	strb	r2, [r3, #3]
 80060b0:	bd70      	pop	{r4, r5, r6, pc}
 80060b2:	6a03      	ldr	r3, [r0, #32]
 80060b4:	7c84      	ldrb	r4, [r0, #18]
 80060b6:	3101      	adds	r1, #1
 80060b8:	f803 4021 	strb.w	r4, [r3, r1, lsl #2]
 80060bc:	6a03      	ldr	r3, [r0, #32]
 80060be:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 80060c2:	705a      	strb	r2, [r3, #1]
 80060c4:	6a03      	ldr	r3, [r0, #32]
 80060c6:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 80060ca:	f883 c002 	strb.w	ip, [r3, #2]
 80060ce:	6a03      	ldr	r3, [r0, #32]
 80060d0:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 80060d4:	f883 e003 	strb.w	lr, [r3, #3]
 80060d8:	bd70      	pop	{r4, r5, r6, pc}
 80060da:	6a05      	ldr	r5, [r0, #32]
 80060dc:	7c01      	ldrb	r1, [r0, #16]
 80060de:	7c44      	ldrb	r4, [r0, #17]
 80060e0:	1c5e      	adds	r6, r3, #1
 80060e2:	f01e 0f80 	tst.w	lr, #128	; 0x80
 80060e6:	bf0c      	ite	eq
 80060e8:	55a9      	strbeq	r1, [r5, r6]
 80060ea:	55ac      	strbne	r4, [r5, r6]
 80060ec:	1c9e      	adds	r6, r3, #2
 80060ee:	6a05      	ldr	r5, [r0, #32]
 80060f0:	f01e 0f40 	tst.w	lr, #64	; 0x40
 80060f4:	bf0c      	ite	eq
 80060f6:	55a9      	strbeq	r1, [r5, r6]
 80060f8:	55ac      	strbne	r4, [r5, r6]
 80060fa:	1cde      	adds	r6, r3, #3
 80060fc:	6a05      	ldr	r5, [r0, #32]
 80060fe:	f01e 0f20 	tst.w	lr, #32
 8006102:	bf0c      	ite	eq
 8006104:	55a9      	strbeq	r1, [r5, r6]
 8006106:	55ac      	strbne	r4, [r5, r6]
 8006108:	1d1e      	adds	r6, r3, #4
 800610a:	6a05      	ldr	r5, [r0, #32]
 800610c:	f01e 0f10 	tst.w	lr, #16
 8006110:	bf0c      	ite	eq
 8006112:	55a9      	strbeq	r1, [r5, r6]
 8006114:	55ac      	strbne	r4, [r5, r6]
 8006116:	1d5e      	adds	r6, r3, #5
 8006118:	6a05      	ldr	r5, [r0, #32]
 800611a:	f01e 0f08 	tst.w	lr, #8
 800611e:	bf0c      	ite	eq
 8006120:	55a9      	strbeq	r1, [r5, r6]
 8006122:	55ac      	strbne	r4, [r5, r6]
 8006124:	1d9e      	adds	r6, r3, #6
 8006126:	6a05      	ldr	r5, [r0, #32]
 8006128:	f01e 0f04 	tst.w	lr, #4
 800612c:	bf0c      	ite	eq
 800612e:	55a9      	strbeq	r1, [r5, r6]
 8006130:	55ac      	strbne	r4, [r5, r6]
 8006132:	1dde      	adds	r6, r3, #7
 8006134:	6a05      	ldr	r5, [r0, #32]
 8006136:	f01e 0f02 	tst.w	lr, #2
 800613a:	bf0c      	ite	eq
 800613c:	55a9      	strbeq	r1, [r5, r6]
 800613e:	55ac      	strbne	r4, [r5, r6]
 8006140:	f01e 0f01 	tst.w	lr, #1
 8006144:	bf14      	ite	ne
 8006146:	6a01      	ldrne	r1, [r0, #32]
 8006148:	6a04      	ldreq	r4, [r0, #32]
 800614a:	f103 0508 	add.w	r5, r3, #8
 800614e:	bf14      	ite	ne
 8006150:	554c      	strbne	r4, [r1, r5]
 8006152:	5561      	strbeq	r1, [r4, r5]
 8006154:	f103 0509 	add.w	r5, r3, #9
 8006158:	6a06      	ldr	r6, [r0, #32]
 800615a:	7c01      	ldrb	r1, [r0, #16]
 800615c:	7c44      	ldrb	r4, [r0, #17]
 800615e:	f012 0f80 	tst.w	r2, #128	; 0x80
 8006162:	bf0c      	ite	eq
 8006164:	5571      	strbeq	r1, [r6, r5]
 8006166:	5574      	strbne	r4, [r6, r5]
 8006168:	f103 050a 	add.w	r5, r3, #10
 800616c:	6a06      	ldr	r6, [r0, #32]
 800616e:	f012 0f40 	tst.w	r2, #64	; 0x40
 8006172:	bf0c      	ite	eq
 8006174:	5571      	strbeq	r1, [r6, r5]
 8006176:	5574      	strbne	r4, [r6, r5]
 8006178:	f103 050b 	add.w	r5, r3, #11
 800617c:	6a06      	ldr	r6, [r0, #32]
 800617e:	f012 0f20 	tst.w	r2, #32
 8006182:	bf0c      	ite	eq
 8006184:	5571      	strbeq	r1, [r6, r5]
 8006186:	5574      	strbne	r4, [r6, r5]
 8006188:	f103 050c 	add.w	r5, r3, #12
 800618c:	6a06      	ldr	r6, [r0, #32]
 800618e:	f012 0f10 	tst.w	r2, #16
 8006192:	bf0c      	ite	eq
 8006194:	5571      	strbeq	r1, [r6, r5]
 8006196:	5574      	strbne	r4, [r6, r5]
 8006198:	f103 050d 	add.w	r5, r3, #13
 800619c:	6a06      	ldr	r6, [r0, #32]
 800619e:	f012 0f08 	tst.w	r2, #8
 80061a2:	bf0c      	ite	eq
 80061a4:	5571      	strbeq	r1, [r6, r5]
 80061a6:	5574      	strbne	r4, [r6, r5]
 80061a8:	f103 050e 	add.w	r5, r3, #14
 80061ac:	6a06      	ldr	r6, [r0, #32]
 80061ae:	f012 0f04 	tst.w	r2, #4
 80061b2:	bf0c      	ite	eq
 80061b4:	5571      	strbeq	r1, [r6, r5]
 80061b6:	5574      	strbne	r4, [r6, r5]
 80061b8:	f103 050f 	add.w	r5, r3, #15
 80061bc:	6a06      	ldr	r6, [r0, #32]
 80061be:	f012 0f02 	tst.w	r2, #2
 80061c2:	bf0c      	ite	eq
 80061c4:	5571      	strbeq	r1, [r6, r5]
 80061c6:	5574      	strbne	r4, [r6, r5]
 80061c8:	f012 0f01 	tst.w	r2, #1
 80061cc:	f103 0510 	add.w	r5, r3, #16
 80061d0:	6a02      	ldr	r2, [r0, #32]
 80061d2:	bf14      	ite	ne
 80061d4:	5554      	strbne	r4, [r2, r5]
 80061d6:	5551      	strbeq	r1, [r2, r5]
 80061d8:	6a05      	ldr	r5, [r0, #32]
 80061da:	7c02      	ldrb	r2, [r0, #16]
 80061dc:	7c41      	ldrb	r1, [r0, #17]
 80061de:	f103 0411 	add.w	r4, r3, #17
 80061e2:	f01c 0f80 	tst.w	ip, #128	; 0x80
 80061e6:	bf0c      	ite	eq
 80061e8:	552a      	strbeq	r2, [r5, r4]
 80061ea:	5529      	strbne	r1, [r5, r4]
 80061ec:	f103 0412 	add.w	r4, r3, #18
 80061f0:	6a05      	ldr	r5, [r0, #32]
 80061f2:	f01c 0f40 	tst.w	ip, #64	; 0x40
 80061f6:	bf0c      	ite	eq
 80061f8:	552a      	strbeq	r2, [r5, r4]
 80061fa:	5529      	strbne	r1, [r5, r4]
 80061fc:	f103 0413 	add.w	r4, r3, #19
 8006200:	6a05      	ldr	r5, [r0, #32]
 8006202:	f01c 0f20 	tst.w	ip, #32
 8006206:	bf0c      	ite	eq
 8006208:	552a      	strbeq	r2, [r5, r4]
 800620a:	5529      	strbne	r1, [r5, r4]
 800620c:	f103 0414 	add.w	r4, r3, #20
 8006210:	6a05      	ldr	r5, [r0, #32]
 8006212:	f01c 0f10 	tst.w	ip, #16
 8006216:	bf0c      	ite	eq
 8006218:	552a      	strbeq	r2, [r5, r4]
 800621a:	5529      	strbne	r1, [r5, r4]
 800621c:	f103 0415 	add.w	r4, r3, #21
 8006220:	6a05      	ldr	r5, [r0, #32]
 8006222:	f01c 0f08 	tst.w	ip, #8
 8006226:	bf0c      	ite	eq
 8006228:	552a      	strbeq	r2, [r5, r4]
 800622a:	5529      	strbne	r1, [r5, r4]
 800622c:	f103 0416 	add.w	r4, r3, #22
 8006230:	6a05      	ldr	r5, [r0, #32]
 8006232:	f01c 0f04 	tst.w	ip, #4
 8006236:	bf0c      	ite	eq
 8006238:	552a      	strbeq	r2, [r5, r4]
 800623a:	5529      	strbne	r1, [r5, r4]
 800623c:	f103 0417 	add.w	r4, r3, #23
 8006240:	6a05      	ldr	r5, [r0, #32]
 8006242:	f01c 0f02 	tst.w	ip, #2
 8006246:	bf0c      	ite	eq
 8006248:	552a      	strbeq	r2, [r5, r4]
 800624a:	5529      	strbne	r1, [r5, r4]
 800624c:	3318      	adds	r3, #24
 800624e:	f01c 0f01 	tst.w	ip, #1
 8006252:	f000 8355 	beq.w	8006900 <WS28xx::SetPixel(unsigned int, unsigned char, unsigned char, unsigned char)+0x8ec>
 8006256:	6a02      	ldr	r2, [r0, #32]
 8006258:	54d1      	strb	r1, [r2, r3]
 800625a:	bd70      	pop	{r4, r5, r6, pc}
 800625c:	6a05      	ldr	r5, [r0, #32]
 800625e:	7c01      	ldrb	r1, [r0, #16]
 8006260:	7c44      	ldrb	r4, [r0, #17]
 8006262:	1c5e      	adds	r6, r3, #1
 8006264:	f012 0f80 	tst.w	r2, #128	; 0x80
 8006268:	bf14      	ite	ne
 800626a:	55ac      	strbne	r4, [r5, r6]
 800626c:	55a9      	strbeq	r1, [r5, r6]
 800626e:	1c9e      	adds	r6, r3, #2
 8006270:	6a05      	ldr	r5, [r0, #32]
 8006272:	f012 0f40 	tst.w	r2, #64	; 0x40
 8006276:	bf14      	ite	ne
 8006278:	55ac      	strbne	r4, [r5, r6]
 800627a:	55a9      	strbeq	r1, [r5, r6]
 800627c:	1cde      	adds	r6, r3, #3
 800627e:	6a05      	ldr	r5, [r0, #32]
 8006280:	f012 0f20 	tst.w	r2, #32
 8006284:	bf14      	ite	ne
 8006286:	55ac      	strbne	r4, [r5, r6]
 8006288:	55a9      	strbeq	r1, [r5, r6]
 800628a:	1d1e      	adds	r6, r3, #4
 800628c:	6a05      	ldr	r5, [r0, #32]
 800628e:	f012 0f10 	tst.w	r2, #16
 8006292:	bf14      	ite	ne
 8006294:	55ac      	strbne	r4, [r5, r6]
 8006296:	55a9      	strbeq	r1, [r5, r6]
 8006298:	1d5e      	adds	r6, r3, #5
 800629a:	6a05      	ldr	r5, [r0, #32]
 800629c:	f012 0f08 	tst.w	r2, #8
 80062a0:	bf14      	ite	ne
 80062a2:	55ac      	strbne	r4, [r5, r6]
 80062a4:	55a9      	strbeq	r1, [r5, r6]
 80062a6:	1d9e      	adds	r6, r3, #6
 80062a8:	6a05      	ldr	r5, [r0, #32]
 80062aa:	f012 0f04 	tst.w	r2, #4
 80062ae:	bf14      	ite	ne
 80062b0:	55ac      	strbne	r4, [r5, r6]
 80062b2:	55a9      	strbeq	r1, [r5, r6]
 80062b4:	1dde      	adds	r6, r3, #7
 80062b6:	6a05      	ldr	r5, [r0, #32]
 80062b8:	f012 0f02 	tst.w	r2, #2
 80062bc:	bf14      	ite	ne
 80062be:	55ac      	strbne	r4, [r5, r6]
 80062c0:	55a9      	strbeq	r1, [r5, r6]
 80062c2:	f012 0f01 	tst.w	r2, #1
 80062c6:	f103 0508 	add.w	r5, r3, #8
 80062ca:	6a02      	ldr	r2, [r0, #32]
 80062cc:	bf14      	ite	ne
 80062ce:	5554      	strbne	r4, [r2, r5]
 80062d0:	5551      	strbeq	r1, [r2, r5]
 80062d2:	f103 0409 	add.w	r4, r3, #9
 80062d6:	6a05      	ldr	r5, [r0, #32]
 80062d8:	7c41      	ldrb	r1, [r0, #17]
 80062da:	7c02      	ldrb	r2, [r0, #16]
 80062dc:	f01c 0f80 	tst.w	ip, #128	; 0x80
 80062e0:	bf0c      	ite	eq
 80062e2:	552a      	strbeq	r2, [r5, r4]
 80062e4:	5529      	strbne	r1, [r5, r4]
 80062e6:	f103 040a 	add.w	r4, r3, #10
 80062ea:	6a05      	ldr	r5, [r0, #32]
 80062ec:	f01c 0f40 	tst.w	ip, #64	; 0x40
 80062f0:	bf0c      	ite	eq
 80062f2:	552a      	strbeq	r2, [r5, r4]
 80062f4:	5529      	strbne	r1, [r5, r4]
 80062f6:	f103 040b 	add.w	r4, r3, #11
 80062fa:	6a05      	ldr	r5, [r0, #32]
 80062fc:	f01c 0f20 	tst.w	ip, #32
 8006300:	bf0c      	ite	eq
 8006302:	552a      	strbeq	r2, [r5, r4]
 8006304:	5529      	strbne	r1, [r5, r4]
 8006306:	f103 040c 	add.w	r4, r3, #12
 800630a:	6a05      	ldr	r5, [r0, #32]
 800630c:	f01c 0f10 	tst.w	ip, #16
 8006310:	bf0c      	ite	eq
 8006312:	552a      	strbeq	r2, [r5, r4]
 8006314:	5529      	strbne	r1, [r5, r4]
 8006316:	f103 040d 	add.w	r4, r3, #13
 800631a:	6a05      	ldr	r5, [r0, #32]
 800631c:	f01c 0f08 	tst.w	ip, #8
 8006320:	bf0c      	ite	eq
 8006322:	552a      	strbeq	r2, [r5, r4]
 8006324:	5529      	strbne	r1, [r5, r4]
 8006326:	f103 040e 	add.w	r4, r3, #14
 800632a:	6a05      	ldr	r5, [r0, #32]
 800632c:	f01c 0f04 	tst.w	ip, #4
 8006330:	bf0c      	ite	eq
 8006332:	552a      	strbeq	r2, [r5, r4]
 8006334:	5529      	strbne	r1, [r5, r4]
 8006336:	f103 040f 	add.w	r4, r3, #15
 800633a:	6a05      	ldr	r5, [r0, #32]
 800633c:	f01c 0f02 	tst.w	ip, #2
 8006340:	bf0c      	ite	eq
 8006342:	552a      	strbeq	r2, [r5, r4]
 8006344:	5529      	strbne	r1, [r5, r4]
 8006346:	f01c 0f01 	tst.w	ip, #1
 800634a:	f103 0410 	add.w	r4, r3, #16
 800634e:	bf15      	itete	ne
 8006350:	6a02      	ldrne	r2, [r0, #32]
 8006352:	6a01      	ldreq	r1, [r0, #32]
 8006354:	5511      	strbne	r1, [r2, r4]
 8006356:	550a      	strbeq	r2, [r1, r4]
 8006358:	6a05      	ldr	r5, [r0, #32]
 800635a:	7c02      	ldrb	r2, [r0, #16]
 800635c:	7c41      	ldrb	r1, [r0, #17]
 800635e:	f103 0411 	add.w	r4, r3, #17
 8006362:	f01e 0f80 	tst.w	lr, #128	; 0x80
 8006366:	bf0c      	ite	eq
 8006368:	552a      	strbeq	r2, [r5, r4]
 800636a:	5529      	strbne	r1, [r5, r4]
 800636c:	f103 0412 	add.w	r4, r3, #18
 8006370:	6a05      	ldr	r5, [r0, #32]
 8006372:	f01e 0f40 	tst.w	lr, #64	; 0x40
 8006376:	bf0c      	ite	eq
 8006378:	552a      	strbeq	r2, [r5, r4]
 800637a:	5529      	strbne	r1, [r5, r4]
 800637c:	f103 0413 	add.w	r4, r3, #19
 8006380:	6a05      	ldr	r5, [r0, #32]
 8006382:	f01e 0f20 	tst.w	lr, #32
 8006386:	bf0c      	ite	eq
 8006388:	552a      	strbeq	r2, [r5, r4]
 800638a:	5529      	strbne	r1, [r5, r4]
 800638c:	f103 0414 	add.w	r4, r3, #20
 8006390:	6a05      	ldr	r5, [r0, #32]
 8006392:	f01e 0f10 	tst.w	lr, #16
 8006396:	bf0c      	ite	eq
 8006398:	552a      	strbeq	r2, [r5, r4]
 800639a:	5529      	strbne	r1, [r5, r4]
 800639c:	f103 0415 	add.w	r4, r3, #21
 80063a0:	6a05      	ldr	r5, [r0, #32]
 80063a2:	f01e 0f08 	tst.w	lr, #8
 80063a6:	bf0c      	ite	eq
 80063a8:	552a      	strbeq	r2, [r5, r4]
 80063aa:	5529      	strbne	r1, [r5, r4]
 80063ac:	f103 0416 	add.w	r4, r3, #22
 80063b0:	6a05      	ldr	r5, [r0, #32]
 80063b2:	f01e 0f04 	tst.w	lr, #4
 80063b6:	bf0c      	ite	eq
 80063b8:	552a      	strbeq	r2, [r5, r4]
 80063ba:	5529      	strbne	r1, [r5, r4]
 80063bc:	f103 0417 	add.w	r4, r3, #23
 80063c0:	6a05      	ldr	r5, [r0, #32]
 80063c2:	f01e 0f02 	tst.w	lr, #2
 80063c6:	bf0c      	ite	eq
 80063c8:	552a      	strbeq	r2, [r5, r4]
 80063ca:	5529      	strbne	r1, [r5, r4]
 80063cc:	3318      	adds	r3, #24
 80063ce:	f01e 0f01 	tst.w	lr, #1
 80063d2:	e73e      	b.n	8006252 <WS28xx::SetPixel(unsigned int, unsigned char, unsigned char, unsigned char)+0x23e>
 80063d4:	6a05      	ldr	r5, [r0, #32]
 80063d6:	7c01      	ldrb	r1, [r0, #16]
 80063d8:	7c44      	ldrb	r4, [r0, #17]
 80063da:	1c5e      	adds	r6, r3, #1
 80063dc:	f01e 0f80 	tst.w	lr, #128	; 0x80
 80063e0:	bf0c      	ite	eq
 80063e2:	55a9      	strbeq	r1, [r5, r6]
 80063e4:	55ac      	strbne	r4, [r5, r6]
 80063e6:	1c9e      	adds	r6, r3, #2
 80063e8:	6a05      	ldr	r5, [r0, #32]
 80063ea:	f01e 0f40 	tst.w	lr, #64	; 0x40
 80063ee:	bf0c      	ite	eq
 80063f0:	55a9      	strbeq	r1, [r5, r6]
 80063f2:	55ac      	strbne	r4, [r5, r6]
 80063f4:	1cde      	adds	r6, r3, #3
 80063f6:	6a05      	ldr	r5, [r0, #32]
 80063f8:	f01e 0f20 	tst.w	lr, #32
 80063fc:	bf0c      	ite	eq
 80063fe:	55a9      	strbeq	r1, [r5, r6]
 8006400:	55ac      	strbne	r4, [r5, r6]
 8006402:	1d1e      	adds	r6, r3, #4
 8006404:	6a05      	ldr	r5, [r0, #32]
 8006406:	f01e 0f10 	tst.w	lr, #16
 800640a:	bf0c      	ite	eq
 800640c:	55a9      	strbeq	r1, [r5, r6]
 800640e:	55ac      	strbne	r4, [r5, r6]
 8006410:	1d5e      	adds	r6, r3, #5
 8006412:	6a05      	ldr	r5, [r0, #32]
 8006414:	f01e 0f08 	tst.w	lr, #8
 8006418:	bf0c      	ite	eq
 800641a:	55a9      	strbeq	r1, [r5, r6]
 800641c:	55ac      	strbne	r4, [r5, r6]
 800641e:	1d9e      	adds	r6, r3, #6
 8006420:	6a05      	ldr	r5, [r0, #32]
 8006422:	f01e 0f04 	tst.w	lr, #4
 8006426:	bf0c      	ite	eq
 8006428:	55a9      	strbeq	r1, [r5, r6]
 800642a:	55ac      	strbne	r4, [r5, r6]
 800642c:	1dde      	adds	r6, r3, #7
 800642e:	6a05      	ldr	r5, [r0, #32]
 8006430:	f01e 0f02 	tst.w	lr, #2
 8006434:	bf0c      	ite	eq
 8006436:	55a9      	strbeq	r1, [r5, r6]
 8006438:	55ac      	strbne	r4, [r5, r6]
 800643a:	f01e 0f01 	tst.w	lr, #1
 800643e:	bf14      	ite	ne
 8006440:	6a01      	ldrne	r1, [r0, #32]
 8006442:	6a04      	ldreq	r4, [r0, #32]
 8006444:	f103 0508 	add.w	r5, r3, #8
 8006448:	f103 0e09 	add.w	lr, r3, #9
 800644c:	bf14      	ite	ne
 800644e:	554c      	strbne	r4, [r1, r5]
 8006450:	5561      	strbeq	r1, [r4, r5]
 8006452:	6a05      	ldr	r5, [r0, #32]
 8006454:	7c01      	ldrb	r1, [r0, #16]
 8006456:	7c44      	ldrb	r4, [r0, #17]
 8006458:	f01c 0f80 	tst.w	ip, #128	; 0x80
 800645c:	bf0c      	ite	eq
 800645e:	f805 100e 	strbeq.w	r1, [r5, lr]
 8006462:	f805 400e 	strbne.w	r4, [r5, lr]
 8006466:	f103 0e0a 	add.w	lr, r3, #10
 800646a:	6a05      	ldr	r5, [r0, #32]
 800646c:	f01c 0f40 	tst.w	ip, #64	; 0x40
 8006470:	bf0c      	ite	eq
 8006472:	f805 100e 	strbeq.w	r1, [r5, lr]
 8006476:	f805 400e 	strbne.w	r4, [r5, lr]
 800647a:	f103 0e0b 	add.w	lr, r3, #11
 800647e:	6a05      	ldr	r5, [r0, #32]
 8006480:	f01c 0f20 	tst.w	ip, #32
 8006484:	bf0c      	ite	eq
 8006486:	f805 100e 	strbeq.w	r1, [r5, lr]
 800648a:	f805 400e 	strbne.w	r4, [r5, lr]
 800648e:	f103 0e0c 	add.w	lr, r3, #12
 8006492:	6a05      	ldr	r5, [r0, #32]
 8006494:	f01c 0f10 	tst.w	ip, #16
 8006498:	bf0c      	ite	eq
 800649a:	f805 100e 	strbeq.w	r1, [r5, lr]
 800649e:	f805 400e 	strbne.w	r4, [r5, lr]
 80064a2:	f103 0e0d 	add.w	lr, r3, #13
 80064a6:	6a05      	ldr	r5, [r0, #32]
 80064a8:	f01c 0f08 	tst.w	ip, #8
 80064ac:	bf0c      	ite	eq
 80064ae:	f805 100e 	strbeq.w	r1, [r5, lr]
 80064b2:	f805 400e 	strbne.w	r4, [r5, lr]
 80064b6:	f103 0e0e 	add.w	lr, r3, #14
 80064ba:	6a05      	ldr	r5, [r0, #32]
 80064bc:	f01c 0f04 	tst.w	ip, #4
 80064c0:	bf0c      	ite	eq
 80064c2:	f805 100e 	strbeq.w	r1, [r5, lr]
 80064c6:	f805 400e 	strbne.w	r4, [r5, lr]
 80064ca:	f103 0e0f 	add.w	lr, r3, #15
 80064ce:	6a05      	ldr	r5, [r0, #32]
 80064d0:	f01c 0f02 	tst.w	ip, #2
 80064d4:	bf0c      	ite	eq
 80064d6:	f805 100e 	strbeq.w	r1, [r5, lr]
 80064da:	f805 400e 	strbne.w	r4, [r5, lr]
 80064de:	f01c 0f01 	tst.w	ip, #1
 80064e2:	bf14      	ite	ne
 80064e4:	6a01      	ldrne	r1, [r0, #32]
 80064e6:	6a04      	ldreq	r4, [r0, #32]
 80064e8:	f103 0e10 	add.w	lr, r3, #16
 80064ec:	f103 0c11 	add.w	ip, r3, #17
 80064f0:	bf14      	ite	ne
 80064f2:	f801 400e 	strbne.w	r4, [r1, lr]
 80064f6:	f804 100e 	strbeq.w	r1, [r4, lr]
 80064fa:	6a05      	ldr	r5, [r0, #32]
 80064fc:	7c01      	ldrb	r1, [r0, #16]
 80064fe:	7c44      	ldrb	r4, [r0, #17]
 8006500:	0616      	lsls	r6, r2, #24
 8006502:	bf54      	ite	pl
 8006504:	f805 100c 	strbpl.w	r1, [r5, ip]
 8006508:	f805 400c 	strbmi.w	r4, [r5, ip]
 800650c:	f103 0c12 	add.w	ip, r3, #18
 8006510:	6a05      	ldr	r5, [r0, #32]
 8006512:	0656      	lsls	r6, r2, #25
 8006514:	bf54      	ite	pl
 8006516:	f805 100c 	strbpl.w	r1, [r5, ip]
 800651a:	f805 400c 	strbmi.w	r4, [r5, ip]
 800651e:	f103 0c13 	add.w	ip, r3, #19
 8006522:	6a05      	ldr	r5, [r0, #32]
 8006524:	0696      	lsls	r6, r2, #26
 8006526:	bf54      	ite	pl
 8006528:	f805 100c 	strbpl.w	r1, [r5, ip]
 800652c:	f805 400c 	strbmi.w	r4, [r5, ip]
 8006530:	6a05      	ldr	r5, [r0, #32]
 8006532:	f103 0c14 	add.w	ip, r3, #20
 8006536:	06d6      	lsls	r6, r2, #27
 8006538:	bf54      	ite	pl
 800653a:	f805 100c 	strbpl.w	r1, [r5, ip]
 800653e:	f805 400c 	strbmi.w	r4, [r5, ip]
 8006542:	f103 0c15 	add.w	ip, r3, #21
 8006546:	6a05      	ldr	r5, [r0, #32]
 8006548:	0716      	lsls	r6, r2, #28
 800654a:	bf54      	ite	pl
 800654c:	f805 100c 	strbpl.w	r1, [r5, ip]
 8006550:	f805 400c 	strbmi.w	r4, [r5, ip]
 8006554:	f103 0c16 	add.w	ip, r3, #22
 8006558:	6a05      	ldr	r5, [r0, #32]
 800655a:	0756      	lsls	r6, r2, #29
 800655c:	bf54      	ite	pl
 800655e:	f805 100c 	strbpl.w	r1, [r5, ip]
 8006562:	f805 400c 	strbmi.w	r4, [r5, ip]
 8006566:	f103 0c17 	add.w	ip, r3, #23
 800656a:	6a05      	ldr	r5, [r0, #32]
 800656c:	0796      	lsls	r6, r2, #30
 800656e:	bf54      	ite	pl
 8006570:	f805 100c 	strbpl.w	r1, [r5, ip]
 8006574:	f805 400c 	strbmi.w	r4, [r5, ip]
 8006578:	f012 0f01 	tst.w	r2, #1
 800657c:	f103 0318 	add.w	r3, r3, #24
 8006580:	6a02      	ldr	r2, [r0, #32]
 8006582:	f43f ae69 	beq.w	8006258 <WS28xx::SetPixel(unsigned int, unsigned char, unsigned char, unsigned char)+0x244>
 8006586:	54d4      	strb	r4, [r2, r3]
 8006588:	bd70      	pop	{r4, r5, r6, pc}
 800658a:	6a05      	ldr	r5, [r0, #32]
 800658c:	7c01      	ldrb	r1, [r0, #16]
 800658e:	7c44      	ldrb	r4, [r0, #17]
 8006590:	1c5e      	adds	r6, r3, #1
 8006592:	f012 0f80 	tst.w	r2, #128	; 0x80
 8006596:	bf14      	ite	ne
 8006598:	55ac      	strbne	r4, [r5, r6]
 800659a:	55a9      	strbeq	r1, [r5, r6]
 800659c:	1c9e      	adds	r6, r3, #2
 800659e:	6a05      	ldr	r5, [r0, #32]
 80065a0:	f012 0f40 	tst.w	r2, #64	; 0x40
 80065a4:	bf14      	ite	ne
 80065a6:	55ac      	strbne	r4, [r5, r6]
 80065a8:	55a9      	strbeq	r1, [r5, r6]
 80065aa:	1cde      	adds	r6, r3, #3
 80065ac:	6a05      	ldr	r5, [r0, #32]
 80065ae:	f012 0f20 	tst.w	r2, #32
 80065b2:	bf14      	ite	ne
 80065b4:	55ac      	strbne	r4, [r5, r6]
 80065b6:	55a9      	strbeq	r1, [r5, r6]
 80065b8:	1d1e      	adds	r6, r3, #4
 80065ba:	6a05      	ldr	r5, [r0, #32]
 80065bc:	f012 0f10 	tst.w	r2, #16
 80065c0:	bf14      	ite	ne
 80065c2:	55ac      	strbne	r4, [r5, r6]
 80065c4:	55a9      	strbeq	r1, [r5, r6]
 80065c6:	1d5e      	adds	r6, r3, #5
 80065c8:	6a05      	ldr	r5, [r0, #32]
 80065ca:	f012 0f08 	tst.w	r2, #8
 80065ce:	bf14      	ite	ne
 80065d0:	55ac      	strbne	r4, [r5, r6]
 80065d2:	55a9      	strbeq	r1, [r5, r6]
 80065d4:	1d9e      	adds	r6, r3, #6
 80065d6:	6a05      	ldr	r5, [r0, #32]
 80065d8:	f012 0f04 	tst.w	r2, #4
 80065dc:	bf14      	ite	ne
 80065de:	55ac      	strbne	r4, [r5, r6]
 80065e0:	55a9      	strbeq	r1, [r5, r6]
 80065e2:	1dde      	adds	r6, r3, #7
 80065e4:	6a05      	ldr	r5, [r0, #32]
 80065e6:	f012 0f02 	tst.w	r2, #2
 80065ea:	bf14      	ite	ne
 80065ec:	55ac      	strbne	r4, [r5, r6]
 80065ee:	55a9      	strbeq	r1, [r5, r6]
 80065f0:	f012 0f01 	tst.w	r2, #1
 80065f4:	f103 0508 	add.w	r5, r3, #8
 80065f8:	6a02      	ldr	r2, [r0, #32]
 80065fa:	bf14      	ite	ne
 80065fc:	5554      	strbne	r4, [r2, r5]
 80065fe:	5551      	strbeq	r1, [r2, r5]
 8006600:	f103 0409 	add.w	r4, r3, #9
 8006604:	6a05      	ldr	r5, [r0, #32]
 8006606:	7c41      	ldrb	r1, [r0, #17]
 8006608:	7c02      	ldrb	r2, [r0, #16]
 800660a:	f01e 0f80 	tst.w	lr, #128	; 0x80
 800660e:	bf0c      	ite	eq
 8006610:	552a      	strbeq	r2, [r5, r4]
 8006612:	5529      	strbne	r1, [r5, r4]
 8006614:	f103 040a 	add.w	r4, r3, #10
 8006618:	6a05      	ldr	r5, [r0, #32]
 800661a:	f01e 0f40 	tst.w	lr, #64	; 0x40
 800661e:	bf0c      	ite	eq
 8006620:	552a      	strbeq	r2, [r5, r4]
 8006622:	5529      	strbne	r1, [r5, r4]
 8006624:	f103 040b 	add.w	r4, r3, #11
 8006628:	6a05      	ldr	r5, [r0, #32]
 800662a:	f01e 0f20 	tst.w	lr, #32
 800662e:	bf0c      	ite	eq
 8006630:	552a      	strbeq	r2, [r5, r4]
 8006632:	5529      	strbne	r1, [r5, r4]
 8006634:	f103 040c 	add.w	r4, r3, #12
 8006638:	6a05      	ldr	r5, [r0, #32]
 800663a:	f01e 0f10 	tst.w	lr, #16
 800663e:	bf0c      	ite	eq
 8006640:	552a      	strbeq	r2, [r5, r4]
 8006642:	5529      	strbne	r1, [r5, r4]
 8006644:	f103 040d 	add.w	r4, r3, #13
 8006648:	6a05      	ldr	r5, [r0, #32]
 800664a:	f01e 0f08 	tst.w	lr, #8
 800664e:	bf0c      	ite	eq
 8006650:	552a      	strbeq	r2, [r5, r4]
 8006652:	5529      	strbne	r1, [r5, r4]
 8006654:	f103 040e 	add.w	r4, r3, #14
 8006658:	6a05      	ldr	r5, [r0, #32]
 800665a:	f01e 0f04 	tst.w	lr, #4
 800665e:	bf0c      	ite	eq
 8006660:	552a      	strbeq	r2, [r5, r4]
 8006662:	5529      	strbne	r1, [r5, r4]
 8006664:	f103 040f 	add.w	r4, r3, #15
 8006668:	6a05      	ldr	r5, [r0, #32]
 800666a:	f01e 0f02 	tst.w	lr, #2
 800666e:	bf0c      	ite	eq
 8006670:	552a      	strbeq	r2, [r5, r4]
 8006672:	5529      	strbne	r1, [r5, r4]
 8006674:	f01e 0f01 	tst.w	lr, #1
 8006678:	f103 0410 	add.w	r4, r3, #16
 800667c:	bf15      	itete	ne
 800667e:	6a02      	ldrne	r2, [r0, #32]
 8006680:	6a01      	ldreq	r1, [r0, #32]
 8006682:	5511      	strbne	r1, [r2, r4]
 8006684:	550a      	strbeq	r2, [r1, r4]
 8006686:	e5a7      	b.n	80061d8 <WS28xx::SetPixel(unsigned int, unsigned char, unsigned char, unsigned char)+0x1c4>
 8006688:	6a05      	ldr	r5, [r0, #32]
 800668a:	7c01      	ldrb	r1, [r0, #16]
 800668c:	7c44      	ldrb	r4, [r0, #17]
 800668e:	1c5e      	adds	r6, r3, #1
 8006690:	f01c 0f80 	tst.w	ip, #128	; 0x80
 8006694:	bf0c      	ite	eq
 8006696:	55a9      	strbeq	r1, [r5, r6]
 8006698:	55ac      	strbne	r4, [r5, r6]
 800669a:	1c9e      	adds	r6, r3, #2
 800669c:	6a05      	ldr	r5, [r0, #32]
 800669e:	f01c 0f40 	tst.w	ip, #64	; 0x40
 80066a2:	bf0c      	ite	eq
 80066a4:	55a9      	strbeq	r1, [r5, r6]
 80066a6:	55ac      	strbne	r4, [r5, r6]
 80066a8:	1cde      	adds	r6, r3, #3
 80066aa:	6a05      	ldr	r5, [r0, #32]
 80066ac:	f01c 0f20 	tst.w	ip, #32
 80066b0:	bf0c      	ite	eq
 80066b2:	55a9      	strbeq	r1, [r5, r6]
 80066b4:	55ac      	strbne	r4, [r5, r6]
 80066b6:	1d1e      	adds	r6, r3, #4
 80066b8:	6a05      	ldr	r5, [r0, #32]
 80066ba:	f01c 0f10 	tst.w	ip, #16
 80066be:	bf0c      	ite	eq
 80066c0:	55a9      	strbeq	r1, [r5, r6]
 80066c2:	55ac      	strbne	r4, [r5, r6]
 80066c4:	1d5e      	adds	r6, r3, #5
 80066c6:	6a05      	ldr	r5, [r0, #32]
 80066c8:	f01c 0f08 	tst.w	ip, #8
 80066cc:	bf0c      	ite	eq
 80066ce:	55a9      	strbeq	r1, [r5, r6]
 80066d0:	55ac      	strbne	r4, [r5, r6]
 80066d2:	1d9e      	adds	r6, r3, #6
 80066d4:	6a05      	ldr	r5, [r0, #32]
 80066d6:	f01c 0f04 	tst.w	ip, #4
 80066da:	bf0c      	ite	eq
 80066dc:	55a9      	strbeq	r1, [r5, r6]
 80066de:	55ac      	strbne	r4, [r5, r6]
 80066e0:	1dde      	adds	r6, r3, #7
 80066e2:	6a05      	ldr	r5, [r0, #32]
 80066e4:	f01c 0f02 	tst.w	ip, #2
 80066e8:	bf0c      	ite	eq
 80066ea:	55a9      	strbeq	r1, [r5, r6]
 80066ec:	55ac      	strbne	r4, [r5, r6]
 80066ee:	f01c 0f01 	tst.w	ip, #1
 80066f2:	bf14      	ite	ne
 80066f4:	6a01      	ldrne	r1, [r0, #32]
 80066f6:	6a04      	ldreq	r4, [r0, #32]
 80066f8:	f103 0508 	add.w	r5, r3, #8
 80066fc:	bf14      	ite	ne
 80066fe:	554c      	strbne	r4, [r1, r5]
 8006700:	5561      	strbeq	r1, [r4, r5]
 8006702:	f103 0509 	add.w	r5, r3, #9
 8006706:	6a06      	ldr	r6, [r0, #32]
 8006708:	7c01      	ldrb	r1, [r0, #16]
 800670a:	7c44      	ldrb	r4, [r0, #17]
 800670c:	f012 0f80 	tst.w	r2, #128	; 0x80
 8006710:	bf0c      	ite	eq
 8006712:	5571      	strbeq	r1, [r6, r5]
 8006714:	5574      	strbne	r4, [r6, r5]
 8006716:	f103 050a 	add.w	r5, r3, #10
 800671a:	6a06      	ldr	r6, [r0, #32]
 800671c:	f012 0f40 	tst.w	r2, #64	; 0x40
 8006720:	bf0c      	ite	eq
 8006722:	5571      	strbeq	r1, [r6, r5]
 8006724:	5574      	strbne	r4, [r6, r5]
 8006726:	f103 050b 	add.w	r5, r3, #11
 800672a:	6a06      	ldr	r6, [r0, #32]
 800672c:	f012 0f20 	tst.w	r2, #32
 8006730:	bf0c      	ite	eq
 8006732:	5571      	strbeq	r1, [r6, r5]
 8006734:	5574      	strbne	r4, [r6, r5]
 8006736:	f103 050c 	add.w	r5, r3, #12
 800673a:	6a06      	ldr	r6, [r0, #32]
 800673c:	f012 0f10 	tst.w	r2, #16
 8006740:	bf0c      	ite	eq
 8006742:	5571      	strbeq	r1, [r6, r5]
 8006744:	5574      	strbne	r4, [r6, r5]
 8006746:	f103 050d 	add.w	r5, r3, #13
 800674a:	6a06      	ldr	r6, [r0, #32]
 800674c:	f012 0f08 	tst.w	r2, #8
 8006750:	bf0c      	ite	eq
 8006752:	5571      	strbeq	r1, [r6, r5]
 8006754:	5574      	strbne	r4, [r6, r5]
 8006756:	f103 050e 	add.w	r5, r3, #14
 800675a:	6a06      	ldr	r6, [r0, #32]
 800675c:	f012 0f04 	tst.w	r2, #4
 8006760:	bf0c      	ite	eq
 8006762:	5571      	strbeq	r1, [r6, r5]
 8006764:	5574      	strbne	r4, [r6, r5]
 8006766:	f103 050f 	add.w	r5, r3, #15
 800676a:	6a06      	ldr	r6, [r0, #32]
 800676c:	f012 0f02 	tst.w	r2, #2
 8006770:	bf0c      	ite	eq
 8006772:	5571      	strbeq	r1, [r6, r5]
 8006774:	5574      	strbne	r4, [r6, r5]
 8006776:	f012 0f01 	tst.w	r2, #1
 800677a:	f103 0510 	add.w	r5, r3, #16
 800677e:	6a02      	ldr	r2, [r0, #32]
 8006780:	bf14      	ite	ne
 8006782:	5554      	strbne	r4, [r2, r5]
 8006784:	5551      	strbeq	r1, [r2, r5]
 8006786:	e5e7      	b.n	8006358 <WS28xx::SetPixel(unsigned int, unsigned char, unsigned char, unsigned char)+0x344>
 8006788:	6a05      	ldr	r5, [r0, #32]
 800678a:	7c01      	ldrb	r1, [r0, #16]
 800678c:	7c44      	ldrb	r4, [r0, #17]
 800678e:	1c5e      	adds	r6, r3, #1
 8006790:	f01c 0f80 	tst.w	ip, #128	; 0x80
 8006794:	bf0c      	ite	eq
 8006796:	55a9      	strbeq	r1, [r5, r6]
 8006798:	55ac      	strbne	r4, [r5, r6]
 800679a:	1c9e      	adds	r6, r3, #2
 800679c:	6a05      	ldr	r5, [r0, #32]
 800679e:	f01c 0f40 	tst.w	ip, #64	; 0x40
 80067a2:	bf0c      	ite	eq
 80067a4:	55a9      	strbeq	r1, [r5, r6]
 80067a6:	55ac      	strbne	r4, [r5, r6]
 80067a8:	1cde      	adds	r6, r3, #3
 80067aa:	6a05      	ldr	r5, [r0, #32]
 80067ac:	f01c 0f20 	tst.w	ip, #32
 80067b0:	bf0c      	ite	eq
 80067b2:	55a9      	strbeq	r1, [r5, r6]
 80067b4:	55ac      	strbne	r4, [r5, r6]
 80067b6:	1d1e      	adds	r6, r3, #4
 80067b8:	6a05      	ldr	r5, [r0, #32]
 80067ba:	f01c 0f10 	tst.w	ip, #16
 80067be:	bf0c      	ite	eq
 80067c0:	55a9      	strbeq	r1, [r5, r6]
 80067c2:	55ac      	strbne	r4, [r5, r6]
 80067c4:	1d5e      	adds	r6, r3, #5
 80067c6:	6a05      	ldr	r5, [r0, #32]
 80067c8:	f01c 0f08 	tst.w	ip, #8
 80067cc:	bf0c      	ite	eq
 80067ce:	55a9      	strbeq	r1, [r5, r6]
 80067d0:	55ac      	strbne	r4, [r5, r6]
 80067d2:	1d9e      	adds	r6, r3, #6
 80067d4:	6a05      	ldr	r5, [r0, #32]
 80067d6:	f01c 0f04 	tst.w	ip, #4
 80067da:	bf0c      	ite	eq
 80067dc:	55a9      	strbeq	r1, [r5, r6]
 80067de:	55ac      	strbne	r4, [r5, r6]
 80067e0:	1dde      	adds	r6, r3, #7
 80067e2:	6a05      	ldr	r5, [r0, #32]
 80067e4:	f01c 0f02 	tst.w	ip, #2
 80067e8:	bf0c      	ite	eq
 80067ea:	55a9      	strbeq	r1, [r5, r6]
 80067ec:	55ac      	strbne	r4, [r5, r6]
 80067ee:	f01c 0f01 	tst.w	ip, #1
 80067f2:	bf14      	ite	ne
 80067f4:	6a01      	ldrne	r1, [r0, #32]
 80067f6:	6a04      	ldreq	r4, [r0, #32]
 80067f8:	f103 0508 	add.w	r5, r3, #8
 80067fc:	bf14      	ite	ne
 80067fe:	554c      	strbne	r4, [r1, r5]
 8006800:	5561      	strbeq	r1, [r4, r5]
 8006802:	f103 0509 	add.w	r5, r3, #9
 8006806:	6a06      	ldr	r6, [r0, #32]
 8006808:	7c01      	ldrb	r1, [r0, #16]
 800680a:	7c44      	ldrb	r4, [r0, #17]
 800680c:	f01e 0f80 	tst.w	lr, #128	; 0x80
 8006810:	bf0c      	ite	eq
 8006812:	5571      	strbeq	r1, [r6, r5]
 8006814:	5574      	strbne	r4, [r6, r5]
 8006816:	f103 050a 	add.w	r5, r3, #10
 800681a:	6a06      	ldr	r6, [r0, #32]
 800681c:	f01e 0f40 	tst.w	lr, #64	; 0x40
 8006820:	bf0c      	ite	eq
 8006822:	5571      	strbeq	r1, [r6, r5]
 8006824:	5574      	strbne	r4, [r6, r5]
 8006826:	f103 050b 	add.w	r5, r3, #11
 800682a:	6a06      	ldr	r6, [r0, #32]
 800682c:	f01e 0f20 	tst.w	lr, #32
 8006830:	bf0c      	ite	eq
 8006832:	5571      	strbeq	r1, [r6, r5]
 8006834:	5574      	strbne	r4, [r6, r5]
 8006836:	f103 050c 	add.w	r5, r3, #12
 800683a:	6a06      	ldr	r6, [r0, #32]
 800683c:	f01e 0f10 	tst.w	lr, #16
 8006840:	bf0c      	ite	eq
 8006842:	5571      	strbeq	r1, [r6, r5]
 8006844:	5574      	strbne	r4, [r6, r5]
 8006846:	f103 050d 	add.w	r5, r3, #13
 800684a:	6a06      	ldr	r6, [r0, #32]
 800684c:	f01e 0f08 	tst.w	lr, #8
 8006850:	bf0c      	ite	eq
 8006852:	5571      	strbeq	r1, [r6, r5]
 8006854:	5574      	strbne	r4, [r6, r5]
 8006856:	f103 050e 	add.w	r5, r3, #14
 800685a:	6a06      	ldr	r6, [r0, #32]
 800685c:	f01e 0f04 	tst.w	lr, #4
 8006860:	bf0c      	ite	eq
 8006862:	5571      	strbeq	r1, [r6, r5]
 8006864:	5574      	strbne	r4, [r6, r5]
 8006866:	f103 050f 	add.w	r5, r3, #15
 800686a:	6a06      	ldr	r6, [r0, #32]
 800686c:	f01e 0f02 	tst.w	lr, #2
 8006870:	bf0c      	ite	eq
 8006872:	5571      	strbeq	r1, [r6, r5]
 8006874:	5574      	strbne	r4, [r6, r5]
 8006876:	f01e 0f01 	tst.w	lr, #1
 800687a:	bf0c      	ite	eq
 800687c:	6a04      	ldreq	r4, [r0, #32]
 800687e:	6a01      	ldrne	r1, [r0, #32]
 8006880:	f103 0510 	add.w	r5, r3, #16
 8006884:	bf0c      	ite	eq
 8006886:	5561      	strbeq	r1, [r4, r5]
 8006888:	554c      	strbne	r4, [r1, r5]
 800688a:	f103 0511 	add.w	r5, r3, #17
 800688e:	6a06      	ldr	r6, [r0, #32]
 8006890:	7c01      	ldrb	r1, [r0, #16]
 8006892:	7c44      	ldrb	r4, [r0, #17]
 8006894:	f012 0f80 	tst.w	r2, #128	; 0x80
 8006898:	bf0c      	ite	eq
 800689a:	5571      	strbeq	r1, [r6, r5]
 800689c:	5574      	strbne	r4, [r6, r5]
 800689e:	f103 0512 	add.w	r5, r3, #18
 80068a2:	6a06      	ldr	r6, [r0, #32]
 80068a4:	f012 0f40 	tst.w	r2, #64	; 0x40
 80068a8:	bf0c      	ite	eq
 80068aa:	5571      	strbeq	r1, [r6, r5]
 80068ac:	5574      	strbne	r4, [r6, r5]
 80068ae:	f103 0513 	add.w	r5, r3, #19
 80068b2:	6a06      	ldr	r6, [r0, #32]
 80068b4:	f012 0f20 	tst.w	r2, #32
 80068b8:	bf0c      	ite	eq
 80068ba:	5571      	strbeq	r1, [r6, r5]
 80068bc:	5574      	strbne	r4, [r6, r5]
 80068be:	6a06      	ldr	r6, [r0, #32]
 80068c0:	f103 0514 	add.w	r5, r3, #20
 80068c4:	f012 0f10 	tst.w	r2, #16
 80068c8:	bf0c      	ite	eq
 80068ca:	5571      	strbeq	r1, [r6, r5]
 80068cc:	5574      	strbne	r4, [r6, r5]
 80068ce:	f103 0515 	add.w	r5, r3, #21
 80068d2:	6a06      	ldr	r6, [r0, #32]
 80068d4:	f012 0f08 	tst.w	r2, #8
 80068d8:	bf0c      	ite	eq
 80068da:	5571      	strbeq	r1, [r6, r5]
 80068dc:	5574      	strbne	r4, [r6, r5]
 80068de:	f103 0516 	add.w	r5, r3, #22
 80068e2:	6a06      	ldr	r6, [r0, #32]
 80068e4:	f012 0f04 	tst.w	r2, #4
 80068e8:	bf0c      	ite	eq
 80068ea:	5571      	strbeq	r1, [r6, r5]
 80068ec:	5574      	strbne	r4, [r6, r5]
 80068ee:	f103 0517 	add.w	r5, r3, #23
 80068f2:	6a06      	ldr	r6, [r0, #32]
 80068f4:	f012 0f02 	tst.w	r2, #2
 80068f8:	bf0c      	ite	eq
 80068fa:	5571      	strbeq	r1, [r6, r5]
 80068fc:	5574      	strbne	r4, [r6, r5]
 80068fe:	e63b      	b.n	8006578 <WS28xx::SetPixel(unsigned int, unsigned char, unsigned char, unsigned char)+0x564>
 8006900:	6a01      	ldr	r1, [r0, #32]
 8006902:	54ca      	strb	r2, [r1, r3]
 8006904:	bd70      	pop	{r4, r5, r6, pc}
 8006906:	bf00      	nop

08006908 <WS28xx::SetPixel(unsigned int, unsigned char, unsigned char, unsigned char, unsigned char)>:
 8006908:	b5f0      	push	{r4, r5, r6, r7, lr}
 800690a:	6984      	ldr	r4, [r0, #24]
 800690c:	f89d 5014 	ldrb.w	r5, [sp, #20]
 8006910:	56e6      	ldrsb	r6, [r4, r3]
 8006912:	f814 e002 	ldrb.w	lr, [r4, r2]
 8006916:	f89d 2018 	ldrb.w	r2, [sp, #24]
 800691a:	f814 c005 	ldrb.w	ip, [r4, r5]
 800691e:	5ca2      	ldrb	r2, [r4, r2]
 8006920:	5ce3      	ldrb	r3, [r4, r3]
 8006922:	7c05      	ldrb	r5, [r0, #16]
 8006924:	7c44      	ldrb	r4, [r0, #17]
 8006926:	0149      	lsls	r1, r1, #5
 8006928:	1c4f      	adds	r7, r1, #1
 800692a:	2e00      	cmp	r6, #0
 800692c:	6a06      	ldr	r6, [r0, #32]
 800692e:	bfac      	ite	ge
 8006930:	55f5      	strbge	r5, [r6, r7]
 8006932:	55f4      	strblt	r4, [r6, r7]
 8006934:	1c8e      	adds	r6, r1, #2
 8006936:	6a07      	ldr	r7, [r0, #32]
 8006938:	f013 0f40 	tst.w	r3, #64	; 0x40
 800693c:	bf0c      	ite	eq
 800693e:	55bd      	strbeq	r5, [r7, r6]
 8006940:	55bc      	strbne	r4, [r7, r6]
 8006942:	1cce      	adds	r6, r1, #3
 8006944:	6a07      	ldr	r7, [r0, #32]
 8006946:	f013 0f20 	tst.w	r3, #32
 800694a:	bf0c      	ite	eq
 800694c:	55bd      	strbeq	r5, [r7, r6]
 800694e:	55bc      	strbne	r4, [r7, r6]
 8006950:	1d0e      	adds	r6, r1, #4
 8006952:	6a07      	ldr	r7, [r0, #32]
 8006954:	f013 0f10 	tst.w	r3, #16
 8006958:	bf0c      	ite	eq
 800695a:	55bd      	strbeq	r5, [r7, r6]
 800695c:	55bc      	strbne	r4, [r7, r6]
 800695e:	1d4e      	adds	r6, r1, #5
 8006960:	6a07      	ldr	r7, [r0, #32]
 8006962:	f013 0f08 	tst.w	r3, #8
 8006966:	bf0c      	ite	eq
 8006968:	55bd      	strbeq	r5, [r7, r6]
 800696a:	55bc      	strbne	r4, [r7, r6]
 800696c:	1d8e      	adds	r6, r1, #6
 800696e:	6a07      	ldr	r7, [r0, #32]
 8006970:	f013 0f04 	tst.w	r3, #4
 8006974:	bf0c      	ite	eq
 8006976:	55bd      	strbeq	r5, [r7, r6]
 8006978:	55bc      	strbne	r4, [r7, r6]
 800697a:	1dce      	adds	r6, r1, #7
 800697c:	6a07      	ldr	r7, [r0, #32]
 800697e:	f013 0f02 	tst.w	r3, #2
 8006982:	bf0c      	ite	eq
 8006984:	55bd      	strbeq	r5, [r7, r6]
 8006986:	55bc      	strbne	r4, [r7, r6]
 8006988:	f101 0608 	add.w	r6, r1, #8
 800698c:	f013 0f01 	tst.w	r3, #1
 8006990:	6a03      	ldr	r3, [r0, #32]
 8006992:	bf14      	ite	ne
 8006994:	559c      	strbne	r4, [r3, r6]
 8006996:	559d      	strbeq	r5, [r3, r6]
 8006998:	f101 0609 	add.w	r6, r1, #9
 800699c:	6a05      	ldr	r5, [r0, #32]
 800699e:	7c03      	ldrb	r3, [r0, #16]
 80069a0:	7c44      	ldrb	r4, [r0, #17]
 80069a2:	f01e 0f80 	tst.w	lr, #128	; 0x80
 80069a6:	bf0c      	ite	eq
 80069a8:	55ab      	strbeq	r3, [r5, r6]
 80069aa:	55ac      	strbne	r4, [r5, r6]
 80069ac:	f101 060a 	add.w	r6, r1, #10
 80069b0:	6a05      	ldr	r5, [r0, #32]
 80069b2:	f01e 0f40 	tst.w	lr, #64	; 0x40
 80069b6:	bf0c      	ite	eq
 80069b8:	55ab      	strbeq	r3, [r5, r6]
 80069ba:	55ac      	strbne	r4, [r5, r6]
 80069bc:	f101 060b 	add.w	r6, r1, #11
 80069c0:	6a05      	ldr	r5, [r0, #32]
 80069c2:	f01e 0f20 	tst.w	lr, #32
 80069c6:	bf0c      	ite	eq
 80069c8:	55ab      	strbeq	r3, [r5, r6]
 80069ca:	55ac      	strbne	r4, [r5, r6]
 80069cc:	f101 060c 	add.w	r6, r1, #12
 80069d0:	6a05      	ldr	r5, [r0, #32]
 80069d2:	f01e 0f10 	tst.w	lr, #16
 80069d6:	bf0c      	ite	eq
 80069d8:	55ab      	strbeq	r3, [r5, r6]
 80069da:	55ac      	strbne	r4, [r5, r6]
 80069dc:	f101 060d 	add.w	r6, r1, #13
 80069e0:	6a05      	ldr	r5, [r0, #32]
 80069e2:	f01e 0f08 	tst.w	lr, #8
 80069e6:	bf0c      	ite	eq
 80069e8:	55ab      	strbeq	r3, [r5, r6]
 80069ea:	55ac      	strbne	r4, [r5, r6]
 80069ec:	f101 060e 	add.w	r6, r1, #14
 80069f0:	6a05      	ldr	r5, [r0, #32]
 80069f2:	f01e 0f04 	tst.w	lr, #4
 80069f6:	bf0c      	ite	eq
 80069f8:	55ab      	strbeq	r3, [r5, r6]
 80069fa:	55ac      	strbne	r4, [r5, r6]
 80069fc:	f101 060f 	add.w	r6, r1, #15
 8006a00:	6a05      	ldr	r5, [r0, #32]
 8006a02:	f01e 0f02 	tst.w	lr, #2
 8006a06:	bf0c      	ite	eq
 8006a08:	55ab      	strbeq	r3, [r5, r6]
 8006a0a:	55ac      	strbne	r4, [r5, r6]
 8006a0c:	f01e 0f01 	tst.w	lr, #1
 8006a10:	bf14      	ite	ne
 8006a12:	6a03      	ldrne	r3, [r0, #32]
 8006a14:	6a04      	ldreq	r4, [r0, #32]
 8006a16:	f101 0510 	add.w	r5, r1, #16
 8006a1a:	bf14      	ite	ne
 8006a1c:	555c      	strbne	r4, [r3, r5]
 8006a1e:	5563      	strbeq	r3, [r4, r5]
 8006a20:	f101 0511 	add.w	r5, r1, #17
 8006a24:	7c03      	ldrb	r3, [r0, #16]
 8006a26:	7c44      	ldrb	r4, [r0, #17]
 8006a28:	6a06      	ldr	r6, [r0, #32]
 8006a2a:	f01c 0f80 	tst.w	ip, #128	; 0x80
 8006a2e:	bf0c      	ite	eq
 8006a30:	5573      	strbeq	r3, [r6, r5]
 8006a32:	5574      	strbne	r4, [r6, r5]
 8006a34:	f101 0512 	add.w	r5, r1, #18
 8006a38:	6a06      	ldr	r6, [r0, #32]
 8006a3a:	f01c 0f40 	tst.w	ip, #64	; 0x40
 8006a3e:	bf0c      	ite	eq
 8006a40:	5573      	strbeq	r3, [r6, r5]
 8006a42:	5574      	strbne	r4, [r6, r5]
 8006a44:	f101 0513 	add.w	r5, r1, #19
 8006a48:	6a06      	ldr	r6, [r0, #32]
 8006a4a:	f01c 0f20 	tst.w	ip, #32
 8006a4e:	bf0c      	ite	eq
 8006a50:	5573      	strbeq	r3, [r6, r5]
 8006a52:	5574      	strbne	r4, [r6, r5]
 8006a54:	f101 0514 	add.w	r5, r1, #20
 8006a58:	6a06      	ldr	r6, [r0, #32]
 8006a5a:	f01c 0f10 	tst.w	ip, #16
 8006a5e:	bf0c      	ite	eq
 8006a60:	5573      	strbeq	r3, [r6, r5]
 8006a62:	5574      	strbne	r4, [r6, r5]
 8006a64:	f101 0515 	add.w	r5, r1, #21
 8006a68:	6a06      	ldr	r6, [r0, #32]
 8006a6a:	f01c 0f08 	tst.w	ip, #8
 8006a6e:	bf0c      	ite	eq
 8006a70:	5573      	strbeq	r3, [r6, r5]
 8006a72:	5574      	strbne	r4, [r6, r5]
 8006a74:	f101 0516 	add.w	r5, r1, #22
 8006a78:	6a06      	ldr	r6, [r0, #32]
 8006a7a:	f01c 0f04 	tst.w	ip, #4
 8006a7e:	bf0c      	ite	eq
 8006a80:	5573      	strbeq	r3, [r6, r5]
 8006a82:	5574      	strbne	r4, [r6, r5]
 8006a84:	f101 0517 	add.w	r5, r1, #23
 8006a88:	6a06      	ldr	r6, [r0, #32]
 8006a8a:	f01c 0f02 	tst.w	ip, #2
 8006a8e:	bf0c      	ite	eq
 8006a90:	5573      	strbeq	r3, [r6, r5]
 8006a92:	5574      	strbne	r4, [r6, r5]
 8006a94:	f01c 0f01 	tst.w	ip, #1
 8006a98:	bf14      	ite	ne
 8006a9a:	6a03      	ldrne	r3, [r0, #32]
 8006a9c:	6a04      	ldreq	r4, [r0, #32]
 8006a9e:	f101 0518 	add.w	r5, r1, #24
 8006aa2:	bf14      	ite	ne
 8006aa4:	555c      	strbne	r4, [r3, r5]
 8006aa6:	5563      	strbeq	r3, [r4, r5]
 8006aa8:	f101 0519 	add.w	r5, r1, #25
 8006aac:	6a06      	ldr	r6, [r0, #32]
 8006aae:	7c03      	ldrb	r3, [r0, #16]
 8006ab0:	7c44      	ldrb	r4, [r0, #17]
 8006ab2:	0617      	lsls	r7, r2, #24
 8006ab4:	bf54      	ite	pl
 8006ab6:	5573      	strbpl	r3, [r6, r5]
 8006ab8:	5574      	strbmi	r4, [r6, r5]
 8006aba:	f101 051a 	add.w	r5, r1, #26
 8006abe:	6a06      	ldr	r6, [r0, #32]
 8006ac0:	0657      	lsls	r7, r2, #25
 8006ac2:	bf54      	ite	pl
 8006ac4:	5573      	strbpl	r3, [r6, r5]
 8006ac6:	5574      	strbmi	r4, [r6, r5]
 8006ac8:	6a06      	ldr	r6, [r0, #32]
 8006aca:	f101 051b 	add.w	r5, r1, #27
 8006ace:	0697      	lsls	r7, r2, #26
 8006ad0:	bf54      	ite	pl
 8006ad2:	5573      	strbpl	r3, [r6, r5]
 8006ad4:	5574      	strbmi	r4, [r6, r5]
 8006ad6:	f101 051c 	add.w	r5, r1, #28
 8006ada:	6a06      	ldr	r6, [r0, #32]
 8006adc:	06d7      	lsls	r7, r2, #27
 8006ade:	bf54      	ite	pl
 8006ae0:	5573      	strbpl	r3, [r6, r5]
 8006ae2:	5574      	strbmi	r4, [r6, r5]
 8006ae4:	f101 051d 	add.w	r5, r1, #29
 8006ae8:	6a06      	ldr	r6, [r0, #32]
 8006aea:	0717      	lsls	r7, r2, #28
 8006aec:	bf54      	ite	pl
 8006aee:	5573      	strbpl	r3, [r6, r5]
 8006af0:	5574      	strbmi	r4, [r6, r5]
 8006af2:	f101 051e 	add.w	r5, r1, #30
 8006af6:	6a06      	ldr	r6, [r0, #32]
 8006af8:	0757      	lsls	r7, r2, #29
 8006afa:	bf54      	ite	pl
 8006afc:	5573      	strbpl	r3, [r6, r5]
 8006afe:	5574      	strbmi	r4, [r6, r5]
 8006b00:	f101 051f 	add.w	r5, r1, #31
 8006b04:	6a06      	ldr	r6, [r0, #32]
 8006b06:	0797      	lsls	r7, r2, #30
 8006b08:	bf54      	ite	pl
 8006b0a:	5573      	strbpl	r3, [r6, r5]
 8006b0c:	5574      	strbmi	r4, [r6, r5]
 8006b0e:	07d2      	lsls	r2, r2, #31
 8006b10:	f101 0120 	add.w	r1, r1, #32
 8006b14:	bf4b      	itete	mi
 8006b16:	6a03      	ldrmi	r3, [r0, #32]
 8006b18:	6a02      	ldrpl	r2, [r0, #32]
 8006b1a:	545c      	strbmi	r4, [r3, r1]
 8006b1c:	5453      	strbpl	r3, [r2, r1]
 8006b1e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08006b20 <WS28xx::~WS28xx()>:
 8006b20:	4b01      	ldr	r3, [pc, #4]	; (8006b28 <WS28xx::~WS28xx()+0x8>)
 8006b22:	2200      	movs	r2, #0
 8006b24:	601a      	str	r2, [r3, #0]
 8006b26:	4770      	bx	lr
 8006b28:	20000630 	andcs	r0, r0, r0, lsr r6

08006b2c <WS28xx::SetupBuffers()>:
 8006b2c:	b513      	push	{r0, r1, r4, lr}
 8006b2e:	4604      	mov	r4, r0
 8006b30:	a801      	add	r0, sp, #4
 8006b32:	f002 fe6f 	bl	8009814 <gd32_spi_dma_tx_prepare(unsigned int*)>
 8006b36:	9b01      	ldr	r3, [sp, #4]
 8006b38:	4a07      	ldr	r2, [pc, #28]	; (8006b58 <WS28xx::SetupBuffers()+0x2c>)
 8006b3a:	6220      	str	r0, [r4, #32]
 8006b3c:	085b      	lsrs	r3, r3, #1
 8006b3e:	f023 0303 	bic.w	r3, r3, #3
 8006b42:	4418      	add	r0, r3
 8006b44:	69e3      	ldr	r3, [r4, #28]
 8006b46:	6013      	str	r3, [r2, #0]
 8006b48:	3303      	adds	r3, #3
 8006b4a:	f023 0303 	bic.w	r3, r3, #3
 8006b4e:	6260      	str	r0, [r4, #36]	; 0x24
 8006b50:	61e3      	str	r3, [r4, #28]
 8006b52:	b002      	add	sp, #8
 8006b54:	bd10      	pop	{r4, pc}
 8006b56:	bf00      	nop
 8006b58:	2000062c 	andcs	r0, r0, ip, lsr #12

08006b5c <WS28xx::WS28xx(PixelConfiguration&)>:
 8006b5c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006b5e:	23aa      	movs	r3, #170	; 0xaa
 8006b60:	2203      	movs	r2, #3
 8006b62:	e9c0 2300 	strd	r2, r3, [r0]
 8006b66:	460f      	mov	r7, r1
 8006b68:	2300      	movs	r3, #0
 8006b6a:	2106      	movs	r1, #6
 8006b6c:	f44f 027f 	mov.w	r2, #16711680	; 0xff0000
 8006b70:	6102      	str	r2, [r0, #16]
 8006b72:	e9c0 1302 	strd	r1, r3, [r0, #8]
 8006b76:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006b7a:	8282      	strh	r2, [r0, #20]
 8006b7c:	e9c0 3308 	strd	r3, r3, [r0, #32]
 8006b80:	4a16      	ldr	r2, [pc, #88]	; (8006bdc <WS28xx::WS28xx(PixelConfiguration&)+0x80>)
 8006b82:	4b17      	ldr	r3, [pc, #92]	; (8006be0 <WS28xx::WS28xx(PixelConfiguration&)+0x84>)
 8006b84:	6182      	str	r2, [r0, #24]
 8006b86:	463e      	mov	r6, r7
 8006b88:	4604      	mov	r4, r0
 8006b8a:	6018      	str	r0, [r3, #0]
 8006b8c:	4605      	mov	r5, r0
 8006b8e:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8006b90:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006b92:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 8006b96:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8006b9a:	a901      	add	r1, sp, #4
 8006b9c:	4638      	mov	r0, r7
 8006b9e:	f7fe fe4d 	bl	800583c <PixelConfiguration::Validate(unsigned int&)>
 8006ba2:	6862      	ldr	r2, [r4, #4]
 8006ba4:	9b01      	ldr	r3, [sp, #4]
 8006ba6:	7d61      	ldrb	r1, [r4, #21]
 8006ba8:	4353      	muls	r3, r2
 8006baa:	61e3      	str	r3, [r4, #28]
 8006bac:	b111      	cbz	r1, 8006bb4 <WS28xx::WS28xx(PixelConfiguration&)+0x58>
 8006bae:	00db      	lsls	r3, r3, #3
 8006bb0:	3301      	adds	r3, #1
 8006bb2:	61e3      	str	r3, [r4, #28]
 8006bb4:	6823      	ldr	r3, [r4, #0]
 8006bb6:	3b0b      	subs	r3, #11
 8006bb8:	2b02      	cmp	r3, #2
 8006bba:	bf9f      	itttt	ls
 8006bbc:	69e3      	ldrls	r3, [r4, #28]
 8006bbe:	18d2      	addls	r2, r2, r3
 8006bc0:	3208      	addls	r2, #8
 8006bc2:	61e2      	strls	r2, [r4, #28]
 8006bc4:	4620      	mov	r0, r4
 8006bc6:	f7ff ffb1 	bl	8006b2c <WS28xx::SetupBuffers()>
 8006bca:	f002 fd9b 	bl	8009704 <gd32_spi_dma_begin()>
 8006bce:	68f8      	ldr	r0, [r7, #12]
 8006bd0:	f002 fe0e 	bl	80097f0 <gd32_spi_dma_set_speed_hz(unsigned int)>
 8006bd4:	4620      	mov	r0, r4
 8006bd6:	b003      	add	sp, #12
 8006bd8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006bda:	bf00      	nop
 8006bdc:	0800b8d6 	stmdaeq	r0, {r1, r2, r4, r6, r7, fp, ip, sp, pc}
 8006be0:	20000630 	andcs	r0, r0, r0, lsr r6

08006be4 <WS28xx::Update()>:
 8006be4:	b430      	push	{r4, r5}
 8006be6:	4b0c      	ldr	r3, [pc, #48]	; (8006c18 <WS28xx::Update()+0x34>)
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	2200      	movs	r2, #0
 8006bec:	e9d0 1407 	ldrd	r1, r4, [r0, #28]
 8006bf0:	4299      	cmp	r1, r3
 8006bf2:	d807      	bhi.n	8006c04 <WS28xx::Update()+0x20>
 8006bf4:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8006bf6:	084d      	lsrs	r5, r1, #1
 8006bf8:	2300      	movs	r3, #0
 8006bfa:	42ab      	cmp	r3, r5
 8006bfc:	d105      	bne.n	8006c0a <WS28xx::Update()+0x26>
 8006bfe:	bc30      	pop	{r4, r5}
 8006c00:	f002 be10 	b.w	8009824 <gd32_spi_dma_tx_start(unsigned char const*, unsigned int)>
 8006c04:	54e2      	strb	r2, [r4, r3]
 8006c06:	3301      	adds	r3, #1
 8006c08:	e7f0      	b.n	8006bec <WS28xx::Update()+0x8>
 8006c0a:	f834 2013 	ldrh.w	r2, [r4, r3, lsl #1]
 8006c0e:	ba52      	rev16	r2, r2
 8006c10:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
 8006c14:	3301      	adds	r3, #1
 8006c16:	e7f0      	b.n	8006bfa <WS28xx::Update()+0x16>
 8006c18:	2000062c 	andcs	r0, r0, ip, lsr #12

08006c1c <WS28xx::Blackout()>:
 8006c1c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8006c20:	4604      	mov	r4, r0
 8006c22:	f3bf 8f6f 	isb	sy
 8006c26:	f002 fe17 	bl	8009858 <gd32_spi_dma_tx_is_active()>
 8006c2a:	2800      	cmp	r0, #0
 8006c2c:	d1f9      	bne.n	8006c22 <WS28xx::Blackout()+0x6>
 8006c2e:	e9d4 2800 	ldrd	r2, r8, [r4]
 8006c32:	e9d4 6308 	ldrd	r6, r3, [r4, #32]
 8006c36:	f1a2 070b 	sub.w	r7, r2, #11
 8006c3a:	2f02      	cmp	r7, #2
 8006c3c:	6223      	str	r3, [r4, #32]
 8006c3e:	7018      	strb	r0, [r3, #0]
 8006c40:	d829      	bhi.n	8006c96 <WS28xx::Blackout()+0x7a>
 8006c42:	7058      	strb	r0, [r3, #1]
 8006c44:	7098      	strb	r0, [r3, #2]
 8006c46:	70d8      	strb	r0, [r3, #3]
 8006c48:	4605      	mov	r5, r0
 8006c4a:	4681      	mov	r9, r0
 8006c4c:	4545      	cmp	r5, r8
 8006c4e:	d118      	bne.n	8006c82 <WS28xx::Blackout()+0x66>
 8006c50:	69e2      	ldr	r2, [r4, #28]
 8006c52:	6a20      	ldr	r0, [r4, #32]
 8006c54:	3a04      	subs	r2, #4
 8006c56:	1883      	adds	r3, r0, r2
 8006c58:	2f02      	cmp	r7, #2
 8006c5a:	bf14      	ite	ne
 8006c5c:	21ff      	movne	r1, #255	; 0xff
 8006c5e:	2100      	moveq	r1, #0
 8006c60:	5481      	strb	r1, [r0, r2]
 8006c62:	7059      	strb	r1, [r3, #1]
 8006c64:	7099      	strb	r1, [r3, #2]
 8006c66:	70d9      	strb	r1, [r3, #3]
 8006c68:	4620      	mov	r0, r4
 8006c6a:	f7ff ffbb 	bl	8006be4 <WS28xx::Update()>
 8006c6e:	f3bf 8f6f 	isb	sy
 8006c72:	f002 fdf1 	bl	8009858 <gd32_spi_dma_tx_is_active()>
 8006c76:	2800      	cmp	r0, #0
 8006c78:	d1f9      	bne.n	8006c6e <WS28xx::Blackout()+0x52>
 8006c7a:	6226      	str	r6, [r4, #32]
 8006c7c:	b003      	add	sp, #12
 8006c7e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006c82:	2300      	movs	r3, #0
 8006c84:	4629      	mov	r1, r5
 8006c86:	f8cd 9000 	str.w	r9, [sp]
 8006c8a:	461a      	mov	r2, r3
 8006c8c:	4620      	mov	r0, r4
 8006c8e:	f7ff f9c1 	bl	8006014 <WS28xx::SetPixel(unsigned int, unsigned char, unsigned char, unsigned char)>
 8006c92:	3501      	adds	r5, #1
 8006c94:	e7da      	b.n	8006c4c <WS28xx::Blackout()+0x30>
 8006c96:	6a23      	ldr	r3, [r4, #32]
 8006c98:	b102      	cbz	r2, 8006c9c <WS28xx::Blackout()+0x80>
 8006c9a:	7c22      	ldrb	r2, [r4, #16]
 8006c9c:	69e1      	ldr	r1, [r4, #28]
 8006c9e:	4419      	add	r1, r3
 8006ca0:	4299      	cmp	r1, r3
 8006ca2:	d0e1      	beq.n	8006c68 <WS28xx::Blackout()+0x4c>
 8006ca4:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006ca8:	e7fa      	b.n	8006ca0 <WS28xx::Blackout()+0x84>

08006caa <WS28xx::FullOn()>:
 8006caa:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8006cae:	4604      	mov	r4, r0
 8006cb0:	f3bf 8f6f 	isb	sy
 8006cb4:	f002 fdd0 	bl	8009858 <gd32_spi_dma_tx_is_active()>
 8006cb8:	2800      	cmp	r0, #0
 8006cba:	d1f9      	bne.n	8006cb0 <WS28xx::FullOn()+0x6>
 8006cbc:	e9d4 2800 	ldrd	r2, r8, [r4]
 8006cc0:	e9d4 6308 	ldrd	r6, r3, [r4, #32]
 8006cc4:	f1a2 070b 	sub.w	r7, r2, #11
 8006cc8:	2f02      	cmp	r7, #2
 8006cca:	6223      	str	r3, [r4, #32]
 8006ccc:	7018      	strb	r0, [r3, #0]
 8006cce:	d82a      	bhi.n	8006d26 <WS28xx::FullOn()+0x7c>
 8006cd0:	7058      	strb	r0, [r3, #1]
 8006cd2:	7098      	strb	r0, [r3, #2]
 8006cd4:	70d8      	strb	r0, [r3, #3]
 8006cd6:	4605      	mov	r5, r0
 8006cd8:	f04f 09ff 	mov.w	r9, #255	; 0xff
 8006cdc:	4545      	cmp	r5, r8
 8006cde:	d118      	bne.n	8006d12 <WS28xx::FullOn()+0x68>
 8006ce0:	69e2      	ldr	r2, [r4, #28]
 8006ce2:	6a20      	ldr	r0, [r4, #32]
 8006ce4:	3a04      	subs	r2, #4
 8006ce6:	1883      	adds	r3, r0, r2
 8006ce8:	2f02      	cmp	r7, #2
 8006cea:	bf14      	ite	ne
 8006cec:	21ff      	movne	r1, #255	; 0xff
 8006cee:	2100      	moveq	r1, #0
 8006cf0:	5481      	strb	r1, [r0, r2]
 8006cf2:	7059      	strb	r1, [r3, #1]
 8006cf4:	7099      	strb	r1, [r3, #2]
 8006cf6:	70d9      	strb	r1, [r3, #3]
 8006cf8:	4620      	mov	r0, r4
 8006cfa:	f7ff ff73 	bl	8006be4 <WS28xx::Update()>
 8006cfe:	f3bf 8f6f 	isb	sy
 8006d02:	f002 fda9 	bl	8009858 <gd32_spi_dma_tx_is_active()>
 8006d06:	2800      	cmp	r0, #0
 8006d08:	d1f9      	bne.n	8006cfe <WS28xx::FullOn()+0x54>
 8006d0a:	6226      	str	r6, [r4, #32]
 8006d0c:	b003      	add	sp, #12
 8006d0e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006d12:	23ff      	movs	r3, #255	; 0xff
 8006d14:	4629      	mov	r1, r5
 8006d16:	f8cd 9000 	str.w	r9, [sp]
 8006d1a:	461a      	mov	r2, r3
 8006d1c:	4620      	mov	r0, r4
 8006d1e:	f7ff f979 	bl	8006014 <WS28xx::SetPixel(unsigned int, unsigned char, unsigned char, unsigned char)>
 8006d22:	3501      	adds	r5, #1
 8006d24:	e7da      	b.n	8006cdc <WS28xx::FullOn()+0x32>
 8006d26:	6a23      	ldr	r3, [r4, #32]
 8006d28:	b13a      	cbz	r2, 8006d3a <WS28xx::FullOn()+0x90>
 8006d2a:	7c61      	ldrb	r1, [r4, #17]
 8006d2c:	69e2      	ldr	r2, [r4, #28]
 8006d2e:	441a      	add	r2, r3
 8006d30:	429a      	cmp	r2, r3
 8006d32:	d0e1      	beq.n	8006cf8 <WS28xx::FullOn()+0x4e>
 8006d34:	f803 1f01 	strb.w	r1, [r3, #1]!
 8006d38:	e7fa      	b.n	8006d30 <WS28xx::FullOn()+0x86>
 8006d3a:	21ff      	movs	r1, #255	; 0xff
 8006d3c:	e7f6      	b.n	8006d2c <WS28xx::FullOn()+0x82>
	...

08006d40 <Network::Network()>:
 8006d40:	4b05      	ldr	r3, [pc, #20]	; (8006d58 <Network::Network()+0x18>)
 8006d42:	4906      	ldr	r1, [pc, #24]	; (8006d5c <Network::Network()+0x1c>)
 8006d44:	6018      	str	r0, [r3, #0]
 8006d46:	1e42      	subs	r2, r0, #1
 8006d48:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006d4c:	f802 3f01 	strb.w	r3, [r2, #1]!
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	d1f9      	bne.n	8006d48 <Network::Network()+0x8>
 8006d54:	4770      	bx	lr
 8006d56:	bf00      	nop
 8006d58:	20000634 	andcs	r0, r0, r4, lsr r6
 8006d5c:	0800b9d6 	stmdaeq	r0, {r1, r2, r4, r6, r7, r8, fp, ip, sp, pc}

08006d60 <Network::MacAddressCopyTo(unsigned char*)>:
 8006d60:	4608      	mov	r0, r1
 8006d62:	f002 be5b 	b.w	8009a1c <mac_address_get(unsigned char*)>

08006d66 <Display::Write(unsigned int, char const*) [clone .isra.0]>:
 8006d66:	b430      	push	{r4, r5}
 8006d68:	b160      	cbz	r0, 8006d84 <Display::Write(unsigned int, char const*) [clone .isra.0]+0x1e>
 8006d6a:	6845      	ldr	r5, [r0, #4]
 8006d6c:	2300      	movs	r3, #0
 8006d6e:	5cd4      	ldrb	r4, [r2, r3]
 8006d70:	b11c      	cbz	r4, 8006d7a <Display::Write(unsigned int, char const*) [clone .isra.0]+0x14>
 8006d72:	1c5c      	adds	r4, r3, #1
 8006d74:	429d      	cmp	r5, r3
 8006d76:	4623      	mov	r3, r4
 8006d78:	d8f9      	bhi.n	8006d6e <Display::Write(unsigned int, char const*) [clone .isra.0]+0x8>
 8006d7a:	6804      	ldr	r4, [r0, #0]
 8006d7c:	69e4      	ldr	r4, [r4, #28]
 8006d7e:	46a4      	mov	ip, r4
 8006d80:	bc30      	pop	{r4, r5}
 8006d82:	4760      	bx	ip
 8006d84:	bc30      	pop	{r4, r5}
 8006d86:	4770      	bx	lr

08006d88 <DisplayUdf::DisplayUdf()>:
 8006d88:	b510      	push	{r4, lr}
 8006d8a:	4604      	mov	r4, r0
 8006d8c:	f000 fe38 	bl	8007a00 <Display::Display()>
 8006d90:	2300      	movs	r3, #0
 8006d92:	6523      	str	r3, [r4, #80]	; 0x50
 8006d94:	4b05      	ldr	r3, [pc, #20]	; (8006dac <DisplayUdf::DisplayUdf()+0x24>)
 8006d96:	f104 023b 	add.w	r2, r4, #59	; 0x3b
 8006d9a:	601c      	str	r4, [r3, #0]
 8006d9c:	2301      	movs	r3, #1
 8006d9e:	f802 3f01 	strb.w	r3, [r2, #1]!
 8006da2:	3301      	adds	r3, #1
 8006da4:	2b15      	cmp	r3, #21
 8006da6:	d1fa      	bne.n	8006d9e <DisplayUdf::DisplayUdf()+0x16>
 8006da8:	4620      	mov	r0, r4
 8006daa:	bd10      	pop	{r4, pc}
 8006dac:	20000638 	andcs	r0, r0, r8, lsr r6

08006db0 <DisplayUdf::SetTitle(char const*, ...)>:
 8006db0:	b40e      	push	{r1, r2, r3}
 8006db2:	b517      	push	{r0, r1, r2, r4, lr}
 8006db4:	ab05      	add	r3, sp, #20
 8006db6:	4604      	mov	r4, r0
 8006db8:	f853 2b04 	ldr.w	r2, [r3], #4
 8006dbc:	9301      	str	r3, [sp, #4]
 8006dbe:	211f      	movs	r1, #31
 8006dc0:	301c      	adds	r0, #28
 8006dc2:	f7fa ff77 	bl	8001cb4 <vsnprintf>
 8006dc6:	4420      	add	r0, r4
 8006dc8:	2300      	movs	r3, #0
 8006dca:	7703      	strb	r3, [r0, #28]
 8006dcc:	b003      	add	sp, #12
 8006dce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006dd2:	b003      	add	sp, #12
 8006dd4:	4770      	bx	lr

08006dd6 <DisplayUdf::Set(unsigned int, displayudf::Labels)>:
 8006dd6:	1e4b      	subs	r3, r1, #1
 8006dd8:	2b05      	cmp	r3, #5
 8006dda:	b530      	push	{r4, r5, lr}
 8006ddc:	d810      	bhi.n	8006e00 <DisplayUdf::Set(unsigned int, displayudf::Labels)+0x2a>
 8006dde:	f100 043b 	add.w	r4, r0, #59	; 0x3b
 8006de2:	2300      	movs	r3, #0
 8006de4:	b2c9      	uxtb	r1, r1
 8006de6:	f814 5f01 	ldrb.w	r5, [r4, #1]!
 8006dea:	428d      	cmp	r5, r1
 8006dec:	d109      	bne.n	8006e02 <DisplayUdf::Set(unsigned int, displayudf::Labels)+0x2c>
 8006dee:	1884      	adds	r4, r0, r2
 8006df0:	4403      	add	r3, r0
 8006df2:	f894 403c 	ldrb.w	r4, [r4, #60]	; 0x3c
 8006df6:	f883 403c 	strb.w	r4, [r3, #60]	; 0x3c
 8006dfa:	4402      	add	r2, r0
 8006dfc:	f882 103c 	strb.w	r1, [r2, #60]	; 0x3c
 8006e00:	bd30      	pop	{r4, r5, pc}
 8006e02:	3301      	adds	r3, #1
 8006e04:	2b14      	cmp	r3, #20
 8006e06:	d1ee      	bne.n	8006de6 <DisplayUdf::Set(unsigned int, displayudf::Labels)+0x10>
 8006e08:	e7f7      	b.n	8006dfa <DisplayUdf::Set(unsigned int, displayudf::Labels)+0x24>
	...

08006e0c <DisplayUdf::Show()>:
 8006e0c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006e0e:	f100 033b 	add.w	r3, r0, #59	; 0x3b
 8006e12:	4604      	mov	r4, r0
 8006e14:	f100 024f 	add.w	r2, r0, #79	; 0x4f
 8006e18:	21ff      	movs	r1, #255	; 0xff
 8006e1a:	f813 0f01 	ldrb.w	r0, [r3, #1]!
 8006e1e:	2806      	cmp	r0, #6
 8006e20:	bf88      	it	hi
 8006e22:	7019      	strbhi	r1, [r3, #0]
 8006e24:	4293      	cmp	r3, r2
 8006e26:	d1f8      	bne.n	8006e1a <DisplayUdf::Show()+0xe>
 8006e28:	2501      	movs	r5, #1
 8006e2a:	69a0      	ldr	r0, [r4, #24]
 8006e2c:	b118      	cbz	r0, 8006e36 <DisplayUdf::Show()+0x2a>
 8006e2e:	6803      	ldr	r3, [r0, #0]
 8006e30:	4629      	mov	r1, r5
 8006e32:	691b      	ldr	r3, [r3, #16]
 8006e34:	4798      	blx	r3
 8006e36:	3501      	adds	r5, #1
 8006e38:	2d06      	cmp	r5, #6
 8006e3a:	d1f6      	bne.n	8006e2a <DisplayUdf::Show()+0x1e>
 8006e3c:	f894 103c 	ldrb.w	r1, [r4, #60]	; 0x3c
 8006e40:	69a0      	ldr	r0, [r4, #24]
 8006e42:	f104 021c 	add.w	r2, r4, #28
 8006e46:	f7ff ff8e 	bl	8006d66 <Display::Write(unsigned int, char const*) [clone .isra.0]>
 8006e4a:	f894 103d 	ldrb.w	r1, [r4, #61]	; 0x3d
 8006e4e:	69a0      	ldr	r0, [r4, #24]
 8006e50:	4a12      	ldr	r2, [pc, #72]	; (8006e9c <DisplayUdf::Show()+0x90>)
 8006e52:	f7ff ff88 	bl	8006d66 <Display::Write(unsigned int, char const*) [clone .isra.0]>
 8006e56:	4b12      	ldr	r3, [pc, #72]	; (8006ea0 <DisplayUdf::Show()+0x94>)
 8006e58:	f894 103f 	ldrb.w	r1, [r4, #63]	; 0x3f
 8006e5c:	9300      	str	r3, [sp, #0]
 8006e5e:	4a11      	ldr	r2, [pc, #68]	; (8006ea4 <DisplayUdf::Show()+0x98>)
 8006e60:	2303      	movs	r3, #3
 8006e62:	4620      	mov	r0, r4
 8006e64:	f7f9 fe63 	bl	8000b2e <Display::Printf(unsigned int, char const*, ...)>
 8006e68:	4b0f      	ldr	r3, [pc, #60]	; (8006ea8 <DisplayUdf::Show()+0x9c>)
 8006e6a:	681a      	ldr	r2, [r3, #0]
 8006e6c:	f892 10ab 	ldrb.w	r1, [r2, #171]	; 0xab
 8006e70:	f892 30ac 	ldrb.w	r3, [r2, #172]	; 0xac
 8006e74:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 8006e78:	f892 10a7 	ldrb.w	r1, [r2, #167]	; 0xa7
 8006e7c:	f892 20a8 	ldrb.w	r2, [r2, #168]	; 0xa8
 8006e80:	eb02 2201 	add.w	r2, r2, r1, lsl #8
 8006e84:	b292      	uxth	r2, r2
 8006e86:	9200      	str	r2, [sp, #0]
 8006e88:	f894 1049 	ldrb.w	r1, [r4, #73]	; 0x49
 8006e8c:	4a07      	ldr	r2, [pc, #28]	; (8006eac <DisplayUdf::Show()+0xa0>)
 8006e8e:	b29b      	uxth	r3, r3
 8006e90:	4620      	mov	r0, r4
 8006e92:	f7f9 fe4c 	bl	8000b2e <Display::Printf(unsigned int, char const*, ...)>
 8006e96:	b003      	add	sp, #12
 8006e98:	bd30      	pop	{r4, r5, pc}
 8006e9a:	bf00      	nop
 8006e9c:	0800a3b8 	stmdaeq	r0, {r3, r4, r5, r7, r8, r9, sp, pc}
 8006ea0:	20001714 	andcs	r1, r0, r4, lsl r7
 8006ea4:	0800b9d9 	stmdaeq	r0, {r0, r3, r4, r6, r7, r8, fp, ip, sp, pc}
 8006ea8:	20000190 	mulcs	r0, r0, r1
 8006eac:	0800b9e8 	stmdaeq	r0, {r3, r5, r6, r7, r8, fp, ip, sp, pc}

08006eb0 <DisplayUdfParams::DisplayUdfParams(DisplayUdfParamsStore*)>:
 8006eb0:	b510      	push	{r4, lr}
 8006eb2:	2220      	movs	r2, #32
 8006eb4:	4604      	mov	r4, r0
 8006eb6:	f840 1b04 	str.w	r1, [r0], #4
 8006eba:	2100      	movs	r1, #0
 8006ebc:	f001 fb19 	bl	80084f2 <memset>
 8006ec0:	f647 7305 	movw	r3, #32517	; 0x7f05
 8006ec4:	84a3      	strh	r3, [r4, #36]	; 0x24
 8006ec6:	4620      	mov	r0, r4
 8006ec8:	bd10      	pop	{r4, pc}

08006eca <DisplayUdfParams::Load()>:
 8006eca:	b508      	push	{r3, lr}
 8006ecc:	2300      	movs	r3, #0
 8006ece:	4601      	mov	r1, r0
 8006ed0:	6043      	str	r3, [r0, #4]
 8006ed2:	6800      	ldr	r0, [r0, #0]
 8006ed4:	b120      	cbz	r0, 8006ee0 <DisplayUdfParams::Load()+0x16>
 8006ed6:	6803      	ldr	r3, [r0, #0]
 8006ed8:	3104      	adds	r1, #4
 8006eda:	68db      	ldr	r3, [r3, #12]
 8006edc:	4798      	blx	r3
 8006ede:	2001      	movs	r0, #1
 8006ee0:	bd08      	pop	{r3, pc}

08006ee2 <DisplayUdfParams::Set(DisplayUdf*)>:
 8006ee2:	6843      	ldr	r3, [r0, #4]
 8006ee4:	009a      	lsls	r2, r3, #2
 8006ee6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006eea:	4604      	mov	r4, r0
 8006eec:	460e      	mov	r6, r1
 8006eee:	d506      	bpl.n	8006efe <DisplayUdfParams::Set(DisplayUdf*)+0x1c>
 8006ef0:	6988      	ldr	r0, [r1, #24]
 8006ef2:	b120      	cbz	r0, 8006efe <DisplayUdfParams::Set(DisplayUdf*)+0x1c>
 8006ef4:	6803      	ldr	r3, [r0, #0]
 8006ef6:	f894 1025 	ldrb.w	r1, [r4, #37]	; 0x25
 8006efa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006efc:	4798      	blx	r3
 8006efe:	6863      	ldr	r3, [r4, #4]
 8006f00:	69b0      	ldr	r0, [r6, #24]
 8006f02:	00db      	lsls	r3, r3, #3
 8006f04:	bf41      	itttt	mi
 8006f06:	f894 3024 	ldrbmi.w	r3, [r4, #36]	; 0x24
 8006f0a:	f64e 2260 	movwmi	r2, #60000	; 0xea60
 8006f0e:	4353      	mulmi	r3, r2
 8006f10:	6173      	strmi	r3, [r6, #20]
 8006f12:	6861      	ldr	r1, [r4, #4]
 8006f14:	f3c1 7180 	ubfx	r1, r1, #30, #1
 8006f18:	b110      	cbz	r0, 8006f20 <DisplayUdfParams::Set(DisplayUdf*)+0x3e>
 8006f1a:	6803      	ldr	r3, [r0, #0]
 8006f1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f1e:	4798      	blx	r3
 8006f20:	2500      	movs	r5, #0
 8006f22:	2701      	movs	r7, #1
 8006f24:	f104 0808 	add.w	r8, r4, #8
 8006f28:	6862      	ldr	r2, [r4, #4]
 8006f2a:	fa07 f305 	lsl.w	r3, r7, r5
 8006f2e:	4393      	bics	r3, r2
 8006f30:	d105      	bne.n	8006f3e <DisplayUdfParams::Set(DisplayUdf*)+0x5c>
 8006f32:	f818 1005 	ldrb.w	r1, [r8, r5]
 8006f36:	462a      	mov	r2, r5
 8006f38:	4630      	mov	r0, r6
 8006f3a:	f7ff ff4c 	bl	8006dd6 <DisplayUdf::Set(unsigned int, displayudf::Labels)>
 8006f3e:	3501      	adds	r5, #1
 8006f40:	2d14      	cmp	r5, #20
 8006f42:	d1f1      	bne.n	8006f28 <DisplayUdfParams::Set(DisplayUdf*)+0x46>
 8006f44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08006f48 <DisplayUdfParams::Dump()>:
 8006f48:	4770      	bx	lr
	...

08006f4c <ConfigStore::GetStoreOffset(configstore::Store)>:
 8006f4c:	b510      	push	{r4, lr}
 8006f4e:	4a05      	ldr	r2, [pc, #20]	; (8006f64 <ConfigStore::GetStoreOffset(configstore::Store)+0x18>)
 8006f50:	2300      	movs	r3, #0
 8006f52:	2020      	movs	r0, #32
 8006f54:	428b      	cmp	r3, r1
 8006f56:	d100      	bne.n	8006f5a <ConfigStore::GetStoreOffset(configstore::Store)+0xe>
 8006f58:	bd10      	pop	{r4, pc}
 8006f5a:	f852 4b04 	ldr.w	r4, [r2], #4
 8006f5e:	3301      	adds	r3, #1
 8006f60:	4420      	add	r0, r4
 8006f62:	e7f7      	b.n	8006f54 <ConfigStore::GetStoreOffset(configstore::Store)+0x8>
 8006f64:	0800b9f8 	stmdaeq	r0, {r3, r4, r5, r6, r7, r8, fp, ip, sp, pc}

08006f68 <ConfigStore::Init()>:
 8006f68:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006f6c:	b085      	sub	sp, #20
 8006f6e:	4607      	mov	r7, r0
 8006f70:	f000 f9ca 	bl	8007308 <StoreDevice::GetSectorSize() const>
 8006f74:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
 8006f78:	4605      	mov	r5, r0
 8006f7a:	d004      	beq.n	8006f86 <ConfigStore::Init()+0x1e>
 8006f7c:	2500      	movs	r5, #0
 8006f7e:	4628      	mov	r0, r5
 8006f80:	b005      	add	sp, #20
 8006f82:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006f86:	4638      	mov	r0, r7
 8006f88:	f000 f9bc 	bl	8007304 <StoreDevice::GetSize() const>
 8006f8c:	4b3a      	ldr	r3, [pc, #232]	; (8007078 <ConfigStore::Init()+0x110>)
 8006f8e:	f5a0 5180 	sub.w	r1, r0, #4096	; 0x1000
 8006f92:	f3c1 060b 	ubfx	r6, r1, #0, #12
 8006f96:	6019      	str	r1, [r3, #0]
 8006f98:	2e00      	cmp	r6, #0
 8006f9a:	d1ef      	bne.n	8006f7c <ConfigStore::Init()+0x14>
 8006f9c:	4c37      	ldr	r4, [pc, #220]	; (800707c <ConfigStore::Init()+0x114>)
 8006f9e:	ab03      	add	r3, sp, #12
 8006fa0:	462a      	mov	r2, r5
 8006fa2:	9300      	str	r3, [sp, #0]
 8006fa4:	4638      	mov	r0, r7
 8006fa6:	4623      	mov	r3, r4
 8006fa8:	f000 f9b0 	bl	800730c <StoreDevice::Read(unsigned int, unsigned int, unsigned char*, storedevice::result&)>
 8006fac:	7823      	ldrb	r3, [r4, #0]
 8006fae:	2b41      	cmp	r3, #65	; 0x41
 8006fb0:	bf1c      	itt	ne
 8006fb2:	2341      	movne	r3, #65	; 0x41
 8006fb4:	7023      	strbne	r3, [r4, #0]
 8006fb6:	7863      	ldrb	r3, [r4, #1]
 8006fb8:	bf14      	ite	ne
 8006fba:	4635      	movne	r5, r6
 8006fbc:	2501      	moveq	r5, #1
 8006fbe:	2b76      	cmp	r3, #118	; 0x76
 8006fc0:	bf1c      	itt	ne
 8006fc2:	2376      	movne	r3, #118	; 0x76
 8006fc4:	7063      	strbne	r3, [r4, #1]
 8006fc6:	78a3      	ldrb	r3, [r4, #2]
 8006fc8:	bf18      	it	ne
 8006fca:	2500      	movne	r5, #0
 8006fcc:	2b56      	cmp	r3, #86	; 0x56
 8006fce:	bf1c      	itt	ne
 8006fd0:	2356      	movne	r3, #86	; 0x56
 8006fd2:	70a3      	strbne	r3, [r4, #2]
 8006fd4:	78e3      	ldrb	r3, [r4, #3]
 8006fd6:	bf18      	it	ne
 8006fd8:	2500      	movne	r5, #0
 8006fda:	2b10      	cmp	r3, #16
 8006fdc:	d01f      	beq.n	800701e <ConfigStore::Init()+0xb6>
 8006fde:	2310      	movs	r3, #16
 8006fe0:	70e3      	strb	r3, [r4, #3]
 8006fe2:	4b27      	ldr	r3, [pc, #156]	; (8007080 <ConfigStore::Init()+0x118>)
 8006fe4:	f8df 80a0 	ldr.w	r8, [pc, #160]	; 8007088 <ConfigStore::Init()+0x120>
 8006fe8:	2201      	movs	r2, #1
 8006fea:	701a      	strb	r2, [r3, #0]
 8006fec:	2500      	movs	r5, #0
 8006fee:	f04f 09ff 	mov.w	r9, #255	; 0xff
 8006ff2:	4631      	mov	r1, r6
 8006ff4:	4638      	mov	r0, r7
 8006ff6:	f7ff ffa9 	bl	8006f4c <ConfigStore::GetStoreOffset(configstore::Store)>
 8006ffa:	1823      	adds	r3, r4, r0
 8006ffc:	5425      	strb	r5, [r4, r0]
 8006ffe:	705d      	strb	r5, [r3, #1]
 8007000:	709d      	strb	r5, [r3, #2]
 8007002:	70dd      	strb	r5, [r3, #3]
 8007004:	f858 3b04 	ldr.w	r3, [r8], #4
 8007008:	1d02      	adds	r2, r0, #4
 800700a:	4403      	add	r3, r0
 800700c:	429a      	cmp	r2, r3
 800700e:	d32f      	bcc.n	8007070 <ConfigStore::Init()+0x108>
 8007010:	3601      	adds	r6, #1
 8007012:	2e1c      	cmp	r6, #28
 8007014:	d1ed      	bne.n	8006ff2 <ConfigStore::Init()+0x8a>
 8007016:	4b1b      	ldr	r3, [pc, #108]	; (8007084 <ConfigStore::Init()+0x11c>)
 8007018:	2501      	movs	r5, #1
 800701a:	601d      	str	r5, [r3, #0]
 800701c:	e7af      	b.n	8006f7e <ConfigStore::Init()+0x16>
 800701e:	2d00      	cmp	r5, #0
 8007020:	d0df      	beq.n	8006fe2 <ConfigStore::Init()+0x7a>
 8007022:	f04f 0900 	mov.w	r9, #0
 8007026:	46c8      	mov	r8, r9
 8007028:	4631      	mov	r1, r6
 800702a:	4638      	mov	r0, r7
 800702c:	f7ff ff8e 	bl	8006f4c <ConfigStore::GetStoreOffset(configstore::Store)>
 8007030:	5c23      	ldrb	r3, [r4, r0]
 8007032:	2bff      	cmp	r3, #255	; 0xff
 8007034:	d112      	bne.n	800705c <ConfigStore::Init()+0xf4>
 8007036:	1823      	adds	r3, r4, r0
 8007038:	785a      	ldrb	r2, [r3, #1]
 800703a:	2aff      	cmp	r2, #255	; 0xff
 800703c:	d10e      	bne.n	800705c <ConfigStore::Init()+0xf4>
 800703e:	789a      	ldrb	r2, [r3, #2]
 8007040:	2aff      	cmp	r2, #255	; 0xff
 8007042:	d10b      	bne.n	800705c <ConfigStore::Init()+0xf4>
 8007044:	78da      	ldrb	r2, [r3, #3]
 8007046:	2aff      	cmp	r2, #255	; 0xff
 8007048:	d108      	bne.n	800705c <ConfigStore::Init()+0xf4>
 800704a:	f804 8000 	strb.w	r8, [r4, r0]
 800704e:	46a9      	mov	r9, r5
 8007050:	f883 8001 	strb.w	r8, [r3, #1]
 8007054:	f883 8002 	strb.w	r8, [r3, #2]
 8007058:	f883 8003 	strb.w	r8, [r3, #3]
 800705c:	3601      	adds	r6, #1
 800705e:	2e1c      	cmp	r6, #28
 8007060:	d1e2      	bne.n	8007028 <ConfigStore::Init()+0xc0>
 8007062:	f1b9 0f00 	cmp.w	r9, #0
 8007066:	d08a      	beq.n	8006f7e <ConfigStore::Init()+0x16>
 8007068:	4b06      	ldr	r3, [pc, #24]	; (8007084 <ConfigStore::Init()+0x11c>)
 800706a:	2201      	movs	r2, #1
 800706c:	601a      	str	r2, [r3, #0]
 800706e:	e786      	b.n	8006f7e <ConfigStore::Init()+0x16>
 8007070:	f804 9002 	strb.w	r9, [r4, r2]
 8007074:	3201      	adds	r2, #1
 8007076:	e7c9      	b.n	800700c <ConfigStore::Init()+0xa4>
 8007078:	20001640 	andcs	r1, r0, r0, asr #12
 800707c:	20000640 	andcs	r0, r0, r0, asr #12
 8007080:	20001654 	andcs	r1, r0, r4, asr r6
 8007084:	2000164c 	andcs	r1, r0, ip, asr #12
 8007088:	0800b9f8 	stmdaeq	r0, {r3, r4, r5, r6, r7, r8, fp, ip, sp, pc}

0800708c <ConfigStore::ConfigStore()>:
 800708c:	b538      	push	{r3, r4, r5, lr}
 800708e:	4604      	mov	r4, r0
 8007090:	f000 f930 	bl	80072f4 <StoreDevice::StoreDevice()>
 8007094:	4b0b      	ldr	r3, [pc, #44]	; (80070c4 <ConfigStore::ConfigStore()+0x38>)
 8007096:	4d0c      	ldr	r5, [pc, #48]	; (80070c8 <ConfigStore::ConfigStore()+0x3c>)
 8007098:	601c      	str	r4, [r3, #0]
 800709a:	7863      	ldrb	r3, [r4, #1]
 800709c:	b11b      	cbz	r3, 80070a6 <ConfigStore::ConfigStore()+0x1a>
 800709e:	4620      	mov	r0, r4
 80070a0:	f7ff ff62 	bl	8006f68 <ConfigStore::Init()>
 80070a4:	7028      	strb	r0, [r5, #0]
 80070a6:	782b      	ldrb	r3, [r5, #0]
 80070a8:	b153      	cbz	r3, 80070c0 <ConfigStore::ConfigStore()+0x34>
 80070aa:	4908      	ldr	r1, [pc, #32]	; (80070cc <ConfigStore::ConfigStore()+0x40>)
 80070ac:	2320      	movs	r3, #32
 80070ae:	2200      	movs	r2, #0
 80070b0:	f851 0b04 	ldr.w	r0, [r1], #4
 80070b4:	3201      	adds	r2, #1
 80070b6:	2a1c      	cmp	r2, #28
 80070b8:	4403      	add	r3, r0
 80070ba:	d1f9      	bne.n	80070b0 <ConfigStore::ConfigStore()+0x24>
 80070bc:	4a04      	ldr	r2, [pc, #16]	; (80070d0 <ConfigStore::ConfigStore()+0x44>)
 80070be:	6013      	str	r3, [r2, #0]
 80070c0:	4620      	mov	r0, r4
 80070c2:	bd38      	pop	{r3, r4, r5, pc}
 80070c4:	20001650 	andcs	r1, r0, r0, asr r6
 80070c8:	20001644 	andcs	r1, r0, r4, asr #12
 80070cc:	0800b9f8 	stmdaeq	r0, {r3, r4, r5, r6, r7, r8, fp, ip, sp, pc}
 80070d0:	20001648 	andcs	r1, r0, r8, asr #12

080070d4 <ConfigStore::ResetSetList(configstore::Store)>:
 80070d4:	b508      	push	{r3, lr}
 80070d6:	f7ff ff39 	bl	8006f4c <ConfigStore::GetStoreOffset(configstore::Store)>
 80070da:	4905      	ldr	r1, [pc, #20]	; (80070f0 <ConfigStore::ResetSetList(configstore::Store)+0x1c>)
 80070dc:	1842      	adds	r2, r0, r1
 80070de:	2300      	movs	r3, #0
 80070e0:	540b      	strb	r3, [r1, r0]
 80070e2:	7053      	strb	r3, [r2, #1]
 80070e4:	7093      	strb	r3, [r2, #2]
 80070e6:	70d3      	strb	r3, [r2, #3]
 80070e8:	4b02      	ldr	r3, [pc, #8]	; (80070f4 <ConfigStore::ResetSetList(configstore::Store)+0x20>)
 80070ea:	2201      	movs	r2, #1
 80070ec:	601a      	str	r2, [r3, #0]
 80070ee:	bd08      	pop	{r3, pc}
 80070f0:	20000640 	andcs	r0, r0, r0, asr #12
 80070f4:	2000164c 	andcs	r1, r0, ip, asr #12

080070f8 <ConfigStore::Update(configstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>:
 80070f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80070fc:	461c      	mov	r4, r3
 80070fe:	4b19      	ldr	r3, [pc, #100]	; (8007164 <ConfigStore::Update(configstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)+0x6c>)
 8007100:	9d07      	ldr	r5, [sp, #28]
 8007102:	781f      	ldrb	r7, [r3, #0]
 8007104:	4616      	mov	r6, r2
 8007106:	b307      	cbz	r7, 800714a <ConfigStore::Update(configstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)+0x52>
 8007108:	f7ff ff20 	bl	8006f4c <ConfigStore::GetStoreOffset(configstore::Store)>
 800710c:	4a16      	ldr	r2, [pc, #88]	; (8007168 <ConfigStore::Update(configstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)+0x70>)
 800710e:	1831      	adds	r1, r6, r0
 8007110:	1e63      	subs	r3, r4, #1
 8007112:	9c06      	ldr	r4, [sp, #24]
 8007114:	4411      	add	r1, r2
 8007116:	440c      	add	r4, r1
 8007118:	f04f 0c00 	mov.w	ip, #0
 800711c:	42a1      	cmp	r1, r4
 800711e:	d116      	bne.n	800714e <ConfigStore::Update(configstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)+0x56>
 8007120:	f1bc 0f00 	cmp.w	ip, #0
 8007124:	d011      	beq.n	800714a <ConfigStore::Update(configstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)+0x52>
 8007126:	4b11      	ldr	r3, [pc, #68]	; (800716c <ConfigStore::Update(configstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)+0x74>)
 8007128:	6819      	ldr	r1, [r3, #0]
 800712a:	b109      	cbz	r1, 8007130 <ConfigStore::Update(configstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)+0x38>
 800712c:	2906      	cmp	r1, #6
 800712e:	d101      	bne.n	8007134 <ConfigStore::Update(configstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)+0x3c>
 8007130:	2101      	movs	r1, #1
 8007132:	6019      	str	r1, [r3, #0]
 8007134:	4b0e      	ldr	r3, [pc, #56]	; (8007170 <ConfigStore::Update(configstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)+0x78>)
 8007136:	6819      	ldr	r1, [r3, #0]
 8007138:	4b0e      	ldr	r3, [pc, #56]	; (8007174 <ConfigStore::Update(configstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)+0x7c>)
 800713a:	6019      	str	r1, [r3, #0]
 800713c:	b12e      	cbz	r6, 800714a <ConfigStore::Update(configstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)+0x52>
 800713e:	b125      	cbz	r5, 800714a <ConfigStore::Update(configstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)+0x52>
 8007140:	9b08      	ldr	r3, [sp, #32]
 8007142:	4418      	add	r0, r3
 8007144:	5813      	ldr	r3, [r2, r0]
 8007146:	432b      	orrs	r3, r5
 8007148:	5013      	str	r3, [r2, r0]
 800714a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800714e:	f891 8000 	ldrb.w	r8, [r1]
 8007152:	f813 ef01 	ldrb.w	lr, [r3, #1]!
 8007156:	45f0      	cmp	r8, lr
 8007158:	bf1c      	itt	ne
 800715a:	f881 e000 	strbne.w	lr, [r1]
 800715e:	46bc      	movne	ip, r7
 8007160:	3101      	adds	r1, #1
 8007162:	e7db      	b.n	800711c <ConfigStore::Update(configstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)+0x24>
 8007164:	20001644 	andcs	r1, r0, r4, asr #12
 8007168:	20000640 	andcs	r0, r0, r0, asr #12
 800716c:	2000164c 	andcs	r1, r0, ip, asr #12
 8007170:	200017ac 	andcs	r1, r0, ip, lsr #15
 8007174:	2000063c 	andcs	r0, r0, ip, lsr r6

08007178 <ConfigStore::Copy(configstore::Store, void*, unsigned int, unsigned int, bool)>:
 8007178:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800717c:	461d      	mov	r5, r3
 800717e:	4b15      	ldr	r3, [pc, #84]	; (80071d4 <ConfigStore::Copy(configstore::Store, void*, unsigned int, unsigned int, bool)+0x5c>)
 8007180:	b085      	sub	sp, #20
 8007182:	781b      	ldrb	r3, [r3, #0]
 8007184:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
 8007188:	f89d 9034 	ldrb.w	r9, [sp, #52]	; 0x34
 800718c:	4607      	mov	r7, r0
 800718e:	4614      	mov	r4, r2
 8007190:	b193      	cbz	r3, 80071b8 <ConfigStore::Copy(configstore::Store, void*, unsigned int, unsigned int, bool)+0x40>
 8007192:	f7ff fedb 	bl	8006f4c <ConfigStore::GetStoreOffset(configstore::Store)>
 8007196:	4a10      	ldr	r2, [pc, #64]	; (80071d8 <ConfigStore::Copy(configstore::Store, void*, unsigned int, unsigned int, bool)+0x60>)
 8007198:	eb08 0600 	add.w	r6, r8, r0
 800719c:	18b3      	adds	r3, r6, r2
 800719e:	f1b9 0f00 	cmp.w	r9, #0
 80071a2:	d013      	beq.n	80071cc <ConfigStore::Copy(configstore::Store, void*, unsigned int, unsigned int, bool)+0x54>
 80071a4:	5990      	ldr	r0, [r2, r6]
 80071a6:	b988      	cbnz	r0, 80071cc <ConfigStore::Copy(configstore::Store, void*, unsigned int, unsigned int, bool)+0x54>
 80071a8:	e9cd 0001 	strd	r0, r0, [sp, #4]
 80071ac:	9500      	str	r5, [sp, #0]
 80071ae:	4623      	mov	r3, r4
 80071b0:	4642      	mov	r2, r8
 80071b2:	4638      	mov	r0, r7
 80071b4:	f7ff ffa0 	bl	80070f8 <ConfigStore::Update(configstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 80071b8:	b005      	add	sp, #20
 80071ba:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80071be:	f813 2b01 	ldrb.w	r2, [r3], #1
 80071c2:	f804 2f01 	strb.w	r2, [r4, #1]!
 80071c6:	429d      	cmp	r5, r3
 80071c8:	d1f9      	bne.n	80071be <ConfigStore::Copy(configstore::Store, void*, unsigned int, unsigned int, bool)+0x46>
 80071ca:	e7f5      	b.n	80071b8 <ConfigStore::Copy(configstore::Store, void*, unsigned int, unsigned int, bool)+0x40>
 80071cc:	3c01      	subs	r4, #1
 80071ce:	441d      	add	r5, r3
 80071d0:	e7f9      	b.n	80071c6 <ConfigStore::Copy(configstore::Store, void*, unsigned int, unsigned int, bool)+0x4e>
 80071d2:	bf00      	nop
 80071d4:	20001644 	andcs	r1, r0, r4, asr #12
 80071d8:	20000640 	andcs	r0, r0, r0, asr #12

080071dc <ConfigStore::Flash()>:
 80071dc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80071de:	4c24      	ldr	r4, [pc, #144]	; (8007270 <ConfigStore::Flash()+0x94>)
 80071e0:	6823      	ldr	r3, [r4, #0]
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	d041      	beq.n	800726a <ConfigStore::Flash()+0x8e>
 80071e6:	3b01      	subs	r3, #1
 80071e8:	2b05      	cmp	r3, #5
 80071ea:	d82f      	bhi.n	800724c <ConfigStore::Flash()+0x70>
 80071ec:	e8df f003 	tbb	[pc, r3]
 80071f0:	2c140b03 			; <UNDEFINED> instruction: 0x2c140b03
 80071f4:	4b1f2e23 	blmi	87d2a88 <__exidx_end+0x7c6b1c>
 80071f8:	681a      	ldr	r2, [r3, #0]
 80071fa:	4b1f      	ldr	r3, [pc, #124]	; (8007278 <ConfigStore::Flash()+0x9c>)
 80071fc:	601a      	str	r2, [r3, #0]
 80071fe:	2302      	movs	r3, #2
 8007200:	6023      	str	r3, [r4, #0]
 8007202:	2001      	movs	r0, #1
 8007204:	e02f      	b.n	8007266 <ConfigStore::Flash()+0x8a>
 8007206:	4b1b      	ldr	r3, [pc, #108]	; (8007274 <ConfigStore::Flash()+0x98>)
 8007208:	4a1b      	ldr	r2, [pc, #108]	; (8007278 <ConfigStore::Flash()+0x9c>)
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	6812      	ldr	r2, [r2, #0]
 800720e:	1a9b      	subs	r3, r3, r2
 8007210:	2b63      	cmp	r3, #99	; 0x63
 8007212:	d9f6      	bls.n	8007202 <ConfigStore::Flash()+0x26>
 8007214:	2303      	movs	r3, #3
 8007216:	e7f3      	b.n	8007200 <ConfigStore::Flash()+0x24>
 8007218:	4918      	ldr	r1, [pc, #96]	; (800727c <ConfigStore::Flash()+0xa0>)
 800721a:	ab03      	add	r3, sp, #12
 800721c:	6809      	ldr	r1, [r1, #0]
 800721e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8007222:	f000 f87d 	bl	8007320 <StoreDevice::Erase(unsigned int, unsigned int, storedevice::result&)>
 8007226:	2800      	cmp	r0, #0
 8007228:	d0eb      	beq.n	8007202 <ConfigStore::Flash()+0x26>
 800722a:	4b12      	ldr	r3, [pc, #72]	; (8007274 <ConfigStore::Flash()+0x98>)
 800722c:	681a      	ldr	r2, [r3, #0]
 800722e:	4b12      	ldr	r3, [pc, #72]	; (8007278 <ConfigStore::Flash()+0x9c>)
 8007230:	601a      	str	r2, [r3, #0]
 8007232:	2305      	movs	r3, #5
 8007234:	e7e4      	b.n	8007200 <ConfigStore::Flash()+0x24>
 8007236:	4b0f      	ldr	r3, [pc, #60]	; (8007274 <ConfigStore::Flash()+0x98>)
 8007238:	4a0f      	ldr	r2, [pc, #60]	; (8007278 <ConfigStore::Flash()+0x9c>)
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	6812      	ldr	r2, [r2, #0]
 800723e:	1a9b      	subs	r3, r3, r2
 8007240:	2b63      	cmp	r3, #99	; 0x63
 8007242:	d9de      	bls.n	8007202 <ConfigStore::Flash()+0x26>
 8007244:	2304      	movs	r3, #4
 8007246:	e7db      	b.n	8007200 <ConfigStore::Flash()+0x24>
 8007248:	2306      	movs	r3, #6
 800724a:	e7d9      	b.n	8007200 <ConfigStore::Flash()+0x24>
 800724c:	ab03      	add	r3, sp, #12
 800724e:	4a0c      	ldr	r2, [pc, #48]	; (8007280 <ConfigStore::Flash()+0xa4>)
 8007250:	490a      	ldr	r1, [pc, #40]	; (800727c <ConfigStore::Flash()+0xa0>)
 8007252:	9300      	str	r3, [sp, #0]
 8007254:	6812      	ldr	r2, [r2, #0]
 8007256:	4b0b      	ldr	r3, [pc, #44]	; (8007284 <ConfigStore::Flash()+0xa8>)
 8007258:	6809      	ldr	r1, [r1, #0]
 800725a:	f000 f86a 	bl	8007332 <StoreDevice::Write(unsigned int, unsigned int, unsigned char const*, storedevice::result&)>
 800725e:	2800      	cmp	r0, #0
 8007260:	d0cf      	beq.n	8007202 <ConfigStore::Flash()+0x26>
 8007262:	2000      	movs	r0, #0
 8007264:	6020      	str	r0, [r4, #0]
 8007266:	b004      	add	sp, #16
 8007268:	bd10      	pop	{r4, pc}
 800726a:	4618      	mov	r0, r3
 800726c:	e7fb      	b.n	8007266 <ConfigStore::Flash()+0x8a>
 800726e:	bf00      	nop
 8007270:	2000164c 	andcs	r1, r0, ip, asr #12
 8007274:	200017ac 	andcs	r1, r0, ip, lsr #15
 8007278:	2000063c 	andcs	r0, r0, ip, lsr r6
 800727c:	20001640 	andcs	r1, r0, r0, asr #12
 8007280:	20001648 	andcs	r1, r0, r8, asr #12
 8007284:	20000640 	andcs	r0, r0, r0, asr #12

08007288 <StoreDisplayUdf::~StoreDisplayUdf()>:
 8007288:	4770      	bx	lr
	...

0800728c <StoreDisplayUdf::Copy(displayudfparams::Params*)>:
 800728c:	b507      	push	{r0, r1, r2, lr}
 800728e:	2300      	movs	r3, #0
 8007290:	460a      	mov	r2, r1
 8007292:	2101      	movs	r1, #1
 8007294:	e9cd 3100 	strd	r3, r1, [sp]
 8007298:	4804      	ldr	r0, [pc, #16]	; (80072ac <StoreDisplayUdf::Copy(displayudfparams::Params*)+0x20>)
 800729a:	2322      	movs	r3, #34	; 0x22
 800729c:	6800      	ldr	r0, [r0, #0]
 800729e:	210f      	movs	r1, #15
 80072a0:	f7ff ff6a 	bl	8007178 <ConfigStore::Copy(configstore::Store, void*, unsigned int, unsigned int, bool)>
 80072a4:	b003      	add	sp, #12
 80072a6:	f85d fb04 	ldr.w	pc, [sp], #4
 80072aa:	bf00      	nop
 80072ac:	20001650 	andcs	r1, r0, r0, asr r6

080072b0 <StoreDisplayUdf::Update(displayudfparams::Params const*)>:
 80072b0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80072b2:	2200      	movs	r2, #0
 80072b4:	e9cd 2201 	strd	r2, r2, [sp, #4]
 80072b8:	460b      	mov	r3, r1
 80072ba:	4805      	ldr	r0, [pc, #20]	; (80072d0 <StoreDisplayUdf::Update(displayudfparams::Params const*)+0x20>)
 80072bc:	2122      	movs	r1, #34	; 0x22
 80072be:	9100      	str	r1, [sp, #0]
 80072c0:	6800      	ldr	r0, [r0, #0]
 80072c2:	210f      	movs	r1, #15
 80072c4:	f7ff ff18 	bl	80070f8 <ConfigStore::Update(configstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 80072c8:	b005      	add	sp, #20
 80072ca:	f85d fb04 	ldr.w	pc, [sp], #4
 80072ce:	bf00      	nop
 80072d0:	20001650 	andcs	r1, r0, r0, asr r6

080072d4 <StoreDisplayUdf::~StoreDisplayUdf()>:
 80072d4:	b510      	push	{r4, lr}
 80072d6:	4604      	mov	r4, r0
 80072d8:	f001 f857 	bl	800838a <operator delete(void*)>
 80072dc:	4620      	mov	r0, r4
 80072de:	bd10      	pop	{r4, pc}

080072e0 <StoreDisplayUdf::StoreDisplayUdf()>:
 80072e0:	4a02      	ldr	r2, [pc, #8]	; (80072ec <StoreDisplayUdf::StoreDisplayUdf()+0xc>)
 80072e2:	6002      	str	r2, [r0, #0]
 80072e4:	4a02      	ldr	r2, [pc, #8]	; (80072f0 <StoreDisplayUdf::StoreDisplayUdf()+0x10>)
 80072e6:	6010      	str	r0, [r2, #0]
 80072e8:	4770      	bx	lr
 80072ea:	bf00      	nop
 80072ec:	0800ba70 	stmdaeq	r0, {r4, r5, r6, r9, fp, ip, sp, pc}
 80072f0:	20001658 	andcs	r1, r0, r8, asr r6

080072f4 <StoreDevice::StoreDevice()>:
 80072f4:	b510      	push	{r4, lr}
 80072f6:	4604      	mov	r4, r0
 80072f8:	f000 f998 	bl	800762c <FlashCode::FlashCode()>
 80072fc:	7823      	ldrb	r3, [r4, #0]
 80072fe:	7063      	strb	r3, [r4, #1]
 8007300:	4620      	mov	r0, r4
 8007302:	bd10      	pop	{r4, pc}

08007304 <StoreDevice::GetSize() const>:
 8007304:	f000 b9ae 	b.w	8007664 <FlashCode::GetSize() const>

08007308 <StoreDevice::GetSectorSize() const>:
 8007308:	f000 b9b4 	b.w	8007674 <FlashCode::GetSectorSize() const>

0800730c <StoreDevice::Read(unsigned int, unsigned int, unsigned char*, storedevice::result&)>:
 800730c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800730e:	ac03      	add	r4, sp, #12
 8007310:	9400      	str	r4, [sp, #0]
 8007312:	f000 f9b2 	bl	800767a <FlashCode::Read(unsigned int, unsigned int, unsigned char*, flashcode::result&)>
 8007316:	9b06      	ldr	r3, [sp, #24]
 8007318:	9a03      	ldr	r2, [sp, #12]
 800731a:	601a      	str	r2, [r3, #0]
 800731c:	b004      	add	sp, #16
 800731e:	bd10      	pop	{r4, pc}

08007320 <StoreDevice::Erase(unsigned int, unsigned int, storedevice::result&)>:
 8007320:	b513      	push	{r0, r1, r4, lr}
 8007322:	461c      	mov	r4, r3
 8007324:	ab01      	add	r3, sp, #4
 8007326:	f000 f9b7 	bl	8007698 <FlashCode::Erase(unsigned int, unsigned int, flashcode::result&)>
 800732a:	9b01      	ldr	r3, [sp, #4]
 800732c:	6023      	str	r3, [r4, #0]
 800732e:	b002      	add	sp, #8
 8007330:	bd10      	pop	{r4, pc}

08007332 <StoreDevice::Write(unsigned int, unsigned int, unsigned char const*, storedevice::result&)>:
 8007332:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007334:	ac03      	add	r4, sp, #12
 8007336:	9400      	str	r4, [sp, #0]
 8007338:	f000 fa4e 	bl	80077d8 <FlashCode::Write(unsigned int, unsigned int, unsigned char const*, flashcode::result&)>
 800733c:	9b06      	ldr	r3, [sp, #24]
 800733e:	9a03      	ldr	r2, [sp, #12]
 8007340:	601a      	str	r2, [r3, #0]
 8007342:	b004      	add	sp, #16
 8007344:	bd10      	pop	{r4, pc}

08007346 <StorePixelDmx::~StorePixelDmx()>:
 8007346:	4770      	bx	lr

08007348 <non-virtual thunk to StorePixelDmx::~StorePixelDmx()>:
 8007348:	3804      	subs	r0, #4
 800734a:	4770      	bx	lr

0800734c <StorePixelDmx::Update(pixeldmxparams::Params const*)>:
 800734c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800734e:	2200      	movs	r2, #0
 8007350:	e9cd 2201 	strd	r2, r2, [sp, #4]
 8007354:	460b      	mov	r3, r1
 8007356:	4805      	ldr	r0, [pc, #20]	; (800736c <StorePixelDmx::Update(pixeldmxparams::Params const*)+0x20>)
 8007358:	2118      	movs	r1, #24
 800735a:	9100      	str	r1, [sp, #0]
 800735c:	6800      	ldr	r0, [r0, #0]
 800735e:	2103      	movs	r1, #3
 8007360:	f7ff feca 	bl	80070f8 <ConfigStore::Update(configstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 8007364:	b005      	add	sp, #20
 8007366:	f85d fb04 	ldr.w	pc, [sp], #4
 800736a:	bf00      	nop
 800736c:	20001650 	andcs	r1, r0, r0, asr r6

08007370 <StorePixelDmx::SaveDmxStartAddress(unsigned short)>:
 8007370:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8007372:	2304      	movs	r3, #4
 8007374:	2200      	movs	r2, #0
 8007376:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800737a:	4807      	ldr	r0, [pc, #28]	; (8007398 <StorePixelDmx::SaveDmxStartAddress(unsigned short)+0x28>)
 800737c:	f8ad 1016 	strh.w	r1, [sp, #22]
 8007380:	2302      	movs	r3, #2
 8007382:	9300      	str	r3, [sp, #0]
 8007384:	6800      	ldr	r0, [r0, #0]
 8007386:	f10d 0316 	add.w	r3, sp, #22
 800738a:	2207      	movs	r2, #7
 800738c:	2103      	movs	r1, #3
 800738e:	f7ff feb3 	bl	80070f8 <ConfigStore::Update(configstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 8007392:	b007      	add	sp, #28
 8007394:	f85d fb04 	ldr.w	pc, [sp], #4
 8007398:	20001650 	andcs	r1, r0, r0, asr r6

0800739c <non-virtual thunk to StorePixelDmx::SaveDmxStartAddress(unsigned short)>:
 800739c:	f1a0 0004 	sub.w	r0, r0, #4
 80073a0:	e7e6      	b.n	8007370 <StorePixelDmx::SaveDmxStartAddress(unsigned short)>
 80073a2:	bf00      	nop

080073a4 <StorePixelDmx::SaveTestPattern(unsigned char)>:
 80073a4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 80073a6:	2308      	movs	r3, #8
 80073a8:	2200      	movs	r2, #0
 80073aa:	e9cd 3201 	strd	r3, r2, [sp, #4]
 80073ae:	4807      	ldr	r0, [pc, #28]	; (80073cc <StorePixelDmx::SaveTestPattern(unsigned char)+0x28>)
 80073b0:	f88d 1017 	strb.w	r1, [sp, #23]
 80073b4:	2301      	movs	r3, #1
 80073b6:	9300      	str	r3, [sp, #0]
 80073b8:	6800      	ldr	r0, [r0, #0]
 80073ba:	f10d 0317 	add.w	r3, sp, #23
 80073be:	2210      	movs	r2, #16
 80073c0:	2103      	movs	r1, #3
 80073c2:	f7ff fe99 	bl	80070f8 <ConfigStore::Update(configstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 80073c6:	b007      	add	sp, #28
 80073c8:	f85d fb04 	ldr.w	pc, [sp], #4
 80073cc:	20001650 	andcs	r1, r0, r0, asr r6

080073d0 <non-virtual thunk to StorePixelDmx::SaveTestPattern(unsigned char)>:
 80073d0:	f1a0 0004 	sub.w	r0, r0, #4
 80073d4:	e7e6      	b.n	80073a4 <StorePixelDmx::SaveTestPattern(unsigned char)>
 80073d6:	bf00      	nop

080073d8 <StorePixelDmx::SaveMap(unsigned char)>:
 80073d8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 80073da:	f44f 7300 	mov.w	r3, #512	; 0x200
 80073de:	2200      	movs	r2, #0
 80073e0:	e9cd 3201 	strd	r3, r2, [sp, #4]
 80073e4:	4807      	ldr	r0, [pc, #28]	; (8007404 <StorePixelDmx::SaveMap(unsigned char)+0x2c>)
 80073e6:	f88d 1017 	strb.w	r1, [sp, #23]
 80073ea:	2301      	movs	r3, #1
 80073ec:	9300      	str	r3, [sp, #0]
 80073ee:	6800      	ldr	r0, [r0, #0]
 80073f0:	f10d 0317 	add.w	r3, sp, #23
 80073f4:	2213      	movs	r2, #19
 80073f6:	2103      	movs	r1, #3
 80073f8:	f7ff fe7e 	bl	80070f8 <ConfigStore::Update(configstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 80073fc:	b007      	add	sp, #28
 80073fe:	f85d fb04 	ldr.w	pc, [sp], #4
 8007402:	bf00      	nop
 8007404:	20001650 	andcs	r1, r0, r0, asr r6

08007408 <non-virtual thunk to StorePixelDmx::SaveMap(unsigned char)>:
 8007408:	f1a0 0004 	sub.w	r0, r0, #4
 800740c:	e7e4      	b.n	80073d8 <StorePixelDmx::SaveMap(unsigned char)>
 800740e:	bf00      	nop

08007410 <StorePixelDmx::SaveGroupingCount(unsigned short)>:
 8007410:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8007412:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007416:	2200      	movs	r2, #0
 8007418:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800741c:	4807      	ldr	r0, [pc, #28]	; (800743c <StorePixelDmx::SaveGroupingCount(unsigned short)+0x2c>)
 800741e:	f8ad 1016 	strh.w	r1, [sp, #22]
 8007422:	2302      	movs	r3, #2
 8007424:	9300      	str	r3, [sp, #0]
 8007426:	6800      	ldr	r0, [r0, #0]
 8007428:	f10d 0316 	add.w	r3, sp, #22
 800742c:	2211      	movs	r2, #17
 800742e:	2103      	movs	r1, #3
 8007430:	f7ff fe62 	bl	80070f8 <ConfigStore::Update(configstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 8007434:	b007      	add	sp, #28
 8007436:	f85d fb04 	ldr.w	pc, [sp], #4
 800743a:	bf00      	nop
 800743c:	20001650 	andcs	r1, r0, r0, asr r6

08007440 <non-virtual thunk to StorePixelDmx::SaveGroupingCount(unsigned short)>:
 8007440:	f1a0 0004 	sub.w	r0, r0, #4
 8007444:	e7e4      	b.n	8007410 <StorePixelDmx::SaveGroupingCount(unsigned short)>
 8007446:	bf00      	nop

08007448 <StorePixelDmx::SaveCount(unsigned short)>:
 8007448:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800744a:	2302      	movs	r3, #2
 800744c:	2200      	movs	r2, #0
 800744e:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8007452:	4807      	ldr	r0, [pc, #28]	; (8007470 <StorePixelDmx::SaveCount(unsigned short)+0x28>)
 8007454:	9300      	str	r3, [sp, #0]
 8007456:	f8ad 1016 	strh.w	r1, [sp, #22]
 800745a:	6800      	ldr	r0, [r0, #0]
 800745c:	f10d 0316 	add.w	r3, sp, #22
 8007460:	2205      	movs	r2, #5
 8007462:	2103      	movs	r1, #3
 8007464:	f7ff fe48 	bl	80070f8 <ConfigStore::Update(configstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 8007468:	b007      	add	sp, #28
 800746a:	f85d fb04 	ldr.w	pc, [sp], #4
 800746e:	bf00      	nop
 8007470:	20001650 	andcs	r1, r0, r0, asr r6

08007474 <non-virtual thunk to StorePixelDmx::SaveCount(unsigned short)>:
 8007474:	f1a0 0004 	sub.w	r0, r0, #4
 8007478:	e7e6      	b.n	8007448 <StorePixelDmx::SaveCount(unsigned short)>
 800747a:	bf00      	nop

0800747c <StorePixelDmx::SaveType(unsigned char)>:
 800747c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800747e:	2301      	movs	r3, #1
 8007480:	2200      	movs	r2, #0
 8007482:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8007486:	4807      	ldr	r0, [pc, #28]	; (80074a4 <StorePixelDmx::SaveType(unsigned char)+0x28>)
 8007488:	9300      	str	r3, [sp, #0]
 800748a:	f88d 1017 	strb.w	r1, [sp, #23]
 800748e:	6800      	ldr	r0, [r0, #0]
 8007490:	f10d 0317 	add.w	r3, sp, #23
 8007494:	2204      	movs	r2, #4
 8007496:	2103      	movs	r1, #3
 8007498:	f7ff fe2e 	bl	80070f8 <ConfigStore::Update(configstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 800749c:	b007      	add	sp, #28
 800749e:	f85d fb04 	ldr.w	pc, [sp], #4
 80074a2:	bf00      	nop
 80074a4:	20001650 	andcs	r1, r0, r0, asr r6

080074a8 <non-virtual thunk to StorePixelDmx::SaveType(unsigned char)>:
 80074a8:	f1a0 0004 	sub.w	r0, r0, #4
 80074ac:	e7e6      	b.n	800747c <StorePixelDmx::SaveType(unsigned char)>
 80074ae:	bf00      	nop

080074b0 <StorePixelDmx::~StorePixelDmx()>:
 80074b0:	b510      	push	{r4, lr}
 80074b2:	4604      	mov	r4, r0
 80074b4:	f000 ff69 	bl	800838a <operator delete(void*)>
 80074b8:	4620      	mov	r0, r4
 80074ba:	bd10      	pop	{r4, pc}

080074bc <non-virtual thunk to StorePixelDmx::~StorePixelDmx()>:
 80074bc:	f1a0 0004 	sub.w	r0, r0, #4
 80074c0:	e7f6      	b.n	80074b0 <StorePixelDmx::~StorePixelDmx()>
	...

080074c4 <StorePixelDmx::Copy(pixeldmxparams::Params*)>:
 80074c4:	b507      	push	{r0, r1, r2, lr}
 80074c6:	2300      	movs	r3, #0
 80074c8:	460a      	mov	r2, r1
 80074ca:	2101      	movs	r1, #1
 80074cc:	e9cd 3100 	strd	r3, r1, [sp]
 80074d0:	4804      	ldr	r0, [pc, #16]	; (80074e4 <StorePixelDmx::Copy(pixeldmxparams::Params*)+0x20>)
 80074d2:	2318      	movs	r3, #24
 80074d4:	6800      	ldr	r0, [r0, #0]
 80074d6:	2103      	movs	r1, #3
 80074d8:	f7ff fe4e 	bl	8007178 <ConfigStore::Copy(configstore::Store, void*, unsigned int, unsigned int, bool)>
 80074dc:	b003      	add	sp, #12
 80074de:	f85d fb04 	ldr.w	pc, [sp], #4
 80074e2:	bf00      	nop
 80074e4:	20001650 	andcs	r1, r0, r0, asr r6

080074e8 <StorePixelDmx::StorePixelDmx()>:
 80074e8:	4a03      	ldr	r2, [pc, #12]	; (80074f8 <StorePixelDmx::StorePixelDmx()+0x10>)
 80074ea:	6002      	str	r2, [r0, #0]
 80074ec:	3230      	adds	r2, #48	; 0x30
 80074ee:	6042      	str	r2, [r0, #4]
 80074f0:	4a02      	ldr	r2, [pc, #8]	; (80074fc <StorePixelDmx::StorePixelDmx()+0x14>)
 80074f2:	6010      	str	r0, [r2, #0]
 80074f4:	4770      	bx	lr
 80074f6:	bf00      	nop
 80074f8:	0800ba88 	stmdaeq	r0, {r3, r7, r9, fp, ip, sp, pc}
 80074fc:	2000165c 	andcs	r1, r0, ip, asr r6

08007500 <StoreRDMDevice::~StoreRDMDevice()>:
 8007500:	4770      	bx	lr

08007502 <non-virtual thunk to StoreRDMDevice::~StoreRDMDevice()>:
 8007502:	3804      	subs	r0, #4
 8007504:	4770      	bx	lr
	...

08007508 <StoreRDMDevice::Update(rdm::deviceparams::Params const*)>:
 8007508:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800750a:	2200      	movs	r2, #0
 800750c:	e9cd 2201 	strd	r2, r2, [sp, #4]
 8007510:	460b      	mov	r3, r1
 8007512:	4805      	ldr	r0, [pc, #20]	; (8007528 <StoreRDMDevice::Update(rdm::deviceparams::Params const*)+0x20>)
 8007514:	2129      	movs	r1, #41	; 0x29
 8007516:	9100      	str	r1, [sp, #0]
 8007518:	6800      	ldr	r0, [r0, #0]
 800751a:	210b      	movs	r1, #11
 800751c:	f7ff fdec 	bl	80070f8 <ConfigStore::Update(configstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 8007520:	b005      	add	sp, #20
 8007522:	f85d fb04 	ldr.w	pc, [sp], #4
 8007526:	bf00      	nop
 8007528:	20001650 	andcs	r1, r0, r0, asr r6

0800752c <StoreRDMDevice::SaveLabel(char const*, unsigned char)>:
 800752c:	b570      	push	{r4, r5, r6, lr}
 800752e:	4d0d      	ldr	r5, [pc, #52]	; (8007564 <StoreRDMDevice::SaveLabel(char const*, unsigned char)+0x38>)
 8007530:	b086      	sub	sp, #24
 8007532:	2401      	movs	r4, #1
 8007534:	2600      	movs	r6, #0
 8007536:	6828      	ldr	r0, [r5, #0]
 8007538:	f88d 2017 	strb.w	r2, [sp, #23]
 800753c:	460b      	mov	r3, r1
 800753e:	9200      	str	r2, [sp, #0]
 8007540:	e9cd 4601 	strd	r4, r6, [sp, #4]
 8007544:	2204      	movs	r2, #4
 8007546:	210b      	movs	r1, #11
 8007548:	f7ff fdd6 	bl	80070f8 <ConfigStore::Update(configstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 800754c:	e9cd 4601 	strd	r4, r6, [sp, #4]
 8007550:	6828      	ldr	r0, [r5, #0]
 8007552:	9400      	str	r4, [sp, #0]
 8007554:	f10d 0317 	add.w	r3, sp, #23
 8007558:	2224      	movs	r2, #36	; 0x24
 800755a:	210b      	movs	r1, #11
 800755c:	f7ff fdcc 	bl	80070f8 <ConfigStore::Update(configstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 8007560:	b006      	add	sp, #24
 8007562:	bd70      	pop	{r4, r5, r6, pc}
 8007564:	20001650 	andcs	r1, r0, r0, asr r6

08007568 <non-virtual thunk to StoreRDMDevice::SaveLabel(char const*, unsigned char)>:
 8007568:	f1a0 0004 	sub.w	r0, r0, #4
 800756c:	e7de      	b.n	800752c <StoreRDMDevice::SaveLabel(char const*, unsigned char)>
 800756e:	bf00      	nop

08007570 <StoreRDMDevice::~StoreRDMDevice()>:
 8007570:	b510      	push	{r4, lr}
 8007572:	4604      	mov	r4, r0
 8007574:	f000 ff09 	bl	800838a <operator delete(void*)>
 8007578:	4620      	mov	r0, r4
 800757a:	bd10      	pop	{r4, pc}

0800757c <non-virtual thunk to StoreRDMDevice::~StoreRDMDevice()>:
 800757c:	f1a0 0004 	sub.w	r0, r0, #4
 8007580:	e7f6      	b.n	8007570 <StoreRDMDevice::~StoreRDMDevice()>
	...

08007584 <StoreRDMDevice::Copy(rdm::deviceparams::Params*)>:
 8007584:	b507      	push	{r0, r1, r2, lr}
 8007586:	2300      	movs	r3, #0
 8007588:	460a      	mov	r2, r1
 800758a:	2101      	movs	r1, #1
 800758c:	e9cd 3100 	strd	r3, r1, [sp]
 8007590:	4804      	ldr	r0, [pc, #16]	; (80075a4 <StoreRDMDevice::Copy(rdm::deviceparams::Params*)+0x20>)
 8007592:	2329      	movs	r3, #41	; 0x29
 8007594:	6800      	ldr	r0, [r0, #0]
 8007596:	210b      	movs	r1, #11
 8007598:	f7ff fdee 	bl	8007178 <ConfigStore::Copy(configstore::Store, void*, unsigned int, unsigned int, bool)>
 800759c:	b003      	add	sp, #12
 800759e:	f85d fb04 	ldr.w	pc, [sp], #4
 80075a2:	bf00      	nop
 80075a4:	20001650 	andcs	r1, r0, r0, asr r6

080075a8 <StoreRDMDevice::StoreRDMDevice()>:
 80075a8:	4a03      	ldr	r2, [pc, #12]	; (80075b8 <StoreRDMDevice::StoreRDMDevice()+0x10>)
 80075aa:	6002      	str	r2, [r0, #0]
 80075ac:	321c      	adds	r2, #28
 80075ae:	6042      	str	r2, [r0, #4]
 80075b0:	4a02      	ldr	r2, [pc, #8]	; (80075bc <StoreRDMDevice::StoreRDMDevice()+0x14>)
 80075b2:	6010      	str	r0, [r2, #0]
 80075b4:	4770      	bx	lr
 80075b6:	bf00      	nop
 80075b8:	0800bae0 	stmdaeq	r0, {r5, r6, r7, r9, fp, ip, sp, pc}
 80075bc:	20001660 	andcs	r1, r0, r0, ror #12

080075c0 <StoreRDMSensors::~StoreRDMSensors()>:
 80075c0:	4770      	bx	lr
	...

080075c4 <StoreRDMSensors::Copy(rdm::sensorsparams::Params*)>:
 80075c4:	b507      	push	{r0, r1, r2, lr}
 80075c6:	2300      	movs	r3, #0
 80075c8:	460a      	mov	r2, r1
 80075ca:	2101      	movs	r1, #1
 80075cc:	e9cd 3100 	strd	r3, r1, [sp]
 80075d0:	4804      	ldr	r0, [pc, #16]	; (80075e4 <StoreRDMSensors::Copy(rdm::sensorsparams::Params*)+0x20>)
 80075d2:	2334      	movs	r3, #52	; 0x34
 80075d4:	6800      	ldr	r0, [r0, #0]
 80075d6:	2117      	movs	r1, #23
 80075d8:	f7ff fdce 	bl	8007178 <ConfigStore::Copy(configstore::Store, void*, unsigned int, unsigned int, bool)>
 80075dc:	b003      	add	sp, #12
 80075de:	f85d fb04 	ldr.w	pc, [sp], #4
 80075e2:	bf00      	nop
 80075e4:	20001650 	andcs	r1, r0, r0, asr r6

080075e8 <StoreRDMSensors::Update(rdm::sensorsparams::Params const*)>:
 80075e8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80075ea:	2200      	movs	r2, #0
 80075ec:	e9cd 2201 	strd	r2, r2, [sp, #4]
 80075f0:	460b      	mov	r3, r1
 80075f2:	4805      	ldr	r0, [pc, #20]	; (8007608 <StoreRDMSensors::Update(rdm::sensorsparams::Params const*)+0x20>)
 80075f4:	2134      	movs	r1, #52	; 0x34
 80075f6:	9100      	str	r1, [sp, #0]
 80075f8:	6800      	ldr	r0, [r0, #0]
 80075fa:	2117      	movs	r1, #23
 80075fc:	f7ff fd7c 	bl	80070f8 <ConfigStore::Update(configstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 8007600:	b005      	add	sp, #20
 8007602:	f85d fb04 	ldr.w	pc, [sp], #4
 8007606:	bf00      	nop
 8007608:	20001650 	andcs	r1, r0, r0, asr r6

0800760c <StoreRDMSensors::~StoreRDMSensors()>:
 800760c:	b510      	push	{r4, lr}
 800760e:	4604      	mov	r4, r0
 8007610:	f000 febb 	bl	800838a <operator delete(void*)>
 8007614:	4620      	mov	r0, r4
 8007616:	bd10      	pop	{r4, pc}

08007618 <StoreRDMSensors::StoreRDMSensors()>:
 8007618:	4a02      	ldr	r2, [pc, #8]	; (8007624 <StoreRDMSensors::StoreRDMSensors()+0xc>)
 800761a:	6002      	str	r2, [r0, #0]
 800761c:	4a02      	ldr	r2, [pc, #8]	; (8007628 <StoreRDMSensors::StoreRDMSensors()+0x10>)
 800761e:	6010      	str	r0, [r2, #0]
 8007620:	4770      	bx	lr
 8007622:	bf00      	nop
 8007624:	0800bb10 	stmdaeq	r0, {r4, r8, r9, fp, ip, sp, pc}
 8007628:	20001664 	andcs	r1, r0, r4, ror #12

0800762c <FlashCode::FlashCode()>:
 800762c:	4b0a      	ldr	r3, [pc, #40]	; (8007658 <FlashCode::FlashCode()+0x2c>)
 800762e:	b513      	push	{r0, r1, r4, lr}
 8007630:	6018      	str	r0, [r3, #0]
 8007632:	2301      	movs	r3, #1
 8007634:	7003      	strb	r3, [r0, #0]
 8007636:	4604      	mov	r4, r0
 8007638:	f000 f814 	bl	8007664 <FlashCode::GetSize() const>
 800763c:	9001      	str	r0, [sp, #4]
 800763e:	4620      	mov	r0, r4
 8007640:	f000 f810 	bl	8007664 <FlashCode::GetSize() const>
 8007644:	9a01      	ldr	r2, [sp, #4]
 8007646:	4905      	ldr	r1, [pc, #20]	; (800765c <FlashCode::FlashCode()+0x30>)
 8007648:	0a83      	lsrs	r3, r0, #10
 800764a:	4805      	ldr	r0, [pc, #20]	; (8007660 <FlashCode::FlashCode()+0x34>)
 800764c:	f7fa fb0a 	bl	8001c64 <printf>
 8007650:	4620      	mov	r0, r4
 8007652:	b002      	add	sp, #8
 8007654:	bd10      	pop	{r4, pc}
 8007656:	bf00      	nop
 8007658:	20001668 	andcs	r1, r0, r8, ror #12
 800765c:	0800a3b8 	stmdaeq	r0, {r3, r4, r5, r7, r8, r9, sp, pc}
 8007660:	0800bb20 	stmdaeq	r0, {r5, r8, r9, fp, ip, sp, pc}

08007664 <FlashCode::GetSize() const>:
 8007664:	4b02      	ldr	r3, [pc, #8]	; (8007670 <FlashCode::GetSize() const+0xc>)
 8007666:	f8b3 00e0 	ldrh.w	r0, [r3, #224]	; 0xe0
 800766a:	0280      	lsls	r0, r0, #10
 800766c:	4770      	bx	lr
 800766e:	bf00      	nop
 8007670:	1ffff700 	svcne	0x00fff700

08007674 <FlashCode::GetSectorSize() const>:
 8007674:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8007678:	4770      	bx	lr

0800767a <FlashCode::Read(unsigned int, unsigned int, unsigned char*, flashcode::result&)>:
 800767a:	f101 6100 	add.w	r1, r1, #134217728	; 0x8000000
 800767e:	441a      	add	r2, r3
 8007680:	4293      	cmp	r3, r2
 8007682:	d104      	bne.n	800768e <FlashCode::Read(unsigned int, unsigned int, unsigned char*, flashcode::result&)+0x14>
 8007684:	9b00      	ldr	r3, [sp, #0]
 8007686:	2200      	movs	r2, #0
 8007688:	601a      	str	r2, [r3, #0]
 800768a:	2001      	movs	r0, #1
 800768c:	4770      	bx	lr
 800768e:	f851 0b04 	ldr.w	r0, [r1], #4
 8007692:	f843 0b04 	str.w	r0, [r3], #4
 8007696:	e7f3      	b.n	8007680 <FlashCode::Read(unsigned int, unsigned int, unsigned char*, flashcode::result&)+0x6>

08007698 <FlashCode::Erase(unsigned int, unsigned int, flashcode::result&)>:
 8007698:	b538      	push	{r3, r4, r5, lr}
 800769a:	4c48      	ldr	r4, [pc, #288]	; (80077bc <FlashCode::Erase(unsigned int, unsigned int, flashcode::result&)+0x124>)
 800769c:	2000      	movs	r0, #0
 800769e:	6018      	str	r0, [r3, #0]
 80076a0:	6823      	ldr	r3, [r4, #0]
 80076a2:	2b04      	cmp	r3, #4
 80076a4:	f200 8082 	bhi.w	80077ac <FlashCode::Erase(unsigned int, unsigned int, flashcode::result&)+0x114>
 80076a8:	e8df f003 	tbb	[pc, r3]
 80076ac:	78452003 	stmdavc	r5, {r0, r1, sp}^
 80076b0:	4b430080 	blmi	90c78b8 <__exidx_end+0x10bb94c>
 80076b4:	f101 6100 	add.w	r1, r1, #134217728	; 0x8000000
 80076b8:	6019      	str	r1, [r3, #0]
 80076ba:	4b42      	ldr	r3, [pc, #264]	; (80077c4 <FlashCode::Erase(unsigned int, unsigned int, flashcode::result&)+0x12c>)
 80076bc:	601a      	str	r2, [r3, #0]
 80076be:	4b42      	ldr	r3, [pc, #264]	; (80077c8 <FlashCode::Erase(unsigned int, unsigned int, flashcode::result&)+0x130>)
 80076c0:	f8b3 30e0 	ldrh.w	r3, [r3, #224]	; 0xe0
 80076c4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80076c8:	4b40      	ldr	r3, [pc, #256]	; (80077cc <FlashCode::Erase(unsigned int, unsigned int, flashcode::result&)+0x134>)
 80076ca:	d807      	bhi.n	80076dc <FlashCode::Erase(unsigned int, unsigned int, flashcode::result&)+0x44>
 80076cc:	2201      	movs	r2, #1
 80076ce:	701a      	strb	r2, [r3, #0]
 80076d0:	f001 f9d8 	bl	8008a84 <fmc_bank0_unlock>
 80076d4:	2301      	movs	r3, #1
 80076d6:	6023      	str	r3, [r4, #0]
 80076d8:	2000      	movs	r0, #0
 80076da:	e026      	b.n	800772a <FlashCode::Erase(unsigned int, unsigned int, flashcode::result&)+0x92>
 80076dc:	4a3c      	ldr	r2, [pc, #240]	; (80077d0 <FlashCode::Erase(unsigned int, unsigned int, flashcode::result&)+0x138>)
 80076de:	4291      	cmp	r1, r2
 80076e0:	d3f4      	bcc.n	80076cc <FlashCode::Erase(unsigned int, unsigned int, flashcode::result&)+0x34>
 80076e2:	2200      	movs	r2, #0
 80076e4:	701a      	strb	r2, [r3, #0]
 80076e6:	f001 f9db 	bl	8008aa0 <fmc_bank1_unlock>
 80076ea:	e7f3      	b.n	80076d4 <FlashCode::Erase(unsigned int, unsigned int, flashcode::result&)+0x3c>
 80076ec:	4d37      	ldr	r5, [pc, #220]	; (80077cc <FlashCode::Erase(unsigned int, unsigned int, flashcode::result&)+0x134>)
 80076ee:	782b      	ldrb	r3, [r5, #0]
 80076f0:	b15b      	cbz	r3, 800770a <FlashCode::Erase(unsigned int, unsigned int, flashcode::result&)+0x72>
 80076f2:	f001 f9f3 	bl	8008adc <fmc_bank0_state_get>
 80076f6:	2801      	cmp	r0, #1
 80076f8:	d0ee      	beq.n	80076d8 <FlashCode::Erase(unsigned int, unsigned int, flashcode::result&)+0x40>
 80076fa:	7829      	ldrb	r1, [r5, #0]
 80076fc:	4b35      	ldr	r3, [pc, #212]	; (80077d4 <FlashCode::Erase(unsigned int, unsigned int, flashcode::result&)+0x13c>)
 80076fe:	b939      	cbnz	r1, 8007710 <FlashCode::Erase(unsigned int, unsigned int, flashcode::result&)+0x78>
 8007700:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007702:	f022 0202 	bic.w	r2, r2, #2
 8007706:	651a      	str	r2, [r3, #80]	; 0x50
 8007708:	e006      	b.n	8007718 <FlashCode::Erase(unsigned int, unsigned int, flashcode::result&)+0x80>
 800770a:	f001 f9f9 	bl	8008b00 <fmc_bank1_state_get>
 800770e:	e7f2      	b.n	80076f6 <FlashCode::Erase(unsigned int, unsigned int, flashcode::result&)+0x5e>
 8007710:	691a      	ldr	r2, [r3, #16]
 8007712:	f022 0202 	bic.w	r2, r2, #2
 8007716:	611a      	str	r2, [r3, #16]
 8007718:	4b2a      	ldr	r3, [pc, #168]	; (80077c4 <FlashCode::Erase(unsigned int, unsigned int, flashcode::result&)+0x12c>)
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	b94b      	cbnz	r3, 8007732 <FlashCode::Erase(unsigned int, unsigned int, flashcode::result&)+0x9a>
 800771e:	b129      	cbz	r1, 800772c <FlashCode::Erase(unsigned int, unsigned int, flashcode::result&)+0x94>
 8007720:	f001 f9cc 	bl	8008abc <fmc_bank0_lock>
 8007724:	2300      	movs	r3, #0
 8007726:	6023      	str	r3, [r4, #0]
 8007728:	2001      	movs	r0, #1
 800772a:	bd38      	pop	{r3, r4, r5, pc}
 800772c:	f001 f9ce 	bl	8008acc <fmc_bank1_lock>
 8007730:	e7f8      	b.n	8007724 <FlashCode::Erase(unsigned int, unsigned int, flashcode::result&)+0x8c>
 8007732:	2302      	movs	r3, #2
 8007734:	e7cf      	b.n	80076d6 <FlashCode::Erase(unsigned int, unsigned int, flashcode::result&)+0x3e>
 8007736:	4923      	ldr	r1, [pc, #140]	; (80077c4 <FlashCode::Erase(unsigned int, unsigned int, flashcode::result&)+0x12c>)
 8007738:	680b      	ldr	r3, [r1, #0]
 800773a:	2b00      	cmp	r3, #0
 800773c:	d0ca      	beq.n	80076d4 <FlashCode::Erase(unsigned int, unsigned int, flashcode::result&)+0x3c>
 800773e:	4b23      	ldr	r3, [pc, #140]	; (80077cc <FlashCode::Erase(unsigned int, unsigned int, flashcode::result&)+0x134>)
 8007740:	4a1f      	ldr	r2, [pc, #124]	; (80077c0 <FlashCode::Erase(unsigned int, unsigned int, flashcode::result&)+0x128>)
 8007742:	7818      	ldrb	r0, [r3, #0]
 8007744:	4b23      	ldr	r3, [pc, #140]	; (80077d4 <FlashCode::Erase(unsigned int, unsigned int, flashcode::result&)+0x13c>)
 8007746:	b190      	cbz	r0, 800776e <FlashCode::Erase(unsigned int, unsigned int, flashcode::result&)+0xd6>
 8007748:	6918      	ldr	r0, [r3, #16]
 800774a:	f040 0002 	orr.w	r0, r0, #2
 800774e:	6118      	str	r0, [r3, #16]
 8007750:	6810      	ldr	r0, [r2, #0]
 8007752:	6158      	str	r0, [r3, #20]
 8007754:	6918      	ldr	r0, [r3, #16]
 8007756:	f040 0040 	orr.w	r0, r0, #64	; 0x40
 800775a:	6118      	str	r0, [r3, #16]
 800775c:	680b      	ldr	r3, [r1, #0]
 800775e:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 8007762:	600b      	str	r3, [r1, #0]
 8007764:	6813      	ldr	r3, [r2, #0]
 8007766:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800776a:	6013      	str	r3, [r2, #0]
 800776c:	e7b2      	b.n	80076d4 <FlashCode::Erase(unsigned int, unsigned int, flashcode::result&)+0x3c>
 800776e:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8007770:	f040 0002 	orr.w	r0, r0, #2
 8007774:	6518      	str	r0, [r3, #80]	; 0x50
 8007776:	6810      	ldr	r0, [r2, #0]
 8007778:	6558      	str	r0, [r3, #84]	; 0x54
 800777a:	69dd      	ldr	r5, [r3, #28]
 800777c:	07ad      	lsls	r5, r5, #30
 800777e:	bf48      	it	mi
 8007780:	6158      	strmi	r0, [r3, #20]
 8007782:	4814      	ldr	r0, [pc, #80]	; (80077d4 <FlashCode::Erase(unsigned int, unsigned int, flashcode::result&)+0x13c>)
 8007784:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8007786:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800778a:	6503      	str	r3, [r0, #80]	; 0x50
 800778c:	680b      	ldr	r3, [r1, #0]
 800778e:	f5a3 5380 	sub.w	r3, r3, #4096	; 0x1000
 8007792:	600b      	str	r3, [r1, #0]
 8007794:	6813      	ldr	r3, [r2, #0]
 8007796:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800779a:	e7e6      	b.n	800776a <FlashCode::Erase(unsigned int, unsigned int, flashcode::result&)+0xd2>
 800779c:	4b0b      	ldr	r3, [pc, #44]	; (80077cc <FlashCode::Erase(unsigned int, unsigned int, flashcode::result&)+0x134>)
 800779e:	781a      	ldrb	r2, [r3, #0]
 80077a0:	4b0c      	ldr	r3, [pc, #48]	; (80077d4 <FlashCode::Erase(unsigned int, unsigned int, flashcode::result&)+0x13c>)
 80077a2:	b132      	cbz	r2, 80077b2 <FlashCode::Erase(unsigned int, unsigned int, flashcode::result&)+0x11a>
 80077a4:	691a      	ldr	r2, [r3, #16]
 80077a6:	f022 0201 	bic.w	r2, r2, #1
 80077aa:	611a      	str	r2, [r3, #16]
 80077ac:	2000      	movs	r0, #0
 80077ae:	6020      	str	r0, [r4, #0]
 80077b0:	e7bb      	b.n	800772a <FlashCode::Erase(unsigned int, unsigned int, flashcode::result&)+0x92>
 80077b2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80077b4:	f022 0201 	bic.w	r2, r2, #1
 80077b8:	651a      	str	r2, [r3, #80]	; 0x50
 80077ba:	e7f7      	b.n	80077ac <FlashCode::Erase(unsigned int, unsigned int, flashcode::result&)+0x114>
 80077bc:	20001670 	andcs	r1, r0, r0, ror r6
 80077c0:	20001674 	andcs	r1, r0, r4, ror r6
 80077c4:	20001680 	andcs	r1, r0, r0, lsl #13
 80077c8:	1ffff700 	svcne	0x00fff700
 80077cc:	2000167c 	andcs	r1, r0, ip, ror r6
 80077d0:	0807ffff 	stmdaeq	r7, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, sp, lr, pc}
 80077d4:	40022000 	andmi	r2, r2, r0

080077d8 <FlashCode::Write(unsigned int, unsigned int, unsigned char const*, flashcode::result&)>:
 80077d8:	b570      	push	{r4, r5, r6, lr}
 80077da:	9804      	ldr	r0, [sp, #16]
 80077dc:	2400      	movs	r4, #0
 80077de:	6004      	str	r4, [r0, #0]
 80077e0:	4c48      	ldr	r4, [pc, #288]	; (8007904 <FlashCode::Write(unsigned int, unsigned int, unsigned char const*, flashcode::result&)+0x12c>)
 80077e2:	6820      	ldr	r0, [r4, #0]
 80077e4:	2804      	cmp	r0, #4
 80077e6:	d848      	bhi.n	800787a <FlashCode::Write(unsigned int, unsigned int, unsigned char const*, flashcode::result&)+0xa2>
 80077e8:	e8df f000 	tbb	[pc, r0]
 80077ec:	22847c03 	addcs	r7, r4, #768	; 0x300
 80077f0:	48450047 	stmdami	r5, {r0, r1, r2, r6}^
 80077f4:	f101 6100 	add.w	r1, r1, #134217728	; 0x8000000
 80077f8:	6001      	str	r1, [r0, #0]
 80077fa:	4844      	ldr	r0, [pc, #272]	; (800790c <FlashCode::Write(unsigned int, unsigned int, unsigned char const*, flashcode::result&)+0x134>)
 80077fc:	6003      	str	r3, [r0, #0]
 80077fe:	4b44      	ldr	r3, [pc, #272]	; (8007910 <FlashCode::Write(unsigned int, unsigned int, unsigned char const*, flashcode::result&)+0x138>)
 8007800:	601a      	str	r2, [r3, #0]
 8007802:	4b44      	ldr	r3, [pc, #272]	; (8007914 <FlashCode::Write(unsigned int, unsigned int, unsigned char const*, flashcode::result&)+0x13c>)
 8007804:	f8b3 30e0 	ldrh.w	r3, [r3, #224]	; 0xe0
 8007808:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800780c:	4b42      	ldr	r3, [pc, #264]	; (8007918 <FlashCode::Write(unsigned int, unsigned int, unsigned char const*, flashcode::result&)+0x140>)
 800780e:	d807      	bhi.n	8007820 <FlashCode::Write(unsigned int, unsigned int, unsigned char const*, flashcode::result&)+0x48>
 8007810:	2201      	movs	r2, #1
 8007812:	701a      	strb	r2, [r3, #0]
 8007814:	f001 f936 	bl	8008a84 <fmc_bank0_unlock>
 8007818:	2303      	movs	r3, #3
 800781a:	6023      	str	r3, [r4, #0]
 800781c:	2000      	movs	r0, #0
 800781e:	e026      	b.n	800786e <FlashCode::Write(unsigned int, unsigned int, unsigned char const*, flashcode::result&)+0x96>
 8007820:	4a3e      	ldr	r2, [pc, #248]	; (800791c <FlashCode::Write(unsigned int, unsigned int, unsigned char const*, flashcode::result&)+0x144>)
 8007822:	4291      	cmp	r1, r2
 8007824:	d3f4      	bcc.n	8007810 <FlashCode::Write(unsigned int, unsigned int, unsigned char const*, flashcode::result&)+0x38>
 8007826:	2200      	movs	r2, #0
 8007828:	701a      	strb	r2, [r3, #0]
 800782a:	f001 f939 	bl	8008aa0 <fmc_bank1_unlock>
 800782e:	e7f3      	b.n	8007818 <FlashCode::Write(unsigned int, unsigned int, unsigned char const*, flashcode::result&)+0x40>
 8007830:	4d39      	ldr	r5, [pc, #228]	; (8007918 <FlashCode::Write(unsigned int, unsigned int, unsigned char const*, flashcode::result&)+0x140>)
 8007832:	782b      	ldrb	r3, [r5, #0]
 8007834:	b15b      	cbz	r3, 800784e <FlashCode::Write(unsigned int, unsigned int, unsigned char const*, flashcode::result&)+0x76>
 8007836:	f001 f951 	bl	8008adc <fmc_bank0_state_get>
 800783a:	2801      	cmp	r0, #1
 800783c:	d0ee      	beq.n	800781c <FlashCode::Write(unsigned int, unsigned int, unsigned char const*, flashcode::result&)+0x44>
 800783e:	7829      	ldrb	r1, [r5, #0]
 8007840:	4b37      	ldr	r3, [pc, #220]	; (8007920 <FlashCode::Write(unsigned int, unsigned int, unsigned char const*, flashcode::result&)+0x148>)
 8007842:	b939      	cbnz	r1, 8007854 <FlashCode::Write(unsigned int, unsigned int, unsigned char const*, flashcode::result&)+0x7c>
 8007844:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007846:	f022 0201 	bic.w	r2, r2, #1
 800784a:	651a      	str	r2, [r3, #80]	; 0x50
 800784c:	e006      	b.n	800785c <FlashCode::Write(unsigned int, unsigned int, unsigned char const*, flashcode::result&)+0x84>
 800784e:	f001 f957 	bl	8008b00 <fmc_bank1_state_get>
 8007852:	e7f2      	b.n	800783a <FlashCode::Write(unsigned int, unsigned int, unsigned char const*, flashcode::result&)+0x62>
 8007854:	691a      	ldr	r2, [r3, #16]
 8007856:	f022 0201 	bic.w	r2, r2, #1
 800785a:	611a      	str	r2, [r3, #16]
 800785c:	4b2c      	ldr	r3, [pc, #176]	; (8007910 <FlashCode::Write(unsigned int, unsigned int, unsigned char const*, flashcode::result&)+0x138>)
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	b94b      	cbnz	r3, 8007876 <FlashCode::Write(unsigned int, unsigned int, unsigned char const*, flashcode::result&)+0x9e>
 8007862:	b129      	cbz	r1, 8007870 <FlashCode::Write(unsigned int, unsigned int, unsigned char const*, flashcode::result&)+0x98>
 8007864:	f001 f92a 	bl	8008abc <fmc_bank0_lock>
 8007868:	2300      	movs	r3, #0
 800786a:	6023      	str	r3, [r4, #0]
 800786c:	2001      	movs	r0, #1
 800786e:	bd70      	pop	{r4, r5, r6, pc}
 8007870:	f001 f92c 	bl	8008acc <fmc_bank1_lock>
 8007874:	e7f8      	b.n	8007868 <FlashCode::Write(unsigned int, unsigned int, unsigned char const*, flashcode::result&)+0x90>
 8007876:	2304      	movs	r3, #4
 8007878:	e7cf      	b.n	800781a <FlashCode::Write(unsigned int, unsigned int, unsigned char const*, flashcode::result&)+0x42>
 800787a:	4a25      	ldr	r2, [pc, #148]	; (8007910 <FlashCode::Write(unsigned int, unsigned int, unsigned char const*, flashcode::result&)+0x138>)
 800787c:	6813      	ldr	r3, [r2, #0]
 800787e:	2b03      	cmp	r3, #3
 8007880:	d91a      	bls.n	80078b8 <FlashCode::Write(unsigned int, unsigned int, unsigned char const*, flashcode::result&)+0xe0>
 8007882:	4b25      	ldr	r3, [pc, #148]	; (8007918 <FlashCode::Write(unsigned int, unsigned int, unsigned char const*, flashcode::result&)+0x140>)
 8007884:	7819      	ldrb	r1, [r3, #0]
 8007886:	4b26      	ldr	r3, [pc, #152]	; (8007920 <FlashCode::Write(unsigned int, unsigned int, unsigned char const*, flashcode::result&)+0x148>)
 8007888:	b189      	cbz	r1, 80078ae <FlashCode::Write(unsigned int, unsigned int, unsigned char const*, flashcode::result&)+0xd6>
 800788a:	6919      	ldr	r1, [r3, #16]
 800788c:	f041 0101 	orr.w	r1, r1, #1
 8007890:	6119      	str	r1, [r3, #16]
 8007892:	4d1e      	ldr	r5, [pc, #120]	; (800790c <FlashCode::Write(unsigned int, unsigned int, unsigned char const*, flashcode::result&)+0x134>)
 8007894:	481c      	ldr	r0, [pc, #112]	; (8007908 <FlashCode::Write(unsigned int, unsigned int, unsigned char const*, flashcode::result&)+0x130>)
 8007896:	6829      	ldr	r1, [r5, #0]
 8007898:	6803      	ldr	r3, [r0, #0]
 800789a:	f851 6b04 	ldr.w	r6, [r1], #4
 800789e:	f843 6b04 	str.w	r6, [r3], #4
 80078a2:	6003      	str	r3, [r0, #0]
 80078a4:	6813      	ldr	r3, [r2, #0]
 80078a6:	6029      	str	r1, [r5, #0]
 80078a8:	3b04      	subs	r3, #4
 80078aa:	6013      	str	r3, [r2, #0]
 80078ac:	e7b4      	b.n	8007818 <FlashCode::Write(unsigned int, unsigned int, unsigned char const*, flashcode::result&)+0x40>
 80078ae:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80078b0:	f041 0101 	orr.w	r1, r1, #1
 80078b4:	6519      	str	r1, [r3, #80]	; 0x50
 80078b6:	e7ec      	b.n	8007892 <FlashCode::Write(unsigned int, unsigned int, unsigned char const*, flashcode::result&)+0xba>
 80078b8:	2b00      	cmp	r3, #0
 80078ba:	d0ad      	beq.n	8007818 <FlashCode::Write(unsigned int, unsigned int, unsigned char const*, flashcode::result&)+0x40>
 80078bc:	4b16      	ldr	r3, [pc, #88]	; (8007918 <FlashCode::Write(unsigned int, unsigned int, unsigned char const*, flashcode::result&)+0x140>)
 80078be:	781a      	ldrb	r2, [r3, #0]
 80078c0:	4b17      	ldr	r3, [pc, #92]	; (8007920 <FlashCode::Write(unsigned int, unsigned int, unsigned char const*, flashcode::result&)+0x148>)
 80078c2:	b152      	cbz	r2, 80078da <FlashCode::Write(unsigned int, unsigned int, unsigned char const*, flashcode::result&)+0x102>
 80078c4:	691a      	ldr	r2, [r3, #16]
 80078c6:	f042 0201 	orr.w	r2, r2, #1
 80078ca:	611a      	str	r2, [r3, #16]
 80078cc:	4a0f      	ldr	r2, [pc, #60]	; (800790c <FlashCode::Write(unsigned int, unsigned int, unsigned char const*, flashcode::result&)+0x134>)
 80078ce:	4b0e      	ldr	r3, [pc, #56]	; (8007908 <FlashCode::Write(unsigned int, unsigned int, unsigned char const*, flashcode::result&)+0x130>)
 80078d0:	6812      	ldr	r2, [r2, #0]
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	6812      	ldr	r2, [r2, #0]
 80078d6:	601a      	str	r2, [r3, #0]
 80078d8:	e79e      	b.n	8007818 <FlashCode::Write(unsigned int, unsigned int, unsigned char const*, flashcode::result&)+0x40>
 80078da:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80078dc:	f042 0201 	orr.w	r2, r2, #1
 80078e0:	651a      	str	r2, [r3, #80]	; 0x50
 80078e2:	e7f3      	b.n	80078cc <FlashCode::Write(unsigned int, unsigned int, unsigned char const*, flashcode::result&)+0xf4>
 80078e4:	4b0c      	ldr	r3, [pc, #48]	; (8007918 <FlashCode::Write(unsigned int, unsigned int, unsigned char const*, flashcode::result&)+0x140>)
 80078e6:	781a      	ldrb	r2, [r3, #0]
 80078e8:	4b0d      	ldr	r3, [pc, #52]	; (8007920 <FlashCode::Write(unsigned int, unsigned int, unsigned char const*, flashcode::result&)+0x148>)
 80078ea:	b132      	cbz	r2, 80078fa <FlashCode::Write(unsigned int, unsigned int, unsigned char const*, flashcode::result&)+0x122>
 80078ec:	691a      	ldr	r2, [r3, #16]
 80078ee:	f022 0202 	bic.w	r2, r2, #2
 80078f2:	611a      	str	r2, [r3, #16]
 80078f4:	2000      	movs	r0, #0
 80078f6:	6020      	str	r0, [r4, #0]
 80078f8:	e7b9      	b.n	800786e <FlashCode::Write(unsigned int, unsigned int, unsigned char const*, flashcode::result&)+0x96>
 80078fa:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80078fc:	f022 0202 	bic.w	r2, r2, #2
 8007900:	651a      	str	r2, [r3, #80]	; 0x50
 8007902:	e7f7      	b.n	80078f4 <FlashCode::Write(unsigned int, unsigned int, unsigned char const*, flashcode::result&)+0x11c>
 8007904:	20001670 	andcs	r1, r0, r0, ror r6
 8007908:	2000166c 	andcs	r1, r0, ip, ror #12
 800790c:	20001678 	andcs	r1, r0, r8, ror r6
 8007910:	20001680 	andcs	r1, r0, r0, lsl #13
 8007914:	1ffff700 	svcne	0x00fff700
 8007918:	2000167c 	andcs	r1, r0, ip, ror r6
 800791c:	0807ffff 	stmdaeq	r7, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, sp, lr, pc}
 8007920:	40022000 	andmi	r2, r2, r0

08007924 <Display::PrintInfo() [clone .isra.0]>:
 8007924:	b910      	cbnz	r0, 800792c <Display::PrintInfo() [clone .isra.0]+0x8>
 8007926:	4803      	ldr	r0, [pc, #12]	; (8007934 <Display::PrintInfo() [clone .isra.0]+0x10>)
 8007928:	f7fa b9d4 	b.w	8001cd4 <puts>
 800792c:	6803      	ldr	r3, [r0, #0]
 800792e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007930:	4718      	bx	r3
 8007932:	bf00      	nop
 8007934:	0800bb4e 	stmdaeq	r0, {r1, r2, r3, r6, r8, r9, fp, ip, sp, pc}

08007938 <HAL_I2C::IsConnected_(unsigned char, unsigned int)>:
 8007938:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800793a:	460d      	mov	r5, r1
 800793c:	4604      	mov	r4, r0
 800793e:	f001 fdd1 	bl	80094e4 <gd32_i2c_set_address>
 8007942:	4628      	mov	r0, r5
 8007944:	f001 fdc6 	bl	80094d4 <gd32_i2c_set_baudrate>
 8007948:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 800794c:	2b07      	cmp	r3, #7
 800794e:	d902      	bls.n	8007956 <HAL_I2C::IsConnected_(unsigned char, unsigned int)+0x1e>
 8007950:	3c50      	subs	r4, #80	; 0x50
 8007952:	2c0f      	cmp	r4, #15
 8007954:	d809      	bhi.n	800796a <HAL_I2C::IsConnected_(unsigned char, unsigned int)+0x32>
 8007956:	2101      	movs	r1, #1
 8007958:	f10d 0007 	add.w	r0, sp, #7
 800795c:	f001 fe2e 	bl	80095bc <gd32_i2c_read>
 8007960:	fab0 f080 	clz	r0, r0
 8007964:	0940      	lsrs	r0, r0, #5
 8007966:	b003      	add	sp, #12
 8007968:	bd30      	pop	{r4, r5, pc}
 800796a:	2100      	movs	r1, #0
 800796c:	4608      	mov	r0, r1
 800796e:	f001 fdbf 	bl	80094f0 <gd32_i2c_write>
 8007972:	e7f5      	b.n	8007960 <HAL_I2C::IsConnected_(unsigned char, unsigned int)+0x28>

08007974 <Display::Detect7Segment()>:
 8007974:	b513      	push	{r0, r1, r4, lr}
 8007976:	68c1      	ldr	r1, [r0, #12]
 8007978:	4604      	mov	r4, r0
 800797a:	7a00      	ldrb	r0, [r0, #8]
 800797c:	f7ff ffdc 	bl	8007938 <HAL_I2C::IsConnected_(unsigned char, unsigned int)>
 8007980:	7460      	strb	r0, [r4, #17]
 8007982:	b170      	cbz	r0, 80079a2 <Display::Detect7Segment()+0x2e>
 8007984:	2200      	movs	r2, #0
 8007986:	f104 0008 	add.w	r0, r4, #8
 800798a:	4611      	mov	r1, r2
 800798c:	9001      	str	r0, [sp, #4]
 800798e:	f7fb f8bb 	bl	8002b08 <HAL_I2C::WriteRegister(unsigned char, unsigned short)>
 8007992:	7c63      	ldrb	r3, [r4, #17]
 8007994:	9801      	ldr	r0, [sp, #4]
 8007996:	b123      	cbz	r3, 80079a2 <Display::Detect7Segment()+0x2e>
 8007998:	f24c 02ff 	movw	r2, #49407	; 0xc0ff
 800799c:	2112      	movs	r1, #18
 800799e:	f7fb f8b3 	bl	8002b08 <HAL_I2C::WriteRegister(unsigned char, unsigned short)>
 80079a2:	b002      	add	sp, #8
 80079a4:	bd10      	pop	{r4, pc}

080079a6 <Display::Detect(display::Type)>:
 80079a6:	2902      	cmp	r1, #2
 80079a8:	b538      	push	{r3, r4, r5, lr}
 80079aa:	4604      	mov	r4, r0
 80079ac:	d014      	beq.n	80079d8 <Display::Detect(display::Type)+0x32>
 80079ae:	2904      	cmp	r1, #4
 80079b0:	d01b      	beq.n	80079ea <Display::Detect(display::Type)+0x44>
 80079b2:	69a0      	ldr	r0, [r4, #24]
 80079b4:	b168      	cbz	r0, 80079d2 <Display::Detect(display::Type)+0x2c>
 80079b6:	6803      	ldr	r3, [r0, #0]
 80079b8:	689b      	ldr	r3, [r3, #8]
 80079ba:	4798      	blx	r3
 80079bc:	69a3      	ldr	r3, [r4, #24]
 80079be:	b9b0      	cbnz	r0, 80079ee <Display::Detect(display::Type)+0x48>
 80079c0:	b11b      	cbz	r3, 80079ca <Display::Detect(display::Type)+0x24>
 80079c2:	681a      	ldr	r2, [r3, #0]
 80079c4:	4618      	mov	r0, r3
 80079c6:	6852      	ldr	r2, [r2, #4]
 80079c8:	4790      	blx	r2
 80079ca:	2300      	movs	r3, #0
 80079cc:	61a3      	str	r3, [r4, #24]
 80079ce:	2304      	movs	r3, #4
 80079d0:	6023      	str	r3, [r4, #0]
 80079d2:	2300      	movs	r3, #0
 80079d4:	6163      	str	r3, [r4, #20]
 80079d6:	e011      	b.n	80079fc <Display::Detect(display::Type)+0x56>
 80079d8:	2020      	movs	r0, #32
 80079da:	f000 fcda 	bl	8008392 <operator new(unsigned int)>
 80079de:	2100      	movs	r1, #0
 80079e0:	4605      	mov	r5, r0
 80079e2:	f000 f8a1 	bl	8007b28 <Ssd1306::Ssd1306(TOledPanel)>
 80079e6:	61a5      	str	r5, [r4, #24]
 80079e8:	e7e3      	b.n	80079b2 <Display::Detect(display::Type)+0xc>
 80079ea:	6001      	str	r1, [r0, #0]
 80079ec:	e7e1      	b.n	80079b2 <Display::Detect(display::Type)+0xc>
 80079ee:	681a      	ldr	r2, [r3, #0]
 80079f0:	4618      	mov	r0, r3
 80079f2:	68d2      	ldr	r2, [r2, #12]
 80079f4:	4790      	blx	r2
 80079f6:	69a3      	ldr	r3, [r4, #24]
 80079f8:	2b00      	cmp	r3, #0
 80079fa:	d0ea      	beq.n	80079d2 <Display::Detect(display::Type)+0x2c>
 80079fc:	bd38      	pop	{r3, r4, r5, pc}
	...

08007a00 <Display::Display()>:
 8007a00:	2304      	movs	r3, #4
 8007a02:	b510      	push	{r4, lr}
 8007a04:	6003      	str	r3, [r0, #0]
 8007a06:	4b0f      	ldr	r3, [pc, #60]	; (8007a44 <Display::Display()+0x44>)
 8007a08:	4a0f      	ldr	r2, [pc, #60]	; (8007a48 <Display::Display()+0x48>)
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	6043      	str	r3, [r0, #4]
 8007a0e:	2321      	movs	r3, #33	; 0x21
 8007a10:	7203      	strb	r3, [r0, #8]
 8007a12:	4b0e      	ldr	r3, [pc, #56]	; (8007a4c <Display::Display()+0x4c>)
 8007a14:	60c3      	str	r3, [r0, #12]
 8007a16:	2300      	movs	r3, #0
 8007a18:	e9c0 2305 	strd	r2, r3, [r0, #20]
 8007a1c:	8203      	strh	r3, [r0, #16]
 8007a1e:	4b0c      	ldr	r3, [pc, #48]	; (8007a50 <Display::Display()+0x50>)
 8007a20:	4604      	mov	r4, r0
 8007a22:	2102      	movs	r1, #2
 8007a24:	6018      	str	r0, [r3, #0]
 8007a26:	f7ff ffbe 	bl	80079a6 <Display::Detect(display::Type)>
 8007a2a:	4620      	mov	r0, r4
 8007a2c:	f7ff ffa2 	bl	8007974 <Display::Detect7Segment()>
 8007a30:	69a3      	ldr	r3, [r4, #24]
 8007a32:	b10b      	cbz	r3, 8007a38 <Display::Display()+0x38>
 8007a34:	f7f9 f8cc 	bl	8000bd0 <display::timeout::gpio_init()>
 8007a38:	69a0      	ldr	r0, [r4, #24]
 8007a3a:	f7ff ff73 	bl	8007924 <Display::PrintInfo() [clone .isra.0]>
 8007a3e:	4620      	mov	r0, r4
 8007a40:	bd10      	pop	{r4, pc}
 8007a42:	bf00      	nop
 8007a44:	200017ac 	andcs	r1, r0, ip, lsr #15
 8007a48:	000493e0 	andeq	r9, r4, r0, ror #7
 8007a4c:	00061a80 	andeq	r1, r6, r0, lsl #21
 8007a50:	20001684 	andcs	r1, r0, r4, lsl #13

08007a54 <Ssd1306::~Ssd1306()>:
 8007a54:	4770      	bx	lr

08007a56 <Ssd1306::SetCursor(unsigned int)>:
 8007a56:	4770      	bx	lr

08007a58 <Ssd1306::PrintInfo()>:
 8007a58:	b410      	push	{r4}
 8007a5a:	e9d0 3201 	ldrd	r3, r2, [r0, #4]
 8007a5e:	7e44      	ldrb	r4, [r0, #25]
 8007a60:	4904      	ldr	r1, [pc, #16]	; (8007a74 <Ssd1306::PrintInfo()+0x1c>)
 8007a62:	4805      	ldr	r0, [pc, #20]	; (8007a78 <Ssd1306::PrintInfo()+0x20>)
 8007a64:	2c00      	cmp	r4, #0
 8007a66:	bf08      	it	eq
 8007a68:	4601      	moveq	r1, r0
 8007a6a:	4804      	ldr	r0, [pc, #16]	; (8007a7c <Ssd1306::PrintInfo()+0x24>)
 8007a6c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007a70:	f7fa b8f8 	b.w	8001c64 <printf>
 8007a74:	0800bb5f 	stmdaeq	r0, {r0, r1, r2, r3, r4, r6, r8, r9, fp, ip, sp, pc}
 8007a78:	0800bb66 	stmdaeq	r0, {r1, r2, r5, r6, r8, r9, fp, ip, sp, pc}
 8007a7c:	0800bb6e 	stmdaeq	r0, {r1, r2, r3, r5, r6, r8, r9, fp, ip, sp, pc}

08007a80 <Ssd1306::~Ssd1306()>:
 8007a80:	b510      	push	{r4, lr}
 8007a82:	4604      	mov	r4, r0
 8007a84:	f000 fc81 	bl	800838a <operator delete(void*)>
 8007a88:	4620      	mov	r0, r4
 8007a8a:	bd10      	pop	{r4, pc}

08007a8c <HAL_I2C::Setup()>:
 8007a8c:	b510      	push	{r4, lr}
 8007a8e:	4604      	mov	r4, r0
 8007a90:	7800      	ldrb	r0, [r0, #0]
 8007a92:	f001 fd27 	bl	80094e4 <gd32_i2c_set_address>
 8007a96:	6860      	ldr	r0, [r4, #4]
 8007a98:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007a9c:	f001 bd1a 	b.w	80094d4 <gd32_i2c_set_baudrate>

08007aa0 <Ssd1306::PutChar(int)>:
 8007aa0:	b510      	push	{r4, lr}
 8007aa2:	3920      	subs	r1, #32
 8007aa4:	295f      	cmp	r1, #95	; 0x5f
 8007aa6:	f100 0010 	add.w	r0, r0, #16
 8007aaa:	bf94      	ite	ls
 8007aac:	460c      	movls	r4, r1
 8007aae:	2400      	movhi	r4, #0
 8007ab0:	f7ff ffec 	bl	8007a8c <HAL_I2C::Setup()>
 8007ab4:	4804      	ldr	r0, [pc, #16]	; (8007ac8 <Ssd1306::PutChar(int)+0x28>)
 8007ab6:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
 8007aba:	4420      	add	r0, r4
 8007abc:	2107      	movs	r1, #7
 8007abe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007ac2:	f001 bd15 	b.w	80094f0 <gd32_i2c_write>
 8007ac6:	bf00      	nop
 8007ac8:	0800bb80 	stmdaeq	r0, {r7, r8, r9, fp, ip, sp, pc}

08007acc <Ssd1306::PutString(char const*)>:
 8007acc:	b538      	push	{r3, r4, r5, lr}
 8007ace:	4605      	mov	r5, r0
 8007ad0:	1e4c      	subs	r4, r1, #1
 8007ad2:	f814 1f01 	ldrb.w	r1, [r4, #1]!
 8007ad6:	b901      	cbnz	r1, 8007ada <Ssd1306::PutString(char const*)+0xe>
 8007ad8:	bd38      	pop	{r3, r4, r5, pc}
 8007ada:	4628      	mov	r0, r5
 8007adc:	f7ff ffe0 	bl	8007aa0 <Ssd1306::PutChar(int)>
 8007ae0:	e7f7      	b.n	8007ad2 <Ssd1306::PutString(char const*)+0x6>

08007ae2 <Ssd1306::Text(char const*, unsigned int)>:
 8007ae2:	6843      	ldr	r3, [r0, #4]
 8007ae4:	b570      	push	{r4, r5, r6, lr}
 8007ae6:	4605      	mov	r5, r0
 8007ae8:	460c      	mov	r4, r1
 8007aea:	429a      	cmp	r2, r3
 8007aec:	bf94      	ite	ls
 8007aee:	188e      	addls	r6, r1, r2
 8007af0:	18ce      	addhi	r6, r1, r3
 8007af2:	42b4      	cmp	r4, r6
 8007af4:	d100      	bne.n	8007af8 <Ssd1306::Text(char const*, unsigned int)+0x16>
 8007af6:	bd70      	pop	{r4, r5, r6, pc}
 8007af8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007afc:	4628      	mov	r0, r5
 8007afe:	f7ff ffcf 	bl	8007aa0 <Ssd1306::PutChar(int)>
 8007b02:	e7f6      	b.n	8007af2 <Ssd1306::Text(char const*, unsigned int)+0x10>

08007b04 <Ssd1306::InitMembers()>:
 8007b04:	7e03      	ldrb	r3, [r0, #24]
 8007b06:	b14b      	cbz	r3, 8007b1c <Ssd1306::InitMembers()+0x18>
 8007b08:	3b01      	subs	r3, #1
 8007b0a:	2b01      	cmp	r3, #1
 8007b0c:	d909      	bls.n	8007b22 <Ssd1306::InitMembers()+0x1e>
 8007b0e:	2308      	movs	r3, #8
 8007b10:	2204      	movs	r2, #4
 8007b12:	2115      	movs	r1, #21
 8007b14:	e9c0 1301 	strd	r1, r3, [r0, #4]
 8007b18:	61c2      	str	r2, [r0, #28]
 8007b1a:	4770      	bx	lr
 8007b1c:	2308      	movs	r3, #8
 8007b1e:	461a      	mov	r2, r3
 8007b20:	e7f7      	b.n	8007b12 <Ssd1306::InitMembers()+0xe>
 8007b22:	2304      	movs	r3, #4
 8007b24:	e7fb      	b.n	8007b1e <Ssd1306::InitMembers()+0x1a>
	...

08007b28 <Ssd1306::Ssd1306(TOledPanel)>:
 8007b28:	227f      	movs	r2, #127	; 0x7f
 8007b2a:	8182      	strh	r2, [r0, #12]
 8007b2c:	4a07      	ldr	r2, [pc, #28]	; (8007b4c <Ssd1306::Ssd1306(TOledPanel)+0x24>)
 8007b2e:	6002      	str	r2, [r0, #0]
 8007b30:	b508      	push	{r3, lr}
 8007b32:	223c      	movs	r2, #60	; 0x3c
 8007b34:	7402      	strb	r2, [r0, #16]
 8007b36:	4a06      	ldr	r2, [pc, #24]	; (8007b50 <Ssd1306::Ssd1306(TOledPanel)+0x28>)
 8007b38:	6142      	str	r2, [r0, #20]
 8007b3a:	2200      	movs	r2, #0
 8007b3c:	7642      	strb	r2, [r0, #25]
 8007b3e:	4a05      	ldr	r2, [pc, #20]	; (8007b54 <Ssd1306::Ssd1306(TOledPanel)+0x2c>)
 8007b40:	7601      	strb	r1, [r0, #24]
 8007b42:	6010      	str	r0, [r2, #0]
 8007b44:	f7ff ffde 	bl	8007b04 <Ssd1306::InitMembers()>
 8007b48:	bd08      	pop	{r3, pc}
 8007b4a:	bf00      	nop
 8007b4c:	0800be58 	stmdaeq	r0, {r3, r4, r6, r9, sl, fp, ip, sp, pc}
 8007b50:	00061a80 	andeq	r1, r6, r0, lsl #21
 8007b54:	20001710 	andcs	r1, r0, r0, lsl r7

08007b58 <Ssd1306::SendCommand(unsigned char)>:
 8007b58:	b507      	push	{r0, r1, r2, lr}
 8007b5a:	2300      	movs	r3, #0
 8007b5c:	3010      	adds	r0, #16
 8007b5e:	f88d 3004 	strb.w	r3, [sp, #4]
 8007b62:	f88d 1005 	strb.w	r1, [sp, #5]
 8007b66:	f7ff ff91 	bl	8007a8c <HAL_I2C::Setup()>
 8007b6a:	2102      	movs	r1, #2
 8007b6c:	a801      	add	r0, sp, #4
 8007b6e:	f001 fcbf 	bl	80094f0 <gd32_i2c_write>
 8007b72:	b003      	add	sp, #12
 8007b74:	f85d fb04 	ldr.w	pc, [sp], #4

08007b78 <Ssd1306::SetCursorPos(unsigned int, unsigned int)>:
 8007b78:	2914      	cmp	r1, #20
 8007b7a:	b570      	push	{r4, r5, r6, lr}
 8007b7c:	4605      	mov	r5, r0
 8007b7e:	4616      	mov	r6, r2
 8007b80:	d81d      	bhi.n	8007bbe <Ssd1306::SetCursorPos(unsigned int, unsigned int)+0x46>
 8007b82:	6883      	ldr	r3, [r0, #8]
 8007b84:	4293      	cmp	r3, r2
 8007b86:	d91a      	bls.n	8007bbe <Ssd1306::SetCursorPos(unsigned int, unsigned int)+0x46>
 8007b88:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8007b8c:	7e43      	ldrb	r3, [r0, #25]
 8007b8e:	004c      	lsls	r4, r1, #1
 8007b90:	b2e4      	uxtb	r4, r4
 8007b92:	b10b      	cbz	r3, 8007b98 <Ssd1306::SetCursorPos(unsigned int, unsigned int)+0x20>
 8007b94:	3404      	adds	r4, #4
 8007b96:	b2e4      	uxtb	r4, r4
 8007b98:	f004 010e 	and.w	r1, r4, #14
 8007b9c:	4628      	mov	r0, r5
 8007b9e:	0924      	lsrs	r4, r4, #4
 8007ba0:	f7ff ffda 	bl	8007b58 <Ssd1306::SendCommand(unsigned char)>
 8007ba4:	f044 0110 	orr.w	r1, r4, #16
 8007ba8:	4628      	mov	r0, r5
 8007baa:	f7ff ffd5 	bl	8007b58 <Ssd1306::SendCommand(unsigned char)>
 8007bae:	f066 014f 	orn	r1, r6, #79	; 0x4f
 8007bb2:	4628      	mov	r0, r5
 8007bb4:	b2c9      	uxtb	r1, r1
 8007bb6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8007bba:	f7ff bfcd 	b.w	8007b58 <Ssd1306::SendCommand(unsigned char)>
 8007bbe:	bd70      	pop	{r4, r5, r6, pc}

08007bc0 <Ssd1306::TextLine(unsigned int, char const*, unsigned int)>:
 8007bc0:	b5e0      	push	{r5, r6, r7, lr}
 8007bc2:	461f      	mov	r7, r3
 8007bc4:	6883      	ldr	r3, [r0, #8]
 8007bc6:	428b      	cmp	r3, r1
 8007bc8:	4605      	mov	r5, r0
 8007bca:	4616      	mov	r6, r2
 8007bcc:	d30b      	bcc.n	8007be6 <Ssd1306::TextLine(unsigned int, char const*, unsigned int)+0x26>
 8007bce:	1e4a      	subs	r2, r1, #1
 8007bd0:	b2d2      	uxtb	r2, r2
 8007bd2:	2100      	movs	r1, #0
 8007bd4:	f7ff ffd0 	bl	8007b78 <Ssd1306::SetCursorPos(unsigned int, unsigned int)>
 8007bd8:	463a      	mov	r2, r7
 8007bda:	4631      	mov	r1, r6
 8007bdc:	4628      	mov	r0, r5
 8007bde:	e8bd 40e0 	ldmia.w	sp!, {r5, r6, r7, lr}
 8007be2:	f7ff bf7e 	b.w	8007ae2 <Ssd1306::Text(char const*, unsigned int)>
 8007be6:	bde0      	pop	{r5, r6, r7, pc}

08007be8 <Ssd1306::ClearLine(unsigned int)>:
 8007be8:	6883      	ldr	r3, [r0, #8]
 8007bea:	428b      	cmp	r3, r1
 8007bec:	b513      	push	{r0, r1, r4, lr}
 8007bee:	4604      	mov	r4, r0
 8007bf0:	d315      	bcc.n	8007c1e <Ssd1306::ClearLine(unsigned int)+0x36>
 8007bf2:	1e4a      	subs	r2, r1, #1
 8007bf4:	b2d2      	uxtb	r2, r2
 8007bf6:	2100      	movs	r1, #0
 8007bf8:	9201      	str	r2, [sp, #4]
 8007bfa:	f7ff ffbd 	bl	8007b78 <Ssd1306::SetCursorPos(unsigned int, unsigned int)>
 8007bfe:	f104 0010 	add.w	r0, r4, #16
 8007c02:	f7ff ff43 	bl	8007a8c <HAL_I2C::Setup()>
 8007c06:	2181      	movs	r1, #129	; 0x81
 8007c08:	4806      	ldr	r0, [pc, #24]	; (8007c24 <Ssd1306::ClearLine(unsigned int)+0x3c>)
 8007c0a:	f001 fc71 	bl	80094f0 <gd32_i2c_write>
 8007c0e:	9a01      	ldr	r2, [sp, #4]
 8007c10:	2100      	movs	r1, #0
 8007c12:	4620      	mov	r0, r4
 8007c14:	b002      	add	sp, #8
 8007c16:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007c1a:	f7ff bfad 	b.w	8007b78 <Ssd1306::SetCursorPos(unsigned int, unsigned int)>
 8007c1e:	b002      	add	sp, #8
 8007c20:	bd10      	pop	{r4, pc}
 8007c22:	bf00      	nop
 8007c24:	20001688 	andcs	r1, r0, r8, lsl #13

08007c28 <Ssd1306::SetSleep(bool)>:
 8007c28:	b111      	cbz	r1, 8007c30 <Ssd1306::SetSleep(bool)+0x8>
 8007c2a:	21ae      	movs	r1, #174	; 0xae
 8007c2c:	f7ff bf94 	b.w	8007b58 <Ssd1306::SendCommand(unsigned char)>
 8007c30:	21af      	movs	r1, #175	; 0xaf
 8007c32:	e7fb      	b.n	8007c2c <Ssd1306::SetSleep(bool)+0x4>

08007c34 <Ssd1306::SetContrast(unsigned char)>:
 8007c34:	b538      	push	{r3, r4, r5, lr}
 8007c36:	4604      	mov	r4, r0
 8007c38:	460d      	mov	r5, r1
 8007c3a:	7301      	strb	r1, [r0, #12]
 8007c3c:	2181      	movs	r1, #129	; 0x81
 8007c3e:	f7ff ff8b 	bl	8007b58 <Ssd1306::SendCommand(unsigned char)>
 8007c42:	4629      	mov	r1, r5
 8007c44:	4620      	mov	r0, r4
 8007c46:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007c4a:	f7ff bf85 	b.w	8007b58 <Ssd1306::SendCommand(unsigned char)>

08007c4e <Ssd1306::SetFlipVertically(bool)>:
 8007c4e:	b510      	push	{r4, lr}
 8007c50:	4604      	mov	r4, r0
 8007c52:	7341      	strb	r1, [r0, #13]
 8007c54:	b141      	cbz	r1, 8007c68 <Ssd1306::SetFlipVertically(bool)+0x1a>
 8007c56:	21c0      	movs	r1, #192	; 0xc0
 8007c58:	f7ff ff7e 	bl	8007b58 <Ssd1306::SendCommand(unsigned char)>
 8007c5c:	21a0      	movs	r1, #160	; 0xa0
 8007c5e:	4620      	mov	r0, r4
 8007c60:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007c64:	f7ff bf78 	b.w	8007b58 <Ssd1306::SendCommand(unsigned char)>
 8007c68:	21c8      	movs	r1, #200	; 0xc8
 8007c6a:	f7ff ff75 	bl	8007b58 <Ssd1306::SendCommand(unsigned char)>
 8007c6e:	21a1      	movs	r1, #161	; 0xa1
 8007c70:	e7f5      	b.n	8007c5e <Ssd1306::SetFlipVertically(bool)+0x10>
	...

08007c74 <Ssd1306::CheckSH1106()>:
 8007c74:	b530      	push	{r4, r5, lr}
 8007c76:	2100      	movs	r1, #0
 8007c78:	b087      	sub	sp, #28
 8007c7a:	4604      	mov	r4, r0
 8007c7c:	f7ff ff6c 	bl	8007b58 <Ssd1306::SendCommand(unsigned char)>
 8007c80:	2190      	movs	r1, #144	; 0x90
 8007c82:	4620      	mov	r0, r4
 8007c84:	f7ff ff68 	bl	8007b58 <Ssd1306::SendCommand(unsigned char)>
 8007c88:	21b0      	movs	r1, #176	; 0xb0
 8007c8a:	4620      	mov	r0, r4
 8007c8c:	f7ff ff64 	bl	8007b58 <Ssd1306::SendCommand(unsigned char)>
 8007c90:	4b22      	ldr	r3, [pc, #136]	; (8007d1c <Ssd1306::CheckSH1106()+0xa8>)
 8007c92:	f104 0510 	add.w	r5, r4, #16
 8007c96:	6818      	ldr	r0, [r3, #0]
 8007c98:	9002      	str	r0, [sp, #8]
 8007c9a:	791b      	ldrb	r3, [r3, #4]
 8007c9c:	f88d 300c 	strb.w	r3, [sp, #12]
 8007ca0:	4628      	mov	r0, r5
 8007ca2:	f7ff fef3 	bl	8007a8c <HAL_I2C::Setup()>
 8007ca6:	2105      	movs	r1, #5
 8007ca8:	a802      	add	r0, sp, #8
 8007caa:	f001 fc21 	bl	80094f0 <gd32_i2c_write>
 8007cae:	2100      	movs	r1, #0
 8007cb0:	4620      	mov	r0, r4
 8007cb2:	f7ff ff51 	bl	8007b58 <Ssd1306::SendCommand(unsigned char)>
 8007cb6:	2190      	movs	r1, #144	; 0x90
 8007cb8:	4620      	mov	r0, r4
 8007cba:	f7ff ff4d 	bl	8007b58 <Ssd1306::SendCommand(unsigned char)>
 8007cbe:	21b0      	movs	r1, #176	; 0xb0
 8007cc0:	4620      	mov	r0, r4
 8007cc2:	f7ff ff49 	bl	8007b58 <Ssd1306::SendCommand(unsigned char)>
 8007cc6:	2300      	movs	r3, #0
 8007cc8:	9304      	str	r3, [sp, #16]
 8007cca:	f88d 3014 	strb.w	r3, [sp, #20]
 8007cce:	4628      	mov	r0, r5
 8007cd0:	2340      	movs	r3, #64	; 0x40
 8007cd2:	f88d 3007 	strb.w	r3, [sp, #7]
 8007cd6:	f7ff fed9 	bl	8007a8c <HAL_I2C::Setup()>
 8007cda:	2101      	movs	r1, #1
 8007cdc:	f10d 0007 	add.w	r0, sp, #7
 8007ce0:	f001 fc06 	bl	80094f0 <gd32_i2c_write>
 8007ce4:	4628      	mov	r0, r5
 8007ce6:	f7ff fed1 	bl	8007a8c <HAL_I2C::Setup()>
 8007cea:	2105      	movs	r1, #5
 8007cec:	a804      	add	r0, sp, #16
 8007cee:	f001 fc65 	bl	80095bc <gd32_i2c_read>
 8007cf2:	aa02      	add	r2, sp, #8
 8007cf4:	a904      	add	r1, sp, #16
 8007cf6:	2004      	movs	r0, #4
 8007cf8:	3801      	subs	r0, #1
 8007cfa:	d201      	bcs.n	8007d00 <Ssd1306::CheckSH1106()+0x8c>
 8007cfc:	2300      	movs	r3, #0
 8007cfe:	e006      	b.n	8007d0e <Ssd1306::CheckSH1106()+0x9a>
 8007d00:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 8007d04:	f811 5f01 	ldrb.w	r5, [r1, #1]!
 8007d08:	42ab      	cmp	r3, r5
 8007d0a:	d0f5      	beq.n	8007cf8 <Ssd1306::CheckSH1106()+0x84>
 8007d0c:	1b5b      	subs	r3, r3, r5
 8007d0e:	fab3 f383 	clz	r3, r3
 8007d12:	095b      	lsrs	r3, r3, #5
 8007d14:	7663      	strb	r3, [r4, #25]
 8007d16:	b007      	add	sp, #28
 8007d18:	bd30      	pop	{r4, r5, pc}
 8007d1a:	bf00      	nop
 8007d1c:	0800bb7a 	stmdaeq	r0, {r1, r3, r4, r5, r6, r8, r9, fp, ip, sp, pc}

08007d20 <Ssd1306::Cls()>:
 8007d20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007d24:	7e45      	ldrb	r5, [r0, #25]
 8007d26:	00ad      	lsls	r5, r5, #2
 8007d28:	b2ed      	uxtb	r5, r5
 8007d2a:	f1a5 077f 	sub.w	r7, r5, #127	; 0x7f
 8007d2e:	4604      	mov	r4, r0
 8007d30:	2600      	movs	r6, #0
 8007d32:	f045 0810 	orr.w	r8, r5, #16
 8007d36:	b2ff      	uxtb	r7, r7
 8007d38:	69e3      	ldr	r3, [r4, #28]
 8007d3a:	42b3      	cmp	r3, r6
 8007d3c:	4629      	mov	r1, r5
 8007d3e:	4620      	mov	r0, r4
 8007d40:	d80b      	bhi.n	8007d5a <Ssd1306::Cls()+0x3a>
 8007d42:	f7ff ff09 	bl	8007b58 <Ssd1306::SendCommand(unsigned char)>
 8007d46:	4641      	mov	r1, r8
 8007d48:	4620      	mov	r0, r4
 8007d4a:	f7ff ff05 	bl	8007b58 <Ssd1306::SendCommand(unsigned char)>
 8007d4e:	4620      	mov	r0, r4
 8007d50:	21b0      	movs	r1, #176	; 0xb0
 8007d52:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007d56:	f7ff beff 	b.w	8007b58 <Ssd1306::SendCommand(unsigned char)>
 8007d5a:	f7ff fefd 	bl	8007b58 <Ssd1306::SendCommand(unsigned char)>
 8007d5e:	4641      	mov	r1, r8
 8007d60:	4620      	mov	r0, r4
 8007d62:	f7ff fef9 	bl	8007b58 <Ssd1306::SendCommand(unsigned char)>
 8007d66:	f066 014f 	orn	r1, r6, #79	; 0x4f
 8007d6a:	b2c9      	uxtb	r1, r1
 8007d6c:	4620      	mov	r0, r4
 8007d6e:	f7ff fef3 	bl	8007b58 <Ssd1306::SendCommand(unsigned char)>
 8007d72:	7e23      	ldrb	r3, [r4, #24]
 8007d74:	b123      	cbz	r3, 8007d80 <Ssd1306::Cls()+0x60>
 8007d76:	3b01      	subs	r3, #1
 8007d78:	2b01      	cmp	r3, #1
 8007d7a:	d901      	bls.n	8007d80 <Ssd1306::Cls()+0x60>
 8007d7c:	3601      	adds	r6, #1
 8007d7e:	e7db      	b.n	8007d38 <Ssd1306::Cls()+0x18>
 8007d80:	f104 0010 	add.w	r0, r4, #16
 8007d84:	f7ff fe82 	bl	8007a8c <HAL_I2C::Setup()>
 8007d88:	4639      	mov	r1, r7
 8007d8a:	4802      	ldr	r0, [pc, #8]	; (8007d94 <Ssd1306::Cls()+0x74>)
 8007d8c:	f001 fbb0 	bl	80094f0 <gd32_i2c_write>
 8007d90:	e7f4      	b.n	8007d7c <Ssd1306::Cls()+0x5c>
 8007d92:	bf00      	nop
 8007d94:	20001688 	andcs	r1, r0, r8, lsl #13

08007d98 <Ssd1306::Start()>:
 8007d98:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007d9a:	7c04      	ldrb	r4, [r0, #16]
 8007d9c:	6946      	ldr	r6, [r0, #20]
 8007d9e:	4605      	mov	r5, r0
 8007da0:	4620      	mov	r0, r4
 8007da2:	f001 fb9f 	bl	80094e4 <gd32_i2c_set_address>
 8007da6:	4630      	mov	r0, r6
 8007da8:	f001 fb94 	bl	80094d4 <gd32_i2c_set_baudrate>
 8007dac:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8007db0:	2b07      	cmp	r3, #7
 8007db2:	d902      	bls.n	8007dba <Ssd1306::Start()+0x22>
 8007db4:	3c50      	subs	r4, #80	; 0x50
 8007db6:	2c0f      	cmp	r4, #15
 8007db8:	d80f      	bhi.n	8007dda <Ssd1306::Start()+0x42>
 8007dba:	2101      	movs	r1, #1
 8007dbc:	f10d 0007 	add.w	r0, sp, #7
 8007dc0:	f001 fbfc 	bl	80095bc <gd32_i2c_read>
 8007dc4:	fab0 f480 	clz	r4, r0
 8007dc8:	0964      	lsrs	r4, r4, #5
 8007dca:	b35c      	cbz	r4, 8007e24 <Ssd1306::Start()+0x8c>
 8007dcc:	7e2e      	ldrb	r6, [r5, #24]
 8007dce:	b14e      	cbz	r6, 8007de4 <Ssd1306::Start()+0x4c>
 8007dd0:	3e01      	subs	r6, #1
 8007dd2:	2e01      	cmp	r6, #1
 8007dd4:	d929      	bls.n	8007e2a <Ssd1306::Start()+0x92>
 8007dd6:	2400      	movs	r4, #0
 8007dd8:	e024      	b.n	8007e24 <Ssd1306::Start()+0x8c>
 8007dda:	2100      	movs	r1, #0
 8007ddc:	4608      	mov	r0, r1
 8007dde:	f001 fb87 	bl	80094f0 <gd32_i2c_write>
 8007de2:	e7ef      	b.n	8007dc4 <Ssd1306::Start()+0x2c>
 8007de4:	4f16      	ldr	r7, [pc, #88]	; (8007e40 <Ssd1306::Start()+0xa8>)
 8007de6:	f817 1b01 	ldrb.w	r1, [r7], #1
 8007dea:	4628      	mov	r0, r5
 8007dec:	3601      	adds	r6, #1
 8007dee:	f7ff feb3 	bl	8007b58 <Ssd1306::SendCommand(unsigned char)>
 8007df2:	2e18      	cmp	r6, #24
 8007df4:	d1f7      	bne.n	8007de6 <Ssd1306::Start()+0x4e>
 8007df6:	4a13      	ldr	r2, [pc, #76]	; (8007e44 <Ssd1306::Start()+0xac>)
 8007df8:	2300      	movs	r3, #0
 8007dfa:	4611      	mov	r1, r2
 8007dfc:	4618      	mov	r0, r3
 8007dfe:	3301      	adds	r3, #1
 8007e00:	2b86      	cmp	r3, #134	; 0x86
 8007e02:	f802 0b01 	strb.w	r0, [r2], #1
 8007e06:	d1fa      	bne.n	8007dfe <Ssd1306::Start()+0x66>
 8007e08:	2340      	movs	r3, #64	; 0x40
 8007e0a:	700b      	strb	r3, [r1, #0]
 8007e0c:	4628      	mov	r0, r5
 8007e0e:	f7ff ff31 	bl	8007c74 <Ssd1306::CheckSH1106()>
 8007e12:	4628      	mov	r0, r5
 8007e14:	f7ff ff84 	bl	8007d20 <Ssd1306::Cls()>
 8007e18:	21af      	movs	r1, #175	; 0xaf
 8007e1a:	4628      	mov	r0, r5
 8007e1c:	f7ff fe9c 	bl	8007b58 <Ssd1306::SendCommand(unsigned char)>
 8007e20:	2301      	movs	r3, #1
 8007e22:	736b      	strb	r3, [r5, #13]
 8007e24:	4620      	mov	r0, r4
 8007e26:	b003      	add	sp, #12
 8007e28:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007e2a:	4f07      	ldr	r7, [pc, #28]	; (8007e48 <Ssd1306::Start()+0xb0>)
 8007e2c:	2600      	movs	r6, #0
 8007e2e:	f817 1b01 	ldrb.w	r1, [r7], #1
 8007e32:	4628      	mov	r0, r5
 8007e34:	3601      	adds	r6, #1
 8007e36:	f7ff fe8f 	bl	8007b58 <Ssd1306::SendCommand(unsigned char)>
 8007e3a:	2e18      	cmp	r6, #24
 8007e3c:	d1f7      	bne.n	8007e2e <Ssd1306::Start()+0x96>
 8007e3e:	e7da      	b.n	8007df6 <Ssd1306::Start()+0x5e>
 8007e40:	0800be38 	stmdaeq	r0, {r3, r4, r5, r9, sl, fp, ip, sp, pc}
 8007e44:	20001688 	andcs	r1, r0, r8, lsl #13
 8007e48:	0800be20 	stmdaeq	r0, {r5, r9, sl, fp, ip, sp, pc}

08007e4c <console_putc>:
 8007e4c:	f000 bc86 	b.w	800875c <uart0_putc>

08007e50 <console_puts>:
 8007e50:	f000 bca4 	b.w	800879c <uart0_puts>

08007e54 <FirmwareVersion::FirmwareVersion(char const*, char const*, char const*)>:
 8007e54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007e58:	4d15      	ldr	r5, [pc, #84]	; (8007eb0 <FirmwareVersion::FirmwareVersion(char const*, char const*, char const*)+0x5c>)
 8007e5a:	461e      	mov	r6, r3
 8007e5c:	4b15      	ldr	r3, [pc, #84]	; (8007eb4 <FirmwareVersion::FirmwareVersion(char const*, char const*, char const*)+0x60>)
 8007e5e:	b086      	sub	sp, #24
 8007e60:	6018      	str	r0, [r3, #0]
 8007e62:	4604      	mov	r4, r0
 8007e64:	4617      	mov	r7, r2
 8007e66:	f105 0803 	add.w	r8, r5, #3
 8007e6a:	2203      	movs	r2, #3
 8007e6c:	4628      	mov	r0, r5
 8007e6e:	f000 fb29 	bl	80084c4 <memmove>
 8007e72:	4639      	mov	r1, r7
 8007e74:	220b      	movs	r2, #11
 8007e76:	4640      	mov	r0, r8
 8007e78:	f000 fb24 	bl	80084c4 <memmove>
 8007e7c:	f105 030e 	add.w	r3, r5, #14
 8007e80:	4631      	mov	r1, r6
 8007e82:	2208      	movs	r2, #8
 8007e84:	4618      	mov	r0, r3
 8007e86:	f000 fb1d 	bl	80084c4 <memmove>
 8007e8a:	2308      	movs	r3, #8
 8007e8c:	e9cd 8303 	strd	r8, r3, [sp, #12]
 8007e90:	230b      	movs	r3, #11
 8007e92:	9302      	str	r3, [sp, #8]
 8007e94:	4b08      	ldr	r3, [pc, #32]	; (8007eb8 <FirmwareVersion::FirmwareVersion(char const*, char const*, char const*)+0x64>)
 8007e96:	9005      	str	r0, [sp, #20]
 8007e98:	e9cd 5300 	strd	r5, r3, [sp]
 8007e9c:	4a07      	ldr	r2, [pc, #28]	; (8007ebc <FirmwareVersion::FirmwareVersion(char const*, char const*, char const*)+0x68>)
 8007e9e:	4808      	ldr	r0, [pc, #32]	; (8007ec0 <FirmwareVersion::FirmwareVersion(char const*, char const*, char const*)+0x6c>)
 8007ea0:	2303      	movs	r3, #3
 8007ea2:	213f      	movs	r1, #63	; 0x3f
 8007ea4:	f7f9 feee 	bl	8001c84 <snprintf>
 8007ea8:	4620      	mov	r0, r4
 8007eaa:	b006      	add	sp, #24
 8007eac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007eb0:	20001714 	andcs	r1, r0, r4, lsl r7
 8007eb4:	2000176c 	andcs	r1, r0, ip, ror #14
 8007eb8:	0800a3b8 	stmdaeq	r0, {r3, r4, r5, r7, r8, r9, sp, pc}
 8007ebc:	0800be9c 	stmdaeq	r0, {r2, r3, r4, r7, r9, sl, fp, ip, sp, pc}
 8007ec0:	2000172a 	andcs	r1, r0, sl, lsr #14

08007ec4 <hardware::ledblink::display(unsigned int)>:
 8007ec4:	4770      	bx	lr

08007ec6 <Hardware::SetMode(hardware::ledblink::Mode)>:
 8007ec6:	b508      	push	{r3, lr}
 8007ec8:	7d03      	ldrb	r3, [r0, #20]
 8007eca:	b9ab      	cbnz	r3, 8007ef8 <Hardware::SetMode(hardware::ledblink::Mode)+0x32>
 8007ecc:	6903      	ldr	r3, [r0, #16]
 8007ece:	428b      	cmp	r3, r1
 8007ed0:	d012      	beq.n	8007ef8 <Hardware::SetMode(hardware::ledblink::Mode)+0x32>
 8007ed2:	6101      	str	r1, [r0, #16]
 8007ed4:	2905      	cmp	r1, #5
 8007ed6:	d81b      	bhi.n	8007f10 <Hardware::SetMode(hardware::ledblink::Mode)+0x4a>
 8007ed8:	e8df f001 	tbb	[pc, r1]
 8007edc:	130f031a 	movwne	r0, #62234	; 0xf31a
 8007ee0:	23001816 	movwcs	r1, #2070	; 0x816
 8007ee4:	6183      	str	r3, [r0, #24]
 8007ee6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8007eea:	f503 3388 	add.w	r3, r3, #69632	; 0x11000
 8007eee:	2201      	movs	r2, #1
 8007ef0:	611a      	str	r2, [r3, #16]
 8007ef2:	4608      	mov	r0, r1
 8007ef4:	f7ff ffe6 	bl	8007ec4 <hardware::ledblink::display(unsigned int)>
 8007ef8:	bd08      	pop	{r3, pc}
 8007efa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8007efe:	6183      	str	r3, [r0, #24]
 8007f00:	e7f7      	b.n	8007ef2 <Hardware::SetMode(hardware::ledblink::Mode)+0x2c>
 8007f02:	f240 134d 	movw	r3, #333	; 0x14d
 8007f06:	e7fa      	b.n	8007efe <Hardware::SetMode(hardware::ledblink::Mode)+0x38>
 8007f08:	23c8      	movs	r3, #200	; 0xc8
 8007f0a:	e7f8      	b.n	8007efe <Hardware::SetMode(hardware::ledblink::Mode)+0x38>
 8007f0c:	237d      	movs	r3, #125	; 0x7d
 8007f0e:	e7f6      	b.n	8007efe <Hardware::SetMode(hardware::ledblink::Mode)+0x38>
 8007f10:	2300      	movs	r3, #0
 8007f12:	6183      	str	r3, [r0, #24]
 8007f14:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8007f18:	f503 3388 	add.w	r3, r3, #69632	; 0x11000
 8007f1c:	2201      	movs	r2, #1
 8007f1e:	615a      	str	r2, [r3, #20]
 8007f20:	e7e7      	b.n	8007ef2 <Hardware::SetMode(hardware::ledblink::Mode)+0x2c>

08007f22 <Hardware::SetModeWithLock(hardware::ledblink::Mode, bool)>:
 8007f22:	b538      	push	{r3, r4, r5, lr}
 8007f24:	4604      	mov	r4, r0
 8007f26:	2300      	movs	r3, #0
 8007f28:	4615      	mov	r5, r2
 8007f2a:	7503      	strb	r3, [r0, #20]
 8007f2c:	f7ff ffcb 	bl	8007ec6 <Hardware::SetMode(hardware::ledblink::Mode)>
 8007f30:	7525      	strb	r5, [r4, #20]
 8007f32:	bd38      	pop	{r3, r4, r5, pc}

08007f34 <Hardware::Hardware()>:
 8007f34:	b530      	push	{r4, r5, lr}
 8007f36:	4604      	mov	r4, r0
 8007f38:	b091      	sub	sp, #68	; 0x44
 8007f3a:	f000 f8e7 	bl	800810c <HwClock::HwClock()>
 8007f3e:	2306      	movs	r3, #6
 8007f40:	2500      	movs	r5, #0
 8007f42:	6123      	str	r3, [r4, #16]
 8007f44:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8007f48:	e9c4 3506 	strd	r3, r5, [r4, #24]
 8007f4c:	4b30      	ldr	r3, [pc, #192]	; (8008010 <Hardware::Hardware()+0xdc>)
 8007f4e:	7325      	strb	r5, [r4, #12]
 8007f50:	7525      	strb	r5, [r4, #20]
 8007f52:	6225      	str	r5, [r4, #32]
 8007f54:	601c      	str	r4, [r3, #0]
 8007f56:	f7f8 f8eb 	bl	8000130 <console_init>
 8007f5a:	f000 fc2f 	bl	80087bc <systick_config>
 8007f5e:	f001 fd71 	bl	8009a44 <udelay_init()>
 8007f62:	f001 fd6d 	bl	8009a40 <micros_init()>
 8007f66:	f240 701b 	movw	r0, #1819	; 0x71b
 8007f6a:	f000 fead 	bl	8008cc8 <rcu_periph_clock_enable>
 8007f6e:	f240 701c 	movw	r0, #1820	; 0x71c
 8007f72:	f000 fea9 	bl	8008cc8 <rcu_periph_clock_enable>
 8007f76:	f000 fe9f 	bl	8008cb8 <pmu_backup_write_enable>
 8007f7a:	4629      	mov	r1, r5
 8007f7c:	2002      	movs	r0, #2
 8007f7e:	f000 fcd1 	bl	8008924 <bkp_write_data>
 8007f82:	f240 7004 	movw	r0, #1796	; 0x704
 8007f86:	f000 fe9f 	bl	8008cc8 <rcu_periph_clock_enable>
 8007f8a:	4822      	ldr	r0, [pc, #136]	; (8008014 <Hardware::Hardware()+0xe0>)
 8007f8c:	f001 f82c 	bl	8008fe8 <timer_deinit>
 8007f90:	2377      	movs	r3, #119	; 0x77
 8007f92:	a903      	add	r1, sp, #12
 8007f94:	f8ad 300c 	strh.w	r3, [sp, #12]
 8007f98:	481e      	ldr	r0, [pc, #120]	; (8008014 <Hardware::Hardware()+0xe0>)
 8007f9a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007f9e:	9305      	str	r3, [sp, #20]
 8007fa0:	f001 f884 	bl	80090ac <timer_init>
 8007fa4:	481b      	ldr	r0, [pc, #108]	; (8008014 <Hardware::Hardware()+0xe0>)
 8007fa6:	f001 f8bf 	bl	8009128 <timer_enable>
 8007faa:	f001 f9cd 	bl	8009348 <gd32_adc_init()>
 8007fae:	2213      	movs	r2, #19
 8007fb0:	2302      	movs	r3, #2
 8007fb2:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8007fb6:	a807      	add	r0, sp, #28
 8007fb8:	237b      	movs	r3, #123	; 0x7b
 8007fba:	930c      	str	r3, [sp, #48]	; 0x30
 8007fbc:	e9cd 5508 	strd	r5, r5, [sp, #32]
 8007fc0:	9507      	str	r5, [sp, #28]
 8007fc2:	950f      	str	r5, [sp, #60]	; 0x3c
 8007fc4:	f000 fb20 	bl	8008608 <mktime>
 8007fc8:	4629      	mov	r1, r5
 8007fca:	e9cd 0501 	strd	r0, r5, [sp, #4]
 8007fce:	a801      	add	r0, sp, #4
 8007fd0:	f000 fb90 	bl	80086f4 <settimeofday>
 8007fd4:	f001 fa4a 	bl	800946c <gd32_i2c_begin>
 8007fd8:	4620      	mov	r0, r4
 8007fda:	f000 f98f 	bl	80082fc <HwClock::RtcProbe()>
 8007fde:	4620      	mov	r0, r4
 8007fe0:	f000 f8a0 	bl	8008124 <HwClock::Print()>
 8007fe4:	f105 4580 	add.w	r5, r5, #1073741824	; 0x40000000
 8007fe8:	4620      	mov	r0, r4
 8007fea:	f000 f8cf 	bl	800818c <HwClock::HcToSys()>
 8007fee:	f505 3588 	add.w	r5, r5, #69632	; 0x11000
 8007ff2:	f240 6004 	movw	r0, #1540	; 0x604
 8007ff6:	f000 fe67 	bl	8008cc8 <rcu_periph_clock_enable>
 8007ffa:	4628      	mov	r0, r5
 8007ffc:	2301      	movs	r3, #1
 8007ffe:	2203      	movs	r2, #3
 8008000:	2110      	movs	r1, #16
 8008002:	f000 fdc9 	bl	8008b98 <gpio_init>
 8008006:	2301      	movs	r3, #1
 8008008:	4620      	mov	r0, r4
 800800a:	616b      	str	r3, [r5, #20]
 800800c:	b011      	add	sp, #68	; 0x44
 800800e:	bd30      	pop	{r4, r5, pc}
 8008010:	20001770 	andcs	r1, r0, r0, ror r7
 8008014:	40001000 	andmi	r1, r0, r0

08008018 <Hardware::SetTime(tm const*)>:
 8008018:	b500      	push	{lr}
 800801a:	b08b      	sub	sp, #44	; 0x2c
 800801c:	680b      	ldr	r3, [r1, #0]
 800801e:	9301      	str	r3, [sp, #4]
 8008020:	684b      	ldr	r3, [r1, #4]
 8008022:	9302      	str	r3, [sp, #8]
 8008024:	688b      	ldr	r3, [r1, #8]
 8008026:	9303      	str	r3, [sp, #12]
 8008028:	68cb      	ldr	r3, [r1, #12]
 800802a:	9304      	str	r3, [sp, #16]
 800802c:	690b      	ldr	r3, [r1, #16]
 800802e:	9305      	str	r3, [sp, #20]
 8008030:	694b      	ldr	r3, [r1, #20]
 8008032:	9306      	str	r3, [sp, #24]
 8008034:	a901      	add	r1, sp, #4
 8008036:	f000 f909 	bl	800824c <HwClock::Set(rtc_time const*)>
 800803a:	2001      	movs	r0, #1
 800803c:	b00b      	add	sp, #44	; 0x2c
 800803e:	f85d fb04 	ldr.w	pc, [sp], #4

08008042 <Hardware::GetTime(tm*)>:
 8008042:	b513      	push	{r0, r1, r4, lr}
 8008044:	2000      	movs	r0, #0
 8008046:	460c      	mov	r4, r1
 8008048:	f000 fb6c 	bl	8008724 <time>
 800804c:	9001      	str	r0, [sp, #4]
 800804e:	a801      	add	r0, sp, #4
 8008050:	f000 fa96 	bl	8008580 <localtime>
 8008054:	6943      	ldr	r3, [r0, #20]
 8008056:	6163      	str	r3, [r4, #20]
 8008058:	6903      	ldr	r3, [r0, #16]
 800805a:	6123      	str	r3, [r4, #16]
 800805c:	68c3      	ldr	r3, [r0, #12]
 800805e:	60e3      	str	r3, [r4, #12]
 8008060:	6883      	ldr	r3, [r0, #8]
 8008062:	60a3      	str	r3, [r4, #8]
 8008064:	6843      	ldr	r3, [r0, #4]
 8008066:	6063      	str	r3, [r4, #4]
 8008068:	6803      	ldr	r3, [r0, #0]
 800806a:	6023      	str	r3, [r4, #0]
 800806c:	b002      	add	sp, #8
 800806e:	bd10      	pop	{r4, pc}

08008070 <Hardware::Reboot()>:
 8008070:	b508      	push	{r3, lr}
 8008072:	4604      	mov	r4, r0
 8008074:	4819      	ldr	r0, [pc, #100]	; (80080dc <Hardware::Reboot()+0x6c>)
 8008076:	f7f9 fdf5 	bl	8001c64 <printf>
 800807a:	2300      	movs	r3, #0
 800807c:	7323      	strb	r3, [r4, #12]
 800807e:	2104      	movs	r1, #4
 8008080:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8008084:	f000 fd5e 	bl	8008b44 <fwdgt_config>
 8008088:	4620      	mov	r0, r4
 800808a:	f7f8 fdd1 	bl	8000c30 <Hardware::RebootHandler()>
 800808e:	2102      	movs	r1, #2
 8008090:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8008094:	f000 fd56 	bl	8008b44 <fwdgt_config>
 8008098:	2801      	cmp	r0, #1
 800809a:	bf0c      	ite	eq
 800809c:	2301      	moveq	r3, #1
 800809e:	2300      	movne	r3, #0
 80080a0:	7323      	strb	r3, [r4, #12]
 80080a2:	d101      	bne.n	80080a8 <Hardware::Reboot()+0x38>
 80080a4:	f000 fd3e 	bl	8008b24 <fwdgt_enable>
 80080a8:	2105      	movs	r1, #5
 80080aa:	4620      	mov	r0, r4
 80080ac:	f7ff ff0b 	bl	8007ec6 <Hardware::SetMode(hardware::ledblink::Mode)>
 80080b0:	490b      	ldr	r1, [pc, #44]	; (80080e0 <Hardware::Reboot()+0x70>)
 80080b2:	4a0c      	ldr	r2, [pc, #48]	; (80080e4 <Hardware::Reboot()+0x74>)
 80080b4:	2501      	movs	r5, #1
 80080b6:	69a0      	ldr	r0, [r4, #24]
 80080b8:	b900      	cbnz	r0, 80080bc <Hardware::Reboot()+0x4c>
 80080ba:	e7fe      	b.n	80080ba <Hardware::Reboot()+0x4a>
 80080bc:	680b      	ldr	r3, [r1, #0]
 80080be:	6a26      	ldr	r6, [r4, #32]
 80080c0:	1b9b      	subs	r3, r3, r6
 80080c2:	4298      	cmp	r0, r3
 80080c4:	d8f8      	bhi.n	80080b8 <Hardware::Reboot()+0x48>
 80080c6:	680b      	ldr	r3, [r1, #0]
 80080c8:	6223      	str	r3, [r4, #32]
 80080ca:	69e3      	ldr	r3, [r4, #28]
 80080cc:	2b01      	cmp	r3, #1
 80080ce:	f083 0001 	eor.w	r0, r3, #1
 80080d2:	61e0      	str	r0, [r4, #28]
 80080d4:	bf14      	ite	ne
 80080d6:	6115      	strne	r5, [r2, #16]
 80080d8:	6153      	streq	r3, [r2, #20]
 80080da:	e7ec      	b.n	80080b6 <Hardware::Reboot()+0x46>
 80080dc:	0800bec0 	stmdaeq	r0, {r6, r7, r9, sl, fp, ip, sp, pc}
 80080e0:	200017ac 	andcs	r1, r0, ip, lsr #15
 80080e4:	40011000 	andmi	r1, r1, r0

080080e8 <Hardware::WatchdogInit()>:
 80080e8:	b510      	push	{r4, lr}
 80080ea:	2102      	movs	r1, #2
 80080ec:	4604      	mov	r4, r0
 80080ee:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80080f2:	f000 fd27 	bl	8008b44 <fwdgt_config>
 80080f6:	2801      	cmp	r0, #1
 80080f8:	bf0c      	ite	eq
 80080fa:	2301      	moveq	r3, #1
 80080fc:	2300      	movne	r3, #0
 80080fe:	7323      	strb	r3, [r4, #12]
 8008100:	d103      	bne.n	800810a <Hardware::WatchdogInit()+0x22>
 8008102:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008106:	f000 bd0d 	b.w	8008b24 <fwdgt_enable>
 800810a:	bd10      	pop	{r4, pc}

0800810c <HwClock::HwClock()>:
 800810c:	2200      	movs	r2, #0
 800810e:	e9c0 2200 	strd	r2, r2, [r0]
 8008112:	7282      	strb	r2, [r0, #10]
 8008114:	4a02      	ldr	r2, [pc, #8]	; (8008120 <HwClock::HwClock()+0x14>)
 8008116:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800811a:	8101      	strh	r1, [r0, #8]
 800811c:	6010      	str	r0, [r2, #0]
 800811e:	4770      	bx	lr
 8008120:	20001774 	andcs	r1, r0, r4, ror r7

08008124 <HwClock::Print()>:
 8008124:	b510      	push	{r4, lr}
 8008126:	7a83      	ldrb	r3, [r0, #10]
 8008128:	b08e      	sub	sp, #56	; 0x38
 800812a:	4604      	mov	r4, r0
 800812c:	b92b      	cbnz	r3, 800813a <HwClock::Print()+0x16>
 800812e:	4812      	ldr	r0, [pc, #72]	; (8008178 <HwClock::Print()+0x54>)
 8008130:	b00e      	add	sp, #56	; 0x38
 8008132:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008136:	f7f9 bdcd 	b.w	8001cd4 <puts>
 800813a:	7a43      	ldrb	r3, [r0, #9]
 800813c:	480f      	ldr	r0, [pc, #60]	; (800817c <HwClock::Print()+0x58>)
 800813e:	2b03      	cmp	r3, #3
 8008140:	bf96      	itet	ls
 8008142:	4a0f      	ldrls	r2, [pc, #60]	; (8008180 <HwClock::Print()+0x5c>)
 8008144:	490f      	ldrhi	r1, [pc, #60]	; (8008184 <HwClock::Print()+0x60>)
 8008146:	f852 1023 	ldrls.w	r1, [r2, r3, lsl #2]
 800814a:	f7f9 fd8b 	bl	8001c64 <printf>
 800814e:	a905      	add	r1, sp, #20
 8008150:	4620      	mov	r0, r4
 8008152:	f000 f905 	bl	8008360 <HwClock::RtcGet(rtc_time*)>
 8008156:	9b05      	ldr	r3, [sp, #20]
 8008158:	9302      	str	r3, [sp, #8]
 800815a:	9b06      	ldr	r3, [sp, #24]
 800815c:	9301      	str	r3, [sp, #4]
 800815e:	9b07      	ldr	r3, [sp, #28]
 8008160:	9300      	str	r3, [sp, #0]
 8008162:	e9dd 3208 	ldrd	r3, r2, [sp, #32]
 8008166:	990a      	ldr	r1, [sp, #40]	; 0x28
 8008168:	4807      	ldr	r0, [pc, #28]	; (8008188 <HwClock::Print()+0x64>)
 800816a:	3201      	adds	r2, #1
 800816c:	f201 716c 	addw	r1, r1, #1900	; 0x76c
 8008170:	f7f9 fd78 	bl	8001c64 <printf>
 8008174:	b00e      	add	sp, #56	; 0x38
 8008176:	bd10      	pop	{r4, pc}
 8008178:	0800becf 	stmdaeq	r0, {r0, r1, r2, r3, r6, r7, r9, sl, fp, ip, sp, pc}
 800817c:	0800afc0 	stmdaeq	r0, {r6, r7, r8, r9, sl, fp, sp, pc}
 8008180:	0800bf24 	stmdaeq	r0, {r2, r5, r8, r9, sl, fp, ip, sp, pc}
 8008184:	0800b7e8 	stmdaeq	r0, {r3, r5, r6, r7, r8, r9, sl, ip, sp, pc}
 8008188:	0800bee0 	stmdaeq	r0, {r5, r6, r7, r9, sl, fp, ip, sp, pc}

0800818c <HwClock::HcToSys()>:
 800818c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008190:	7a83      	ldrb	r3, [r0, #10]
 8008192:	b0a3      	sub	sp, #140	; 0x8c
 8008194:	4604      	mov	r4, r0
 8008196:	2b00      	cmp	r3, #0
 8008198:	d04c      	beq.n	8008234 <HwClock::HcToSys()+0xa8>
 800819a:	4f2a      	ldr	r7, [pc, #168]	; (8008244 <HwClock::HcToSys()+0xb8>)
 800819c:	683b      	ldr	r3, [r7, #0]
 800819e:	7b1e      	ldrb	r6, [r3, #12]
 80081a0:	b136      	cbz	r6, 80081b0 <HwClock::HcToSys()+0x24>
 80081a2:	2200      	movs	r2, #0
 80081a4:	731a      	strb	r2, [r3, #12]
 80081a6:	2104      	movs	r1, #4
 80081a8:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80081ac:	f000 fcca 	bl	8008b44 <fwdgt_config>
 80081b0:	a907      	add	r1, sp, #28
 80081b2:	4620      	mov	r0, r4
 80081b4:	f000 f8d4 	bl	8008360 <HwClock::RtcGet(rtc_time*)>
 80081b8:	2100      	movs	r1, #0
 80081ba:	a801      	add	r0, sp, #4
 80081bc:	f000 fa70 	bl	80086a0 <gettimeofday>
 80081c0:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 80081c4:	f04f 083c 	mov.w	r8, #60	; 0x3c
 80081c8:	e9cd 2319 	strd	r2, r3, [sp, #100]	; 0x64
 80081cc:	fb08 2903 	mla	r9, r8, r3, r2
 80081d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80081d2:	931b      	str	r3, [sp, #108]	; 0x6c
 80081d4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80081d6:	931c      	str	r3, [sp, #112]	; 0x70
 80081d8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80081da:	931d      	str	r3, [sp, #116]	; 0x74
 80081dc:	a819      	add	r0, sp, #100	; 0x64
 80081de:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80081e0:	931e      	str	r3, [sp, #120]	; 0x78
 80081e2:	f000 fa11 	bl	8008608 <mktime>
 80081e6:	4605      	mov	r5, r0
 80081e8:	a910      	add	r1, sp, #64	; 0x40
 80081ea:	4620      	mov	r0, r4
 80081ec:	f000 f8b8 	bl	8008360 <HwClock::RtcGet(rtc_time*)>
 80081f0:	e9dd 3210 	ldrd	r3, r2, [sp, #64]	; 0x40
 80081f4:	fb08 3302 	mla	r3, r8, r2, r3
 80081f8:	4599      	cmp	r9, r3
 80081fa:	d0f5      	beq.n	80081e8 <HwClock::HcToSys()+0x5c>
 80081fc:	2100      	movs	r1, #0
 80081fe:	a803      	add	r0, sp, #12
 8008200:	f000 fa4e 	bl	80086a0 <gettimeofday>
 8008204:	9b01      	ldr	r3, [sp, #4]
 8008206:	9a03      	ldr	r2, [sp, #12]
 8008208:	9902      	ldr	r1, [sp, #8]
 800820a:	9505      	str	r5, [sp, #20]
 800820c:	429a      	cmp	r2, r3
 800820e:	9b04      	ldr	r3, [sp, #16]
 8008210:	d113      	bne.n	800823a <HwClock::HcToSys()+0xae>
 8008212:	1a5b      	subs	r3, r3, r1
 8008214:	f5c3 2274 	rsb	r2, r3, #999424	; 0xf4000
 8008218:	f502 7210 	add.w	r2, r2, #576	; 0x240
 800821c:	2100      	movs	r1, #0
 800821e:	a805      	add	r0, sp, #20
 8008220:	9206      	str	r2, [sp, #24]
 8008222:	f000 fa67 	bl	80086f4 <settimeofday>
 8008226:	4b08      	ldr	r3, [pc, #32]	; (8008248 <HwClock::HcToSys()+0xbc>)
 8008228:	6838      	ldr	r0, [r7, #0]
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	6063      	str	r3, [r4, #4]
 800822e:	b10e      	cbz	r6, 8008234 <HwClock::HcToSys()+0xa8>
 8008230:	f7ff ff5a 	bl	80080e8 <Hardware::WatchdogInit()>
 8008234:	b023      	add	sp, #140	; 0x8c
 8008236:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800823a:	1a5a      	subs	r2, r3, r1
 800823c:	bf48      	it	mi
 800823e:	1aca      	submi	r2, r1, r3
 8008240:	e7ec      	b.n	800821c <HwClock::HcToSys()+0x90>
 8008242:	bf00      	nop
 8008244:	20001770 	andcs	r1, r0, r0, ror r7
 8008248:	200017ac 	andcs	r1, r0, ip, lsr #15

0800824c <HwClock::Set(rtc_time const*)>:
 800824c:	b570      	push	{r4, r5, r6, lr}
 800824e:	7a86      	ldrb	r6, [r0, #10]
 8008250:	b090      	sub	sp, #64	; 0x40
 8008252:	4605      	mov	r5, r0
 8008254:	460c      	mov	r4, r1
 8008256:	2e00      	cmp	r6, #0
 8008258:	d02b      	beq.n	80082b2 <HwClock::Set(rtc_time const*)+0x66>
 800825a:	2100      	movs	r1, #0
 800825c:	a801      	add	r0, sp, #4
 800825e:	f000 fa1f 	bl	80086a0 <gettimeofday>
 8008262:	4621      	mov	r1, r4
 8008264:	4628      	mov	r0, r5
 8008266:	f000 f873 	bl	8008350 <HwClock::RtcSet(rtc_time const*)>
 800826a:	6823      	ldr	r3, [r4, #0]
 800826c:	9307      	str	r3, [sp, #28]
 800826e:	6863      	ldr	r3, [r4, #4]
 8008270:	9308      	str	r3, [sp, #32]
 8008272:	68a3      	ldr	r3, [r4, #8]
 8008274:	9309      	str	r3, [sp, #36]	; 0x24
 8008276:	68e3      	ldr	r3, [r4, #12]
 8008278:	930a      	str	r3, [sp, #40]	; 0x28
 800827a:	6923      	ldr	r3, [r4, #16]
 800827c:	930b      	str	r3, [sp, #44]	; 0x2c
 800827e:	a807      	add	r0, sp, #28
 8008280:	6963      	ldr	r3, [r4, #20]
 8008282:	930c      	str	r3, [sp, #48]	; 0x30
 8008284:	2400      	movs	r4, #0
 8008286:	940f      	str	r4, [sp, #60]	; 0x3c
 8008288:	f000 f9be 	bl	8008608 <mktime>
 800828c:	4621      	mov	r1, r4
 800828e:	9003      	str	r0, [sp, #12]
 8008290:	a805      	add	r0, sp, #20
 8008292:	f000 fa05 	bl	80086a0 <gettimeofday>
 8008296:	9906      	ldr	r1, [sp, #24]
 8008298:	9b02      	ldr	r3, [sp, #8]
 800829a:	1aca      	subs	r2, r1, r3
 800829c:	bf42      	ittt	mi
 800829e:	1a5b      	submi	r3, r3, r1
 80082a0:	f5c3 2274 	rsbmi	r2, r3, #999424	; 0xf4000
 80082a4:	f502 7210 	addmi.w	r2, r2, #576	; 0x240
 80082a8:	2100      	movs	r1, #0
 80082aa:	a803      	add	r0, sp, #12
 80082ac:	9204      	str	r2, [sp, #16]
 80082ae:	f000 fa21 	bl	80086f4 <settimeofday>
 80082b2:	4630      	mov	r0, r6
 80082b4:	b010      	add	sp, #64	; 0x40
 80082b6:	bd70      	pop	{r4, r5, r6, pc}

080082b8 <rtc_configuration()>:
 80082b8:	b510      	push	{r4, lr}
 80082ba:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80082be:	f000 fdc5 	bl	8008e4c <rcu_osci_on>
 80082c2:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80082c6:	f000 fd67 	bl	8008d98 <rcu_osci_stab_wait>
 80082ca:	2801      	cmp	r0, #1
 80082cc:	4604      	mov	r4, r0
 80082ce:	d113      	bne.n	80082f8 <rtc_configuration()+0x40>
 80082d0:	f44f 7080 	mov.w	r0, #256	; 0x100
 80082d4:	f000 fd46 	bl	8008d64 <rcu_rtc_clock_config>
 80082d8:	f640 000f 	movw	r0, #2063	; 0x80f
 80082dc:	f000 fcf4 	bl	8008cc8 <rcu_periph_clock_enable>
 80082e0:	f000 fe48 	bl	8008f74 <rtc_register_sync_wait>
 80082e4:	f000 fe3e 	bl	8008f64 <rtc_lwoff_wait>
 80082e8:	f647 70ff 	movw	r0, #32767	; 0x7fff
 80082ec:	f000 fe6a 	bl	8008fc4 <rtc_prescaler_set>
 80082f0:	f000 fe38 	bl	8008f64 <rtc_lwoff_wait>
 80082f4:	4620      	mov	r0, r4
 80082f6:	bd10      	pop	{r4, pc}
 80082f8:	2000      	movs	r0, #0
 80082fa:	e7fc      	b.n	80082f6 <rtc_configuration()+0x3e>

080082fc <HwClock::RtcProbe()>:
 80082fc:	b538      	push	{r3, r4, r5, lr}
 80082fe:	4604      	mov	r4, r0
 8008300:	2001      	movs	r0, #1
 8008302:	f000 fb25 	bl	8008950 <bkp_read_data>
 8008306:	f24a 55a5 	movw	r5, #42405	; 0xa5a5
 800830a:	42a8      	cmp	r0, r5
 800830c:	d019      	beq.n	8008342 <HwClock::RtcProbe()+0x46>
 800830e:	f7ff ffd3 	bl	80082b8 <rtc_configuration()>
 8008312:	b908      	cbnz	r0, 8008318 <HwClock::RtcProbe()+0x1c>
 8008314:	72a0      	strb	r0, [r4, #10]
 8008316:	bd38      	pop	{r3, r4, r5, pc}
 8008318:	f000 fe24 	bl	8008f64 <rtc_lwoff_wait>
 800831c:	2000      	movs	r0, #0
 800831e:	f000 fa01 	bl	8008724 <time>
 8008322:	f000 fe3f 	bl	8008fa4 <rtc_counter_set>
 8008326:	f000 fe1d 	bl	8008f64 <rtc_lwoff_wait>
 800832a:	4629      	mov	r1, r5
 800832c:	2001      	movs	r0, #1
 800832e:	f000 faf9 	bl	8008924 <bkp_write_data>
 8008332:	2303      	movs	r3, #3
 8008334:	7263      	strb	r3, [r4, #9]
 8008336:	2301      	movs	r3, #1
 8008338:	72a3      	strb	r3, [r4, #10]
 800833a:	4b04      	ldr	r3, [pc, #16]	; (800834c <HwClock::RtcProbe()+0x50>)
 800833c:	681b      	ldr	r3, [r3, #0]
 800833e:	6063      	str	r3, [r4, #4]
 8008340:	e7e9      	b.n	8008316 <HwClock::RtcProbe()+0x1a>
 8008342:	f000 fe17 	bl	8008f74 <rtc_register_sync_wait>
 8008346:	f000 fe0d 	bl	8008f64 <rtc_lwoff_wait>
 800834a:	e7f2      	b.n	8008332 <HwClock::RtcProbe()+0x36>
 800834c:	200017ac 	andcs	r1, r0, ip, lsr #15

08008350 <HwClock::RtcSet(rtc_time const*)>:
 8008350:	b508      	push	{r3, lr}
 8008352:	4608      	mov	r0, r1
 8008354:	f000 f958 	bl	8008608 <mktime>
 8008358:	f000 fe24 	bl	8008fa4 <rtc_counter_set>
 800835c:	2001      	movs	r0, #1
 800835e:	bd08      	pop	{r3, pc}

08008360 <HwClock::RtcGet(rtc_time*)>:
 8008360:	b513      	push	{r0, r1, r4, lr}
 8008362:	460c      	mov	r4, r1
 8008364:	f000 fe14 	bl	8008f90 <rtc_counter_get>
 8008368:	9001      	str	r0, [sp, #4]
 800836a:	a801      	add	r0, sp, #4
 800836c:	f000 f908 	bl	8008580 <localtime>
 8008370:	1e61      	subs	r1, r4, #1
 8008372:	f100 0324 	add.w	r3, r0, #36	; 0x24
 8008376:	4298      	cmp	r0, r3
 8008378:	d102      	bne.n	8008380 <HwClock::RtcGet(rtc_time*)+0x20>
 800837a:	2001      	movs	r0, #1
 800837c:	b002      	add	sp, #8
 800837e:	bd10      	pop	{r4, pc}
 8008380:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008384:	f801 2f01 	strb.w	r2, [r1, #1]!
 8008388:	e7f5      	b.n	8008376 <HwClock::RtcGet(rtc_time*)+0x16>

0800838a <operator delete(void*)>:
 800838a:	f000 b881 	b.w	8008490 <free>

0800838e <operator delete[](void*)>:
 800838e:	f000 b87f 	b.w	8008490 <free>

08008392 <operator new(unsigned int)>:
 8008392:	f000 b84f 	b.w	8008434 <malloc>

08008396 <operator new[](unsigned int)>:
 8008396:	f000 b84d 	b.w	8008434 <malloc>
	...

0800839c <log2f>:
 800839c:	eeb5 0a40 	vcmp.f32	s0, #0.0
 80083a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80083a4:	d027      	beq.n	80083f6 <log2f+0x5a>
 80083a6:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80083aa:	eeb4 0a67 	vcmp.f32	s0, s15
 80083ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80083b2:	d023      	beq.n	80083fc <log2f+0x60>
 80083b4:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80083b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80083bc:	d421      	bmi.n	8008402 <log2f+0x66>
 80083be:	ee10 3a10 	vmov	r3, s0
 80083c2:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 80083c6:	3a80      	subs	r2, #128	; 0x80
 80083c8:	ee07 2a90 	vmov	s15, r2
 80083cc:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80083d0:	f103 537e 	add.w	r3, r3, #1065353216	; 0x3f800000
 80083d4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80083d8:	ed9f 6a0b 	vldr	s12, [pc, #44]	; 8008408 <log2f+0x6c>
 80083dc:	eddf 6a0b 	vldr	s13, [pc, #44]	; 800840c <log2f+0x70>
 80083e0:	ed9f 0a0b 	vldr	s0, [pc, #44]	; 8008410 <log2f+0x74>
 80083e4:	ee07 3a90 	vmov	s15, r3
 80083e8:	eee7 6a86 	vfma.f32	s13, s15, s12
 80083ec:	eea7 0aa6 	vfma.f32	s0, s15, s13
 80083f0:	ee30 0a07 	vadd.f32	s0, s0, s14
 80083f4:	4770      	bx	lr
 80083f6:	ed9f 0a07 	vldr	s0, [pc, #28]	; 8008414 <log2f+0x78>
 80083fa:	4770      	bx	lr
 80083fc:	ed9f 0a06 	vldr	s0, [pc, #24]	; 8008418 <log2f+0x7c>
 8008400:	4770      	bx	lr
 8008402:	ed9f 0a06 	vldr	s0, [pc, #24]	; 800841c <log2f+0x80>
 8008406:	4770      	bx	lr
 8008408:	beb08ff9 	mrclt	15, 5, r8, cr0, cr9, {7}
 800840c:	40019420 	andmi	r9, r1, r0, lsr #8
 8008410:	bf2cc4c7 	svclt	0x002cc4c7
 8008414:	ff800000 			; <UNDEFINED> instruction: 0xff800000
 8008418:	00000000 	andeq	r0, r0, r0
 800841c:	7f800001 	svcvc	0x00800001

08008420 <logf>:
 8008420:	b508      	push	{r3, lr}
 8008422:	f7ff ffbb 	bl	800839c <log2f>
 8008426:	eddf 7a02 	vldr	s15, [pc, #8]	; 8008430 <logf+0x10>
 800842a:	ee20 0a27 	vmul.f32	s0, s0, s15
 800842e:	bd08      	pop	{r3, pc}
 8008430:	3f317218 	svccc	0x00317218

08008434 <malloc>:
 8008434:	b510      	push	{r4, lr}
 8008436:	b1d8      	cbz	r0, 8008470 <malloc+0x3c>
 8008438:	4a11      	ldr	r2, [pc, #68]	; (8008480 <malloc+0x4c>)
 800843a:	6811      	ldr	r1, [r2, #0]
 800843c:	b971      	cbnz	r1, 800845c <malloc+0x28>
 800843e:	4911      	ldr	r1, [pc, #68]	; (8008484 <malloc+0x50>)
 8008440:	4c11      	ldr	r4, [pc, #68]	; (8008488 <malloc+0x54>)
 8008442:	680b      	ldr	r3, [r1, #0]
 8008444:	f100 021b 	add.w	r2, r0, #27
 8008448:	f022 020f 	bic.w	r2, r2, #15
 800844c:	441a      	add	r2, r3
 800844e:	42a2      	cmp	r2, r4
 8008450:	d80f      	bhi.n	8008472 <malloc+0x3e>
 8008452:	600a      	str	r2, [r1, #0]
 8008454:	4a0d      	ldr	r2, [pc, #52]	; (800848c <malloc+0x58>)
 8008456:	e9c3 2000 	strd	r2, r0, [r3]
 800845a:	e005      	b.n	8008468 <malloc+0x34>
 800845c:	4288      	cmp	r0, r1
 800845e:	d90a      	bls.n	8008476 <malloc+0x42>
 8008460:	3208      	adds	r2, #8
 8008462:	e7ea      	b.n	800843a <malloc+0x6>
 8008464:	6899      	ldr	r1, [r3, #8]
 8008466:	6051      	str	r1, [r2, #4]
 8008468:	2200      	movs	r2, #0
 800846a:	609a      	str	r2, [r3, #8]
 800846c:	f103 000c 	add.w	r0, r3, #12
 8008470:	bd10      	pop	{r4, pc}
 8008472:	2000      	movs	r0, #0
 8008474:	e7fc      	b.n	8008470 <malloc+0x3c>
 8008476:	6853      	ldr	r3, [r2, #4]
 8008478:	2b00      	cmp	r3, #0
 800847a:	d1f3      	bne.n	8008464 <malloc+0x30>
 800847c:	4608      	mov	r0, r1
 800847e:	e7de      	b.n	800843e <malloc+0xa>
 8008480:	20000010 	andcs	r0, r0, r0, lsl r0
 8008484:	2000000c 	andcs	r0, r0, ip
 8008488:	2000b000 	andcs	fp, r0, r0
 800848c:	424c4d43 	submi	r4, ip, #4288	; 0x10c0

08008490 <free>:
 8008490:	b138      	cbz	r0, 80084a2 <free+0x12>
 8008492:	f850 2c0c 	ldr.w	r2, [r0, #-12]
 8008496:	4b09      	ldr	r3, [pc, #36]	; (80084bc <free+0x2c>)
 8008498:	429a      	cmp	r2, r3
 800849a:	d102      	bne.n	80084a2 <free+0x12>
 800849c:	4b08      	ldr	r3, [pc, #32]	; (80084c0 <free+0x30>)
 800849e:	681a      	ldr	r2, [r3, #0]
 80084a0:	b902      	cbnz	r2, 80084a4 <free+0x14>
 80084a2:	4770      	bx	lr
 80084a4:	f850 1c08 	ldr.w	r1, [r0, #-8]
 80084a8:	4291      	cmp	r1, r2
 80084aa:	d105      	bne.n	80084b8 <free+0x28>
 80084ac:	685a      	ldr	r2, [r3, #4]
 80084ae:	f840 2c04 	str.w	r2, [r0, #-4]
 80084b2:	380c      	subs	r0, #12
 80084b4:	6058      	str	r0, [r3, #4]
 80084b6:	4770      	bx	lr
 80084b8:	3308      	adds	r3, #8
 80084ba:	e7f0      	b.n	800849e <free+0xe>
 80084bc:	424c4d43 	submi	r4, ip, #4288	; 0x10c0
 80084c0:	20000010 	andcs	r0, r0, r0, lsl r0

080084c4 <memmove>:
 80084c4:	4288      	cmp	r0, r1
 80084c6:	b510      	push	{r4, lr}
 80084c8:	eb01 0302 	add.w	r3, r1, r2
 80084cc:	d208      	bcs.n	80084e0 <memmove+0x1c>
 80084ce:	1e42      	subs	r2, r0, #1
 80084d0:	4299      	cmp	r1, r3
 80084d2:	d100      	bne.n	80084d6 <memmove+0x12>
 80084d4:	bd10      	pop	{r4, pc}
 80084d6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80084da:	f802 4f01 	strb.w	r4, [r2, #1]!
 80084de:	e7f7      	b.n	80084d0 <memmove+0xc>
 80084e0:	4402      	add	r2, r0
 80084e2:	4601      	mov	r1, r0
 80084e4:	428a      	cmp	r2, r1
 80084e6:	d0f5      	beq.n	80084d4 <memmove+0x10>
 80084e8:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80084ec:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80084f0:	e7f8      	b.n	80084e4 <memmove+0x20>

080084f2 <memset>:
 80084f2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80084f4:	b1c2      	cbz	r2, 8008528 <memset+0x36>
 80084f6:	b2c9      	uxtb	r1, r1
 80084f8:	4603      	mov	r3, r0
 80084fa:	075c      	lsls	r4, r3, #29
 80084fc:	d110      	bne.n	8008520 <memset+0x2e>
 80084fe:	ea41 2401 	orr.w	r4, r1, r1, lsl #8
 8008502:	ea44 4704 	orr.w	r7, r4, r4, lsl #16
 8008506:	f022 0407 	bic.w	r4, r2, #7
 800850a:	463d      	mov	r5, r7
 800850c:	441c      	add	r4, r3
 800850e:	461e      	mov	r6, r3
 8008510:	42a6      	cmp	r6, r4
 8008512:	d10a      	bne.n	800852a <memset+0x38>
 8008514:	441a      	add	r2, r3
 8008516:	4294      	cmp	r4, r2
 8008518:	d006      	beq.n	8008528 <memset+0x36>
 800851a:	f804 1b01 	strb.w	r1, [r4], #1
 800851e:	e7fa      	b.n	8008516 <memset+0x24>
 8008520:	3a01      	subs	r2, #1
 8008522:	f803 1b01 	strb.w	r1, [r3], #1
 8008526:	d1e8      	bne.n	80084fa <memset+0x8>
 8008528:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800852a:	f846 7b08 	str.w	r7, [r6], #8
 800852e:	f846 5c04 	str.w	r5, [r6, #-4]
 8008532:	e7ed      	b.n	8008510 <memset+0x1e>

08008534 <isleapyear>:
 8008534:	2264      	movs	r2, #100	; 0x64
 8008536:	fb90 f3f2 	sdiv	r3, r0, r2
 800853a:	fb02 0313 	mls	r3, r2, r3, r0
 800853e:	b94b      	cbnz	r3, 8008554 <isleapyear+0x20>
 8008540:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8008544:	fb90 f2f3 	sdiv	r2, r0, r3
 8008548:	fb03 0012 	mls	r0, r3, r2, r0
 800854c:	fab0 f080 	clz	r0, r0
 8008550:	0940      	lsrs	r0, r0, #5
 8008552:	4770      	bx	lr
 8008554:	f010 0f03 	tst.w	r0, #3
 8008558:	bf0c      	ite	eq
 800855a:	2001      	moveq	r0, #1
 800855c:	2000      	movne	r0, #0
 800855e:	4770      	bx	lr

08008560 <getdaysofmonth>:
 8008560:	b510      	push	{r4, lr}
 8008562:	4604      	mov	r4, r0
 8008564:	2c01      	cmp	r4, #1
 8008566:	4608      	mov	r0, r1
 8008568:	d102      	bne.n	8008570 <getdaysofmonth+0x10>
 800856a:	f7ff ffe3 	bl	8008534 <isleapyear>
 800856e:	b918      	cbnz	r0, 8008578 <getdaysofmonth+0x18>
 8008570:	4b02      	ldr	r3, [pc, #8]	; (800857c <getdaysofmonth+0x1c>)
 8008572:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8008576:	bd10      	pop	{r4, pc}
 8008578:	201d      	movs	r0, #29
 800857a:	e7fc      	b.n	8008576 <getdaysofmonth+0x16>
 800857c:	0800bf34 	stmdaeq	r0, {r2, r4, r5, r8, r9, sl, fp, ip, sp, pc}

08008580 <localtime>:
 8008580:	b570      	push	{r4, r5, r6, lr}
 8008582:	2800      	cmp	r0, #0
 8008584:	d03c      	beq.n	8008600 <localtime+0x80>
 8008586:	6803      	ldr	r3, [r0, #0]
 8008588:	4d1e      	ldr	r5, [pc, #120]	; (8008604 <localtime+0x84>)
 800858a:	213c      	movs	r1, #60	; 0x3c
 800858c:	fb93 f2f1 	sdiv	r2, r3, r1
 8008590:	fb01 3312 	mls	r3, r1, r2, r3
 8008594:	602b      	str	r3, [r5, #0]
 8008596:	fb92 f3f1 	sdiv	r3, r2, r1
 800859a:	fb01 2213 	mls	r2, r1, r3, r2
 800859e:	606a      	str	r2, [r5, #4]
 80085a0:	2218      	movs	r2, #24
 80085a2:	fb93 f4f2 	sdiv	r4, r3, r2
 80085a6:	fb02 3314 	mls	r3, r2, r4, r3
 80085aa:	60ab      	str	r3, [r5, #8]
 80085ac:	1d22      	adds	r2, r4, #4
 80085ae:	2307      	movs	r3, #7
 80085b0:	fb92 f3f3 	sdiv	r3, r2, r3
 80085b4:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80085b8:	1ad2      	subs	r2, r2, r3
 80085ba:	61aa      	str	r2, [r5, #24]
 80085bc:	f240 71b2 	movw	r1, #1970	; 0x7b2
 80085c0:	f240 166d 	movw	r6, #365	; 0x16d
 80085c4:	4608      	mov	r0, r1
 80085c6:	f7ff ffb5 	bl	8008534 <isleapyear>
 80085ca:	2800      	cmp	r0, #0
 80085cc:	bf14      	ite	ne
 80085ce:	f44f 73b7 	movne.w	r3, #366	; 0x16e
 80085d2:	4633      	moveq	r3, r6
 80085d4:	429c      	cmp	r4, r3
 80085d6:	db02      	blt.n	80085de <localtime+0x5e>
 80085d8:	1ae4      	subs	r4, r4, r3
 80085da:	3101      	adds	r1, #1
 80085dc:	e7f2      	b.n	80085c4 <localtime+0x44>
 80085de:	f2a1 736c 	subw	r3, r1, #1900	; 0x76c
 80085e2:	616b      	str	r3, [r5, #20]
 80085e4:	61ec      	str	r4, [r5, #28]
 80085e6:	2600      	movs	r6, #0
 80085e8:	4630      	mov	r0, r6
 80085ea:	f7ff ffb9 	bl	8008560 <getdaysofmonth>
 80085ee:	4284      	cmp	r4, r0
 80085f0:	db02      	blt.n	80085f8 <localtime+0x78>
 80085f2:	1a24      	subs	r4, r4, r0
 80085f4:	3601      	adds	r6, #1
 80085f6:	e7f7      	b.n	80085e8 <localtime+0x68>
 80085f8:	3401      	adds	r4, #1
 80085fa:	4802      	ldr	r0, [pc, #8]	; (8008604 <localtime+0x84>)
 80085fc:	612e      	str	r6, [r5, #16]
 80085fe:	60ec      	str	r4, [r5, #12]
 8008600:	bd70      	pop	{r4, r5, r6, pc}
 8008602:	bf00      	nop
 8008604:	20001778 	andcs	r1, r0, r8, ror r7

08008608 <mktime>:
 8008608:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800860c:	4604      	mov	r4, r0
 800860e:	2800      	cmp	r0, #0
 8008610:	d043      	beq.n	800869a <mktime+0x92>
 8008612:	6941      	ldr	r1, [r0, #20]
 8008614:	f1a1 0346 	sub.w	r3, r1, #70	; 0x46
 8008618:	2b45      	cmp	r3, #69	; 0x45
 800861a:	d83e      	bhi.n	800869a <mktime+0x92>
 800861c:	2600      	movs	r6, #0
 800861e:	f240 75b2 	movw	r5, #1970	; 0x7b2
 8008622:	f201 776b 	addw	r7, r1, #1899	; 0x76b
 8008626:	f240 186d 	movw	r8, #365	; 0x16d
 800862a:	42af      	cmp	r7, r5
 800862c:	da24      	bge.n	8008678 <mktime+0x70>
 800862e:	6927      	ldr	r7, [r4, #16]
 8008630:	2f0b      	cmp	r7, #11
 8008632:	d832      	bhi.n	800869a <mktime+0x92>
 8008634:	2500      	movs	r5, #0
 8008636:	42af      	cmp	r7, r5
 8008638:	d129      	bne.n	800868e <mktime+0x86>
 800863a:	68e5      	ldr	r5, [r4, #12]
 800863c:	2d00      	cmp	r5, #0
 800863e:	dd2c      	ble.n	800869a <mktime+0x92>
 8008640:	4638      	mov	r0, r7
 8008642:	f7ff ff8d 	bl	8008560 <getdaysofmonth>
 8008646:	4285      	cmp	r5, r0
 8008648:	dc27      	bgt.n	800869a <mktime+0x92>
 800864a:	3d01      	subs	r5, #1
 800864c:	2318      	movs	r3, #24
 800864e:	4435      	add	r5, r6
 8008650:	435d      	muls	r5, r3
 8008652:	68a3      	ldr	r3, [r4, #8]
 8008654:	2b17      	cmp	r3, #23
 8008656:	d820      	bhi.n	800869a <mktime+0x92>
 8008658:	442b      	add	r3, r5
 800865a:	213c      	movs	r1, #60	; 0x3c
 800865c:	fb01 f203 	mul.w	r2, r1, r3
 8008660:	6863      	ldr	r3, [r4, #4]
 8008662:	2b3b      	cmp	r3, #59	; 0x3b
 8008664:	d819      	bhi.n	800869a <mktime+0x92>
 8008666:	6820      	ldr	r0, [r4, #0]
 8008668:	4413      	add	r3, r2
 800866a:	283b      	cmp	r0, #59	; 0x3b
 800866c:	fb01 f303 	mul.w	r3, r1, r3
 8008670:	d813      	bhi.n	800869a <mktime+0x92>
 8008672:	4418      	add	r0, r3
 8008674:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008678:	4628      	mov	r0, r5
 800867a:	f7ff ff5b 	bl	8008534 <isleapyear>
 800867e:	2800      	cmp	r0, #0
 8008680:	bf14      	ite	ne
 8008682:	f44f 73b7 	movne.w	r3, #366	; 0x16e
 8008686:	4643      	moveq	r3, r8
 8008688:	441e      	add	r6, r3
 800868a:	3501      	adds	r5, #1
 800868c:	e7cd      	b.n	800862a <mktime+0x22>
 800868e:	4628      	mov	r0, r5
 8008690:	f7ff ff66 	bl	8008560 <getdaysofmonth>
 8008694:	3501      	adds	r5, #1
 8008696:	4406      	add	r6, r0
 8008698:	e7cd      	b.n	8008636 <mktime+0x2e>
 800869a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800869e:	e7e9      	b.n	8008674 <mktime+0x6c>

080086a0 <gettimeofday>:
 80086a0:	b538      	push	{r3, r4, r5, lr}
 80086a2:	4a10      	ldr	r2, [pc, #64]	; (80086e4 <gettimeofday+0x44>)
 80086a4:	4b10      	ldr	r3, [pc, #64]	; (80086e8 <gettimeofday+0x48>)
 80086a6:	6814      	ldr	r4, [r2, #0]
 80086a8:	681b      	ldr	r3, [r3, #0]
 80086aa:	6013      	str	r3, [r2, #0]
 80086ac:	429c      	cmp	r4, r3
 80086ae:	bf2c      	ite	cs
 80086b0:	1ae4      	subcs	r4, r4, r3
 80086b2:	1b1c      	subcc	r4, r3, r4
 80086b4:	4b0d      	ldr	r3, [pc, #52]	; (80086ec <gettimeofday+0x4c>)
 80086b6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80086ba:	4354      	muls	r4, r2
 80086bc:	e9d3 2100 	ldrd	r2, r1, [r3]
 80086c0:	18a4      	adds	r4, r4, r2
 80086c2:	f141 0100 	adc.w	r1, r1, #0
 80086c6:	4605      	mov	r5, r0
 80086c8:	e9c3 4100 	strd	r4, r1, [r3]
 80086cc:	4a08      	ldr	r2, [pc, #32]	; (80086f0 <gettimeofday+0x50>)
 80086ce:	2300      	movs	r3, #0
 80086d0:	4620      	mov	r0, r4
 80086d2:	f7f7 fdb9 	bl	8000248 <__aeabi_uldivmod>
 80086d6:	4b06      	ldr	r3, [pc, #24]	; (80086f0 <gettimeofday+0x50>)
 80086d8:	6028      	str	r0, [r5, #0]
 80086da:	fb03 4410 	mls	r4, r3, r0, r4
 80086de:	606c      	str	r4, [r5, #4]
 80086e0:	2000      	movs	r0, #0
 80086e2:	bd38      	pop	{r3, r4, r5, pc}
 80086e4:	200017a8 	andcs	r1, r0, r8, lsr #15
 80086e8:	200017ac 	andcs	r1, r0, ip, lsr #15
 80086ec:	200017a0 	andcs	r1, r0, r0, lsr #15
 80086f0:	000f4240 	andeq	r4, pc, r0, asr #4

080086f4 <settimeofday>:
 80086f4:	4b07      	ldr	r3, [pc, #28]	; (8008714 <settimeofday+0x20>)
 80086f6:	4908      	ldr	r1, [pc, #32]	; (8008718 <settimeofday+0x24>)
 80086f8:	681a      	ldr	r2, [r3, #0]
 80086fa:	4b08      	ldr	r3, [pc, #32]	; (800871c <settimeofday+0x28>)
 80086fc:	b510      	push	{r4, lr}
 80086fe:	601a      	str	r2, [r3, #0]
 8008700:	6843      	ldr	r3, [r0, #4]
 8008702:	6804      	ldr	r4, [r0, #0]
 8008704:	4806      	ldr	r0, [pc, #24]	; (8008720 <settimeofday+0x2c>)
 8008706:	17da      	asrs	r2, r3, #31
 8008708:	fbc4 3200 	smlal	r3, r2, r4, r0
 800870c:	e9c1 3200 	strd	r3, r2, [r1]
 8008710:	2000      	movs	r0, #0
 8008712:	bd10      	pop	{r4, pc}
 8008714:	200017ac 	andcs	r1, r0, ip, lsr #15
 8008718:	200017a0 	andcs	r1, r0, r0, lsr #15
 800871c:	200017a8 	andcs	r1, r0, r8, lsr #15
 8008720:	000f4240 	andeq	r4, pc, r0, asr #4

08008724 <time>:
 8008724:	b513      	push	{r0, r1, r4, lr}
 8008726:	4604      	mov	r4, r0
 8008728:	2100      	movs	r1, #0
 800872a:	4668      	mov	r0, sp
 800872c:	f7ff ffb8 	bl	80086a0 <gettimeofday>
 8008730:	9800      	ldr	r0, [sp, #0]
 8008732:	b104      	cbz	r4, 8008736 <time+0x12>
 8008734:	6020      	str	r0, [r4, #0]
 8008736:	b002      	add	sp, #8
 8008738:	bd10      	pop	{r4, pc}
	...

0800873c <uart0_init>:
 800873c:	b507      	push	{r0, r1, r2, lr}
 800873e:	2301      	movs	r3, #1
 8008740:	9300      	str	r3, [sp, #0]
 8008742:	4805      	ldr	r0, [pc, #20]	; (8008758 <uart0_init+0x1c>)
 8008744:	2300      	movs	r3, #0
 8008746:	2208      	movs	r2, #8
 8008748:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
 800874c:	f001 f88e 	bl	800986c <gd32_uart_begin>
 8008750:	b003      	add	sp, #12
 8008752:	f85d fb04 	ldr.w	pc, [sp], #4
 8008756:	bf00      	nop
 8008758:	40013800 	andmi	r3, r1, r0, lsl #16

0800875c <uart0_putc>:
 800875c:	280a      	cmp	r0, #10
 800875e:	b538      	push	{r3, r4, r5, lr}
 8008760:	4604      	mov	r4, r0
 8008762:	d10a      	bne.n	800877a <uart0_putc+0x1e>
 8008764:	4d0b      	ldr	r5, [pc, #44]	; (8008794 <uart0_putc+0x38>)
 8008766:	2107      	movs	r1, #7
 8008768:	4628      	mov	r0, r5
 800876a:	f000 fdbf 	bl	80092ec <usart_flag_get>
 800876e:	2800      	cmp	r0, #0
 8008770:	d0f9      	beq.n	8008766 <uart0_putc+0xa>
 8008772:	4b09      	ldr	r3, [pc, #36]	; (8008798 <uart0_putc+0x3c>)
 8008774:	220d      	movs	r2, #13
 8008776:	f8c3 2804 	str.w	r2, [r3, #2052]	; 0x804
 800877a:	4d06      	ldr	r5, [pc, #24]	; (8008794 <uart0_putc+0x38>)
 800877c:	2107      	movs	r1, #7
 800877e:	4628      	mov	r0, r5
 8008780:	f000 fdb4 	bl	80092ec <usart_flag_get>
 8008784:	2800      	cmp	r0, #0
 8008786:	d0f9      	beq.n	800877c <uart0_putc+0x20>
 8008788:	4b03      	ldr	r3, [pc, #12]	; (8008798 <uart0_putc+0x3c>)
 800878a:	b2e4      	uxtb	r4, r4
 800878c:	f8c3 4804 	str.w	r4, [r3, #2052]	; 0x804
 8008790:	bd38      	pop	{r3, r4, r5, pc}
 8008792:	bf00      	nop
 8008794:	40013800 	andmi	r3, r1, r0, lsl #16
 8008798:	40013000 	andmi	r3, r1, r0

0800879c <uart0_puts>:
 800879c:	b510      	push	{r4, lr}
 800879e:	1e44      	subs	r4, r0, #1
 80087a0:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 80087a4:	b903      	cbnz	r3, 80087a8 <uart0_puts+0xc>
 80087a6:	bd10      	pop	{r4, pc}
 80087a8:	2b0a      	cmp	r3, #10
 80087aa:	d102      	bne.n	80087b2 <uart0_puts+0x16>
 80087ac:	200d      	movs	r0, #13
 80087ae:	f7ff ffd5 	bl	800875c <uart0_putc>
 80087b2:	7820      	ldrb	r0, [r4, #0]
 80087b4:	f7ff ffd2 	bl	800875c <uart0_putc>
 80087b8:	e7f2      	b.n	80087a0 <uart0_puts+0x4>
	...

080087bc <systick_config>:
 80087bc:	4b0c      	ldr	r3, [pc, #48]	; (80087f0 <systick_config+0x34>)
 80087be:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80087c2:	681b      	ldr	r3, [r3, #0]
 80087c4:	fbb3 f3f2 	udiv	r3, r3, r2
 80087c8:	3b01      	subs	r3, #1
 80087ca:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80087ce:	d20d      	bcs.n	80087ec <systick_config+0x30>
 80087d0:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
 80087d4:	21f0      	movs	r1, #240	; 0xf0
 80087d6:	6153      	str	r3, [r2, #20]
 80087d8:	4b06      	ldr	r3, [pc, #24]	; (80087f4 <systick_config+0x38>)
 80087da:	2007      	movs	r0, #7
 80087dc:	f883 1023 	strb.w	r1, [r3, #35]	; 0x23
 80087e0:	2100      	movs	r1, #0
 80087e2:	6191      	str	r1, [r2, #24]
 80087e4:	6110      	str	r0, [r2, #16]
 80087e6:	f883 1023 	strb.w	r1, [r3, #35]	; 0x23
 80087ea:	4770      	bx	lr
 80087ec:	e7fe      	b.n	80087ec <systick_config+0x30>
 80087ee:	bf00      	nop
 80087f0:	20000078 	andcs	r0, r0, r8, ror r0
 80087f4:	e000ed00 	and	lr, r0, r0, lsl #26

080087f8 <SysTick_Handler>:
 80087f8:	4a02      	ldr	r2, [pc, #8]	; (8008804 <SysTick_Handler+0xc>)
 80087fa:	6813      	ldr	r3, [r2, #0]
 80087fc:	3301      	adds	r3, #1
 80087fe:	6013      	str	r3, [r2, #0]
 8008800:	4770      	bx	lr
 8008802:	bf00      	nop
 8008804:	200017ac 	andcs	r1, r0, ip, lsr #15

08008808 <SystemInit>:
 8008808:	4a43      	ldr	r2, [pc, #268]	; (8008918 <SystemInit+0x110>)
 800880a:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 800880e:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008812:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 8008816:	4b41      	ldr	r3, [pc, #260]	; (800891c <SystemInit+0x114>)
 8008818:	681a      	ldr	r2, [r3, #0]
 800881a:	f042 0201 	orr.w	r2, r2, #1
 800881e:	601a      	str	r2, [r3, #0]
 8008820:	685a      	ldr	r2, [r3, #4]
 8008822:	b082      	sub	sp, #8
 8008824:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8008828:	605a      	str	r2, [r3, #4]
 800882a:	2200      	movs	r2, #0
 800882c:	9201      	str	r2, [sp, #4]
 800882e:	f644 611f 	movw	r1, #19999	; 0x4e1f
 8008832:	9a01      	ldr	r2, [sp, #4]
 8008834:	428a      	cmp	r2, r1
 8008836:	d922      	bls.n	800887e <SystemInit+0x76>
 8008838:	685a      	ldr	r2, [r3, #4]
 800883a:	f022 0203 	bic.w	r2, r2, #3
 800883e:	605a      	str	r2, [r3, #4]
 8008840:	681a      	ldr	r2, [r3, #0]
 8008842:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8008846:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800884a:	601a      	str	r2, [r3, #0]
 800884c:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8008850:	609a      	str	r2, [r3, #8]
 8008852:	681a      	ldr	r2, [r3, #0]
 8008854:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8008858:	601a      	str	r2, [r3, #0]
 800885a:	2200      	movs	r2, #0
 800885c:	605a      	str	r2, [r3, #4]
 800885e:	62da      	str	r2, [r3, #44]	; 0x2c
 8008860:	681a      	ldr	r2, [r3, #0]
 8008862:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8008866:	601a      	str	r2, [r3, #0]
 8008868:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800886c:	6819      	ldr	r1, [r3, #0]
 800886e:	0388      	lsls	r0, r1, #14
 8008870:	d401      	bmi.n	8008876 <SystemInit+0x6e>
 8008872:	3a01      	subs	r2, #1
 8008874:	d1fa      	bne.n	800886c <SystemInit+0x64>
 8008876:	681a      	ldr	r2, [r3, #0]
 8008878:	0391      	lsls	r1, r2, #14
 800887a:	d404      	bmi.n	8008886 <SystemInit+0x7e>
 800887c:	e7fe      	b.n	800887c <SystemInit+0x74>
 800887e:	9a01      	ldr	r2, [sp, #4]
 8008880:	3201      	adds	r2, #1
 8008882:	9201      	str	r2, [sp, #4]
 8008884:	e7d5      	b.n	8008832 <SystemInit+0x2a>
 8008886:	69da      	ldr	r2, [r3, #28]
 8008888:	4925      	ldr	r1, [pc, #148]	; (8008920 <SystemInit+0x118>)
 800888a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800888e:	61da      	str	r2, [r3, #28]
 8008890:	680a      	ldr	r2, [r1, #0]
 8008892:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8008896:	600a      	str	r2, [r1, #0]
 8008898:	685a      	ldr	r2, [r3, #4]
 800889a:	605a      	str	r2, [r3, #4]
 800889c:	685a      	ldr	r2, [r3, #4]
 800889e:	605a      	str	r2, [r3, #4]
 80088a0:	685a      	ldr	r2, [r3, #4]
 80088a2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80088a6:	605a      	str	r2, [r3, #4]
 80088a8:	685a      	ldr	r2, [r3, #4]
 80088aa:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 80088ae:	605a      	str	r2, [r3, #4]
 80088b0:	685a      	ldr	r2, [r3, #4]
 80088b2:	f442 3240 	orr.w	r2, r2, #196608	; 0x30000
 80088b6:	605a      	str	r2, [r3, #4]
 80088b8:	685a      	ldr	r2, [r3, #4]
 80088ba:	f022 4290 	bic.w	r2, r2, #1207959552	; 0x48000000
 80088be:	f422 1270 	bic.w	r2, r2, #3932160	; 0x3c0000
 80088c2:	605a      	str	r2, [r3, #4]
 80088c4:	685a      	ldr	r2, [r3, #4]
 80088c6:	f042 6203 	orr.w	r2, r2, #137363456	; 0x8300000
 80088ca:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80088ce:	605a      	str	r2, [r3, #4]
 80088d0:	681a      	ldr	r2, [r3, #0]
 80088d2:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 80088d6:	601a      	str	r2, [r3, #0]
 80088d8:	681a      	ldr	r2, [r3, #0]
 80088da:	0192      	lsls	r2, r2, #6
 80088dc:	d5fc      	bpl.n	80088d8 <SystemInit+0xd0>
 80088de:	680a      	ldr	r2, [r1, #0]
 80088e0:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80088e4:	600a      	str	r2, [r1, #0]
 80088e6:	4a0e      	ldr	r2, [pc, #56]	; (8008920 <SystemInit+0x118>)
 80088e8:	6851      	ldr	r1, [r2, #4]
 80088ea:	03c8      	lsls	r0, r1, #15
 80088ec:	d5fc      	bpl.n	80088e8 <SystemInit+0xe0>
 80088ee:	6811      	ldr	r1, [r2, #0]
 80088f0:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
 80088f4:	6011      	str	r1, [r2, #0]
 80088f6:	6851      	ldr	r1, [r2, #4]
 80088f8:	0389      	lsls	r1, r1, #14
 80088fa:	d5fc      	bpl.n	80088f6 <SystemInit+0xee>
 80088fc:	685a      	ldr	r2, [r3, #4]
 80088fe:	f022 0203 	bic.w	r2, r2, #3
 8008902:	605a      	str	r2, [r3, #4]
 8008904:	685a      	ldr	r2, [r3, #4]
 8008906:	f042 0202 	orr.w	r2, r2, #2
 800890a:	605a      	str	r2, [r3, #4]
 800890c:	685a      	ldr	r2, [r3, #4]
 800890e:	0712      	lsls	r2, r2, #28
 8008910:	d5fc      	bpl.n	800890c <SystemInit+0x104>
 8008912:	b002      	add	sp, #8
 8008914:	4770      	bx	lr
 8008916:	bf00      	nop
 8008918:	e000ed00 	and	lr, r0, r0, lsl #26
 800891c:	40021000 	andmi	r1, r2, r0
 8008920:	40007000 	andmi	r7, r0, r0

08008924 <bkp_write_data>:
 8008924:	f1a0 030b 	sub.w	r3, r0, #11
 8008928:	2b1f      	cmp	r3, #31
 800892a:	d804      	bhi.n	8008936 <bkp_write_data+0x12>
 800892c:	4b07      	ldr	r3, [pc, #28]	; (800894c <bkp_write_data+0x28>)
 800892e:	4403      	add	r3, r0
 8008930:	009b      	lsls	r3, r3, #2
 8008932:	8019      	strh	r1, [r3, #0]
 8008934:	4770      	bx	lr
 8008936:	1e43      	subs	r3, r0, #1
 8008938:	2b09      	cmp	r3, #9
 800893a:	bf9f      	itttt	ls
 800893c:	f100 5080 	addls.w	r0, r0, #268435456	; 0x10000000
 8008940:	f500 50d8 	addls.w	r0, r0, #6912	; 0x1b00
 8008944:	0080      	lslls	r0, r0, #2
 8008946:	8001      	strhls	r1, [r0, #0]
 8008948:	4770      	bx	lr
 800894a:	bf00      	nop
 800894c:	10001b05 	andne	r1, r0, r5, lsl #22

08008950 <bkp_read_data>:
 8008950:	f1a0 030b 	sub.w	r3, r0, #11
 8008954:	2b1f      	cmp	r3, #31
 8008956:	d805      	bhi.n	8008964 <bkp_read_data+0x14>
 8008958:	4b08      	ldr	r3, [pc, #32]	; (800897c <bkp_read_data+0x2c>)
 800895a:	4403      	add	r3, r0
 800895c:	009b      	lsls	r3, r3, #2
 800895e:	8818      	ldrh	r0, [r3, #0]
 8008960:	b280      	uxth	r0, r0
 8008962:	4770      	bx	lr
 8008964:	1e43      	subs	r3, r0, #1
 8008966:	2b09      	cmp	r3, #9
 8008968:	d806      	bhi.n	8008978 <bkp_read_data+0x28>
 800896a:	f100 5080 	add.w	r0, r0, #268435456	; 0x10000000
 800896e:	f500 50d8 	add.w	r0, r0, #6912	; 0x1b00
 8008972:	0080      	lsls	r0, r0, #2
 8008974:	8800      	ldrh	r0, [r0, #0]
 8008976:	e7f3      	b.n	8008960 <bkp_read_data+0x10>
 8008978:	2000      	movs	r0, #0
 800897a:	4770      	bx	lr
 800897c:	10001b05 	andne	r1, r0, r5, lsl #22

08008980 <dma_deinit>:
 8008980:	4b0c      	ldr	r3, [pc, #48]	; (80089b4 <dma_deinit+0x34>)
 8008982:	4298      	cmp	r0, r3
 8008984:	d102      	bne.n	800898c <dma_deinit+0xc>
 8008986:	2904      	cmp	r1, #4
 8008988:	d900      	bls.n	800898c <dma_deinit+0xc>
 800898a:	e7fe      	b.n	800898a <dma_deinit+0xa>
 800898c:	2314      	movs	r3, #20
 800898e:	fb03 0301 	mla	r3, r3, r1, r0
 8008992:	0089      	lsls	r1, r1, #2
 8008994:	689a      	ldr	r2, [r3, #8]
 8008996:	f022 0201 	bic.w	r2, r2, #1
 800899a:	609a      	str	r2, [r3, #8]
 800899c:	2200      	movs	r2, #0
 800899e:	609a      	str	r2, [r3, #8]
 80089a0:	60da      	str	r2, [r3, #12]
 80089a2:	611a      	str	r2, [r3, #16]
 80089a4:	615a      	str	r2, [r3, #20]
 80089a6:	6842      	ldr	r2, [r0, #4]
 80089a8:	230f      	movs	r3, #15
 80089aa:	408b      	lsls	r3, r1
 80089ac:	4313      	orrs	r3, r2
 80089ae:	6043      	str	r3, [r0, #4]
 80089b0:	4770      	bx	lr
 80089b2:	bf00      	nop
 80089b4:	40020400 	andmi	r0, r2, r0, lsl #8

080089b8 <dma_struct_para_init>:
 80089b8:	b900      	cbnz	r0, 80089bc <dma_struct_para_init+0x4>
 80089ba:	e7fe      	b.n	80089ba <dma_struct_para_init+0x2>
 80089bc:	2300      	movs	r3, #0
 80089be:	e9c0 3300 	strd	r3, r3, [r0]
 80089c2:	e9c0 3302 	strd	r3, r3, [r0, #8]
 80089c6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80089ca:	8303      	strh	r3, [r0, #24]
 80089cc:	7683      	strb	r3, [r0, #26]
 80089ce:	4770      	bx	lr

080089d0 <dma_init>:
 80089d0:	4b1b      	ldr	r3, [pc, #108]	; (8008a40 <dma_init+0x70>)
 80089d2:	4298      	cmp	r0, r3
 80089d4:	b510      	push	{r4, lr}
 80089d6:	d102      	bne.n	80089de <dma_init+0xe>
 80089d8:	2904      	cmp	r1, #4
 80089da:	d900      	bls.n	80089de <dma_init+0xe>
 80089dc:	e7fe      	b.n	80089dc <dma_init+0xc>
 80089de:	2314      	movs	r3, #20
 80089e0:	fb03 0101 	mla	r1, r3, r1, r0
 80089e4:	6813      	ldr	r3, [r2, #0]
 80089e6:	610b      	str	r3, [r1, #16]
 80089e8:	6893      	ldr	r3, [r2, #8]
 80089ea:	614b      	str	r3, [r1, #20]
 80089ec:	8a13      	ldrh	r3, [r2, #16]
 80089ee:	60cb      	str	r3, [r1, #12]
 80089f0:	68d4      	ldr	r4, [r2, #12]
 80089f2:	6853      	ldr	r3, [r2, #4]
 80089f4:	6888      	ldr	r0, [r1, #8]
 80089f6:	4323      	orrs	r3, r4
 80089f8:	6954      	ldr	r4, [r2, #20]
 80089fa:	f420 507c 	bic.w	r0, r0, #16128	; 0x3f00
 80089fe:	4323      	orrs	r3, r4
 8008a00:	4303      	orrs	r3, r0
 8008a02:	608b      	str	r3, [r1, #8]
 8008a04:	7e13      	ldrb	r3, [r2, #24]
 8008a06:	2b01      	cmp	r3, #1
 8008a08:	688b      	ldr	r3, [r1, #8]
 8008a0a:	bf0c      	ite	eq
 8008a0c:	f043 0340 	orreq.w	r3, r3, #64	; 0x40
 8008a10:	f023 0340 	bicne.w	r3, r3, #64	; 0x40
 8008a14:	608b      	str	r3, [r1, #8]
 8008a16:	7e53      	ldrb	r3, [r2, #25]
 8008a18:	2b01      	cmp	r3, #1
 8008a1a:	688b      	ldr	r3, [r1, #8]
 8008a1c:	bf0c      	ite	eq
 8008a1e:	f043 0380 	orreq.w	r3, r3, #128	; 0x80
 8008a22:	f023 0380 	bicne.w	r3, r3, #128	; 0x80
 8008a26:	608b      	str	r3, [r1, #8]
 8008a28:	7e93      	ldrb	r3, [r2, #26]
 8008a2a:	b923      	cbnz	r3, 8008a36 <dma_init+0x66>
 8008a2c:	688b      	ldr	r3, [r1, #8]
 8008a2e:	f023 0310 	bic.w	r3, r3, #16
 8008a32:	608b      	str	r3, [r1, #8]
 8008a34:	bd10      	pop	{r4, pc}
 8008a36:	688b      	ldr	r3, [r1, #8]
 8008a38:	f043 0310 	orr.w	r3, r3, #16
 8008a3c:	e7f9      	b.n	8008a32 <dma_init+0x62>
 8008a3e:	bf00      	nop
 8008a40:	40020400 	andmi	r0, r2, r0, lsl #8

08008a44 <dma_circulation_disable>:
 8008a44:	4b06      	ldr	r3, [pc, #24]	; (8008a60 <dma_circulation_disable+0x1c>)
 8008a46:	4298      	cmp	r0, r3
 8008a48:	d102      	bne.n	8008a50 <dma_circulation_disable+0xc>
 8008a4a:	2904      	cmp	r1, #4
 8008a4c:	d900      	bls.n	8008a50 <dma_circulation_disable+0xc>
 8008a4e:	e7fe      	b.n	8008a4e <dma_circulation_disable+0xa>
 8008a50:	2314      	movs	r3, #20
 8008a52:	4359      	muls	r1, r3
 8008a54:	3008      	adds	r0, #8
 8008a56:	580b      	ldr	r3, [r1, r0]
 8008a58:	f023 0320 	bic.w	r3, r3, #32
 8008a5c:	500b      	str	r3, [r1, r0]
 8008a5e:	4770      	bx	lr
 8008a60:	40020400 	andmi	r0, r2, r0, lsl #8

08008a64 <dma_memory_to_memory_disable>:
 8008a64:	4b06      	ldr	r3, [pc, #24]	; (8008a80 <dma_memory_to_memory_disable+0x1c>)
 8008a66:	4298      	cmp	r0, r3
 8008a68:	d102      	bne.n	8008a70 <dma_memory_to_memory_disable+0xc>
 8008a6a:	2904      	cmp	r1, #4
 8008a6c:	d900      	bls.n	8008a70 <dma_memory_to_memory_disable+0xc>
 8008a6e:	e7fe      	b.n	8008a6e <dma_memory_to_memory_disable+0xa>
 8008a70:	2314      	movs	r3, #20
 8008a72:	4359      	muls	r1, r3
 8008a74:	3008      	adds	r0, #8
 8008a76:	580b      	ldr	r3, [r1, r0]
 8008a78:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008a7c:	500b      	str	r3, [r1, r0]
 8008a7e:	4770      	bx	lr
 8008a80:	40020400 	andmi	r0, r2, r0, lsl #8

08008a84 <fmc_bank0_unlock>:
 8008a84:	4b04      	ldr	r3, [pc, #16]	; (8008a98 <fmc_bank0_unlock+0x14>)
 8008a86:	691a      	ldr	r2, [r3, #16]
 8008a88:	0612      	lsls	r2, r2, #24
 8008a8a:	bf41      	itttt	mi
 8008a8c:	4a03      	ldrmi	r2, [pc, #12]	; (8008a9c <fmc_bank0_unlock+0x18>)
 8008a8e:	605a      	strmi	r2, [r3, #4]
 8008a90:	f102 3288 	addmi.w	r2, r2, #2290649224	; 0x88888888
 8008a94:	605a      	strmi	r2, [r3, #4]
 8008a96:	4770      	bx	lr
 8008a98:	40022000 	andmi	r2, r2, r0
 8008a9c:	45670123 	strbmi	r0, [r7, #-291]!	; 0xfffffedd

08008aa0 <fmc_bank1_unlock>:
 8008aa0:	4b04      	ldr	r3, [pc, #16]	; (8008ab4 <fmc_bank1_unlock+0x14>)
 8008aa2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008aa4:	0612      	lsls	r2, r2, #24
 8008aa6:	bf41      	itttt	mi
 8008aa8:	4a03      	ldrmi	r2, [pc, #12]	; (8008ab8 <fmc_bank1_unlock+0x18>)
 8008aaa:	645a      	strmi	r2, [r3, #68]	; 0x44
 8008aac:	f102 3288 	addmi.w	r2, r2, #2290649224	; 0x88888888
 8008ab0:	645a      	strmi	r2, [r3, #68]	; 0x44
 8008ab2:	4770      	bx	lr
 8008ab4:	40022000 	andmi	r2, r2, r0
 8008ab8:	45670123 	strbmi	r0, [r7, #-291]!	; 0xfffffedd

08008abc <fmc_bank0_lock>:
 8008abc:	4a02      	ldr	r2, [pc, #8]	; (8008ac8 <fmc_bank0_lock+0xc>)
 8008abe:	6913      	ldr	r3, [r2, #16]
 8008ac0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008ac4:	6113      	str	r3, [r2, #16]
 8008ac6:	4770      	bx	lr
 8008ac8:	40022000 	andmi	r2, r2, r0

08008acc <fmc_bank1_lock>:
 8008acc:	4a02      	ldr	r2, [pc, #8]	; (8008ad8 <fmc_bank1_lock+0xc>)
 8008ace:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8008ad0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008ad4:	6513      	str	r3, [r2, #80]	; 0x50
 8008ad6:	4770      	bx	lr
 8008ad8:	40022000 	andmi	r2, r2, r0

08008adc <fmc_bank0_state_get>:
 8008adc:	4b07      	ldr	r3, [pc, #28]	; (8008afc <fmc_bank0_state_get+0x20>)
 8008ade:	68da      	ldr	r2, [r3, #12]
 8008ae0:	07d1      	lsls	r1, r2, #31
 8008ae2:	d407      	bmi.n	8008af4 <fmc_bank0_state_get+0x18>
 8008ae4:	68da      	ldr	r2, [r3, #12]
 8008ae6:	06d2      	lsls	r2, r2, #27
 8008ae8:	d406      	bmi.n	8008af8 <fmc_bank0_state_get+0x1c>
 8008aea:	68d8      	ldr	r0, [r3, #12]
 8008aec:	f3c0 0080 	ubfx	r0, r0, #2, #1
 8008af0:	0040      	lsls	r0, r0, #1
 8008af2:	4770      	bx	lr
 8008af4:	2001      	movs	r0, #1
 8008af6:	4770      	bx	lr
 8008af8:	2003      	movs	r0, #3
 8008afa:	4770      	bx	lr
 8008afc:	40022000 	andmi	r2, r2, r0

08008b00 <fmc_bank1_state_get>:
 8008b00:	4b07      	ldr	r3, [pc, #28]	; (8008b20 <fmc_bank1_state_get+0x20>)
 8008b02:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008b04:	07d1      	lsls	r1, r2, #31
 8008b06:	d407      	bmi.n	8008b18 <fmc_bank1_state_get+0x18>
 8008b08:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008b0a:	06d2      	lsls	r2, r2, #27
 8008b0c:	d406      	bmi.n	8008b1c <fmc_bank1_state_get+0x1c>
 8008b0e:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8008b10:	f3c0 0080 	ubfx	r0, r0, #2, #1
 8008b14:	0040      	lsls	r0, r0, #1
 8008b16:	4770      	bx	lr
 8008b18:	2001      	movs	r0, #1
 8008b1a:	4770      	bx	lr
 8008b1c:	2003      	movs	r0, #3
 8008b1e:	4770      	bx	lr
 8008b20:	40022000 	andmi	r2, r2, r0

08008b24 <fwdgt_enable>:
 8008b24:	4b02      	ldr	r3, [pc, #8]	; (8008b30 <fwdgt_enable+0xc>)
 8008b26:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 8008b2a:	601a      	str	r2, [r3, #0]
 8008b2c:	4770      	bx	lr
 8008b2e:	bf00      	nop
 8008b30:	40003000 	andmi	r3, r0, r0

08008b34 <fwdgt_counter_reload>:
 8008b34:	4b02      	ldr	r3, [pc, #8]	; (8008b40 <fwdgt_counter_reload+0xc>)
 8008b36:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8008b3a:	601a      	str	r2, [r3, #0]
 8008b3c:	4770      	bx	lr
 8008b3e:	bf00      	nop
 8008b40:	40003000 	andmi	r3, r0, r0

08008b44 <fwdgt_config>:
 8008b44:	4a12      	ldr	r2, [pc, #72]	; (8008b90 <fwdgt_config+0x4c>)
 8008b46:	b510      	push	{r4, lr}
 8008b48:	f245 5355 	movw	r3, #21845	; 0x5555
 8008b4c:	4c11      	ldr	r4, [pc, #68]	; (8008b94 <fwdgt_config+0x50>)
 8008b4e:	6013      	str	r3, [r2, #0]
 8008b50:	68d3      	ldr	r3, [r2, #12]
 8008b52:	3c01      	subs	r4, #1
 8008b54:	f003 0301 	and.w	r3, r3, #1
 8008b58:	d013      	beq.n	8008b82 <fwdgt_config+0x3e>
 8008b5a:	2b00      	cmp	r3, #0
 8008b5c:	d1f8      	bne.n	8008b50 <fwdgt_config+0xc>
 8008b5e:	6051      	str	r1, [r2, #4]
 8008b60:	490c      	ldr	r1, [pc, #48]	; (8008b94 <fwdgt_config+0x50>)
 8008b62:	4a0b      	ldr	r2, [pc, #44]	; (8008b90 <fwdgt_config+0x4c>)
 8008b64:	68d3      	ldr	r3, [r2, #12]
 8008b66:	3901      	subs	r1, #1
 8008b68:	f003 0302 	and.w	r3, r3, #2
 8008b6c:	d00d      	beq.n	8008b8a <fwdgt_config+0x46>
 8008b6e:	2b00      	cmp	r3, #0
 8008b70:	d1f8      	bne.n	8008b64 <fwdgt_config+0x20>
 8008b72:	f3c0 000b 	ubfx	r0, r0, #0, #12
 8008b76:	f64a 23aa 	movw	r3, #43690	; 0xaaaa
 8008b7a:	6090      	str	r0, [r2, #8]
 8008b7c:	6013      	str	r3, [r2, #0]
 8008b7e:	2001      	movs	r0, #1
 8008b80:	e002      	b.n	8008b88 <fwdgt_config+0x44>
 8008b82:	2b00      	cmp	r3, #0
 8008b84:	d0eb      	beq.n	8008b5e <fwdgt_config+0x1a>
 8008b86:	2000      	movs	r0, #0
 8008b88:	bd10      	pop	{r4, pc}
 8008b8a:	2b00      	cmp	r3, #0
 8008b8c:	d1fb      	bne.n	8008b86 <fwdgt_config+0x42>
 8008b8e:	e7f0      	b.n	8008b72 <fwdgt_config+0x2e>
 8008b90:	40003000 	andmi	r3, r0, r0
 8008b94:	000fffff 	strdeq	pc, [pc], -pc	; <UNPREDICTABLE>

08008b98 <gpio_init>:
 8008b98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008b9c:	06cf      	lsls	r7, r1, #27
 8008b9e:	f001 040f 	and.w	r4, r1, #15
 8008ba2:	d508      	bpl.n	8008bb6 <gpio_init+0x1e>
 8008ba4:	2a04      	cmp	r2, #4
 8008ba6:	bf01      	itttt	eq
 8008ba8:	6bc2      	ldreq	r2, [r0, #60]	; 0x3c
 8008baa:	431a      	orreq	r2, r3
 8008bac:	f044 0403 	orreq.w	r4, r4, #3
 8008bb0:	63c2      	streq	r2, [r0, #60]	; 0x3c
 8008bb2:	bf18      	it	ne
 8008bb4:	4314      	orrne	r4, r2
 8008bb6:	2500      	movs	r5, #0
 8008bb8:	f04f 0c0f 	mov.w	ip, #15
 8008bbc:	2701      	movs	r7, #1
 8008bbe:	fa23 f205 	lsr.w	r2, r3, r5
 8008bc2:	07d6      	lsls	r6, r2, #31
 8008bc4:	d510      	bpl.n	8008be8 <gpio_init+0x50>
 8008bc6:	00aa      	lsls	r2, r5, #2
 8008bc8:	6806      	ldr	r6, [r0, #0]
 8008bca:	fa0c fe02 	lsl.w	lr, ip, r2
 8008bce:	ea26 060e 	bic.w	r6, r6, lr
 8008bd2:	fa04 f202 	lsl.w	r2, r4, r2
 8008bd6:	2928      	cmp	r1, #40	; 0x28
 8008bd8:	ea42 0206 	orr.w	r2, r2, r6
 8008bdc:	d128      	bne.n	8008c30 <gpio_init+0x98>
 8008bde:	fa07 f605 	lsl.w	r6, r7, r5
 8008be2:	401e      	ands	r6, r3
 8008be4:	6146      	str	r6, [r0, #20]
 8008be6:	6002      	str	r2, [r0, #0]
 8008be8:	3501      	adds	r5, #1
 8008bea:	2d08      	cmp	r5, #8
 8008bec:	d1e7      	bne.n	8008bbe <gpio_init+0x26>
 8008bee:	2600      	movs	r6, #0
 8008bf0:	f04f 0c0f 	mov.w	ip, #15
 8008bf4:	2701      	movs	r7, #1
 8008bf6:	f106 0208 	add.w	r2, r6, #8
 8008bfa:	fa23 f502 	lsr.w	r5, r3, r2
 8008bfe:	07ed      	lsls	r5, r5, #31
 8008c00:	d511      	bpl.n	8008c26 <gpio_init+0x8e>
 8008c02:	00b5      	lsls	r5, r6, #2
 8008c04:	f8d0 e004 	ldr.w	lr, [r0, #4]
 8008c08:	fa0c f805 	lsl.w	r8, ip, r5
 8008c0c:	ea2e 0e08 	bic.w	lr, lr, r8
 8008c10:	fa04 f505 	lsl.w	r5, r4, r5
 8008c14:	2928      	cmp	r1, #40	; 0x28
 8008c16:	ea45 050e 	orr.w	r5, r5, lr
 8008c1a:	d110      	bne.n	8008c3e <gpio_init+0xa6>
 8008c1c:	fa07 f202 	lsl.w	r2, r7, r2
 8008c20:	401a      	ands	r2, r3
 8008c22:	6142      	str	r2, [r0, #20]
 8008c24:	6045      	str	r5, [r0, #4]
 8008c26:	3601      	adds	r6, #1
 8008c28:	2e08      	cmp	r6, #8
 8008c2a:	d1e4      	bne.n	8008bf6 <gpio_init+0x5e>
 8008c2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008c30:	2948      	cmp	r1, #72	; 0x48
 8008c32:	bf02      	ittt	eq
 8008c34:	fa07 f605 	lsleq.w	r6, r7, r5
 8008c38:	401e      	andeq	r6, r3
 8008c3a:	6106      	streq	r6, [r0, #16]
 8008c3c:	e7d3      	b.n	8008be6 <gpio_init+0x4e>
 8008c3e:	2948      	cmp	r1, #72	; 0x48
 8008c40:	bf02      	ittt	eq
 8008c42:	fa07 f202 	lsleq.w	r2, r7, r2
 8008c46:	401a      	andeq	r2, r3
 8008c48:	6102      	streq	r2, [r0, #16]
 8008c4a:	e7eb      	b.n	8008c24 <gpio_init+0x8c>

08008c4c <gpio_input_bit_get>:
 8008c4c:	6883      	ldr	r3, [r0, #8]
 8008c4e:	420b      	tst	r3, r1
 8008c50:	bf14      	ite	ne
 8008c52:	2001      	movne	r0, #1
 8008c54:	2000      	moveq	r0, #0
 8008c56:	4770      	bx	lr

08008c58 <gpio_pin_remap_config>:
 8008c58:	2800      	cmp	r0, #0
 8008c5a:	4a16      	ldr	r2, [pc, #88]	; (8008cb4 <gpio_pin_remap_config+0x5c>)
 8008c5c:	b530      	push	{r4, r5, lr}
 8008c5e:	f400 1540 	and.w	r5, r0, #3145728	; 0x300000
 8008c62:	bfb4      	ite	lt
 8008c64:	69d3      	ldrlt	r3, [r2, #28]
 8008c66:	6853      	ldrge	r3, [r2, #4]
 8008c68:	f5b5 1f40 	cmp.w	r5, #3145728	; 0x300000
 8008c6c:	b284      	uxth	r4, r0
 8008c6e:	d110      	bne.n	8008c92 <gpio_pin_remap_config+0x3a>
 8008c70:	6855      	ldr	r5, [r2, #4]
 8008c72:	f025 65e0 	bic.w	r5, r5, #117440512	; 0x7000000
 8008c76:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8008c7a:	6055      	str	r5, [r2, #4]
 8008c7c:	b119      	cbz	r1, 8008c86 <gpio_pin_remap_config+0x2e>
 8008c7e:	0d42      	lsrs	r2, r0, #21
 8008c80:	0112      	lsls	r2, r2, #4
 8008c82:	4094      	lsls	r4, r2
 8008c84:	4323      	orrs	r3, r4
 8008c86:	4a0b      	ldr	r2, [pc, #44]	; (8008cb4 <gpio_pin_remap_config+0x5c>)
 8008c88:	2800      	cmp	r0, #0
 8008c8a:	bfb4      	ite	lt
 8008c8c:	61d3      	strlt	r3, [r2, #28]
 8008c8e:	6053      	strge	r3, [r2, #4]
 8008c90:	bd30      	pop	{r4, r5, pc}
 8008c92:	02c2      	lsls	r2, r0, #11
 8008c94:	bf55      	itete	pl
 8008c96:	0d42      	lsrpl	r2, r0, #21
 8008c98:	2203      	movmi	r2, #3
 8008c9a:	0112      	lslpl	r2, r2, #4
 8008c9c:	f3c0 4503 	ubfxmi	r5, r0, #16, #4
 8008ca0:	bf4c      	ite	mi
 8008ca2:	40aa      	lslmi	r2, r5
 8008ca4:	fa04 f202 	lslpl.w	r2, r4, r2
 8008ca8:	ea23 0302 	bic.w	r3, r3, r2
 8008cac:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8008cb0:	e7e4      	b.n	8008c7c <gpio_pin_remap_config+0x24>
 8008cb2:	bf00      	nop
 8008cb4:	40010000 	andmi	r0, r1, r0

08008cb8 <pmu_backup_write_enable>:
 8008cb8:	4a02      	ldr	r2, [pc, #8]	; (8008cc4 <pmu_backup_write_enable+0xc>)
 8008cba:	6813      	ldr	r3, [r2, #0]
 8008cbc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008cc0:	6013      	str	r3, [r2, #0]
 8008cc2:	4770      	bx	lr
 8008cc4:	40007000 	andmi	r7, r0, r0

08008cc8 <rcu_periph_clock_enable>:
 8008cc8:	0983      	lsrs	r3, r0, #6
 8008cca:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8008cce:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8008cd2:	f000 001f 	and.w	r0, r0, #31
 8008cd6:	6819      	ldr	r1, [r3, #0]
 8008cd8:	2201      	movs	r2, #1
 8008cda:	4082      	lsls	r2, r0
 8008cdc:	430a      	orrs	r2, r1
 8008cde:	601a      	str	r2, [r3, #0]
 8008ce0:	4770      	bx	lr

08008ce2 <rcu_periph_clock_disable>:
 8008ce2:	0983      	lsrs	r3, r0, #6
 8008ce4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8008ce8:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8008cec:	f000 001f 	and.w	r0, r0, #31
 8008cf0:	681a      	ldr	r2, [r3, #0]
 8008cf2:	2101      	movs	r1, #1
 8008cf4:	4081      	lsls	r1, r0
 8008cf6:	ea22 0201 	bic.w	r2, r2, r1
 8008cfa:	601a      	str	r2, [r3, #0]
 8008cfc:	4770      	bx	lr

08008cfe <rcu_periph_reset_enable>:
 8008cfe:	f7ff bfe3 	b.w	8008cc8 <rcu_periph_clock_enable>

08008d02 <rcu_periph_reset_disable>:
 8008d02:	f7ff bfee 	b.w	8008ce2 <rcu_periph_clock_disable>
	...

08008d08 <rcu_adc_clock_config>:
 8008d08:	4913      	ldr	r1, [pc, #76]	; (8008d58 <rcu_adc_clock_config+0x50>)
 8008d0a:	684b      	ldr	r3, [r1, #4]
 8008d0c:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8008d0e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008d12:	b510      	push	{r4, lr}
 8008d14:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8008d18:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 8008d1c:	280b      	cmp	r0, #11
 8008d1e:	d809      	bhi.n	8008d34 <rcu_adc_clock_config+0x2c>
 8008d20:	e8df f000 	tbb	[pc, r0]
 8008d24:	06060606 	streq	r0, [r6], -r6, lsl #12
 8008d28:	0b080b08 	bleq	820b950 <__exidx_end+0x1ff9e4>
 8008d2c:	12121212 	andsne	r1, r2, #536870913	; 0x20000001
 8008d30:	ea43 3380 	orr.w	r3, r3, r0, lsl #14
 8008d34:	604b      	str	r3, [r1, #4]
 8008d36:	62ca      	str	r2, [r1, #44]	; 0x2c
 8008d38:	bd10      	pop	{r4, pc}
 8008d3a:	4c08      	ldr	r4, [pc, #32]	; (8008d5c <rcu_adc_clock_config+0x54>)
 8008d3c:	ea04 3080 	and.w	r0, r4, r0, lsl #14
 8008d40:	4303      	orrs	r3, r0
 8008d42:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008d46:	e7f5      	b.n	8008d34 <rcu_adc_clock_config+0x2c>
 8008d48:	4c05      	ldr	r4, [pc, #20]	; (8008d60 <rcu_adc_clock_config+0x58>)
 8008d4a:	ea04 3080 	and.w	r0, r4, r0, lsl #14
 8008d4e:	4303      	orrs	r3, r0
 8008d50:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8008d54:	e7ee      	b.n	8008d34 <rcu_adc_clock_config+0x2c>
 8008d56:	bf00      	nop
 8008d58:	40021000 	andmi	r1, r2, r0
 8008d5c:	fffec000 			; <UNDEFINED> instruction: 0xfffec000
 8008d60:	fffcc000 			; <UNDEFINED> instruction: 0xfffcc000

08008d64 <rcu_rtc_clock_config>:
 8008d64:	4a03      	ldr	r2, [pc, #12]	; (8008d74 <rcu_rtc_clock_config+0x10>)
 8008d66:	6a13      	ldr	r3, [r2, #32]
 8008d68:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008d6c:	4318      	orrs	r0, r3
 8008d6e:	6210      	str	r0, [r2, #32]
 8008d70:	4770      	bx	lr
 8008d72:	bf00      	nop
 8008d74:	40021000 	andmi	r1, r2, r0

08008d78 <rcu_flag_get>:
 8008d78:	0983      	lsrs	r3, r0, #6
 8008d7a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8008d7e:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8008d82:	f000 001f 	and.w	r0, r0, #31
 8008d86:	681a      	ldr	r2, [r3, #0]
 8008d88:	2301      	movs	r3, #1
 8008d8a:	4083      	lsls	r3, r0
 8008d8c:	4213      	tst	r3, r2
 8008d8e:	bf14      	ite	ne
 8008d90:	2001      	movne	r0, #1
 8008d92:	2000      	moveq	r0, #0
 8008d94:	4770      	bx	lr
	...

08008d98 <rcu_osci_stab_wait>:
 8008d98:	f5b0 6f00 	cmp.w	r0, #2048	; 0x800
 8008d9c:	b508      	push	{r3, lr}
 8008d9e:	d028      	beq.n	8008df2 <rcu_osci_stab_wait+0x5a>
 8008da0:	d806      	bhi.n	8008db0 <rcu_osci_stab_wait+0x18>
 8008da2:	2810      	cmp	r0, #16
 8008da4:	d016      	beq.n	8008dd4 <rcu_osci_stab_wait+0x3c>
 8008da6:	2818      	cmp	r0, #24
 8008da8:	d044      	beq.n	8008e34 <rcu_osci_stab_wait+0x9c>
 8008daa:	b370      	cbz	r0, 8008e0a <rcu_osci_stab_wait+0x72>
 8008dac:	2000      	movs	r0, #0
 8008dae:	bd08      	pop	{r3, pc}
 8008db0:	f5b0 6f10 	cmp.w	r0, #2304	; 0x900
 8008db4:	d033      	beq.n	8008e1e <rcu_osci_stab_wait+0x86>
 8008db6:	f243 0310 	movw	r3, #12304	; 0x3010
 8008dba:	4298      	cmp	r0, r3
 8008dbc:	d1f6      	bne.n	8008dac <rcu_osci_stab_wait+0x14>
 8008dbe:	4922      	ldr	r1, [pc, #136]	; (8008e48 <rcu_osci_stab_wait+0xb0>)
 8008dc0:	f243 0011 	movw	r0, #12305	; 0x3011
 8008dc4:	f7ff ffd8 	bl	8008d78 <rcu_flag_get>
 8008dc8:	b908      	cbnz	r0, 8008dce <rcu_osci_stab_wait+0x36>
 8008dca:	3901      	subs	r1, #1
 8008dcc:	d1f8      	bne.n	8008dc0 <rcu_osci_stab_wait+0x28>
 8008dce:	f243 0011 	movw	r0, #12305	; 0x3011
 8008dd2:	e008      	b.n	8008de6 <rcu_osci_stab_wait+0x4e>
 8008dd4:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8008dd8:	2011      	movs	r0, #17
 8008dda:	f7ff ffcd 	bl	8008d78 <rcu_flag_get>
 8008dde:	b908      	cbnz	r0, 8008de4 <rcu_osci_stab_wait+0x4c>
 8008de0:	3901      	subs	r1, #1
 8008de2:	d1f9      	bne.n	8008dd8 <rcu_osci_stab_wait+0x40>
 8008de4:	2011      	movs	r0, #17
 8008de6:	f7ff ffc7 	bl	8008d78 <rcu_flag_get>
 8008dea:	3800      	subs	r0, #0
 8008dec:	bf18      	it	ne
 8008dee:	2001      	movne	r0, #1
 8008df0:	e7dd      	b.n	8008dae <rcu_osci_stab_wait+0x16>
 8008df2:	f06f 417c 	mvn.w	r1, #4227858432	; 0xfc000000
 8008df6:	f640 0001 	movw	r0, #2049	; 0x801
 8008dfa:	f7ff ffbd 	bl	8008d78 <rcu_flag_get>
 8008dfe:	b908      	cbnz	r0, 8008e04 <rcu_osci_stab_wait+0x6c>
 8008e00:	3901      	subs	r1, #1
 8008e02:	d1f8      	bne.n	8008df6 <rcu_osci_stab_wait+0x5e>
 8008e04:	f640 0001 	movw	r0, #2049	; 0x801
 8008e08:	e7ed      	b.n	8008de6 <rcu_osci_stab_wait+0x4e>
 8008e0a:	f44f 61a0 	mov.w	r1, #1280	; 0x500
 8008e0e:	2001      	movs	r0, #1
 8008e10:	f7ff ffb2 	bl	8008d78 <rcu_flag_get>
 8008e14:	b908      	cbnz	r0, 8008e1a <rcu_osci_stab_wait+0x82>
 8008e16:	3901      	subs	r1, #1
 8008e18:	d1f9      	bne.n	8008e0e <rcu_osci_stab_wait+0x76>
 8008e1a:	2001      	movs	r0, #1
 8008e1c:	e7e3      	b.n	8008de6 <rcu_osci_stab_wait+0x4e>
 8008e1e:	490a      	ldr	r1, [pc, #40]	; (8008e48 <rcu_osci_stab_wait+0xb0>)
 8008e20:	f640 1001 	movw	r0, #2305	; 0x901
 8008e24:	f7ff ffa8 	bl	8008d78 <rcu_flag_get>
 8008e28:	b908      	cbnz	r0, 8008e2e <rcu_osci_stab_wait+0x96>
 8008e2a:	3901      	subs	r1, #1
 8008e2c:	d1f8      	bne.n	8008e20 <rcu_osci_stab_wait+0x88>
 8008e2e:	f640 1001 	movw	r0, #2305	; 0x901
 8008e32:	e7d8      	b.n	8008de6 <rcu_osci_stab_wait+0x4e>
 8008e34:	4904      	ldr	r1, [pc, #16]	; (8008e48 <rcu_osci_stab_wait+0xb0>)
 8008e36:	2019      	movs	r0, #25
 8008e38:	f7ff ff9e 	bl	8008d78 <rcu_flag_get>
 8008e3c:	b908      	cbnz	r0, 8008e42 <rcu_osci_stab_wait+0xaa>
 8008e3e:	3901      	subs	r1, #1
 8008e40:	d1f9      	bne.n	8008e36 <rcu_osci_stab_wait+0x9e>
 8008e42:	2019      	movs	r0, #25
 8008e44:	e7cf      	b.n	8008de6 <rcu_osci_stab_wait+0x4e>
 8008e46:	bf00      	nop
 8008e48:	000fffff 	strdeq	pc, [pc], -pc	; <UNPREDICTABLE>

08008e4c <rcu_osci_on>:
 8008e4c:	f7ff bf3c 	b.w	8008cc8 <rcu_periph_clock_enable>

08008e50 <rcu_clock_freq_get>:
 8008e50:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008e52:	4b35      	ldr	r3, [pc, #212]	; (8008f28 <rcu_clock_freq_get+0xd8>)
 8008e54:	b089      	sub	sp, #36	; 0x24
 8008e56:	4604      	mov	r4, r0
 8008e58:	ad04      	add	r5, sp, #16
 8008e5a:	f103 0610 	add.w	r6, r3, #16
 8008e5e:	461f      	mov	r7, r3
 8008e60:	6818      	ldr	r0, [r3, #0]
 8008e62:	6859      	ldr	r1, [r3, #4]
 8008e64:	462a      	mov	r2, r5
 8008e66:	c203      	stmia	r2!, {r0, r1}
 8008e68:	3308      	adds	r3, #8
 8008e6a:	42b3      	cmp	r3, r6
 8008e6c:	4615      	mov	r5, r2
 8008e6e:	d1f7      	bne.n	8008e60 <rcu_clock_freq_get+0x10>
 8008e70:	6938      	ldr	r0, [r7, #16]
 8008e72:	6871      	ldr	r1, [r6, #4]
 8008e74:	4a2d      	ldr	r2, [pc, #180]	; (8008f2c <rcu_clock_freq_get+0xdc>)
 8008e76:	466b      	mov	r3, sp
 8008e78:	c303      	stmia	r3!, {r0, r1}
 8008e7a:	c303      	stmia	r3!, {r0, r1}
 8008e7c:	6853      	ldr	r3, [r2, #4]
 8008e7e:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8008e82:	2b02      	cmp	r3, #2
 8008e84:	d143      	bne.n	8008f0e <rcu_clock_freq_get+0xbe>
 8008e86:	6853      	ldr	r3, [r2, #4]
 8008e88:	03df      	lsls	r7, r3, #15
 8008e8a:	d538      	bpl.n	8008efe <rcu_clock_freq_get+0xae>
 8008e8c:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8008e8e:	4928      	ldr	r1, [pc, #160]	; (8008f30 <rcu_clock_freq_get+0xe0>)
 8008e90:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8008e94:	4b27      	ldr	r3, [pc, #156]	; (8008f34 <rcu_clock_freq_get+0xe4>)
 8008e96:	bf18      	it	ne
 8008e98:	4619      	movne	r1, r3
 8008e9a:	6853      	ldr	r3, [r2, #4]
 8008e9c:	039e      	lsls	r6, r3, #14
 8008e9e:	d500      	bpl.n	8008ea2 <rcu_clock_freq_get+0x52>
 8008ea0:	0849      	lsrs	r1, r1, #1
 8008ea2:	6853      	ldr	r3, [r2, #4]
 8008ea4:	6850      	ldr	r0, [r2, #4]
 8008ea6:	0105      	lsls	r5, r0, #4
 8008ea8:	6850      	ldr	r0, [r2, #4]
 8008eaa:	f3c3 4383 	ubfx	r3, r3, #18, #4
 8008eae:	bf48      	it	mi
 8008eb0:	f043 0310 	orrmi.w	r3, r3, #16
 8008eb4:	0040      	lsls	r0, r0, #1
 8008eb6:	d524      	bpl.n	8008f02 <rcu_clock_freq_get+0xb2>
 8008eb8:	f043 0320 	orr.w	r3, r3, #32
 8008ebc:	2b3f      	cmp	r3, #63	; 0x3f
 8008ebe:	d124      	bne.n	8008f0a <rcu_clock_freq_get+0xba>
 8008ec0:	fb01 f003 	mul.w	r0, r1, r3
 8008ec4:	6853      	ldr	r3, [r2, #4]
 8008ec6:	6851      	ldr	r1, [r2, #4]
 8008ec8:	6852      	ldr	r2, [r2, #4]
 8008eca:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8008ece:	3320      	adds	r3, #32
 8008ed0:	446b      	add	r3, sp
 8008ed2:	f3c1 2102 	ubfx	r1, r1, #8, #3
 8008ed6:	f3c2 22c2 	ubfx	r2, r2, #11, #3
 8008eda:	3120      	adds	r1, #32
 8008edc:	3220      	adds	r2, #32
 8008ede:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8008ee2:	4469      	add	r1, sp
 8008ee4:	446a      	add	r2, sp
 8008ee6:	f811 1c20 	ldrb.w	r1, [r1, #-32]
 8008eea:	f812 2c18 	ldrb.w	r2, [r2, #-24]
 8008eee:	fa20 f303 	lsr.w	r3, r0, r3
 8008ef2:	2c03      	cmp	r4, #3
 8008ef4:	d816      	bhi.n	8008f24 <rcu_clock_freq_get+0xd4>
 8008ef6:	e8df f004 	tbb	[pc, r4]
 8008efa:	120f0c0d 	andne	r0, pc, #3328	; 0xd00
 8008efe:	490e      	ldr	r1, [pc, #56]	; (8008f38 <rcu_clock_freq_get+0xe8>)
 8008f00:	e7cf      	b.n	8008ea2 <rcu_clock_freq_get+0x52>
 8008f02:	2b0e      	cmp	r3, #14
 8008f04:	d801      	bhi.n	8008f0a <rcu_clock_freq_get+0xba>
 8008f06:	3302      	adds	r3, #2
 8008f08:	e7da      	b.n	8008ec0 <rcu_clock_freq_get+0x70>
 8008f0a:	3301      	adds	r3, #1
 8008f0c:	e7d8      	b.n	8008ec0 <rcu_clock_freq_get+0x70>
 8008f0e:	4808      	ldr	r0, [pc, #32]	; (8008f30 <rcu_clock_freq_get+0xe0>)
 8008f10:	e7d8      	b.n	8008ec4 <rcu_clock_freq_get+0x74>
 8008f12:	4618      	mov	r0, r3
 8008f14:	b009      	add	sp, #36	; 0x24
 8008f16:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008f18:	fa23 f001 	lsr.w	r0, r3, r1
 8008f1c:	e7fa      	b.n	8008f14 <rcu_clock_freq_get+0xc4>
 8008f1e:	fa23 f002 	lsr.w	r0, r3, r2
 8008f22:	e7f7      	b.n	8008f14 <rcu_clock_freq_get+0xc4>
 8008f24:	2000      	movs	r0, #0
 8008f26:	e7f5      	b.n	8008f14 <rcu_clock_freq_get+0xc4>
 8008f28:	08009ec9 	stmdaeq	r0, {r0, r3, r6, r7, r9, sl, fp, ip, pc}
 8008f2c:	40021000 	andmi	r1, r2, r0
 8008f30:	007a1200 	rsbseq	r1, sl, r0, lsl #4
 8008f34:	02dc6c00 	sbcseq	r6, ip, #0, 24
 8008f38:	003d0900 	eorseq	r0, sp, r0, lsl #18

08008f3c <rtc_configuration_mode_enter>:
 8008f3c:	4a03      	ldr	r2, [pc, #12]	; (8008f4c <rtc_configuration_mode_enter+0x10>)
 8008f3e:	f8d2 3804 	ldr.w	r3, [r2, #2052]	; 0x804
 8008f42:	f043 0310 	orr.w	r3, r3, #16
 8008f46:	f8c2 3804 	str.w	r3, [r2, #2052]	; 0x804
 8008f4a:	4770      	bx	lr
 8008f4c:	40002000 	andmi	r2, r0, r0

08008f50 <rtc_configuration_mode_exit>:
 8008f50:	4a03      	ldr	r2, [pc, #12]	; (8008f60 <rtc_configuration_mode_exit+0x10>)
 8008f52:	f8d2 3804 	ldr.w	r3, [r2, #2052]	; 0x804
 8008f56:	f023 0310 	bic.w	r3, r3, #16
 8008f5a:	f8c2 3804 	str.w	r3, [r2, #2052]	; 0x804
 8008f5e:	4770      	bx	lr
 8008f60:	40002000 	andmi	r2, r0, r0

08008f64 <rtc_lwoff_wait>:
 8008f64:	4a02      	ldr	r2, [pc, #8]	; (8008f70 <rtc_lwoff_wait+0xc>)
 8008f66:	f8d2 3804 	ldr.w	r3, [r2, #2052]	; 0x804
 8008f6a:	069b      	lsls	r3, r3, #26
 8008f6c:	d5fb      	bpl.n	8008f66 <rtc_lwoff_wait+0x2>
 8008f6e:	4770      	bx	lr
 8008f70:	40002000 	andmi	r2, r0, r0

08008f74 <rtc_register_sync_wait>:
 8008f74:	4b05      	ldr	r3, [pc, #20]	; (8008f8c <rtc_register_sync_wait+0x18>)
 8008f76:	f8d3 2804 	ldr.w	r2, [r3, #2052]	; 0x804
 8008f7a:	f022 0208 	bic.w	r2, r2, #8
 8008f7e:	f8c3 2804 	str.w	r2, [r3, #2052]	; 0x804
 8008f82:	f8d3 2804 	ldr.w	r2, [r3, #2052]	; 0x804
 8008f86:	0712      	lsls	r2, r2, #28
 8008f88:	d5fb      	bpl.n	8008f82 <rtc_register_sync_wait+0xe>
 8008f8a:	4770      	bx	lr
 8008f8c:	40002000 	andmi	r2, r0, r0

08008f90 <rtc_counter_get>:
 8008f90:	4b03      	ldr	r3, [pc, #12]	; (8008fa0 <rtc_counter_get+0x10>)
 8008f92:	f8d3 281c 	ldr.w	r2, [r3, #2076]	; 0x81c
 8008f96:	f8d3 0818 	ldr.w	r0, [r3, #2072]	; 0x818
 8008f9a:	ea42 4000 	orr.w	r0, r2, r0, lsl #16
 8008f9e:	4770      	bx	lr
 8008fa0:	40002000 	andmi	r2, r0, r0

08008fa4 <rtc_counter_set>:
 8008fa4:	b508      	push	{r3, lr}
 8008fa6:	f7ff ffc9 	bl	8008f3c <rtc_configuration_mode_enter>
 8008faa:	4b05      	ldr	r3, [pc, #20]	; (8008fc0 <rtc_counter_set+0x1c>)
 8008fac:	0c02      	lsrs	r2, r0, #16
 8008fae:	b280      	uxth	r0, r0
 8008fb0:	f8c3 2818 	str.w	r2, [r3, #2072]	; 0x818
 8008fb4:	f8c3 081c 	str.w	r0, [r3, #2076]	; 0x81c
 8008fb8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8008fbc:	f7ff bfc8 	b.w	8008f50 <rtc_configuration_mode_exit>
 8008fc0:	40002000 	andmi	r2, r0, r0

08008fc4 <rtc_prescaler_set>:
 8008fc4:	b508      	push	{r3, lr}
 8008fc6:	f7ff ffb9 	bl	8008f3c <rtc_configuration_mode_enter>
 8008fca:	4b06      	ldr	r3, [pc, #24]	; (8008fe4 <rtc_prescaler_set+0x20>)
 8008fcc:	f3c0 4203 	ubfx	r2, r0, #16, #4
 8008fd0:	b280      	uxth	r0, r0
 8008fd2:	f8c3 2808 	str.w	r2, [r3, #2056]	; 0x808
 8008fd6:	f8c3 080c 	str.w	r0, [r3, #2060]	; 0x80c
 8008fda:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8008fde:	f7ff bfb7 	b.w	8008f50 <rtc_configuration_mode_exit>
 8008fe2:	bf00      	nop
 8008fe4:	40002000 	andmi	r2, r0, r0

08008fe8 <timer_deinit>:
 8008fe8:	b508      	push	{r3, lr}
 8008fea:	4b2d      	ldr	r3, [pc, #180]	; (80090a0 <timer_deinit+0xb8>)
 8008fec:	4298      	cmp	r0, r3
 8008fee:	d048      	beq.n	8009082 <timer_deinit+0x9a>
 8008ff0:	d816      	bhi.n	8009020 <timer_deinit+0x38>
 8008ff2:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 8008ff6:	4298      	cmp	r0, r3
 8008ff8:	d03c      	beq.n	8009074 <timer_deinit+0x8c>
 8008ffa:	d807      	bhi.n	800900c <timer_deinit+0x24>
 8008ffc:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8009000:	d02a      	beq.n	8009058 <timer_deinit+0x70>
 8009002:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8009006:	4298      	cmp	r0, r3
 8009008:	d02d      	beq.n	8009066 <timer_deinit+0x7e>
 800900a:	bd08      	pop	{r3, pc}
 800900c:	4b25      	ldr	r3, [pc, #148]	; (80090a4 <timer_deinit+0xbc>)
 800900e:	4298      	cmp	r0, r3
 8009010:	d1fb      	bne.n	800900a <timer_deinit+0x22>
 8009012:	f240 4003 	movw	r0, #1027	; 0x403
 8009016:	f7ff fe72 	bl	8008cfe <rcu_periph_reset_enable>
 800901a:	f240 4003 	movw	r0, #1027	; 0x403
 800901e:	e017      	b.n	8009050 <timer_deinit+0x68>
 8009020:	4b21      	ldr	r3, [pc, #132]	; (80090a8 <timer_deinit+0xc0>)
 8009022:	4298      	cmp	r0, r3
 8009024:	d00e      	beq.n	8009044 <timer_deinit+0x5c>
 8009026:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800902a:	4298      	cmp	r0, r3
 800902c:	d030      	beq.n	8009090 <timer_deinit+0xa8>
 800902e:	f5a3 3390 	sub.w	r3, r3, #73728	; 0x12000
 8009032:	4298      	cmp	r0, r3
 8009034:	d1e9      	bne.n	800900a <timer_deinit+0x22>
 8009036:	f240 4005 	movw	r0, #1029	; 0x405
 800903a:	f7ff fe60 	bl	8008cfe <rcu_periph_reset_enable>
 800903e:	f240 4005 	movw	r0, #1029	; 0x405
 8009042:	e005      	b.n	8009050 <timer_deinit+0x68>
 8009044:	f240 300b 	movw	r0, #779	; 0x30b
 8009048:	f7ff fe59 	bl	8008cfe <rcu_periph_reset_enable>
 800904c:	f240 300b 	movw	r0, #779	; 0x30b
 8009050:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8009054:	f7ff be55 	b.w	8008d02 <rcu_periph_reset_disable>
 8009058:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800905c:	f7ff fe4f 	bl	8008cfe <rcu_periph_reset_enable>
 8009060:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8009064:	e7f4      	b.n	8009050 <timer_deinit+0x68>
 8009066:	f240 4001 	movw	r0, #1025	; 0x401
 800906a:	f7ff fe48 	bl	8008cfe <rcu_periph_reset_enable>
 800906e:	f240 4001 	movw	r0, #1025	; 0x401
 8009072:	e7ed      	b.n	8009050 <timer_deinit+0x68>
 8009074:	f240 4002 	movw	r0, #1026	; 0x402
 8009078:	f7ff fe41 	bl	8008cfe <rcu_periph_reset_enable>
 800907c:	f240 4002 	movw	r0, #1026	; 0x402
 8009080:	e7e6      	b.n	8009050 <timer_deinit+0x68>
 8009082:	f240 4004 	movw	r0, #1028	; 0x404
 8009086:	f7ff fe3a 	bl	8008cfe <rcu_periph_reset_enable>
 800908a:	f240 4004 	movw	r0, #1028	; 0x404
 800908e:	e7df      	b.n	8009050 <timer_deinit+0x68>
 8009090:	f240 300d 	movw	r0, #781	; 0x30d
 8009094:	f7ff fe33 	bl	8008cfe <rcu_periph_reset_enable>
 8009098:	f240 300d 	movw	r0, #781	; 0x30d
 800909c:	e7d8      	b.n	8009050 <timer_deinit+0x68>
 800909e:	bf00      	nop
 80090a0:	40001000 	andmi	r1, r0, r0
 80090a4:	40000c00 	andmi	r0, r0, r0, lsl #24
 80090a8:	40012c00 	andmi	r2, r1, r0, lsl #24

080090ac <timer_init>:
 80090ac:	880b      	ldrh	r3, [r1, #0]
 80090ae:	6283      	str	r3, [r0, #40]	; 0x28
 80090b0:	4b1a      	ldr	r3, [pc, #104]	; (800911c <timer_init+0x70>)
 80090b2:	4298      	cmp	r0, r3
 80090b4:	d007      	beq.n	80090c6 <timer_init+0x1a>
 80090b6:	f420 6340 	bic.w	r3, r0, #3072	; 0xc00
 80090ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80090be:	d002      	beq.n	80090c6 <timer_init+0x1a>
 80090c0:	4b17      	ldr	r3, [pc, #92]	; (8009120 <timer_init+0x74>)
 80090c2:	4298      	cmp	r0, r3
 80090c4:	d10b      	bne.n	80090de <timer_init+0x32>
 80090c6:	6803      	ldr	r3, [r0, #0]
 80090c8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80090cc:	6003      	str	r3, [r0, #0]
 80090ce:	6802      	ldr	r2, [r0, #0]
 80090d0:	884b      	ldrh	r3, [r1, #2]
 80090d2:	4313      	orrs	r3, r2
 80090d4:	6003      	str	r3, [r0, #0]
 80090d6:	6802      	ldr	r2, [r0, #0]
 80090d8:	888b      	ldrh	r3, [r1, #4]
 80090da:	4313      	orrs	r3, r2
 80090dc:	6003      	str	r3, [r0, #0]
 80090de:	688b      	ldr	r3, [r1, #8]
 80090e0:	62c3      	str	r3, [r0, #44]	; 0x2c
 80090e2:	4b10      	ldr	r3, [pc, #64]	; (8009124 <timer_init+0x78>)
 80090e4:	4298      	cmp	r0, r3
 80090e6:	d003      	beq.n	80090f0 <timer_init+0x44>
 80090e8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80090ec:	4298      	cmp	r0, r3
 80090ee:	d104      	bne.n	80090fa <timer_init+0x4e>
 80090f0:	6943      	ldr	r3, [r0, #20]
 80090f2:	f043 0301 	orr.w	r3, r3, #1
 80090f6:	6143      	str	r3, [r0, #20]
 80090f8:	4770      	bx	lr
 80090fa:	6803      	ldr	r3, [r0, #0]
 80090fc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009100:	6003      	str	r3, [r0, #0]
 8009102:	6802      	ldr	r2, [r0, #0]
 8009104:	88cb      	ldrh	r3, [r1, #6]
 8009106:	4313      	orrs	r3, r2
 8009108:	6003      	str	r3, [r0, #0]
 800910a:	4b04      	ldr	r3, [pc, #16]	; (800911c <timer_init+0x70>)
 800910c:	4298      	cmp	r0, r3
 800910e:	d002      	beq.n	8009116 <timer_init+0x6a>
 8009110:	4b03      	ldr	r3, [pc, #12]	; (8009120 <timer_init+0x74>)
 8009112:	4298      	cmp	r0, r3
 8009114:	d1ec      	bne.n	80090f0 <timer_init+0x44>
 8009116:	7b0b      	ldrb	r3, [r1, #12]
 8009118:	6303      	str	r3, [r0, #48]	; 0x30
 800911a:	e7e9      	b.n	80090f0 <timer_init+0x44>
 800911c:	40012c00 	andmi	r2, r1, r0, lsl #24
 8009120:	40013400 	andmi	r3, r1, r0, lsl #8
 8009124:	40001000 	andmi	r1, r0, r0

08009128 <timer_enable>:
 8009128:	6803      	ldr	r3, [r0, #0]
 800912a:	f043 0301 	orr.w	r3, r3, #1
 800912e:	6003      	str	r3, [r0, #0]
 8009130:	4770      	bx	lr

08009132 <timer_interrupt_enable>:
 8009132:	68c3      	ldr	r3, [r0, #12]
 8009134:	4319      	orrs	r1, r3
 8009136:	60c1      	str	r1, [r0, #12]
 8009138:	4770      	bx	lr

0800913a <timer_interrupt_flag_clear>:
 800913a:	43c9      	mvns	r1, r1
 800913c:	6101      	str	r1, [r0, #16]
 800913e:	4770      	bx	lr

08009140 <timer_flag_clear>:
 8009140:	43c9      	mvns	r1, r1
 8009142:	6101      	str	r1, [r0, #16]
 8009144:	4770      	bx	lr

08009146 <timer_channel_output_mode_config>:
 8009146:	2903      	cmp	r1, #3
 8009148:	d81a      	bhi.n	8009180 <timer_channel_output_mode_config+0x3a>
 800914a:	e8df f001 	tbb	[pc, r1]
 800914e:	1a120a02 	bne	848b95e <__exidx_end+0x47f9f2>
 8009152:	6983      	ldr	r3, [r0, #24]
 8009154:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009158:	6183      	str	r3, [r0, #24]
 800915a:	6983      	ldr	r3, [r0, #24]
 800915c:	4313      	orrs	r3, r2
 800915e:	6183      	str	r3, [r0, #24]
 8009160:	4770      	bx	lr
 8009162:	6983      	ldr	r3, [r0, #24]
 8009164:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009168:	6183      	str	r3, [r0, #24]
 800916a:	6983      	ldr	r3, [r0, #24]
 800916c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8009170:	e7f5      	b.n	800915e <timer_channel_output_mode_config+0x18>
 8009172:	69c3      	ldr	r3, [r0, #28]
 8009174:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009178:	61c3      	str	r3, [r0, #28]
 800917a:	69c3      	ldr	r3, [r0, #28]
 800917c:	4313      	orrs	r3, r2
 800917e:	61c3      	str	r3, [r0, #28]
 8009180:	4770      	bx	lr
 8009182:	69c3      	ldr	r3, [r0, #28]
 8009184:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009188:	61c3      	str	r3, [r0, #28]
 800918a:	69c3      	ldr	r3, [r0, #28]
 800918c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8009190:	e7f5      	b.n	800917e <timer_channel_output_mode_config+0x38>

08009192 <timer_channel_output_pulse_value_config>:
 8009192:	2903      	cmp	r1, #3
 8009194:	d80a      	bhi.n	80091ac <timer_channel_output_pulse_value_config+0x1a>
 8009196:	e8df f001 	tbb	[pc, r1]
 800919a:	08060402 	stmdaeq	r6, {r1, sl}
 800919e:	6342      	str	r2, [r0, #52]	; 0x34
 80091a0:	4770      	bx	lr
 80091a2:	6382      	str	r2, [r0, #56]	; 0x38
 80091a4:	4770      	bx	lr
 80091a6:	63c2      	str	r2, [r0, #60]	; 0x3c
 80091a8:	4770      	bx	lr
 80091aa:	6402      	str	r2, [r0, #64]	; 0x40
 80091ac:	4770      	bx	lr
	...

080091b0 <usart_deinit>:
 80091b0:	b508      	push	{r3, lr}
 80091b2:	4b1d      	ldr	r3, [pc, #116]	; (8009228 <usart_deinit+0x78>)
 80091b4:	4298      	cmp	r0, r3
 80091b6:	d028      	beq.n	800920a <usart_deinit+0x5a>
 80091b8:	d808      	bhi.n	80091cc <usart_deinit+0x1c>
 80091ba:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 80091be:	4298      	cmp	r0, r3
 80091c0:	d015      	beq.n	80091ee <usart_deinit+0x3e>
 80091c2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80091c6:	4298      	cmp	r0, r3
 80091c8:	d018      	beq.n	80091fc <usart_deinit+0x4c>
 80091ca:	bd08      	pop	{r3, pc}
 80091cc:	4b17      	ldr	r3, [pc, #92]	; (800922c <usart_deinit+0x7c>)
 80091ce:	4298      	cmp	r0, r3
 80091d0:	d022      	beq.n	8009218 <usart_deinit+0x68>
 80091d2:	f503 4368 	add.w	r3, r3, #59392	; 0xe800
 80091d6:	4298      	cmp	r0, r3
 80091d8:	d1f7      	bne.n	80091ca <usart_deinit+0x1a>
 80091da:	f240 300e 	movw	r0, #782	; 0x30e
 80091de:	f7ff fd8e 	bl	8008cfe <rcu_periph_reset_enable>
 80091e2:	f240 300e 	movw	r0, #782	; 0x30e
 80091e6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80091ea:	f7ff bd8a 	b.w	8008d02 <rcu_periph_reset_disable>
 80091ee:	f240 4011 	movw	r0, #1041	; 0x411
 80091f2:	f7ff fd84 	bl	8008cfe <rcu_periph_reset_enable>
 80091f6:	f240 4011 	movw	r0, #1041	; 0x411
 80091fa:	e7f4      	b.n	80091e6 <usart_deinit+0x36>
 80091fc:	f240 4012 	movw	r0, #1042	; 0x412
 8009200:	f7ff fd7d 	bl	8008cfe <rcu_periph_reset_enable>
 8009204:	f240 4012 	movw	r0, #1042	; 0x412
 8009208:	e7ed      	b.n	80091e6 <usart_deinit+0x36>
 800920a:	f240 4013 	movw	r0, #1043	; 0x413
 800920e:	f7ff fd76 	bl	8008cfe <rcu_periph_reset_enable>
 8009212:	f240 4013 	movw	r0, #1043	; 0x413
 8009216:	e7e6      	b.n	80091e6 <usart_deinit+0x36>
 8009218:	f240 4014 	movw	r0, #1044	; 0x414
 800921c:	f7ff fd6f 	bl	8008cfe <rcu_periph_reset_enable>
 8009220:	f240 4014 	movw	r0, #1044	; 0x414
 8009224:	e7df      	b.n	80091e6 <usart_deinit+0x36>
 8009226:	bf00      	nop
 8009228:	40004c00 	andmi	r4, r0, r0, lsl #24
 800922c:	40005000 	andmi	r5, r0, r0

08009230 <usart_baudrate_set>:
 8009230:	b538      	push	{r3, r4, r5, lr}
 8009232:	4b11      	ldr	r3, [pc, #68]	; (8009278 <usart_baudrate_set+0x48>)
 8009234:	4298      	cmp	r0, r3
 8009236:	4604      	mov	r4, r0
 8009238:	460d      	mov	r5, r1
 800923a:	d01b      	beq.n	8009274 <usart_baudrate_set+0x44>
 800923c:	d809      	bhi.n	8009252 <usart_baudrate_set+0x22>
 800923e:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 8009242:	4298      	cmp	r0, r3
 8009244:	d016      	beq.n	8009274 <usart_baudrate_set+0x44>
 8009246:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800924a:	4298      	cmp	r0, r3
 800924c:	d012      	beq.n	8009274 <usart_baudrate_set+0x44>
 800924e:	2000      	movs	r0, #0
 8009250:	e009      	b.n	8009266 <usart_baudrate_set+0x36>
 8009252:	4b0a      	ldr	r3, [pc, #40]	; (800927c <usart_baudrate_set+0x4c>)
 8009254:	4298      	cmp	r0, r3
 8009256:	d00d      	beq.n	8009274 <usart_baudrate_set+0x44>
 8009258:	f503 4368 	add.w	r3, r3, #59392	; 0xe800
 800925c:	4298      	cmp	r0, r3
 800925e:	d1f6      	bne.n	800924e <usart_baudrate_set+0x1e>
 8009260:	2003      	movs	r0, #3
 8009262:	f7ff fdf5 	bl	8008e50 <rcu_clock_freq_get>
 8009266:	eb00 0355 	add.w	r3, r0, r5, lsr #1
 800926a:	fbb3 f1f5 	udiv	r1, r3, r5
 800926e:	b289      	uxth	r1, r1
 8009270:	60a1      	str	r1, [r4, #8]
 8009272:	bd38      	pop	{r3, r4, r5, pc}
 8009274:	2002      	movs	r0, #2
 8009276:	e7f4      	b.n	8009262 <usart_baudrate_set+0x32>
 8009278:	40004c00 	andmi	r4, r0, r0, lsl #24
 800927c:	40005000 	andmi	r5, r0, r0

08009280 <usart_parity_config>:
 8009280:	68c3      	ldr	r3, [r0, #12]
 8009282:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8009286:	60c3      	str	r3, [r0, #12]
 8009288:	68c3      	ldr	r3, [r0, #12]
 800928a:	4319      	orrs	r1, r3
 800928c:	60c1      	str	r1, [r0, #12]
 800928e:	4770      	bx	lr

08009290 <usart_word_length_set>:
 8009290:	68c3      	ldr	r3, [r0, #12]
 8009292:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009296:	60c3      	str	r3, [r0, #12]
 8009298:	68c3      	ldr	r3, [r0, #12]
 800929a:	4319      	orrs	r1, r3
 800929c:	60c1      	str	r1, [r0, #12]
 800929e:	4770      	bx	lr

080092a0 <usart_stop_bit_set>:
 80092a0:	6903      	ldr	r3, [r0, #16]
 80092a2:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80092a6:	6103      	str	r3, [r0, #16]
 80092a8:	6903      	ldr	r3, [r0, #16]
 80092aa:	4319      	orrs	r1, r3
 80092ac:	6101      	str	r1, [r0, #16]
 80092ae:	4770      	bx	lr

080092b0 <usart_transmit_config>:
 80092b0:	68c3      	ldr	r3, [r0, #12]
 80092b2:	f023 0308 	bic.w	r3, r3, #8
 80092b6:	4319      	orrs	r1, r3
 80092b8:	60c1      	str	r1, [r0, #12]
 80092ba:	4770      	bx	lr

080092bc <usart_receive_config>:
 80092bc:	68c3      	ldr	r3, [r0, #12]
 80092be:	f023 0304 	bic.w	r3, r3, #4
 80092c2:	4319      	orrs	r1, r3
 80092c4:	60c1      	str	r1, [r0, #12]
 80092c6:	4770      	bx	lr

080092c8 <usart_hardware_flow_rts_config>:
 80092c8:	6943      	ldr	r3, [r0, #20]
 80092ca:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80092ce:	4319      	orrs	r1, r3
 80092d0:	6141      	str	r1, [r0, #20]
 80092d2:	4770      	bx	lr

080092d4 <usart_hardware_flow_cts_config>:
 80092d4:	6943      	ldr	r3, [r0, #20]
 80092d6:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80092da:	4319      	orrs	r1, r3
 80092dc:	6141      	str	r1, [r0, #20]
 80092de:	4770      	bx	lr

080092e0 <usart_dma_transmit_config>:
 80092e0:	6943      	ldr	r3, [r0, #20]
 80092e2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80092e6:	4319      	orrs	r1, r3
 80092e8:	6141      	str	r1, [r0, #20]
 80092ea:	4770      	bx	lr

080092ec <usart_flag_get>:
 80092ec:	098b      	lsrs	r3, r1, #6
 80092ee:	f001 011f 	and.w	r1, r1, #31
 80092f2:	581a      	ldr	r2, [r3, r0]
 80092f4:	2301      	movs	r3, #1
 80092f6:	408b      	lsls	r3, r1
 80092f8:	4213      	tst	r3, r2
 80092fa:	bf14      	ite	ne
 80092fc:	2001      	movne	r0, #1
 80092fe:	2000      	moveq	r0, #0
 8009300:	4770      	bx	lr

08009302 <usart_flag_clear>:
 8009302:	b510      	push	{r4, lr}
 8009304:	098c      	lsrs	r4, r1, #6
 8009306:	2201      	movs	r2, #1
 8009308:	5823      	ldr	r3, [r4, r0]
 800930a:	f001 011f 	and.w	r1, r1, #31
 800930e:	408a      	lsls	r2, r1
 8009310:	ea23 0302 	bic.w	r3, r3, r2
 8009314:	5023      	str	r3, [r4, r0]
 8009316:	bd10      	pop	{r4, pc}

08009318 <usart_interrupt_enable>:
 8009318:	098a      	lsrs	r2, r1, #6
 800931a:	b510      	push	{r4, lr}
 800931c:	f001 011f 	and.w	r1, r1, #31
 8009320:	5814      	ldr	r4, [r2, r0]
 8009322:	2301      	movs	r3, #1
 8009324:	408b      	lsls	r3, r1
 8009326:	4323      	orrs	r3, r4
 8009328:	5013      	str	r3, [r2, r0]
 800932a:	bd10      	pop	{r4, pc}

0800932c <usart_interrupt_disable>:
 800932c:	f7ff bfe9 	b.w	8009302 <usart_flag_clear>

08009330 <usart_interrupt_flag_clear>:
 8009330:	b510      	push	{r4, lr}
 8009332:	0d8c      	lsrs	r4, r1, #22
 8009334:	2201      	movs	r2, #1
 8009336:	5823      	ldr	r3, [r4, r0]
 8009338:	f3c1 4104 	ubfx	r1, r1, #16, #5
 800933c:	408a      	lsls	r2, r1
 800933e:	ea23 0302 	bic.w	r3, r3, r2
 8009342:	5023      	str	r3, [r4, r0]
 8009344:	bd10      	pop	{r4, pc}
	...

08009348 <gd32_adc_init()>:
 8009348:	b510      	push	{r4, lr}
 800934a:	f240 6009 	movw	r0, #1545	; 0x609
 800934e:	4c21      	ldr	r4, [pc, #132]	; (80093d4 <gd32_adc_init()+0x8c>)
 8009350:	f7ff fcba 	bl	8008cc8 <rcu_periph_clock_enable>
 8009354:	2005      	movs	r0, #5
 8009356:	f7ff fcd7 	bl	8008d08 <rcu_adc_clock_config>
 800935a:	4620      	mov	r0, r4
 800935c:	2201      	movs	r2, #1
 800935e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8009362:	f000 fbcf 	bl	8009b04 <adc_special_function_config>
 8009366:	f44f 42e0 	mov.w	r2, #28672	; 0x7000
 800936a:	4620      	mov	r0, r4
 800936c:	2102      	movs	r1, #2
 800936e:	f000 fc60 	bl	8009c32 <adc_external_trigger_source_config>
 8009372:	2100      	movs	r1, #0
 8009374:	4620      	mov	r0, r4
 8009376:	f000 fbed 	bl	8009b54 <adc_data_alignment_config>
 800937a:	2000      	movs	r0, #0
 800937c:	f000 fbb2 	bl	8009ae4 <adc_mode_config>
 8009380:	2202      	movs	r2, #2
 8009382:	4611      	mov	r1, r2
 8009384:	4620      	mov	r0, r4
 8009386:	f000 fbee 	bl	8009b66 <adc_channel_length_config>
 800938a:	4620      	mov	r0, r4
 800938c:	2307      	movs	r3, #7
 800938e:	2210      	movs	r2, #16
 8009390:	2100      	movs	r1, #0
 8009392:	f000 fc05 	bl	8009ba0 <adc_inserted_channel_config>
 8009396:	2307      	movs	r3, #7
 8009398:	4620      	mov	r0, r4
 800939a:	2211      	movs	r2, #17
 800939c:	2101      	movs	r1, #1
 800939e:	f000 fbff 	bl	8009ba0 <adc_inserted_channel_config>
 80093a2:	2201      	movs	r2, #1
 80093a4:	2102      	movs	r1, #2
 80093a6:	4620      	mov	r0, r4
 80093a8:	f000 fc28 	bl	8009bfc <adc_external_trigger_config>
 80093ac:	f000 fb90 	bl	8009ad0 <adc_tempsensor_vrefint_enable>
 80093b0:	4620      	mov	r0, r4
 80093b2:	f000 fb73 	bl	8009a9c <adc_enable>
 80093b6:	2100      	movs	r1, #0
 80093b8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80093bc:	f000 fb56 	bl	8009a6c <udelay(unsigned int, unsigned int)>
 80093c0:	4620      	mov	r0, r4
 80093c2:	f000 fb73 	bl	8009aac <adc_calibration_enable>
 80093c6:	4620      	mov	r0, r4
 80093c8:	2102      	movs	r1, #2
 80093ca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80093ce:	f000 bc41 	b.w	8009c54 <adc_software_trigger_enable>
 80093d2:	bf00      	nop
 80093d4:	40012400 	andmi	r2, r1, r0, lsl #8

080093d8 <gd32_adc_gettemp()>:
 80093d8:	b508      	push	{r3, lr}
 80093da:	4b14      	ldr	r3, [pc, #80]	; (800942c <gd32_adc_gettemp()+0x54>)
 80093dc:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8009430 <gd32_adc_gettemp()+0x58>
 80093e0:	eddf 6a14 	vldr	s13, [pc, #80]	; 8009434 <gd32_adc_gettemp()+0x5c>
 80093e4:	4814      	ldr	r0, [pc, #80]	; (8009438 <gd32_adc_gettemp()+0x60>)
 80093e6:	f203 433c 	addw	r3, r3, #1084	; 0x43c
 80093ea:	edd3 7a00 	vldr	s15, [r3]
 80093ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80093f2:	ed2d 8b02 	vpush	{d8}
 80093f6:	ee27 7a67 	vnmul.f32	s14, s14, s15
 80093fa:	eddf 7a10 	vldr	s15, [pc, #64]	; 800943c <gd32_adc_gettemp()+0x64>
 80093fe:	eee7 7a26 	vfma.f32	s15, s14, s13
 8009402:	2102      	movs	r1, #2
 8009404:	eeb0 8a67 	vmov.f32	s16, s15
 8009408:	f000 fc24 	bl	8009c54 <adc_software_trigger_enable>
 800940c:	eddf 7a0c 	vldr	s15, [pc, #48]	; 8009440 <gd32_adc_gettemp()+0x68>
 8009410:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8009444 <gd32_adc_gettemp()+0x6c>
 8009414:	ee68 7a27 	vmul.f32	s15, s16, s15
 8009418:	ecbd 8b02 	vpop	{d8}
 800941c:	ee87 0a87 	vdiv.f32	s0, s15, s14
 8009420:	eef3 7a09 	vmov.f32	s15, #57	; 0x41c80000  25.0
 8009424:	ee30 0a27 	vadd.f32	s0, s0, s15
 8009428:	bd08      	pop	{r3, pc}
 800942a:	bf00      	nop
 800942c:	40012000 	andmi	r2, r1, r0
 8009430:	40533333 	subsmi	r3, r3, r3, lsr r3
 8009434:	39800000 	stmibcc	r0, {}	; <UNPREDICTABLE>
 8009438:	40012400 	andmi	r2, r1, r0, lsl #8
 800943c:	3fb70a3d 	svccc	0x00b70a3d
 8009440:	447a0000 	ldrbtmi	r0, [sl], #-0
 8009444:	4089999a 	umullmi	r9, r9, sl, r9	; <UNPREDICTABLE>

08009448 <_stop() [clone .isra.0]>:
 8009448:	b508      	push	{r3, lr}
 800944a:	4806      	ldr	r0, [pc, #24]	; (8009464 <_stop() [clone .isra.0]+0x1c>)
 800944c:	f000 fcb8 	bl	8009dc0 <i2c_stop_on_bus>
 8009450:	4905      	ldr	r1, [pc, #20]	; (8009468 <_stop() [clone .isra.0]+0x20>)
 8009452:	f640 73ff 	movw	r3, #4095	; 0xfff
 8009456:	f8d1 2400 	ldr.w	r2, [r1, #1024]	; 0x400
 800945a:	0592      	lsls	r2, r2, #22
 800945c:	d501      	bpl.n	8009462 <_stop() [clone .isra.0]+0x1a>
 800945e:	3b01      	subs	r3, #1
 8009460:	d1f9      	bne.n	8009456 <_stop() [clone .isra.0]+0xe>
 8009462:	bd08      	pop	{r3, pc}
 8009464:	40005400 	andmi	r5, r0, r0, lsl #8
 8009468:	40005000 	andmi	r5, r0, r0

0800946c <gd32_i2c_begin>:
 800946c:	b508      	push	{r3, lr}
 800946e:	f240 7015 	movw	r0, #1813	; 0x715
 8009472:	f7ff fc29 	bl	8008cc8 <rcu_periph_clock_enable>
 8009476:	f240 6003 	movw	r0, #1539	; 0x603
 800947a:	f7ff fc25 	bl	8008cc8 <rcu_periph_clock_enable>
 800947e:	f240 6003 	movw	r0, #1539	; 0x603
 8009482:	f7ff fc21 	bl	8008cc8 <rcu_periph_clock_enable>
 8009486:	4810      	ldr	r0, [pc, #64]	; (80094c8 <gd32_i2c_begin+0x5c>)
 8009488:	f44f 7380 	mov.w	r3, #256	; 0x100
 800948c:	2203      	movs	r2, #3
 800948e:	211c      	movs	r1, #28
 8009490:	f7ff fb82 	bl	8008b98 <gpio_init>
 8009494:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009498:	2203      	movs	r2, #3
 800949a:	480b      	ldr	r0, [pc, #44]	; (80094c8 <gd32_i2c_begin+0x5c>)
 800949c:	211c      	movs	r1, #28
 800949e:	f7ff fb7b 	bl	8008b98 <gpio_init>
 80094a2:	2101      	movs	r1, #1
 80094a4:	2002      	movs	r0, #2
 80094a6:	f7ff fbd7 	bl	8008c58 <gpio_pin_remap_config>
 80094aa:	4908      	ldr	r1, [pc, #32]	; (80094cc <gd32_i2c_begin+0x60>)
 80094ac:	4808      	ldr	r0, [pc, #32]	; (80094d0 <gd32_i2c_begin+0x64>)
 80094ae:	2200      	movs	r2, #0
 80094b0:	f000 fbde 	bl	8009c70 <i2c_clock_config>
 80094b4:	4806      	ldr	r0, [pc, #24]	; (80094d0 <gd32_i2c_begin+0x64>)
 80094b6:	f000 fc79 	bl	8009dac <i2c_enable>
 80094ba:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80094be:	4804      	ldr	r0, [pc, #16]	; (80094d0 <gd32_i2c_begin+0x64>)
 80094c0:	2101      	movs	r1, #1
 80094c2:	f000 bc59 	b.w	8009d78 <i2c_ack_config>
 80094c6:	bf00      	nop
 80094c8:	40010c00 	andmi	r0, r1, r0, lsl #24
 80094cc:	00061a80 	andeq	r1, r6, r0, lsl #21
 80094d0:	40005400 	andmi	r5, r0, r0, lsl #8

080094d4 <gd32_i2c_set_baudrate>:
 80094d4:	4601      	mov	r1, r0
 80094d6:	2200      	movs	r2, #0
 80094d8:	4801      	ldr	r0, [pc, #4]	; (80094e0 <gd32_i2c_set_baudrate+0xc>)
 80094da:	f000 bbc9 	b.w	8009c70 <i2c_clock_config>
 80094de:	bf00      	nop
 80094e0:	40005400 	andmi	r5, r0, r0, lsl #8

080094e4 <gd32_i2c_set_address>:
 80094e4:	4b01      	ldr	r3, [pc, #4]	; (80094ec <gd32_i2c_set_address+0x8>)
 80094e6:	0040      	lsls	r0, r0, #1
 80094e8:	7018      	strb	r0, [r3, #0]
 80094ea:	4770      	bx	lr
 80094ec:	200017b0 			; <UNDEFINED> instruction: 0x200017b0

080094f0 <gd32_i2c_write>:
 80094f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80094f2:	4e30      	ldr	r6, [pc, #192]	; (80095b4 <gd32_i2c_write+0xc4>)
 80094f4:	4604      	mov	r4, r0
 80094f6:	460f      	mov	r7, r1
 80094f8:	f640 75ff 	movw	r5, #4095	; 0xfff
 80094fc:	f240 6101 	movw	r1, #1537	; 0x601
 8009500:	4630      	mov	r0, r6
 8009502:	f000 fc67 	bl	8009dd4 <i2c_flag_get>
 8009506:	b9b0      	cbnz	r0, 8009536 <gd32_i2c_write+0x46>
 8009508:	482a      	ldr	r0, [pc, #168]	; (80095b4 <gd32_i2c_write+0xc4>)
 800950a:	4e2a      	ldr	r6, [pc, #168]	; (80095b4 <gd32_i2c_write+0xc4>)
 800950c:	f000 fc53 	bl	8009db6 <i2c_start_on_bus>
 8009510:	f640 75ff 	movw	r5, #4095	; 0xfff
 8009514:	f44f 61a0 	mov.w	r1, #1280	; 0x500
 8009518:	4630      	mov	r0, r6
 800951a:	f000 fc5b 	bl	8009dd4 <i2c_flag_get>
 800951e:	b190      	cbz	r0, 8009546 <gd32_i2c_write+0x56>
 8009520:	4b25      	ldr	r3, [pc, #148]	; (80095b8 <gd32_i2c_write+0xc8>)
 8009522:	4824      	ldr	r0, [pc, #144]	; (80095b4 <gd32_i2c_write+0xc4>)
 8009524:	7819      	ldrb	r1, [r3, #0]
 8009526:	4e23      	ldr	r6, [pc, #140]	; (80095b4 <gd32_i2c_write+0xc4>)
 8009528:	f06f 0201 	mvn.w	r2, #1
 800952c:	f000 fc36 	bl	8009d9c <i2c_master_addressing>
 8009530:	f640 75ff 	movw	r5, #4095	; 0xfff
 8009534:	e00c      	b.n	8009550 <gd32_i2c_write+0x60>
 8009536:	3d01      	subs	r5, #1
 8009538:	d1e0      	bne.n	80094fc <gd32_i2c_write+0xc>
 800953a:	f7ff ff85 	bl	8009448 <_stop() [clone .isra.0]>
 800953e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009542:	4240      	negs	r0, r0
 8009544:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009546:	3d01      	subs	r5, #1
 8009548:	d1e4      	bne.n	8009514 <gd32_i2c_write+0x24>
 800954a:	e7f6      	b.n	800953a <gd32_i2c_write+0x4a>
 800954c:	3d01      	subs	r5, #1
 800954e:	d0f4      	beq.n	800953a <gd32_i2c_write+0x4a>
 8009550:	f240 5101 	movw	r1, #1281	; 0x501
 8009554:	4630      	mov	r0, r6
 8009556:	f000 fc3d 	bl	8009dd4 <i2c_flag_get>
 800955a:	2800      	cmp	r0, #0
 800955c:	d0f6      	beq.n	800954c <gd32_i2c_write+0x5c>
 800955e:	4815      	ldr	r0, [pc, #84]	; (80095b4 <gd32_i2c_write+0xc4>)
 8009560:	4e14      	ldr	r6, [pc, #80]	; (80095b4 <gd32_i2c_write+0xc4>)
 8009562:	f240 5101 	movw	r1, #1281	; 0x501
 8009566:	f000 fc40 	bl	8009dea <i2c_flag_clear>
 800956a:	f640 75ff 	movw	r5, #4095	; 0xfff
 800956e:	f240 5107 	movw	r1, #1287	; 0x507
 8009572:	4630      	mov	r0, r6
 8009574:	f000 fc2e 	bl	8009dd4 <i2c_flag_get>
 8009578:	2801      	cmp	r0, #1
 800957a:	d107      	bne.n	800958c <gd32_i2c_write+0x9c>
 800957c:	4e0d      	ldr	r6, [pc, #52]	; (80095b4 <gd32_i2c_write+0xc4>)
 800957e:	4427      	add	r7, r4
 8009580:	42a7      	cmp	r7, r4
 8009582:	d106      	bne.n	8009592 <gd32_i2c_write+0xa2>
 8009584:	f7ff ff60 	bl	8009448 <_stop() [clone .isra.0]>
 8009588:	2000      	movs	r0, #0
 800958a:	e7da      	b.n	8009542 <gd32_i2c_write+0x52>
 800958c:	3d01      	subs	r5, #1
 800958e:	d1ee      	bne.n	800956e <gd32_i2c_write+0x7e>
 8009590:	e7d3      	b.n	800953a <gd32_i2c_write+0x4a>
 8009592:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009596:	4630      	mov	r0, r6
 8009598:	f000 fc17 	bl	8009dca <i2c_data_transmit>
 800959c:	f640 75ff 	movw	r5, #4095	; 0xfff
 80095a0:	f240 5102 	movw	r1, #1282	; 0x502
 80095a4:	4630      	mov	r0, r6
 80095a6:	f000 fc15 	bl	8009dd4 <i2c_flag_get>
 80095aa:	2800      	cmp	r0, #0
 80095ac:	d1e8      	bne.n	8009580 <gd32_i2c_write+0x90>
 80095ae:	3d01      	subs	r5, #1
 80095b0:	d1f6      	bne.n	80095a0 <gd32_i2c_write+0xb0>
 80095b2:	e7c2      	b.n	800953a <gd32_i2c_write+0x4a>
 80095b4:	40005400 	andmi	r5, r0, r0, lsl #8
 80095b8:	200017b0 			; <UNDEFINED> instruction: 0x200017b0

080095bc <gd32_i2c_read>:
 80095bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80095c0:	4f4d      	ldr	r7, [pc, #308]	; (80096f8 <gd32_i2c_read+0x13c>)
 80095c2:	4680      	mov	r8, r0
 80095c4:	460c      	mov	r4, r1
 80095c6:	f640 76ff 	movw	r6, #4095	; 0xfff
 80095ca:	f240 6101 	movw	r1, #1537	; 0x601
 80095ce:	4638      	mov	r0, r7
 80095d0:	f000 fc00 	bl	8009dd4 <i2c_flag_get>
 80095d4:	4605      	mov	r5, r0
 80095d6:	bb08      	cbnz	r0, 800961c <gd32_i2c_read+0x60>
 80095d8:	2c02      	cmp	r4, #2
 80095da:	d103      	bne.n	80095e4 <gd32_i2c_read+0x28>
 80095dc:	4601      	mov	r1, r0
 80095de:	4846      	ldr	r0, [pc, #280]	; (80096f8 <gd32_i2c_read+0x13c>)
 80095e0:	f000 fbd3 	bl	8009d8a <i2c_ackpos_config>
 80095e4:	4844      	ldr	r0, [pc, #272]	; (80096f8 <gd32_i2c_read+0x13c>)
 80095e6:	4f44      	ldr	r7, [pc, #272]	; (80096f8 <gd32_i2c_read+0x13c>)
 80095e8:	f000 fbe5 	bl	8009db6 <i2c_start_on_bus>
 80095ec:	f640 76ff 	movw	r6, #4095	; 0xfff
 80095f0:	f44f 61a0 	mov.w	r1, #1280	; 0x500
 80095f4:	4638      	mov	r0, r7
 80095f6:	f000 fbed 	bl	8009dd4 <i2c_flag_get>
 80095fa:	b1a8      	cbz	r0, 8009628 <gd32_i2c_read+0x6c>
 80095fc:	4b3f      	ldr	r3, [pc, #252]	; (80096fc <gd32_i2c_read+0x140>)
 80095fe:	483e      	ldr	r0, [pc, #248]	; (80096f8 <gd32_i2c_read+0x13c>)
 8009600:	7819      	ldrb	r1, [r3, #0]
 8009602:	2201      	movs	r2, #1
 8009604:	f000 fbca 	bl	8009d9c <i2c_master_addressing>
 8009608:	2c02      	cmp	r4, #2
 800960a:	d803      	bhi.n	8009614 <gd32_i2c_read+0x58>
 800960c:	483a      	ldr	r0, [pc, #232]	; (80096f8 <gd32_i2c_read+0x13c>)
 800960e:	2100      	movs	r1, #0
 8009610:	f000 fbb2 	bl	8009d78 <i2c_ack_config>
 8009614:	4f38      	ldr	r7, [pc, #224]	; (80096f8 <gd32_i2c_read+0x13c>)
 8009616:	f640 76ff 	movw	r6, #4095	; 0xfff
 800961a:	e00a      	b.n	8009632 <gd32_i2c_read+0x76>
 800961c:	3e01      	subs	r6, #1
 800961e:	d1d4      	bne.n	80095ca <gd32_i2c_read+0xe>
 8009620:	f7ff ff12 	bl	8009448 <_stop() [clone .isra.0]>
 8009624:	2504      	movs	r5, #4
 8009626:	e04d      	b.n	80096c4 <gd32_i2c_read+0x108>
 8009628:	3e01      	subs	r6, #1
 800962a:	d1e1      	bne.n	80095f0 <gd32_i2c_read+0x34>
 800962c:	e7f8      	b.n	8009620 <gd32_i2c_read+0x64>
 800962e:	3e01      	subs	r6, #1
 8009630:	d0f6      	beq.n	8009620 <gd32_i2c_read+0x64>
 8009632:	f240 5101 	movw	r1, #1281	; 0x501
 8009636:	4638      	mov	r0, r7
 8009638:	f000 fbcc 	bl	8009dd4 <i2c_flag_get>
 800963c:	2800      	cmp	r0, #0
 800963e:	d0f6      	beq.n	800962e <gd32_i2c_read+0x72>
 8009640:	482d      	ldr	r0, [pc, #180]	; (80096f8 <gd32_i2c_read+0x13c>)
 8009642:	f240 5101 	movw	r1, #1281	; 0x501
 8009646:	f000 fbd0 	bl	8009dea <i2c_flag_clear>
 800964a:	2c01      	cmp	r4, #1
 800964c:	d102      	bne.n	8009654 <gd32_i2c_read+0x98>
 800964e:	482a      	ldr	r0, [pc, #168]	; (80096f8 <gd32_i2c_read+0x13c>)
 8009650:	f000 fbb6 	bl	8009dc0 <i2c_stop_on_bus>
 8009654:	4e28      	ldr	r6, [pc, #160]	; (80096f8 <gd32_i2c_read+0x13c>)
 8009656:	f640 77ff 	movw	r7, #4095	; 0xfff
 800965a:	e022      	b.n	80096a2 <gd32_i2c_read+0xe6>
 800965c:	2c03      	cmp	r4, #3
 800965e:	d134      	bne.n	80096ca <gd32_i2c_read+0x10e>
 8009660:	f640 79ff 	movw	r9, #4095	; 0xfff
 8009664:	e002      	b.n	800966c <gd32_i2c_read+0xb0>
 8009666:	f1b9 0901 	subs.w	r9, r9, #1
 800966a:	d0d9      	beq.n	8009620 <gd32_i2c_read+0x64>
 800966c:	f240 5102 	movw	r1, #1282	; 0x502
 8009670:	4630      	mov	r0, r6
 8009672:	f000 fbaf 	bl	8009dd4 <i2c_flag_get>
 8009676:	2800      	cmp	r0, #0
 8009678:	d0f5      	beq.n	8009666 <gd32_i2c_read+0xaa>
 800967a:	2100      	movs	r1, #0
 800967c:	4630      	mov	r0, r6
 800967e:	f000 fb7b 	bl	8009d78 <i2c_ack_config>
 8009682:	f240 5106 	movw	r1, #1286	; 0x506
 8009686:	4630      	mov	r0, r6
 8009688:	f000 fba4 	bl	8009dd4 <i2c_flag_get>
 800968c:	b138      	cbz	r0, 800969e <gd32_i2c_read+0xe2>
 800968e:	4630      	mov	r0, r6
 8009690:	f000 fb9d 	bl	8009dce <i2c_data_receive>
 8009694:	f808 0b01 	strb.w	r0, [r8], #1
 8009698:	3c01      	subs	r4, #1
 800969a:	f640 77ff 	movw	r7, #4095	; 0xfff
 800969e:	3f01      	subs	r7, #1
 80096a0:	d0be      	beq.n	8009620 <gd32_i2c_read+0x64>
 80096a2:	2c00      	cmp	r4, #0
 80096a4:	d1da      	bne.n	800965c <gd32_i2c_read+0xa0>
 80096a6:	4916      	ldr	r1, [pc, #88]	; (8009700 <gd32_i2c_read+0x144>)
 80096a8:	f640 73ff 	movw	r3, #4095	; 0xfff
 80096ac:	f8d1 2400 	ldr.w	r2, [r1, #1024]	; 0x400
 80096b0:	0592      	lsls	r2, r2, #22
 80096b2:	d41d      	bmi.n	80096f0 <gd32_i2c_read+0x134>
 80096b4:	4810      	ldr	r0, [pc, #64]	; (80096f8 <gd32_i2c_read+0x13c>)
 80096b6:	2101      	movs	r1, #1
 80096b8:	f000 fb5e 	bl	8009d78 <i2c_ack_config>
 80096bc:	480e      	ldr	r0, [pc, #56]	; (80096f8 <gd32_i2c_read+0x13c>)
 80096be:	2101      	movs	r1, #1
 80096c0:	f000 fb63 	bl	8009d8a <i2c_ackpos_config>
 80096c4:	4628      	mov	r0, r5
 80096c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80096ca:	2c02      	cmp	r4, #2
 80096cc:	d1d9      	bne.n	8009682 <gd32_i2c_read+0xc6>
 80096ce:	f640 79ff 	movw	r9, #4095	; 0xfff
 80096d2:	e002      	b.n	80096da <gd32_i2c_read+0x11e>
 80096d4:	f1b9 0901 	subs.w	r9, r9, #1
 80096d8:	d0a2      	beq.n	8009620 <gd32_i2c_read+0x64>
 80096da:	f240 5102 	movw	r1, #1282	; 0x502
 80096de:	4630      	mov	r0, r6
 80096e0:	f000 fb78 	bl	8009dd4 <i2c_flag_get>
 80096e4:	2800      	cmp	r0, #0
 80096e6:	d0f5      	beq.n	80096d4 <gd32_i2c_read+0x118>
 80096e8:	4630      	mov	r0, r6
 80096ea:	f000 fb69 	bl	8009dc0 <i2c_stop_on_bus>
 80096ee:	e7c8      	b.n	8009682 <gd32_i2c_read+0xc6>
 80096f0:	3b01      	subs	r3, #1
 80096f2:	d1db      	bne.n	80096ac <gd32_i2c_read+0xf0>
 80096f4:	e796      	b.n	8009624 <gd32_i2c_read+0x68>
 80096f6:	bf00      	nop
 80096f8:	40005400 	andmi	r5, r0, r0, lsl #8
 80096fc:	200017b0 			; <UNDEFINED> instruction: 0x200017b0
 8009700:	40005000 	andmi	r5, r0, r0

08009704 <gd32_spi_dma_begin()>:
 8009704:	b530      	push	{r4, r5, lr}
 8009706:	f240 6002 	movw	r0, #1538	; 0x602
 800970a:	b089      	sub	sp, #36	; 0x24
 800970c:	f7ff fadc 	bl	8008cc8 <rcu_periph_clock_enable>
 8009710:	f240 6003 	movw	r0, #1539	; 0x603
 8009714:	f7ff fad8 	bl	8008cc8 <rcu_periph_clock_enable>
 8009718:	f240 700f 	movw	r0, #1807	; 0x70f
 800971c:	f7ff fad4 	bl	8008cc8 <rcu_periph_clock_enable>
 8009720:	f44f 60c0 	mov.w	r0, #1536	; 0x600
 8009724:	f7ff fad0 	bl	8008cc8 <rcu_periph_clock_enable>
 8009728:	4829      	ldr	r0, [pc, #164]	; (80097d0 <gd32_spi_dma_begin()+0xcc>)
 800972a:	4c2a      	ldr	r4, [pc, #168]	; (80097d4 <gd32_spi_dma_begin()+0xd0>)
 800972c:	2338      	movs	r3, #56	; 0x38
 800972e:	2203      	movs	r2, #3
 8009730:	2118      	movs	r1, #24
 8009732:	f7ff fa31 	bl	8008b98 <gpio_init>
 8009736:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800973a:	2203      	movs	r2, #3
 800973c:	4826      	ldr	r0, [pc, #152]	; (80097d8 <gd32_spi_dma_begin()+0xd4>)
 800973e:	2118      	movs	r1, #24
 8009740:	f7ff fa2a 	bl	8008b98 <gpio_init>
 8009744:	2101      	movs	r1, #1
 8009746:	4825      	ldr	r0, [pc, #148]	; (80097dc <gd32_spi_dma_begin()+0xd8>)
 8009748:	f7ff fa86 	bl	8008c58 <gpio_pin_remap_config>
 800974c:	4824      	ldr	r0, [pc, #144]	; (80097e0 <gd32_spi_dma_begin()+0xdc>)
 800974e:	f000 fba4 	bl	8009e9a <i2s_disable>
 8009752:	2300      	movs	r3, #0
 8009754:	461a      	mov	r2, r3
 8009756:	4923      	ldr	r1, [pc, #140]	; (80097e4 <gd32_spi_dma_begin()+0xe0>)
 8009758:	4821      	ldr	r0, [pc, #132]	; (80097e0 <gd32_spi_dma_begin()+0xdc>)
 800975a:	f000 fb67 	bl	8009e2c <i2s_psc_config>
 800975e:	2300      	movs	r3, #0
 8009760:	2210      	movs	r2, #16
 8009762:	f44f 7100 	mov.w	r1, #512	; 0x200
 8009766:	481e      	ldr	r0, [pc, #120]	; (80097e0 <gd32_spi_dma_begin()+0xdc>)
 8009768:	f000 fb51 	bl	8009e0e <i2s_init>
 800976c:	481c      	ldr	r0, [pc, #112]	; (80097e0 <gd32_spi_dma_begin()+0xdc>)
 800976e:	f000 fb8f 	bl	8009e90 <i2s_enable>
 8009772:	f240 5001 	movw	r0, #1281	; 0x501
 8009776:	f7ff faa7 	bl	8008cc8 <rcu_periph_clock_enable>
 800977a:	2101      	movs	r1, #1
 800977c:	4620      	mov	r0, r4
 800977e:	f7ff f8ff 	bl	8008980 <dma_deinit>
 8009782:	a801      	add	r0, sp, #4
 8009784:	f7ff f918 	bl	80089b8 <dma_struct_para_init>
 8009788:	4917      	ldr	r1, [pc, #92]	; (80097e8 <gd32_spi_dma_begin()+0xe4>)
 800978a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800978e:	2501      	movs	r5, #1
 8009790:	9304      	str	r3, [sp, #16]
 8009792:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8009796:	f44f 7380 	mov.w	r3, #256	; 0x100
 800979a:	e9cd 1301 	strd	r1, r3, [sp, #4]
 800979e:	9206      	str	r2, [sp, #24]
 80097a0:	4629      	mov	r1, r5
 80097a2:	aa01      	add	r2, sp, #4
 80097a4:	4620      	mov	r0, r4
 80097a6:	f8ad 301c 	strh.w	r3, [sp, #28]
 80097aa:	f88d 501e 	strb.w	r5, [sp, #30]
 80097ae:	f7ff f90f 	bl	80089d0 <dma_init>
 80097b2:	4629      	mov	r1, r5
 80097b4:	4620      	mov	r0, r4
 80097b6:	f7ff f945 	bl	8008a44 <dma_circulation_disable>
 80097ba:	4629      	mov	r1, r5
 80097bc:	4620      	mov	r0, r4
 80097be:	f7ff f951 	bl	8008a64 <dma_memory_to_memory_disable>
 80097c2:	4b0a      	ldr	r3, [pc, #40]	; (80097ec <gd32_spi_dma_begin()+0xe8>)
 80097c4:	2200      	movs	r2, #0
 80097c6:	f8c3 2420 	str.w	r2, [r3, #1056]	; 0x420
 80097ca:	b009      	add	sp, #36	; 0x24
 80097cc:	bd30      	pop	{r4, r5, pc}
 80097ce:	bf00      	nop
 80097d0:	40010c00 	andmi	r0, r1, r0, lsl #24
 80097d4:	40020400 	andmi	r0, r2, r0, lsl #8
 80097d8:	40010800 	andmi	r0, r1, r0, lsl #16
 80097dc:	00300400 	eorseq	r0, r0, r0, lsl #8
 80097e0:	40003c00 	andmi	r3, r0, r0, lsl #24
 80097e4:	00030d40 	andeq	r0, r3, r0, asr #26
 80097e8:	40003c0c 	andmi	r3, r0, ip, lsl #24
 80097ec:	40020000 	andmi	r0, r2, r0

080097f0 <gd32_spi_dma_set_speed_hz(unsigned int)>:
 80097f0:	b510      	push	{r4, lr}
 80097f2:	4604      	mov	r4, r0
 80097f4:	4806      	ldr	r0, [pc, #24]	; (8009810 <gd32_spi_dma_set_speed_hz(unsigned int)+0x20>)
 80097f6:	f000 fb50 	bl	8009e9a <i2s_disable>
 80097fa:	2300      	movs	r3, #0
 80097fc:	4804      	ldr	r0, [pc, #16]	; (8009810 <gd32_spi_dma_set_speed_hz(unsigned int)+0x20>)
 80097fe:	0961      	lsrs	r1, r4, #5
 8009800:	461a      	mov	r2, r3
 8009802:	f000 fb13 	bl	8009e2c <i2s_psc_config>
 8009806:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800980a:	4801      	ldr	r0, [pc, #4]	; (8009810 <gd32_spi_dma_set_speed_hz(unsigned int)+0x20>)
 800980c:	f000 bb40 	b.w	8009e90 <i2s_enable>
 8009810:	40003c00 	andmi	r3, r0, r0, lsl #24

08009814 <gd32_spi_dma_tx_prepare(unsigned int*)>:
 8009814:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8009818:	6003      	str	r3, [r0, #0]
 800981a:	4801      	ldr	r0, [pc, #4]	; (8009820 <gd32_spi_dma_tx_prepare(unsigned int*)+0xc>)
 800981c:	4770      	bx	lr
 800981e:	bf00      	nop
 8009820:	200017b4 			; <UNDEFINED> instruction: 0x200017b4

08009824 <gd32_spi_dma_tx_start(unsigned char const*, unsigned int)>:
 8009824:	4a0a      	ldr	r2, [pc, #40]	; (8009850 <gd32_spi_dma_tx_start(unsigned char const*, unsigned int)+0x2c>)
 8009826:	f8d2 341c 	ldr.w	r3, [r2, #1052]	; 0x41c
 800982a:	3101      	adds	r1, #1
 800982c:	f023 0301 	bic.w	r3, r3, #1
 8009830:	f8c2 341c 	str.w	r3, [r2, #1052]	; 0x41c
 8009834:	f3c1 014f 	ubfx	r1, r1, #1, #16
 8009838:	f043 0301 	orr.w	r3, r3, #1
 800983c:	f8c2 0428 	str.w	r0, [r2, #1064]	; 0x428
 8009840:	f8c2 1420 	str.w	r1, [r2, #1056]	; 0x420
 8009844:	4803      	ldr	r0, [pc, #12]	; (8009854 <gd32_spi_dma_tx_start(unsigned char const*, unsigned int)+0x30>)
 8009846:	f8c2 341c 	str.w	r3, [r2, #1052]	; 0x41c
 800984a:	2100      	movs	r1, #0
 800984c:	f000 bb2a 	b.w	8009ea4 <spi_dma_enable>
 8009850:	40020000 	andmi	r0, r2, r0
 8009854:	40003c00 	andmi	r3, r0, r0, lsl #24

08009858 <gd32_spi_dma_tx_is_active()>:
 8009858:	4b03      	ldr	r3, [pc, #12]	; (8009868 <gd32_spi_dma_tx_is_active()+0x10>)
 800985a:	f8d3 0420 	ldr.w	r0, [r3, #1056]	; 0x420
 800985e:	3800      	subs	r0, #0
 8009860:	bf18      	it	ne
 8009862:	2001      	movne	r0, #1
 8009864:	4770      	bx	lr
 8009866:	bf00      	nop
 8009868:	40020000 	andmi	r0, r2, r0

0800986c <gd32_uart_begin>:
 800986c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800986e:	461e      	mov	r6, r3
 8009870:	4b63      	ldr	r3, [pc, #396]	; (8009a00 <gd32_uart_begin+0x194>)
 8009872:	4298      	cmp	r0, r3
 8009874:	4604      	mov	r4, r0
 8009876:	460f      	mov	r7, r1
 8009878:	4615      	mov	r5, r2
 800987a:	d03b      	beq.n	80098f4 <gd32_uart_begin+0x88>
 800987c:	d80a      	bhi.n	8009894 <gd32_uart_begin+0x28>
 800987e:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 8009882:	4298      	cmp	r0, r3
 8009884:	d02f      	beq.n	80098e6 <gd32_uart_begin+0x7a>
 8009886:	f240 7012 	movw	r0, #1810	; 0x712
 800988a:	f7ff fa1d 	bl	8008cc8 <rcu_periph_clock_enable>
 800988e:	f240 6004 	movw	r0, #1540	; 0x604
 8009892:	e008      	b.n	80098a6 <gd32_uart_begin+0x3a>
 8009894:	4b5b      	ldr	r3, [pc, #364]	; (8009a04 <gd32_uart_begin+0x198>)
 8009896:	4298      	cmp	r0, r3
 8009898:	d02f      	beq.n	80098fa <gd32_uart_begin+0x8e>
 800989a:	f240 600e 	movw	r0, #1550	; 0x60e
 800989e:	f7ff fa13 	bl	8008cc8 <rcu_periph_clock_enable>
 80098a2:	f240 6003 	movw	r0, #1539	; 0x603
 80098a6:	f7ff fa0f 	bl	8008cc8 <rcu_periph_clock_enable>
 80098aa:	f44f 60c0 	mov.w	r0, #1536	; 0x600
 80098ae:	f7ff fa0b 	bl	8008cc8 <rcu_periph_clock_enable>
 80098b2:	4b53      	ldr	r3, [pc, #332]	; (8009a00 <gd32_uart_begin+0x194>)
 80098b4:	429c      	cmp	r4, r3
 80098b6:	f000 8084 	beq.w	80099c2 <gd32_uart_begin+0x156>
 80098ba:	d829      	bhi.n	8009910 <gd32_uart_begin+0xa4>
 80098bc:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 80098c0:	429c      	cmp	r4, r3
 80098c2:	d071      	beq.n	80099a8 <gd32_uart_begin+0x13c>
 80098c4:	4850      	ldr	r0, [pc, #320]	; (8009a08 <gd32_uart_begin+0x19c>)
 80098c6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80098ca:	2203      	movs	r2, #3
 80098cc:	2118      	movs	r1, #24
 80098ce:	f7ff f963 	bl	8008b98 <gpio_init>
 80098d2:	484d      	ldr	r0, [pc, #308]	; (8009a08 <gd32_uart_begin+0x19c>)
 80098d4:	2104      	movs	r1, #4
 80098d6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80098da:	2203      	movs	r2, #3
 80098dc:	f7ff f95c 	bl	8008b98 <gpio_init>
 80098e0:	484a      	ldr	r0, [pc, #296]	; (8009a0c <gd32_uart_begin+0x1a0>)
 80098e2:	2101      	movs	r1, #1
 80098e4:	e025      	b.n	8009932 <gd32_uart_begin+0xc6>
 80098e6:	f240 7011 	movw	r0, #1809	; 0x711
 80098ea:	f7ff f9ed 	bl	8008cc8 <rcu_periph_clock_enable>
 80098ee:	f240 6002 	movw	r0, #1538	; 0x602
 80098f2:	e7d8      	b.n	80098a6 <gd32_uart_begin+0x3a>
 80098f4:	f240 7013 	movw	r0, #1811	; 0x713
 80098f8:	e7c7      	b.n	800988a <gd32_uart_begin+0x1e>
 80098fa:	f240 7014 	movw	r0, #1812	; 0x714
 80098fe:	f7ff f9e3 	bl	8008cc8 <rcu_periph_clock_enable>
 8009902:	f240 6004 	movw	r0, #1540	; 0x604
 8009906:	f7ff f9df 	bl	8008cc8 <rcu_periph_clock_enable>
 800990a:	f240 6005 	movw	r0, #1541	; 0x605
 800990e:	e7ca      	b.n	80098a6 <gd32_uart_begin+0x3a>
 8009910:	4b3c      	ldr	r3, [pc, #240]	; (8009a04 <gd32_uart_begin+0x198>)
 8009912:	429c      	cmp	r4, r3
 8009914:	d062      	beq.n	80099dc <gd32_uart_begin+0x170>
 8009916:	483e      	ldr	r0, [pc, #248]	; (8009a10 <gd32_uart_begin+0x1a4>)
 8009918:	2340      	movs	r3, #64	; 0x40
 800991a:	2203      	movs	r2, #3
 800991c:	2118      	movs	r1, #24
 800991e:	f7ff f93b 	bl	8008b98 <gpio_init>
 8009922:	483b      	ldr	r0, [pc, #236]	; (8009a10 <gd32_uart_begin+0x1a4>)
 8009924:	2104      	movs	r1, #4
 8009926:	2380      	movs	r3, #128	; 0x80
 8009928:	2203      	movs	r2, #3
 800992a:	f7ff f935 	bl	8008b98 <gpio_init>
 800992e:	2101      	movs	r1, #1
 8009930:	2004      	movs	r0, #4
 8009932:	f7ff f991 	bl	8008c58 <gpio_pin_remap_config>
 8009936:	4620      	mov	r0, r4
 8009938:	f7ff fc3a 	bl	80091b0 <usart_deinit>
 800993c:	68e3      	ldr	r3, [r4, #12]
 800993e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009942:	60e3      	str	r3, [r4, #12]
 8009944:	4639      	mov	r1, r7
 8009946:	4620      	mov	r0, r4
 8009948:	f7ff fc72 	bl	8009230 <usart_baudrate_set>
 800994c:	f1a5 0309 	sub.w	r3, r5, #9
 8009950:	4259      	negs	r1, r3
 8009952:	4159      	adcs	r1, r3
 8009954:	0309      	lsls	r1, r1, #12
 8009956:	4620      	mov	r0, r4
 8009958:	f7ff fc9a 	bl	8009290 <usart_word_length_set>
 800995c:	9906      	ldr	r1, [sp, #24]
 800995e:	1e8a      	subs	r2, r1, #2
 8009960:	4251      	negs	r1, r2
 8009962:	4151      	adcs	r1, r2
 8009964:	0349      	lsls	r1, r1, #13
 8009966:	4620      	mov	r0, r4
 8009968:	f7ff fc9a 	bl	80092a0 <usart_stop_bit_set>
 800996c:	2e01      	cmp	r6, #1
 800996e:	d041      	beq.n	80099f4 <gd32_uart_begin+0x188>
 8009970:	2e02      	cmp	r6, #2
 8009972:	d142      	bne.n	80099fa <gd32_uart_begin+0x18e>
 8009974:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8009978:	4620      	mov	r0, r4
 800997a:	f7ff fc81 	bl	8009280 <usart_parity_config>
 800997e:	2100      	movs	r1, #0
 8009980:	4620      	mov	r0, r4
 8009982:	f7ff fca1 	bl	80092c8 <usart_hardware_flow_rts_config>
 8009986:	2100      	movs	r1, #0
 8009988:	4620      	mov	r0, r4
 800998a:	f7ff fca3 	bl	80092d4 <usart_hardware_flow_cts_config>
 800998e:	2104      	movs	r1, #4
 8009990:	4620      	mov	r0, r4
 8009992:	f7ff fc93 	bl	80092bc <usart_receive_config>
 8009996:	2108      	movs	r1, #8
 8009998:	4620      	mov	r0, r4
 800999a:	f7ff fc89 	bl	80092b0 <usart_transmit_config>
 800999e:	68e3      	ldr	r3, [r4, #12]
 80099a0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80099a4:	60e3      	str	r3, [r4, #12]
 80099a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80099a8:	481a      	ldr	r0, [pc, #104]	; (8009a14 <gd32_uart_begin+0x1a8>)
 80099aa:	2304      	movs	r3, #4
 80099ac:	2203      	movs	r2, #3
 80099ae:	2118      	movs	r1, #24
 80099b0:	f7ff f8f2 	bl	8008b98 <gpio_init>
 80099b4:	4817      	ldr	r0, [pc, #92]	; (8009a14 <gd32_uart_begin+0x1a8>)
 80099b6:	2308      	movs	r3, #8
 80099b8:	2203      	movs	r2, #3
 80099ba:	2104      	movs	r1, #4
 80099bc:	f7ff f8ec 	bl	8008b98 <gpio_init>
 80099c0:	e7b9      	b.n	8009936 <gd32_uart_begin+0xca>
 80099c2:	4811      	ldr	r0, [pc, #68]	; (8009a08 <gd32_uart_begin+0x19c>)
 80099c4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80099c8:	2203      	movs	r2, #3
 80099ca:	2118      	movs	r1, #24
 80099cc:	f7ff f8e4 	bl	8008b98 <gpio_init>
 80099d0:	480d      	ldr	r0, [pc, #52]	; (8009a08 <gd32_uart_begin+0x19c>)
 80099d2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80099d6:	2203      	movs	r2, #3
 80099d8:	2104      	movs	r1, #4
 80099da:	e7ef      	b.n	80099bc <gd32_uart_begin+0x150>
 80099dc:	480a      	ldr	r0, [pc, #40]	; (8009a08 <gd32_uart_begin+0x19c>)
 80099de:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80099e2:	2203      	movs	r2, #3
 80099e4:	2118      	movs	r1, #24
 80099e6:	f7ff f8d7 	bl	8008b98 <gpio_init>
 80099ea:	2304      	movs	r3, #4
 80099ec:	480a      	ldr	r0, [pc, #40]	; (8009a18 <gd32_uart_begin+0x1ac>)
 80099ee:	2203      	movs	r2, #3
 80099f0:	4619      	mov	r1, r3
 80099f2:	e7e3      	b.n	80099bc <gd32_uart_begin+0x150>
 80099f4:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80099f8:	e7be      	b.n	8009978 <gd32_uart_begin+0x10c>
 80099fa:	2100      	movs	r1, #0
 80099fc:	e7bc      	b.n	8009978 <gd32_uart_begin+0x10c>
 80099fe:	bf00      	nop
 8009a00:	40004c00 	andmi	r4, r0, r0, lsl #24
 8009a04:	40005000 	andmi	r5, r0, r0
 8009a08:	40011000 	andmi	r1, r1, r0
 8009a0c:	00140010 	andseq	r0, r4, r0, lsl r0
 8009a10:	40010c00 	andmi	r0, r1, r0, lsl #24
 8009a14:	40010800 	andmi	r0, r1, r0, lsl #16
 8009a18:	40011400 	andmi	r1, r1, r0, lsl #8

08009a1c <mac_address_get(unsigned char*)>:
 8009a1c:	4a07      	ldr	r2, [pc, #28]	; (8009a3c <mac_address_get(unsigned char*)+0x20>)
 8009a1e:	f8d2 37e8 	ldr.w	r3, [r2, #2024]	; 0x7e8
 8009a22:	f8d2 27ec 	ldr.w	r2, [r2, #2028]	; 0x7ec
 8009a26:	7042      	strb	r2, [r0, #1]
 8009a28:	0e1a      	lsrs	r2, r3, #24
 8009a2a:	7082      	strb	r2, [r0, #2]
 8009a2c:	0c1a      	lsrs	r2, r3, #16
 8009a2e:	2102      	movs	r1, #2
 8009a30:	70c2      	strb	r2, [r0, #3]
 8009a32:	0a1a      	lsrs	r2, r3, #8
 8009a34:	7001      	strb	r1, [r0, #0]
 8009a36:	7102      	strb	r2, [r0, #4]
 8009a38:	7143      	strb	r3, [r0, #5]
 8009a3a:	4770      	bx	lr
 8009a3c:	1ffff000 	svcne	0x00fff000

08009a40 <micros_init()>:
 8009a40:	4770      	bx	lr
	...

08009a44 <udelay_init()>:
 8009a44:	4a07      	ldr	r2, [pc, #28]	; (8009a64 <udelay_init()+0x20>)
 8009a46:	f8d2 30fc 	ldr.w	r3, [r2, #252]	; 0xfc
 8009a4a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8009a4e:	f8c2 30fc 	str.w	r3, [r2, #252]	; 0xfc
 8009a52:	4b05      	ldr	r3, [pc, #20]	; (8009a68 <udelay_init()+0x24>)
 8009a54:	2200      	movs	r2, #0
 8009a56:	605a      	str	r2, [r3, #4]
 8009a58:	681a      	ldr	r2, [r3, #0]
 8009a5a:	f042 0201 	orr.w	r2, r2, #1
 8009a5e:	601a      	str	r2, [r3, #0]
 8009a60:	4770      	bx	lr
 8009a62:	bf00      	nop
 8009a64:	e000ed00 	and	lr, r0, r0, lsl #26
 8009a68:	e0001000 	and	r1, r0, r0

08009a6c <udelay(unsigned int, unsigned int)>:
 8009a6c:	2378      	movs	r3, #120	; 0x78
 8009a6e:	b530      	push	{r4, r5, lr}
 8009a70:	4358      	muls	r0, r3
 8009a72:	b909      	cbnz	r1, 8009a78 <udelay(unsigned int, unsigned int)+0xc>
 8009a74:	4b08      	ldr	r3, [pc, #32]	; (8009a98 <udelay(unsigned int, unsigned int)+0x2c>)
 8009a76:	6859      	ldr	r1, [r3, #4]
 8009a78:	4c07      	ldr	r4, [pc, #28]	; (8009a98 <udelay(unsigned int, unsigned int)+0x2c>)
 8009a7a:	2300      	movs	r3, #0
 8009a7c:	6862      	ldr	r2, [r4, #4]
 8009a7e:	4291      	cmp	r1, r2
 8009a80:	d0fc      	beq.n	8009a7c <udelay(unsigned int, unsigned int)+0x10>
 8009a82:	bf2a      	itet	cs
 8009a84:	f102 35ff 	addcs.w	r5, r2, #4294967295	; 0xffffffff
 8009a88:	189b      	addcc	r3, r3, r2
 8009a8a:	195b      	addcs	r3, r3, r5
 8009a8c:	1a5b      	subs	r3, r3, r1
 8009a8e:	4283      	cmp	r3, r0
 8009a90:	d300      	bcc.n	8009a94 <udelay(unsigned int, unsigned int)+0x28>
 8009a92:	bd30      	pop	{r4, r5, pc}
 8009a94:	4611      	mov	r1, r2
 8009a96:	e7f1      	b.n	8009a7c <udelay(unsigned int, unsigned int)+0x10>
 8009a98:	e0001000 	and	r1, r0, r0

08009a9c <adc_enable>:
 8009a9c:	6883      	ldr	r3, [r0, #8]
 8009a9e:	07db      	lsls	r3, r3, #31
 8009aa0:	bf5e      	ittt	pl
 8009aa2:	6883      	ldrpl	r3, [r0, #8]
 8009aa4:	f043 0301 	orrpl.w	r3, r3, #1
 8009aa8:	6083      	strpl	r3, [r0, #8]
 8009aaa:	4770      	bx	lr

08009aac <adc_calibration_enable>:
 8009aac:	6883      	ldr	r3, [r0, #8]
 8009aae:	f043 0308 	orr.w	r3, r3, #8
 8009ab2:	f100 0208 	add.w	r2, r0, #8
 8009ab6:	6083      	str	r3, [r0, #8]
 8009ab8:	6813      	ldr	r3, [r2, #0]
 8009aba:	0719      	lsls	r1, r3, #28
 8009abc:	d4fc      	bmi.n	8009ab8 <adc_calibration_enable+0xc>
 8009abe:	6883      	ldr	r3, [r0, #8]
 8009ac0:	f043 0304 	orr.w	r3, r3, #4
 8009ac4:	6083      	str	r3, [r0, #8]
 8009ac6:	6813      	ldr	r3, [r2, #0]
 8009ac8:	075b      	lsls	r3, r3, #29
 8009aca:	d4fc      	bmi.n	8009ac6 <adc_calibration_enable+0x1a>
 8009acc:	4770      	bx	lr
	...

08009ad0 <adc_tempsensor_vrefint_enable>:
 8009ad0:	4a03      	ldr	r2, [pc, #12]	; (8009ae0 <adc_tempsensor_vrefint_enable+0x10>)
 8009ad2:	f8d2 3408 	ldr.w	r3, [r2, #1032]	; 0x408
 8009ad6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8009ada:	f8c2 3408 	str.w	r3, [r2, #1032]	; 0x408
 8009ade:	4770      	bx	lr
 8009ae0:	40012000 	andmi	r2, r1, r0

08009ae4 <adc_mode_config>:
 8009ae4:	4b06      	ldr	r3, [pc, #24]	; (8009b00 <adc_mode_config+0x1c>)
 8009ae6:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8009aea:	f422 2270 	bic.w	r2, r2, #983040	; 0xf0000
 8009aee:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
 8009af2:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8009af6:	4310      	orrs	r0, r2
 8009af8:	f8c3 0404 	str.w	r0, [r3, #1028]	; 0x404
 8009afc:	4770      	bx	lr
 8009afe:	bf00      	nop
 8009b00:	40012000 	andmi	r2, r1, r0

08009b04 <adc_special_function_config>:
 8009b04:	b510      	push	{r4, lr}
 8009b06:	f401 7380 	and.w	r3, r1, #256	; 0x100
 8009b0a:	f401 6480 	and.w	r4, r1, #1024	; 0x400
 8009b0e:	f001 0102 	and.w	r1, r1, #2
 8009b12:	b17a      	cbz	r2, 8009b34 <adc_special_function_config+0x30>
 8009b14:	b11b      	cbz	r3, 8009b1e <adc_special_function_config+0x1a>
 8009b16:	6843      	ldr	r3, [r0, #4]
 8009b18:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009b1c:	6043      	str	r3, [r0, #4]
 8009b1e:	b11c      	cbz	r4, 8009b28 <adc_special_function_config+0x24>
 8009b20:	6843      	ldr	r3, [r0, #4]
 8009b22:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8009b26:	6043      	str	r3, [r0, #4]
 8009b28:	b119      	cbz	r1, 8009b32 <adc_special_function_config+0x2e>
 8009b2a:	6883      	ldr	r3, [r0, #8]
 8009b2c:	f043 0302 	orr.w	r3, r3, #2
 8009b30:	6083      	str	r3, [r0, #8]
 8009b32:	bd10      	pop	{r4, pc}
 8009b34:	b11b      	cbz	r3, 8009b3e <adc_special_function_config+0x3a>
 8009b36:	6843      	ldr	r3, [r0, #4]
 8009b38:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009b3c:	6043      	str	r3, [r0, #4]
 8009b3e:	b11c      	cbz	r4, 8009b48 <adc_special_function_config+0x44>
 8009b40:	6843      	ldr	r3, [r0, #4]
 8009b42:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009b46:	6043      	str	r3, [r0, #4]
 8009b48:	2900      	cmp	r1, #0
 8009b4a:	d0f2      	beq.n	8009b32 <adc_special_function_config+0x2e>
 8009b4c:	6883      	ldr	r3, [r0, #8]
 8009b4e:	f023 0302 	bic.w	r3, r3, #2
 8009b52:	e7ed      	b.n	8009b30 <adc_special_function_config+0x2c>

08009b54 <adc_data_alignment_config>:
 8009b54:	6883      	ldr	r3, [r0, #8]
 8009b56:	b119      	cbz	r1, 8009b60 <adc_data_alignment_config+0xc>
 8009b58:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8009b5c:	6083      	str	r3, [r0, #8]
 8009b5e:	4770      	bx	lr
 8009b60:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009b64:	e7fa      	b.n	8009b5c <adc_data_alignment_config+0x8>

08009b66 <adc_channel_length_config>:
 8009b66:	2901      	cmp	r1, #1
 8009b68:	d002      	beq.n	8009b70 <adc_channel_length_config+0xa>
 8009b6a:	2902      	cmp	r1, #2
 8009b6c:	d00c      	beq.n	8009b88 <adc_channel_length_config+0x22>
 8009b6e:	4770      	bx	lr
 8009b70:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8009b72:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8009b76:	62c3      	str	r3, [r0, #44]	; 0x2c
 8009b78:	3a01      	subs	r2, #1
 8009b7a:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8009b7c:	0512      	lsls	r2, r2, #20
 8009b7e:	f402 0270 	and.w	r2, r2, #15728640	; 0xf00000
 8009b82:	431a      	orrs	r2, r3
 8009b84:	62c2      	str	r2, [r0, #44]	; 0x2c
 8009b86:	4770      	bx	lr
 8009b88:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8009b8a:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8009b8e:	6383      	str	r3, [r0, #56]	; 0x38
 8009b90:	3a01      	subs	r2, #1
 8009b92:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8009b94:	0512      	lsls	r2, r2, #20
 8009b96:	f402 1240 	and.w	r2, r2, #3145728	; 0x300000
 8009b9a:	431a      	orrs	r2, r3
 8009b9c:	6382      	str	r2, [r0, #56]	; 0x38
 8009b9e:	4770      	bx	lr

08009ba0 <adc_inserted_channel_config>:
 8009ba0:	b530      	push	{r4, r5, lr}
 8009ba2:	6b85      	ldr	r5, [r0, #56]	; 0x38
 8009ba4:	6b84      	ldr	r4, [r0, #56]	; 0x38
 8009ba6:	f3c5 5501 	ubfx	r5, r5, #20, #2
 8009baa:	3103      	adds	r1, #3
 8009bac:	1b49      	subs	r1, r1, r5
 8009bae:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8009bb2:	251f      	movs	r5, #31
 8009bb4:	408d      	lsls	r5, r1
 8009bb6:	ea24 0405 	bic.w	r4, r4, r5
 8009bba:	fa02 f101 	lsl.w	r1, r2, r1
 8009bbe:	4321      	orrs	r1, r4
 8009bc0:	2a09      	cmp	r2, #9
 8009bc2:	6381      	str	r1, [r0, #56]	; 0x38
 8009bc4:	d80a      	bhi.n	8009bdc <adc_inserted_channel_config+0x3c>
 8009bc6:	6901      	ldr	r1, [r0, #16]
 8009bc8:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8009bcc:	2407      	movs	r4, #7
 8009bce:	4094      	lsls	r4, r2
 8009bd0:	ea21 0104 	bic.w	r1, r1, r4
 8009bd4:	4093      	lsls	r3, r2
 8009bd6:	430b      	orrs	r3, r1
 8009bd8:	6103      	str	r3, [r0, #16]
 8009bda:	bd30      	pop	{r4, r5, pc}
 8009bdc:	2a11      	cmp	r2, #17
 8009bde:	d8fc      	bhi.n	8009bda <adc_inserted_channel_config+0x3a>
 8009be0:	2103      	movs	r1, #3
 8009be2:	f06f 051d 	mvn.w	r5, #29
 8009be6:	fb11 5202 	smlabb	r2, r1, r2, r5
 8009bea:	68c4      	ldr	r4, [r0, #12]
 8009bec:	2107      	movs	r1, #7
 8009bee:	4091      	lsls	r1, r2
 8009bf0:	ea24 0101 	bic.w	r1, r4, r1
 8009bf4:	4093      	lsls	r3, r2
 8009bf6:	430b      	orrs	r3, r1
 8009bf8:	60c3      	str	r3, [r0, #12]
 8009bfa:	e7ee      	b.n	8009bda <adc_inserted_channel_config+0x3a>

08009bfc <adc_external_trigger_config>:
 8009bfc:	f001 0301 	and.w	r3, r1, #1
 8009c00:	f001 0102 	and.w	r1, r1, #2
 8009c04:	b152      	cbz	r2, 8009c1c <adc_external_trigger_config+0x20>
 8009c06:	b11b      	cbz	r3, 8009c10 <adc_external_trigger_config+0x14>
 8009c08:	6883      	ldr	r3, [r0, #8]
 8009c0a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009c0e:	6083      	str	r3, [r0, #8]
 8009c10:	b119      	cbz	r1, 8009c1a <adc_external_trigger_config+0x1e>
 8009c12:	6883      	ldr	r3, [r0, #8]
 8009c14:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009c18:	6083      	str	r3, [r0, #8]
 8009c1a:	4770      	bx	lr
 8009c1c:	b11b      	cbz	r3, 8009c26 <adc_external_trigger_config+0x2a>
 8009c1e:	6883      	ldr	r3, [r0, #8]
 8009c20:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8009c24:	6083      	str	r3, [r0, #8]
 8009c26:	2900      	cmp	r1, #0
 8009c28:	d0f7      	beq.n	8009c1a <adc_external_trigger_config+0x1e>
 8009c2a:	6883      	ldr	r3, [r0, #8]
 8009c2c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8009c30:	e7f2      	b.n	8009c18 <adc_external_trigger_config+0x1c>

08009c32 <adc_external_trigger_source_config>:
 8009c32:	2901      	cmp	r1, #1
 8009c34:	d002      	beq.n	8009c3c <adc_external_trigger_source_config+0xa>
 8009c36:	2902      	cmp	r1, #2
 8009c38:	d008      	beq.n	8009c4c <adc_external_trigger_source_config+0x1a>
 8009c3a:	4770      	bx	lr
 8009c3c:	6883      	ldr	r3, [r0, #8]
 8009c3e:	f423 2360 	bic.w	r3, r3, #917504	; 0xe0000
 8009c42:	6083      	str	r3, [r0, #8]
 8009c44:	6883      	ldr	r3, [r0, #8]
 8009c46:	4313      	orrs	r3, r2
 8009c48:	6083      	str	r3, [r0, #8]
 8009c4a:	4770      	bx	lr
 8009c4c:	6883      	ldr	r3, [r0, #8]
 8009c4e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009c52:	e7f6      	b.n	8009c42 <adc_external_trigger_source_config+0x10>

08009c54 <adc_software_trigger_enable>:
 8009c54:	07ca      	lsls	r2, r1, #31
 8009c56:	bf42      	ittt	mi
 8009c58:	6883      	ldrmi	r3, [r0, #8]
 8009c5a:	f443 0380 	orrmi.w	r3, r3, #4194304	; 0x400000
 8009c5e:	6083      	strmi	r3, [r0, #8]
 8009c60:	078b      	lsls	r3, r1, #30
 8009c62:	bf42      	ittt	mi
 8009c64:	6883      	ldrmi	r3, [r0, #8]
 8009c66:	f443 1300 	orrmi.w	r3, r3, #2097152	; 0x200000
 8009c6a:	6083      	strmi	r3, [r0, #8]
 8009c6c:	4770      	bx	lr
	...

08009c70 <i2c_clock_config>:
 8009c70:	b570      	push	{r4, r5, r6, lr}
 8009c72:	4604      	mov	r4, r0
 8009c74:	4616      	mov	r6, r2
 8009c76:	460d      	mov	r5, r1
 8009c78:	b901      	cbnz	r1, 8009c7c <i2c_clock_config+0xc>
 8009c7a:	e7fe      	b.n	8009c7a <i2c_clock_config+0xa>
 8009c7c:	2002      	movs	r0, #2
 8009c7e:	f7ff f8e7 	bl	8008e50 <rcu_clock_freq_get>
 8009c82:	4a39      	ldr	r2, [pc, #228]	; (8009d68 <i2c_clock_config+0xf8>)
 8009c84:	4939      	ldr	r1, [pc, #228]	; (8009d6c <i2c_clock_config+0xfc>)
 8009c86:	fbb0 f1f1 	udiv	r1, r0, r1
 8009c8a:	4290      	cmp	r0, r2
 8009c8c:	bf34      	ite	cc
 8009c8e:	460b      	movcc	r3, r1
 8009c90:	233c      	movcs	r3, #60	; 0x3c
 8009c92:	6862      	ldr	r2, [r4, #4]
 8009c94:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
 8009c98:	431a      	orrs	r2, r3
 8009c9a:	6062      	str	r2, [r4, #4]
 8009c9c:	4a34      	ldr	r2, [pc, #208]	; (8009d70 <i2c_clock_config+0x100>)
 8009c9e:	4295      	cmp	r5, r2
 8009ca0:	d816      	bhi.n	8009cd0 <i2c_clock_config+0x60>
 8009ca2:	3101      	adds	r1, #1
 8009ca4:	293b      	cmp	r1, #59	; 0x3b
 8009ca6:	d90d      	bls.n	8009cc4 <i2c_clock_config+0x54>
 8009ca8:	233c      	movs	r3, #60	; 0x3c
 8009caa:	6223      	str	r3, [r4, #32]
 8009cac:	006d      	lsls	r5, r5, #1
 8009cae:	fbb0 f0f5 	udiv	r0, r0, r5
 8009cb2:	2804      	cmp	r0, #4
 8009cb4:	69e3      	ldr	r3, [r4, #28]
 8009cb6:	bf38      	it	cc
 8009cb8:	2004      	movcc	r0, #4
 8009cba:	f3c0 000b 	ubfx	r0, r0, #0, #12
 8009cbe:	4318      	orrs	r0, r3
 8009cc0:	61e0      	str	r0, [r4, #28]
 8009cc2:	bd70      	pop	{r4, r5, r6, pc}
 8009cc4:	2902      	cmp	r1, #2
 8009cc6:	d801      	bhi.n	8009ccc <i2c_clock_config+0x5c>
 8009cc8:	2302      	movs	r3, #2
 8009cca:	e7ee      	b.n	8009caa <i2c_clock_config+0x3a>
 8009ccc:	6221      	str	r1, [r4, #32]
 8009cce:	e7ed      	b.n	8009cac <i2c_clock_config+0x3c>
 8009cd0:	4a28      	ldr	r2, [pc, #160]	; (8009d74 <i2c_clock_config+0x104>)
 8009cd2:	4295      	cmp	r5, r2
 8009cd4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8009cd8:	d824      	bhi.n	8009d24 <i2c_clock_config+0xb4>
 8009cda:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8009cde:	4353      	muls	r3, r2
 8009ce0:	fbb3 f3f1 	udiv	r3, r3, r1
 8009ce4:	3301      	adds	r3, #1
 8009ce6:	6223      	str	r3, [r4, #32]
 8009ce8:	b9a6      	cbnz	r6, 8009d14 <i2c_clock_config+0xa4>
 8009cea:	eb05 0345 	add.w	r3, r5, r5, lsl #1
 8009cee:	fbb0 f0f3 	udiv	r0, r0, r3
 8009cf2:	69e3      	ldr	r3, [r4, #28]
 8009cf4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009cf8:	61e3      	str	r3, [r4, #28]
 8009cfa:	f3c0 030b 	ubfx	r3, r0, #0, #12
 8009cfe:	b90b      	cbnz	r3, 8009d04 <i2c_clock_config+0x94>
 8009d00:	f040 0001 	orr.w	r0, r0, #1
 8009d04:	69e3      	ldr	r3, [r4, #28]
 8009d06:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009d0a:	61e3      	str	r3, [r4, #28]
 8009d0c:	69e3      	ldr	r3, [r4, #28]
 8009d0e:	4303      	orrs	r3, r0
 8009d10:	61e3      	str	r3, [r4, #28]
 8009d12:	e7d6      	b.n	8009cc2 <i2c_clock_config+0x52>
 8009d14:	2319      	movs	r3, #25
 8009d16:	436b      	muls	r3, r5
 8009d18:	fbb0 f0f3 	udiv	r0, r0, r3
 8009d1c:	69e3      	ldr	r3, [r4, #28]
 8009d1e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8009d22:	e7e9      	b.n	8009cf8 <i2c_clock_config+0x88>
 8009d24:	2278      	movs	r2, #120	; 0x78
 8009d26:	4353      	muls	r3, r2
 8009d28:	fbb3 f3f1 	udiv	r3, r3, r1
 8009d2c:	3301      	adds	r3, #1
 8009d2e:	6223      	str	r3, [r4, #32]
 8009d30:	b996      	cbnz	r6, 8009d58 <i2c_clock_config+0xe8>
 8009d32:	69e3      	ldr	r3, [r4, #28]
 8009d34:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009d38:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009d3c:	fbb0 f0f5 	udiv	r0, r0, r5
 8009d40:	61e3      	str	r3, [r4, #28]
 8009d42:	69e3      	ldr	r3, [r4, #28]
 8009d44:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009d48:	61e3      	str	r3, [r4, #28]
 8009d4a:	69e3      	ldr	r3, [r4, #28]
 8009d4c:	4303      	orrs	r3, r0
 8009d4e:	61e3      	str	r3, [r4, #28]
 8009d50:	2301      	movs	r3, #1
 8009d52:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
 8009d56:	e7b4      	b.n	8009cc2 <i2c_clock_config+0x52>
 8009d58:	2319      	movs	r3, #25
 8009d5a:	435d      	muls	r5, r3
 8009d5c:	69e3      	ldr	r3, [r4, #28]
 8009d5e:	fbb0 f0f5 	udiv	r0, r0, r5
 8009d62:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8009d66:	e7eb      	b.n	8009d40 <i2c_clock_config+0xd0>
 8009d68:	03938700 	orrseq	r8, r3, #0, 14
 8009d6c:	000f4240 	andeq	r4, pc, r0, asr #4
 8009d70:	000186a0 	andeq	r8, r1, r0, lsr #13
 8009d74:	00061a80 	andeq	r1, r6, r0, lsl #21

08009d78 <i2c_ack_config>:
 8009d78:	6803      	ldr	r3, [r0, #0]
 8009d7a:	2901      	cmp	r1, #1
 8009d7c:	bf0c      	ite	eq
 8009d7e:	f443 6380 	orreq.w	r3, r3, #1024	; 0x400
 8009d82:	f423 6380 	bicne.w	r3, r3, #1024	; 0x400
 8009d86:	6003      	str	r3, [r0, #0]
 8009d88:	4770      	bx	lr

08009d8a <i2c_ackpos_config>:
 8009d8a:	6803      	ldr	r3, [r0, #0]
 8009d8c:	b919      	cbnz	r1, 8009d96 <i2c_ackpos_config+0xc>
 8009d8e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8009d92:	6003      	str	r3, [r0, #0]
 8009d94:	4770      	bx	lr
 8009d96:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009d9a:	e7fa      	b.n	8009d92 <i2c_ackpos_config+0x8>

08009d9c <i2c_master_addressing>:
 8009d9c:	3202      	adds	r2, #2
 8009d9e:	bf0c      	ite	eq
 8009da0:	f021 0101 	biceq.w	r1, r1, #1
 8009da4:	f041 0101 	orrne.w	r1, r1, #1
 8009da8:	6101      	str	r1, [r0, #16]
 8009daa:	4770      	bx	lr

08009dac <i2c_enable>:
 8009dac:	6803      	ldr	r3, [r0, #0]
 8009dae:	f043 0301 	orr.w	r3, r3, #1
 8009db2:	6003      	str	r3, [r0, #0]
 8009db4:	4770      	bx	lr

08009db6 <i2c_start_on_bus>:
 8009db6:	6803      	ldr	r3, [r0, #0]
 8009db8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009dbc:	6003      	str	r3, [r0, #0]
 8009dbe:	4770      	bx	lr

08009dc0 <i2c_stop_on_bus>:
 8009dc0:	6803      	ldr	r3, [r0, #0]
 8009dc2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8009dc6:	6003      	str	r3, [r0, #0]
 8009dc8:	4770      	bx	lr

08009dca <i2c_data_transmit>:
 8009dca:	6101      	str	r1, [r0, #16]
 8009dcc:	4770      	bx	lr

08009dce <i2c_data_receive>:
 8009dce:	6900      	ldr	r0, [r0, #16]
 8009dd0:	b2c0      	uxtb	r0, r0
 8009dd2:	4770      	bx	lr

08009dd4 <i2c_flag_get>:
 8009dd4:	098b      	lsrs	r3, r1, #6
 8009dd6:	f001 011f 	and.w	r1, r1, #31
 8009dda:	581a      	ldr	r2, [r3, r0]
 8009ddc:	2301      	movs	r3, #1
 8009dde:	408b      	lsls	r3, r1
 8009de0:	4213      	tst	r3, r2
 8009de2:	bf14      	ite	ne
 8009de4:	2001      	movne	r0, #1
 8009de6:	2000      	moveq	r0, #0
 8009de8:	4770      	bx	lr

08009dea <i2c_flag_clear>:
 8009dea:	f240 5301 	movw	r3, #1281	; 0x501
 8009dee:	4299      	cmp	r1, r3
 8009df0:	b510      	push	{r4, lr}
 8009df2:	d102      	bne.n	8009dfa <i2c_flag_clear+0x10>
 8009df4:	6943      	ldr	r3, [r0, #20]
 8009df6:	6983      	ldr	r3, [r0, #24]
 8009df8:	bd10      	pop	{r4, pc}
 8009dfa:	098c      	lsrs	r4, r1, #6
 8009dfc:	2201      	movs	r2, #1
 8009dfe:	5823      	ldr	r3, [r4, r0]
 8009e00:	f001 011f 	and.w	r1, r1, #31
 8009e04:	408a      	lsls	r2, r1
 8009e06:	ea23 0302 	bic.w	r3, r3, r2
 8009e0a:	5023      	str	r3, [r4, r0]
 8009e0c:	e7f4      	b.n	8009df8 <i2c_flag_clear+0xe>

08009e0e <i2s_init>:
 8009e0e:	b510      	push	{r4, lr}
 8009e10:	69c4      	ldr	r4, [r0, #28]
 8009e12:	f424 647b 	bic.w	r4, r4, #4016	; 0xfb0
 8009e16:	f024 0408 	bic.w	r4, r4, #8
 8009e1a:	0424      	lsls	r4, r4, #16
 8009e1c:	0c24      	lsrs	r4, r4, #16
 8009e1e:	4323      	orrs	r3, r4
 8009e20:	431a      	orrs	r2, r3
 8009e22:	4311      	orrs	r1, r2
 8009e24:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
 8009e28:	61c1      	str	r1, [r0, #28]
 8009e2a:	bd10      	pop	{r4, pc}

08009e2c <i2s_psc_config>:
 8009e2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009e2e:	4605      	mov	r5, r0
 8009e30:	4616      	mov	r6, r2
 8009e32:	461f      	mov	r7, r3
 8009e34:	460c      	mov	r4, r1
 8009e36:	b901      	cbnz	r1, 8009e3a <i2s_psc_config+0xe>
 8009e38:	e7fe      	b.n	8009e38 <i2s_psc_config+0xc>
 8009e3a:	2302      	movs	r3, #2
 8009e3c:	6203      	str	r3, [r0, #32]
 8009e3e:	2000      	movs	r0, #0
 8009e40:	f7ff f806 	bl	8008e50 <rcu_clock_freq_get>
 8009e44:	f5b7 7f00 	cmp.w	r7, #512	; 0x200
 8009e48:	f04f 030a 	mov.w	r3, #10
 8009e4c:	d11b      	bne.n	8009e86 <i2s_psc_config+0x5a>
 8009e4e:	0a00      	lsrs	r0, r0, #8
 8009e50:	4358      	muls	r0, r3
 8009e52:	230a      	movs	r3, #10
 8009e54:	fbb0 f4f4 	udiv	r4, r0, r4
 8009e58:	3405      	adds	r4, #5
 8009e5a:	fbb4 f4f3 	udiv	r4, r4, r3
 8009e5e:	f004 0301 	and.w	r3, r4, #1
 8009e62:	0864      	lsrs	r4, r4, #1
 8009e64:	1ea2      	subs	r2, r4, #2
 8009e66:	2afd      	cmp	r2, #253	; 0xfd
 8009e68:	bf92      	itee	ls
 8009e6a:	021b      	lslls	r3, r3, #8
 8009e6c:	2300      	movhi	r3, #0
 8009e6e:	2402      	movhi	r4, #2
 8009e70:	431c      	orrs	r4, r3
 8009e72:	433c      	orrs	r4, r7
 8009e74:	622c      	str	r4, [r5, #32]
 8009e76:	69eb      	ldr	r3, [r5, #28]
 8009e78:	f023 0307 	bic.w	r3, r3, #7
 8009e7c:	61eb      	str	r3, [r5, #28]
 8009e7e:	69eb      	ldr	r3, [r5, #28]
 8009e80:	4333      	orrs	r3, r6
 8009e82:	61eb      	str	r3, [r5, #28]
 8009e84:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009e86:	b90e      	cbnz	r6, 8009e8c <i2s_psc_config+0x60>
 8009e88:	0940      	lsrs	r0, r0, #5
 8009e8a:	e7e1      	b.n	8009e50 <i2s_psc_config+0x24>
 8009e8c:	0980      	lsrs	r0, r0, #6
 8009e8e:	e7df      	b.n	8009e50 <i2s_psc_config+0x24>

08009e90 <i2s_enable>:
 8009e90:	69c3      	ldr	r3, [r0, #28]
 8009e92:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8009e96:	61c3      	str	r3, [r0, #28]
 8009e98:	4770      	bx	lr

08009e9a <i2s_disable>:
 8009e9a:	69c3      	ldr	r3, [r0, #28]
 8009e9c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009ea0:	61c3      	str	r3, [r0, #28]
 8009ea2:	4770      	bx	lr

08009ea4 <spi_dma_enable>:
 8009ea4:	6843      	ldr	r3, [r0, #4]
 8009ea6:	b919      	cbnz	r1, 8009eb0 <spi_dma_enable+0xc>
 8009ea8:	f043 0302 	orr.w	r3, r3, #2
 8009eac:	6043      	str	r3, [r0, #4]
 8009eae:	4770      	bx	lr
 8009eb0:	f043 0301 	orr.w	r3, r3, #1
 8009eb4:	e7fa      	b.n	8009eac <spi_dma_enable+0x8>
	...

Disassembly of section .rodata:

08009eb8 <vtable for RDMResponder-0xe0>:
 8009eb8:	00000000 	andeq	r0, r0, r0
 8009ebc:	18002000 	stmdane	r0, {sp}
 8009ec0:	00180400 	andseq	r0, r8, r0, lsl #8
 8009ec4:	00000007 	andeq	r0, r0, r7
	...
 8009ed0:	03020100 	movweq	r0, #8448	; 0x2100
 8009ed4:	08070604 	stmdaeq	r7, {r2, r9, sl}
 8009ed8:	00000009 	andeq	r0, r0, r9
 8009edc:	03020100 	movweq	r0, #8448	; 0x2100
 8009ee0:	73696404 	cmnvc	r9, #4, 8	; 0x4000000
 8009ee4:	656c6261 	strbvs	r6, [ip, #-609]!	; 0xfffffd9f
 8009ee8:	6e650064 	cdpvs	0, 6, cr0, cr5, cr4, {3}
 8009eec:	656c6261 	strbvs	r6, [ip, #-609]!	; 0xfffffd9f
 8009ef0:	6f430064 	svcvs	0x00430064
 8009ef4:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
 8009ef8:	646f4d20 	strbtvs	r4, [pc], #-3360	; 8009f00 <_etext+0x48>
 8009efc:	35310065 	ldrcc	r0, [r1, #-101]!	; 0xffffff9b
 8009f00:	3a35353a 	bcc	8d573f0 <__exidx_end+0xd4b484>
 8009f04:	4d003435 	cfstrsmi	mvf3, [r0, #-212]	; 0xffffff2c
 8009f08:	31207261 			; <UNDEFINED> instruction: 0x31207261
 8009f0c:	30322039 	eorscc	r2, r2, r9, lsr r0
 8009f10:	52003332 	andpl	r3, r0, #-939524096	; 0xc8000000
 8009f14:	52204d44 	eorpl	r4, r0, #68, 26	; 0x1100
 8009f18:	6f707365 	svcvs	0x00707365
 8009f1c:	7265646e 	rsbvc	r6, r5, #1845493760	; 0x6e000000
 8009f20:	335b1b00 	cmpcc	fp, #0, 22
 8009f24:	73256d32 			; <UNDEFINED> instruction: 0x73256d32
 8009f28:	6d305b1b 	fldmdbxvs	r0!, {d5-d17}	;@ Deprecated
 8009f2c:	7325000a 			; <UNDEFINED> instruction: 0x7325000a
 8009f30:	2075253a 	rsbscs	r2, r5, sl, lsr r5
 8009f34:	20752547 	rsbscs	r2, r5, r7, asr #10
 8009f38:	5d73255b 	cfldr64pl	mvdx2, [r3, #-364]!	; 0xfffffe94
 8009f3c:	6e6f4300 	cdpvs	3, 6, cr4, cr15, cr0, {0}
 8009f40:	20676966 	rsbcs	r6, r7, r6, ror #18
 8009f44:	65646f6d 	strbvs	r6, [r4, #-3949]!	; 0xfffff093
 8009f48:	754f2000 	strbvc	r2, [pc, #-0]	; 8009f50 <_etext+0x98>
 8009f4c:	74757074 	ldrbtvc	r7, [r5], #-116	; 0xffffff8c
 8009f50:	0a732520 	beq	9cd33d8 <__exidx_end+0x1cc746c>
 8009f54:	73655400 	cmnvc	r5, #0, 8
 8009f58:	61702074 	cmnvs	r0, r4, ror r0
 8009f5c:	72657474 	rsbvc	r7, r5, #116, 8	; 0x74000000
 8009f60:	203a206e 	eorscs	r2, sl, lr, rrx
 8009f64:	5b207325 	blpl	8826c00 <__exidx_end+0x81ac94>
 8009f68:	0a5d7525 	beq	9767404 <__exidx_end+0x175b498>
 8009f6c:	4d445200 	sfmmi	f5, 2, [r4, #-0]
 8009f70:	73655220 	cmnvc	r5, #32, 4
 8009f74:	646e6f70 	strbtvs	r6, [lr], #-3952	; 0xfffff090
 8009f78:	50207265 	eorpl	r7, r0, r5, ror #4
 8009f7c:	6c657869 	stclvs	8, cr7, [r5], #-420	; 0xfffffe5c
 8009f80:	25003120 	strcs	r3, [r0, #-288]	; 0xfffffee0
 8009f84:	64253a73 	strtvs	r3, [r5], #-2675	; 0xfffff58d
 8009f88:	64254720 	strtvs	r4, [r5], #-1824	; 0xfffff8e0
 8009f8c:	00732520 	rsbseq	r2, r3, r0, lsr #10
 8009f90:	253a7325 	ldrcs	r7, [sl, #-805]!	; 0xfffffcdb
 8009f94:	00000075 	andeq	r0, r0, r5, ror r0

08009f98 <vtable for RDMResponder>:
	...
 8009fa0:	08000ad5 	stmdaeq	r0, {r0, r2, r4, r6, r7, r9, fp}
 8009fa4:	08000b1d 	stmdaeq	r0, {r0, r2, r3, r4, r8, r9, fp}
 8009fa8:	08000a81 	stmdaeq	r0, {r0, r7, r9, fp}
 8009fac:	08000ab5 	stmdaeq	r0, {r0, r2, r4, r5, r7, r9, fp}

08009fb0 <vtable for PixelDmxStartStop>:
	...
 8009fb8:	08000a5b 	stmdaeq	r0, {r0, r1, r3, r4, r6, r9, fp}
 8009fbc:	08000a75 	stmdaeq	r0, {r0, r2, r4, r5, r6, r9, fp}
 8009fc0:	08000a5d 	stmdaeq	r0, {r0, r2, r3, r4, r6, r9, fp}
 8009fc4:	08000a69 	stmdaeq	r0, {r0, r3, r5, r6, r9, fp}

08009fc8 <SOFTWARE_VERSION>:
 8009fc8:	00332e31 	eorseq	r2, r3, r1, lsr lr

08009fcc <gamma10_0>:
 8009fcc:	03020100 	movweq	r0, #8448	; 0x2100
 8009fd0:	07060504 	streq	r0, [r6, -r4, lsl #10]
 8009fd4:	0b0a0908 	bleq	828c3fc <__exidx_end+0x280490>
 8009fd8:	0f0e0d0c 	svceq	0x000e0d0c
 8009fdc:	13121110 	tstne	r2, #16, 2
 8009fe0:	17161514 			; <UNDEFINED> instruction: 0x17161514
 8009fe4:	1b1a1918 	blne	869044c <__exidx_end+0x6844e0>
 8009fe8:	1f1e1d1c 	svcne	0x001e1d1c
 8009fec:	23222120 			; <UNDEFINED> instruction: 0x23222120
 8009ff0:	27262524 	strcs	r2, [r6, -r4, lsr #10]!
 8009ff4:	2b2a2928 	blcs	8a9449c <__exidx_end+0xa88530>
 8009ff8:	2f2e2d2c 	svccs	0x002e2d2c
 8009ffc:	33323130 	teqcc	r2, #48, 2
 800a000:	37363534 			; <UNDEFINED> instruction: 0x37363534
 800a004:	3b3a3938 	blcc	8e984ec <__exidx_end+0xe8c580>
 800a008:	3f3e3d3c 	svccc	0x003e3d3c
 800a00c:	43424140 	movtmi	r4, #8512	; 0x2140
 800a010:	47464544 	strbmi	r4, [r6, -r4, asr #10]
 800a014:	4b4a4948 	blmi	929c53c <__exidx_end+0x12905d0>
 800a018:	4f4e4d4c 	svcmi	0x004e4d4c
 800a01c:	53525150 	cmppl	r2, #80, 2
 800a020:	57565554 			; <UNDEFINED> instruction: 0x57565554
 800a024:	5b5a5958 	blpl	96a058c <__exidx_end+0x1694620>
 800a028:	5f5e5d5c 	svcpl	0x005e5d5c
 800a02c:	63626160 	cmnvs	r2, #96, 2
 800a030:	67666564 	strbvs	r6, [r6, -r4, ror #10]!
 800a034:	6b6a6968 	blvs	9aa45dc <__exidx_end+0x1a98670>
 800a038:	6f6e6d6c 	svcvs	0x006e6d6c
 800a03c:	73727170 	cmnvc	r2, #112, 2
 800a040:	77767574 			; <UNDEFINED> instruction: 0x77767574
 800a044:	7b7a7978 	blvc	9ea862c <__exidx_end+0x1e9c6c0>
 800a048:	7f7e7d7c 	svcvc	0x007e7d7c
 800a04c:	83828180 	orrhi	r8, r2, #128, 2
 800a050:	87868584 	strhi	r8, [r6, r4, lsl #11]
 800a054:	8b8a8988 	blhi	62ac67c <__heap_size+0x62ab67c>
 800a058:	8f8e8d8c 	svchi	0x008e8d8c
 800a05c:	93929190 	orrsls	r9, r2, #144, 2	; 0x24
 800a060:	97969594 			; <UNDEFINED> instruction: 0x97969594
 800a064:	9b9a9998 	blls	66b06cc <__heap_size+0x66af6cc>
 800a068:	9f9e9d9c 	svcls	0x009e9d9c
 800a06c:	a3a2a1a0 			; <UNDEFINED> instruction: 0xa3a2a1a0
 800a070:	a7a6a5a4 	strge	sl, [r6, r4, lsr #11]!
 800a074:	abaaa9a8 	blge	6ab471c <__heap_size+0x6ab371c>
 800a078:	afaeadac 	svcge	0x00aeadac
 800a07c:	b3b2b1b0 			; <UNDEFINED> instruction: 0xb3b2b1b0
 800a080:	b7b6b5b4 			; <UNDEFINED> instruction: 0xb7b6b5b4
 800a084:	bbbab9b8 	bllt	6eb876c <__heap_size+0x6eb776c>
 800a088:	bfbebdbc 	svclt	0x00bebdbc
 800a08c:	c3c2c1c0 	bicgt	ip, r2, #192, 2	; 0x30
 800a090:	c7c6c5c4 	strbgt	ip, [r6, r4, asr #11]
 800a094:	cbcac9c8 	blgt	72bc7bc <__heap_size+0x72bb7bc>
 800a098:	cfcecdcc 	svcgt	0x00cecdcc
 800a09c:	d3d2d1d0 	bicsle	sp, r2, #208, 2	; 0x34
 800a0a0:	d7d6d5d4 			; <UNDEFINED> instruction: 0xd7d6d5d4
 800a0a4:	dbdad9d8 	blle	76c080c <__heap_size+0x76bf80c>
 800a0a8:	dfdedddc 	svcle	0x00dedddc
 800a0ac:	e3e2e1e0 	mvn	lr, #224, 2	; 0x38
 800a0b0:	e7e6e5e4 	strb	lr, [r6, r4, ror #11]!
 800a0b4:	ebeae9e8 	bl	7ac485c <__heap_size+0x7ac385c>
 800a0b8:	efeeedec 	svc	0x00eeedec
 800a0bc:	f3f2f1f0 	vsra.u64	<illegal reg q15.5>, q8, #14
 800a0c0:	f7f6f5f4 			; <UNDEFINED> instruction: 0xf7f6f5f4
 800a0c4:	fbfaf9f8 	blx	7ec88ae <__heap_size+0x7ec78ae>
 800a0c8:	fffefdfc 			; <UNDEFINED> instruction: 0xfffefdfc
 800a0cc:	30322d25 	eorscc	r2, r2, r5, lsr #26
 800a0d0:	2d250073 	stccs	0, cr0, [r5, #-460]!	; 0xfffffe34
 800a0d4:	25207338 	strcs	r7, [r0, #-824]!	; 0xfffffcc8
 800a0d8:	2064322d 	rsbcs	r3, r4, sp, lsr #4
 800a0dc:	322d2547 	eorcc	r2, sp, #297795584	; 0x11c00000
 800a0e0:	2d252064 	stccs	0, cr2, [r5, #-400]!	; 0xfffffe70
 800a0e4:	50007335 	andpl	r7, r0, r5, lsr r3
 800a0e8:	72676f72 	rsbvc	r6, r7, #456	; 0x1c8
 800a0ec:	656d6d61 	strbvs	r6, [sp, #-3425]!	; 0xfffff29f
 800a0f0:	79540064 	ldmdbvc	r4, {r2, r5, r6}^
 800a0f4:	47006570 	smlsdxmi	r0, r0, r5, r6
 800a0f8:	70756f72 	rsbsvc	r6, r5, r2, ror pc
 800a0fc:	20676e69 	rsbcs	r6, r7, r9, ror #28
 800a100:	6e756f43 	cdpvs	15, 7, cr6, cr5, cr3, {2}
 800a104:	614d0074 	hvcvs	53252	; 0xd004
 800a108:	65540070 	ldrbvs	r0, [r4, #-112]	; 0xffffff90
 800a10c:	50207473 	eorpl	r7, r0, r3, ror r4
 800a110:	65747461 	ldrbvs	r7, [r4, #-1121]!	; 0xfffffb9f
 800a114:	50006e72 	andpl	r6, r0, r2, ror lr
 800a118:	72676f72 	rsbvc	r6, r7, #456	; 0x1c8
 800a11c:	55006d61 	strpl	r6, [r0, #-3425]	; 0xfffff29f
 800a120:	6665646e 	strbtvs	r6, [r5], -lr, ror #8
 800a124:	64656e69 	strbtvs	r6, [r5], #-3689	; 0xfffff197
	...

0800a129 <SOFTWARE_VERSION>:
 800a129:	00332e31 	eorseq	r2, r3, r1, lsr lr
 800a12d:	00555043 	subseq	r5, r5, r3, asr #32
 800a131:	 	andeq	r0, r0, r0

0800a134 <vtable for CpuTemperature>:
	...
 800a13c:	08002119 	stmdaeq	r0, {r0, r3, r4, r8, sp}
 800a140:	0800212d 	stmdaeq	r0, {r0, r2, r3, r5, r8, sp}
 800a144:	08002115 	stmdaeq	r0, {r0, r2, r4, r8, sp}
 800a148:	0800211b 	stmdaeq	r0, {r0, r1, r3, r4, r8, sp}

0800a14c <vtable for RDMSensorBH170>:
	...
 800a154:	08002455 	stmdaeq	r0, {r0, r2, r4, r6, sl, sp}
 800a158:	08002457 	stmdaeq	r0, {r0, r1, r2, r4, r6, sl, sp}
 800a15c:	08002251 	stmdaeq	r0, {r0, r4, r6, r9, sp}
 800a160:	080023c9 	stmdaeq	r0, {r0, r3, r6, r7, r8, r9, sp}

0800a164 <vtable for RDMSensorMCP9808>:
	...
 800a16c:	08002447 	stmdaeq	r0, {r0, r1, r2, r6, sl, sp}
 800a170:	08002449 	stmdaeq	r0, {r0, r3, r6, sl, sp}
 800a174:	08002257 	stmdaeq	r0, {r0, r1, r2, r4, r6, r9, sp}
 800a178:	080023b5 	stmdaeq	r0, {r0, r2, r4, r5, r7, r8, r9, sp}

0800a17c <vtable for RDMSensorHTU21DHumidity>:
	...
 800a184:	08002439 	stmdaeq	r0, {r0, r3, r4, r5, sl, sp}
 800a188:	0800243b 	stmdaeq	r0, {r0, r1, r3, r4, r5, sl, sp}
 800a18c:	0800225d 	stmdaeq	r0, {r0, r2, r3, r4, r6, r9, sp}
 800a190:	080023a1 	stmdaeq	r0, {r0, r5, r7, r8, r9, sp}

0800a194 <vtable for RDMSensorHTU21DTemperature>:
	...
 800a19c:	0800242b 	stmdaeq	r0, {r0, r1, r3, r5, sl, sp}
 800a1a0:	0800242d 	stmdaeq	r0, {r0, r2, r3, r5, sl, sp}
 800a1a4:	08002263 	stmdaeq	r0, {r0, r1, r5, r6, r9, sp}
 800a1a8:	0800238d 	stmdaeq	r0, {r0, r2, r3, r7, r8, r9, sp}

0800a1ac <vtable for RDMSensorINA219Current>:
	...
 800a1b4:	0800241d 	stmdaeq	r0, {r0, r2, r3, r4, sl, sp}
 800a1b8:	0800241f 	stmdaeq	r0, {r0, r1, r2, r3, r4, sl, sp}
 800a1bc:	08002269 	stmdaeq	r0, {r0, r3, r5, r6, r9, sp}
 800a1c0:	0800236d 	stmdaeq	r0, {r0, r2, r3, r5, r6, r8, r9, sp}

0800a1c4 <vtable for RDMSensorINA219Power>:
	...
 800a1cc:	0800240f 	stmdaeq	r0, {r0, r1, r2, r3, sl, sp}
 800a1d0:	08002411 	stmdaeq	r0, {r0, r4, sl, sp}
 800a1d4:	0800226f 	stmdaeq	r0, {r0, r1, r2, r3, r5, r6, r9, sp}
 800a1d8:	08002359 	stmdaeq	r0, {r0, r3, r4, r6, r8, r9, sp}

0800a1dc <vtable for RDMSensorINA219Voltage>:
	...
 800a1e4:	08002401 	stmdaeq	r0, {r0, sl, sp}
 800a1e8:	08002403 	stmdaeq	r0, {r0, r1, sl, sp}
 800a1ec:	08002275 	stmdaeq	r0, {r0, r2, r4, r5, r6, r9, sp}
 800a1f0:	08002339 	stmdaeq	r0, {r0, r3, r4, r5, r8, r9, sp}

0800a1f4 <vtable for RDMSensorSI7021Humidity>:
	...
 800a1fc:	080023f3 	stmdaeq	r0, {r0, r1, r4, r5, r6, r7, r8, r9, sp}
 800a200:	080023f5 	stmdaeq	r0, {r0, r2, r4, r5, r6, r7, r8, r9, sp}
 800a204:	0800227b 	stmdaeq	r0, {r0, r1, r3, r4, r5, r6, r9, sp}
 800a208:	08002325 	stmdaeq	r0, {r0, r2, r5, r8, r9, sp}

0800a20c <vtable for RDMSensorSI7021Temperature>:
	...
 800a214:	080023e5 	stmdaeq	r0, {r0, r2, r5, r6, r7, r8, r9, sp}
 800a218:	080023e7 	stmdaeq	r0, {r0, r1, r2, r5, r6, r7, r8, r9, sp}
 800a21c:	08002281 	stmdaeq	r0, {r0, r7, r9, sp}
 800a220:	08002311 	stmdaeq	r0, {r0, r4, r8, r9, sp}

0800a224 <vtable for RDMSensorThermistor>:
	...
 800a22c:	080023d7 	stmdaeq	r0, {r0, r1, r2, r4, r6, r7, r8, r9, sp}
 800a230:	080023d9 	stmdaeq	r0, {r0, r3, r4, r6, r7, r8, r9, sp}
 800a234:	08002287 	stmdaeq	r0, {r0, r1, r2, r7, r9, sp}
 800a238:	08002291 	stmdaeq	r0, {r0, r4, r7, r9, sp}

0800a23c <sensor::thermistor::DESCRIPTION>:
 800a23c:	69626d41 	stmdbvs	r2!, {r0, r6, r8, sl, fp, sp, lr}^
 800a240:	20746e65 	rsbscs	r6, r4, r5, ror #28
 800a244:	706d6554 	rsbvc	r6, sp, r4, asr r5
 800a248:	74617265 	strbtvc	r7, [r1], #-613	; 0xfffffd9b
 800a24c:	00657275 	rsbeq	r7, r5, r5, ror r2

0800a250 <sensor::bh1750::DESCRIPTION>:
 800a250:	69626d41 	stmdbvs	r2!, {r0, r6, r8, sl, fp, sp, lr}^
 800a254:	20746e65 	rsbscs	r6, r4, r5, ror #28
 800a258:	6867694c 	stmdavs	r7!, {r2, r3, r6, r8, fp, sp, lr}^
 800a25c:	 	stclvs	0, cr0, [r1, #-464]	; 0xfffffe30

0800a25e <sensor::htu21d::temperature::DESCRIPTION>:
 800a25e:	69626d41 	stmdbvs	r2!, {r0, r6, r8, sl, fp, sp, lr}^
 800a262:	20746e65 	rsbscs	r6, r4, r5, ror #28
 800a266:	706d6554 	rsbvc	r6, sp, r4, asr r5
 800a26a:	74617265 	strbtvc	r7, [r1], #-613	; 0xfffffd9b
 800a26e:	00657275 	rsbeq	r7, r5, r5, ror r2

0800a272 <sensor::htu21d::humidity::DESCRIPTION>:
 800a272:	616c6552 	cmnvs	ip, r2, asr r5
 800a276:	65766974 	ldrbvs	r6, [r6, #-2420]!	; 0xfffff68c
 800a27a:	6d754820 	ldclvs	8, cr4, [r5, #-128]!	; 0xffffff80
 800a27e:	74696469 	strbtvc	r6, [r9], #-1129	; 0xfffffb97
 800a282:	 	svcvs	0x00500079

0800a284 <sensor::ina219::power::DESCRIPTION>:
 800a284:	65776f50 	ldrbvs	r6, [r7, #-3920]!	; 0xfffff0b0
 800a288:	 	strbvc	r0, [r3, #-114]	; 0xffffff8e

0800a28a <sensor::ina219::current::DESCRIPTION>:
 800a28a:	72727543 	rsbsvc	r7, r2, #281018368	; 0x10c00000
 800a28e:	00746e65 	rsbseq	r6, r4, r5, ror #28

0800a292 <sensor::ina219::voltage::DESCRIPTION>:
 800a292:	746c6f56 	strbtvc	r6, [ip], #-3926	; 0xfffff0aa
 800a296:	00656761 	rsbeq	r6, r5, r1, ror #14

0800a29a <sensor::si7021::temperature::DESCRIPTION>:
 800a29a:	69626d41 	stmdbvs	r2!, {r0, r6, r8, sl, fp, sp, lr}^
 800a29e:	20746e65 	rsbscs	r6, r4, r5, ror #28
 800a2a2:	706d6554 	rsbvc	r6, sp, r4, asr r5
 800a2a6:	74617265 	strbtvc	r7, [r1], #-613	; 0xfffffd9b
 800a2aa:	00657275 	rsbeq	r7, r5, r5, ror r2

0800a2ae <sensor::si7021::humidity::DESCRIPTION>:
 800a2ae:	616c6552 	cmnvs	ip, r2, asr r5
 800a2b2:	65766974 	ldrbvs	r6, [r6, #-2420]!	; 0xfffff68c
 800a2b6:	6d754820 	ldclvs	8, cr4, [r5, #-128]!	; 0xffffff80
 800a2ba:	74696469 	strbtvc	r6, [r9], #-1129	; 0xfffffb97
 800a2be:	 	stclvs	0, cr0, [r1, #-484]	; 0xfffffe1c

0800a2c0 <sensor::mcp9808::DESCRIPTION>:
 800a2c0:	69626d41 	stmdbvs	r2!, {r0, r6, r8, sl, fp, sp, lr}^
 800a2c4:	20746e65 	rsbscs	r6, r4, r5, ror #28
 800a2c8:	706d6554 	rsbvc	r6, sp, r4, asr r5
 800a2cc:	74617265 	strbtvc	r7, [r1], #-613	; 0xfffffd9b
 800a2d0:	00657275 	rsbeq	r7, r5, r5, ror r2

0800a2d4 <vtable for RDMSensor>:
	...
 800a2ec:	204d4452 	subcs	r4, sp, r2, asr r4
 800a2f0:	70736552 	rsbsvc	r6, r3, r2, asr r5
 800a2f4:	65646e6f 	strbvs	r6, [r4, #-3695]!	; 0xfffff191
 800a2f8:	6f632072 	svcvs	0x00632072
 800a2fc:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
 800a300:	74617275 	strbtvc	r7, [r1], #-629	; 0xfffffd8b
 800a304:	0a6e6f69 	beq	9ba60b0 <__exidx_end+0x1b9a144>
 800a308:	72502000 	subsvc	r2, r0, #0
 800a30c:	636f746f 	cmnvs	pc, #1862270976	; 0x6f000000
 800a310:	56206c6f 	strtpl	r6, [r0], -pc, ror #24
 800a314:	69737265 	ldmdbvs	r3!, {r0, r2, r5, r6, r9, ip, sp, lr}^
 800a318:	25206e6f 	strcs	r6, [r0, #-3695]!	; 0xfffff191
 800a31c:	64252e64 	strtvs	r2, [r5], #-3684	; 0xfffff19c
 800a320:	4420000a 	strtmi	r0, [r0], #-10
 800a324:	4120584d 			; <UNDEFINED> instruction: 0x4120584d
 800a328:	65726464 	ldrbvs	r6, [r2, #-1124]!	; 0xfffffb9c
 800a32c:	20207373 	eorcs	r7, r0, r3, ror r3
 800a330:	20202020 	eorcs	r2, r0, r0, lsr #32
 800a334:	6425203a 	strtvs	r2, [r5], #-58	; 0xffffffc6
 800a338:	4420000a 	strtmi	r0, [r0], #-10
 800a33c:	4620584d 	strtmi	r5, [r0], -sp, asr #16
 800a340:	70746f6f 	rsbsvc	r6, r4, pc, ror #30
 800a344:	746e6972 	strbtvc	r6, [lr], #-2418	; 0xfffff68e
 800a348:	20202020 	eorcs	r2, r0, r0, lsr #32
 800a34c:	6425203a 	strtvs	r2, [r5], #-58	; 0xffffffc6
 800a350:	5020000a 	eorpl	r0, r0, sl
 800a354:	6f737265 	svcvs	0x00737265
 800a358:	696c616e 	stmdbvs	ip!, {r1, r2, r3, r5, r6, r8, sp, lr}^
 800a35c:	25207974 	strcs	r7, [r0, #-2420]!	; 0xfffff68c
 800a360:	666f2064 	strbtvs	r2, [pc], -r4, rrx
 800a364:	20642520 	rsbcs	r2, r4, r0, lsr #10
 800a368:	2a2e255b 	bcs	8b938dc <__exidx_end+0xb87970>
 800a36c:	000a5d73 	andeq	r5, sl, r3, ror sp
 800a370:	62755320 	rsbsvs	r5, r5, #32, 6	; 0x80000000
 800a374:	76654420 	strbtvc	r4, [r5], -r0, lsr #8
 800a378:	73656369 	cmnvc	r5, #-1543503871	; 0xa4000001
 800a37c:	20202020 	eorcs	r2, r0, r0, lsr #32
 800a380:	203a2020 	eorscs	r2, sl, r0, lsr #32
 800a384:	000a6425 	andeq	r6, sl, r5, lsr #8
 800a388:	6e655320 	cdpvs	3, 6, cr5, cr5, cr0, {1}
 800a38c:	73726f73 	cmnvc	r2, #460	; 0x1cc
 800a390:	20202020 	eorcs	r2, r0, r0, lsr #32
 800a394:	20202020 	eorcs	r2, r0, r0, lsr #32
 800a398:	203a2020 	eorscs	r2, sl, r0, lsr #32
 800a39c:	000a6425 	andeq	r6, sl, r5, lsr #8

0800a3a0 <vtable for RDMDeviceResponder>:
	...
 800a3a8:	08003d89 	stmdaeq	r0, {r0, r3, r7, r8, sl, fp, ip, sp}
 800a3ac:	08003da9 	stmdaeq	r0, {r0, r3, r5, r7, r8, sl, fp, ip, sp}
 800a3b0:	08003d85 	stmdaeq	r0, {r0, r2, r7, r8, sl, fp, ip, sp}
 800a3b4:	08003d87 	stmdaeq	r0, {r0, r1, r2, r7, r8, sl, fp, ip, sp}
 800a3b8:	32334447 	eorscc	r4, r3, #1191182336	; 0x47000000
 800a3bc:	33303346 	teqcc	r0, #402653185	; 0x18000001
 800a3c0:	45004352 	strmi	r4, [r0, #-850]	; 0xfffffcae
 800a3c4:	6465626d 	strbtvs	r6, [r5], #-621	; 0xfffffd93
 800a3c8:	00646564 	rsbeq	r6, r4, r4, ror #10

0800a3cc <UID_ALL>:
 800a3cc:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 800a3d0:	0000ffff 	strdeq	pc, [r0], -pc	; <UNPREDICTABLE>

0800a3d4 <RDMHandler::PID_DEFINITIONS>:
 800a3d4:	00000060 	andeq	r0, r0, r0, rrx
 800a3d8:	080042d1 	stmdaeq	r0, {r0, r4, r6, r7, r9, lr}
	...
 800a3e8:	01010000 	mrseq	r0, (UNDEF: 1)
 800a3ec:	00000080 	andeq	r0, r0, r0, lsl #1
 800a3f0:	080043d5 	stmdaeq	r0, {r0, r2, r4, r6, r7, r8, r9, lr}
	...
 800a400:	01010100 	mrseq	r0, (UNDEF: 17)
 800a404:	00000081 	andeq	r0, r0, r1, lsl #1
 800a408:	080043f1 	stmdaeq	r0, {r0, r4, r5, r6, r7, r8, r9, lr}
	...
 800a418:	01010100 	mrseq	r0, (UNDEF: 17)
 800a41c:	00000082 	andeq	r0, r0, r2, lsl #1
 800a420:	08004411 	stmdaeq	r0, {r0, r4, sl, lr}
 800a424:	00000000 	andeq	r0, r0, r0
 800a428:	08004e09 	stmdaeq	r0, {r0, r3, r9, sl, fp, lr}
 800a42c:	00000000 	andeq	r0, r0, r0
 800a430:	01010100 	mrseq	r0, (UNDEF: 17)
 800a434:	00000090 	muleq	r0, r0, r0
 800a438:	08004339 	stmdaeq	r0, {r0, r3, r4, r5, r8, r9, lr}
 800a43c:	00000000 	andeq	r0, r0, r0
 800a440:	08004d51 	stmdaeq	r0, {r0, r4, r6, r8, sl, fp, lr}
 800a444:	00000000 	andeq	r0, r0, r0
 800a448:	01010100 	mrseq	r0, (UNDEF: 17)
 800a44c:	00001000 	andeq	r1, r0, r0
 800a450:	08004471 	stmdaeq	r0, {r0, r4, r5, r6, sl, lr}
 800a454:	00000000 	andeq	r0, r0, r0
 800a458:	080046f1 	stmdaeq	r0, {r0, r4, r5, r6, r7, r9, sl, lr}
 800a45c:	00000000 	andeq	r0, r0, r0
 800a460:	01010000 	mrseq	r0, (UNDEF: 1)
 800a464:	00001001 	andeq	r1, r0, r1
	...
 800a470:	080046a9 	stmdaeq	r0, {r0, r3, r5, r7, r9, sl, lr}
 800a474:	00000000 	andeq	r0, r0, r0
 800a478:	01010100 	mrseq	r0, (UNDEF: 17)
 800a47c:	00000050 	andeq	r0, r0, r0, asr r0
 800a480:	08004265 	stmdaeq	r0, {r0, r2, r5, r6, r9, lr}
	...
 800a490:	00010000 	andeq	r0, r1, r0
 800a494:	00000070 	andeq	r0, r0, r0, ror r0
 800a498:	080043b9 	stmdaeq	r0, {r0, r3, r4, r5, r7, r8, r9, lr}
	...
 800a4a8:	00010100 	andeq	r0, r1, r0, lsl #2
 800a4ac:	000000a0 	andeq	r0, r0, r0, lsr #1
 800a4b0:	08004485 	stmdaeq	r0, {r0, r2, r7, sl, lr}
	...
 800a4c0:	00010100 	andeq	r0, r1, r0, lsl #2
 800a4c4:	000000b0 	strheq	r0, [r0], -r0	; <UNPREDICTABLE>
 800a4c8:	08004485 	stmdaeq	r0, {r0, r2, r7, sl, lr}
 800a4cc:	00000000 	andeq	r0, r0, r0
 800a4d0:	0800476d 	stmdaeq	r0, {r0, r2, r3, r5, r6, r8, r9, sl, lr}
 800a4d4:	00000000 	andeq	r0, r0, r0
 800a4d8:	00010100 	andeq	r0, r1, r0, lsl #2
 800a4dc:	000000c0 	andeq	r0, r0, r0, asr #1
 800a4e0:	0800444d 	stmdaeq	r0, {r0, r2, r3, r6, sl, lr}
	...
 800a4f0:	00010000 	andeq	r0, r1, r0
 800a4f4:	000000c1 	andeq	r0, r0, r1, asr #1
 800a4f8:	080047b5 	stmdaeq	r0, {r0, r2, r4, r5, r7, r8, r9, sl, lr}
	...
 800a508:	00010100 	andeq	r0, r1, r0, lsl #2
 800a50c:	000000c2 	andeq	r0, r0, r2, asr #1
 800a510:	080045f5 	stmdaeq	r0, {r0, r2, r4, r5, r6, r7, r8, sl, lr}
	...
 800a520:	00010100 	andeq	r0, r1, r0, lsl #2
 800a524:	000000e0 	andeq	r0, r0, r0, ror #1
 800a528:	080044a5 	stmdaeq	r0, {r0, r2, r5, r7, sl, lr}
 800a52c:	00000000 	andeq	r0, r0, r0
 800a530:	080047d5 	stmdaeq	r0, {r0, r2, r4, r6, r7, r8, r9, sl, lr}
 800a534:	00000000 	andeq	r0, r0, r0
 800a538:	00010100 	andeq	r0, r1, r0, lsl #2
 800a53c:	000000e1 	andeq	r0, r0, r1, ror #1
 800a540:	08004829 	stmdaeq	r0, {r0, r3, r5, fp, lr}
	...
 800a550:	00010101 	andeq	r0, r1, r1, lsl #2
 800a554:	000000f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
 800a558:	080044e1 	stmdaeq	r0, {r0, r5, r6, r7, sl, lr}
 800a55c:	00000000 	andeq	r0, r0, r0
 800a560:	080048ad 	stmdaeq	r0, {r0, r2, r3, r5, r7, fp, lr}
 800a564:	00000000 	andeq	r0, r0, r0
 800a568:	00010000 	andeq	r0, r1, r0
 800a56c:	00000120 	andeq	r0, r0, r0, lsr #2
 800a570:	08004611 	stmdaeq	r0, {r0, r4, r9, sl, lr}
	...
 800a580:	00010100 	andeq	r0, r1, r0, lsl #2
 800a584:	00000121 	andeq	r0, r0, r1, lsr #2
 800a588:	08004cd9 	stmdaeq	r0, {r0, r3, r4, r6, r7, sl, fp, lr}
	...
 800a598:	00010102 	andeq	r0, r1, r2, lsl #2
 800a59c:	00000200 	andeq	r0, r0, r0, lsl #4
 800a5a0:	080048fd 	stmdaeq	r0, {r0, r2, r3, r4, r5, r6, r7, fp, lr}
	...
 800a5b0:	00010101 	andeq	r0, r1, r1, lsl #2
 800a5b4:	00000201 	andeq	r0, r0, r1, lsl #4
 800a5b8:	080049a5 	stmdaeq	r0, {r0, r2, r5, r7, r8, fp, lr}
 800a5bc:	00000000 	andeq	r0, r0, r0
 800a5c0:	08004a25 	stmdaeq	r0, {r0, r2, r5, r9, fp, lr}
 800a5c4:	00000000 	andeq	r0, r0, r0
 800a5c8:	00010101 	andeq	r0, r1, r1, lsl #2
 800a5cc:	00000202 	andeq	r0, r0, r2, lsl #4
	...
 800a5d8:	08004ad9 	stmdaeq	r0, {r0, r3, r4, r6, r7, r9, fp, lr}
 800a5dc:	00000000 	andeq	r0, r0, r0
 800a5e0:	00010100 	andeq	r0, r1, r0, lsl #2
 800a5e4:	00000400 	andeq	r0, r0, r0, lsl #8
 800a5e8:	0800451d 	stmdaeq	r0, {r0, r2, r3, r4, r8, sl, lr}
 800a5ec:	00000000 	andeq	r0, r0, r0
 800a5f0:	08004b25 	stmdaeq	r0, {r0, r2, r5, r8, r9, fp, lr}
 800a5f4:	00000000 	andeq	r0, r0, r0
 800a5f8:	00010100 	andeq	r0, r1, r0, lsl #2
 800a5fc:	00000500 	andeq	r0, r0, r0, lsl #10
 800a600:	08004545 	stmdaeq	r0, {r0, r2, r6, r8, sl, lr}
 800a604:	00000000 	andeq	r0, r0, r0
 800a608:	08004b2d 	stmdaeq	r0, {r0, r2, r3, r5, r8, r9, fp, lr}
 800a60c:	00000000 	andeq	r0, r0, r0
 800a610:	00010100 	andeq	r0, r1, r0, lsl #2
 800a614:	00000501 	andeq	r0, r0, r1, lsl #10
 800a618:	08004561 	stmdaeq	r0, {r0, r5, r6, r8, sl, lr}
 800a61c:	00000000 	andeq	r0, r0, r0
 800a620:	08004b79 	stmdaeq	r0, {r0, r3, r4, r5, r6, r8, r9, fp, lr}
 800a624:	00000000 	andeq	r0, r0, r0
 800a628:	00010100 	andeq	r0, r1, r0, lsl #2
 800a62c:	00000603 	andeq	r0, r0, r3, lsl #12
 800a630:	0800457d 	stmdaeq	r0, {r0, r2, r3, r4, r5, r6, r8, sl, lr}
 800a634:	00000000 	andeq	r0, r0, r0
 800a638:	08004bc1 	stmdaeq	r0, {r0, r6, r7, r8, r9, fp, lr}
 800a63c:	00000000 	andeq	r0, r0, r0
 800a640:	00010100 	andeq	r0, r1, r0, lsl #2
 800a644:	00001010 	andeq	r1, r0, r0, lsl r0
 800a648:	080045c5 	stmdaeq	r0, {r0, r2, r6, r7, r8, sl, lr}
 800a64c:	00000000 	andeq	r0, r0, r0
 800a650:	08004c29 	stmdaeq	r0, {r0, r3, r5, sl, fp, lr}
 800a654:	00000000 	andeq	r0, r0, r0
 800a658:	00010100 	andeq	r0, r1, r0, lsl #2
 800a65c:	00001020 	andeq	r1, r0, r0, lsr #32
 800a660:	080045d3 	stmdaeq	r0, {r0, r1, r4, r6, r7, r8, sl, lr}
 800a664:	00000000 	andeq	r0, r0, r0
 800a668:	08004c57 	stmdaeq	r0, {r0, r1, r2, r4, r6, sl, fp, lr}
 800a66c:	00000000 	andeq	r0, r0, r0
 800a670:	00010100 	andeq	r0, r1, r0, lsl #2
 800a674:	00001021 	andeq	r1, r0, r1, lsr #32
 800a678:	08004c8b 	stmdaeq	r0, {r0, r1, r3, r7, sl, fp, lr}
	...
 800a688:	00010101 	andeq	r0, r1, r1, lsl #2
 800a68c:	00001040 	andeq	r1, r0, r0, asr #32
 800a690:	080050dd 	stmdaeq	r0, {r0, r2, r3, r4, r6, r7, ip, lr}
 800a694:	00000000 	andeq	r0, r0, r0
 800a698:	080050f1 	stmdaeq	r0, {r0, r4, r5, r6, r7, ip, lr}
 800a69c:	00000000 	andeq	r0, r0, r0
 800a6a0:	00010100 	andeq	r0, r1, r0, lsl #2

0800a6a4 <RDMHandler::PID_DEFINITIONS_SUB_DEVICES>:
 800a6a4:	00000060 	andeq	r0, r0, r0, rrx
 800a6a8:	080042d1 	stmdaeq	r0, {r0, r4, r6, r7, r9, lr}
	...
 800a6b8:	00010100 	andeq	r0, r1, r0, lsl #2
 800a6bc:	000000c0 	andeq	r0, r0, r0, asr #1
 800a6c0:	0800444d 	stmdaeq	r0, {r0, r2, r3, r6, sl, lr}
	...
 800a6d0:	00010100 	andeq	r0, r1, r0, lsl #2
 800a6d4:	00001000 	andeq	r1, r0, r0
 800a6d8:	08004471 	stmdaeq	r0, {r0, r4, r5, r6, sl, lr}
 800a6dc:	00000000 	andeq	r0, r0, r0
 800a6e0:	080046f1 	stmdaeq	r0, {r0, r4, r5, r6, r7, r9, sl, lr}
 800a6e4:	00000000 	andeq	r0, r0, r0
 800a6e8:	00010100 	andeq	r0, r1, r0, lsl #2
 800a6ec:	00000050 	andeq	r0, r0, r0, asr r0
 800a6f0:	08004265 	stmdaeq	r0, {r0, r2, r5, r6, r9, lr}
	...
 800a700:	00010100 	andeq	r0, r1, r0, lsl #2
 800a704:	00000070 	andeq	r0, r0, r0, ror r0
 800a708:	080043b9 	stmdaeq	r0, {r0, r3, r4, r5, r7, r8, r9, lr}
	...
 800a718:	00010100 	andeq	r0, r1, r0, lsl #2
 800a71c:	000000e0 	andeq	r0, r0, r0, ror #1
 800a720:	080044a5 	stmdaeq	r0, {r0, r2, r5, r7, sl, lr}
 800a724:	00000000 	andeq	r0, r0, r0
 800a728:	080047d5 	stmdaeq	r0, {r0, r2, r4, r6, r7, r8, r9, sl, lr}
 800a72c:	00000000 	andeq	r0, r0, r0
 800a730:	00010100 	andeq	r0, r1, r0, lsl #2
 800a734:	000000e1 	andeq	r0, r0, r1, ror #1
 800a738:	08004829 	stmdaeq	r0, {r0, r3, r5, fp, lr}
	...
 800a748:	00010101 	andeq	r0, r1, r1, lsl #2
 800a74c:	000000f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
 800a750:	080044e1 	stmdaeq	r0, {r0, r5, r6, r7, sl, lr}
 800a754:	00000000 	andeq	r0, r0, r0
 800a758:	080048ad 	stmdaeq	r0, {r0, r2, r3, r5, r7, fp, lr}
 800a75c:	00000000 	andeq	r0, r0, r0
 800a760:	00010100 	andeq	r0, r1, r0, lsl #2
 800a764:	64206f4e 	strtvs	r6, [r0], #-3918	; 0xfffff0b2
 800a768:	6e696665 	cdpvs	6, 6, cr6, cr9, cr5, {3}
 800a76c:	6f697469 	svcvs	0x00697469
 800a770:	6e49006e 	cdpvs	0, 4, cr0, cr9, cr14, {3}
 800a774:	736e6574 	cmnvc	lr, #116, 10	; 0x1d000000
 800a778:	00797469 	rsbseq	r7, r9, r9, ror #8
 800a77c:	65746e49 	ldrbvs	r6, [r4, #-3657]!	; 0xfffff1b7
 800a780:	7469736e 	strbtvc	r7, [r9], #-878	; 0xfffffc92
 800a784:	614d2079 	hvcvs	53769	; 0xd209
 800a788:	72657473 	rsbvc	r7, r5, #1929379840	; 0x73000000
 800a78c:	6e615000 	cdpvs	0, 6, cr5, cr1, cr0, {0}
 800a790:	6c695400 	cfstrdvs	mvd5, [r9], #-0
 800a794:	6f430074 	svcvs	0x00430074
 800a798:	20726f6c 	rsbscs	r6, r2, ip, ror #30
 800a79c:	65656857 	strbvs	r6, [r5, #-2135]!	; 0xfffff7a9
 800a7a0:	7553006c 	ldrbvc	r0, [r3, #-108]	; 0xffffff94
 800a7a4:	61727462 	cmnvs	r2, r2, ror #8
 800a7a8:	76697463 	strbtvc	r7, [r9], -r3, ror #8
 800a7ac:	6f432065 	svcvs	0x00432065
 800a7b0:	20726f6c 	rsbscs	r6, r2, ip, ror #30
 800a7b4:	6578694d 	ldrbvs	r6, [r8, #-2381]!	; 0xfffff6b3
 800a7b8:	80e22072 	rschi	r2, r2, r2, ror r0
 800a7bc:	79432093 	stmdbvc	r3, {r0, r1, r4, r7, sp}^
 800a7c0:	422f6e61 	eormi	r6, pc, #1552	; 0x610
 800a7c4:	0065756c 	rsbeq	r7, r5, ip, ror #10
 800a7c8:	74627553 	strbtvc	r7, [r2], #-1363	; 0xfffffaad
 800a7cc:	74636172 	strbtvc	r6, [r3], #-370	; 0xfffffe8e
 800a7d0:	20657669 	rsbcs	r7, r5, r9, ror #12
 800a7d4:	6f6c6f43 	svcvs	0x006c6f43
 800a7d8:	694d2072 	stmdbvs	sp, {r1, r4, r5, r6, sp}^
 800a7dc:	20726578 	rsbscs	r6, r2, r8, ror r5
 800a7e0:	209380e2 	addscs	r8, r3, r2, ror #1
 800a7e4:	6c6c6559 	cfstr64vs	mvdx6, [ip], #-356	; 0xfffffe9c
 800a7e8:	412f776f 			; <UNDEFINED> instruction: 0x412f776f
 800a7ec:	7265626d 	rsbvc	r6, r5, #-805306362	; 0xd0000006
 800a7f0:	62755300 	rsbsvs	r5, r5, #0, 6
 800a7f4:	63617274 	cmnvs	r1, #116, 4	; 0x40000007
 800a7f8:	65766974 	ldrbvs	r6, [r6, #-2420]!	; 0xfffff68c
 800a7fc:	6c6f4320 	stclvs	3, cr4, [pc], #-128	; 800a784 <RDMHandler::PID_DEFINITIONS_SUB_DEVICES+0xe0>
 800a800:	4d20726f 	sfmmi	f7, 4, [r0, #-444]!	; 0xfffffe44
 800a804:	72657869 	rsbvc	r7, r5, #6881280	; 0x690000
 800a808:	4d202d20 	stcmi	13, cr2, [r0, #-128]!	; 0xffffff80
 800a80c:	6e656761 	cdpvs	7, 6, cr6, cr5, cr1, {3}
 800a810:	41006174 	tstmi	r0, r4, ror r1
 800a814:	74696464 	strbtvc	r6, [r9], #-1124	; 0xfffffb9c
 800a818:	20657669 	rsbcs	r7, r5, r9, ror #12
 800a81c:	6f6c6f43 	svcvs	0x006c6f43
 800a820:	694d2072 	stmdbvs	sp, {r1, r4, r5, r6, sp}^
 800a824:	20726578 	rsbscs	r6, r2, r8, ror r5
 800a828:	6552202d 	ldrbvs	r2, [r2, #-45]	; 0xffffffd3
 800a82c:	64410064 	strbvs	r0, [r1], #-100	; 0xffffff9c
 800a830:	69746964 	ldmdbvs	r4!, {r2, r5, r6, r8, fp, sp, lr}^
 800a834:	43206576 			; <UNDEFINED> instruction: 0x43206576
 800a838:	726f6c6f 	rsbvc	r6, pc, #28416	; 0x6f00
 800a83c:	78694d20 	stmdavc	r9!, {r5, r8, sl, fp, lr}^
 800a840:	2d207265 	sfmcs	f7, 4, [r0, #-404]!	; 0xfffffe6c
 800a844:	65724720 	ldrbvs	r4, [r2, #-1824]!	; 0xfffff8e0
 800a848:	41006e65 	tstmi	r0, r5, ror #28
 800a84c:	74696464 	strbtvc	r6, [r9], #-1124	; 0xfffffb9c
 800a850:	20657669 	rsbcs	r7, r5, r9, ror #12
 800a854:	6f6c6f43 	svcvs	0x006c6f43
 800a858:	694d2072 	stmdbvs	sp, {r1, r4, r5, r6, sp}^
 800a85c:	20726578 	rsbscs	r6, r2, r8, ror r5
 800a860:	6c42202d 	mcrrvs	0, 2, r2, r2, cr13
 800a864:	43006575 	movwmi	r6, #1397	; 0x575
 800a868:	726f6c6f 	rsbvc	r6, pc, #28416	; 0x6f00
 800a86c:	6d655420 	cfstrdvs	mvd5, [r5, #-128]!	; 0xffffff80
 800a870:	61726570 	cmnvs	r2, r0, ror r5
 800a874:	65727574 	ldrbvs	r7, [r2, #-1396]!	; 0xfffffa8c
 800a878:	726f4320 	rsbvc	r4, pc, #32, 6	; 0x80000000
 800a87c:	74636572 	strbtvc	r6, [r3], #-1394	; 0xfffffa8e
 800a880:	006e6f69 	rsbeq	r6, lr, r9, ror #30
 800a884:	69646441 	stmdbvs	r4!, {r0, r6, sl, sp, lr}^
 800a888:	65766974 	ldrbvs	r6, [r6, #-2420]!	; 0xfffff68c
 800a88c:	6c6f4320 	stclvs	3, cr4, [pc], #-128	; 800a814 <RDMHandler::PID_DEFINITIONS_SUB_DEVICES+0x170>
 800a890:	4d20726f 	sfmmi	f7, 4, [r0, #-444]!	; 0xfffffe44
 800a894:	72657869 	rsbvc	r7, r5, #6881280	; 0x690000
 800a898:	41202d20 			; <UNDEFINED> instruction: 0x41202d20
 800a89c:	7265626d 	rsbvc	r6, r5, #-805306362	; 0xd0000006
 800a8a0:	64644100 	strbtvs	r4, [r4], #-256	; 0xffffff00
 800a8a4:	76697469 	strbtvc	r7, [r9], -r9, ror #8
 800a8a8:	6f432065 	svcvs	0x00432065
 800a8ac:	20726f6c 	rsbscs	r6, r2, ip, ror #30
 800a8b0:	6578694d 	ldrbvs	r6, [r8, #-2381]!	; 0xfffff6b3
 800a8b4:	202d2072 	eorcs	r2, sp, r2, ror r0
 800a8b8:	74696857 	strbtvc	r6, [r9], #-2135	; 0xfffff7a9
 800a8bc:	64410065 	strbvs	r0, [r1], #-101	; 0xffffff9b
 800a8c0:	69746964 	ldmdbvs	r4!, {r2, r5, r6, r8, fp, sp, lr}^
 800a8c4:	43206576 			; <UNDEFINED> instruction: 0x43206576
 800a8c8:	726f6c6f 	rsbvc	r6, pc, #28416	; 0x6f00
 800a8cc:	78694d20 	stmdavc	r9!, {r5, r8, sl, fp, lr}^
 800a8d0:	2d207265 	sfmcs	f7, 4, [r0, #-404]!	; 0xfffffe6c
 800a8d4:	72615720 	rsbvc	r5, r1, #32, 14	; 0x800000
 800a8d8:	6857206d 	ldmdavs	r7, {r0, r2, r3, r5, r6, sp}^
 800a8dc:	00657469 	rsbeq	r7, r5, r9, ror #8
 800a8e0:	69646441 	stmdbvs	r4!, {r0, r6, sl, sp, lr}^
 800a8e4:	65766974 	ldrbvs	r6, [r6, #-2420]!	; 0xfffff68c
 800a8e8:	6c6f4320 	stclvs	3, cr4, [pc], #-128	; 800a870 <RDMHandler::PID_DEFINITIONS_SUB_DEVICES+0x1cc>
 800a8ec:	4d20726f 	sfmmi	f7, 4, [r0, #-444]!	; 0xfffffe44
 800a8f0:	72657869 	rsbvc	r7, r5, #6881280	; 0x690000
 800a8f4:	43202d20 			; <UNDEFINED> instruction: 0x43202d20
 800a8f8:	206c6f6f 	rsbcs	r6, ip, pc, ror #30
 800a8fc:	74696857 	strbtvc	r6, [r9], #-2135	; 0xfffff7a9
 800a900:	75530065 	ldrbvc	r0, [r3, #-101]	; 0xffffff9b
 800a904:	61727462 	cmnvs	r2, r2, ror #8
 800a908:	76697463 	strbtvc	r7, [r9], -r3, ror #8
 800a90c:	6f432065 	svcvs	0x00432065
 800a910:	20726f6c 	rsbscs	r6, r2, ip, ror #30
 800a914:	6578694d 	ldrbvs	r6, [r8, #-2381]!	; 0xfffff6b3
 800a918:	202d2072 	eorcs	r2, sp, r2, ror r0
 800a91c:	48005655 	stmdami	r0, {r0, r2, r4, r6, r9, sl, ip, lr}
 800a920:	53006575 	movwpl	r6, #1397	; 0x575
 800a924:	72757461 	rsbsvc	r7, r5, #1627389952	; 0x61000000
 800a928:	6f697461 	svcvs	0x00697461
 800a92c:	7453006e 	ldrbvc	r0, [r3], #-110	; 0xffffff92
 800a930:	63697461 	cmnvs	r9, #1627389952	; 0x61000000
 800a934:	626f6720 	rsbvs	r6, pc, #32, 14	; 0x800000
 800a938:	6877206f 	ldmdavs	r7!, {r0, r1, r2, r3, r5, r6, sp}^
 800a93c:	006c6565 	rsbeq	r6, ip, r5, ror #10
 800a940:	61746f52 	cmnvs	r4, r2, asr pc
 800a944:	676e6974 			; <UNDEFINED> instruction: 0x676e6974
 800a948:	626f6720 	rsbvs	r6, pc, #32, 14	; 0x800000
 800a94c:	6877206f 	ldmdavs	r7!, {r0, r1, r2, r3, r5, r6, sp}^
 800a950:	006c6565 	rsbeq	r6, ip, r5, ror #10
 800a954:	73697250 	cmnvc	r9, #80, 4
 800a958:	6877206d 	ldmdavs	r7!, {r0, r2, r3, r5, r6, sp}^
 800a95c:	006c6565 	rsbeq	r6, ip, r5, ror #10
 800a960:	65666645 	strbvs	r6, [r6, #-1605]!	; 0xfffff9bb
 800a964:	20737463 	rsbscs	r7, r3, r3, ror #8
 800a968:	65656877 	strbvs	r6, [r5, #-2167]!	; 0xfffff789
 800a96c:	6542006c 	strbvs	r0, [r2, #-108]	; 0xffffff94
 800a970:	73206d61 			; <UNDEFINED> instruction: 0x73206d61
 800a974:	20657a69 	rsbcs	r7, r5, r9, ror #20
 800a978:	73697269 	cmnvc	r9, #-1879048186	; 0x90000006
 800a97c:	67644500 	strbvs	r4, [r4, -r0, lsl #10]!
 800a980:	654c2f65 	strbvs	r2, [ip, #-3941]	; 0xfffff09b
 800a984:	6620736e 	strtvs	r7, [r0], -lr, ror #6
 800a988:	7375636f 	cmnvc	r5, #-1140850687	; 0xbc000001
 800a98c:	6f724600 	svcvs	0x00724600
 800a990:	442f7473 	strtmi	r7, [pc], #-1139	; 800a998 <RDMHandler::PID_DEFINITIONS_SUB_DEVICES+0x2f4>
 800a994:	75666669 	strbvc	r6, [r6, #-1641]!	; 0xfffff997
 800a998:	6e6f6973 			; <UNDEFINED> instruction: 0x6e6f6973
 800a99c:	72745300 	rsbsvc	r5, r4, #0, 6
 800a9a0:	2f65626f 	svccs	0x0065626f
 800a9a4:	74756853 	ldrbtvc	r6, [r5], #-2131	; 0xfffff7ad
 800a9a8:	00726574 	rsbseq	r6, r2, r4, ror r5
 800a9ac:	6d6f6f5a 	stclvs	15, cr6, [pc, #-360]!	; 800a84c <RDMHandler::PID_DEFINITIONS_SUB_DEVICES+0x1a8>
 800a9b0:	6e656c20 	cdpvs	12, 6, cr6, cr5, cr0, {1}
 800a9b4:	72460073 	subvc	r0, r6, #115	; 0x73
 800a9b8:	6e696d61 	cdpvs	13, 6, cr6, cr9, cr1, {3}
 800a9bc:	68732067 	ldmdavs	r3!, {r0, r1, r2, r5, r6, sp}^
 800a9c0:	65747475 	ldrbvs	r7, [r4, #-1141]!	; 0xfffffb8b
 800a9c4:	72460072 	subvc	r0, r6, #114	; 0x72
 800a9c8:	6e696d61 	cdpvs	13, 6, cr6, cr9, cr1, {3}
 800a9cc:	68732067 	ldmdavs	r3!, {r0, r1, r2, r5, r6, sp}^
 800a9d0:	65747475 	ldrbvs	r7, [r4, #-1141]!	; 0xfffffb8b
 800a9d4:	6f722072 	svcvs	0x00722072
 800a9d8:	69746174 	ldmdbvs	r4!, {r2, r4, r5, r6, r8, sp, lr}^
 800a9dc:	44006e6f 	strmi	r6, [r0], #-3695	; 0xfffff191
 800a9e0:	6573756f 	ldrbvs	r7, [r3, #-1391]!	; 0xfffffa91
 800a9e4:	61420072 	hvcvs	8194	; 0x2002
 800a9e8:	44206e72 	strtmi	r6, [r0], #-3698	; 0xfffff18e
 800a9ec:	00726f6f 	rsbseq	r6, r2, pc, ror #30
 800a9f0:	706d614c 	rsbvc	r6, sp, ip, asr #2
 800a9f4:	6e6f6320 	cdpvs	3, 6, cr6, cr15, cr0, {1}
 800a9f8:	6c6f7274 	sfmvs	f7, 2, [pc], #-464	; 800a830 <RDMHandler::PID_DEFINITIONS_SUB_DEVICES+0x18c>
 800a9fc:	6e756620 	cdpvs	6, 7, cr6, cr5, cr0, {1}
 800aa00:	6f697463 	svcvs	0x00697463
 800aa04:	4600736e 	strmi	r7, [r0], -lr, ror #6
 800aa08:	75747869 	ldrbvc	r7, [r4, #-2153]!	; 0xfffff797
 800aa0c:	63206572 			; <UNDEFINED> instruction: 0x63206572
 800aa10:	72746e6f 	rsbsvc	r6, r4, #1776	; 0x6f0
 800aa14:	63206c6f 			; <UNDEFINED> instruction: 0x63206c6f
 800aa18:	6e6e6168 	powvsez	f6, f6, #0.0
 800aa1c:	4d006c65 	stcmi	12, cr6, [r0, #-404]	; 0xfffffe6c
 800aa20:	6f726361 	svcvs	0x00726361
 800aa24:	6e6f6320 	cdpvs	3, 6, cr6, cr15, cr0, {1}
 800aa28:	6c6f7274 	sfmvs	f7, 2, [pc], #-464	; 800a860 <RDMHandler::PID_DEFINITIONS_SUB_DEVICES+0x1bc>
 800aa2c:	6c655200 	sfmvs	f5, 2, [r5], #-0
 800aa30:	6f207961 	svcvs	0x00207961
 800aa34:	6f702072 	svcvs	0x00702072
 800aa38:	20726577 	rsbscs	r6, r2, r7, ror r5
 800aa3c:	746e6f63 	strbtvc	r6, [lr], #-3939	; 0xfffff09d
 800aa40:	006c6f72 	rsbeq	r6, ip, r2, ror pc
 800aa44:	206e6146 	rsbcs	r6, lr, r6, asr #2
 800aa48:	746e6f63 	strbtvc	r6, [lr], #-3939	; 0xfffff09d
 800aa4c:	006c6f72 	rsbeq	r6, ip, r2, ror pc
 800aa50:	74616548 	strbtvc	r6, [r1], #-1352	; 0xfffffab8
 800aa54:	63207265 			; <UNDEFINED> instruction: 0x63207265
 800aa58:	72746e6f 	rsbsvc	r6, r4, #1776	; 0x6f0
 800aa5c:	46006c6f 	strmi	r6, [r0], -pc, ror #24
 800aa60:	746e756f 	strbtvc	r7, [lr], #-1391	; 0xfffffa91
 800aa64:	206e6961 	rsbcs	r6, lr, r1, ror #18
 800aa68:	65746177 	ldrbvs	r6, [r4, #-375]!	; 0xfffffe89
 800aa6c:	75702072 	ldrbvc	r2, [r0, #-114]!	; 0xffffff8e
 800aa70:	6320706d 			; <UNDEFINED> instruction: 0x6320706d
 800aa74:	72746e6f 	rsbsvc	r6, r4, #1776	; 0x6f0
 800aa78:	00206c6f 	eoreq	r6, r0, pc, ror #24
 800aa7c:	746f6c53 	strbtvc	r6, [pc], #-3155	; 800aa84 <RDMHandler::PID_DEFINITIONS_SUB_DEVICES+0x3e0>
 800aa80:	72696420 	rsbvc	r6, r9, #32, 8	; 0x20000000
 800aa84:	6c746365 	ldclvs	3, cr6, [r4], #-404	; 0xfffffe6c
 800aa88:	6f632079 	svcvs	0x00632079
 800aa8c:	6f72746e 	svcvs	0x0072746e
 800aa90:	7020736c 	eorvc	r7, r0, ip, ror #6
 800aa94:	6d617261 	sfmvs	f7, 2, [r1, #-388]!	; 0xfffffe7c
 800aa98:	72657465 	rsbvc	r7, r5, #1694498816	; 0x65000000
 800aa9c:	65722820 	ldrbvs	r2, [r2, #-2080]!	; 0xfffff7e0
 800aaa0:	73657270 	cmnvc	r5, #112, 4
 800aaa4:	73746e65 	cmnvc	r4, #1616	; 0x650
 800aaa8:	616f4320 	cmnvs	pc, r0, lsr #6
 800aaac:	20657372 	rsbcs	r7, r5, r2, ror r3
 800aab0:	20726f66 	rsbscs	r6, r2, r6, ror #30
 800aab4:	622d3631 	eorvs	r3, sp, #51380224	; 0x3100000
 800aab8:	70207469 	eorvc	r7, r0, r9, ror #8
 800aabc:	6d617261 	sfmvs	f7, 2, [r1, #-388]!	; 0xfffffe7c
 800aac0:	72657465 	rsbvc	r7, r5, #1694498816	; 0x65000000
 800aac4:	46002973 			; <UNDEFINED> instruction: 0x46002973
 800aac8:	2c656e69 	stclcs	14, cr6, [r5], #-420	; 0xfffffe5c
 800aacc:	726f6620 	rsbvc	r6, pc, #32, 12	; 0x2000000
 800aad0:	2d363120 	ldfcss	f3, [r6, #-128]!	; 0xffffff80
 800aad4:	20746962 	rsbscs	r6, r4, r2, ror #18
 800aad8:	61726170 	cmnvs	r2, r0, ror r1
 800aadc:	6574656d 	ldrbvs	r6, [r4, #-1389]!	; 0xfffffa93
 800aae0:	53007372 	movwpl	r7, #882	; 0x372
 800aae4:	20746f6c 	rsbscs	r6, r4, ip, ror #30
 800aae8:	73746573 	cmnvc	r4, #482344960	; 0x1cc00000
 800aaec:	6d697420 	cfstrdvs	mvd7, [r9, #-128]!	; 0xffffff80
 800aaf0:	20676e69 	rsbcs	r6, r7, r9, ror #28
 800aaf4:	756c6176 	strbvc	r6, [ip, #-374]!	; 0xfffffe8a
 800aaf8:	6f662065 	svcvs	0x00662065
 800aafc:	73612072 	cmnvc	r1, #114	; 0x72
 800ab00:	69636f73 	stmdbvs	r3!, {r0, r1, r4, r5, r6, r8, r9, sl, fp, sp, lr}^
 800ab04:	64657461 	strbtvs	r7, [r5], #-1121	; 0xfffffb9f
 800ab08:	72617020 	rsbvc	r7, r1, #32
 800ab0c:	74656d61 	strbtvc	r6, [r5], #-3425	; 0xfffff29f
 800ab10:	53007265 	movwpl	r7, #613	; 0x265
 800ab14:	20746f6c 	rsbscs	r6, r4, ip, ror #30
 800ab18:	73746573 	cmnvc	r4, #482344960	; 0x1cc00000
 800ab1c:	65707320 	ldrbvs	r7, [r0, #-800]!	; 0xfffffce0
 800ab20:	762f6465 	strtvc	r6, [pc], -r5, ror #8
 800ab24:	636f6c65 	cmnvs	pc, #25856	; 0x6500
 800ab28:	20797469 	rsbscs	r7, r9, r9, ror #8
 800ab2c:	20726f66 	rsbscs	r6, r2, r6, ror #30
 800ab30:	6f737361 	svcvs	0x00737361
 800ab34:	74616963 	strbtvc	r6, [r1], #-2403	; 0xfffff69d
 800ab38:	70206465 	eorvc	r6, r0, r5, ror #8
 800ab3c:	6d617261 	sfmvs	f7, 2, [r1, #-388]!	; 0xfffffe7c
 800ab40:	72657465 	rsbvc	r7, r5, #1694498816	; 0x65000000
 800ab44:	6f6c5300 	svcvs	0x006c5300
 800ab48:	72702074 	rsbsvc	r2, r0, #116	; 0x74
 800ab4c:	6469766f 	strbtvs	r7, [r9], #-1647	; 0xfffff991
 800ab50:	63207365 			; <UNDEFINED> instruction: 0x63207365
 800ab54:	72746e6f 	rsbsvc	r6, r4, #1776	; 0x6f0
 800ab58:	6d2f6c6f 	stcvs	12, cr6, [pc, #-444]!	; 800a9a4 <RDMHandler::PID_DEFINITIONS_SUB_DEVICES+0x300>
 800ab5c:	2065646f 	rsbcs	r6, r5, pc, ror #8
 800ab60:	6f666e69 	svcvs	0x00666e69
 800ab64:	726f6620 	rsbvc	r6, pc, #32, 12	; 0x2000000
 800ab68:	72617020 	rsbvc	r7, r1, #32
 800ab6c:	74656d61 	strbtvc	r6, [r5], #-3425	; 0xfffff29f
 800ab70:	53007265 	movwpl	r7, #613	; 0x265
 800ab74:	20746f6c 	rsbscs	r6, r4, ip, ror #30
 800ab78:	73746573 	cmnvc	r4, #482344960	; 0x1cc00000
 800ab7c:	646e6920 	strbtvs	r6, [lr], #-2336	; 0xfffff6e0
 800ab80:	70207865 	eorvc	r7, r0, r5, ror #16
 800ab84:	7469736f 	strbtvc	r7, [r9], #-879	; 0xfffffc91
 800ab88:	206e6f69 	rsbcs	r6, lr, r9, ror #30
 800ab8c:	20726f66 	rsbscs	r6, r2, r6, ror #30
 800ab90:	6f737361 	svcvs	0x00737361
 800ab94:	74616963 	strbtvc	r6, [r1], #-2403	; 0xfffff69d
 800ab98:	70206465 	eorvc	r6, r0, r5, ror #8
 800ab9c:	6d617261 	sfmvs	f7, 2, [r1, #-388]!	; 0xfffffe7c
 800aba0:	72657465 	rsbvc	r7, r5, #1694498816	; 0x65000000
 800aba4:	6f6c5300 	svcvs	0x006c5300
 800aba8:	65732074 	ldrbvs	r2, [r3, #-116]!	; 0xffffff8c
 800abac:	72207374 	eorvc	r7, r0, #116, 6	; 0xd0000001
 800abb0:	7461746f 	strbtvc	r7, [r1], #-1135	; 0xfffffb91
 800abb4:	206e6f69 	rsbcs	r6, lr, r9, ror #30
 800abb8:	65657073 	strbvs	r7, [r5, #-115]!	; 0xffffff8d
 800abbc:	6f662064 	svcvs	0x00662064
 800abc0:	73612072 	cmnvc	r1, #114	; 0x72
 800abc4:	69636f73 	stmdbvs	r3!, {r0, r1, r4, r5, r6, r8, r9, sl, fp, sp, lr}^
 800abc8:	64657461 	strbtvs	r7, [r5], #-1121	; 0xfffffb9f
 800abcc:	72617020 	rsbvc	r7, r1, #32
 800abd0:	74656d61 	strbtvc	r6, [r5], #-3425	; 0xfffff29f
 800abd4:	43007265 	movwmi	r7, #613	; 0x265
 800abd8:	69626d6f 	stmdbvs	r2!, {r0, r1, r2, r3, r5, r6, r8, sl, fp, sp, lr}^
 800abdc:	2064656e 	rsbcs	r6, r4, lr, ror #10
 800abe0:	65646e69 	strbvs	r6, [r4, #-3689]!	; 0xfffff197
 800abe4:	6f722f78 	svcvs	0x00722f78
 800abe8:	69746174 	ldmdbvs	r4!, {r2, r4, r5, r6, r8, sp, lr}^
 800abec:	63206e6f 			; <UNDEFINED> instruction: 0x63206e6f
 800abf0:	72746e6f 	rsbsvc	r6, r4, #1776	; 0x6f0
 800abf4:	00006c6f 	andeq	r6, r0, pc, ror #24

0800abf8 <s_tTableC2>:
 800abf8:	00000001 	andeq	r0, r0, r1
 800abfc:	0800a772 	stmdaeq	r0, {r1, r4, r5, r6, r8, r9, sl, sp, pc}
 800ac00:	00000002 	andeq	r0, r0, r2
 800ac04:	0800a77c 	stmdaeq	r0, {r2, r3, r4, r5, r6, r8, r9, sl, sp, pc}
 800ac08:	00000101 	andeq	r0, r0, r1, lsl #2
 800ac0c:	0800a78d 	stmdaeq	r0, {r0, r2, r3, r7, r8, r9, sl, sp, pc}
 800ac10:	00000102 	andeq	r0, r0, r2, lsl #2
 800ac14:	0800a791 	stmdaeq	r0, {r0, r4, r7, r8, r9, sl, sp, pc}
 800ac18:	00000201 	andeq	r0, r0, r1, lsl #4
 800ac1c:	0800a796 	stmdaeq	r0, {r1, r2, r4, r7, r8, r9, sl, sp, pc}
 800ac20:	00000202 	andeq	r0, r0, r2, lsl #4
 800ac24:	0800a7a2 	stmdaeq	r0, {r1, r5, r7, r8, r9, sl, sp, pc}
 800ac28:	00000203 	andeq	r0, r0, r3, lsl #4
 800ac2c:	0800a7c8 	stmdaeq	r0, {r3, r6, r7, r8, r9, sl, sp, pc}
 800ac30:	00000204 	andeq	r0, r0, r4, lsl #4
 800ac34:	0800a7f1 	stmdaeq	r0, {r0, r4, r5, r6, r7, r8, r9, sl, sp, pc}
 800ac38:	00000205 	andeq	r0, r0, r5, lsl #4
 800ac3c:	0800a813 	stmdaeq	r0, {r0, r1, r4, fp, sp, pc}
 800ac40:	00000206 	andeq	r0, r0, r6, lsl #4
 800ac44:	0800a82e 	stmdaeq	r0, {r1, r2, r3, r5, fp, sp, pc}
 800ac48:	00000207 	andeq	r0, r0, r7, lsl #4
 800ac4c:	0800a84b 	stmdaeq	r0, {r0, r1, r3, r6, fp, sp, pc}
 800ac50:	00000208 	andeq	r0, r0, r8, lsl #4
 800ac54:	0800a867 	stmdaeq	r0, {r0, r1, r2, r5, r6, fp, sp, pc}
 800ac58:	00000211 	andeq	r0, r0, r1, lsl r2
 800ac5c:	0800a884 	stmdaeq	r0, {r2, r7, fp, sp, pc}
 800ac60:	00000212 	andeq	r0, r0, r2, lsl r2
 800ac64:	0800a8a1 	stmdaeq	r0, {r0, r5, r7, fp, sp, pc}
 800ac68:	00000213 	andeq	r0, r0, r3, lsl r2
 800ac6c:	0800a8be 	stmdaeq	r0, {r1, r2, r3, r4, r5, r7, fp, sp, pc}
 800ac70:	00000214 	andeq	r0, r0, r4, lsl r2
 800ac74:	0800a8e0 	stmdaeq	r0, {r5, r6, r7, fp, sp, pc}
 800ac78:	00000215 	andeq	r0, r0, r5, lsl r2
 800ac7c:	0800a902 	stmdaeq	r0, {r1, r8, fp, sp, pc}
 800ac80:	00000216 	andeq	r0, r0, r6, lsl r2
 800ac84:	0800a91f 	stmdaeq	r0, {r0, r1, r2, r3, r4, r8, fp, sp, pc}
 800ac88:	00000217 	andeq	r0, r0, r7, lsl r2
 800ac8c:	0800a923 	stmdaeq	r0, {r0, r1, r5, r8, fp, sp, pc}
 800ac90:	00000301 	andeq	r0, r0, r1, lsl #6
 800ac94:	0800a92e 	stmdaeq	r0, {r1, r2, r3, r5, r8, fp, sp, pc}
 800ac98:	00000302 	andeq	r0, r0, r2, lsl #6
 800ac9c:	0800a940 	stmdaeq	r0, {r6, r8, fp, sp, pc}
 800aca0:	00000303 	andeq	r0, r0, r3, lsl #6
 800aca4:	0800a954 	stmdaeq	r0, {r2, r4, r6, r8, fp, sp, pc}
 800aca8:	00000304 	andeq	r0, r0, r4, lsl #6
 800acac:	0800a960 	stmdaeq	r0, {r5, r6, r8, fp, sp, pc}
 800acb0:	00000401 	andeq	r0, r0, r1, lsl #8
 800acb4:	0800a96e 	stmdaeq	r0, {r1, r2, r3, r5, r6, r8, fp, sp, pc}
 800acb8:	00000402 	andeq	r0, r0, r2, lsl #8
 800acbc:	0800a97d 	stmdaeq	r0, {r0, r2, r3, r4, r5, r6, r8, fp, sp, pc}
 800acc0:	00000403 	andeq	r0, r0, r3, lsl #8
 800acc4:	0800a98d 	stmdaeq	r0, {r0, r2, r3, r7, r8, fp, sp, pc}
 800acc8:	00000404 	andeq	r0, r0, r4, lsl #8
 800accc:	0800a99d 	stmdaeq	r0, {r0, r2, r3, r4, r7, r8, fp, sp, pc}
 800acd0:	00000405 	andeq	r0, r0, r5, lsl #8
 800acd4:	0800a9ac 	stmdaeq	r0, {r2, r3, r5, r7, r8, fp, sp, pc}
 800acd8:	00000406 	andeq	r0, r0, r6, lsl #8
 800acdc:	0800a9b6 	stmdaeq	r0, {r1, r2, r4, r5, r7, r8, fp, sp, pc}
 800ace0:	00000407 	andeq	r0, r0, r7, lsl #8
 800ace4:	0800a9c6 	stmdaeq	r0, {r1, r2, r6, r7, r8, fp, sp, pc}
 800ace8:	00000408 	andeq	r0, r0, r8, lsl #8
 800acec:	0800a9df 	stmdaeq	r0, {r0, r1, r2, r3, r4, r6, r7, r8, fp, sp, pc}
 800acf0:	00000409 	andeq	r0, r0, r9, lsl #8
 800acf4:	0800a9e6 	stmdaeq	r0, {r1, r2, r5, r6, r7, r8, fp, sp, pc}
 800acf8:	00000501 	andeq	r0, r0, r1, lsl #10
 800acfc:	0800a9f0 	stmdaeq	r0, {r4, r5, r6, r7, r8, fp, sp, pc}
 800ad00:	00000502 	andeq	r0, r0, r2, lsl #10
 800ad04:	0800aa07 	stmdaeq	r0, {r0, r1, r2, r9, fp, sp, pc}
 800ad08:	00000504 	andeq	r0, r0, r4, lsl #10
 800ad0c:	0800aa1f 	stmdaeq	r0, {r0, r1, r2, r3, r4, r9, fp, sp, pc}
 800ad10:	00000505 	andeq	r0, r0, r5, lsl #10
 800ad14:	0800aa2d 	stmdaeq	r0, {r0, r2, r3, r5, r9, fp, sp, pc}
 800ad18:	00000506 	andeq	r0, r0, r6, lsl #10
 800ad1c:	0800aa44 	stmdaeq	r0, {r2, r6, r9, fp, sp, pc}
 800ad20:	00000507 	andeq	r0, r0, r7, lsl #10
 800ad24:	0800aa50 	stmdaeq	r0, {r4, r6, r9, fp, sp, pc}
 800ad28:	00000508 	andeq	r0, r0, r8, lsl #10
 800ad2c:	0800aa5f 	stmdaeq	r0, {r0, r1, r2, r3, r4, r6, r9, fp, sp, pc}
 800ad30:	0000ffff 	strdeq	pc, [r0], -pc	; <UNPREDICTABLE>
 800ad34:	0800a764 	stmdaeq	r0, {r2, r5, r6, r8, r9, sl, sp, pc}
 800ad38:	70747468 	rsbsvc	r7, r4, r8, ror #8
 800ad3c:	2f2f3a73 	svccs	0x002f3a73
 800ad40:	32336467 	eorscc	r6, r3, #1728053248	; 0x67000000
 800ad44:	786d642d 	stmdavc	sp!, {r0, r2, r3, r5, sl, sp, lr}^
 800ad48:	67726f2e 	ldrbvs	r6, [r2, -lr, lsr #30]!
 800ad4c:	4d445200 	sfmmi	f5, 2, [r4, #-0]
 800ad50:	76654420 	strbtvc	r4, [r5], -r0, lsr #8
 800ad54:	20656369 	rsbcs	r6, r5, r9, ror #6
 800ad58:	666e6f63 	strbtvs	r6, [lr], -r3, ror #30
 800ad5c:	72756769 	rsbsvc	r6, r5, #27525120	; 0x1a40000
 800ad60:	6f697461 	svcvs	0x00697461
 800ad64:	20000a6e 	andcs	r0, r0, lr, ror #20
 800ad68:	756e614d 	strbvc	r6, [lr, #-333]!	; 0xfffffeb3
 800ad6c:	74636166 	strbtvc	r6, [r3], #-358	; 0xfffffe9a
 800ad70:	72657275 	rsbvc	r7, r5, #1342177287	; 0x50000007
 800ad74:	6d614e20 	stclvs	14, cr4, [r1, #-128]!	; 0xffffff80
 800ad78:	203a2065 	eorscs	r2, sl, r5, rrx
 800ad7c:	732a2e25 			; <UNDEFINED> instruction: 0x732a2e25
 800ad80:	4d20000a 	stcmi	0, cr0, [r0, #-40]!	; 0xffffffd8
 800ad84:	66756e61 	ldrbtvs	r6, [r5], -r1, ror #28
 800ad88:	75746361 	ldrbvc	r6, [r4, #-865]!	; 0xfffffc9f
 800ad8c:	20726572 	rsbscs	r6, r2, r2, ror r5
 800ad90:	20204449 	eorcs	r4, r0, r9, asr #8
 800ad94:	25203a20 	strcs	r3, [r0, #-2592]!	; 0xfffff5e0
 800ad98:	2558322e 	ldrbcs	r3, [r8, #-558]	; 0xfffffdd2
 800ad9c:	0a58322e 	beq	961765c <__exidx_end+0x160b6f0>
 800ada0:	65532000 	ldrbvs	r2, [r3, #-0]
 800ada4:	6c616972 			; <UNDEFINED> instruction: 0x6c616972
 800ada8:	6d754e20 	ldclvs	14, cr4, [r5, #-128]!	; 0xffffff80
 800adac:	20726562 	rsbscs	r6, r2, r2, ror #10
 800adb0:	20202020 	eorcs	r2, r0, r0, lsr #32
 800adb4:	2e25203a 	mcrcs	0, 1, r2, cr5, cr10, {1}
 800adb8:	2e255832 	mcrcs	8, 1, r5, cr5, cr2, {1}
 800adbc:	2e255832 	mcrcs	8, 1, r5, cr5, cr2, {1}
 800adc0:	2e255832 	mcrcs	8, 1, r5, cr5, cr2, {1}
 800adc4:	000a5832 	andeq	r5, sl, r2, lsr r8
 800adc8:	6f6f5220 	svcvs	0x006f5220
 800adcc:	616c2074 	smcvs	49668	; 0xc204
 800add0:	206c6562 	rsbcs	r6, ip, r2, ror #10
 800add4:	20202020 	eorcs	r2, r0, r0, lsr #32
 800add8:	3a202020 	bcc	8812e60 <__exidx_end+0x806ef4>
 800addc:	2a2e2520 	bcs	8b94264 <__exidx_end+0xb882f8>
 800ade0:	20000a73 	andcs	r0, r0, r3, ror sl
 800ade4:	646f7250 	strbtvs	r7, [pc], #-592	; 800adec <s_tTableC2+0x1f4>
 800ade8:	20746375 	rsbscs	r6, r4, r5, ror r3
 800adec:	65746143 	ldrbvs	r6, [r4, #-323]!	; 0xfffffebd
 800adf0:	79726f67 	ldmdbvc	r2!, {r0, r1, r2, r5, r6, r8, r9, sl, fp, sp, lr}^
 800adf4:	203a2020 	eorscs	r2, sl, r0, lsr #32
 800adf8:	58322e25 	ldmdapl	r2!, {r0, r2, r5, r9, sl, fp, sp}
 800adfc:	58322e25 	ldmdapl	r2!, {r0, r2, r5, r9, sl, fp, sp}
 800ae00:	5020000a 	eorpl	r0, r0, sl
 800ae04:	75646f72 	strbvc	r6, [r4, #-3954]!	; 0xfffff08e
 800ae08:	44207463 	strtmi	r7, [r0], #-1123	; 0xfffffb9d
 800ae0c:	69617465 	stmdbvs	r1!, {r0, r2, r5, r6, sl, ip, sp, lr}^
 800ae10:	2020206c 	eorcs	r2, r0, ip, rrx
 800ae14:	25203a20 	strcs	r3, [r0, #-2592]!	; 0xfffff5e0
 800ae18:	2558322e 	ldrbcs	r3, [r8, #-558]	; 0xfffffdd2
 800ae1c:	0a58322e 	beq	96176dc <__exidx_end+0x160b770>
	...

0800ae21 <DEVICE_LABEL>:
 800ae21:	32334447 	eorscc	r4, r3, #1191182336	; 0x47000000
 800ae25:	33303346 	teqcc	r0, #402653185	; 0x18000001
 800ae29:	52204352 	eorpl	r4, r0, #1207959553	; 0x48000001
 800ae2d:	44204d44 	strtmi	r4, [r0], #-3396	; 0xfffff2bc
 800ae31:	63697665 	cmnvs	r9, #105906176	; 0x6500000
 800ae35:	 	subseq	r0, r0, r5, rrx

0800ae37 <RDMConst::MANUFACTURER_ID>:
 800ae37:	 	strbtvc	r0, [r8], #-80	; 0xffffffb0

0800ae39 <RDMConst::MANUFACTURER_NAME>:
 800ae39:	70747468 	rsbsvc	r7, r4, r8, ror #8
 800ae3d:	772f2f3a 			; <UNDEFINED> instruction: 0x772f2f3a
 800ae41:	6f2e7777 	svcvs	0x002e7777
 800ae45:	676e6172 			; <UNDEFINED> instruction: 0x676e6172
 800ae49:	2d697065 	stclcs	0, cr7, [r9, #-404]!	; 0xfffffe6c
 800ae4d:	2e786d64 	cdpcs	13, 7, cr6, cr8, cr4, {3}
 800ae51:	0067726f 	rsbeq	r7, r7, pc, ror #4
 800ae55:	65786950 	ldrbvs	r6, [r8, #-2384]!	; 0xfffff6b0
 800ae59:	4d44206c 	stclmi	0, cr2, [r4, #-432]	; 0xfffffe50
 800ae5d:	6f632058 	svcvs	0x00632058
 800ae61:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
 800ae65:	74617275 	strbtvc	r7, [r1], #-629	; 0xfffffd8b
 800ae69:	0a6e6f69 	beq	9ba6c15 <__exidx_end+0x1b9aca9>
 800ae6d:	754f2000 	strbvc	r2, [pc, #-0]	; 800ae75 <RDMConst::MANUFACTURER_NAME+0x3c>
 800ae71:	74757074 	ldrbtvc	r7, [r5], #-116	; 0xffffff8c
 800ae75:	203a2073 	eorscs	r2, sl, r3, ror r0
 800ae79:	000a6425 	andeq	r6, sl, r5, lsr #8
 800ae7d:	6f724720 	svcvs	0x00724720
 800ae81:	6e697075 	mcrvs	0, 3, r7, cr9, cr5, {3}
 800ae85:	6f632067 	svcvs	0x00632067
 800ae89:	20746e75 	rsbscs	r6, r4, r5, ror lr
 800ae8d:	6425203a 	strtvs	r2, [r5], #-58	; 0xffffffc6
 800ae91:	72475b20 	subvc	r5, r7, #32, 22	; 0x8000
 800ae95:	7370756f 	cmnvc	r0, #465567744	; 0x1bc00000
 800ae99:	25203a20 	strcs	r3, [r0, #-2592]!	; 0xfffff5e0
 800ae9d:	000a5d64 	andeq	r5, sl, r4, ror #26
 800aea1:	 	andeq	r0, r0, r0

0800aea4 <vtable for WS28xxDmx>:
	...
 800aeac:	08005401 	stmdaeq	r0, {r0, sl, ip, lr}
 800aeb0:	08005421 	stmdaeq	r0, {r0, r5, sl, ip, lr}
 800aeb4:	08005575 	stmdaeq	r0, {r0, r2, r4, r5, r6, r8, sl, ip, lr}
 800aeb8:	0800558d 	stmdaeq	r0, {r0, r2, r3, r7, r8, sl, ip, lr}
 800aebc:	08005459 	stmdaeq	r0, {r0, r3, r4, r6, sl, ip, lr}
 800aec0:	08005433 	stmdaeq	r0, {r0, r1, r4, r5, sl, ip, lr}
 800aec4:	08005559 	stmdaeq	r0, {r0, r3, r4, r6, r8, sl, ip, lr}
 800aec8:	0800556f 	stmdaeq	r0, {r0, r1, r2, r3, r5, r6, r8, sl, ip, lr}
 800aecc:	080055a5 	stmdaeq	r0, {r0, r2, r5, r7, r8, sl, ip, lr}
 800aed0:	080053f5 	stmdaeq	r0, {r0, r2, r4, r5, r6, r7, r8, r9, ip, lr}
 800aed4:	080053fb 	stmdaeq	r0, {r0, r1, r3, r4, r5, r6, r7, r8, r9, ip, lr}
 800aed8:	080055dd 	stmdaeq	r0, {r0, r2, r3, r4, r6, r7, r8, sl, ip, lr}

0800aedc <vtable for PixelDmxParamsRdm>:
	...
 800aee4:	0800577d 	stmdaeq	r0, {r0, r2, r3, r4, r5, r6, r8, r9, sl, ip, lr}
 800aee8:	0800577f 	stmdaeq	r0, {r0, r1, r2, r3, r4, r5, r6, r8, r9, sl, ip, lr}
 800aeec:	08005767 	stmdaeq	r0, {r0, r1, r2, r5, r6, r8, r9, sl, ip, lr}
 800aef0:	08005767 	stmdaeq	r0, {r0, r1, r2, r5, r6, r8, r9, sl, ip, lr}
 800aef4:	080057a1 	stmdaeq	r0, {r0, r5, r7, r8, r9, sl, ip, lr}
 800aef8:	08005755 	stmdaeq	r0, {r0, r2, r4, r6, r8, r9, sl, ip, lr}
 800aefc:	08005757 	stmdaeq	r0, {r0, r1, r2, r4, r6, r8, r9, sl, ip, lr}
 800af00:	08005759 	stmdaeq	r0, {r0, r3, r4, r6, r8, r9, sl, ip, lr}
 800af04:	0800575b 	stmdaeq	r0, {r0, r1, r3, r4, r6, r8, r9, sl, ip, lr}
 800af08:	0800575f 	stmdaeq	r0, {r0, r1, r2, r3, r4, r6, r8, r9, sl, ip, lr}
 800af0c:	08005763 	stmdaeq	r0, {r0, r1, r5, r6, r8, r9, sl, ip, lr}
 800af10:	08005769 	stmdaeq	r0, {r0, r3, r5, r6, r8, r9, sl, ip, lr}
 800af14:	00736559 	rsbseq	r6, r3, r9, asr r5
 800af18:	50006f4e 	andpl	r6, r0, lr, asr #30
 800af1c:	6c657869 	stclvs	8, cr7, [r5], #-420	; 0xfffffe5c
 800af20:	6e6f6320 	cdpvs	3, 6, cr6, cr15, cr0, {1}
 800af24:	75676966 	strbvc	r6, [r7, #-2406]!	; 0xfffff69a
 800af28:	69746172 	ldmdbvs	r4!, {r1, r4, r5, r6, r8, sp, lr}^
 800af2c:	000a6e6f 	andeq	r6, sl, pc, ror #28
 800af30:	70795420 	rsbsvc	r5, r9, r0, lsr #8
 800af34:	20202065 	eorcs	r2, r0, r5, rrx
 800af38:	25203a20 	strcs	r3, [r0, #-2592]!	; 0xfffff5e0
 800af3c:	255b2073 	ldrbcs	r2, [fp, #-115]	; 0xffffff8d
 800af40:	000a5d64 	andeq	r5, sl, r4, ror #26
 800af44:	756f4320 	strbvc	r4, [pc, #-800]!	; 800ac2c <s_tTableC2+0x34>
 800af48:	2020746e 	eorcs	r7, r0, lr, ror #8
 800af4c:	25203a20 	strcs	r3, [r0, #-2592]!	; 0xfffff5e0
 800af50:	20000a64 	andcs	r0, r0, r4, ror #20
 800af54:	7070614d 	rsbsvc	r6, r0, sp, asr #2
 800af58:	20676e69 	rsbcs	r6, r7, r9, ror #28
 800af5c:	7325203a 			; <UNDEFINED> instruction: 0x7325203a
 800af60:	64255b20 	strtvs	r5, [r5], #-2848	; 0xfffff4e0
 800af64:	20000a5d 	andcs	r0, r0, sp, asr sl
 800af68:	20483054 	subcs	r3, r8, r4, asr r0
 800af6c:	20202020 	eorcs	r2, r0, r0, lsr #32
 800af70:	2e25203a 	mcrcs	0, 1, r2, cr5, cr10, {1}
 800af74:	5b206632 	blpl	8824844 <__exidx_end+0x8188d8>
 800af78:	58257830 	stmdapl	r5!, {r4, r5, fp, ip, sp, lr}
 800af7c:	20000a5d 	andcs	r0, r0, sp, asr sl
 800af80:	20483154 	subcs	r3, r8, r4, asr r1
 800af84:	20202020 	eorcs	r2, r0, r0, lsr #32
 800af88:	2e25203a 	mcrcs	0, 1, r2, cr5, cr10, {1}
 800af8c:	5b206632 	blpl	882485c <__exidx_end+0x8188f0>
 800af90:	58257830 	stmdapl	r5!, {r4, r5, fp, ip, sp, lr}
 800af94:	20000a5d 	andcs	r0, r0, sp, asr sl
 800af98:	626f6c47 	rsbvs	r6, pc, #18176	; 0x4700
 800af9c:	72426c61 	subvc	r6, r2, #24832	; 0x6100
 800afa0:	74686769 	strbtvc	r6, [r8], #-1897	; 0xfffff897
 800afa4:	7373656e 	cmnvc	r3, #461373440	; 0x1b800000
 800afa8:	7525203a 	strvc	r2, [r5, #-58]!	; 0xffffffc6
 800afac:	4720000a 	strmi	r0, [r0, -sl]!
 800afb0:	616d6d61 	cmnvs	sp, r1, ror #26
 800afb4:	726f6320 	rsbvc	r6, pc, #32, 6	; 0x80000000
 800afb8:	74636572 	strbtvc	r6, [r3], #-1394	; 0xfffffa8e
 800afbc:	206e6f69 	rsbcs	r6, lr, r9, ror #30
 800afc0:	000a7325 	andeq	r7, sl, r5, lsr #6
 800afc4:	6f6c4320 	svcvs	0x006c4320
 800afc8:	203a6b63 	eorscs	r6, sl, r3, ror #22
 800afcc:	48207525 	stmdami	r0!, {r0, r2, r5, r8, sl, ip, sp, lr}
 800afd0:	00000a7a 	andeq	r0, r0, sl, ror sl

0800afd4 <CSWTCH.9>:
 800afd4:	0800b1e8 	stmdaeq	r0, {r3, r5, r6, r7, r8, ip, sp, pc}
 800afd8:	0800b2e8 	stmdaeq	r0, {r3, r5, r6, r7, r9, ip, sp, pc}
 800afdc:	0800b3e8 	stmdaeq	r0, {r3, r5, r6, r7, r8, r9, ip, sp, pc}
 800afe0:	0800b4e8 	stmdaeq	r0, {r3, r5, r6, r7, sl, ip, sp, pc}
 800afe4:	0800b5e8 	stmdaeq	r0, {r3, r5, r6, r7, r8, sl, ip, sp, pc}

0800afe8 <gamma10_0>:
 800afe8:	03020100 	movweq	r0, #8448	; 0x2100
 800afec:	07060504 	streq	r0, [r6, -r4, lsl #10]
 800aff0:	0b0a0908 	bleq	828d418 <__exidx_end+0x2814ac>
 800aff4:	0f0e0d0c 	svceq	0x000e0d0c
 800aff8:	13121110 	tstne	r2, #16, 2
 800affc:	17161514 			; <UNDEFINED> instruction: 0x17161514
 800b000:	1b1a1918 	blne	8691468 <__exidx_end+0x6854fc>
 800b004:	1f1e1d1c 	svcne	0x001e1d1c
 800b008:	23222120 			; <UNDEFINED> instruction: 0x23222120
 800b00c:	27262524 	strcs	r2, [r6, -r4, lsr #10]!
 800b010:	2b2a2928 	blcs	8a954b8 <__exidx_end+0xa8954c>
 800b014:	2f2e2d2c 	svccs	0x002e2d2c
 800b018:	33323130 	teqcc	r2, #48, 2
 800b01c:	37363534 			; <UNDEFINED> instruction: 0x37363534
 800b020:	3b3a3938 	blcc	8e99508 <__exidx_end+0xe8d59c>
 800b024:	3f3e3d3c 	svccc	0x003e3d3c
 800b028:	43424140 	movtmi	r4, #8512	; 0x2140
 800b02c:	47464544 	strbmi	r4, [r6, -r4, asr #10]
 800b030:	4b4a4948 	blmi	929d558 <__exidx_end+0x12915ec>
 800b034:	4f4e4d4c 	svcmi	0x004e4d4c
 800b038:	53525150 	cmppl	r2, #80, 2
 800b03c:	57565554 			; <UNDEFINED> instruction: 0x57565554
 800b040:	5b5a5958 	blpl	96a15a8 <__exidx_end+0x169563c>
 800b044:	5f5e5d5c 	svcpl	0x005e5d5c
 800b048:	63626160 	cmnvs	r2, #96, 2
 800b04c:	67666564 	strbvs	r6, [r6, -r4, ror #10]!
 800b050:	6b6a6968 	blvs	9aa55f8 <__exidx_end+0x1a9968c>
 800b054:	6f6e6d6c 	svcvs	0x006e6d6c
 800b058:	73727170 	cmnvc	r2, #112, 2
 800b05c:	77767574 			; <UNDEFINED> instruction: 0x77767574
 800b060:	7b7a7978 	blvc	9ea9648 <__exidx_end+0x1e9d6dc>
 800b064:	7f7e7d7c 	svcvc	0x007e7d7c
 800b068:	83828180 	orrhi	r8, r2, #128, 2
 800b06c:	87868584 	strhi	r8, [r6, r4, lsl #11]
 800b070:	8b8a8988 	blhi	62ad698 <__heap_size+0x62ac698>
 800b074:	8f8e8d8c 	svchi	0x008e8d8c
 800b078:	93929190 	orrsls	r9, r2, #144, 2	; 0x24
 800b07c:	97969594 			; <UNDEFINED> instruction: 0x97969594
 800b080:	9b9a9998 	blls	66b16e8 <__heap_size+0x66b06e8>
 800b084:	9f9e9d9c 	svcls	0x009e9d9c
 800b088:	a3a2a1a0 			; <UNDEFINED> instruction: 0xa3a2a1a0
 800b08c:	a7a6a5a4 	strge	sl, [r6, r4, lsr #11]!
 800b090:	abaaa9a8 	blge	6ab5738 <__heap_size+0x6ab4738>
 800b094:	afaeadac 	svcge	0x00aeadac
 800b098:	b3b2b1b0 			; <UNDEFINED> instruction: 0xb3b2b1b0
 800b09c:	b7b6b5b4 			; <UNDEFINED> instruction: 0xb7b6b5b4
 800b0a0:	bbbab9b8 	bllt	6eb9788 <__heap_size+0x6eb8788>
 800b0a4:	bfbebdbc 	svclt	0x00bebdbc
 800b0a8:	c3c2c1c0 	bicgt	ip, r2, #192, 2	; 0x30
 800b0ac:	c7c6c5c4 	strbgt	ip, [r6, r4, asr #11]
 800b0b0:	cbcac9c8 	blgt	72bd7d8 <__heap_size+0x72bc7d8>
 800b0b4:	cfcecdcc 	svcgt	0x00cecdcc
 800b0b8:	d3d2d1d0 	bicsle	sp, r2, #208, 2	; 0x34
 800b0bc:	d7d6d5d4 			; <UNDEFINED> instruction: 0xd7d6d5d4
 800b0c0:	dbdad9d8 	blle	76c1828 <__heap_size+0x76c0828>
 800b0c4:	dfdedddc 	svcle	0x00dedddc
 800b0c8:	e3e2e1e0 	mvn	lr, #224, 2	; 0x38
 800b0cc:	e7e6e5e4 	strb	lr, [r6, r4, ror #11]!
 800b0d0:	ebeae9e8 	bl	7ac5878 <__heap_size+0x7ac4878>
 800b0d4:	efeeedec 	svc	0x00eeedec
 800b0d8:	f3f2f1f0 	vsra.u64	<illegal reg q15.5>, q8, #14
 800b0dc:	f7f6f5f4 			; <UNDEFINED> instruction: 0xf7f6f5f4
 800b0e0:	fbfaf9f8 	blx	7ec98ca <__heap_size+0x7ec88ca>
 800b0e4:	fffefdfc 			; <UNDEFINED> instruction: 0xfffefdfc

0800b0e8 <gamma20_0>:
	...
 800b0f4:	01010101 	tsteq	r1, r1, lsl #2
 800b0f8:	01010101 	tsteq	r1, r1, lsl #2
 800b0fc:	02020202 	andeq	r0, r2, #536870912	; 0x20000000
 800b100:	03030202 	movweq	r0, #12802	; 0x3202
 800b104:	04040303 	streq	r0, [r4], #-771	; 0xfffffcfd
 800b108:	05050404 	streq	r0, [r5, #-1028]	; 0xfffffbfc
 800b10c:	06060505 	streq	r0, [r6], -r5, lsl #10
 800b110:	07070706 	streq	r0, [r7, -r6, lsl #14]
 800b114:	09080808 	stmdbeq	r8, {r3, fp}
 800b118:	0a0a0909 	beq	828d544 <__exidx_end+0x2815d8>
 800b11c:	0c0b0b0b 			; <UNDEFINED> instruction: 0x0c0b0b0b
 800b120:	0e0d0d0c 	cdpeq	13, 0, cr0, cr13, cr12, {0}
 800b124:	100f0f0e 	andne	r0, pc, lr, lsl #30
 800b128:	12111110 	andsne	r1, r1, #16, 2
 800b12c:	14131312 	ldrne	r1, [r3], #-786	; 0xfffffcee
 800b130:	16151514 			; <UNDEFINED> instruction: 0x16151514
 800b134:	18181717 	ldmdane	r8, {r0, r1, r2, r4, r8, r9, sl, ip}
 800b138:	1b1a1a19 	blne	86919a4 <__exidx_end+0x685a38>
 800b13c:	1e1d1c1c 	mrcne	12, 0, r1, cr13, cr12, {0}
 800b140:	20201f1e 	eorcs	r1, r0, lr, lsl pc
 800b144:	23232221 			; <UNDEFINED> instruction: 0x23232221
 800b148:	26262524 	strtcs	r2, [r6], -r4, lsr #10
 800b14c:	2a292827 	bcs	8a551f0 <__exidx_end+0xa49284>
 800b150:	2d2c2b2a 	vstmdbcs	ip!, {d2-d22}
 800b154:	302f2f2e 	eorcc	r2, pc, lr, lsr #30
 800b158:	34333231 	ldrtcc	r3, [r3], #-561	; 0xfffffdcf
 800b15c:	38373635 	ldmdacc	r7!, {r0, r2, r4, r5, r9, sl, ip, sp}
 800b160:	3b3a3938 	blcc	8e99648 <__exidx_end+0xe8d6dc>
 800b164:	3f3e3d3c 	svccc	0x003e3d3c
 800b168:	43424140 	movtmi	r4, #8512	; 0x2140
 800b16c:	47464544 	strbmi	r4, [r6, -r4, asr #10]
 800b170:	4c4b4a49 	mcrrmi	10, 4, r4, fp, cr9
 800b174:	504f4e4d 	subpl	r4, pc, sp, asr #28
 800b178:	55545251 	ldrbpl	r5, [r4, #-593]	; 0xfffffdaf
 800b17c:	59585756 	ldmdbpl	r8, {r1, r2, r4, r6, r8, r9, sl, ip, lr}^
 800b180:	5e5d5c5b 	mrcpl	12, 2, r5, cr13, cr11, {2}
 800b184:	6362615f 	cmnvs	r2, #-1073741801	; 0xc0000017
 800b188:	68676664 	stmdavs	r7!, {r2, r5, r6, r9, sl, sp, lr}^
 800b18c:	6d6c6b69 	fstmdbxvs	ip!, {d22-d73}	;@ Deprecated
 800b190:	7371706f 	cmnvc	r1, #111	; 0x6f
 800b194:	78777574 	ldmdavc	r7!, {r2, r4, r5, r6, r8, sl, ip, sp, lr}^
 800b198:	7e7c7b79 	vmovvc.s8	r7, d12[7]
 800b19c:	8382807f 	orrhi	r8, r2, #127	; 0x7f
 800b1a0:	89888685 	stmibhi	r8, {r0, r2, r7, r9, sl, pc}
 800b1a4:	8f8e8c8b 	svchi	0x008e8c8b
 800b1a8:	95949291 	ldrls	r9, [r4, #657]	; 0x291
 800b1ac:	9b9a9897 	blls	66b1410 <__heap_size+0x66b0410>
 800b1b0:	a2a09e9d 	adcge	r9, r0, #2512	; 0x9d0
 800b1b4:	a8a6a5a3 	stmiage	r6!, {r0, r1, r5, r7, r8, sl, sp, pc}
 800b1b8:	afadabaa 	svcge	0x00adabaa
 800b1bc:	b5b4b2b0 	ldrlt	fp, [r4, #688]!	; 0x2b0
 800b1c0:	bcbab9b7 			; <UNDEFINED> instruction: 0xbcbab9b7
 800b1c4:	c3c1c0be 	bicgt	ip, r1, #190	; 0xbe
 800b1c8:	cac8c7c5 	bgt	723d0e4 <__heap_size+0x723c0e4>
 800b1cc:	d1cfcecc 	bicle	ip, pc, ip, asr #29
 800b1d0:	d9d7d5d3 	ldmible	r7, {r0, r1, r4, r6, r7, r8, sl, ip, lr, pc}^
 800b1d4:	e0dedcda 	ldrsb	sp, [lr], #202	; 0xca
 800b1d8:	e8e6e4e2 	stmia	r6!, {r1, r5, r6, r7, sl, sp, lr, pc}^
 800b1dc:	efedebe9 	svc	0x00edebe9
 800b1e0:	f7f5f3f1 			; <UNDEFINED> instruction: 0xf7f5f3f1
 800b1e4:	fffdfbf9 			; <UNDEFINED> instruction: 0xfffdfbf9

0800b1e8 <gamma21_0>:
	...
 800b1f4:	01010000 	mrseq	r0, (UNDEF: 1)
 800b1f8:	01010101 	tsteq	r1, r1, lsl #2
 800b1fc:	02010101 	andeq	r0, r1, #1073741824	; 0x40000000
 800b200:	02020202 	andeq	r0, r2, #536870912	; 0x20000000
 800b204:	03030302 	movweq	r0, #13058	; 0x3302
 800b208:	04040303 	streq	r0, [r4], #-771	; 0xfffffcfd
 800b20c:	05050404 	streq	r0, [r5, #-1028]	; 0xfffffbfc
 800b210:	06060505 	streq	r0, [r6], -r5, lsl #10
 800b214:	07070706 	streq	r0, [r7, -r6, lsl #14]
 800b218:	09080808 	stmdbeq	r8, {r3, fp}
 800b21c:	0a0a0909 	beq	828d648 <__exidx_end+0x2816dc>
 800b220:	0c0b0b0b 			; <UNDEFINED> instruction: 0x0c0b0b0b
 800b224:	0e0d0d0c 	cdpeq	13, 0, cr0, cr13, cr12, {0}
 800b228:	0f0f0e0e 	svceq	0x000f0e0e
 800b22c:	11111010 	tstne	r1, r0, lsl r0
 800b230:	14131212 	ldrne	r1, [r3], #-530	; 0xfffffdee
 800b234:	16151514 			; <UNDEFINED> instruction: 0x16151514
 800b238:	18181716 	ldmdane	r8, {r1, r2, r4, r8, r9, sl, ip}
 800b23c:	1b1a1919 	blne	86916a8 <__exidx_end+0x68573c>
 800b240:	1d1d1c1b 	ldcne	12, cr1, [sp, #-108]	; 0xffffff94
 800b244:	201f1f1e 	andscs	r1, pc, lr, lsl pc	; <UNPREDICTABLE>
 800b248:	23222121 			; <UNDEFINED> instruction: 0x23222121
 800b24c:	26252424 	strtcs	r2, [r5], -r4, lsr #8
 800b250:	29282827 	stmdbcs	r8!, {r0, r1, r2, r5, fp, sp}
 800b254:	2c2c2b2a 			; <UNDEFINED> instruction: 0x2c2c2b2a
 800b258:	302f2e2d 	eorcc	r2, pc, sp, lsr #28
 800b25c:	33333231 	teqcc	r3, #268435459	; 0x10000003
 800b260:	37363534 			; <UNDEFINED> instruction: 0x37363534
 800b264:	3b3a3938 	blcc	8e9974c <__exidx_end+0xe8d7e0>
 800b268:	3f3e3d3c 	svccc	0x003e3d3c
 800b26c:	43424140 	movtmi	r4, #8512	; 0x2140
 800b270:	47464544 	strbmi	r4, [r6, -r4, asr #10]
 800b274:	4c4b4948 	mcrrmi	9, 4, r4, fp, cr8	; <UNPREDICTABLE>
 800b278:	504f4e4d 	subpl	r4, pc, sp, asr #28
 800b27c:	55545351 	ldrbpl	r5, [r4, #-849]	; 0xfffffcaf
 800b280:	5a585756 	bpl	9620fe0 <__exidx_end+0x1615074>
 800b284:	5f5d5c5b 	svcpl	0x005d5c5b
 800b288:	64626160 	strbtvs	r6, [r2], #-352	; 0xfffffea0
 800b28c:	69686665 	stmdbvs	r8!, {r0, r2, r5, r6, r9, sl, sp, lr}^
 800b290:	6e6d6b6a 	vnmulvs.f64	d22, d13, d26
 800b294:	74727170 	ldrbtvc	r7, [r2], #-368	; 0xfffffe90
 800b298:	79787675 	ldmdbvc	r8!, {r0, r2, r4, r5, r6, r9, sl, ip, sp, lr}^
 800b29c:	7f7e7c7b 	svcvc	0x007e7c7b
 800b2a0:	85838281 	strhi	r8, [r3, #641]	; 0x281
 800b2a4:	8b898886 	blhi	626d4c4 <__heap_size+0x626c4c4>
 800b2a8:	91908e8d 	orrsls	r8, r0, sp, lsl #29
 800b2ac:	97969493 			; <UNDEFINED> instruction: 0x97969493
 800b2b0:	9e9c9b99 	vmovls.32	r9, d28[0]
 800b2b4:	a5a3a1a0 	strge	sl, [r3, #416]!	; 0x1a0
 800b2b8:	abaaa8a6 	blge	6ab5558 <__heap_size+0x6ab4558>
 800b2bc:	b2b0afad 	adcslt	sl, r0, #692	; 0x2b4
 800b2c0:	b9b7b6b4 	ldmiblt	r7!, {r2, r4, r5, r7, r9, sl, ip, sp, pc}
 800b2c4:	c0bfbdbb 	ldrhtgt	fp, [pc], fp
 800b2c8:	c8c6c4c2 	stmiagt	r6, {r1, r6, r7, sl, lr, pc}^
 800b2cc:	cfcdcbca 	svcgt	0x00cdcbca
 800b2d0:	d7d5d3d1 			; <UNDEFINED> instruction: 0xd7d5d3d1
 800b2d4:	dfdddbd9 	svcle	0x00dddbd9
 800b2d8:	e6e4e2e1 	strbt	lr, [r4], r1, ror #5
 800b2dc:	eeeceae8 	vfms.f32	s29, s25, s17
 800b2e0:	f7f5f3f1 			; <UNDEFINED> instruction: 0xf7f5f3f1
 800b2e4:	fffdfbf9 			; <UNDEFINED> instruction: 0xfffdfbf9

0800b2e8 <gamma22_0>:
	...
 800b2f4:	01000000 	mrseq	r0, (UNDEF: 0)
 800b2f8:	01010101 	tsteq	r1, r1, lsl #2
 800b2fc:	01010101 	tsteq	r1, r1, lsl #2
 800b300:	02020201 	andeq	r0, r2, #268435456	; 0x10000000
 800b304:	02020202 	andeq	r0, r2, #536870912	; 0x20000000
 800b308:	03030303 	movweq	r0, #13059	; 0x3303
 800b30c:	04040403 	streq	r0, [r4], #-1027	; 0xfffffbfd
 800b310:	05050504 	streq	r0, [r5, #-1284]	; 0xfffffafc
 800b314:	06060605 	streq	r0, [r6], -r5, lsl #12
 800b318:	07070706 	streq	r0, [r7, -r6, lsl #14]
 800b31c:	09080808 	stmdbeq	r8, {r3, fp}
 800b320:	0a0a0909 	beq	828d74c <__exidx_end+0x2817e0>
 800b324:	0c0b0b0b 			; <UNDEFINED> instruction: 0x0c0b0b0b
 800b328:	0d0d0d0c 	stceq	13, cr0, [sp, #-48]	; 0xffffffd0
 800b32c:	0f0f0e0e 	svceq	0x000f0e0e
 800b330:	11111010 	tstne	r1, r0, lsl r0
 800b334:	13131212 	tstne	r3, #536870913	; 0x20000001
 800b338:	16151414 			; <UNDEFINED> instruction: 0x16151414
 800b33c:	18171716 	ldmdane	r7, {r1, r2, r4, r8, r9, sl, ip}
 800b340:	1a1a1919 	bne	86917ac <__exidx_end+0x685840>
 800b344:	1d1c1c1b 	ldcne	12, cr1, [ip, #-108]	; 0xffffff94
 800b348:	201f1e1e 	andscs	r1, pc, lr, lsl lr	; <UNPREDICTABLE>
 800b34c:	23222121 			; <UNDEFINED> instruction: 0x23222121
 800b350:	26252423 	strtcs	r2, [r5], -r3, lsr #8
 800b354:	29282727 	stmdbcs	r8!, {r0, r1, r2, r5, r8, r9, sl, sp}
 800b358:	2c2b2b2a 			; <UNDEFINED> instruction: 0x2c2b2b2a
 800b35c:	302f2e2d 	eorcc	r2, pc, sp, lsr #28
 800b360:	33323131 	teqcc	r2, #1073741836	; 0x4000000c
 800b364:	37363534 			; <UNDEFINED> instruction: 0x37363534
 800b368:	3b3a3938 	blcc	8e99850 <__exidx_end+0xe8d8e4>
 800b36c:	3f3e3d3c 	svccc	0x003e3d3c
 800b370:	43424140 	movtmi	r4, #8512	; 0x2140
 800b374:	47464544 	strbmi	r4, [r6, -r4, asr #10]
 800b378:	4c4b4a49 	mcrrmi	10, 4, r4, fp, cr9
 800b37c:	514f4e4d 	cmppl	pc, sp, asr #28
 800b380:	55545352 	ldrbpl	r5, [r4, #-850]	; 0xfffffcae
 800b384:	5a595857 	bpl	96614e8 <__exidx_end+0x165557c>
 800b388:	5f5e5d5b 	svcpl	0x005e5d5b
 800b38c:	64636261 	strbtvs	r6, [r3], #-609	; 0xfffffd9f
 800b390:	6a696766 	bvs	9a65130 <__exidx_end+0x1a591c4>
 800b394:	6f6e6d6b 	svcvs	0x006e6d6b
 800b398:	75747271 	ldrbvc	r7, [r4, #-625]!	; 0xfffffd8f
 800b39c:	7b797877 	blvc	9e69580 <__exidx_end+0x1e5d614>
 800b3a0:	817f7e7c 	cmnhi	pc, ip, ror lr	; <UNPREDICTABLE>
 800b3a4:	87858482 	strhi	r8, [r5, r2, lsl #9]
 800b3a8:	8d8c8a89 	vstrhi	s16, [ip, #548]	; 0x224
 800b3ac:	9492918f 	ldrls	r9, [r2], #399	; 0x18f
 800b3b0:	9a999795 	bls	667120c <__heap_size+0x667020c>
 800b3b4:	a19f9e9c 			; <UNDEFINED> instruction: 0xa19f9e9c
 800b3b8:	a8a6a5a3 	stmiage	r6!, {r0, r1, r5, r7, r8, sl, sp, pc}
 800b3bc:	afadacaa 	svcge	0x00adacaa
 800b3c0:	b6b5b3b1 			; <UNDEFINED> instruction: 0xb6b5b3b1
 800b3c4:	bebcbab8 			; <UNDEFINED> instruction: 0xbebcbab8
 800b3c8:	c5c4c2c0 	strbgt	ip, [r4, #704]	; 0x2c0
 800b3cc:	cdcbc9c7 	vstrgt.16	s25, [fp, #398]	; 0x18e	; <UNPREDICTABLE>
 800b3d0:	d5d3d1cf 	ldrble	sp, [r3, #463]	; 0x1cf
 800b3d4:	dddbd9d7 	vldrle.16	s27, [fp, #430]	; 0x1ae	; <UNPREDICTABLE>
 800b3d8:	e5e3e1df 	strb	lr, [r3, #479]!	; 0x1df
 800b3dc:	eeeceae7 	vfms.f32	s29, s25, s15
 800b3e0:	f6f4f2f0 			; <UNDEFINED> instruction: 0xf6f4f2f0
 800b3e4:	fffdfbf8 			; <UNDEFINED> instruction: 0xfffdfbf8

0800b3e8 <gamma23_0>:
	...
 800b3f8:	01010100 	mrseq	r0, (UNDEF: 17)
 800b3fc:	01010101 	tsteq	r1, r1, lsl #2
 800b400:	01010101 	tsteq	r1, r1, lsl #2
 800b404:	02020202 	andeq	r0, r2, #536870912	; 0x20000000
 800b408:	03020202 	movweq	r0, #8706	; 0x2202
 800b40c:	03030303 	movweq	r0, #13059	; 0x3303
 800b410:	04040404 	streq	r0, [r4], #-1028	; 0xfffffbfc
 800b414:	05050504 	streq	r0, [r5, #-1284]	; 0xfffffafc
 800b418:	06060605 	streq	r0, [r6], -r5, lsl #12
 800b41c:	07070707 	streq	r0, [r7, -r7, lsl #14]
 800b420:	09080808 	stmdbeq	r8, {r3, fp}
 800b424:	0a0a0a09 	beq	828dc50 <__exidx_end+0x281ce4>
 800b428:	0c0b0b0b 			; <UNDEFINED> instruction: 0x0c0b0b0b
 800b42c:	0d0d0d0c 	stceq	13, cr0, [sp, #-48]	; 0xffffffd0
 800b430:	0f0f0e0e 	svceq	0x000f0e0e
 800b434:	11111010 	tstne	r1, r0, lsl r0
 800b438:	13131212 	tstne	r3, #536870913	; 0x20000001
 800b43c:	15151414 	ldrne	r1, [r5, #-1044]	; 0xfffffbec
 800b440:	18171716 	ldmdane	r7, {r1, r2, r4, r8, r9, sl, ip}
 800b444:	1a1a1918 	bne	86918ac <__exidx_end+0x685940>
 800b448:	1d1c1c1b 	ldcne	12, cr1, [ip, #-108]	; 0xffffff94
 800b44c:	201f1e1e 	andscs	r1, pc, lr, lsl lr	; <UNPREDICTABLE>
 800b450:	23222120 			; <UNDEFINED> instruction: 0x23222120
 800b454:	26252423 	strtcs	r2, [r5], -r3, lsr #8
 800b458:	29282726 	stmdbcs	r8!, {r1, r2, r5, r8, r9, sl, sp}
 800b45c:	2c2b2a2a 			; <UNDEFINED> instruction: 0x2c2b2a2a
 800b460:	302f2e2d 	eorcc	r2, pc, sp, lsr #28
 800b464:	33323131 	teqcc	r2, #1073741836	; 0x4000000c
 800b468:	37363534 			; <UNDEFINED> instruction: 0x37363534
 800b46c:	3b3a3938 	blcc	8e99954 <__exidx_end+0xe8d9e8>
 800b470:	3f3e3d3c 	svccc	0x003e3d3c
 800b474:	43424140 	movtmi	r4, #8512	; 0x2140
 800b478:	48474645 	stmdami	r7, {r0, r2, r6, r9, sl, lr}^
 800b47c:	4c4b4a49 	mcrrmi	10, 4, r4, fp, cr9
 800b480:	51504f4e 	cmppl	r0, lr, asr #30
 800b484:	56555452 			; <UNDEFINED> instruction: 0x56555452
 800b488:	5b5a5957 	blpl	96a19ec <__exidx_end+0x1695a80>
 800b48c:	605f5e5c 	subsvs	r5, pc, ip, asr lr	; <UNPREDICTABLE>
 800b490:	66646362 	strbtvs	r6, [r4], -r2, ror #6
 800b494:	6b6a6867 	blvs	9aa5638 <__exidx_end+0x1a996cc>
 800b498:	71706e6d 	cmnvc	r0, sp, ror #28
 800b49c:	77757472 			; <UNDEFINED> instruction: 0x77757472
 800b4a0:	7d7b7a78 	vldmdbvc	fp!, {s15-s134}
 800b4a4:	8382807e 	orrhi	r8, r2, #126	; 0x7e
 800b4a8:	8a888685 	bhi	622cec4 <__heap_size+0x622bec4>
 800b4ac:	908f8d8b 	addls	r8, pc, fp, lsl #27
 800b4b0:	97959492 			; <UNDEFINED> instruction: 0x97959492
 800b4b4:	9e9c9a99 			; <UNDEFINED> instruction: 0x9e9c9a99
 800b4b8:	a5a3a1a0 	strge	sl, [r3, #416]!	; 0x1a0
 800b4bc:	acaaa9a7 			; <UNDEFINED> instruction: 0xacaaa9a7
 800b4c0:	b4b2b0ae 	ldrtlt	fp, [r2], #174	; 0xae
 800b4c4:	bbb9b7b6 	bllt	6e793a4 <__heap_size+0x6e783a4>
 800b4c8:	c3c1bfbd 	bicgt	fp, r1, #756	; 0x2f4
 800b4cc:	cbc9c7c5 	blgt	727d3e8 <__heap_size+0x727c3e8>
 800b4d0:	d3d1cfcd 	bicsle	ip, r1, #820	; 0x334
 800b4d4:	dcdad7d5 	ldclle	7, cr13, [sl], {213}	; 0xd5
 800b4d8:	e4e2e0de 	strbt	lr, [r2], #222	; 0xde
 800b4dc:	edebe9e6 			; <UNDEFINED> instruction: 0xedebe9e6
 800b4e0:	f6f4f1ef 			; <UNDEFINED> instruction: 0xf6f4f1ef
 800b4e4:	fffdfaf8 			; <UNDEFINED> instruction: 0xfffdfaf8

0800b4e8 <gamma24_0>:
	...
 800b4f8:	01000000 	mrseq	r0, (UNDEF: 0)
 800b4fc:	01010101 	tsteq	r1, r1, lsl #2
 800b500:	01010101 	tsteq	r1, r1, lsl #2
 800b504:	02010101 	andeq	r0, r1, #1073741824	; 0x40000000
 800b508:	02020202 	andeq	r0, r2, #536870912	; 0x20000000
 800b50c:	03030202 	movweq	r0, #12802	; 0x3202
 800b510:	04030303 	streq	r0, [r3], #-771	; 0xfffffcfd
 800b514:	04040404 	streq	r0, [r4], #-1028	; 0xfffffbfc
 800b518:	05050505 	streq	r0, [r5, #-1285]	; 0xfffffafb
 800b51c:	06060606 	streq	r0, [r6], -r6, lsl #12
 800b520:	08070707 	stmdaeq	r7, {r0, r1, r2, r8, r9, sl}
 800b524:	09090808 	stmdbeq	r9, {r3, fp}
 800b528:	0a0a0a09 	beq	828dd54 <__exidx_end+0x281de8>
 800b52c:	0c0b0b0b 			; <UNDEFINED> instruction: 0x0c0b0b0b
 800b530:	0e0d0d0c 	cdpeq	13, 0, cr0, cr13, cr12, {0}
 800b534:	0f0f0e0e 	svceq	0x000f0e0e
 800b538:	11111010 	tstne	r1, r0, lsl r0
 800b53c:	13131212 	tstne	r3, #536870913	; 0x20000001
 800b540:	16151414 			; <UNDEFINED> instruction: 0x16151414
 800b544:	18171716 	ldmdane	r7, {r1, r2, r4, r8, r9, sl, ip}
 800b548:	1a1a1918 	bne	86919b0 <__exidx_end+0x685a44>
 800b54c:	1d1c1c1b 	ldcne	12, cr1, [ip, #-108]	; 0xffffff94
 800b550:	201f1e1e 	andscs	r1, pc, lr, lsl lr	; <UNPREDICTABLE>
 800b554:	23222120 			; <UNDEFINED> instruction: 0x23222120
 800b558:	26252423 	strtcs	r2, [r5], -r3, lsr #8
 800b55c:	29282727 	stmdbcs	r8!, {r0, r1, r2, r5, r8, r9, sl, sp}
 800b560:	2c2b2b2a 			; <UNDEFINED> instruction: 0x2c2b2b2a
 800b564:	302f2e2d 	eorcc	r2, pc, sp, lsr #28
 800b568:	34333231 	ldrtcc	r3, [r3], #-561	; 0xfffffdcf
 800b56c:	37363535 			; <UNDEFINED> instruction: 0x37363535
 800b570:	3b3a3938 	blcc	8e99a58 <__exidx_end+0xe8daec>
 800b574:	403f3e3c 	eorsmi	r3, pc, ip, lsr lr	; <UNPREDICTABLE>
 800b578:	44434241 	strbmi	r4, [r3], #-577	; 0xfffffdbf
 800b57c:	49474645 	stmdbmi	r7, {r0, r2, r6, r9, sl, lr}^
 800b580:	4d4c4b4a 	vstrmi	d20, [ip, #-296]	; 0xfffffed8
 800b584:	5251504e 	subspl	r5, r1, #78	; 0x4e
 800b588:	57565553 			; <UNDEFINED> instruction: 0x57565553
 800b58c:	5c5b5a58 	mrrcpl	10, 5, r5, fp, cr8
 800b590:	62605f5e 	rsbvs	r5, r0, #376	; 0x178
 800b594:	67666463 	strbvs	r6, [r6, -r3, ror #8]!
 800b598:	6d6c6a69 	vstmdbvs	ip!, {s13-s117}
 800b59c:	7372706f 	cmnvc	r2, #111	; 0x6f
 800b5a0:	79787675 	ldmdbvc	r8!, {r0, r2, r4, r5, r6, r9, sl, ip, sp, lr}^
 800b5a4:	7f7e7c7b 	svcvc	0x007e7c7b
 800b5a8:	86848381 	strhi	r8, [r4], r1, lsl #7
 800b5ac:	8d8b8988 	vstrhi.16	s16, [fp, #272]	; 0x110	; <UNPREDICTABLE>
 800b5b0:	9492908e 	ldrls	r9, [r2], #142	; 0x8e
 800b5b4:	9b999795 	blls	6671410 <__heap_size+0x6670410>
 800b5b8:	a2a09e9c 	adcge	r9, r0, #156, 28	; 0x9c0
 800b5bc:	a9a7a6a4 	stmibge	r7!, {r2, r5, r7, r9, sl, sp, pc}
 800b5c0:	b1afadab 			; <UNDEFINED> instruction: 0xb1afadab
 800b5c4:	b9b7b5b3 	ldmiblt	r7!, {r0, r1, r4, r5, r7, r8, sl, ip, sp, pc}
 800b5c8:	c1bfbdbb 			; <UNDEFINED> instruction: 0xc1bfbdbb
 800b5cc:	c9c7c5c3 	stmibgt	r7, {r0, r1, r6, r7, r8, sl, lr, pc}^
 800b5d0:	d2cfcdcb 	sbcle	ip, pc, #12992	; 0x32c0
 800b5d4:	dad8d6d4 	ble	764112c <__heap_size+0x764012c>
 800b5d8:	e3e1dfdc 	mvn	sp, #220, 30	; 0x370
 800b5dc:	eceae8e5 	stcl	8, cr14, [sl], #916	; 0x394
 800b5e0:	f6f3f1ef 			; <UNDEFINED> instruction: 0xf6f3f1ef
 800b5e4:	fffdfaf8 			; <UNDEFINED> instruction: 0xfffdfaf8

0800b5e8 <gamma25_0>:
	...
 800b5fc:	01010000 	mrseq	r0, (UNDEF: 1)
 800b600:	01010101 	tsteq	r1, r1, lsl #2
 800b604:	01010101 	tsteq	r1, r1, lsl #2
 800b608:	02020201 	andeq	r0, r2, #268435456	; 0x10000000
 800b60c:	02020202 	andeq	r0, r2, #536870912	; 0x20000000
 800b610:	03030302 	movweq	r0, #13058	; 0x3302
 800b614:	04040303 	streq	r0, [r4], #-771	; 0xfffffcfd
 800b618:	05040404 	streq	r0, [r4, #-1028]	; 0xfffffbfc
 800b61c:	06050505 	streq	r0, [r5], -r5, lsl #10
 800b620:	07060606 	streq	r0, [r6, -r6, lsl #12]
 800b624:	08070707 	stmdaeq	r7, {r0, r1, r2, r8, r9, sl}
 800b628:	09090808 	stmdbeq	r9, {r3, fp}
 800b62c:	0a0a0a09 	beq	828de58 <__exidx_end+0x281eec>
 800b630:	0c0c0b0b 			; <UNDEFINED> instruction: 0x0c0c0b0b
 800b634:	0e0d0d0c 	cdpeq	13, 0, cr0, cr13, cr12, {0}
 800b638:	0f0f0f0e 	svceq	0x000f0f0e
 800b63c:	11111010 	tstne	r1, r0, lsl r0
 800b640:	13131212 	tstne	r3, #536870913	; 0x20000001
 800b644:	16151414 			; <UNDEFINED> instruction: 0x16151414
 800b648:	18171716 	ldmdane	r7, {r1, r2, r4, r8, r9, sl, ip}
 800b64c:	1a1a1919 	bne	8691ab8 <__exidx_end+0x685b4c>
 800b650:	1d1c1c1b 	ldcne	12, cr1, [ip, #-108]	; 0xffffff94
 800b654:	201f1e1e 	andscs	r1, pc, lr, lsl lr	; <UNPREDICTABLE>
 800b658:	23222121 			; <UNDEFINED> instruction: 0x23222121
 800b65c:	26252424 	strtcs	r2, [r5], -r4, lsr #8
 800b660:	29282827 	stmdbcs	r8!, {r0, r1, r2, r5, fp, sp}
 800b664:	2d2c2b2a 	vstmdbcs	ip!, {d2-d22}
 800b668:	302f2e2e 	eorcc	r2, pc, lr, lsr #28
 800b66c:	34333231 	ldrtcc	r3, [r3], #-561	; 0xfffffdcf
 800b670:	38373635 	ldmdacc	r7!, {r0, r2, r4, r5, r9, sl, ip, sp}
 800b674:	3c3b3a39 			; <UNDEFINED> instruction: 0x3c3b3a39
 800b678:	403f3e3d 	eorsmi	r3, pc, sp, lsr lr	; <UNPREDICTABLE>
 800b67c:	45444341 	strbmi	r4, [r4, #-833]	; 0xfffffcbf
 800b680:	49484746 	stmdbmi	r8, {r1, r2, r6, r8, r9, sl, lr}^
 800b684:	4e4d4c4b 	cdpmi	12, 4, cr4, cr13, cr11, {2}
 800b688:	53525150 	cmppl	r2, #80, 2
 800b68c:	59575655 	ldmdbpl	r7, {r0, r2, r4, r6, r9, sl, ip, lr}^
 800b690:	5e5d5b5a 	vmovpl.s8	r5, d13[2]
 800b694:	6362615f 	cmnvs	r2, #-1073741801	; 0xc0000017
 800b698:	69686665 	stmdbvs	r8!, {r0, r2, r5, r6, r9, sl, sp, lr}^
 800b69c:	6f6e6c6b 	svcvs	0x006e6c6b
 800b6a0:	75747271 	ldrbvc	r7, [r4, #-625]!	; 0xfffffd8f
 800b6a4:	7c7a7977 			; <UNDEFINED> instruction: 0x7c7a7977
 800b6a8:	82817f7d 	addhi	r7, r1, #500	; 0x1f4
 800b6ac:	89878684 	stmibhi	r7, {r2, r7, r9, sl, pc}
 800b6b0:	908e8d8b 	addls	r8, lr, fp, lsl #27
 800b6b4:	97969492 			; <UNDEFINED> instruction: 0x97969492
 800b6b8:	9f9d9b99 	svcls	0x009d9b99
 800b6bc:	a6a5a3a1 	strtge	sl, [r5], r1, lsr #7
 800b6c0:	aeacaaa8 	vfmage.f32	s20, s25, s17
 800b6c4:	b6b4b2b0 			; <UNDEFINED> instruction: 0xb6b4b2b0
 800b6c8:	bfbdbab8 	svclt	0x00bdbab8
 800b6cc:	c7c5c3c1 	strbgt	ip, [r5, r1, asr #7]
 800b6d0:	d0ceccc9 	sbcle	ip, lr, r9, asr #25
 800b6d4:	d9d7d4d2 	ldmible	r7, {r1, r4, r6, r7, sl, ip, lr, pc}^
 800b6d8:	e2e0dddb 	rsc	sp, r0, #14016	; 0x36c0
 800b6dc:	ebe9e7e4 	bl	7a85674 <__heap_size+0x7a84674>
 800b6e0:	f5f3f0ee 			; <UNDEFINED> instruction: 0xf5f3f0ee
 800b6e4:	fffdfaf8 			; <UNDEFINED> instruction: 0xfffdfaf8

0800b6e8 <gamma25_5>:
 800b6e8:	01010100 	mrseq	r0, (UNDEF: 17)
 800b6ec:	01010101 	tsteq	r1, r1, lsl #2
 800b6f0:	01010101 	tsteq	r1, r1, lsl #2
 800b6f4:	01010101 	tsteq	r1, r1, lsl #2
 800b6f8:	01010101 	tsteq	r1, r1, lsl #2
 800b6fc:	01010101 	tsteq	r1, r1, lsl #2
 800b700:	01010101 	tsteq	r1, r1, lsl #2
 800b704:	02020202 	andeq	r0, r2, #536870912	; 0x20000000
 800b708:	02020202 	andeq	r0, r2, #536870912	; 0x20000000
 800b70c:	03030302 	movweq	r0, #13058	; 0x3302
 800b710:	03030303 	movweq	r0, #13059	; 0x3303
 800b714:	04040404 	streq	r0, [r4], #-1028	; 0xfffffbfc
 800b718:	05050504 	streq	r0, [r5, #-1284]	; 0xfffffafc
 800b71c:	06060605 	streq	r0, [r6], -r5, lsl #12
 800b720:	07070706 	streq	r0, [r7, -r6, lsl #14]
 800b724:	08080807 	stmdaeq	r8, {r0, r1, r2, fp}
 800b728:	0a090909 	beq	824db54 <__exidx_end+0x241be8>
 800b72c:	0b0b0a0a 	bleq	82cdf5c <__exidx_end+0x2c1ff0>
 800b730:	0c0c0c0b 	stceq	12, cr0, [ip], {11}
 800b734:	0e0e0d0d 	cdpeq	13, 0, cr0, cr14, cr13, {0}
 800b738:	100f0f0f 	andne	r0, pc, pc, lsl #30
 800b73c:	12111110 	andsne	r1, r1, #16, 2
 800b740:	14131312 	ldrne	r1, [r3], #-786	; 0xfffffcee
 800b744:	16161514 			; <UNDEFINED> instruction: 0x16161514
 800b748:	18181717 	ldmdane	r8, {r0, r1, r2, r4, r8, r9, sl, ip}
 800b74c:	1b1a1a19 	blne	8691fb8 <__exidx_end+0x68604c>
 800b750:	1e1d1c1c 	mrcne	12, 0, r1, cr13, cr12, {0}
 800b754:	20201f1e 	eorcs	r1, r0, lr, lsl pc
 800b758:	23232221 			; <UNDEFINED> instruction: 0x23232221
 800b75c:	26262524 	strtcs	r2, [r6], -r4, lsr #10
 800b760:	2a292827 	bcs	8a55804 <__exidx_end+0xa49898>
 800b764:	2d2c2b2b 	fstmdbxcs	ip!, {d2-d22}	;@ Deprecated
 800b768:	31302f2e 	teqcc	r0, lr, lsr #30
 800b76c:	35343332 	ldrcc	r3, [r4, #-818]!	; 0xfffffcce
 800b770:	38373635 	ldmdacc	r7!, {r0, r2, r4, r5, r9, sl, ip, sp}
 800b774:	3d3c3a39 	vldmdbcc	ip!, {s6-s62}
 800b778:	41403f3e 	cmpmi	r0, lr, lsr pc
 800b77c:	45444342 	strbmi	r4, [r4, #-834]	; 0xfffffcbe
 800b780:	4a494846 	bmi	925d8a0 <__exidx_end+0x1251934>
 800b784:	4f4e4c4b 	svcmi	0x004e4c4b
 800b788:	54535150 	ldrbpl	r5, [r3], #-336	; 0xfffffeb0
 800b78c:	59585655 	ldmdbpl	r8, {r0, r2, r4, r6, r9, sl, ip, lr}^
 800b790:	5e5d5c5a 	mrcpl	12, 2, r5, cr13, cr10, {2}
 800b794:	64636160 	strbtvs	r6, [r3], #-352	; 0xfffffea0
 800b798:	6a686765 	bvs	9a25534 <__exidx_end+0x1a195c8>
 800b79c:	706e6d6b 	rsbvc	r6, lr, fp, ror #26
 800b7a0:	76747371 			; <UNDEFINED> instruction: 0x76747371
 800b7a4:	7c7b7978 			; <UNDEFINED> instruction: 0x7c7b7978
 800b7a8:	8381807e 	orrhi	r8, r1, #126	; 0x7e
 800b7ac:	8a888685 	bhi	622d1c8 <__heap_size+0x622c1c8>
 800b7b0:	918f8d8b 	orrls	r8, pc, fp, lsl #27
 800b7b4:	98969492 	ldmls	r6, {r1, r4, r7, sl, ip, pc}
 800b7b8:	9f9d9c9a 	svcls	0x009d9c9a
 800b7bc:	a7a5a3a1 	strge	sl, [r5, r1, lsr #7]!
 800b7c0:	afadaba9 	svcge	0x00adaba9
 800b7c4:	b7b5b3b1 			; <UNDEFINED> instruction: 0xb7b5b3b1
 800b7c8:	bfbdbbb9 	svclt	0x00bdbbb9
 800b7cc:	c8c6c3c1 	stmiagt	r6, {r0, r6, r7, r8, r9, lr, pc}^
 800b7d0:	d0ceccca 	sbcle	ip, lr, sl, asr #25
 800b7d4:	d9d7d5d3 	ldmible	r7, {r0, r1, r4, r6, r7, r8, sl, ip, lr, pc}^
 800b7d8:	e3e0dedc 	mvn	sp, #220, 28	; 0xdc0
 800b7dc:	eceae7e5 	stcl	7, cr14, [sl], #916	; 0x394
 800b7e0:	f6f3f1ee 			; <UNDEFINED> instruction: 0xf6f3f1ee
 800b7e4:	fffdfbf8 			; <UNDEFINED> instruction: 0xfffdfbf8
 800b7e8:	6e6b6e55 	mcrvs	14, 3, r6, cr11, cr5, {2}
 800b7ec:	006e776f 	rsbeq	r7, lr, pc, ror #14

0800b7f0 <CSWTCH.18>:
 800b7f0:	02020200 	andeq	r0, r2, #0, 4
 800b7f4:	04020202 	streq	r0, [r2], #-514	; 0xfffffdfe
 800b7f8:	 	ldrbmi	r0, [r2, -r0, lsl #10]

0800b7fa <PixelType::MAPS>:
 800b7fa:	00424752 	subeq	r4, r2, r2, asr r7
 800b7fe:	00474252 	subeq	r4, r7, r2, asr r2
 800b802:	00425247 	subeq	r5, r2, r7, asr #4
 800b806:	00524247 	subseq	r4, r2, r7, asr #4
 800b80a:	00475242 	subeq	r5, r7, r2, asr #4
 800b80e:	00524742 	subseq	r4, r2, r2, asr #14

0800b812 <PixelType::TYPES>:
 800b812:	38325357 	ldmdacc	r2!, {r0, r1, r2, r4, r6, r8, r9, ip, lr}
 800b816:	00003130 	andeq	r3, r0, r0, lsr r1
 800b81a:	38325357 	ldmdacc	r2!, {r0, r1, r2, r4, r6, r8, r9, ip, lr}
 800b81e:	00003131 	andeq	r3, r0, r1, lsr r1
 800b822:	38325357 	ldmdacc	r2!, {r0, r1, r2, r4, r6, r8, r9, ip, lr}
 800b826:	00003231 	andeq	r3, r0, r1, lsr r2
 800b82a:	38325357 	ldmdacc	r2!, {r0, r1, r2, r4, r6, r8, r9, ip, lr}
 800b82e:	00423231 	subeq	r3, r2, r1, lsr r2
 800b832:	38325357 	ldmdacc	r2!, {r0, r1, r2, r4, r6, r8, r9, ip, lr}
 800b836:	00003331 	andeq	r3, r0, r1, lsr r3
 800b83a:	38325357 	ldmdacc	r2!, {r0, r1, r2, r4, r6, r8, r9, ip, lr}
 800b83e:	00003531 	andeq	r3, r0, r1, lsr r5
 800b842:	38364b53 	ldmdacc	r6!, {r0, r1, r4, r6, r8, r9, fp, lr}
 800b846:	00003231 	andeq	r3, r0, r1, lsr r2
 800b84a:	38364b53 	ldmdacc	r6!, {r0, r1, r4, r6, r8, r9, fp, lr}
 800b84e:	00573231 	subseq	r3, r7, r1, lsr r2
 800b852:	31534355 	cmpcc	r3, r5, asr r3
 800b856:	00333039 	eorseq	r3, r3, r9, lsr r0
 800b85a:	32534355 	subscc	r4, r3, #1409286145	; 0x54000001
 800b85e:	00333039 	eorseq	r3, r3, r9, lsr r0
 800b862:	38385343 	ldmdacc	r8!, {r0, r1, r6, r8, r9, ip, lr}
 800b866:	00003231 	andeq	r3, r0, r1, lsr r2
 800b86a:	31415041 	cmpcc	r1, r1, asr #32
 800b86e:	00003230 	andeq	r3, r0, r0, lsr r2
 800b872:	38394b53 	ldmdacc	r9!, {r0, r1, r4, r6, r8, r9, fp, lr}
 800b876:	00003232 	andeq	r3, r0, r2, lsr r2
 800b87a:	31383950 	teqcc	r8, r0, asr r9
 800b87e:	00000033 	andeq	r0, r0, r3, lsr r0

0800b882 <s_patternName>:
 800b882:	656e6f4e 	strbvs	r6, [lr, #-3918]!	; 0xfffff0b2
	...
 800b88e:	61520000 	cmpvs	r2, r0
 800b892:	6f626e69 	svcvs	0x00626e69
 800b896:	79632077 	stmdbvc	r3!, {r0, r1, r2, r4, r5, r6, sp}^
 800b89a:	00656c63 	rsbeq	r6, r5, r3, ror #24
 800b89e:	61656854 	cmnvs	r5, r4, asr r8
 800b8a2:	20726574 	rsbscs	r6, r2, r4, ror r5
 800b8a6:	73616863 	cmnvc	r1, #6488064	; 0x630000
 800b8aa:	6f430065 	svcvs	0x00430065
 800b8ae:	72756f6c 	rsbsvc	r6, r5, #108, 30	; 0x1b0
 800b8b2:	70697720 	rsbvc	r7, r9, r0, lsr #14
 800b8b6:	00000065 	andeq	r0, r0, r5, rrx
 800b8ba:	6e616353 	mcrvs	3, 3, r6, cr1, cr3, {2}
 800b8be:	0072656e 	rsbseq	r6, r2, lr, ror #10
 800b8c2:	00000000 	andeq	r0, r0, r0
 800b8c6:	61460000 	mrsvs	r0, (UNDEF: 70)
 800b8ca:	00006564 	andeq	r6, r0, r4, ror #10
	...

0800b8d6 <gamma10_0>:
 800b8d6:	03020100 	movweq	r0, #8448	; 0x2100
 800b8da:	07060504 	streq	r0, [r6, -r4, lsl #10]
 800b8de:	0b0a0908 	bleq	828dd06 <__exidx_end+0x281d9a>
 800b8e2:	0f0e0d0c 	svceq	0x000e0d0c
 800b8e6:	13121110 	tstne	r2, #16, 2
 800b8ea:	17161514 			; <UNDEFINED> instruction: 0x17161514
 800b8ee:	1b1a1918 	blne	8691d56 <__exidx_end+0x685dea>
 800b8f2:	1f1e1d1c 	svcne	0x001e1d1c
 800b8f6:	23222120 			; <UNDEFINED> instruction: 0x23222120
 800b8fa:	27262524 	strcs	r2, [r6, -r4, lsr #10]!
 800b8fe:	2b2a2928 	blcs	8a95da6 <__exidx_end+0xa89e3a>
 800b902:	2f2e2d2c 	svccs	0x002e2d2c
 800b906:	33323130 	teqcc	r2, #48, 2
 800b90a:	37363534 			; <UNDEFINED> instruction: 0x37363534
 800b90e:	3b3a3938 	blcc	8e99df6 <__exidx_end+0xe8de8a>
 800b912:	3f3e3d3c 	svccc	0x003e3d3c
 800b916:	43424140 	movtmi	r4, #8512	; 0x2140
 800b91a:	47464544 	strbmi	r4, [r6, -r4, asr #10]
 800b91e:	4b4a4948 	blmi	929de46 <__exidx_end+0x1291eda>
 800b922:	4f4e4d4c 	svcmi	0x004e4d4c
 800b926:	53525150 	cmppl	r2, #80, 2
 800b92a:	57565554 			; <UNDEFINED> instruction: 0x57565554
 800b92e:	5b5a5958 	blpl	96a1e96 <__exidx_end+0x1695f2a>
 800b932:	5f5e5d5c 	svcpl	0x005e5d5c
 800b936:	63626160 	cmnvs	r2, #96, 2
 800b93a:	67666564 	strbvs	r6, [r6, -r4, ror #10]!
 800b93e:	6b6a6968 	blvs	9aa5ee6 <__exidx_end+0x1a99f7a>
 800b942:	6f6e6d6c 	svcvs	0x006e6d6c
 800b946:	73727170 	cmnvc	r2, #112, 2
 800b94a:	77767574 			; <UNDEFINED> instruction: 0x77767574
 800b94e:	7b7a7978 	blvc	9ea9f36 <__exidx_end+0x1e9dfca>
 800b952:	7f7e7d7c 	svcvc	0x007e7d7c
 800b956:	83828180 	orrhi	r8, r2, #128, 2
 800b95a:	87868584 	strhi	r8, [r6, r4, lsl #11]
 800b95e:	8b8a8988 	blhi	62adf86 <__heap_size+0x62acf86>
 800b962:	8f8e8d8c 	svchi	0x008e8d8c
 800b966:	93929190 	orrsls	r9, r2, #144, 2	; 0x24
 800b96a:	97969594 			; <UNDEFINED> instruction: 0x97969594
 800b96e:	9b9a9998 	blls	66b1fd6 <__heap_size+0x66b0fd6>
 800b972:	9f9e9d9c 	svcls	0x009e9d9c
 800b976:	a3a2a1a0 			; <UNDEFINED> instruction: 0xa3a2a1a0
 800b97a:	a7a6a5a4 	strge	sl, [r6, r4, lsr #11]!
 800b97e:	abaaa9a8 	blge	6ab6026 <__heap_size+0x6ab5026>
 800b982:	afaeadac 	svcge	0x00aeadac
 800b986:	b3b2b1b0 			; <UNDEFINED> instruction: 0xb3b2b1b0
 800b98a:	b7b6b5b4 			; <UNDEFINED> instruction: 0xb7b6b5b4
 800b98e:	bbbab9b8 	bllt	6eba076 <__heap_size+0x6eb9076>
 800b992:	bfbebdbc 	svclt	0x00bebdbc
 800b996:	c3c2c1c0 	bicgt	ip, r2, #192, 2	; 0x30
 800b99a:	c7c6c5c4 	strbgt	ip, [r6, r4, asr #11]
 800b99e:	cbcac9c8 	blgt	72be0c6 <__heap_size+0x72bd0c6>
 800b9a2:	cfcecdcc 	svcgt	0x00cecdcc
 800b9a6:	d3d2d1d0 	bicsle	sp, r2, #208, 2	; 0x34
 800b9aa:	d7d6d5d4 			; <UNDEFINED> instruction: 0xd7d6d5d4
 800b9ae:	dbdad9d8 	blle	76c2116 <__heap_size+0x76c1116>
 800b9b2:	dfdedddc 	svcle	0x00dedddc
 800b9b6:	e3e2e1e0 	mvn	lr, #224, 2	; 0x38
 800b9ba:	e7e6e5e4 	strb	lr, [r6, r4, ror #11]!
 800b9be:	ebeae9e8 	bl	7ac6166 <__heap_size+0x7ac5166>
 800b9c2:	efeeedec 	svc	0x00eeedec
 800b9c6:	f3f2f1f0 	vsra.u64	<illegal reg q15.5>, q8, #14
 800b9ca:	f7f6f5f4 			; <UNDEFINED> instruction: 0xf7f6f5f4
 800b9ce:	fbfaf9f8 	blx	7eca1b8 <__heap_size+0x7ec91b8>
 800b9d2:	fffefdfc 			; <UNDEFINED> instruction: 0xfffefdfc
 800b9d6:	46006f6c 	strmi	r6, [r0], -ip, ror #30
 800b9da:	776d7269 	strbvc	r7, [sp, -r9, ror #4]!
 800b9de:	20657261 	rsbcs	r7, r5, r1, ror #4
 800b9e2:	2a2e2556 	bcs	8b94f42 <__exidx_end+0xb88fd6>
 800b9e6:	4d440073 	stclmi	0, cr0, [r4, #-460]	; 0xfffffe34
 800b9ea:	3a532058 	bcc	94d3b52 <__exidx_end+0x14c7be6>
 800b9ee:	20753325 	rsbscs	r3, r5, r5, lsr #6
 800b9f2:	33253a46 			; <UNDEFINED> instruction: 0x33253a46
 800b9f6:	 	rsbeq	r0, r0, r5, ror r0

0800b9f8 <s_aStorSize>:
 800b9f8:	00000060 	andeq	r0, r0, r0, rrx
 800b9fc:	00000090 	muleq	r0, r0, r0
 800ba00:	00000020 	andeq	r0, r0, r0, lsr #32
 800ba04:	00000040 	andeq	r0, r0, r0, asr #32
 800ba08:	00000060 	andeq	r0, r0, r0, rrx
 800ba0c:	00000040 	andeq	r0, r0, r0, asr #32
 800ba10:	00000020 	andeq	r0, r0, r0, lsr #32
 800ba14:	00000020 	andeq	r0, r0, r0, lsr #32
 800ba18:	000001e0 	andeq	r0, r0, r0, ror #3
 800ba1c:	00000040 	andeq	r0, r0, r0, asr #32
 800ba20:	00000020 	andeq	r0, r0, r0, lsr #32
 800ba24:	00000060 	andeq	r0, r0, r0, rrx
 800ba28:	00000030 	andeq	r0, r0, r0, lsr r0
 800ba2c:	00000020 	andeq	r0, r0, r0, lsr #32
 800ba30:	000003b0 			; <UNDEFINED> instruction: 0x000003b0
 800ba34:	00000030 	andeq	r0, r0, r0, lsr r0
 800ba38:	00000040 	andeq	r0, r0, r0, asr #32
 800ba3c:	00000020 	andeq	r0, r0, r0, lsr #32
 800ba40:	00000060 	andeq	r0, r0, r0, rrx
 800ba44:	00000020 	andeq	r0, r0, r0, lsr #32
 800ba48:	00000400 	andeq	r0, r0, r0, lsl #8
 800ba4c:	00000020 	andeq	r0, r0, r0, lsr #32
 800ba50:	00000020 	andeq	r0, r0, r0, lsr #32
 800ba54:	00000040 	andeq	r0, r0, r0, asr #32
 800ba58:	00000060 	andeq	r0, r0, r0, rrx
 800ba5c:	00000020 	andeq	r0, r0, r0, lsr #32
 800ba60:	00000020 	andeq	r0, r0, r0, lsr #32
 800ba64:	000000c0 	andeq	r0, r0, r0, asr #1

0800ba68 <vtable for StoreDisplayUdf>:
	...
 800ba70:	08007289 	stmdaeq	r0, {r0, r3, r7, r9, ip, sp, lr}
 800ba74:	080072d5 	stmdaeq	r0, {r0, r2, r4, r6, r7, r9, ip, sp, lr}
 800ba78:	080072b1 	stmdaeq	r0, {r0, r4, r5, r7, r9, ip, sp, lr}
 800ba7c:	0800728d 	stmdaeq	r0, {r0, r2, r3, r7, r9, ip, sp, lr}

0800ba80 <vtable for StorePixelDmx>:
	...
 800ba88:	08007347 	stmdaeq	r0, {r0, r1, r2, r6, r8, r9, ip, sp, lr}
 800ba8c:	080074b1 	stmdaeq	r0, {r0, r4, r5, r7, sl, ip, sp, lr}
 800ba90:	0800734d 	stmdaeq	r0, {r0, r2, r3, r6, r8, r9, ip, sp, lr}
 800ba94:	080074c5 	stmdaeq	r0, {r0, r2, r6, r7, sl, ip, sp, lr}
 800ba98:	0800747d 	stmdaeq	r0, {r0, r2, r3, r4, r5, r6, sl, ip, sp, lr}
 800ba9c:	08007449 	stmdaeq	r0, {r0, r3, r6, sl, ip, sp, lr}
 800baa0:	08007411 	stmdaeq	r0, {r0, r4, sl, ip, sp, lr}
 800baa4:	080073d9 	stmdaeq	r0, {r0, r3, r4, r6, r7, r8, r9, ip, sp, lr}
 800baa8:	080073a5 	stmdaeq	r0, {r0, r2, r5, r7, r8, r9, ip, sp, lr}
 800baac:	08007371 	stmdaeq	r0, {r0, r4, r5, r6, r8, r9, ip, sp, lr}
 800bab0:	fffffffc 			; <UNDEFINED> instruction: 0xfffffffc
 800bab4:	00000000 	andeq	r0, r0, r0
 800bab8:	08007349 	stmdaeq	r0, {r0, r3, r6, r8, r9, ip, sp, lr}
 800babc:	080074bd 	stmdaeq	r0, {r0, r2, r3, r4, r5, r7, sl, ip, sp, lr}
 800bac0:	080074a9 	stmdaeq	r0, {r0, r3, r5, r7, sl, ip, sp, lr}
 800bac4:	08007475 	stmdaeq	r0, {r0, r2, r4, r5, r6, sl, ip, sp, lr}
 800bac8:	08007441 	stmdaeq	r0, {r0, r6, sl, ip, sp, lr}
 800bacc:	08007409 	stmdaeq	r0, {r0, r3, sl, ip, sp, lr}
 800bad0:	080073d1 	stmdaeq	r0, {r0, r4, r6, r7, r8, r9, ip, sp, lr}
 800bad4:	0800739d 	stmdaeq	r0, {r0, r2, r3, r4, r7, r8, r9, ip, sp, lr}

0800bad8 <vtable for StoreRDMDevice>:
	...
 800bae0:	08007501 	stmdaeq	r0, {r0, r8, sl, ip, sp, lr}
 800bae4:	08007571 	stmdaeq	r0, {r0, r4, r5, r6, r8, sl, ip, sp, lr}
 800bae8:	08007509 	stmdaeq	r0, {r0, r3, r8, sl, ip, sp, lr}
 800baec:	08007585 	stmdaeq	r0, {r0, r2, r7, r8, sl, ip, sp, lr}
 800baf0:	0800752d 	stmdaeq	r0, {r0, r2, r3, r5, r8, sl, ip, sp, lr}
 800baf4:	fffffffc 			; <UNDEFINED> instruction: 0xfffffffc
 800baf8:	00000000 	andeq	r0, r0, r0
 800bafc:	08007503 	stmdaeq	r0, {r0, r1, r8, sl, ip, sp, lr}
 800bb00:	0800757d 	stmdaeq	r0, {r0, r2, r3, r4, r5, r6, r8, sl, ip, sp, lr}
 800bb04:	08007569 	stmdaeq	r0, {r0, r3, r5, r6, r8, sl, ip, sp, lr}

0800bb08 <vtable for StoreRDMSensors>:
	...
 800bb10:	080075c1 	stmdaeq	r0, {r0, r6, r7, r8, sl, ip, sp, lr}
 800bb14:	0800760d 	stmdaeq	r0, {r0, r2, r3, r9, sl, ip, sp, lr}
 800bb18:	080075e9 	stmdaeq	r0, {r0, r3, r5, r6, r7, r8, sl, ip, sp, lr}
 800bb1c:	080075c5 	stmdaeq	r0, {r0, r2, r6, r7, r8, sl, ip, sp, lr}
 800bb20:	3a434d46 	bcc	90df040 <__exidx_end+0x10d30d4>
 800bb24:	74654420 	strbtvc	r4, [r5], #-1056	; 0xfffffbe0
 800bb28:	65746365 	ldrbvs	r6, [r4, #-869]!	; 0xfffffc9b
 800bb2c:	73252064 			; <UNDEFINED> instruction: 0x73252064
 800bb30:	74697720 	strbtvc	r7, [r9], #-1824	; 0xfffff8e0
 800bb34:	6f742068 	svcvs	0x00742068
 800bb38:	206c6174 	rsbcs	r6, ip, r4, ror r1
 800bb3c:	62206425 	eorvs	r6, r0, #620756992	; 0x25000000
 800bb40:	73657479 	cmnvc	r5, #2030043136	; 0x79000000
 800bb44:	64255b20 	strtvs	r5, [r5], #-2848	; 0xfffff4e0
 800bb48:	5d426b20 	vstrpl	d22, [r2, #-128]	; 0xffffff80
 800bb4c:	6f4e000a 	svcvs	0x004e000a
 800bb50:	73696420 	cmnvc	r9, #32, 8	; 0x20000000
 800bb54:	79616c70 	stmdbvc	r1!, {r4, r5, r6, sl, fp, sp, lr}^
 800bb58:	756f6620 	strbvc	r6, [pc, #-1568]!	; 800b540 <gamma24_0+0x58>
 800bb5c:	5300646e 	movwpl	r6, #1134	; 0x46e
 800bb60:	30313148 	eorscc	r3, r1, r8, asr #2
 800bb64:	53530036 	cmppl	r3, #54	; 0x36
 800bb68:	30333144 	eorscc	r3, r3, r4, asr #2
 800bb6c:	73250036 			; <UNDEFINED> instruction: 0x73250036
 800bb70:	64252820 	strtvs	r2, [r5], #-2080	; 0xfffff7e0
 800bb74:	2964252c 	stmdbcs	r4!, {r2, r3, r5, r8, sl, sp}^
 800bb78:	aa40000a 	bge	900bba8 <__exidx_end+0xfffc3c>
 800bb7c:	00eeaaee 	rsceq	sl, lr, lr, ror #21

0800bb80 <_OledFont8x6>:
 800bb80:	00000040 	andeq	r0, r0, r0, asr #32
 800bb84:	40000000 	andmi	r0, r0, r0
 800bb88:	005f0000 	subseq	r0, pc, r0
 800bb8c:	00400000 	subeq	r0, r0, r0
 800bb90:	00070007 	andeq	r0, r7, r7
 800bb94:	7f144000 	svcvc	0x00144000
 800bb98:	00147f14 	andseq	r7, r4, r4, lsl pc
 800bb9c:	7f2a2440 	svcvc	0x002a2440
 800bba0:	4000122a 	andmi	r1, r0, sl, lsr #4
 800bba4:	64081323 	strvs	r1, [r8], #-803	; 0xfffffcdd
 800bba8:	36400062 	strbcc	r0, [r0], -r2, rrx
 800bbac:	50205649 	eorpl	r5, r0, r9, asr #12
 800bbb0:	08004000 	stmdaeq	r0, {lr}
 800bbb4:	00000307 	andeq	r0, r0, r7, lsl #6
 800bbb8:	221c0040 	andscs	r0, ip, #64	; 0x40
 800bbbc:	40000041 	andmi	r0, r0, r1, asr #32
 800bbc0:	1c224100 	stfnes	f4, [r2], #-0
 800bbc4:	2a400000 	bcs	900bbcc <__exidx_end+0xfffc60>
 800bbc8:	2a1c7f1c 	bcs	872b840 <__exidx_end+0x71f8d4>
 800bbcc:	08084000 	stmdaeq	r8, {lr}
 800bbd0:	0008083e 	andeq	r0, r8, lr, lsr r8
 800bbd4:	70800040 	addvc	r0, r0, r0, asr #32
 800bbd8:	40000030 	andmi	r0, r0, r0, lsr r0
 800bbdc:	08080808 	stmdaeq	r8, {r3, fp}
 800bbe0:	00400008 	subeq	r0, r0, r8
 800bbe4:	00606000 	rsbeq	r6, r0, r0
 800bbe8:	10204000 	eorne	r4, r0, r0
 800bbec:	00020408 	andeq	r0, r2, r8, lsl #8
 800bbf0:	49513e40 	ldmdbmi	r1, {r6, r9, sl, fp, ip, sp}^
 800bbf4:	40003e45 	andmi	r3, r0, r5, asr #28
 800bbf8:	407f4200 	rsbsmi	r4, pc, r0, lsl #4
 800bbfc:	72400000 	subvc	r0, r0, #0
 800bc00:	46494949 	strbmi	r4, [r9], -r9, asr #18
 800bc04:	41214000 			; <UNDEFINED> instruction: 0x41214000
 800bc08:	00334d49 	eorseq	r4, r3, r9, asr #26
 800bc0c:	12141840 	andsne	r1, r4, #64, 16	; 0x400000
 800bc10:	4000107f 	andmi	r1, r0, pc, ror r0
 800bc14:	45454527 	strbmi	r4, [r5, #-1319]	; 0xfffffad9
 800bc18:	3c400039 	mcrrcc	0, 3, r0, r0, cr9
 800bc1c:	3149494a 	cmpcc	r9, sl, asr #18
 800bc20:	21414000 	mrscs	r4, (UNDEF: 65)
 800bc24:	00070911 	andeq	r0, r7, r1, lsl r9
 800bc28:	49493640 	stmdbmi	r9, {r6, r9, sl, ip, sp}^
 800bc2c:	40003649 	andmi	r3, r0, r9, asr #12
 800bc30:	29494946 	stmdbcs	r9, {r1, r2, r6, r8, fp, lr}^
 800bc34:	0040001e 	subeq	r0, r0, lr, lsl r0
 800bc38:	00001400 	andeq	r1, r0, r0, lsl #8
 800bc3c:	40004000 	andmi	r4, r0, r0
 800bc40:	00000034 	andeq	r0, r0, r4, lsr r0
 800bc44:	14080040 	strne	r0, [r8], #-64	; 0xffffffc0
 800bc48:	40004122 	andmi	r4, r0, r2, lsr #2
 800bc4c:	14141414 	ldrne	r1, [r4], #-1044	; 0xfffffbec
 800bc50:	00400014 	subeq	r0, r0, r4, lsl r0
 800bc54:	08142241 	ldmdaeq	r4, {r0, r6, r9, sp}
 800bc58:	01024000 	mrseq	r4, (UNDEF: 2)
 800bc5c:	00060959 	andeq	r0, r6, r9, asr r9
 800bc60:	5d413e40 	stclpl	14, cr3, [r1, #-256]	; 0xffffff00
 800bc64:	40004e59 	andmi	r4, r0, r9, asr lr
 800bc68:	1211127c 	andsne	r1, r1, #124, 4	; 0xc0000007
 800bc6c:	7f40007c 	svcvc	0x0040007c
 800bc70:	36494949 	strbcc	r4, [r9], -r9, asr #18
 800bc74:	413e4000 	teqmi	lr, r0
 800bc78:	00224141 	eoreq	r4, r2, r1, asr #2
 800bc7c:	41417f40 	cmpmi	r1, r0, asr #30
 800bc80:	40003e41 	andmi	r3, r0, r1, asr #28
 800bc84:	4949497f 	stmdbmi	r9, {r0, r1, r2, r3, r4, r5, r6, r8, fp, lr}^
 800bc88:	7f400041 	svcvc	0x00400041
 800bc8c:	01090909 	tsteq	r9, r9, lsl #18
 800bc90:	413e4000 	teqmi	lr, r0
 800bc94:	00735141 	rsbseq	r5, r3, r1, asr #2
 800bc98:	08087f40 	stmdaeq	r8, {r6, r8, r9, sl, fp, ip, sp, lr}
 800bc9c:	40007f08 	andmi	r7, r0, r8, lsl #30
 800bca0:	417f4100 	cmnmi	pc, r0, lsl #2
 800bca4:	20400000 	subcs	r0, r0, r0
 800bca8:	013f4140 	teqeq	pc, r0, asr #2
 800bcac:	087f4000 	ldmdaeq	pc!, {lr}^	; <UNPREDICTABLE>
 800bcb0:	00412214 	subeq	r2, r1, r4, lsl r2
 800bcb4:	40407f40 	submi	r7, r0, r0, asr #30
 800bcb8:	40004040 	andmi	r4, r0, r0, asr #32
 800bcbc:	021c027f 	andseq	r0, ip, #-268435449	; 0xf0000007
 800bcc0:	7f40007f 	svcvc	0x0040007f
 800bcc4:	7f100804 	svcvc	0x00100804
 800bcc8:	413e4000 	teqmi	lr, r0
 800bccc:	003e4141 	eorseq	r4, lr, r1, asr #2
 800bcd0:	09097f40 	stmdbeq	r9, {r6, r8, r9, sl, fp, ip, sp, lr}
 800bcd4:	40000609 	andmi	r0, r0, r9, lsl #12
 800bcd8:	2151413e 	cmpcs	r1, lr, lsr r1
 800bcdc:	7f40005e 	svcvc	0x0040005e
 800bce0:	46291909 	strtmi	r1, [r9], -r9, lsl #18
 800bce4:	49264000 	stmdbmi	r6!, {lr}
 800bce8:	00324949 	eorseq	r4, r2, r9, asr #18
 800bcec:	7f010340 	svcvc	0x00010340
 800bcf0:	40000301 	andmi	r0, r0, r1, lsl #6
 800bcf4:	4040403f 	submi	r4, r0, pc, lsr r0
 800bcf8:	1f40003f 	svcne	0x0040003f
 800bcfc:	1f204020 	svcne	0x00204020
 800bd00:	403f4000 	eorsmi	r4, pc, r0
 800bd04:	003f4038 	eorseq	r4, pc, r8, lsr r0	; <UNPREDICTABLE>
 800bd08:	08146340 	ldmdaeq	r4, {r6, r8, r9, sp, lr}
 800bd0c:	40006314 	andmi	r6, r0, r4, lsl r3
 800bd10:	04780403 	ldrbteq	r0, [r8], #-1027	; 0xfffffbfd
 800bd14:	61400003 	cmpvs	r0, r3
 800bd18:	434d4959 	movtmi	r4, #55641	; 0xd959
 800bd1c:	7f004000 	svcvc	0x00004000
 800bd20:	00414141 	subeq	r4, r1, r1, asr #2
 800bd24:	08040240 	stmdaeq	r4, {r6, r9}
 800bd28:	40002010 	andmi	r2, r0, r0, lsl r0
 800bd2c:	41414100 	mrsmi	r4, (UNDEF: 81)
 800bd30:	0440007f 	strbeq	r0, [r0], #-127	; 0xffffff81
 800bd34:	04020102 	streq	r0, [r2], #-258	; 0xfffffefe
 800bd38:	40404000 	submi	r4, r0, r0
 800bd3c:	00404040 	subeq	r4, r0, r0, asr #32
 800bd40:	07030040 	streq	r0, [r3, -r0, asr #32]
 800bd44:	40000008 	andmi	r0, r0, r8
 800bd48:	78545420 	ldmdavc	r4, {r5, sl, ip, lr}^
 800bd4c:	7f400040 	svcvc	0x00400040
 800bd50:	38444428 	stmdacc	r4, {r3, r5, sl, lr}^
 800bd54:	44384000 	ldrtmi	r4, [r8], #-0
 800bd58:	00284444 	eoreq	r4, r8, r4, asr #8
 800bd5c:	44443840 	strbmi	r3, [r4], #-2112	; 0xfffff7c0
 800bd60:	40007f28 	andmi	r7, r0, r8, lsr #30
 800bd64:	54545438 	ldrbpl	r5, [r4], #-1080	; 0xfffffbc8
 800bd68:	00400018 	subeq	r0, r0, r8, lsl r0
 800bd6c:	02097e08 	andeq	r7, r9, #8, 28	; 0x80
 800bd70:	a4184000 	ldrge	r4, [r8], #-0
 800bd74:	00789ca4 	rsbseq	r9, r8, r4, lsr #25
 800bd78:	04087f40 	streq	r7, [r8], #-3904	; 0xfffff0c0
 800bd7c:	40007804 	andmi	r7, r0, r4, lsl #16
 800bd80:	407d4400 	rsbsmi	r4, sp, r0, lsl #8
 800bd84:	20400000 	subcs	r0, r0, r0
 800bd88:	003d4040 	eorseq	r4, sp, r0, asr #32
 800bd8c:	107f4000 	rsbsne	r4, pc, r0
 800bd90:	00004428 	andeq	r4, r0, r8, lsr #8
 800bd94:	7f410040 	svcvc	0x00410040
 800bd98:	40000040 	andmi	r0, r0, r0, asr #32
 800bd9c:	0478047c 	ldrbteq	r0, [r8], #-1148	; 0xfffffb84
 800bda0:	7c400078 	mcrrvc	0, 7, r0, r0, cr8
 800bda4:	78040408 	stmdavc	r4, {r3, sl}
 800bda8:	44384000 	ldrtmi	r4, [r8], #-0
 800bdac:	00384444 	eorseq	r4, r8, r4, asr #8
 800bdb0:	2418fc40 	ldrcs	pc, [r8], #-3136	; 0xfffff3c0
 800bdb4:	40001824 	andmi	r1, r0, r4, lsr #16
 800bdb8:	18242418 	stmdane	r4!, {r3, r4, sl, sp}
 800bdbc:	7c4000fc 	mcrrvc	0, 15, r0, r0, cr12
 800bdc0:	08040408 	stmdaeq	r4, {r3, sl}
 800bdc4:	54484000 	strbpl	r4, [r8], #-0
 800bdc8:	00245454 	eoreq	r5, r4, r4, asr r4
 800bdcc:	3f040440 	svccc	0x00040440
 800bdd0:	40002444 	andmi	r2, r0, r4, asr #8
 800bdd4:	2040403c 	subcs	r4, r0, ip, lsr r0
 800bdd8:	1c40007c 	mcrrne	0, 7, r0, r0, cr12
 800bddc:	1c204020 	stcne	0, cr4, [r0], #-128	; 0xffffff80
 800bde0:	403c4000 	eorsmi	r4, ip, r0
 800bde4:	003c4030 	eorseq	r4, ip, r0, lsr r0
 800bde8:	10284440 	eorne	r4, r8, r0, asr #8
 800bdec:	40004428 	andmi	r4, r0, r8, lsr #8
 800bdf0:	9090904c 	addsls	r9, r0, ip, asr #32
 800bdf4:	4440007c 	strbmi	r0, [r0], #-124	; 0xffffff84
 800bdf8:	444c5464 	strbmi	r5, [ip], #-1124	; 0xfffffb9c
 800bdfc:	08004000 	stmdaeq	r0, {lr}
 800be00:	00004136 	andeq	r4, r0, r6, lsr r1
 800be04:	77000040 	strvc	r0, [r0, -r0, asr #32]
 800be08:	40000000 	andmi	r0, r0, r0
 800be0c:	08364100 	ldmdaeq	r6!, {r8, lr}
 800be10:	02400000 	subeq	r0, r0, #0
 800be14:	02040201 	andeq	r0, r4, #268435456	; 0x10000000
 800be18:	263c4000 	ldrtcs	r4, [ip], -r0
 800be1c:	003c2623 	eorseq	r2, ip, r3, lsr #12

0800be20 <oled_128x32_init>:
 800be20:	a880d5ae 	stmge	r0, {r1, r2, r3, r5, r7, r8, sl, ip, lr, pc}
 800be24:	4000d31f 	andmi	sp, r0, pc, lsl r3
 800be28:	0020148d 	eoreq	r1, r0, sp, lsl #9
 800be2c:	02dac8a1 	sbcseq	ip, sl, #10551296	; 0xa10000
 800be30:	f1d97f81 			; <UNDEFINED> instruction: 0xf1d97f81
 800be34:	a6a440db 	ssatge	r4, #5, fp, asr #1

0800be38 <oled_128x64_init>:
 800be38:	a880d5ae 	stmge	r0, {r1, r2, r3, r5, r7, r8, sl, ip, lr, pc}
 800be3c:	4000d33f 	andmi	sp, r0, pc, lsr r3
 800be40:	0020148d 	eoreq	r1, r0, sp, lsl #9
 800be44:	12dac8a1 	sbcsne	ip, sl, #10551296	; 0xa10000
 800be48:	f1d97f81 			; <UNDEFINED> instruction: 0xf1d97f81
 800be4c:	a6a440db 	ssatge	r4, #5, fp, asr #1

0800be50 <vtable for Ssd1306>:
	...
 800be58:	08007a55 	stmdaeq	r0, {r0, r2, r4, r6, r9, fp, ip, sp, lr}
 800be5c:	08007a81 	stmdaeq	r0, {r0, r7, r9, fp, ip, sp, lr}
 800be60:	08007d99 	stmdaeq	r0, {r0, r3, r4, r7, r8, sl, fp, ip, sp, lr}
 800be64:	08007d21 	stmdaeq	r0, {r0, r5, r8, sl, fp, ip, sp, lr}
 800be68:	08007be9 	stmdaeq	r0, {r0, r3, r5, r6, r7, r8, r9, fp, ip, sp, lr}
 800be6c:	08007aa1 	stmdaeq	r0, {r0, r5, r7, r9, fp, ip, sp, lr}
 800be70:	08007acd 	stmdaeq	r0, {r0, r2, r3, r6, r7, r9, fp, ip, sp, lr}
 800be74:	08007bc1 	stmdaeq	r0, {r0, r6, r7, r8, r9, fp, ip, sp, lr}
 800be78:	08007b79 	stmdaeq	r0, {r0, r3, r4, r5, r6, r8, r9, fp, ip, sp, lr}
 800be7c:	08007a57 	stmdaeq	r0, {r0, r1, r2, r4, r6, r9, fp, ip, sp, lr}
 800be80:	08007c29 	stmdaeq	r0, {r0, r3, r5, sl, fp, ip, sp, lr}
 800be84:	08007c35 	stmdaeq	r0, {r0, r2, r4, r5, sl, fp, ip, sp, lr}
 800be88:	08007c4f 	stmdaeq	r0, {r0, r1, r2, r3, r6, sl, fp, ip, sp, lr}
 800be8c:	08007a59 	stmdaeq	r0, {r0, r3, r4, r6, r9, fp, ip, sp, lr}
 800be90:	37335b1b 			; <UNDEFINED> instruction: 0x37335b1b
 800be94:	5b1b006d 	blpl	86cc050 <__exidx_end+0x6c00e4>
 800be98:	006d3034 	rsbeq	r3, sp, r4, lsr r0
 800be9c:	2e25565b 	mcrcs	6, 1, r5, cr5, cr11, {2}
 800bea0:	205d732a 	subscs	r7, sp, sl, lsr #6
 800bea4:	43207325 			; <UNDEFINED> instruction: 0x43207325
 800bea8:	69706d6f 	ldmdbvs	r0!, {r0, r1, r2, r3, r5, r6, r8, sl, fp, sp, lr}^
 800beac:	2064656c 	rsbcs	r6, r4, ip, ror #10
 800beb0:	25206e6f 	strcs	r6, [r0, #-3695]!	; 0xfffff191
 800beb4:	20732a2e 	rsbscs	r2, r3, lr, lsr #20
 800beb8:	25207461 	strcs	r7, [r0, #-1121]!	; 0xfffffb9f
 800bebc:	00732a2e 	rsbseq	r2, r3, lr, lsr #20
 800bec0:	6f626552 	svcvs	0x00626552
 800bec4:	6e69746f 	cdpvs	4, 6, cr7, cr9, cr15, {3}
 800bec8:	2e2e2067 	cdpcs	0, 2, cr2, cr14, cr7, {3}
 800becc:	4e000a2e 	vmlami.f32	s0, s0, s29
 800bed0:	5452206f 	ldrbpl	r2, [r2], #-111	; 0xffffff91
 800bed4:	6f632043 	svcvs	0x00632043
 800bed8:	63656e6e 	cmnvs	r5, #1760	; 0x6e0
 800bedc:	00646574 	rsbeq	r6, r4, r4, ror r5
 800bee0:	64342e25 	ldrtvs	r2, [r4], #-3621	; 0xfffff1db
 800bee4:	322e252f 	eorcc	r2, lr, #197132288	; 0xbc00000
 800bee8:	2e252f64 	cdpcs	15, 2, cr2, cr5, cr4, {3}
 800beec:	25206432 	strcs	r6, [r0, #-1074]!	; 0xfffffbce
 800bef0:	3a64322e 	bcc	99187b0 <__exidx_end+0x190c844>
 800bef4:	64322e25 	ldrtvs	r2, [r2], #-3621	; 0xfffff1db
 800bef8:	322e253a 	eorcc	r2, lr, #243269632	; 0xe800000
 800befc:	4d000a64 	vstrmi	s0, [r0, #-400]	; 0xfffffe70
 800bf00:	39375043 	ldmdbcc	r7!, {r0, r1, r6, ip, lr}
 800bf04:	00583134 	subseq	r3, r8, r4, lsr r1
 800bf08:	32335344 	eorscc	r5, r3, #68, 6	; 0x10000001
 800bf0c:	50003133 	andpl	r3, r0, r3, lsr r1
 800bf10:	35384643 	ldrcc	r4, [r8, #-1603]!	; 0xfffff9bd
 800bf14:	53003336 	movwpl	r3, #822	; 0x336
 800bf18:	495f434f 	ldmdbmi	pc, {r0, r1, r2, r3, r6, r8, r9, lr}^	; <UNPREDICTABLE>
 800bf1c:	5245544e 	subpl	r5, r5, #1308622848	; 0x4e000000
 800bf20:	004c414e 	subeq	r4, ip, lr, asr #2

0800bf24 <CSWTCH.7>:
 800bf24:	0800beff 	stmdaeq	r0, {r0, r1, r2, r3, r4, r5, r6, r7, r9, sl, fp, ip, sp, pc}
 800bf28:	0800bf08 	stmdaeq	r0, {r3, r8, r9, sl, fp, ip, sp, pc}
 800bf2c:	0800bf0f 	stmdaeq	r0, {r0, r1, r2, r3, r8, r9, sl, fp, ip, sp, pc}
 800bf30:	0800bf17 	stmdaeq	r0, {r0, r1, r2, r4, r8, r9, sl, fp, ip, sp, pc}

0800bf34 <days_of_month>:
 800bf34:	0000001f 	andeq	r0, r0, pc, lsl r0
 800bf38:	0000001c 	andeq	r0, r0, ip, lsl r0
 800bf3c:	0000001f 	andeq	r0, r0, pc, lsl r0
 800bf40:	0000001e 	andeq	r0, r0, lr, lsl r0
 800bf44:	0000001f 	andeq	r0, r0, pc, lsl r0
 800bf48:	0000001e 	andeq	r0, r0, lr, lsl r0
 800bf4c:	0000001f 	andeq	r0, r0, pc, lsl r0
 800bf50:	0000001f 	andeq	r0, r0, pc, lsl r0
 800bf54:	0000001e 	andeq	r0, r0, lr, lsl r0
 800bf58:	0000001f 	andeq	r0, r0, pc, lsl r0
 800bf5c:	0000001e 	andeq	r0, r0, lr, lsl r0
 800bf60:	0000001f 	andeq	r0, r0, pc, lsl r0

Disassembly of section .ARM:

0800bf64 <__exidx_start>:
 800bf64:	7fff5d80 	svcvc	0x00ff5d80
 800bf68:	00000001 	andeq	r0, r0, r1

Disassembly of section .ARM.attributes:

0800bf6c <.ARM.attributes>:
 800bf6c:	00003441 	andeq	r3, r0, r1, asr #8
 800bf70:	61656100 	cmnvs	r5, r0, lsl #2
 800bf74:	01006962 	tsteq	r0, r2, ror #18
 800bf78:	0000002a 	andeq	r0, r0, sl, lsr #32
 800bf7c:	726f4305 	rsbvc	r4, pc, #335544320	; 0x14000000
 800bf80:	2d786574 	cfldr64cs	mvdx6, [r8, #-464]!	; 0xfffffe30
 800bf84:	0600344d 	streq	r3, [r0], -sp, asr #8
 800bf88:	094d070d 	stmdbeq	sp, {r0, r2, r3, r8, r9, sl}^
 800bf8c:	12060a02 	andne	r0, r6, #8192	; 0x2000
 800bf90:	15011404 	strne	r1, [r1, #-1028]	; 0xfffffbfc
 800bf94:	18031701 	stmdane	r3, {r0, r8, r9, sl, ip}
 800bf98:	1b011a01 	blne	80527a4 <__exidx_end+0x46838>
 800bf9c:	22011c01 	andcs	r1, r1, #256	; 0x100
 800bfa0:	Address 0x000000000800bfa0 is out of bounds.


Disassembly of section .data:

20000000 <s_nDmxTransmitPeriod>:
20000000:	000061a8 	andeq	r6, r0, r8, lsr #3

20000004 <s_nDmxTransmitMabTime>:
20000004:	0000000c 	andeq	r0, r0, ip

20000008 <s_nDmxTransmitBreakTime>:
20000008:	0000005c 	andeq	r0, r0, ip, asr r0

2000000c <next_block>:
2000000c:	2000a000 	andcs	sl, r0, r0

20000010 <s_block_bucket>:
20000010:	00000010 	andeq	r0, r0, r0, lsl r0
20000014:	00000000 	andeq	r0, r0, r0
20000018:	00000020 	andeq	r0, r0, r0, lsr #32
2000001c:	00000000 	andeq	r0, r0, r0
20000020:	00000040 	andeq	r0, r0, r0, asr #32
20000024:	00000000 	andeq	r0, r0, r0
20000028:	00000060 	andeq	r0, r0, r0, rrx
2000002c:	00000000 	andeq	r0, r0, r0
20000030:	00000080 	andeq	r0, r0, r0, lsl #1
20000034:	00000000 	andeq	r0, r0, r0
20000038:	00000100 	andeq	r0, r0, r0, lsl #2
2000003c:	00000000 	andeq	r0, r0, r0
20000040:	00000140 	andeq	r0, r0, r0, asr #2
20000044:	00000000 	andeq	r0, r0, r0
20000048:	00000180 	andeq	r0, r0, r0, lsl #3
2000004c:	00000000 	andeq	r0, r0, r0
20000050:	00000200 	andeq	r0, r0, r0, lsl #4
20000054:	00000000 	andeq	r0, r0, r0
20000058:	00000300 	andeq	r0, r0, r0, lsl #6
2000005c:	00000000 	andeq	r0, r0, r0
20000060:	00000400 	andeq	r0, r0, r0, lsl #8
20000064:	00000000 	andeq	r0, r0, r0
20000068:	00000500 	andeq	r0, r0, r0, lsl #10
	...

20000078 <SystemCoreClock>:
20000078:	07270e00 	streq	r0, [r7, -r0, lsl #28]!

Disassembly of section .bss:

20000080 <s_IsProgrammed>:
	...

20000081 <s_isOn>:
20000081:	 	andeq	r0, r0, r0

20000084 <s_Pattern>:
20000084:	00000000 	andeq	r0, r0, r0

20000088 <outptr>:
20000088:	00000000 	andeq	r0, r0, r0

2000008c <RDMResponder::s_RdmCommand>:
	...

2000018d <RDMResponder::m_IsSubDeviceActive>:
2000018d:	 	andeq	r0, r0, r0

20000190 <RDMResponder::s_pThis>:
20000190:	00000000 	andeq	r0, r0, r0

20000194 <RDMSensors::s_pThis>:
20000194:	00000000 	andeq	r0, r0, r0

20000198 <RDMSubDevices::s_pThis>:
20000198:	00000000 	andeq	r0, r0, r0

2000019c <DMXReceiver::s_IsActive>:
2000019c:	00000000 	andeq	r0, r0, r0

200001a0 <DMXReceiver::s_pLightSet>:
200001a0:	00000000 	andeq	r0, r0, r0

200001a4 <DMXReceiver::s_bDisableOutput>:
200001a4:	00000000 	andeq	r0, r0, r0

200001a8 <s_RxBuffer>:
	...

200003b8 <s_TxBuffer>:
	...

200005bc <sv_PortState>:
200005bc:	00000000 	andeq	r0, r0, r0

200005c0 <sv_nRxDmxPackets>:
	...

200005d0 <sv_nUartsSending>:
200005d0:	00000000 	andeq	r0, r0, r0

200005d4 <Dmx::s_pThis>:
200005d4:	00000000 	andeq	r0, r0, r0

200005d8 <gv_RdmDataReceiveEnd>:
200005d8:	00000000 	andeq	r0, r0, r0

200005dc <RDMDeviceResponder::s_pThis>:
200005dc:	00000000 	andeq	r0, r0, r0

200005e0 <RDMIdentify::m_bIsEnabled>:
	...

200005e1 <RDMIdentify::m_nMode>:
200005e1:	 	andeq	r0, r0, r0

200005e4 <RDMIdentify::s_pThis>:
200005e4:	00000000 	andeq	r0, r0, r0

200005e8 <WS28xxDmx::s_pThis>:
200005e8:	00000000 	andeq	r0, r0, r0

200005ec <PixelDmxParamsRdm::s_pWS28xxDmxStore>:
200005ec:	00000000 	andeq	r0, r0, r0

200005f0 <PixelDmxParamsRdm::s_Data>:
200005f0:	00000000 	andeq	r0, r0, r0

200005f4 <PixelPatterns::m_PortConfig>:
	...

20000614 <PixelPatterns::m_nActivePorts>:
20000614:	00000000 	andeq	r0, r0, r0

20000618 <PixelPatterns::m_pScannerColours>:
20000618:	00000000 	andeq	r0, r0, r0

2000061c <PixelPatterns::m_nCount>:
2000061c:	00000000 	andeq	r0, r0, r0

20000620 <PixelPatterns::m_pOutput>:
20000620:	00000000 	andeq	r0, r0, r0

20000624 <PixelTestPattern::s_pThis>:
20000624:	00000000 	andeq	r0, r0, r0

20000628 <PixelTestPattern::s_Pattern>:
20000628:	00000000 	andeq	r0, r0, r0

2000062c <s_tmp>:
2000062c:	00000000 	andeq	r0, r0, r0

20000630 <WS28xx::s_pThis>:
20000630:	00000000 	andeq	r0, r0, r0

20000634 <Network::s_pThis>:
20000634:	00000000 	andeq	r0, r0, r0

20000638 <DisplayUdf::s_pThis>:
20000638:	00000000 	andeq	r0, r0, r0

2000063c <ConfigStore::s_nWaitMillis>:
2000063c:	00000000 	andeq	r0, r0, r0

20000640 <ConfigStore::s_SpiFlashData>:
	...

20001640 <ConfigStore::s_nStartAddress>:
20001640:	00000000 	andeq	r0, r0, r0

20001644 <ConfigStore::s_bHaveFlashChip>:
20001644:	00000000 	andeq	r0, r0, r0

20001648 <ConfigStore::s_nSpiFlashStoreSize>:
20001648:	00000000 	andeq	r0, r0, r0

2000164c <ConfigStore::s_State>:
2000164c:	00000000 	andeq	r0, r0, r0

20001650 <ConfigStore::s_pThis>:
20001650:	00000000 	andeq	r0, r0, r0

20001654 <ConfigStore::s_bIsNew>:
20001654:	00000000 	andeq	r0, r0, r0

20001658 <StoreDisplayUdf::s_pThis>:
20001658:	00000000 	andeq	r0, r0, r0

2000165c <StorePixelDmx::s_pThis>:
2000165c:	00000000 	andeq	r0, r0, r0

20001660 <StoreRDMDevice::s_pThis>:
20001660:	00000000 	andeq	r0, r0, r0

20001664 <StoreRDMSensors::s_pThis>:
20001664:	00000000 	andeq	r0, r0, r0

20001668 <FlashCode::s_pThis>:
20001668:	00000000 	andeq	r0, r0, r0

2000166c <flashcode::s_nAddress>:
2000166c:	00000000 	andeq	r0, r0, r0

20001670 <flashcode::s_State>:
20001670:	00000000 	andeq	r0, r0, r0

20001674 <flashcode::s_nPage>:
20001674:	00000000 	andeq	r0, r0, r0

20001678 <flashcode::s_pData>:
20001678:	00000000 	andeq	r0, r0, r0

2000167c <flashcode::s_isBank0>:
2000167c:	00000000 	andeq	r0, r0, r0

20001680 <flashcode::s_nLength>:
20001680:	00000000 	andeq	r0, r0, r0

20001684 <Display::s_pThis>:
20001684:	00000000 	andeq	r0, r0, r0

20001688 <_ClearBuffer>:
	...

20001710 <Ssd1306::s_pThis>:
20001710:	00000000 	andeq	r0, r0, r0

20001714 <FirmwareVersion::s_FirmwareVersion>:
	...

2000172a <FirmwareVersion::s_Print>:
	...

2000176c <FirmwareVersion::s_pThis>:
2000176c:	00000000 	andeq	r0, r0, r0

20001770 <Hardware::s_pThis>:
20001770:	00000000 	andeq	r0, r0, r0

20001774 <HwClock::s_pThis>:
20001774:	00000000 	andeq	r0, r0, r0

20001778 <Tm>:
	...

200017a0 <s_micros>:
	...

200017a8 <set_timer>:
200017a8:	00000000 	andeq	r0, r0, r0

200017ac <s_nSysTickMillis>:
200017ac:	00000000 	andeq	r0, r0, r0

200017b0 <s_nAddress>:
200017b0:	00000000 	andeq	r0, r0, r0

200017b4 <s_TxBuffer>:
	...

Disassembly of section .heap:

2000a000 <heap_low>:
	...

Disassembly of section .stack:

2000b000 <_sp-0x1000>:
	...
