
build_gd32/main.elf:     file format elf32-littlearm


Disassembly of section .vectors:

08000000 <__gVectors>:
 8000000:	2000c000 	andcs	ip, r0, r0
 8000004:	08000165 	stmdaeq	r0, {r0, r2, r5, r6, r8}
 8000008:	08000555 	stmdaeq	r0, {r0, r2, r4, r6, r8, sl}
 800000c:	08000555 	stmdaeq	r0, {r0, r2, r4, r6, r8, sl}
 8000010:	08000555 	stmdaeq	r0, {r0, r2, r4, r6, r8, sl}
 8000014:	08000555 	stmdaeq	r0, {r0, r2, r4, r6, r8, sl}
 8000018:	08000555 	stmdaeq	r0, {r0, r2, r4, r6, r8, sl}
	...
 800002c:	08000555 	stmdaeq	r0, {r0, r2, r4, r6, r8, sl}
 8000030:	08000555 	stmdaeq	r0, {r0, r2, r4, r6, r8, sl}
 8000034:	00000000 	andeq	r0, r0, r0
 8000038:	08000555 	stmdaeq	r0, {r0, r2, r4, r6, r8, sl}
 800003c:	08007fd5 	stmdaeq	r0, {r0, r2, r4, r6, r7, r8, r9, sl, fp, ip, sp, lr}
 8000040:	08000555 	stmdaeq	r0, {r0, r2, r4, r6, r8, sl}
 8000044:	08000555 	stmdaeq	r0, {r0, r2, r4, r6, r8, sl}
 8000048:	08000555 	stmdaeq	r0, {r0, r2, r4, r6, r8, sl}
 800004c:	08000555 	stmdaeq	r0, {r0, r2, r4, r6, r8, sl}
 8000050:	08000555 	stmdaeq	r0, {r0, r2, r4, r6, r8, sl}
 8000054:	08000555 	stmdaeq	r0, {r0, r2, r4, r6, r8, sl}
 8000058:	08000555 	stmdaeq	r0, {r0, r2, r4, r6, r8, sl}
 800005c:	08000555 	stmdaeq	r0, {r0, r2, r4, r6, r8, sl}
 8000060:	08000555 	stmdaeq	r0, {r0, r2, r4, r6, r8, sl}
 8000064:	08000555 	stmdaeq	r0, {r0, r2, r4, r6, r8, sl}
 8000068:	08000555 	stmdaeq	r0, {r0, r2, r4, r6, r8, sl}
 800006c:	08000555 	stmdaeq	r0, {r0, r2, r4, r6, r8, sl}
 8000070:	08000555 	stmdaeq	r0, {r0, r2, r4, r6, r8, sl}
 8000074:	08000555 	stmdaeq	r0, {r0, r2, r4, r6, r8, sl}
 8000078:	08000555 	stmdaeq	r0, {r0, r2, r4, r6, r8, sl}
 800007c:	08000555 	stmdaeq	r0, {r0, r2, r4, r6, r8, sl}
 8000080:	08000555 	stmdaeq	r0, {r0, r2, r4, r6, r8, sl}
 8000084:	08000555 	stmdaeq	r0, {r0, r2, r4, r6, r8, sl}
 8000088:	08000555 	stmdaeq	r0, {r0, r2, r4, r6, r8, sl}
 800008c:	08000555 	stmdaeq	r0, {r0, r2, r4, r6, r8, sl}
 8000090:	08000555 	stmdaeq	r0, {r0, r2, r4, r6, r8, sl}
 8000094:	08000555 	stmdaeq	r0, {r0, r2, r4, r6, r8, sl}
 8000098:	08000555 	stmdaeq	r0, {r0, r2, r4, r6, r8, sl}
 800009c:	08000555 	stmdaeq	r0, {r0, r2, r4, r6, r8, sl}
 80000a0:	08000555 	stmdaeq	r0, {r0, r2, r4, r6, r8, sl}
 80000a4:	08000555 	stmdaeq	r0, {r0, r2, r4, r6, r8, sl}
 80000a8:	08000555 	stmdaeq	r0, {r0, r2, r4, r6, r8, sl}
 80000ac:	08000555 	stmdaeq	r0, {r0, r2, r4, r6, r8, sl}
 80000b0:	08002c35 	stmdaeq	r0, {r0, r2, r4, r5, sl, fp, sp}
 80000b4:	08002ced 	stmdaeq	r0, {r0, r2, r3, r5, r6, r7, sl, fp, sp}
 80000b8:	08002d3d 	stmdaeq	r0, {r0, r2, r3, r4, r5, r8, sl, fp, sp}
 80000bc:	08000555 	stmdaeq	r0, {r0, r2, r4, r6, r8, sl}
 80000c0:	08000555 	stmdaeq	r0, {r0, r2, r4, r6, r8, sl}
 80000c4:	08000555 	stmdaeq	r0, {r0, r2, r4, r6, r8, sl}
 80000c8:	08000555 	stmdaeq	r0, {r0, r2, r4, r6, r8, sl}
 80000cc:	08000555 	stmdaeq	r0, {r0, r2, r4, r6, r8, sl}
 80000d0:	08000555 	stmdaeq	r0, {r0, r2, r4, r6, r8, sl}
 80000d4:	00000000 	andeq	r0, r0, r0
 80000d8:	08000555 	stmdaeq	r0, {r0, r2, r4, r6, r8, sl}
 80000dc:	080029e1 	stmdaeq	r0, {r0, r5, r6, r7, r8, fp, sp}
 80000e0:	08000555 	stmdaeq	r0, {r0, r2, r4, r6, r8, sl}
 80000e4:	08000555 	stmdaeq	r0, {r0, r2, r4, r6, r8, sl}
 80000e8:	08000555 	stmdaeq	r0, {r0, r2, r4, r6, r8, sl}
 80000ec:	08000555 	stmdaeq	r0, {r0, r2, r4, r6, r8, sl}
 80000f0:	08000555 	stmdaeq	r0, {r0, r2, r4, r6, r8, sl}
 80000f4:	08000555 	stmdaeq	r0, {r0, r2, r4, r6, r8, sl}
 80000f8:	08000555 	stmdaeq	r0, {r0, r2, r4, r6, r8, sl}
 80000fc:	08000555 	stmdaeq	r0, {r0, r2, r4, r6, r8, sl}
 8000100:	08000555 	stmdaeq	r0, {r0, r2, r4, r6, r8, sl}
 8000104:	08000555 	stmdaeq	r0, {r0, r2, r4, r6, r8, sl}
 8000108:	08000555 	stmdaeq	r0, {r0, r2, r4, r6, r8, sl}
 800010c:	08000555 	stmdaeq	r0, {r0, r2, r4, r6, r8, sl}
 8000110:	08000555 	stmdaeq	r0, {r0, r2, r4, r6, r8, sl}
 8000114:	08000555 	stmdaeq	r0, {r0, r2, r4, r6, r8, sl}
 8000118:	08000555 	stmdaeq	r0, {r0, r2, r4, r6, r8, sl}
 800011c:	08002d5d 	stmdaeq	r0, {r0, r2, r3, r4, r6, r8, sl, fp, sp}
 8000120:	08000555 	stmdaeq	r0, {r0, r2, r4, r6, r8, sl}
 8000124:	08000555 	stmdaeq	r0, {r0, r2, r4, r6, r8, sl}
 8000128:	08000555 	stmdaeq	r0, {r0, r2, r4, r6, r8, sl}
 800012c:	08000555 	stmdaeq	r0, {r0, r2, r4, r6, r8, sl}

Disassembly of section .text:

08000130 <console_init>:
 8000130:	b508      	push	{r3, lr}
 8000132:	f007 fedf 	bl	8007ef4 <uart0_init>
 8000136:	4804      	ldr	r0, [pc, #16]	; (8000148 <console_init+0x18>)
 8000138:	f007 ff0c 	bl	8007f54 <uart0_puts>
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <console_init+0x1c>)
 800013e:	f007 ff09 	bl	8007f54 <uart0_puts>
 8000142:	2000      	movs	r0, #0
 8000144:	bd08      	pop	{r3, pc}
 8000146:	bf00      	nop
 8000148:	0800ac04 	stmdaeq	r0, {r2, sl, fp, sp, pc}
 800014c:	0800ac0a 	stmdaeq	r0, {r1, r3, sl, fp, sp, pc}
 8000150:	0800ad50 	stmdaeq	r0, {r4, r6, r8, sl, fp, sp, pc}
 8000154:	20000000 	andcs	r0, r0, r0
 8000158:	200000e4 	andcs	r0, r0, r4, ror #1
 800015c:	200000e8 	andcs	r0, r0, r8, ror #1
 8000160:	2000781c 	andcs	r7, r0, ip, lsl r8

08000164 <Reset_Handler>:
 8000164:	2100      	movs	r1, #0
 8000166:	e003      	b.n	8000170 <DataInit>

08000168 <CopyData>:
 8000168:	4b0a      	ldr	r3, [pc, #40]	; (8000194 <Zerobss+0x10>)
 800016a:	585b      	ldr	r3, [r3, r1]
 800016c:	5043      	str	r3, [r0, r1]
 800016e:	3104      	adds	r1, #4

08000170 <DataInit>:
 8000170:	4809      	ldr	r0, [pc, #36]	; (8000198 <Zerobss+0x14>)
 8000172:	4b0a      	ldr	r3, [pc, #40]	; (800019c <Zerobss+0x18>)
 8000174:	1842      	adds	r2, r0, r1
 8000176:	429a      	cmp	r2, r3
 8000178:	d3f6      	bcc.n	8000168 <CopyData>
 800017a:	4a09      	ldr	r2, [pc, #36]	; (80001a0 <Zerobss+0x1c>)
 800017c:	e002      	b.n	8000184 <Zerobss>

0800017e <FillZerobss>:
 800017e:	2300      	movs	r3, #0
 8000180:	f842 3b04 	str.w	r3, [r2], #4

08000184 <Zerobss>:
 8000184:	4b07      	ldr	r3, [pc, #28]	; (80001a4 <Zerobss+0x20>)
 8000186:	429a      	cmp	r2, r3
 8000188:	d3f9      	bcc.n	800017e <FillZerobss>
 800018a:	f007 ff2b 	bl	8007fe4 <SystemInit>
 800018e:	f000 faeb 	bl	8000768 <main>
 8000192:	4770      	bx	lr
 8000194:	0800ad50 	stmdaeq	r0, {r4, r6, r8, sl, fp, sp, pc}
 8000198:	20000000 	andcs	r0, r0, r0
 800019c:	200000e4 	andcs	r0, r0, r4, ror #1
 80001a0:	200000e8 	andcs	r0, r0, r8, ror #1
 80001a4:	2000781c 	andcs	r7, r0, ip, lsl r8

080001a8 <__aeabi_uldivmod>:
 80001a8:	b953      	cbnz	r3, 80001c0 <__aeabi_uldivmod+0x18>
 80001aa:	b94a      	cbnz	r2, 80001c0 <__aeabi_uldivmod+0x18>
 80001ac:	2900      	cmp	r1, #0
 80001ae:	bf08      	it	eq
 80001b0:	2800      	cmpeq	r0, #0
 80001b2:	bf1c      	itt	ne
 80001b4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001b8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001bc:	f000 b80c 	b.w	80001d8 <__aeabi_idiv0>
 80001c0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001c4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001c8:	f001 fa0c 	bl	80015e4 <__udivmoddi4>
 80001cc:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001d0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001d4:	b004      	add	sp, #16
 80001d6:	4770      	bx	lr

080001d8 <__aeabi_idiv0>:
 80001d8:	4770      	bx	lr
 80001da:	bf00      	nop

080001dc <__aeabi_drsub>:
 80001dc:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001e0:	e002      	b.n	80001e8 <__adddf3>
 80001e2:	bf00      	nop

080001e4 <__aeabi_dsub>:
 80001e4:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e8 <__adddf3>:
 80001e8:	b530      	push	{r4, r5, lr}
 80001ea:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ee:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001f2:	ea94 0f05 	teq	r4, r5
 80001f6:	bf08      	it	eq
 80001f8:	ea90 0f02 	teqeq	r0, r2
 80001fc:	bf1f      	itttt	ne
 80001fe:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000202:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000206:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800020a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020e:	f000 80e2 	beq.w	80003d6 <__adddf3+0x1ee>
 8000212:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000216:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800021a:	bfb8      	it	lt
 800021c:	426d      	neglt	r5, r5
 800021e:	dd0c      	ble.n	800023a <__adddf3+0x52>
 8000220:	442c      	add	r4, r5
 8000222:	ea80 0202 	eor.w	r2, r0, r2
 8000226:	ea81 0303 	eor.w	r3, r1, r3
 800022a:	ea82 0000 	eor.w	r0, r2, r0
 800022e:	ea83 0101 	eor.w	r1, r3, r1
 8000232:	ea80 0202 	eor.w	r2, r0, r2
 8000236:	ea81 0303 	eor.w	r3, r1, r3
 800023a:	2d36      	cmp	r5, #54	; 0x36
 800023c:	bf88      	it	hi
 800023e:	bd30      	pophi	{r4, r5, pc}
 8000240:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000244:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000248:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 800024c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x70>
 8000252:	4240      	negs	r0, r0
 8000254:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000258:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 800025c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000260:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000264:	d002      	beq.n	800026c <__adddf3+0x84>
 8000266:	4252      	negs	r2, r2
 8000268:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800026c:	ea94 0f05 	teq	r4, r5
 8000270:	f000 80a7 	beq.w	80003c2 <__adddf3+0x1da>
 8000274:	f1a4 0401 	sub.w	r4, r4, #1
 8000278:	f1d5 0e20 	rsbs	lr, r5, #32
 800027c:	db0d      	blt.n	800029a <__adddf3+0xb2>
 800027e:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000282:	fa22 f205 	lsr.w	r2, r2, r5
 8000286:	1880      	adds	r0, r0, r2
 8000288:	f141 0100 	adc.w	r1, r1, #0
 800028c:	fa03 f20e 	lsl.w	r2, r3, lr
 8000290:	1880      	adds	r0, r0, r2
 8000292:	fa43 f305 	asr.w	r3, r3, r5
 8000296:	4159      	adcs	r1, r3
 8000298:	e00e      	b.n	80002b8 <__adddf3+0xd0>
 800029a:	f1a5 0520 	sub.w	r5, r5, #32
 800029e:	f10e 0e20 	add.w	lr, lr, #32
 80002a2:	2a01      	cmp	r2, #1
 80002a4:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a8:	bf28      	it	cs
 80002aa:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ae:	fa43 f305 	asr.w	r3, r3, r5
 80002b2:	18c0      	adds	r0, r0, r3
 80002b4:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002bc:	d507      	bpl.n	80002ce <__adddf3+0xe6>
 80002be:	f04f 0e00 	mov.w	lr, #0
 80002c2:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c6:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002ca:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ce:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002d2:	d31b      	bcc.n	800030c <__adddf3+0x124>
 80002d4:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d8:	d30c      	bcc.n	80002f4 <__adddf3+0x10c>
 80002da:	0849      	lsrs	r1, r1, #1
 80002dc:	ea5f 0030 	movs.w	r0, r0, rrx
 80002e0:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e4:	f104 0401 	add.w	r4, r4, #1
 80002e8:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002ec:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002f0:	f080 809a 	bcs.w	8000428 <__adddf3+0x240>
 80002f4:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f8:	bf08      	it	eq
 80002fa:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fe:	f150 0000 	adcs.w	r0, r0, #0
 8000302:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000306:	ea41 0105 	orr.w	r1, r1, r5
 800030a:	bd30      	pop	{r4, r5, pc}
 800030c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000310:	4140      	adcs	r0, r0
 8000312:	eb41 0101 	adc.w	r1, r1, r1
 8000316:	3c01      	subs	r4, #1
 8000318:	bf28      	it	cs
 800031a:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800031e:	d2e9      	bcs.n	80002f4 <__adddf3+0x10c>
 8000320:	f091 0f00 	teq	r1, #0
 8000324:	bf04      	itt	eq
 8000326:	4601      	moveq	r1, r0
 8000328:	2000      	moveq	r0, #0
 800032a:	fab1 f381 	clz	r3, r1
 800032e:	bf08      	it	eq
 8000330:	3320      	addeq	r3, #32
 8000332:	f1a3 030b 	sub.w	r3, r3, #11
 8000336:	f1b3 0220 	subs.w	r2, r3, #32
 800033a:	da0c      	bge.n	8000356 <__adddf3+0x16e>
 800033c:	320c      	adds	r2, #12
 800033e:	dd08      	ble.n	8000352 <__adddf3+0x16a>
 8000340:	f102 0c14 	add.w	ip, r2, #20
 8000344:	f1c2 020c 	rsb	r2, r2, #12
 8000348:	fa01 f00c 	lsl.w	r0, r1, ip
 800034c:	fa21 f102 	lsr.w	r1, r1, r2
 8000350:	e00c      	b.n	800036c <__adddf3+0x184>
 8000352:	f102 0214 	add.w	r2, r2, #20
 8000356:	bfd8      	it	le
 8000358:	f1c2 0c20 	rsble	ip, r2, #32
 800035c:	fa01 f102 	lsl.w	r1, r1, r2
 8000360:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000364:	bfdc      	itt	le
 8000366:	ea41 010c 	orrle.w	r1, r1, ip
 800036a:	4090      	lslle	r0, r2
 800036c:	1ae4      	subs	r4, r4, r3
 800036e:	bfa2      	ittt	ge
 8000370:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000374:	4329      	orrge	r1, r5
 8000376:	bd30      	popge	{r4, r5, pc}
 8000378:	ea6f 0404 	mvn.w	r4, r4
 800037c:	3c1f      	subs	r4, #31
 800037e:	da1c      	bge.n	80003ba <__adddf3+0x1d2>
 8000380:	340c      	adds	r4, #12
 8000382:	dc0e      	bgt.n	80003a2 <__adddf3+0x1ba>
 8000384:	f104 0414 	add.w	r4, r4, #20
 8000388:	f1c4 0220 	rsb	r2, r4, #32
 800038c:	fa20 f004 	lsr.w	r0, r0, r4
 8000390:	fa01 f302 	lsl.w	r3, r1, r2
 8000394:	ea40 0003 	orr.w	r0, r0, r3
 8000398:	fa21 f304 	lsr.w	r3, r1, r4
 800039c:	ea45 0103 	orr.w	r1, r5, r3
 80003a0:	bd30      	pop	{r4, r5, pc}
 80003a2:	f1c4 040c 	rsb	r4, r4, #12
 80003a6:	f1c4 0220 	rsb	r2, r4, #32
 80003aa:	fa20 f002 	lsr.w	r0, r0, r2
 80003ae:	fa01 f304 	lsl.w	r3, r1, r4
 80003b2:	ea40 0003 	orr.w	r0, r0, r3
 80003b6:	4629      	mov	r1, r5
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	fa21 f004 	lsr.w	r0, r1, r4
 80003be:	4629      	mov	r1, r5
 80003c0:	bd30      	pop	{r4, r5, pc}
 80003c2:	f094 0f00 	teq	r4, #0
 80003c6:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003ca:	bf06      	itte	eq
 80003cc:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003d0:	3401      	addeq	r4, #1
 80003d2:	3d01      	subne	r5, #1
 80003d4:	e74e      	b.n	8000274 <__adddf3+0x8c>
 80003d6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003da:	bf18      	it	ne
 80003dc:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003e0:	d029      	beq.n	8000436 <__adddf3+0x24e>
 80003e2:	ea94 0f05 	teq	r4, r5
 80003e6:	bf08      	it	eq
 80003e8:	ea90 0f02 	teqeq	r0, r2
 80003ec:	d005      	beq.n	80003fa <__adddf3+0x212>
 80003ee:	ea54 0c00 	orrs.w	ip, r4, r0
 80003f2:	bf04      	itt	eq
 80003f4:	4619      	moveq	r1, r3
 80003f6:	4610      	moveq	r0, r2
 80003f8:	bd30      	pop	{r4, r5, pc}
 80003fa:	ea91 0f03 	teq	r1, r3
 80003fe:	bf1e      	ittt	ne
 8000400:	2100      	movne	r1, #0
 8000402:	2000      	movne	r0, #0
 8000404:	bd30      	popne	{r4, r5, pc}
 8000406:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800040a:	d105      	bne.n	8000418 <__adddf3+0x230>
 800040c:	0040      	lsls	r0, r0, #1
 800040e:	4149      	adcs	r1, r1
 8000410:	bf28      	it	cs
 8000412:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000416:	bd30      	pop	{r4, r5, pc}
 8000418:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800041c:	bf3c      	itt	cc
 800041e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000422:	bd30      	popcc	{r4, r5, pc}
 8000424:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000428:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 800042c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000430:	f04f 0000 	mov.w	r0, #0
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800043a:	bf1a      	itte	ne
 800043c:	4619      	movne	r1, r3
 800043e:	4610      	movne	r0, r2
 8000440:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000444:	bf1c      	itt	ne
 8000446:	460b      	movne	r3, r1
 8000448:	4602      	movne	r2, r0
 800044a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044e:	bf06      	itte	eq
 8000450:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000454:	ea91 0f03 	teqeq	r1, r3
 8000458:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	bf00      	nop

08000460 <__aeabi_ui2d>:
 8000460:	f090 0f00 	teq	r0, #0
 8000464:	bf04      	itt	eq
 8000466:	2100      	moveq	r1, #0
 8000468:	4770      	bxeq	lr
 800046a:	b530      	push	{r4, r5, lr}
 800046c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000470:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000474:	f04f 0500 	mov.w	r5, #0
 8000478:	f04f 0100 	mov.w	r1, #0
 800047c:	e750      	b.n	8000320 <__adddf3+0x138>
 800047e:	bf00      	nop

08000480 <__aeabi_i2d>:
 8000480:	f090 0f00 	teq	r0, #0
 8000484:	bf04      	itt	eq
 8000486:	2100      	moveq	r1, #0
 8000488:	4770      	bxeq	lr
 800048a:	b530      	push	{r4, r5, lr}
 800048c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000490:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000494:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000498:	bf48      	it	mi
 800049a:	4240      	negmi	r0, r0
 800049c:	f04f 0100 	mov.w	r1, #0
 80004a0:	e73e      	b.n	8000320 <__adddf3+0x138>
 80004a2:	bf00      	nop

080004a4 <__aeabi_f2d>:
 80004a4:	0042      	lsls	r2, r0, #1
 80004a6:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004aa:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ae:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004b2:	bf1f      	itttt	ne
 80004b4:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004bc:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004c0:	4770      	bxne	lr
 80004c2:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004c6:	bf08      	it	eq
 80004c8:	4770      	bxeq	lr
 80004ca:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ce:	bf04      	itt	eq
 80004d0:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d4:	4770      	bxeq	lr
 80004d6:	b530      	push	{r4, r5, lr}
 80004d8:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004dc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e4:	e71c      	b.n	8000320 <__adddf3+0x138>
 80004e6:	bf00      	nop

080004e8 <__aeabi_ul2d>:
 80004e8:	ea50 0201 	orrs.w	r2, r0, r1
 80004ec:	bf08      	it	eq
 80004ee:	4770      	bxeq	lr
 80004f0:	b530      	push	{r4, r5, lr}
 80004f2:	f04f 0500 	mov.w	r5, #0
 80004f6:	e00a      	b.n	800050e <__aeabi_l2d+0x16>

080004f8 <__aeabi_l2d>:
 80004f8:	ea50 0201 	orrs.w	r2, r0, r1
 80004fc:	bf08      	it	eq
 80004fe:	4770      	bxeq	lr
 8000500:	b530      	push	{r4, r5, lr}
 8000502:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000506:	d502      	bpl.n	800050e <__aeabi_l2d+0x16>
 8000508:	4240      	negs	r0, r0
 800050a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000512:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000516:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800051a:	f43f aed8 	beq.w	80002ce <__adddf3+0xe6>
 800051e:	f04f 0203 	mov.w	r2, #3
 8000522:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000526:	bf18      	it	ne
 8000528:	3203      	addne	r2, #3
 800052a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052e:	bf18      	it	ne
 8000530:	3203      	addne	r2, #3
 8000532:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000536:	f1c2 0320 	rsb	r3, r2, #32
 800053a:	fa00 fc03 	lsl.w	ip, r0, r3
 800053e:	fa20 f002 	lsr.w	r0, r0, r2
 8000542:	fa01 fe03 	lsl.w	lr, r1, r3
 8000546:	ea40 000e 	orr.w	r0, r0, lr
 800054a:	fa21 f102 	lsr.w	r1, r1, r2
 800054e:	4414      	add	r4, r2
 8000550:	e6bd      	b.n	80002ce <__adddf3+0xe6>
 8000552:	bf00      	nop

08000554 <ADC0_1_IRQHandler>:
 8000554:	e7fe      	b.n	8000554 <ADC0_1_IRQHandler>

08000556 <FactoryDefaults::~FactoryDefaults()>:
 8000556:	4770      	bx	lr

08000558 <PixelDmxStartStop::~PixelDmxStartStop()>:
 8000558:	4770      	bx	lr
	...

0800055c <PixelDmxStartStop::Start()>:
 800055c:	4b01      	ldr	r3, [pc, #4]	; (8000564 <PixelDmxStartStop::Start()+0x8>)
 800055e:	2204      	movs	r2, #4
 8000560:	611a      	str	r2, [r3, #16]
 8000562:	4770      	bx	lr
 8000564:	40011000 	andmi	r1, r1, r0

08000568 <PixelDmxStartStop::Stop()>:
 8000568:	4b01      	ldr	r3, [pc, #4]	; (8000570 <PixelDmxStartStop::Stop()+0x8>)
 800056a:	2204      	movs	r2, #4
 800056c:	615a      	str	r2, [r3, #20]
 800056e:	4770      	bx	lr
 8000570:	40011000 	andmi	r1, r1, r0

08000574 <Reboot::~Reboot()>:
 8000574:	4770      	bx	lr

08000576 <Reboot::~Reboot()>:
 8000576:	b510      	push	{r4, lr}
 8000578:	4604      	mov	r4, r0
 800057a:	f007 fafa 	bl	8007b72 <operator delete(void*)>
 800057e:	4620      	mov	r0, r4
 8000580:	bd10      	pop	{r4, pc}

08000582 <FactoryDefaults::~FactoryDefaults()>:
 8000582:	b510      	push	{r4, lr}
 8000584:	4604      	mov	r4, r0
 8000586:	f007 faf4 	bl	8007b72 <operator delete(void*)>
 800058a:	4620      	mov	r0, r4
 800058c:	bd10      	pop	{r4, pc}

0800058e <PixelDmxStartStop::~PixelDmxStartStop()>:
 800058e:	b510      	push	{r4, lr}
 8000590:	4604      	mov	r4, r0
 8000592:	f007 faee 	bl	8007b72 <operator delete(void*)>
 8000596:	4620      	mov	r0, r4
 8000598:	bd10      	pop	{r4, pc}
	...

0800059c <RDMResponder::PersonalityUpdate(LightSet*)>:
 800059c:	b570      	push	{r4, r5, r6, lr}
 800059e:	4e0a      	ldr	r6, [pc, #40]	; (80005c8 <RDMResponder::PersonalityUpdate(LightSet*)+0x2c>)
 80005a0:	4604      	mov	r4, r0
 80005a2:	6830      	ldr	r0, [r6, #0]
 80005a4:	4281      	cmp	r1, r0
 80005a6:	460d      	mov	r5, r1
 80005a8:	d007      	beq.n	80005ba <RDMResponder::PersonalityUpdate(LightSet*)+0x1e>
 80005aa:	6803      	ldr	r3, [r0, #0]
 80005ac:	2100      	movs	r1, #0
 80005ae:	68db      	ldr	r3, [r3, #12]
 80005b0:	4798      	blx	r3
 80005b2:	4b06      	ldr	r3, [pc, #24]	; (80005cc <RDMResponder::PersonalityUpdate(LightSet*)+0x30>)
 80005b4:	6035      	str	r5, [r6, #0]
 80005b6:	2200      	movs	r2, #0
 80005b8:	701a      	strb	r2, [r3, #0]
 80005ba:	f894 10a5 	ldrb.w	r1, [r4, #165]	; 0xa5
 80005be:	4620      	mov	r0, r4
 80005c0:	f000 fbf6 	bl	8000db0 <RDMResponder::PersonalityUpdate(unsigned int)>
 80005c4:	bd70      	pop	{r4, r5, r6, pc}
 80005c6:	bf00      	nop
 80005c8:	20000204 	andcs	r0, r0, r4, lsl #4
 80005cc:	20000200 	andcs	r0, r0, r0, lsl #4

080005d0 <FactoryDefaults::Set()>:
 80005d0:	4b02      	ldr	r3, [pc, #8]	; (80005dc <FactoryDefaults::Set()+0xc>)
 80005d2:	210b      	movs	r1, #11
 80005d4:	6818      	ldr	r0, [r3, #0]
 80005d6:	f006 b853 	b.w	8006680 <SpiFlashStore::ResetSetList(spiflashstore::Store)>
 80005da:	bf00      	nop
 80005dc:	200016ac 	andcs	r1, r0, ip, lsr #13

080005e0 <Reboot::Run()>:
 80005e0:	4b01      	ldr	r3, [pc, #4]	; (80005e8 <Reboot::Run()+0x8>)
 80005e2:	6818      	ldr	r0, [r3, #0]
 80005e4:	f005 bf32 	b.w	800644c <WS28xx::Blackout()>
 80005e8:	20000694 	mulcs	r0, r4, r6

080005ec <RDMResponder::DmxStartAddressUpdate()>:
 80005ec:	b508      	push	{r3, lr}
 80005ee:	f890 20a7 	ldrb.w	r2, [r0, #167]	; 0xa7
 80005f2:	f890 10a8 	ldrb.w	r1, [r0, #168]	; 0xa8
 80005f6:	eb01 2102 	add.w	r1, r1, r2, lsl #8
 80005fa:	b289      	uxth	r1, r1
 80005fc:	f000 fbcc 	bl	8000d98 <RDMResponder::DmxStartAddressUpdate(unsigned short)>
 8000600:	bd08      	pop	{r3, pc}

08000602 <Display::ClearLine(unsigned char) [clone .isra.0]>:
 8000602:	b110      	cbz	r0, 800060a <Display::ClearLine(unsigned char) [clone .isra.0]+0x8>
 8000604:	6803      	ldr	r3, [r0, #0]
 8000606:	691b      	ldr	r3, [r3, #16]
 8000608:	4718      	bx	r3
 800060a:	4770      	bx	lr

0800060c <RDMResponder::~RDMResponder()>:
 800060c:	4b0e      	ldr	r3, [pc, #56]	; (8000648 <RDMResponder::~RDMResponder()+0x3c>)
 800060e:	b510      	push	{r4, lr}
 8000610:	4604      	mov	r4, r0
 8000612:	f840 3b88 	str.w	r3, [r0], #136
 8000616:	f002 f877 	bl	8002708 <RDMSubDevices::~RDMSubDevices()>
 800061a:	f104 0080 	add.w	r0, r4, #128	; 0x80
 800061e:	f001 fa39 	bl	8001a94 <RDMSensors::~RDMSensors()>
 8000622:	2300      	movs	r3, #0
 8000624:	2201      	movs	r2, #1
 8000626:	4619      	mov	r1, r3
 8000628:	f104 00cc 	add.w	r0, r4, #204	; 0xcc
 800062c:	f002 fcb6 	bl	8002f9c <Dmx::SetPortDirection(unsigned int, dmx::PortDirection, bool)>
 8000630:	4b06      	ldr	r3, [pc, #24]	; (800064c <RDMResponder::~RDMResponder()+0x40>)
 8000632:	6818      	ldr	r0, [r3, #0]
 8000634:	6803      	ldr	r3, [r0, #0]
 8000636:	2100      	movs	r1, #0
 8000638:	68db      	ldr	r3, [r3, #12]
 800063a:	4798      	blx	r3
 800063c:	4b04      	ldr	r3, [pc, #16]	; (8000650 <RDMResponder::~RDMResponder()+0x44>)
 800063e:	2200      	movs	r2, #0
 8000640:	701a      	strb	r2, [r3, #0]
 8000642:	4620      	mov	r0, r4
 8000644:	bd10      	pop	{r4, pc}
 8000646:	bf00      	nop
 8000648:	08009a78 	stmdaeq	r0, {r3, r4, r5, r6, r9, fp, ip, pc}
 800064c:	20000204 	andcs	r0, r0, r4, lsl #4
 8000650:	20000200 	andcs	r0, r0, r0, lsl #4

08000654 <RDMResponder::~RDMResponder()>:
 8000654:	b510      	push	{r4, lr}
 8000656:	4604      	mov	r4, r0
 8000658:	f7ff ffd8 	bl	800060c <RDMResponder::~RDMResponder()>
 800065c:	4620      	mov	r0, r4
 800065e:	f007 fa88 	bl	8007b72 <operator delete(void*)>
 8000662:	4620      	mov	r0, r4
 8000664:	bd10      	pop	{r4, pc}

08000666 <Display::Printf(unsigned char, char const*, ...)>:
 8000666:	b40c      	push	{r2, r3}
 8000668:	b570      	push	{r4, r5, r6, lr}
 800066a:	6984      	ldr	r4, [r0, #24]
 800066c:	b08a      	sub	sp, #40	; 0x28
 800066e:	4605      	mov	r5, r0
 8000670:	460e      	mov	r6, r1
 8000672:	b174      	cbz	r4, 8000692 <Display::Printf(unsigned char, char const*, ...)+0x2c>
 8000674:	ab0f      	add	r3, sp, #60	; 0x3c
 8000676:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8000678:	9301      	str	r3, [sp, #4]
 800067a:	2120      	movs	r1, #32
 800067c:	a802      	add	r0, sp, #8
 800067e:	f000 ff99 	bl	80015b4 <vsnprintf>
 8000682:	4604      	mov	r4, r0
 8000684:	69a8      	ldr	r0, [r5, #24]
 8000686:	6803      	ldr	r3, [r0, #0]
 8000688:	aa02      	add	r2, sp, #8
 800068a:	69dd      	ldr	r5, [r3, #28]
 800068c:	4631      	mov	r1, r6
 800068e:	b2a3      	uxth	r3, r4
 8000690:	47a8      	blx	r5
 8000692:	4620      	mov	r0, r4
 8000694:	b00a      	add	sp, #40	; 0x28
 8000696:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800069a:	b002      	add	sp, #8
 800069c:	4770      	bx	lr
	...

080006a0 <Display::SetSleep(bool)>:
 80006a0:	b538      	push	{r3, r4, r5, lr}
 80006a2:	4604      	mov	r4, r0
 80006a4:	6980      	ldr	r0, [r0, #24]
 80006a6:	460d      	mov	r5, r1
 80006a8:	b138      	cbz	r0, 80006ba <Display::SetSleep(bool)+0x1a>
 80006aa:	6803      	ldr	r3, [r0, #0]
 80006ac:	7421      	strb	r1, [r4, #16]
 80006ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80006b0:	4798      	blx	r3
 80006b2:	b915      	cbnz	r5, 80006ba <Display::SetSleep(bool)+0x1a>
 80006b4:	4b01      	ldr	r3, [pc, #4]	; (80006bc <Display::SetSleep(bool)+0x1c>)
 80006b6:	681b      	ldr	r3, [r3, #0]
 80006b8:	6063      	str	r3, [r4, #4]
 80006ba:	bd38      	pop	{r3, r4, r5, pc}
 80006bc:	20001814 	andcs	r1, r0, r4, lsl r8

080006c0 <RDMPersonality::RDMPersonality(char const*, LightSet*)>:
 80006c0:	2300      	movs	r3, #0
 80006c2:	b570      	push	{r4, r5, r6, lr}
 80006c4:	4604      	mov	r4, r0
 80006c6:	460e      	mov	r6, r1
 80006c8:	6043      	str	r3, [r0, #4]
 80006ca:	6283      	str	r3, [r0, #40]	; 0x28
 80006cc:	4615      	mov	r5, r2
 80006ce:	b972      	cbnz	r2, 80006ee <RDMPersonality::RDMPersonality(char const*, LightSet*)+0x2e>
 80006d0:	8002      	strh	r2, [r0, #0]
 80006d2:	f104 0208 	add.w	r2, r4, #8
 80006d6:	1e71      	subs	r1, r6, #1
 80006d8:	f104 0028 	add.w	r0, r4, #40	; 0x28
 80006dc:	2300      	movs	r3, #0
 80006de:	62a3      	str	r3, [r4, #40]	; 0x28
 80006e0:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 80006e4:	b10b      	cbz	r3, 80006ea <RDMPersonality::RDMPersonality(char const*, LightSet*)+0x2a>
 80006e6:	4290      	cmp	r0, r2
 80006e8:	d108      	bne.n	80006fc <RDMPersonality::RDMPersonality(char const*, LightSet*)+0x3c>
 80006ea:	4620      	mov	r0, r4
 80006ec:	bd70      	pop	{r4, r5, r6, pc}
 80006ee:	6813      	ldr	r3, [r2, #0]
 80006f0:	4610      	mov	r0, r2
 80006f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80006f4:	4798      	blx	r3
 80006f6:	6065      	str	r5, [r4, #4]
 80006f8:	8020      	strh	r0, [r4, #0]
 80006fa:	e7ea      	b.n	80006d2 <RDMPersonality::RDMPersonality(char const*, LightSet*)+0x12>
 80006fc:	f802 3b01 	strb.w	r3, [r2], #1
 8000700:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000702:	3301      	adds	r3, #1
 8000704:	e7eb      	b.n	80006de <RDMPersonality::RDMPersonality(char const*, LightSet*)+0x1e>
	...

08000708 <display::timeout::gpio_init()>:
 8000708:	b510      	push	{r4, lr}
 800070a:	f240 6003 	movw	r0, #1539	; 0x603
 800070e:	f007 fec9 	bl	80084a4 <rcu_periph_clock_enable>
 8000712:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000716:	4803      	ldr	r0, [pc, #12]	; (8000724 <display::timeout::gpio_init()+0x1c>)
 8000718:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800071c:	2203      	movs	r2, #3
 800071e:	2148      	movs	r1, #72	; 0x48
 8000720:	f007 be28 	b.w	8008374 <gpio_init>
 8000724:	40010c00 	andmi	r0, r1, r0, lsl #24

08000728 <display::timeout::gpio_renew()>:
 8000728:	4b03      	ldr	r3, [pc, #12]	; (8000738 <display::timeout::gpio_renew()+0x10>)
 800072a:	f8d3 0c08 	ldr.w	r0, [r3, #3080]	; 0xc08
 800072e:	f480 4080 	eor.w	r0, r0, #16384	; 0x4000
 8000732:	f3c0 3080 	ubfx	r0, r0, #14, #1
 8000736:	4770      	bx	lr
 8000738:	40010000 	andmi	r0, r1, r0

0800073c <is_config_mode()>:
 800073c:	b508      	push	{r3, lr}
 800073e:	f240 6002 	movw	r0, #1538	; 0x602
 8000742:	f007 feaf 	bl	80084a4 <rcu_periph_clock_enable>
 8000746:	2340      	movs	r3, #64	; 0x40
 8000748:	2203      	movs	r2, #3
 800074a:	4806      	ldr	r0, [pc, #24]	; (8000764 <is_config_mode()+0x28>)
 800074c:	2148      	movs	r1, #72	; 0x48
 800074e:	f007 fe11 	bl	8008374 <gpio_init>
 8000752:	2140      	movs	r1, #64	; 0x40
 8000754:	4803      	ldr	r0, [pc, #12]	; (8000764 <is_config_mode()+0x28>)
 8000756:	f007 fe67 	bl	8008428 <gpio_input_bit_get>
 800075a:	fab0 f080 	clz	r0, r0
 800075e:	0940      	lsrs	r0, r0, #5
 8000760:	bd08      	pop	{r3, pc}
 8000762:	bf00      	nop
 8000764:	40010800 	andmi	r0, r1, r0, lsl #16

08000768 <main>:
 8000768:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800076c:	f5ad 7d63 	sub.w	sp, sp, #908	; 0x38c
 8000770:	a822      	add	r0, sp, #136	; 0x88
 8000772:	f006 ffe7 	bl	8007744 <Hardware::Hardware()>
 8000776:	a81a      	add	r0, sp, #104	; 0x68
 8000778:	f006 fba8 	bl	8006ecc <Network::Network()>
 800077c:	a827      	add	r0, sp, #156	; 0x9c
 800077e:	f006 ff8b 	bl	8007698 <LedBlink::LedBlink()>
 8000782:	a87d      	add	r0, sp, #500	; 0x1f4
 8000784:	f006 fbc8 	bl	8006f18 <DisplayUdf::DisplayUdf()>
 8000788:	4baf      	ldr	r3, [pc, #700]	; (8000a48 <main+0x2e0>)
 800078a:	4ab0      	ldr	r2, [pc, #704]	; (8000a4c <main+0x2e4>)
 800078c:	49b0      	ldr	r1, [pc, #704]	; (8000a50 <main+0x2e8>)
 800078e:	4db1      	ldr	r5, [pc, #708]	; (8000a54 <main+0x2ec>)
 8000790:	a807      	add	r0, sp, #28
 8000792:	f006 ff3b 	bl	800760c <FirmwareVersion::FirmwareVersion(char const*, char const*, char const*)>
 8000796:	a808      	add	r0, sp, #32
 8000798:	f006 fa20 	bl	8006bdc <FlashRom::FlashRom()>
 800079c:	a809      	add	r0, sp, #36	; 0x24
 800079e:	f005 ff49 	bl	8006634 <SpiFlashStore::SpiFlashStore()>
 80007a2:	2101      	movs	r1, #1
 80007a4:	a827      	add	r0, sp, #156	; 0x9c
 80007a6:	f006 ff99 	bl	80076dc <LedBlink::SetMode(ledblink::Mode)>
 80007aa:	f7ff ffc7 	bl	800073c <is_config_mode()>
 80007ae:	2100      	movs	r1, #0
 80007b0:	4606      	mov	r6, r0
 80007b2:	a807      	add	r0, sp, #28
 80007b4:	f006 ff62 	bl	800767c <FirmwareVersion::Print(char const*)>
 80007b8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80007ba:	ac2d      	add	r4, sp, #180	; 0xb4
 80007bc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80007be:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80007c2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80007c6:	a814      	add	r0, sp, #80	; 0x50
 80007c8:	f006 f9fc 	bl	8006bc4 <StoreWS28xxDmx::StoreWS28xxDmx()>
 80007cc:	a914      	add	r1, sp, #80	; 0x50
 80007ce:	a847      	add	r0, sp, #284	; 0x11c
 80007d0:	f004 fb0a 	bl	8004de8 <WS28xxDmxParams::WS28xxDmxParams(WS28xxDmxParamsStore*)>
 80007d4:	a847      	add	r0, sp, #284	; 0x11c
 80007d6:	f004 fb2f 	bl	8004e38 <WS28xxDmxParams::Load()>
 80007da:	b130      	cbz	r0, 80007ea <main+0x82>
 80007dc:	a847      	add	r0, sp, #284	; 0x11c
 80007de:	a92d      	add	r1, sp, #180	; 0xb4
 80007e0:	f004 fb36 	bl	8004e50 <WS28xxDmxParams::Set(PixelDmxConfiguration*)>
 80007e4:	a847      	add	r0, sp, #284	; 0x11c
 80007e6:	f004 fb69 	bl	8004ebc <WS28xxDmxParams::Dump()>
 80007ea:	ab0c      	add	r3, sp, #48	; 0x30
 80007ec:	ac0d      	add	r4, sp, #52	; 0x34
 80007ee:	9300      	str	r3, [sp, #0]
 80007f0:	aa0b      	add	r2, sp, #44	; 0x2c
 80007f2:	ab1e      	add	r3, sp, #120	; 0x78
 80007f4:	2101      	movs	r1, #1
 80007f6:	a82d      	add	r0, sp, #180	; 0xb4
 80007f8:	9401      	str	r4, [sp, #4]
 80007fa:	f004 f8ed 	bl	80049d8 <PixelDmxConfiguration::Validate(unsigned int, unsigned int&, pixeldmxconfiguration::PortInfo&, unsigned int&, unsigned int&)>
 80007fe:	a82d      	add	r0, sp, #180	; 0xb4
 8000800:	f004 f93e 	bl	8004a80 <PixelDmxConfiguration::Dump()>
 8000804:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8000806:	2b01      	cmp	r3, #1
 8000808:	d90a      	bls.n	8000820 <main+0xb8>
 800080a:	9933      	ldr	r1, [sp, #204]	; 0xcc
 800080c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800080e:	ebb2 2f41 	cmp.w	r2, r1, lsl #9
 8000812:	ea4f 2341 	mov.w	r3, r1, lsl #9
 8000816:	bf8c      	ite	hi
 8000818:	23aa      	movhi	r3, #170	; 0xaa
 800081a:	fbb3 f3f2 	udivls	r3, r3, r2
 800081e:	932e      	str	r3, [sp, #184]	; 0xb8
 8000820:	4f8d      	ldr	r7, [pc, #564]	; (8000a58 <main+0x2f0>)
 8000822:	a92d      	add	r1, sp, #180	; 0xb4
 8000824:	a86c      	add	r0, sp, #432	; 0x1b0
 8000826:	f004 fa9d 	bl	8004d64 <WS28xxDmx::WS28xxDmx(PixelDmxConfiguration&)>
 800082a:	4b8c      	ldr	r3, [pc, #560]	; (8000a5c <main+0x2f4>)
 800082c:	930e      	str	r3, [sp, #56]	; 0x38
 800082e:	2203      	movs	r2, #3
 8000830:	2304      	movs	r3, #4
 8000832:	2110      	movs	r1, #16
 8000834:	4638      	mov	r0, r7
 8000836:	f10d 0854 	add.w	r8, sp, #84	; 0x54
 800083a:	f8cd 81e8 	str.w	r8, [sp, #488]	; 0x1e8
 800083e:	f007 fd99 	bl	8008374 <gpio_init>
 8000842:	2304      	movs	r3, #4
 8000844:	617b      	str	r3, [r7, #20]
 8000846:	ac0e      	add	r4, sp, #56	; 0x38
 8000848:	947b      	str	r4, [sp, #492]	; 0x1ec
 800084a:	2101      	movs	r1, #1
 800084c:	f89d 4146 	ldrb.w	r4, [sp, #326]	; 0x146
 8000850:	a80a      	add	r0, sp, #40	; 0x28
 8000852:	f004 fbef 	bl	8005034 <PixelPatterns::PixelPatterns(unsigned int)>
 8000856:	4b82      	ldr	r3, [pc, #520]	; (8000a60 <main+0x2f8>)
 8000858:	2c05      	cmp	r4, #5
 800085a:	601c      	str	r4, [r3, #0]
 800085c:	f340 81e7 	ble.w	8000c2e <main+0x4c6>
 8000860:	4641      	mov	r1, r8
 8000862:	a80f      	add	r0, sp, #60	; 0x3c
 8000864:	f004 f928 	bl	8004ab8 <PixelDmxParamsRdm::PixelDmxParamsRdm(WS28xxDmxStore*)>
 8000868:	a810      	add	r0, sp, #64	; 0x40
 800086a:	f006 f89b 	bl	80069a4 <StoreRDMSensors::StoreRDMSensors()>
 800086e:	a910      	add	r1, sp, #64	; 0x40
 8000870:	a85e      	add	r0, sp, #376	; 0x178
 8000872:	f001 fa2b 	bl	8001ccc <RDMSensorsParams::RDMSensorsParams(RDMSensorsParamsStore*)>
 8000876:	a85e      	add	r0, sp, #376	; 0x178
 8000878:	f001 fa2a 	bl	8001cd0 <RDMSensorsParams::Load()>
 800087c:	b128      	cbz	r0, 800088a <main+0x122>
 800087e:	a85e      	add	r0, sp, #376	; 0x178
 8000880:	f001 fa4a 	bl	8001d18 <RDMSensorsParams::Set()>
 8000884:	a85e      	add	r0, sp, #376	; 0x178
 8000886:	f001 fa2f 	bl	8001ce8 <RDMSensorsParams::Dump()>
 800088a:	a811      	add	r0, sp, #68	; 0x44
 800088c:	f006 f8be 	bl	8006a0c <StoreRDMSubDevices::StoreRDMSubDevices()>
 8000890:	a911      	add	r1, sp, #68	; 0x44
 8000892:	a891      	add	r0, sp, #580	; 0x244
 8000894:	f002 f807 	bl	80028a6 <RDMSubDevicesParams::RDMSubDevicesParams(RDMSubDevicesParamsStore*)>
 8000898:	a891      	add	r0, sp, #580	; 0x244
 800089a:	f002 f806 	bl	80028aa <RDMSubDevicesParams::Load()>
 800089e:	b128      	cbz	r0, 80008ac <main+0x144>
 80008a0:	a891      	add	r0, sp, #580	; 0x244
 80008a2:	f002 f80f 	bl	80028c4 <RDMSubDevicesParams::Set()>
 80008a6:	a891      	add	r0, sp, #580	; 0x244
 80008a8:	f002 f80b 	bl	80028c2 <RDMSubDevicesParams::Dump()>
 80008ac:	982d      	ldr	r0, [sp, #180]	; 0xb4
 80008ae:	f004 fe29 	bl	8005504 <PixelType::GetType(pixel::Type)>
 80008b2:	9005      	str	r0, [sp, #20]
 80008b4:	982f      	ldr	r0, [sp, #188]	; 0xbc
 80008b6:	9d2e      	ldr	r5, [sp, #184]	; 0xb8
 80008b8:	f8dd 80cc 	ldr.w	r8, [sp, #204]	; 0xcc
 80008bc:	f004 fe2e 	bl	800551c <PixelType::GetMap(pixel::Map)>
 80008c0:	9b05      	ldr	r3, [sp, #20]
 80008c2:	4a68      	ldr	r2, [pc, #416]	; (8000a64 <main+0x2fc>)
 80008c4:	9500      	str	r5, [sp, #0]
 80008c6:	e9cd 8001 	strd	r8, r0, [sp, #4]
 80008ca:	211f      	movs	r1, #31
 80008cc:	a835      	add	r0, sp, #212	; 0xd4
 80008ce:	f000 fe59 	bl	8001584 <snprintf>
 80008d2:	202c      	movs	r0, #44	; 0x2c
 80008d4:	f007 f951 	bl	8007b7a <operator new(unsigned int)>
 80008d8:	aa6c      	add	r2, sp, #432	; 0x1b0
 80008da:	a935      	add	r1, sp, #212	; 0xd4
 80008dc:	4605      	mov	r5, r0
 80008de:	f7ff feef 	bl	80006c0 <RDMPersonality::RDMPersonality(char const*, LightSet*)>
 80008e2:	202c      	movs	r0, #44	; 0x2c
 80008e4:	9516      	str	r5, [sp, #88]	; 0x58
 80008e6:	f007 f948 	bl	8007b7a <operator new(unsigned int)>
 80008ea:	495f      	ldr	r1, [pc, #380]	; (8000a68 <main+0x300>)
 80008ec:	aa0f      	add	r2, sp, #60	; 0x3c
 80008ee:	4605      	mov	r5, r0
 80008f0:	f7ff fee6 	bl	80006c0 <RDMPersonality::RDMPersonality(char const*, LightSet*)>
 80008f4:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80008f6:	9517      	str	r5, [sp, #92]	; 0x5c
 80008f8:	a8d8      	add	r0, sp, #864	; 0x360
 80008fa:	f8d3 8004 	ldr.w	r8, [r3, #4]
 80008fe:	ada5      	add	r5, sp, #660	; 0x294
 8000900:	f002 fb7a 	bl	8002ff8 <Dmx::Dmx()>
 8000904:	4b59      	ldr	r3, [pc, #356]	; (8000a6c <main+0x304>)
 8000906:	2202      	movs	r2, #2
 8000908:	a916      	add	r1, sp, #88	; 0x58
 800090a:	4628      	mov	r0, r5
 800090c:	f8c3 8000 	str.w	r8, [r3]
 8000910:	f002 fdb4 	bl	800347c <RDMDeviceResponder::RDMDeviceResponder(RDMPersonality**, unsigned int)>
 8000914:	2101      	movs	r1, #1
 8000916:	a8df      	add	r0, sp, #892	; 0x37c
 8000918:	f002 ff7f 	bl	800381a <RDMHandler::RDMHandler(bool)>
 800091c:	4b54      	ldr	r3, [pc, #336]	; (8000a70 <main+0x308>)
 800091e:	93a5      	str	r3, [sp, #660]	; 0x294
 8000920:	4b54      	ldr	r3, [pc, #336]	; (8000a74 <main+0x30c>)
 8000922:	4628      	mov	r0, r5
 8000924:	601d      	str	r5, [r3, #0]
 8000926:	f002 fe07 	bl	8003538 <RDMDeviceResponder::Init()>
 800092a:	a818      	add	r0, sp, #96	; 0x60
 800092c:	f006 f804 	bl	8006938 <StoreRDMDevice::StoreRDMDevice()>
 8000930:	a918      	add	r1, sp, #96	; 0x60
 8000932:	a852      	add	r0, sp, #328	; 0x148
 8000934:	f002 fd08 	bl	8003348 <RDMDeviceParams::RDMDeviceParams(RDMDeviceParamsStore*)>
 8000938:	a852      	add	r0, sp, #328	; 0x148
 800093a:	f002 fd17 	bl	800336c <RDMDeviceParams::Load()>
 800093e:	b130      	cbz	r0, 800094e <main+0x1e6>
 8000940:	a852      	add	r0, sp, #328	; 0x148
 8000942:	a9a6      	add	r1, sp, #664	; 0x298
 8000944:	f002 fd1d 	bl	8003382 <RDMDeviceParams::Set(RDMDevice*)>
 8000948:	a852      	add	r0, sp, #328	; 0x148
 800094a:	f002 fd52 	bl	80033f2 <RDMDeviceParams::Dump()>
 800094e:	ab19      	add	r3, sp, #100	; 0x64
 8000950:	93c3      	str	r3, [sp, #780]	; 0x30c
 8000952:	ab12      	add	r3, sp, #72	; 0x48
 8000954:	4a48      	ldr	r2, [pc, #288]	; (8000a78 <main+0x310>)
 8000956:	93d7      	str	r3, [sp, #860]	; 0x35c
 8000958:	2301      	movs	r3, #1
 800095a:	9212      	str	r2, [sp, #72]	; 0x48
 800095c:	2100      	movs	r1, #0
 800095e:	461a      	mov	r2, r3
 8000960:	a8d8      	add	r0, sp, #864	; 0x360
 8000962:	f002 fb1b 	bl	8002f9c <Dmx::SetPortDirection(unsigned int, dmx::PortDirection, bool)>
 8000966:	2e00      	cmp	r6, #0
 8000968:	f040 8143 	bne.w	8000bf2 <main+0x48a>
 800096c:	1e23      	subs	r3, r4, #0
 800096e:	bf18      	it	ne
 8000970:	2301      	movne	r3, #1
 8000972:	f8df 8124 	ldr.w	r8, [pc, #292]	; 8000a98 <main+0x330>
 8000976:	4628      	mov	r0, r5
 8000978:	f888 3000 	strb.w	r3, [r8]
 800097c:	f002 fe66 	bl	800364c <RDMDeviceResponder::Print()>
 8000980:	f898 1000 	ldrb.w	r1, [r8]
 8000984:	4a3d      	ldr	r2, [pc, #244]	; (8000a7c <main+0x314>)
 8000986:	4b3e      	ldr	r3, [pc, #248]	; (8000a80 <main+0x318>)
 8000988:	483e      	ldr	r0, [pc, #248]	; (8000a84 <main+0x31c>)
 800098a:	2900      	cmp	r1, #0
 800098c:	bf14      	ite	ne
 800098e:	4611      	movne	r1, r2
 8000990:	4619      	moveq	r1, r3
 8000992:	f000 fde7 	bl	8001564 <printf>
 8000996:	2e00      	cmp	r6, #0
 8000998:	f040 8145 	bne.w	8000c26 <main+0x4be>
 800099c:	a86c      	add	r0, sp, #432	; 0x1b0
 800099e:	f004 fa8f 	bl	8004ec0 <WS28xxDmx::Print()>
 80009a2:	b13c      	cbz	r4, 80009b4 <main+0x24c>
 80009a4:	4620      	mov	r0, r4
 80009a6:	f004 fb65 	bl	8005074 <PixelPatterns::GetName(pixelpatterns::Pattern)>
 80009aa:	4622      	mov	r2, r4
 80009ac:	4601      	mov	r1, r0
 80009ae:	4836      	ldr	r0, [pc, #216]	; (8000a88 <main+0x320>)
 80009b0:	f000 fdd8 	bl	8001564 <printf>
 80009b4:	4935      	ldr	r1, [pc, #212]	; (8000a8c <main+0x324>)
 80009b6:	a87d      	add	r0, sp, #500	; 0x1f4
 80009b8:	f006 fac0 	bl	8006f3c <DisplayUdf::SetTitle(char const*, ...)>
 80009bc:	2203      	movs	r2, #3
 80009be:	2102      	movs	r1, #2
 80009c0:	a87d      	add	r0, sp, #500	; 0x1f4
 80009c2:	f006 fb23 	bl	800700c <DisplayUdf::Set(unsigned char, displayudf::Labels)>
 80009c6:	220d      	movs	r2, #13
 80009c8:	2106      	movs	r1, #6
 80009ca:	a87d      	add	r0, sp, #500	; 0x1f4
 80009cc:	f006 fb1e 	bl	800700c <DisplayUdf::Set(unsigned char, displayudf::Labels)>
 80009d0:	982d      	ldr	r0, [sp, #180]	; 0xb4
 80009d2:	f004 fd97 	bl	8005504 <PixelType::GetType(pixel::Type)>
 80009d6:	9005      	str	r0, [sp, #20]
 80009d8:	982f      	ldr	r0, [sp, #188]	; 0xbc
 80009da:	f8dd 80b8 	ldr.w	r8, [sp, #184]	; 0xb8
 80009de:	f8dd 90cc 	ldr.w	r9, [sp, #204]	; 0xcc
 80009e2:	f004 fd9b 	bl	800551c <PixelType::GetMap(pixel::Map)>
 80009e6:	9b05      	ldr	r3, [sp, #20]
 80009e8:	4a29      	ldr	r2, [pc, #164]	; (8000a90 <main+0x328>)
 80009ea:	f8cd 8000 	str.w	r8, [sp]
 80009ee:	2107      	movs	r1, #7
 80009f0:	e9cd 9001 	strd	r9, r0, [sp, #4]
 80009f4:	a87d      	add	r0, sp, #500	; 0x1f4
 80009f6:	f7ff fe36 	bl	8000666 <Display::Printf(unsigned char, char const*, ...)>
 80009fa:	a813      	add	r0, sp, #76	; 0x4c
 80009fc:	f005 ff40 	bl	8006880 <StoreDisplayUdf::StoreDisplayUdf()>
 8000a00:	a913      	add	r1, sp, #76	; 0x4c
 8000a02:	a83d      	add	r0, sp, #244	; 0xf4
 8000a04:	f006 fb1b 	bl	800703e <DisplayUdfParams::DisplayUdfParams(DisplayUdfParamsStore*)>
 8000a08:	a83d      	add	r0, sp, #244	; 0xf4
 8000a0a:	f006 fb25 	bl	8007058 <DisplayUdfParams::Load()>
 8000a0e:	b130      	cbz	r0, 8000a1e <main+0x2b6>
 8000a10:	a83d      	add	r0, sp, #244	; 0xf4
 8000a12:	a97d      	add	r1, sp, #500	; 0x1f4
 8000a14:	f006 fb2c 	bl	8007070 <DisplayUdfParams::Set(DisplayUdf*)>
 8000a18:	a83d      	add	r0, sp, #244	; 0xf4
 8000a1a:	f006 fb5c 	bl	80070d6 <DisplayUdfParams::Dump()>
 8000a1e:	a87d      	add	r0, sp, #500	; 0x1f4
 8000a20:	f006 faa0 	bl	8006f64 <DisplayUdf::Show()>
 8000a24:	2e00      	cmp	r6, #0
 8000a26:	f000 80e6 	beq.w	8000bf6 <main+0x48e>
 8000a2a:	9883      	ldr	r0, [sp, #524]	; 0x20c
 8000a2c:	2103      	movs	r1, #3
 8000a2e:	f7ff fde8 	bl	8000602 <Display::ClearLine(unsigned char) [clone .isra.0]>
 8000a32:	9883      	ldr	r0, [sp, #524]	; 0x20c
 8000a34:	2104      	movs	r1, #4
 8000a36:	f7ff fde4 	bl	8000602 <Display::ClearLine(unsigned char) [clone .isra.0]>
 8000a3a:	9883      	ldr	r0, [sp, #524]	; 0x20c
 8000a3c:	2800      	cmp	r0, #0
 8000a3e:	d03b      	beq.n	8000ab8 <main+0x350>
 8000a40:	7904      	ldrb	r4, [r0, #4]
 8000a42:	4914      	ldr	r1, [pc, #80]	; (8000a94 <main+0x32c>)
 8000a44:	2300      	movs	r3, #0
 8000a46:	e029      	b.n	8000a9c <main+0x334>
 8000a48:	080096d6 	stmdaeq	r0, {r1, r2, r4, r6, r7, r9, sl, ip, pc}
 8000a4c:	080096df 	stmdaeq	r0, {r0, r1, r2, r3, r4, r6, r7, r9, sl, ip, pc}
 8000a50:	080097ac 	stmdaeq	r0, {r2, r3, r5, r7, r8, r9, sl, ip, pc}
 8000a54:	08009670 	stmdaeq	r0, {r4, r5, r6, r9, sl, ip, pc}
 8000a58:	40011000 	andmi	r1, r1, r0
 8000a5c:	08009788 	stmdaeq	r0, {r3, r7, r8, r9, sl, ip, pc}
 8000a60:	2000068c 	andcs	r0, r0, ip, lsl #13
 8000a64:	080096eb 	stmdaeq	r0, {r0, r1, r3, r5, r6, r7, r9, sl, ip, pc}
 8000a68:	080096fa 	stmdaeq	r0, {r1, r3, r4, r5, r6, r7, r9, sl, ip, pc}
 8000a6c:	20000204 	andcs	r0, r0, r4, lsl #4
 8000a70:	0800975c 	stmdaeq	r0, {r2, r3, r4, r6, r8, r9, sl, ip, pc}
 8000a74:	200001f4 	strdcs	r0, [r0], -r4
 8000a78:	08009774 	stmdaeq	r0, {r2, r4, r5, r6, r8, r9, sl, ip, pc}
 8000a7c:	080096b9 	stmdaeq	r0, {r0, r3, r4, r5, r7, r9, sl, ip, pc}
 8000a80:	080096c2 	stmdaeq	r0, {r1, r6, r7, r9, sl, ip, pc}
 8000a84:	08009706 	stmdaeq	r0, {r1, r2, r8, r9, sl, ip, pc}
 8000a88:	08009712 	stmdaeq	r0, {r1, r4, r8, r9, sl, ip, pc}
 8000a8c:	0800972a 	stmdaeq	r0, {r1, r3, r5, r8, r9, sl, ip, pc}
 8000a90:	08009740 	stmdaeq	r0, {r6, r8, r9, sl, ip, pc}
 8000a94:	080096ca 	stmdaeq	r0, {r1, r3, r6, r7, r9, sl, ip, pc}
 8000a98:	20000208 	andcs	r0, r0, r8, lsl #4
 8000a9c:	429c      	cmp	r4, r3
 8000a9e:	f103 0301 	add.w	r3, r3, #1
 8000aa2:	dd03      	ble.n	8000aac <main+0x344>
 8000aa4:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8000aa8:	2a00      	cmp	r2, #0
 8000aaa:	d1f7      	bne.n	8000a9c <main+0x334>
 8000aac:	6802      	ldr	r2, [r0, #0]
 8000aae:	b2db      	uxtb	r3, r3
 8000ab0:	69d4      	ldr	r4, [r2, #28]
 8000ab2:	4a68      	ldr	r2, [pc, #416]	; (8000c54 <main+0x4ec>)
 8000ab4:	2104      	movs	r1, #4
 8000ab6:	47a0      	blx	r4
 8000ab8:	9883      	ldr	r0, [sp, #524]	; 0x20c
 8000aba:	2105      	movs	r1, #5
 8000abc:	f7ff fda1 	bl	8000602 <Display::ClearLine(unsigned char) [clone .isra.0]>
 8000ac0:	2102      	movs	r1, #2
 8000ac2:	a827      	add	r0, sp, #156	; 0x9c
 8000ac4:	f006 fe0a 	bl	80076dc <LedBlink::SetMode(ledblink::Mode)>
 8000ac8:	2004      	movs	r0, #4
 8000aca:	f007 f856 	bl	8007b7a <operator new(unsigned int)>
 8000ace:	4b62      	ldr	r3, [pc, #392]	; (8000c58 <main+0x4f0>)
 8000ad0:	6003      	str	r3, [r0, #0]
 8000ad2:	9025      	str	r0, [sp, #148]	; 0x94
 8000ad4:	2102      	movs	r1, #2
 8000ad6:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8000ada:	f007 fc21 	bl	8008320 <fwdgt_config>
 8000ade:	2801      	cmp	r0, #1
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2301      	moveq	r3, #1
 8000ae4:	2300      	movne	r3, #0
 8000ae6:	f88d 3098 	strb.w	r3, [sp, #152]	; 0x98
 8000aea:	d101      	bne.n	8000af0 <main+0x388>
 8000aec:	f007 fc08 	bl	8008300 <fwdgt_enable>
 8000af0:	4c5a      	ldr	r4, [pc, #360]	; (8000c5c <main+0x4f4>)
 8000af2:	4e5b      	ldr	r6, [pc, #364]	; (8000c60 <main+0x4f8>)
 8000af4:	f04f 0801 	mov.w	r8, #1
 8000af8:	f007 fc0a 	bl	8008310 <fwdgt_counter_reload>
 8000afc:	4628      	mov	r0, r5
 8000afe:	f000 ff3d 	bl	800197c <RDMResponder::Run()>
 8000b02:	a809      	add	r0, sp, #36	; 0x24
 8000b04:	f005 fe38 	bl	8006778 <SpiFlashStore::Flash()>
 8000b08:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 8000b0a:	b17a      	cbz	r2, 8000b2c <main+0x3c4>
 8000b0c:	6823      	ldr	r3, [r4, #0]
 8000b0e:	992c      	ldr	r1, [sp, #176]	; 0xb0
 8000b10:	1a5b      	subs	r3, r3, r1
 8000b12:	429a      	cmp	r2, r3
 8000b14:	d80a      	bhi.n	8000b2c <main+0x3c4>
 8000b16:	6823      	ldr	r3, [r4, #0]
 8000b18:	932c      	str	r3, [sp, #176]	; 0xb0
 8000b1a:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8000b1c:	2b01      	cmp	r3, #1
 8000b1e:	f083 0201 	eor.w	r2, r3, #1
 8000b22:	922b      	str	r2, [sp, #172]	; 0xac
 8000b24:	bf14      	ite	ne
 8000b26:	f8c7 8010 	strne.w	r8, [r7, #16]
 8000b2a:	617b      	streq	r3, [r7, #20]
 8000b2c:	9a82      	ldr	r2, [sp, #520]	; 0x208
 8000b2e:	b162      	cbz	r2, 8000b4a <main+0x3e2>
 8000b30:	f89d 3204 	ldrb.w	r3, [sp, #516]	; 0x204
 8000b34:	2b00      	cmp	r3, #0
 8000b36:	d170      	bne.n	8000c1a <main+0x4b2>
 8000b38:	6823      	ldr	r3, [r4, #0]
 8000b3a:	997e      	ldr	r1, [sp, #504]	; 0x1f8
 8000b3c:	1a5b      	subs	r3, r3, r1
 8000b3e:	429a      	cmp	r2, r3
 8000b40:	d203      	bcs.n	8000b4a <main+0x3e2>
 8000b42:	2101      	movs	r1, #1
 8000b44:	a87d      	add	r0, sp, #500	; 0x1f4
 8000b46:	f7ff fdab 	bl	80006a0 <Display::SetSleep(bool)>
 8000b4a:	6833      	ldr	r3, [r6, #0]
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	d0d3      	beq.n	8000af8 <main+0x390>
 8000b50:	a80a      	add	r0, sp, #40	; 0x28
 8000b52:	f004 fcaf 	bl	80054b4 <PixelPatterns::Run()>
 8000b56:	e7cd      	b.n	8000af4 <main+0x38c>
 8000b58:	2300      	movs	r3, #0
 8000b5a:	2264      	movs	r2, #100	; 0x64
 8000b5c:	4619      	mov	r1, r3
 8000b5e:	a80a      	add	r0, sp, #40	; 0x28
 8000b60:	f004 fa94 	bl	800508c <PixelPatterns::RainbowCycle(unsigned int, unsigned int, pixelpatterns::Direction)>
 8000b64:	e67c      	b.n	8000860 <main+0xf8>
 8000b66:	2200      	movs	r2, #0
 8000b68:	2364      	movs	r3, #100	; 0x64
 8000b6a:	e9cd 3200 	strd	r3, r2, [sp]
 8000b6e:	4611      	mov	r1, r2
 8000b70:	4b3c      	ldr	r3, [pc, #240]	; (8000c64 <main+0x4fc>)
 8000b72:	a80a      	add	r0, sp, #40	; 0x28
 8000b74:	f004 fa9e 	bl	80050b4 <PixelPatterns::TheaterChase(unsigned int, unsigned int, unsigned int, unsigned int, pixelpatterns::Direction)>
 8000b78:	e672      	b.n	8000860 <main+0xf8>
 8000b7a:	2100      	movs	r1, #0
 8000b7c:	4a39      	ldr	r2, [pc, #228]	; (8000c64 <main+0x4fc>)
 8000b7e:	9100      	str	r1, [sp, #0]
 8000b80:	2364      	movs	r3, #100	; 0x64
 8000b82:	a80a      	add	r0, sp, #40	; 0x28
 8000b84:	f004 fab2 	bl	80050ec <PixelPatterns::ColourWipe(unsigned int, unsigned int, unsigned int, pixelpatterns::Direction)>
 8000b88:	e66a      	b.n	8000860 <main+0xf8>
 8000b8a:	2364      	movs	r3, #100	; 0x64
 8000b8c:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 8000b90:	2100      	movs	r1, #0
 8000b92:	a80a      	add	r0, sp, #40	; 0x28
 8000b94:	f004 fac4 	bl	8005120 <PixelPatterns::Scanner(unsigned int, unsigned int, unsigned int)>
 8000b98:	e662      	b.n	8000860 <main+0xf8>
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	2364      	movs	r3, #100	; 0x64
 8000b9e:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8000ba2:	230a      	movs	r3, #10
 8000ba4:	9300      	str	r3, [sp, #0]
 8000ba6:	4611      	mov	r1, r2
 8000ba8:	4b2e      	ldr	r3, [pc, #184]	; (8000c64 <main+0x4fc>)
 8000baa:	a80a      	add	r0, sp, #40	; 0x28
 8000bac:	f004 faea 	bl	8005184 <PixelPatterns::Fade(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, pixelpatterns::Direction)>
 8000bb0:	e656      	b.n	8000860 <main+0xf8>
 8000bb2:	4b2d      	ldr	r3, [pc, #180]	; (8000c68 <main+0x500>)
 8000bb4:	f8df 90c0 	ldr.w	r9, [pc, #192]	; 8000c78 <main+0x510>
 8000bb8:	f8df a0b0 	ldr.w	sl, [pc, #176]	; 8000c6c <main+0x504>
 8000bbc:	2500      	movs	r5, #0
 8000bbe:	61dd      	str	r5, [r3, #28]
 8000bc0:	46ab      	mov	fp, r5
 8000bc2:	f8d9 3000 	ldr.w	r3, [r9]
 8000bc6:	429d      	cmp	r5, r3
 8000bc8:	d308      	bcc.n	8000bdc <main+0x474>
 8000bca:	f008 fa33 	bl	8009034 <gd32_spi_dma_tx_is_active()>
 8000bce:	2800      	cmp	r0, #0
 8000bd0:	d1fb      	bne.n	8000bca <main+0x462>
 8000bd2:	4b26      	ldr	r3, [pc, #152]	; (8000c6c <main+0x504>)
 8000bd4:	6818      	ldr	r0, [r3, #0]
 8000bd6:	f005 fc1d 	bl	8006414 <WS28xx::Update()>
 8000bda:	e641      	b.n	8000860 <main+0xf8>
 8000bdc:	2300      	movs	r3, #0
 8000bde:	4629      	mov	r1, r5
 8000be0:	f8da 0000 	ldr.w	r0, [sl]
 8000be4:	f8cd b000 	str.w	fp, [sp]
 8000be8:	461a      	mov	r2, r3
 8000bea:	f004 fd17 	bl	800561c <WS28xx::SetPixel(unsigned int, unsigned char, unsigned char, unsigned char)>
 8000bee:	3501      	adds	r5, #1
 8000bf0:	e7e7      	b.n	8000bc2 <main+0x45a>
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	e6bd      	b.n	8000972 <main+0x20a>
 8000bf6:	2c00      	cmp	r4, #0
 8000bf8:	f43f af62 	beq.w	8000ac0 <main+0x358>
 8000bfc:	9883      	ldr	r0, [sp, #524]	; 0x20c
 8000bfe:	2106      	movs	r1, #6
 8000c00:	f7ff fcff 	bl	8000602 <Display::ClearLine(unsigned char) [clone .isra.0]>
 8000c04:	4620      	mov	r0, r4
 8000c06:	f004 fa35 	bl	8005074 <PixelPatterns::GetName(pixelpatterns::Pattern)>
 8000c0a:	4a19      	ldr	r2, [pc, #100]	; (8000c70 <main+0x508>)
 8000c0c:	9400      	str	r4, [sp, #0]
 8000c0e:	4603      	mov	r3, r0
 8000c10:	2106      	movs	r1, #6
 8000c12:	a87d      	add	r0, sp, #500	; 0x1f4
 8000c14:	f7ff fd27 	bl	8000666 <Display::Printf(unsigned char, char const*, ...)>
 8000c18:	e752      	b.n	8000ac0 <main+0x358>
 8000c1a:	f7ff fd85 	bl	8000728 <display::timeout::gpio_renew()>
 8000c1e:	2800      	cmp	r0, #0
 8000c20:	d093      	beq.n	8000b4a <main+0x3e2>
 8000c22:	2100      	movs	r1, #0
 8000c24:	e78e      	b.n	8000b44 <main+0x3dc>
 8000c26:	4813      	ldr	r0, [pc, #76]	; (8000c74 <main+0x50c>)
 8000c28:	f000 fcd4 	bl	80015d4 <puts>
 8000c2c:	e6c2      	b.n	80009b4 <main+0x24c>
 8000c2e:	2c05      	cmp	r4, #5
 8000c30:	f63f ae16 	bhi.w	8000860 <main+0xf8>
 8000c34:	a301      	add	r3, pc, #4	; (adr r3, 8000c3c <main+0x4d4>)
 8000c36:	f853 f024 	ldr.w	pc, [r3, r4, lsl #2]
 8000c3a:	bf00      	nop
 8000c3c:	08000bb3 	stmdaeq	r0, {r0, r1, r4, r5, r7, r8, r9, fp}
 8000c40:	08000b59 	stmdaeq	r0, {r0, r3, r4, r6, r8, r9, fp}
 8000c44:	08000b67 	stmdaeq	r0, {r0, r1, r2, r5, r6, r8, r9, fp}
 8000c48:	08000b7b 	stmdaeq	r0, {r0, r1, r3, r4, r5, r6, r8, r9, fp}
 8000c4c:	08000b8b 	stmdaeq	r0, {r0, r1, r3, r7, r8, r9, fp}
 8000c50:	08000b9b 	stmdaeq	r0, {r0, r1, r3, r4, r7, r8, r9, fp}
 8000c54:	080096ca 	stmdaeq	r0, {r1, r3, r6, r7, r9, sl, ip, pc}
 8000c58:	080097a0 	stmdaeq	r0, {r5, r7, r8, r9, sl, ip, pc}
 8000c5c:	20001814 	andcs	r1, r0, r4, lsl r8
 8000c60:	2000068c 	andcs	r0, r0, ip, lsl #13
 8000c64:	00646464 	rsbeq	r6, r4, r4, ror #8
 8000c68:	20000658 	andcs	r0, r0, r8, asr r6
 8000c6c:	20000684 	andcs	r0, r0, r4, lsl #13
 8000c70:	0800974d 	stmdaeq	r0, {r0, r2, r3, r6, r8, r9, sl, ip, pc}
 8000c74:	080096fa 	stmdaeq	r0, {r1, r3, r4, r5, r6, r7, r9, sl, ip, pc}
 8000c78:	20000680 	andcs	r0, r0, r0, lsl #13

08000c7c <Display::ClearLine(unsigned char) [clone .isra.0]>:
 8000c7c:	b110      	cbz	r0, 8000c84 <Display::ClearLine(unsigned char) [clone .isra.0]+0x8>
 8000c7e:	6803      	ldr	r3, [r0, #0]
 8000c80:	691b      	ldr	r3, [r3, #16]
 8000c82:	4718      	bx	r3
 8000c84:	4770      	bx	lr

08000c86 <Display::TextStatus(char const*)>:
 8000c86:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8000c8a:	4604      	mov	r4, r0
 8000c8c:	6980      	ldr	r0, [r0, #24]
 8000c8e:	460d      	mov	r5, r1
 8000c90:	2800      	cmp	r0, #0
 8000c92:	d032      	beq.n	8000cfa <Display::TextStatus(char const*)+0x74>
 8000c94:	7946      	ldrb	r6, [r0, #5]
 8000c96:	6803      	ldr	r3, [r0, #0]
 8000c98:	f890 8004 	ldrb.w	r8, [r0, #4]
 8000c9c:	6a1b      	ldr	r3, [r3, #32]
 8000c9e:	1e72      	subs	r2, r6, #1
 8000ca0:	b2d2      	uxtb	r2, r2
 8000ca2:	9201      	str	r2, [sp, #4]
 8000ca4:	2100      	movs	r1, #0
 8000ca6:	4798      	blx	r3
 8000ca8:	9a01      	ldr	r2, [sp, #4]
 8000caa:	2700      	movs	r7, #0
 8000cac:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 8000cb0:	45b8      	cmp	r8, r7
 8000cb2:	69a0      	ldr	r0, [r4, #24]
 8000cb4:	d818      	bhi.n	8000ce8 <Display::TextStatus(char const*)+0x62>
 8000cb6:	b118      	cbz	r0, 8000cc0 <Display::TextStatus(char const*)+0x3a>
 8000cb8:	6803      	ldr	r3, [r0, #0]
 8000cba:	2100      	movs	r1, #0
 8000cbc:	6a1b      	ldr	r3, [r3, #32]
 8000cbe:	4798      	blx	r3
 8000cc0:	69a0      	ldr	r0, [r4, #24]
 8000cc2:	b1d0      	cbz	r0, 8000cfa <Display::TextStatus(char const*)+0x74>
 8000cc4:	7901      	ldrb	r1, [r0, #4]
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	5cea      	ldrb	r2, [r5, r3]
 8000cca:	b11a      	cbz	r2, 8000cd4 <Display::TextStatus(char const*)+0x4e>
 8000ccc:	1c5a      	adds	r2, r3, #1
 8000cce:	4299      	cmp	r1, r3
 8000cd0:	4613      	mov	r3, r2
 8000cd2:	dcf9      	bgt.n	8000cc8 <Display::TextStatus(char const*)+0x42>
 8000cd4:	6802      	ldr	r2, [r0, #0]
 8000cd6:	69d4      	ldr	r4, [r2, #28]
 8000cd8:	b2db      	uxtb	r3, r3
 8000cda:	462a      	mov	r2, r5
 8000cdc:	4631      	mov	r1, r6
 8000cde:	46a4      	mov	ip, r4
 8000ce0:	b002      	add	sp, #8
 8000ce2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8000ce6:	4760      	bx	ip
 8000ce8:	b128      	cbz	r0, 8000cf6 <Display::TextStatus(char const*)+0x70>
 8000cea:	6803      	ldr	r3, [r0, #0]
 8000cec:	9201      	str	r2, [sp, #4]
 8000cee:	695b      	ldr	r3, [r3, #20]
 8000cf0:	2120      	movs	r1, #32
 8000cf2:	4798      	blx	r3
 8000cf4:	9a01      	ldr	r2, [sp, #4]
 8000cf6:	3701      	adds	r7, #1
 8000cf8:	e7da      	b.n	8000cb0 <Display::TextStatus(char const*)+0x2a>
 8000cfa:	b002      	add	sp, #8
 8000cfc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08000d00 <PixelDmxParamsRdm::Display(unsigned char const*)>:
 8000d00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000d04:	4d1f      	ldr	r5, [pc, #124]	; (8000d84 <PixelDmxParamsRdm::Display(unsigned char const*)+0x84>)
 8000d06:	7908      	ldrb	r0, [r1, #4]
 8000d08:	682e      	ldr	r6, [r5, #0]
 8000d0a:	b086      	sub	sp, #24
 8000d0c:	460c      	mov	r4, r1
 8000d0e:	bb30      	cbnz	r0, 8000d5e <PixelDmxParamsRdm::Display(unsigned char const*)+0x5e>
 8000d10:	69b0      	ldr	r0, [r6, #24]
 8000d12:	2106      	movs	r1, #6
 8000d14:	f7ff ffb2 	bl	8000c7c <Display::ClearLine(unsigned char) [clone .isra.0]>
 8000d18:	7820      	ldrb	r0, [r4, #0]
 8000d1a:	682e      	ldr	r6, [r5, #0]
 8000d1c:	f004 fbf2 	bl	8005504 <PixelType::GetType(pixel::Type)>
 8000d20:	9005      	str	r0, [sp, #20]
 8000d22:	78e0      	ldrb	r0, [r4, #3]
 8000d24:	7867      	ldrb	r7, [r4, #1]
 8000d26:	f894 8002 	ldrb.w	r8, [r4, #2]
 8000d2a:	f004 fbf7 	bl	800551c <PixelType::GetMap(pixel::Map)>
 8000d2e:	9b05      	ldr	r3, [sp, #20]
 8000d30:	4a15      	ldr	r2, [pc, #84]	; (8000d88 <PixelDmxParamsRdm::Display(unsigned char const*)+0x88>)
 8000d32:	9700      	str	r7, [sp, #0]
 8000d34:	e9cd 8001 	strd	r8, r0, [sp, #4]
 8000d38:	2107      	movs	r1, #7
 8000d3a:	4630      	mov	r0, r6
 8000d3c:	f7ff fc93 	bl	8000666 <Display::Printf(unsigned char, char const*, ...)>
 8000d40:	7963      	ldrb	r3, [r4, #5]
 8000d42:	2bff      	cmp	r3, #255	; 0xff
 8000d44:	4b11      	ldr	r3, [pc, #68]	; (8000d8c <PixelDmxParamsRdm::Display(unsigned char const*)+0x8c>)
 8000d46:	d113      	bne.n	8000d70 <PixelDmxParamsRdm::Display(unsigned char const*)+0x70>
 8000d48:	781a      	ldrb	r2, [r3, #0]
 8000d4a:	b92a      	cbnz	r2, 8000d58 <PixelDmxParamsRdm::Display(unsigned char const*)+0x58>
 8000d4c:	2201      	movs	r2, #1
 8000d4e:	4910      	ldr	r1, [pc, #64]	; (8000d90 <PixelDmxParamsRdm::Display(unsigned char const*)+0x90>)
 8000d50:	6828      	ldr	r0, [r5, #0]
 8000d52:	701a      	strb	r2, [r3, #0]
 8000d54:	f7ff ff97 	bl	8000c86 <Display::TextStatus(char const*)>
 8000d58:	b006      	add	sp, #24
 8000d5a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000d5e:	f004 f989 	bl	8005074 <PixelPatterns::GetName(pixelpatterns::Pattern)>
 8000d62:	4a0c      	ldr	r2, [pc, #48]	; (8000d94 <PixelDmxParamsRdm::Display(unsigned char const*)+0x94>)
 8000d64:	4603      	mov	r3, r0
 8000d66:	2106      	movs	r1, #6
 8000d68:	4630      	mov	r0, r6
 8000d6a:	f7ff fc7c 	bl	8000666 <Display::Printf(unsigned char, char const*, ...)>
 8000d6e:	e7d3      	b.n	8000d18 <PixelDmxParamsRdm::Display(unsigned char const*)+0x18>
 8000d70:	2200      	movs	r2, #0
 8000d72:	701a      	strb	r2, [r3, #0]
 8000d74:	682b      	ldr	r3, [r5, #0]
 8000d76:	6998      	ldr	r0, [r3, #24]
 8000d78:	2108      	movs	r1, #8
 8000d7a:	b006      	add	sp, #24
 8000d7c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8000d80:	f7ff bf7c 	b.w	8000c7c <Display::ClearLine(unsigned char) [clone .isra.0]>
 8000d84:	200016e8 	andcs	r1, r0, r8, ror #13
 8000d88:	080097b6 	stmdaeq	r0, {r1, r2, r4, r5, r7, r8, r9, sl, ip, pc}
 8000d8c:	200000e8 	andcs	r0, r0, r8, ror #1
 8000d90:	080097cb 	stmdaeq	r0, {r0, r1, r3, r6, r7, r8, r9, sl, ip, pc}
 8000d94:	080097b0 	stmdaeq	r0, {r4, r5, r7, r8, r9, sl, ip, pc}

08000d98 <RDMResponder::DmxStartAddressUpdate(unsigned short)>:
 8000d98:	4b01      	ldr	r3, [pc, #4]	; (8000da0 <RDMResponder::DmxStartAddressUpdate(unsigned short)+0x8>)
 8000d9a:	6818      	ldr	r0, [r3, #0]
 8000d9c:	f006 b8e2 	b.w	8006f64 <DisplayUdf::Show()>
 8000da0:	200016e8 	andcs	r1, r0, r8, ror #13

08000da4 <Display::ClearLine(unsigned char) [clone .isra.0]>:
 8000da4:	b110      	cbz	r0, 8000dac <Display::ClearLine(unsigned char) [clone .isra.0]+0x8>
 8000da6:	6803      	ldr	r3, [r0, #0]
 8000da8:	691b      	ldr	r3, [r3, #16]
 8000daa:	4718      	bx	r3
 8000dac:	4770      	bx	lr
	...

08000db0 <RDMResponder::PersonalityUpdate(unsigned int)>:
 8000db0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000db4:	4c32      	ldr	r4, [pc, #200]	; (8000e80 <RDMResponder::PersonalityUpdate(unsigned int)+0xd0>)
 8000db6:	4e33      	ldr	r6, [pc, #204]	; (8000e84 <RDMResponder::PersonalityUpdate(unsigned int)+0xd4>)
 8000db8:	6823      	ldr	r3, [r4, #0]
 8000dba:	b086      	sub	sp, #24
 8000dbc:	6998      	ldr	r0, [r3, #24]
 8000dbe:	460d      	mov	r5, r1
 8000dc0:	2107      	movs	r1, #7
 8000dc2:	f7ff ffef 	bl	8000da4 <Display::ClearLine(unsigned char) [clone .isra.0]>
 8000dc6:	6833      	ldr	r3, [r6, #0]
 8000dc8:	6827      	ldr	r7, [r4, #0]
 8000dca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000dcc:	6818      	ldr	r0, [r3, #0]
 8000dce:	f004 fb99 	bl	8005504 <PixelType::GetType(pixel::Type)>
 8000dd2:	6831      	ldr	r1, [r6, #0]
 8000dd4:	9005      	str	r0, [sp, #20]
 8000dd6:	e9d1 2805 	ldrd	r2, r8, [r1, #20]
 8000dda:	fb02 f608 	mul.w	r6, r2, r8
 8000dde:	6b4a      	ldr	r2, [r1, #52]	; 0x34
 8000de0:	6890      	ldr	r0, [r2, #8]
 8000de2:	f004 fb9b 	bl	800551c <PixelType::GetMap(pixel::Map)>
 8000de6:	9b05      	ldr	r3, [sp, #20]
 8000de8:	4a27      	ldr	r2, [pc, #156]	; (8000e88 <RDMResponder::PersonalityUpdate(unsigned int)+0xd8>)
 8000dea:	9600      	str	r6, [sp, #0]
 8000dec:	e9cd 8001 	strd	r8, r0, [sp, #4]
 8000df0:	2107      	movs	r1, #7
 8000df2:	4638      	mov	r0, r7
 8000df4:	f7ff fc37 	bl	8000666 <Display::Printf(unsigned char, char const*, ...)>
 8000df8:	6820      	ldr	r0, [r4, #0]
 8000dfa:	f006 f8b3 	bl	8006f64 <DisplayUdf::Show()>
 8000dfe:	2d01      	cmp	r5, #1
 8000e00:	d115      	bne.n	8000e2e <RDMResponder::PersonalityUpdate(unsigned int)+0x7e>
 8000e02:	4b22      	ldr	r3, [pc, #136]	; (8000e8c <RDMResponder::PersonalityUpdate(unsigned int)+0xdc>)
 8000e04:	681d      	ldr	r5, [r3, #0]
 8000e06:	b17d      	cbz	r5, 8000e28 <RDMResponder::PersonalityUpdate(unsigned int)+0x78>
 8000e08:	6823      	ldr	r3, [r4, #0]
 8000e0a:	2106      	movs	r1, #6
 8000e0c:	6998      	ldr	r0, [r3, #24]
 8000e0e:	f7ff ffc9 	bl	8000da4 <Display::ClearLine(unsigned char) [clone .isra.0]>
 8000e12:	4628      	mov	r0, r5
 8000e14:	6824      	ldr	r4, [r4, #0]
 8000e16:	f004 f92d 	bl	8005074 <PixelPatterns::GetName(pixelpatterns::Pattern)>
 8000e1a:	4a1d      	ldr	r2, [pc, #116]	; (8000e90 <RDMResponder::PersonalityUpdate(unsigned int)+0xe0>)
 8000e1c:	9500      	str	r5, [sp, #0]
 8000e1e:	4603      	mov	r3, r0
 8000e20:	2106      	movs	r1, #6
 8000e22:	4620      	mov	r0, r4
 8000e24:	f7ff fc1f 	bl	8000666 <Display::Printf(unsigned char, char const*, ...)>
 8000e28:	b006      	add	sp, #24
 8000e2a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000e2e:	2d02      	cmp	r5, #2
 8000e30:	d1fa      	bne.n	8000e28 <RDMResponder::PersonalityUpdate(unsigned int)+0x78>
 8000e32:	6823      	ldr	r3, [r4, #0]
 8000e34:	2103      	movs	r1, #3
 8000e36:	6998      	ldr	r0, [r3, #24]
 8000e38:	f7ff ffb4 	bl	8000da4 <Display::ClearLine(unsigned char) [clone .isra.0]>
 8000e3c:	6823      	ldr	r3, [r4, #0]
 8000e3e:	2104      	movs	r1, #4
 8000e40:	6998      	ldr	r0, [r3, #24]
 8000e42:	f7ff ffaf 	bl	8000da4 <Display::ClearLine(unsigned char) [clone .isra.0]>
 8000e46:	6823      	ldr	r3, [r4, #0]
 8000e48:	6998      	ldr	r0, [r3, #24]
 8000e4a:	b180      	cbz	r0, 8000e6e <RDMResponder::PersonalityUpdate(unsigned int)+0xbe>
 8000e4c:	7905      	ldrb	r5, [r0, #4]
 8000e4e:	4911      	ldr	r1, [pc, #68]	; (8000e94 <RDMResponder::PersonalityUpdate(unsigned int)+0xe4>)
 8000e50:	2300      	movs	r3, #0
 8000e52:	42ab      	cmp	r3, r5
 8000e54:	f103 0301 	add.w	r3, r3, #1
 8000e58:	da03      	bge.n	8000e62 <RDMResponder::PersonalityUpdate(unsigned int)+0xb2>
 8000e5a:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8000e5e:	2a00      	cmp	r2, #0
 8000e60:	d1f7      	bne.n	8000e52 <RDMResponder::PersonalityUpdate(unsigned int)+0xa2>
 8000e62:	6802      	ldr	r2, [r0, #0]
 8000e64:	b2db      	uxtb	r3, r3
 8000e66:	69d5      	ldr	r5, [r2, #28]
 8000e68:	4a0a      	ldr	r2, [pc, #40]	; (8000e94 <RDMResponder::PersonalityUpdate(unsigned int)+0xe4>)
 8000e6a:	2104      	movs	r1, #4
 8000e6c:	47a8      	blx	r5
 8000e6e:	6823      	ldr	r3, [r4, #0]
 8000e70:	6998      	ldr	r0, [r3, #24]
 8000e72:	2105      	movs	r1, #5
 8000e74:	b006      	add	sp, #24
 8000e76:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8000e7a:	f7ff bf93 	b.w	8000da4 <Display::ClearLine(unsigned char) [clone .isra.0]>
 8000e7e:	bf00      	nop
 8000e80:	200016e8 	andcs	r1, r0, r8, ror #13
 8000e84:	20000654 	andcs	r0, r0, r4, asr r6
 8000e88:	08009740 	stmdaeq	r0, {r6, r8, r9, sl, ip, pc}
 8000e8c:	2000068c 	andcs	r0, r0, ip, lsl #13
 8000e90:	0800974d 	stmdaeq	r0, {r0, r2, r3, r6, r8, r9, sl, ip, pc}
 8000e94:	080096ca 	stmdaeq	r0, {r1, r3, r6, r7, r9, sl, ip, pc}

08000e98 <PixelTestPattern::SetPattern(pixelpatterns::Pattern)>:
 8000e98:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000e9a:	2905      	cmp	r1, #5
 8000e9c:	b085      	sub	sp, #20
 8000e9e:	dc4c      	bgt.n	8000f3a <PixelTestPattern::SetPattern(pixelpatterns::Pattern)+0xa2>
 8000ea0:	4b27      	ldr	r3, [pc, #156]	; (8000f40 <PixelTestPattern::SetPattern(pixelpatterns::Pattern)+0xa8>)
 8000ea2:	6019      	str	r1, [r3, #0]
 8000ea4:	2905      	cmp	r1, #5
 8000ea6:	d809      	bhi.n	8000ebc <PixelTestPattern::SetPattern(pixelpatterns::Pattern)+0x24>
 8000ea8:	e8df f001 	tbb	[pc, r1]
 8000eac:	130a032c 	movwne	r0, #41772	; 0xa32c
 8000eb0:	2300211a 	movwcs	r2, #282	; 0x11a
 8000eb4:	2264      	movs	r2, #100	; 0x64
 8000eb6:	4619      	mov	r1, r3
 8000eb8:	f004 f8e8 	bl	800508c <PixelPatterns::RainbowCycle(unsigned int, unsigned int, pixelpatterns::Direction)>
 8000ebc:	2001      	movs	r0, #1
 8000ebe:	e03d      	b.n	8000f3c <PixelTestPattern::SetPattern(pixelpatterns::Pattern)+0xa4>
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	2364      	movs	r3, #100	; 0x64
 8000ec4:	e9cd 3200 	strd	r3, r2, [sp]
 8000ec8:	4611      	mov	r1, r2
 8000eca:	4b1e      	ldr	r3, [pc, #120]	; (8000f44 <PixelTestPattern::SetPattern(pixelpatterns::Pattern)+0xac>)
 8000ecc:	f004 f8f2 	bl	80050b4 <PixelPatterns::TheaterChase(unsigned int, unsigned int, unsigned int, unsigned int, pixelpatterns::Direction)>
 8000ed0:	e7f4      	b.n	8000ebc <PixelTestPattern::SetPattern(pixelpatterns::Pattern)+0x24>
 8000ed2:	2100      	movs	r1, #0
 8000ed4:	4a1b      	ldr	r2, [pc, #108]	; (8000f44 <PixelTestPattern::SetPattern(pixelpatterns::Pattern)+0xac>)
 8000ed6:	9100      	str	r1, [sp, #0]
 8000ed8:	2364      	movs	r3, #100	; 0x64
 8000eda:	f004 f907 	bl	80050ec <PixelPatterns::ColourWipe(unsigned int, unsigned int, unsigned int, pixelpatterns::Direction)>
 8000ede:	e7ed      	b.n	8000ebc <PixelTestPattern::SetPattern(pixelpatterns::Pattern)+0x24>
 8000ee0:	2364      	movs	r3, #100	; 0x64
 8000ee2:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 8000ee6:	2100      	movs	r1, #0
 8000ee8:	f004 f91a 	bl	8005120 <PixelPatterns::Scanner(unsigned int, unsigned int, unsigned int)>
 8000eec:	e7e6      	b.n	8000ebc <PixelTestPattern::SetPattern(pixelpatterns::Pattern)+0x24>
 8000eee:	2200      	movs	r2, #0
 8000ef0:	2364      	movs	r3, #100	; 0x64
 8000ef2:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8000ef6:	230a      	movs	r3, #10
 8000ef8:	9300      	str	r3, [sp, #0]
 8000efa:	4611      	mov	r1, r2
 8000efc:	4b11      	ldr	r3, [pc, #68]	; (8000f44 <PixelTestPattern::SetPattern(pixelpatterns::Pattern)+0xac>)
 8000efe:	f004 f941 	bl	8005184 <PixelPatterns::Fade(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, pixelpatterns::Direction)>
 8000f02:	e7db      	b.n	8000ebc <PixelTestPattern::SetPattern(pixelpatterns::Pattern)+0x24>
 8000f04:	4b10      	ldr	r3, [pc, #64]	; (8000f48 <PixelTestPattern::SetPattern(pixelpatterns::Pattern)+0xb0>)
 8000f06:	4d11      	ldr	r5, [pc, #68]	; (8000f4c <PixelTestPattern::SetPattern(pixelpatterns::Pattern)+0xb4>)
 8000f08:	4e11      	ldr	r6, [pc, #68]	; (8000f50 <PixelTestPattern::SetPattern(pixelpatterns::Pattern)+0xb8>)
 8000f0a:	2400      	movs	r4, #0
 8000f0c:	61dc      	str	r4, [r3, #28]
 8000f0e:	4627      	mov	r7, r4
 8000f10:	682b      	ldr	r3, [r5, #0]
 8000f12:	429c      	cmp	r4, r3
 8000f14:	d308      	bcc.n	8000f28 <PixelTestPattern::SetPattern(pixelpatterns::Pattern)+0x90>
 8000f16:	f008 f88d 	bl	8009034 <gd32_spi_dma_tx_is_active()>
 8000f1a:	2800      	cmp	r0, #0
 8000f1c:	d1fb      	bne.n	8000f16 <PixelTestPattern::SetPattern(pixelpatterns::Pattern)+0x7e>
 8000f1e:	4b0c      	ldr	r3, [pc, #48]	; (8000f50 <PixelTestPattern::SetPattern(pixelpatterns::Pattern)+0xb8>)
 8000f20:	6818      	ldr	r0, [r3, #0]
 8000f22:	f005 fa77 	bl	8006414 <WS28xx::Update()>
 8000f26:	e7c9      	b.n	8000ebc <PixelTestPattern::SetPattern(pixelpatterns::Pattern)+0x24>
 8000f28:	2300      	movs	r3, #0
 8000f2a:	4621      	mov	r1, r4
 8000f2c:	6830      	ldr	r0, [r6, #0]
 8000f2e:	9700      	str	r7, [sp, #0]
 8000f30:	461a      	mov	r2, r3
 8000f32:	f004 fb73 	bl	800561c <WS28xx::SetPixel(unsigned int, unsigned char, unsigned char, unsigned char)>
 8000f36:	3401      	adds	r4, #1
 8000f38:	e7ea      	b.n	8000f10 <PixelTestPattern::SetPattern(pixelpatterns::Pattern)+0x78>
 8000f3a:	2000      	movs	r0, #0
 8000f3c:	b005      	add	sp, #20
 8000f3e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000f40:	2000068c 	andcs	r0, r0, ip, lsl #13
 8000f44:	00646464 	rsbeq	r6, r4, r4, ror #8
 8000f48:	20000658 	andcs	r0, r0, r8, asr r6
 8000f4c:	20000680 	andcs	r0, r0, r0, lsl #13
 8000f50:	20000684 	andcs	r0, r0, r4, lsl #13

08000f54 <rdm::selftest::Get()>:
 8000f54:	4b01      	ldr	r3, [pc, #4]	; (8000f5c <rdm::selftest::Get()+0x8>)
 8000f56:	7818      	ldrb	r0, [r3, #0]
 8000f58:	4770      	bx	lr
 8000f5a:	bf00      	nop
 8000f5c:	2000068c 	andcs	r0, r0, ip, lsl #13

08000f60 <rdm::selftest::Set(unsigned char)>:
 8000f60:	4b14      	ldr	r3, [pc, #80]	; (8000fb4 <rdm::selftest::Set(unsigned char)+0x54>)
 8000f62:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8000f64:	4601      	mov	r1, r0
 8000f66:	4604      	mov	r4, r0
 8000f68:	6818      	ldr	r0, [r3, #0]
 8000f6a:	f7ff ff95 	bl	8000e98 <PixelTestPattern::SetPattern(pixelpatterns::Pattern)>
 8000f6e:	4605      	mov	r5, r0
 8000f70:	b1b0      	cbz	r0, 8000fa0 <rdm::selftest::Set(unsigned char)+0x40>
 8000f72:	4b11      	ldr	r3, [pc, #68]	; (8000fb8 <rdm::selftest::Set(unsigned char)+0x58>)
 8000f74:	b1bc      	cbz	r4, 8000fa6 <rdm::selftest::Set(unsigned char)+0x46>
 8000f76:	4e11      	ldr	r6, [pc, #68]	; (8000fbc <rdm::selftest::Set(unsigned char)+0x5c>)
 8000f78:	2201      	movs	r2, #1
 8000f7a:	701a      	strb	r2, [r3, #0]
 8000f7c:	6833      	ldr	r3, [r6, #0]
 8000f7e:	6998      	ldr	r0, [r3, #24]
 8000f80:	b118      	cbz	r0, 8000f8a <rdm::selftest::Set(unsigned char)+0x2a>
 8000f82:	6803      	ldr	r3, [r0, #0]
 8000f84:	2106      	movs	r1, #6
 8000f86:	691b      	ldr	r3, [r3, #16]
 8000f88:	4798      	blx	r3
 8000f8a:	4620      	mov	r0, r4
 8000f8c:	6836      	ldr	r6, [r6, #0]
 8000f8e:	f004 f871 	bl	8005074 <PixelPatterns::GetName(pixelpatterns::Pattern)>
 8000f92:	4a0b      	ldr	r2, [pc, #44]	; (8000fc0 <rdm::selftest::Set(unsigned char)+0x60>)
 8000f94:	9400      	str	r4, [sp, #0]
 8000f96:	4603      	mov	r3, r0
 8000f98:	2106      	movs	r1, #6
 8000f9a:	4630      	mov	r0, r6
 8000f9c:	f7ff fb63 	bl	8000666 <Display::Printf(unsigned char, char const*, ...)>
 8000fa0:	4628      	mov	r0, r5
 8000fa2:	b002      	add	sp, #8
 8000fa4:	bd70      	pop	{r4, r5, r6, pc}
 8000fa6:	701c      	strb	r4, [r3, #0]
 8000fa8:	4b06      	ldr	r3, [pc, #24]	; (8000fc4 <rdm::selftest::Set(unsigned char)+0x64>)
 8000faa:	6818      	ldr	r0, [r3, #0]
 8000fac:	f005 ffda 	bl	8006f64 <DisplayUdf::Show()>
 8000fb0:	e7f6      	b.n	8000fa0 <rdm::selftest::Set(unsigned char)+0x40>
 8000fb2:	bf00      	nop
 8000fb4:	20000688 	andcs	r0, r0, r8, lsl #13
 8000fb8:	20000208 	andcs	r0, r0, r8, lsl #4
 8000fbc:	200016ec 	andcs	r1, r0, ip, ror #13
 8000fc0:	0800974d 	stmdaeq	r0, {r0, r2, r3, r6, r8, r9, sl, ip, pc}
 8000fc4:	200016e8 	andcs	r1, r0, r8, ror #13

08000fc8 <rdm::selftest::GetDescription(unsigned char, unsigned int&)>:
 8000fc8:	b510      	push	{r4, lr}
 8000fca:	460c      	mov	r4, r1
 8000fcc:	f004 f852 	bl	8005074 <PixelPatterns::GetName(pixelpatterns::Pattern)>
 8000fd0:	b140      	cbz	r0, 8000fe4 <rdm::selftest::GetDescription(unsigned char, unsigned int&)+0x1c>
 8000fd2:	4602      	mov	r2, r0
 8000fd4:	4613      	mov	r3, r2
 8000fd6:	3201      	adds	r2, #1
 8000fd8:	7819      	ldrb	r1, [r3, #0]
 8000fda:	2900      	cmp	r1, #0
 8000fdc:	d1fa      	bne.n	8000fd4 <rdm::selftest::GetDescription(unsigned char, unsigned int&)+0xc>
 8000fde:	1a1b      	subs	r3, r3, r0
 8000fe0:	6023      	str	r3, [r4, #0]
 8000fe2:	bd10      	pop	{r4, pc}
 8000fe4:	4603      	mov	r3, r0
 8000fe6:	e7fb      	b.n	8000fe0 <rdm::selftest::GetDescription(unsigned char, unsigned int&)+0x18>

08000fe8 <PixelTestPattern::SetPattern(pixelpatterns::Pattern) [clone .isra.0]>:
 8000fe8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000fea:	2905      	cmp	r1, #5
 8000fec:	b085      	sub	sp, #20
 8000fee:	dc18      	bgt.n	8001022 <PixelTestPattern::SetPattern(pixelpatterns::Pattern) [clone .isra.0]+0x3a>
 8000ff0:	4b29      	ldr	r3, [pc, #164]	; (8001098 <PixelTestPattern::SetPattern(pixelpatterns::Pattern) [clone .isra.0]+0xb0>)
 8000ff2:	6019      	str	r1, [r3, #0]
 8000ff4:	2905      	cmp	r1, #5
 8000ff6:	d814      	bhi.n	8001022 <PixelTestPattern::SetPattern(pixelpatterns::Pattern) [clone .isra.0]+0x3a>
 8000ff8:	e8df f001 	tbb	[pc, r1]
 8000ffc:	150b0330 	strne	r0, [fp, #-816]	; 0xfffffcd0
 8001000:	2300251c 	movwcs	r2, #1308	; 0x51c
 8001004:	2264      	movs	r2, #100	; 0x64
 8001006:	4619      	mov	r1, r3
 8001008:	b005      	add	sp, #20
 800100a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800100e:	f004 b83d 	b.w	800508c <PixelPatterns::RainbowCycle(unsigned int, unsigned int, pixelpatterns::Direction)>
 8001012:	2364      	movs	r3, #100	; 0x64
 8001014:	2200      	movs	r2, #0
 8001016:	e9cd 3200 	strd	r3, r2, [sp]
 800101a:	4611      	mov	r1, r2
 800101c:	4b1f      	ldr	r3, [pc, #124]	; (800109c <PixelTestPattern::SetPattern(pixelpatterns::Pattern) [clone .isra.0]+0xb4>)
 800101e:	f004 f849 	bl	80050b4 <PixelPatterns::TheaterChase(unsigned int, unsigned int, unsigned int, unsigned int, pixelpatterns::Direction)>
 8001022:	b005      	add	sp, #20
 8001024:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001026:	2100      	movs	r1, #0
 8001028:	4a1c      	ldr	r2, [pc, #112]	; (800109c <PixelTestPattern::SetPattern(pixelpatterns::Pattern) [clone .isra.0]+0xb4>)
 800102a:	9100      	str	r1, [sp, #0]
 800102c:	2364      	movs	r3, #100	; 0x64
 800102e:	f004 f85d 	bl	80050ec <PixelPatterns::ColourWipe(unsigned int, unsigned int, unsigned int, pixelpatterns::Direction)>
 8001032:	e7f6      	b.n	8001022 <PixelTestPattern::SetPattern(pixelpatterns::Pattern) [clone .isra.0]+0x3a>
 8001034:	2364      	movs	r3, #100	; 0x64
 8001036:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 800103a:	2100      	movs	r1, #0
 800103c:	b005      	add	sp, #20
 800103e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8001042:	f004 b86d 	b.w	8005120 <PixelPatterns::Scanner(unsigned int, unsigned int, unsigned int)>
 8001046:	2200      	movs	r2, #0
 8001048:	2364      	movs	r3, #100	; 0x64
 800104a:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800104e:	230a      	movs	r3, #10
 8001050:	9300      	str	r3, [sp, #0]
 8001052:	4611      	mov	r1, r2
 8001054:	4b11      	ldr	r3, [pc, #68]	; (800109c <PixelTestPattern::SetPattern(pixelpatterns::Pattern) [clone .isra.0]+0xb4>)
 8001056:	f004 f895 	bl	8005184 <PixelPatterns::Fade(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, pixelpatterns::Direction)>
 800105a:	e7e2      	b.n	8001022 <PixelTestPattern::SetPattern(pixelpatterns::Pattern) [clone .isra.0]+0x3a>
 800105c:	4b10      	ldr	r3, [pc, #64]	; (80010a0 <PixelTestPattern::SetPattern(pixelpatterns::Pattern) [clone .isra.0]+0xb8>)
 800105e:	4d11      	ldr	r5, [pc, #68]	; (80010a4 <PixelTestPattern::SetPattern(pixelpatterns::Pattern) [clone .isra.0]+0xbc>)
 8001060:	4e11      	ldr	r6, [pc, #68]	; (80010a8 <PixelTestPattern::SetPattern(pixelpatterns::Pattern) [clone .isra.0]+0xc0>)
 8001062:	2400      	movs	r4, #0
 8001064:	61dc      	str	r4, [r3, #28]
 8001066:	4627      	mov	r7, r4
 8001068:	682b      	ldr	r3, [r5, #0]
 800106a:	429c      	cmp	r4, r3
 800106c:	d30a      	bcc.n	8001084 <PixelTestPattern::SetPattern(pixelpatterns::Pattern) [clone .isra.0]+0x9c>
 800106e:	f007 ffe1 	bl	8009034 <gd32_spi_dma_tx_is_active()>
 8001072:	2800      	cmp	r0, #0
 8001074:	d1fb      	bne.n	800106e <PixelTestPattern::SetPattern(pixelpatterns::Pattern) [clone .isra.0]+0x86>
 8001076:	4b0c      	ldr	r3, [pc, #48]	; (80010a8 <PixelTestPattern::SetPattern(pixelpatterns::Pattern) [clone .isra.0]+0xc0>)
 8001078:	6818      	ldr	r0, [r3, #0]
 800107a:	b005      	add	sp, #20
 800107c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8001080:	f005 b9c8 	b.w	8006414 <WS28xx::Update()>
 8001084:	2300      	movs	r3, #0
 8001086:	4621      	mov	r1, r4
 8001088:	6830      	ldr	r0, [r6, #0]
 800108a:	9700      	str	r7, [sp, #0]
 800108c:	461a      	mov	r2, r3
 800108e:	f004 fac5 	bl	800561c <WS28xx::SetPixel(unsigned int, unsigned char, unsigned char, unsigned char)>
 8001092:	3401      	adds	r4, #1
 8001094:	e7e8      	b.n	8001068 <PixelTestPattern::SetPattern(pixelpatterns::Pattern) [clone .isra.0]+0x80>
 8001096:	bf00      	nop
 8001098:	2000068c 	andcs	r0, r0, ip, lsl #13
 800109c:	00646464 	rsbeq	r6, r4, r4, ror #8
 80010a0:	20000658 	andcs	r0, r0, r8, asr r6
 80010a4:	20000680 	andcs	r0, r0, r0, lsl #13
 80010a8:	20000684 	andcs	r0, r0, r4, lsl #13

080010ac <RDMIdentify::On(rdm::identify::Mode)>:
 80010ac:	29ff      	cmp	r1, #255	; 0xff
 80010ae:	d10d      	bne.n	80010cc <RDMIdentify::On(rdm::identify::Mode)+0x20>
 80010b0:	4b07      	ldr	r3, [pc, #28]	; (80010d0 <RDMIdentify::On(rdm::identify::Mode)+0x24>)
 80010b2:	781a      	ldrb	r2, [r3, #0]
 80010b4:	b952      	cbnz	r2, 80010cc <RDMIdentify::On(rdm::identify::Mode)+0x20>
 80010b6:	2201      	movs	r2, #1
 80010b8:	701a      	strb	r2, [r3, #0]
 80010ba:	4b06      	ldr	r3, [pc, #24]	; (80010d4 <RDMIdentify::On(rdm::identify::Mode)+0x28>)
 80010bc:	681a      	ldr	r2, [r3, #0]
 80010be:	4b06      	ldr	r3, [pc, #24]	; (80010d8 <RDMIdentify::On(rdm::identify::Mode)+0x2c>)
 80010c0:	601a      	str	r2, [r3, #0]
 80010c2:	4b06      	ldr	r3, [pc, #24]	; (80010dc <RDMIdentify::On(rdm::identify::Mode)+0x30>)
 80010c4:	2105      	movs	r1, #5
 80010c6:	6818      	ldr	r0, [r3, #0]
 80010c8:	f7ff bf8e 	b.w	8000fe8 <PixelTestPattern::SetPattern(pixelpatterns::Pattern) [clone .isra.0]>
 80010cc:	4770      	bx	lr
 80010ce:	bf00      	nop
 80010d0:	200000e9 	andcs	r0, r0, r9, ror #1
 80010d4:	2000068c 	andcs	r0, r0, ip, lsl #13
 80010d8:	200000ec 	andcs	r0, r0, ip, ror #1
 80010dc:	20000688 	andcs	r0, r0, r8, lsl #13

080010e0 <RDMIdentify::Off(rdm::identify::Mode)>:
 80010e0:	4b05      	ldr	r3, [pc, #20]	; (80010f8 <RDMIdentify::Off(rdm::identify::Mode)+0x18>)
 80010e2:	781a      	ldrb	r2, [r3, #0]
 80010e4:	b13a      	cbz	r2, 80010f6 <RDMIdentify::Off(rdm::identify::Mode)+0x16>
 80010e6:	2200      	movs	r2, #0
 80010e8:	701a      	strb	r2, [r3, #0]
 80010ea:	4b04      	ldr	r3, [pc, #16]	; (80010fc <RDMIdentify::Off(rdm::identify::Mode)+0x1c>)
 80010ec:	6819      	ldr	r1, [r3, #0]
 80010ee:	4b04      	ldr	r3, [pc, #16]	; (8001100 <RDMIdentify::Off(rdm::identify::Mode)+0x20>)
 80010f0:	6818      	ldr	r0, [r3, #0]
 80010f2:	f7ff bf79 	b.w	8000fe8 <PixelTestPattern::SetPattern(pixelpatterns::Pattern) [clone .isra.0]>
 80010f6:	4770      	bx	lr
 80010f8:	200000e9 	andcs	r0, r0, r9, ror #1
 80010fc:	200000ec 	andcs	r0, r0, ip, ror #1
 8001100:	20000688 	andcs	r0, r0, r8, lsl #13

08001104 <RDMSlotInfo::GetCategoryTextUndefined(unsigned short, unsigned int&)>:
 8001104:	2805      	cmp	r0, #5
 8001106:	d814      	bhi.n	8001132 <RDMSlotInfo::GetCategoryTextUndefined(unsigned short, unsigned int&)+0x2e>
 8001108:	e8df f000 	tbb	[pc, r0]
 800110c:	0a071603 	beq	81c6920 <__exidx_end+0x1bbbd0>
 8001110:	480b100d 	stmdami	fp, {r0, r2, r3, ip}
 8001114:	2304      	movs	r3, #4
 8001116:	600b      	str	r3, [r1, #0]
 8001118:	4770      	bx	lr
 800111a:	480a      	ldr	r0, [pc, #40]	; (8001144 <RDMSlotInfo::GetCategoryTextUndefined(unsigned short, unsigned int&)+0x40>)
 800111c:	230e      	movs	r3, #14
 800111e:	e7fa      	b.n	8001116 <RDMSlotInfo::GetCategoryTextUndefined(unsigned short, unsigned int&)+0x12>
 8001120:	4809      	ldr	r0, [pc, #36]	; (8001148 <RDMSlotInfo::GetCategoryTextUndefined(unsigned short, unsigned int&)+0x44>)
 8001122:	2303      	movs	r3, #3
 8001124:	e7f7      	b.n	8001116 <RDMSlotInfo::GetCategoryTextUndefined(unsigned short, unsigned int&)+0x12>
 8001126:	4809      	ldr	r0, [pc, #36]	; (800114c <RDMSlotInfo::GetCategoryTextUndefined(unsigned short, unsigned int&)+0x48>)
 8001128:	230c      	movs	r3, #12
 800112a:	e7f4      	b.n	8001116 <RDMSlotInfo::GetCategoryTextUndefined(unsigned short, unsigned int&)+0x12>
 800112c:	4808      	ldr	r0, [pc, #32]	; (8001150 <RDMSlotInfo::GetCategoryTextUndefined(unsigned short, unsigned int&)+0x4c>)
 800112e:	2307      	movs	r3, #7
 8001130:	e7f1      	b.n	8001116 <RDMSlotInfo::GetCategoryTextUndefined(unsigned short, unsigned int&)+0x12>
 8001132:	4808      	ldr	r0, [pc, #32]	; (8001154 <RDMSlotInfo::GetCategoryTextUndefined(unsigned short, unsigned int&)+0x50>)
 8001134:	2309      	movs	r3, #9
 8001136:	e7ee      	b.n	8001116 <RDMSlotInfo::GetCategoryTextUndefined(unsigned short, unsigned int&)+0x12>
 8001138:	4807      	ldr	r0, [pc, #28]	; (8001158 <RDMSlotInfo::GetCategoryTextUndefined(unsigned short, unsigned int&)+0x54>)
 800113a:	2305      	movs	r3, #5
 800113c:	e7eb      	b.n	8001116 <RDMSlotInfo::GetCategoryTextUndefined(unsigned short, unsigned int&)+0x12>
 800113e:	bf00      	nop
 8001140:	080097d6 	stmdaeq	r0, {r1, r2, r4, r6, r7, r8, r9, sl, ip, pc}
 8001144:	080097db 	stmdaeq	r0, {r0, r1, r3, r4, r6, r7, r8, r9, sl, ip, pc}
 8001148:	080097ea 	stmdaeq	r0, {r1, r3, r5, r6, r7, r8, r9, sl, ip, pc}
 800114c:	080097ee 	stmdaeq	r0, {r1, r2, r3, r5, r6, r7, r8, r9, sl, ip, pc}
 8001150:	080097fb 	stmdaeq	r0, {r0, r1, r3, r4, r5, r6, r7, r8, r9, sl, ip, pc}
 8001154:	08009803 	stmdaeq	r0, {r0, r1, fp, ip, pc}
 8001158:	080097e4 	stmdaeq	r0, {r2, r5, r6, r7, r8, r9, sl, ip, pc}

0800115c <RDMSoftwareVersion::GetVersion()>:
 800115c:	4800      	ldr	r0, [pc, #0]	; (8001160 <RDMSoftwareVersion::GetVersion()+0x4>)
 800115e:	4770      	bx	lr
 8001160:	0800980d 	stmdaeq	r0, {r0, r2, r3, fp, ip, pc}

08001164 <RDMSoftwareVersion::GetVersionLength()>:
 8001164:	2003      	movs	r0, #3
 8001166:	4770      	bx	lr

08001168 <RDMSoftwareVersion::GetVersionId()>:
 8001168:	4800      	ldr	r0, [pc, #0]	; (800116c <RDMSoftwareVersion::GetVersionId()+0x4>)
 800116a:	4770      	bx	lr
 800116c:	624d9be5 	subvs	r9, sp, #234496	; 0x39400

08001170 <_xputch>:
 8001170:	4603      	mov	r3, r0
 8001172:	b410      	push	{r4}
 8001174:	4c09      	ldr	r4, [pc, #36]	; (800119c <_xputch+0x2c>)
 8001176:	68da      	ldr	r2, [r3, #12]
 8001178:	4608      	mov	r0, r1
 800117a:	6821      	ldr	r1, [r4, #0]
 800117c:	3201      	adds	r2, #1
 800117e:	60da      	str	r2, [r3, #12]
 8001180:	b141      	cbz	r1, 8001194 <_xputch+0x24>
 8001182:	691b      	ldr	r3, [r3, #16]
 8001184:	429a      	cmp	r2, r3
 8001186:	da02      	bge.n	800118e <_xputch+0x1e>
 8001188:	1c4b      	adds	r3, r1, #1
 800118a:	6023      	str	r3, [r4, #0]
 800118c:	7008      	strb	r0, [r1, #0]
 800118e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001192:	4770      	bx	lr
 8001194:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001198:	f006 ba34 	b.w	8007604 <console_putc>
 800119c:	200000f0 	strdcs	r0, [r0], -r0	; <UNPREDICTABLE>

080011a0 <_format_int>:
 80011a0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80011a4:	4698      	mov	r8, r3
 80011a6:	b091      	sub	sp, #68	; 0x44
 80011a8:	ea52 0308 	orrs.w	r3, r2, r8
 80011ac:	4606      	mov	r6, r0
 80011ae:	4617      	mov	r7, r2
 80011b0:	f10d 053f 	add.w	r5, sp, #63	; 0x3f
 80011b4:	d133      	bne.n	800121e <_format_int+0x7e>
 80011b6:	2330      	movs	r3, #48	; 0x30
 80011b8:	f88d 303f 	strb.w	r3, [sp, #63]	; 0x3f
 80011bc:	f10d 043e 	add.w	r4, sp, #62	; 0x3e
 80011c0:	6833      	ldr	r3, [r6, #0]
 80011c2:	07d8      	lsls	r0, r3, #31
 80011c4:	d507      	bpl.n	80011d6 <_format_int+0x36>
 80011c6:	6871      	ldr	r1, [r6, #4]
 80011c8:	466a      	mov	r2, sp
 80011ca:	2030      	movs	r0, #48	; 0x30
 80011cc:	1b2f      	subs	r7, r5, r4
 80011ce:	428f      	cmp	r7, r1
 80011d0:	da01      	bge.n	80011d6 <_format_int+0x36>
 80011d2:	4294      	cmp	r4, r2
 80011d4:	d839      	bhi.n	800124a <_format_int+0xaa>
 80011d6:	0699      	lsls	r1, r3, #26
 80011d8:	d507      	bpl.n	80011ea <_format_int+0x4a>
 80011da:	68b1      	ldr	r1, [r6, #8]
 80011dc:	466a      	mov	r2, sp
 80011de:	2030      	movs	r0, #48	; 0x30
 80011e0:	1b2f      	subs	r7, r5, r4
 80011e2:	428f      	cmp	r7, r1
 80011e4:	da01      	bge.n	80011ea <_format_int+0x4a>
 80011e6:	4294      	cmp	r4, r2
 80011e8:	d832      	bhi.n	8001250 <_format_int+0xb0>
 80011ea:	071a      	lsls	r2, r3, #28
 80011ec:	bf44      	itt	mi
 80011ee:	222d      	movmi	r2, #45	; 0x2d
 80011f0:	f804 2901 	strbmi.w	r2, [r4], #-1
 80011f4:	065b      	lsls	r3, r3, #25
 80011f6:	d407      	bmi.n	8001208 <_format_int+0x68>
 80011f8:	68b2      	ldr	r2, [r6, #8]
 80011fa:	466b      	mov	r3, sp
 80011fc:	2120      	movs	r1, #32
 80011fe:	1b28      	subs	r0, r5, r4
 8001200:	4290      	cmp	r0, r2
 8001202:	da01      	bge.n	8001208 <_format_int+0x68>
 8001204:	429c      	cmp	r4, r3
 8001206:	d826      	bhi.n	8001256 <_format_int+0xb6>
 8001208:	1b2d      	subs	r5, r5, r4
 800120a:	3401      	adds	r4, #1
 800120c:	ab10      	add	r3, sp, #64	; 0x40
 800120e:	429c      	cmp	r4, r3
 8001210:	d324      	bcc.n	800125c <_format_int+0xbc>
 8001212:	68b3      	ldr	r3, [r6, #8]
 8001214:	42ab      	cmp	r3, r5
 8001216:	dc27      	bgt.n	8001268 <_format_int+0xc8>
 8001218:	b011      	add	sp, #68	; 0x44
 800121a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800121e:	462c      	mov	r4, r5
 8001220:	46e9      	mov	r9, sp
 8001222:	4638      	mov	r0, r7
 8001224:	4641      	mov	r1, r8
 8001226:	220a      	movs	r2, #10
 8001228:	2300      	movs	r3, #0
 800122a:	f7fe ffbd 	bl	80001a8 <__aeabi_uldivmod>
 800122e:	3230      	adds	r2, #48	; 0x30
 8001230:	f804 2901 	strb.w	r2, [r4], #-1
 8001234:	463a      	mov	r2, r7
 8001236:	4643      	mov	r3, r8
 8001238:	2a0a      	cmp	r2, #10
 800123a:	f173 0300 	sbcs.w	r3, r3, #0
 800123e:	4607      	mov	r7, r0
 8001240:	4688      	mov	r8, r1
 8001242:	d3bd      	bcc.n	80011c0 <_format_int+0x20>
 8001244:	454c      	cmp	r4, r9
 8001246:	d1ec      	bne.n	8001222 <_format_int+0x82>
 8001248:	e7ba      	b.n	80011c0 <_format_int+0x20>
 800124a:	f804 0901 	strb.w	r0, [r4], #-1
 800124e:	e7bd      	b.n	80011cc <_format_int+0x2c>
 8001250:	f804 0901 	strb.w	r0, [r4], #-1
 8001254:	e7c4      	b.n	80011e0 <_format_int+0x40>
 8001256:	f804 1901 	strb.w	r1, [r4], #-1
 800125a:	e7d0      	b.n	80011fe <_format_int+0x5e>
 800125c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001260:	4630      	mov	r0, r6
 8001262:	f7ff ff85 	bl	8001170 <_xputch>
 8001266:	e7d1      	b.n	800120c <_format_int+0x6c>
 8001268:	2120      	movs	r1, #32
 800126a:	4630      	mov	r0, r6
 800126c:	f7ff ff80 	bl	8001170 <_xputch>
 8001270:	3501      	adds	r5, #1
 8001272:	e7ce      	b.n	8001212 <_format_int+0x72>

08001274 <_format_hex>:
 8001274:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001276:	b091      	sub	sp, #68	; 0x44
 8001278:	6804      	ldr	r4, [r0, #0]
 800127a:	4606      	mov	r6, r0
 800127c:	f10d 023f 	add.w	r2, sp, #63	; 0x3f
 8001280:	bb61      	cbnz	r1, 80012dc <_format_hex+0x68>
 8001282:	2330      	movs	r3, #48	; 0x30
 8001284:	f88d 303f 	strb.w	r3, [sp, #63]	; 0x3f
 8001288:	f10d 033e 	add.w	r3, sp, #62	; 0x3e
 800128c:	07e5      	lsls	r5, r4, #31
 800128e:	d507      	bpl.n	80012a0 <_format_hex+0x2c>
 8001290:	6870      	ldr	r0, [r6, #4]
 8001292:	4669      	mov	r1, sp
 8001294:	2530      	movs	r5, #48	; 0x30
 8001296:	1ad7      	subs	r7, r2, r3
 8001298:	4287      	cmp	r7, r0
 800129a:	da01      	bge.n	80012a0 <_format_hex+0x2c>
 800129c:	428b      	cmp	r3, r1
 800129e:	d831      	bhi.n	8001304 <_format_hex+0x90>
 80012a0:	06a0      	lsls	r0, r4, #26
 80012a2:	d507      	bpl.n	80012b4 <_format_hex+0x40>
 80012a4:	68b0      	ldr	r0, [r6, #8]
 80012a6:	4669      	mov	r1, sp
 80012a8:	2530      	movs	r5, #48	; 0x30
 80012aa:	1ad7      	subs	r7, r2, r3
 80012ac:	4287      	cmp	r7, r0
 80012ae:	da01      	bge.n	80012b4 <_format_hex+0x40>
 80012b0:	428b      	cmp	r3, r1
 80012b2:	d82a      	bhi.n	800130a <_format_hex+0x96>
 80012b4:	0661      	lsls	r1, r4, #25
 80012b6:	d407      	bmi.n	80012c8 <_format_hex+0x54>
 80012b8:	68b0      	ldr	r0, [r6, #8]
 80012ba:	4669      	mov	r1, sp
 80012bc:	2420      	movs	r4, #32
 80012be:	1ad5      	subs	r5, r2, r3
 80012c0:	4285      	cmp	r5, r0
 80012c2:	da01      	bge.n	80012c8 <_format_hex+0x54>
 80012c4:	428b      	cmp	r3, r1
 80012c6:	d823      	bhi.n	8001310 <_format_hex+0x9c>
 80012c8:	1ad5      	subs	r5, r2, r3
 80012ca:	1c5c      	adds	r4, r3, #1
 80012cc:	ab10      	add	r3, sp, #64	; 0x40
 80012ce:	429c      	cmp	r4, r3
 80012d0:	d321      	bcc.n	8001316 <_format_hex+0xa2>
 80012d2:	68b3      	ldr	r3, [r6, #8]
 80012d4:	429d      	cmp	r5, r3
 80012d6:	db24      	blt.n	8001322 <_format_hex+0xae>
 80012d8:	b011      	add	sp, #68	; 0x44
 80012da:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80012dc:	f014 0f02 	tst.w	r4, #2
 80012e0:	bf0c      	ite	eq
 80012e2:	2757      	moveq	r7, #87	; 0x57
 80012e4:	2737      	movne	r7, #55	; 0x37
 80012e6:	4613      	mov	r3, r2
 80012e8:	466d      	mov	r5, sp
 80012ea:	f001 000f 	and.w	r0, r1, #15
 80012ee:	2809      	cmp	r0, #9
 80012f0:	bf94      	ite	ls
 80012f2:	3030      	addls	r0, #48	; 0x30
 80012f4:	19c0      	addhi	r0, r0, r7
 80012f6:	0909      	lsrs	r1, r1, #4
 80012f8:	f803 0901 	strb.w	r0, [r3], #-1
 80012fc:	d0c6      	beq.n	800128c <_format_hex+0x18>
 80012fe:	42ab      	cmp	r3, r5
 8001300:	d1f3      	bne.n	80012ea <_format_hex+0x76>
 8001302:	e7c3      	b.n	800128c <_format_hex+0x18>
 8001304:	f803 5901 	strb.w	r5, [r3], #-1
 8001308:	e7c5      	b.n	8001296 <_format_hex+0x22>
 800130a:	f803 5901 	strb.w	r5, [r3], #-1
 800130e:	e7cc      	b.n	80012aa <_format_hex+0x36>
 8001310:	f803 4901 	strb.w	r4, [r3], #-1
 8001314:	e7d3      	b.n	80012be <_format_hex+0x4a>
 8001316:	f814 1b01 	ldrb.w	r1, [r4], #1
 800131a:	4630      	mov	r0, r6
 800131c:	f7ff ff28 	bl	8001170 <_xputch>
 8001320:	e7d4      	b.n	80012cc <_format_hex+0x58>
 8001322:	2120      	movs	r1, #32
 8001324:	4630      	mov	r0, r6
 8001326:	f7ff ff23 	bl	8001170 <_xputch>
 800132a:	3501      	adds	r5, #1
 800132c:	e7d1      	b.n	80012d2 <_format_hex+0x5e>
	...

08001330 <_vprintf>:
 8001330:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001334:	2700      	movs	r7, #0
 8001336:	b086      	sub	sp, #24
 8001338:	e9cd 7004 	strd	r7, r0, [sp, #16]
 800133c:	4614      	mov	r4, r2
 800133e:	f04f 080a 	mov.w	r8, #10
 8001342:	780b      	ldrb	r3, [r1, #0]
 8001344:	b91b      	cbnz	r3, 800134e <_vprintf+0x1e>
 8001346:	9804      	ldr	r0, [sp, #16]
 8001348:	b006      	add	sp, #24
 800134a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800134e:	2b25      	cmp	r3, #37	; 0x25
 8001350:	f101 0601 	add.w	r6, r1, #1
 8001354:	d005      	beq.n	8001362 <_vprintf+0x32>
 8001356:	4619      	mov	r1, r3
 8001358:	a801      	add	r0, sp, #4
 800135a:	f7ff ff09 	bl	8001170 <_xputch>
 800135e:	4631      	mov	r1, r6
 8001360:	e7ef      	b.n	8001342 <_vprintf+0x12>
 8001362:	784b      	ldrb	r3, [r1, #1]
 8001364:	9703      	str	r7, [sp, #12]
 8001366:	2b30      	cmp	r3, #48	; 0x30
 8001368:	e9cd 7701 	strd	r7, r7, [sp, #4]
 800136c:	d126      	bne.n	80013bc <_vprintf+0x8c>
 800136e:	2320      	movs	r3, #32
 8001370:	9301      	str	r3, [sp, #4]
 8001372:	1c8e      	adds	r6, r1, #2
 8001374:	2200      	movs	r2, #0
 8001376:	4635      	mov	r5, r6
 8001378:	4613      	mov	r3, r2
 800137a:	7829      	ldrb	r1, [r5, #0]
 800137c:	f1a1 0030 	sub.w	r0, r1, #48	; 0x30
 8001380:	2809      	cmp	r0, #9
 8001382:	462e      	mov	r6, r5
 8001384:	f105 0501 	add.w	r5, r5, #1
 8001388:	d91c      	bls.n	80013c4 <_vprintf+0x94>
 800138a:	b12a      	cbz	r2, 8001398 <_vprintf+0x68>
 800138c:	9303      	str	r3, [sp, #12]
 800138e:	b11b      	cbz	r3, 8001398 <_vprintf+0x68>
 8001390:	9b01      	ldr	r3, [sp, #4]
 8001392:	f043 0310 	orr.w	r3, r3, #16
 8001396:	9301      	str	r3, [sp, #4]
 8001398:	292e      	cmp	r1, #46	; 0x2e
 800139a:	d122      	bne.n	80013e2 <_vprintf+0xb2>
 800139c:	7873      	ldrb	r3, [r6, #1]
 800139e:	2b2a      	cmp	r3, #42	; 0x2a
 80013a0:	d014      	beq.n	80013cc <_vprintf+0x9c>
 80013a2:	2100      	movs	r1, #0
 80013a4:	1c70      	adds	r0, r6, #1
 80013a6:	460a      	mov	r2, r1
 80013a8:	7803      	ldrb	r3, [r0, #0]
 80013aa:	3b30      	subs	r3, #48	; 0x30
 80013ac:	2b09      	cmp	r3, #9
 80013ae:	4606      	mov	r6, r0
 80013b0:	f100 0001 	add.w	r0, r0, #1
 80013b4:	d930      	bls.n	8001418 <_vprintf+0xe8>
 80013b6:	b181      	cbz	r1, 80013da <_vprintf+0xaa>
 80013b8:	9202      	str	r2, [sp, #8]
 80013ba:	e00e      	b.n	80013da <_vprintf+0xaa>
 80013bc:	2b2d      	cmp	r3, #45	; 0x2d
 80013be:	d1d9      	bne.n	8001374 <_vprintf+0x44>
 80013c0:	2340      	movs	r3, #64	; 0x40
 80013c2:	e7d5      	b.n	8001370 <_vprintf+0x40>
 80013c4:	fb08 0303 	mla	r3, r8, r3, r0
 80013c8:	2201      	movs	r2, #1
 80013ca:	e7d6      	b.n	800137a <_vprintf+0x4a>
 80013cc:	f854 3b04 	ldr.w	r3, [r4], #4
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	bfb8      	it	lt
 80013d4:	425b      	neglt	r3, r3
 80013d6:	3602      	adds	r6, #2
 80013d8:	9302      	str	r3, [sp, #8]
 80013da:	9b01      	ldr	r3, [sp, #4]
 80013dc:	f043 0301 	orr.w	r3, r3, #1
 80013e0:	9301      	str	r3, [sp, #4]
 80013e2:	7833      	ldrb	r3, [r6, #0]
 80013e4:	2b6c      	cmp	r3, #108	; 0x6c
 80013e6:	bf04      	itt	eq
 80013e8:	3601      	addeq	r6, #1
 80013ea:	9b01      	ldreq	r3, [sp, #4]
 80013ec:	7831      	ldrb	r1, [r6, #0]
 80013ee:	bf04      	itt	eq
 80013f0:	f043 0304 	orreq.w	r3, r3, #4
 80013f4:	9301      	streq	r3, [sp, #4]
 80013f6:	2978      	cmp	r1, #120	; 0x78
 80013f8:	d8ae      	bhi.n	8001358 <_vprintf+0x28>
 80013fa:	296f      	cmp	r1, #111	; 0x6f
 80013fc:	d810      	bhi.n	8001420 <_vprintf+0xf0>
 80013fe:	2963      	cmp	r1, #99	; 0x63
 8001400:	d048      	beq.n	8001494 <_vprintf+0x164>
 8001402:	d827      	bhi.n	8001454 <_vprintf+0x124>
 8001404:	2958      	cmp	r1, #88	; 0x58
 8001406:	d1a7      	bne.n	8001358 <_vprintf+0x28>
 8001408:	9b01      	ldr	r3, [sp, #4]
 800140a:	f043 0302 	orr.w	r3, r3, #2
 800140e:	9301      	str	r3, [sp, #4]
 8001410:	4625      	mov	r5, r4
 8001412:	f855 1b04 	ldr.w	r1, [r5], #4
 8001416:	e056      	b.n	80014c6 <_vprintf+0x196>
 8001418:	fb08 3202 	mla	r2, r8, r2, r3
 800141c:	2101      	movs	r1, #1
 800141e:	e7c3      	b.n	80013a8 <_vprintf+0x78>
 8001420:	f1a1 0370 	sub.w	r3, r1, #112	; 0x70
 8001424:	2b08      	cmp	r3, #8
 8001426:	d897      	bhi.n	8001358 <_vprintf+0x28>
 8001428:	a201      	add	r2, pc, #4	; (adr r2, 8001430 <_vprintf+0x100>)
 800142a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800142e:	bf00      	nop
 8001430:	080014a7 	stmdaeq	r0, {r0, r1, r2, r5, r7, sl, ip}
 8001434:	08001359 	stmdaeq	r0, {r0, r3, r4, r6, r8, r9, ip}
 8001438:	08001359 	stmdaeq	r0, {r0, r3, r4, r6, r8, r9, ip}
 800143c:	080014cf 	stmdaeq	r0, {r0, r1, r2, r3, r6, r7, sl, ip}
 8001440:	08001359 	stmdaeq	r0, {r0, r3, r4, r6, r8, r9, ip}
 8001444:	08001543 	stmdaeq	r0, {r0, r1, r6, r8, sl, ip}
 8001448:	08001359 	stmdaeq	r0, {r0, r3, r4, r6, r8, r9, ip}
 800144c:	08001359 	stmdaeq	r0, {r0, r3, r4, r6, r8, r9, ip}
 8001450:	08001411 	stmdaeq	r0, {r0, r4, sl, ip}
 8001454:	2964      	cmp	r1, #100	; 0x64
 8001456:	d002      	beq.n	800145e <_vprintf+0x12e>
 8001458:	2969      	cmp	r1, #105	; 0x69
 800145a:	f47f af7d 	bne.w	8001358 <_vprintf+0x28>
 800145e:	9901      	ldr	r1, [sp, #4]
 8001460:	074d      	lsls	r5, r1, #29
 8001462:	bf4b      	itete	mi
 8001464:	3407      	addmi	r4, #7
 8001466:	4625      	movpl	r5, r4
 8001468:	f024 0407 	bicmi.w	r4, r4, #7
 800146c:	f855 2b04 	ldrpl.w	r2, [r5], #4
 8001470:	bf45      	ittet	mi
 8001472:	6863      	ldrmi	r3, [r4, #4]
 8001474:	4625      	movmi	r5, r4
 8001476:	17d3      	asrpl	r3, r2, #31
 8001478:	f855 2b08 	ldrmi.w	r2, [r5], #8
 800147c:	2b00      	cmp	r3, #0
 800147e:	da05      	bge.n	800148c <_vprintf+0x15c>
 8001480:	f041 0108 	orr.w	r1, r1, #8
 8001484:	4252      	negs	r2, r2
 8001486:	9101      	str	r1, [sp, #4]
 8001488:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800148c:	a801      	add	r0, sp, #4
 800148e:	f7ff fe87 	bl	80011a0 <_format_int>
 8001492:	e005      	b.n	80014a0 <_vprintf+0x170>
 8001494:	4625      	mov	r5, r4
 8001496:	a801      	add	r0, sp, #4
 8001498:	f855 1b04 	ldr.w	r1, [r5], #4
 800149c:	f7ff fe68 	bl	8001170 <_xputch>
 80014a0:	3601      	adds	r6, #1
 80014a2:	462c      	mov	r4, r5
 80014a4:	e75b      	b.n	800135e <_vprintf+0x2e>
 80014a6:	4625      	mov	r5, r4
 80014a8:	2308      	movs	r3, #8
 80014aa:	f855 4b04 	ldr.w	r4, [r5], #4
 80014ae:	9303      	str	r3, [sp, #12]
 80014b0:	2130      	movs	r1, #48	; 0x30
 80014b2:	2320      	movs	r3, #32
 80014b4:	a801      	add	r0, sp, #4
 80014b6:	9301      	str	r3, [sp, #4]
 80014b8:	f7ff fe5a 	bl	8001170 <_xputch>
 80014bc:	2178      	movs	r1, #120	; 0x78
 80014be:	a801      	add	r0, sp, #4
 80014c0:	f7ff fe56 	bl	8001170 <_xputch>
 80014c4:	4621      	mov	r1, r4
 80014c6:	a801      	add	r0, sp, #4
 80014c8:	f7ff fed4 	bl	8001274 <_format_hex>
 80014cc:	e7e8      	b.n	80014a0 <_vprintf+0x170>
 80014ce:	4625      	mov	r5, r4
 80014d0:	2400      	movs	r4, #0
 80014d2:	f855 9b04 	ldr.w	r9, [r5], #4
 80014d6:	f819 3004 	ldrb.w	r3, [r9, r4]
 80014da:	b993      	cbnz	r3, 8001502 <_vprintf+0x1d2>
 80014dc:	9b01      	ldr	r3, [sp, #4]
 80014de:	07d9      	lsls	r1, r3, #31
 80014e0:	d503      	bpl.n	80014ea <_vprintf+0x1ba>
 80014e2:	9b02      	ldr	r3, [sp, #8]
 80014e4:	429c      	cmp	r4, r3
 80014e6:	bfa8      	it	ge
 80014e8:	461c      	movge	r4, r3
 80014ea:	9b01      	ldr	r3, [sp, #4]
 80014ec:	065a      	lsls	r2, r3, #25
 80014ee:	f104 0a01 	add.w	sl, r4, #1
 80014f2:	d403      	bmi.n	80014fc <_vprintf+0x1cc>
 80014f4:	9b03      	ldr	r3, [sp, #12]
 80014f6:	429c      	cmp	r4, r3
 80014f8:	db05      	blt.n	8001506 <_vprintf+0x1d6>
 80014fa:	4654      	mov	r4, sl
 80014fc:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 8001500:	e00d      	b.n	800151e <_vprintf+0x1ee>
 8001502:	3401      	adds	r4, #1
 8001504:	e7e7      	b.n	80014d6 <_vprintf+0x1a6>
 8001506:	2120      	movs	r1, #32
 8001508:	a801      	add	r0, sp, #4
 800150a:	f7ff fe31 	bl	8001170 <_xputch>
 800150e:	4654      	mov	r4, sl
 8001510:	e7eb      	b.n	80014ea <_vprintf+0x1ba>
 8001512:	a801      	add	r0, sp, #4
 8001514:	f7ff fe2c 	bl	8001170 <_xputch>
 8001518:	9b02      	ldr	r3, [sp, #8]
 800151a:	3b01      	subs	r3, #1
 800151c:	9302      	str	r3, [sp, #8]
 800151e:	9b01      	ldr	r3, [sp, #4]
 8001520:	07db      	lsls	r3, r3, #31
 8001522:	d501      	bpl.n	8001528 <_vprintf+0x1f8>
 8001524:	9b02      	ldr	r3, [sp, #8]
 8001526:	b11b      	cbz	r3, 8001530 <_vprintf+0x200>
 8001528:	f819 1f01 	ldrb.w	r1, [r9, #1]!
 800152c:	2900      	cmp	r1, #0
 800152e:	d1f0      	bne.n	8001512 <_vprintf+0x1e2>
 8001530:	9b03      	ldr	r3, [sp, #12]
 8001532:	42a3      	cmp	r3, r4
 8001534:	ddb4      	ble.n	80014a0 <_vprintf+0x170>
 8001536:	2120      	movs	r1, #32
 8001538:	a801      	add	r0, sp, #4
 800153a:	f7ff fe19 	bl	8001170 <_xputch>
 800153e:	3401      	adds	r4, #1
 8001540:	e7f6      	b.n	8001530 <_vprintf+0x200>
 8001542:	9b01      	ldr	r3, [sp, #4]
 8001544:	f013 0304 	ands.w	r3, r3, #4
 8001548:	bf1d      	ittte	ne
 800154a:	3407      	addne	r4, #7
 800154c:	f024 0407 	bicne.w	r4, r4, #7
 8001550:	4625      	movne	r5, r4
 8001552:	4625      	moveq	r5, r4
 8001554:	bf1a      	itte	ne
 8001556:	f855 2b08 	ldrne.w	r2, [r5], #8
 800155a:	6863      	ldrne	r3, [r4, #4]
 800155c:	f855 2b04 	ldreq.w	r2, [r5], #4
 8001560:	e794      	b.n	800148c <_vprintf+0x15c>
 8001562:	bf00      	nop

08001564 <printf>:
 8001564:	b40f      	push	{r0, r1, r2, r3}
 8001566:	b507      	push	{r0, r1, r2, lr}
 8001568:	aa04      	add	r2, sp, #16
 800156a:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 800156e:	f852 1b04 	ldr.w	r1, [r2], #4
 8001572:	9201      	str	r2, [sp, #4]
 8001574:	f7ff fedc 	bl	8001330 <_vprintf>
 8001578:	b003      	add	sp, #12
 800157a:	f85d eb04 	ldr.w	lr, [sp], #4
 800157e:	b004      	add	sp, #16
 8001580:	4770      	bx	lr
	...

08001584 <snprintf>:
 8001584:	b40c      	push	{r2, r3}
 8001586:	b513      	push	{r0, r1, r4, lr}
 8001588:	4c09      	ldr	r4, [pc, #36]	; (80015b0 <snprintf+0x2c>)
 800158a:	aa04      	add	r2, sp, #16
 800158c:	460b      	mov	r3, r1
 800158e:	6020      	str	r0, [r4, #0]
 8001590:	f852 1b04 	ldr.w	r1, [r2], #4
 8001594:	9201      	str	r2, [sp, #4]
 8001596:	4618      	mov	r0, r3
 8001598:	f7ff feca 	bl	8001330 <_vprintf>
 800159c:	6822      	ldr	r2, [r4, #0]
 800159e:	2300      	movs	r3, #0
 80015a0:	7013      	strb	r3, [r2, #0]
 80015a2:	6023      	str	r3, [r4, #0]
 80015a4:	b002      	add	sp, #8
 80015a6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80015aa:	b002      	add	sp, #8
 80015ac:	4770      	bx	lr
 80015ae:	bf00      	nop
 80015b0:	200000f0 	strdcs	r0, [r0], -r0	; <UNPREDICTABLE>

080015b4 <vsnprintf>:
 80015b4:	b538      	push	{r3, r4, r5, lr}
 80015b6:	4c06      	ldr	r4, [pc, #24]	; (80015d0 <vsnprintf+0x1c>)
 80015b8:	4605      	mov	r5, r0
 80015ba:	4608      	mov	r0, r1
 80015bc:	4611      	mov	r1, r2
 80015be:	461a      	mov	r2, r3
 80015c0:	6025      	str	r5, [r4, #0]
 80015c2:	f7ff feb5 	bl	8001330 <_vprintf>
 80015c6:	6822      	ldr	r2, [r4, #0]
 80015c8:	2300      	movs	r3, #0
 80015ca:	7013      	strb	r3, [r2, #0]
 80015cc:	6023      	str	r3, [r4, #0]
 80015ce:	bd38      	pop	{r3, r4, r5, pc}
 80015d0:	200000f0 	strdcs	r0, [r0], -r0	; <UNPREDICTABLE>

080015d4 <puts>:
 80015d4:	b508      	push	{r3, lr}
 80015d6:	f006 f817 	bl	8007608 <console_puts>
 80015da:	200a      	movs	r0, #10
 80015dc:	f006 f812 	bl	8007604 <console_putc>
 80015e0:	2001      	movs	r0, #1
 80015e2:	bd08      	pop	{r3, pc}

080015e4 <__udivmoddi4>:
 80015e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80015e8:	9e08      	ldr	r6, [sp, #32]
 80015ea:	460d      	mov	r5, r1
 80015ec:	4604      	mov	r4, r0
 80015ee:	460f      	mov	r7, r1
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d14a      	bne.n	800168a <__udivmoddi4+0xa6>
 80015f4:	428a      	cmp	r2, r1
 80015f6:	4694      	mov	ip, r2
 80015f8:	d965      	bls.n	80016c6 <__udivmoddi4+0xe2>
 80015fa:	fab2 f382 	clz	r3, r2
 80015fe:	b143      	cbz	r3, 8001612 <__udivmoddi4+0x2e>
 8001600:	fa02 fc03 	lsl.w	ip, r2, r3
 8001604:	f1c3 0220 	rsb	r2, r3, #32
 8001608:	409f      	lsls	r7, r3
 800160a:	fa20 f202 	lsr.w	r2, r0, r2
 800160e:	4317      	orrs	r7, r2
 8001610:	409c      	lsls	r4, r3
 8001612:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8001616:	fa1f f58c 	uxth.w	r5, ip
 800161a:	fbb7 f1fe 	udiv	r1, r7, lr
 800161e:	0c22      	lsrs	r2, r4, #16
 8001620:	fb0e 7711 	mls	r7, lr, r1, r7
 8001624:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8001628:	fb01 f005 	mul.w	r0, r1, r5
 800162c:	4290      	cmp	r0, r2
 800162e:	d90a      	bls.n	8001646 <__udivmoddi4+0x62>
 8001630:	eb1c 0202 	adds.w	r2, ip, r2
 8001634:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8001638:	f080 811c 	bcs.w	8001874 <__udivmoddi4+0x290>
 800163c:	4290      	cmp	r0, r2
 800163e:	f240 8119 	bls.w	8001874 <__udivmoddi4+0x290>
 8001642:	3902      	subs	r1, #2
 8001644:	4462      	add	r2, ip
 8001646:	1a12      	subs	r2, r2, r0
 8001648:	b2a4      	uxth	r4, r4
 800164a:	fbb2 f0fe 	udiv	r0, r2, lr
 800164e:	fb0e 2210 	mls	r2, lr, r0, r2
 8001652:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8001656:	fb00 f505 	mul.w	r5, r0, r5
 800165a:	42a5      	cmp	r5, r4
 800165c:	d90a      	bls.n	8001674 <__udivmoddi4+0x90>
 800165e:	eb1c 0404 	adds.w	r4, ip, r4
 8001662:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8001666:	f080 8107 	bcs.w	8001878 <__udivmoddi4+0x294>
 800166a:	42a5      	cmp	r5, r4
 800166c:	f240 8104 	bls.w	8001878 <__udivmoddi4+0x294>
 8001670:	4464      	add	r4, ip
 8001672:	3802      	subs	r0, #2
 8001674:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8001678:	1b64      	subs	r4, r4, r5
 800167a:	2100      	movs	r1, #0
 800167c:	b11e      	cbz	r6, 8001686 <__udivmoddi4+0xa2>
 800167e:	40dc      	lsrs	r4, r3
 8001680:	2300      	movs	r3, #0
 8001682:	e9c6 4300 	strd	r4, r3, [r6]
 8001686:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800168a:	428b      	cmp	r3, r1
 800168c:	d908      	bls.n	80016a0 <__udivmoddi4+0xbc>
 800168e:	2e00      	cmp	r6, #0
 8001690:	f000 80ed 	beq.w	800186e <__udivmoddi4+0x28a>
 8001694:	2100      	movs	r1, #0
 8001696:	e9c6 0500 	strd	r0, r5, [r6]
 800169a:	4608      	mov	r0, r1
 800169c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80016a0:	fab3 f183 	clz	r1, r3
 80016a4:	2900      	cmp	r1, #0
 80016a6:	d149      	bne.n	800173c <__udivmoddi4+0x158>
 80016a8:	42ab      	cmp	r3, r5
 80016aa:	d302      	bcc.n	80016b2 <__udivmoddi4+0xce>
 80016ac:	4282      	cmp	r2, r0
 80016ae:	f200 80f8 	bhi.w	80018a2 <__udivmoddi4+0x2be>
 80016b2:	1a84      	subs	r4, r0, r2
 80016b4:	eb65 0203 	sbc.w	r2, r5, r3
 80016b8:	2001      	movs	r0, #1
 80016ba:	4617      	mov	r7, r2
 80016bc:	2e00      	cmp	r6, #0
 80016be:	d0e2      	beq.n	8001686 <__udivmoddi4+0xa2>
 80016c0:	e9c6 4700 	strd	r4, r7, [r6]
 80016c4:	e7df      	b.n	8001686 <__udivmoddi4+0xa2>
 80016c6:	b902      	cbnz	r2, 80016ca <__udivmoddi4+0xe6>
 80016c8:	deff      	udf	#255	; 0xff
 80016ca:	fab2 f382 	clz	r3, r2
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	f040 8090 	bne.w	80017f4 <__udivmoddi4+0x210>
 80016d4:	1a8a      	subs	r2, r1, r2
 80016d6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80016da:	fa1f fe8c 	uxth.w	lr, ip
 80016de:	2101      	movs	r1, #1
 80016e0:	fbb2 f5f7 	udiv	r5, r2, r7
 80016e4:	fb07 2015 	mls	r0, r7, r5, r2
 80016e8:	0c22      	lsrs	r2, r4, #16
 80016ea:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80016ee:	fb0e f005 	mul.w	r0, lr, r5
 80016f2:	4290      	cmp	r0, r2
 80016f4:	d908      	bls.n	8001708 <__udivmoddi4+0x124>
 80016f6:	eb1c 0202 	adds.w	r2, ip, r2
 80016fa:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 80016fe:	d202      	bcs.n	8001706 <__udivmoddi4+0x122>
 8001700:	4290      	cmp	r0, r2
 8001702:	f200 80cb 	bhi.w	800189c <__udivmoddi4+0x2b8>
 8001706:	4645      	mov	r5, r8
 8001708:	1a12      	subs	r2, r2, r0
 800170a:	b2a4      	uxth	r4, r4
 800170c:	fbb2 f0f7 	udiv	r0, r2, r7
 8001710:	fb07 2210 	mls	r2, r7, r0, r2
 8001714:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8001718:	fb0e fe00 	mul.w	lr, lr, r0
 800171c:	45a6      	cmp	lr, r4
 800171e:	d908      	bls.n	8001732 <__udivmoddi4+0x14e>
 8001720:	eb1c 0404 	adds.w	r4, ip, r4
 8001724:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8001728:	d202      	bcs.n	8001730 <__udivmoddi4+0x14c>
 800172a:	45a6      	cmp	lr, r4
 800172c:	f200 80bb 	bhi.w	80018a6 <__udivmoddi4+0x2c2>
 8001730:	4610      	mov	r0, r2
 8001732:	eba4 040e 	sub.w	r4, r4, lr
 8001736:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800173a:	e79f      	b.n	800167c <__udivmoddi4+0x98>
 800173c:	f1c1 0720 	rsb	r7, r1, #32
 8001740:	408b      	lsls	r3, r1
 8001742:	fa22 fc07 	lsr.w	ip, r2, r7
 8001746:	ea4c 0c03 	orr.w	ip, ip, r3
 800174a:	fa05 f401 	lsl.w	r4, r5, r1
 800174e:	fa20 f307 	lsr.w	r3, r0, r7
 8001752:	40fd      	lsrs	r5, r7
 8001754:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8001758:	4323      	orrs	r3, r4
 800175a:	fbb5 f8f9 	udiv	r8, r5, r9
 800175e:	fa1f fe8c 	uxth.w	lr, ip
 8001762:	fb09 5518 	mls	r5, r9, r8, r5
 8001766:	0c1c      	lsrs	r4, r3, #16
 8001768:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800176c:	fb08 f50e 	mul.w	r5, r8, lr
 8001770:	42a5      	cmp	r5, r4
 8001772:	fa02 f201 	lsl.w	r2, r2, r1
 8001776:	fa00 f001 	lsl.w	r0, r0, r1
 800177a:	d90b      	bls.n	8001794 <__udivmoddi4+0x1b0>
 800177c:	eb1c 0404 	adds.w	r4, ip, r4
 8001780:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8001784:	f080 8088 	bcs.w	8001898 <__udivmoddi4+0x2b4>
 8001788:	42a5      	cmp	r5, r4
 800178a:	f240 8085 	bls.w	8001898 <__udivmoddi4+0x2b4>
 800178e:	f1a8 0802 	sub.w	r8, r8, #2
 8001792:	4464      	add	r4, ip
 8001794:	1b64      	subs	r4, r4, r5
 8001796:	b29d      	uxth	r5, r3
 8001798:	fbb4 f3f9 	udiv	r3, r4, r9
 800179c:	fb09 4413 	mls	r4, r9, r3, r4
 80017a0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80017a4:	fb03 fe0e 	mul.w	lr, r3, lr
 80017a8:	45a6      	cmp	lr, r4
 80017aa:	d908      	bls.n	80017be <__udivmoddi4+0x1da>
 80017ac:	eb1c 0404 	adds.w	r4, ip, r4
 80017b0:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 80017b4:	d26c      	bcs.n	8001890 <__udivmoddi4+0x2ac>
 80017b6:	45a6      	cmp	lr, r4
 80017b8:	d96a      	bls.n	8001890 <__udivmoddi4+0x2ac>
 80017ba:	3b02      	subs	r3, #2
 80017bc:	4464      	add	r4, ip
 80017be:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80017c2:	fba3 9502 	umull	r9, r5, r3, r2
 80017c6:	eba4 040e 	sub.w	r4, r4, lr
 80017ca:	42ac      	cmp	r4, r5
 80017cc:	46c8      	mov	r8, r9
 80017ce:	46ae      	mov	lr, r5
 80017d0:	d356      	bcc.n	8001880 <__udivmoddi4+0x29c>
 80017d2:	d053      	beq.n	800187c <__udivmoddi4+0x298>
 80017d4:	b156      	cbz	r6, 80017ec <__udivmoddi4+0x208>
 80017d6:	ebb0 0208 	subs.w	r2, r0, r8
 80017da:	eb64 040e 	sbc.w	r4, r4, lr
 80017de:	fa04 f707 	lsl.w	r7, r4, r7
 80017e2:	40ca      	lsrs	r2, r1
 80017e4:	40cc      	lsrs	r4, r1
 80017e6:	4317      	orrs	r7, r2
 80017e8:	e9c6 7400 	strd	r7, r4, [r6]
 80017ec:	4618      	mov	r0, r3
 80017ee:	2100      	movs	r1, #0
 80017f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80017f4:	f1c3 0120 	rsb	r1, r3, #32
 80017f8:	fa02 fc03 	lsl.w	ip, r2, r3
 80017fc:	fa20 f201 	lsr.w	r2, r0, r1
 8001800:	fa25 f101 	lsr.w	r1, r5, r1
 8001804:	409d      	lsls	r5, r3
 8001806:	432a      	orrs	r2, r5
 8001808:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800180c:	fa1f fe8c 	uxth.w	lr, ip
 8001810:	fbb1 f0f7 	udiv	r0, r1, r7
 8001814:	fb07 1510 	mls	r5, r7, r0, r1
 8001818:	0c11      	lsrs	r1, r2, #16
 800181a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800181e:	fb00 f50e 	mul.w	r5, r0, lr
 8001822:	428d      	cmp	r5, r1
 8001824:	fa04 f403 	lsl.w	r4, r4, r3
 8001828:	d908      	bls.n	800183c <__udivmoddi4+0x258>
 800182a:	eb1c 0101 	adds.w	r1, ip, r1
 800182e:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8001832:	d22f      	bcs.n	8001894 <__udivmoddi4+0x2b0>
 8001834:	428d      	cmp	r5, r1
 8001836:	d92d      	bls.n	8001894 <__udivmoddi4+0x2b0>
 8001838:	3802      	subs	r0, #2
 800183a:	4461      	add	r1, ip
 800183c:	1b49      	subs	r1, r1, r5
 800183e:	b292      	uxth	r2, r2
 8001840:	fbb1 f5f7 	udiv	r5, r1, r7
 8001844:	fb07 1115 	mls	r1, r7, r5, r1
 8001848:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800184c:	fb05 f10e 	mul.w	r1, r5, lr
 8001850:	4291      	cmp	r1, r2
 8001852:	d908      	bls.n	8001866 <__udivmoddi4+0x282>
 8001854:	eb1c 0202 	adds.w	r2, ip, r2
 8001858:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 800185c:	d216      	bcs.n	800188c <__udivmoddi4+0x2a8>
 800185e:	4291      	cmp	r1, r2
 8001860:	d914      	bls.n	800188c <__udivmoddi4+0x2a8>
 8001862:	3d02      	subs	r5, #2
 8001864:	4462      	add	r2, ip
 8001866:	1a52      	subs	r2, r2, r1
 8001868:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 800186c:	e738      	b.n	80016e0 <__udivmoddi4+0xfc>
 800186e:	4631      	mov	r1, r6
 8001870:	4630      	mov	r0, r6
 8001872:	e708      	b.n	8001686 <__udivmoddi4+0xa2>
 8001874:	4639      	mov	r1, r7
 8001876:	e6e6      	b.n	8001646 <__udivmoddi4+0x62>
 8001878:	4610      	mov	r0, r2
 800187a:	e6fb      	b.n	8001674 <__udivmoddi4+0x90>
 800187c:	4548      	cmp	r0, r9
 800187e:	d2a9      	bcs.n	80017d4 <__udivmoddi4+0x1f0>
 8001880:	ebb9 0802 	subs.w	r8, r9, r2
 8001884:	eb65 0e0c 	sbc.w	lr, r5, ip
 8001888:	3b01      	subs	r3, #1
 800188a:	e7a3      	b.n	80017d4 <__udivmoddi4+0x1f0>
 800188c:	4645      	mov	r5, r8
 800188e:	e7ea      	b.n	8001866 <__udivmoddi4+0x282>
 8001890:	462b      	mov	r3, r5
 8001892:	e794      	b.n	80017be <__udivmoddi4+0x1da>
 8001894:	4640      	mov	r0, r8
 8001896:	e7d1      	b.n	800183c <__udivmoddi4+0x258>
 8001898:	46d0      	mov	r8, sl
 800189a:	e77b      	b.n	8001794 <__udivmoddi4+0x1b0>
 800189c:	3d02      	subs	r5, #2
 800189e:	4462      	add	r2, ip
 80018a0:	e732      	b.n	8001708 <__udivmoddi4+0x124>
 80018a2:	4608      	mov	r0, r1
 80018a4:	e70a      	b.n	80016bc <__udivmoddi4+0xd8>
 80018a6:	4464      	add	r4, ip
 80018a8:	3802      	subs	r0, #2
 80018aa:	e742      	b.n	8001732 <__udivmoddi4+0x14e>

080018ac <DMXReceiver::Run(short&)>:
 80018ac:	4b23      	ldr	r3, [pc, #140]	; (800193c <DMXReceiver::Run(short&)+0x90>)
 80018ae:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80018b0:	460d      	mov	r5, r1
 80018b2:	7819      	ldrb	r1, [r3, #0]
 80018b4:	4606      	mov	r6, r0
 80018b6:	b121      	cbz	r1, 80018c2 <DMXReceiver::Run(short&)+0x16>
 80018b8:	2400      	movs	r4, #0
 80018ba:	802c      	strh	r4, [r5, #0]
 80018bc:	4620      	mov	r0, r4
 80018be:	b002      	add	sp, #8
 80018c0:	bd70      	pop	{r4, r5, r6, pc}
 80018c2:	9101      	str	r1, [sp, #4]
 80018c4:	f001 fc88 	bl	80031d8 <Dmx::GetUpdatesPerSecond(unsigned int)>
 80018c8:	9901      	ldr	r1, [sp, #4]
 80018ca:	4604      	mov	r4, r0
 80018cc:	b998      	cbnz	r0, 80018f6 <DMXReceiver::Run(short&)+0x4a>
 80018ce:	4e1c      	ldr	r6, [pc, #112]	; (8001940 <DMXReceiver::Run(short&)+0x94>)
 80018d0:	7833      	ldrb	r3, [r6, #0]
 80018d2:	b15b      	cbz	r3, 80018ec <DMXReceiver::Run(short&)+0x40>
 80018d4:	4b1b      	ldr	r3, [pc, #108]	; (8001944 <DMXReceiver::Run(short&)+0x98>)
 80018d6:	6818      	ldr	r0, [r3, #0]
 80018d8:	6803      	ldr	r3, [r0, #0]
 80018da:	4621      	mov	r1, r4
 80018dc:	68db      	ldr	r3, [r3, #12]
 80018de:	4798      	blx	r3
 80018e0:	4b19      	ldr	r3, [pc, #100]	; (8001948 <DMXReceiver::Run(short&)+0x9c>)
 80018e2:	7034      	strb	r4, [r6, #0]
 80018e4:	6818      	ldr	r0, [r3, #0]
 80018e6:	2102      	movs	r1, #2
 80018e8:	f005 fef8 	bl	80076dc <LedBlink::SetMode(ledblink::Mode)>
 80018ec:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80018f0:	802b      	strh	r3, [r5, #0]
 80018f2:	2400      	movs	r4, #0
 80018f4:	e7e2      	b.n	80018bc <DMXReceiver::Run(short&)+0x10>
 80018f6:	4630      	mov	r0, r6
 80018f8:	9101      	str	r1, [sp, #4]
 80018fa:	f001 fc59 	bl	80031b0 <Dmx::GetDmxAvailable(unsigned int)>
 80018fe:	2800      	cmp	r0, #0
 8001900:	d0da      	beq.n	80018b8 <DMXReceiver::Run(short&)+0xc>
 8001902:	4e10      	ldr	r6, [pc, #64]	; (8001944 <DMXReceiver::Run(short&)+0x98>)
 8001904:	f8d0 3204 	ldr.w	r3, [r0, #516]	; 0x204
 8001908:	802b      	strh	r3, [r5, #0]
 800190a:	1c44      	adds	r4, r0, #1
 800190c:	6830      	ldr	r0, [r6, #0]
 800190e:	9901      	ldr	r1, [sp, #4]
 8001910:	6802      	ldr	r2, [r0, #0]
 8001912:	b29b      	uxth	r3, r3
 8001914:	6915      	ldr	r5, [r2, #16]
 8001916:	4622      	mov	r2, r4
 8001918:	47a8      	blx	r5
 800191a:	4d09      	ldr	r5, [pc, #36]	; (8001940 <DMXReceiver::Run(short&)+0x94>)
 800191c:	7829      	ldrb	r1, [r5, #0]
 800191e:	2900      	cmp	r1, #0
 8001920:	d1cc      	bne.n	80018bc <DMXReceiver::Run(short&)+0x10>
 8001922:	6830      	ldr	r0, [r6, #0]
 8001924:	6803      	ldr	r3, [r0, #0]
 8001926:	689b      	ldr	r3, [r3, #8]
 8001928:	4798      	blx	r3
 800192a:	2301      	movs	r3, #1
 800192c:	702b      	strb	r3, [r5, #0]
 800192e:	4b06      	ldr	r3, [pc, #24]	; (8001948 <DMXReceiver::Run(short&)+0x9c>)
 8001930:	2103      	movs	r1, #3
 8001932:	6818      	ldr	r0, [r3, #0]
 8001934:	f005 fed2 	bl	80076dc <LedBlink::SetMode(ledblink::Mode)>
 8001938:	e7c0      	b.n	80018bc <DMXReceiver::Run(short&)+0x10>
 800193a:	bf00      	nop
 800193c:	20000208 	andcs	r0, r0, r8, lsl #4
 8001940:	20000200 	andcs	r0, r0, r0, lsl #4
 8001944:	20000204 	andcs	r0, r0, r4, lsl #4
 8001948:	200017d8 	ldrdcs	r1, [r0], -r8

0800194c <RDMResponder::HandleResponse(unsigned char*)>:
 800194c:	780a      	ldrb	r2, [r1, #0]
 800194e:	2acc      	cmp	r2, #204	; 0xcc
 8001950:	b510      	push	{r4, lr}
 8001952:	d107      	bne.n	8001964 <RDMResponder::HandleResponse(unsigned char*)+0x18>
 8001954:	788c      	ldrb	r4, [r1, #2]
 8001956:	3402      	adds	r4, #2
 8001958:	4622      	mov	r2, r4
 800195a:	2000      	movs	r0, #0
 800195c:	f001 fc9c 	bl	8003298 <Rdm::SendRawRespondMessage(unsigned int, unsigned char const*, unsigned int)>
 8001960:	4620      	mov	r0, r4
 8001962:	bd10      	pop	{r4, pc}
 8001964:	2afe      	cmp	r2, #254	; 0xfe
 8001966:	d105      	bne.n	8001974 <RDMResponder::HandleResponse(unsigned char*)+0x28>
 8001968:	2218      	movs	r2, #24
 800196a:	2000      	movs	r0, #0
 800196c:	f001 fca8 	bl	80032c0 <Rdm::SendDiscoveryRespondMessage(unsigned int, unsigned char const*, unsigned int)>
 8001970:	2418      	movs	r4, #24
 8001972:	e7f5      	b.n	8001960 <RDMResponder::HandleResponse(unsigned char*)+0x14>
 8001974:	f06f 0402 	mvn.w	r4, #2
 8001978:	e7f2      	b.n	8001960 <RDMResponder::HandleResponse(unsigned char*)+0x14>
	...

0800197c <RDMResponder::Run()>:
 800197c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800197e:	4604      	mov	r4, r0
 8001980:	f10d 0106 	add.w	r1, sp, #6
 8001984:	30cc      	adds	r0, #204	; 0xcc
 8001986:	f7ff ff91 	bl	80018ac <DMXReceiver::Run(short&)>
 800198a:	4e1f      	ldr	r6, [pc, #124]	; (8001a08 <RDMResponder::Run()+0x8c>)
 800198c:	4601      	mov	r1, r0
 800198e:	6830      	ldr	r0, [r6, #0]
 8001990:	8883      	ldrh	r3, [r0, #4]
 8001992:	b153      	cbz	r3, 80019aa <RDMResponder::Run()+0x2e>
 8001994:	f9bd 2006 	ldrsh.w	r2, [sp, #6]
 8001998:	1c53      	adds	r3, r2, #1
 800199a:	d120      	bne.n	80019de <RDMResponder::Run()+0x62>
 800199c:	4d1b      	ldr	r5, [pc, #108]	; (8001a0c <RDMResponder::Run()+0x90>)
 800199e:	782b      	ldrb	r3, [r5, #0]
 80019a0:	b11b      	cbz	r3, 80019aa <RDMResponder::Run()+0x2e>
 80019a2:	f000 ff33 	bl	800280c <RDMSubDevices::Stop()>
 80019a6:	2300      	movs	r3, #0
 80019a8:	702b      	strb	r3, [r5, #0]
 80019aa:	2000      	movs	r0, #0
 80019ac:	f000 fff0 	bl	8002990 <Rdm::Receive(unsigned int)>
 80019b0:	b198      	cbz	r0, 80019da <RDMResponder::Run()+0x5e>
 80019b2:	7803      	ldrb	r3, [r0, #0]
 80019b4:	2bcc      	cmp	r3, #204	; 0xcc
 80019b6:	d120      	bne.n	80019fa <RDMResponder::Run()+0x7e>
 80019b8:	7d03      	ldrb	r3, [r0, #20]
 80019ba:	2b20      	cmp	r3, #32
 80019bc:	d003      	beq.n	80019c6 <RDMResponder::Run()+0x4a>
 80019be:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80019c2:	2b10      	cmp	r3, #16
 80019c4:	d11c      	bne.n	8001a00 <RDMResponder::Run()+0x84>
 80019c6:	1c41      	adds	r1, r0, #1
 80019c8:	4a11      	ldr	r2, [pc, #68]	; (8001a10 <RDMResponder::Run()+0x94>)
 80019ca:	f104 00e8 	add.w	r0, r4, #232	; 0xe8
 80019ce:	f002 fe03 	bl	80045d8 <RDMHandler::HandleData(unsigned char const*, unsigned char*)>
 80019d2:	490f      	ldr	r1, [pc, #60]	; (8001a10 <RDMResponder::Run()+0x94>)
 80019d4:	4620      	mov	r0, r4
 80019d6:	f7ff ffb9 	bl	800194c <RDMResponder::HandleResponse(unsigned char*)>
 80019da:	b002      	add	sp, #8
 80019dc:	bd70      	pop	{r4, r5, r6, pc}
 80019de:	2900      	cmp	r1, #0
 80019e0:	d0e3      	beq.n	80019aa <RDMResponder::Run()+0x2e>
 80019e2:	4d0a      	ldr	r5, [pc, #40]	; (8001a0c <RDMResponder::Run()+0x90>)
 80019e4:	b292      	uxth	r2, r2
 80019e6:	f000 ff21 	bl	800282c <RDMSubDevices::SetData(unsigned char const*, unsigned int)>
 80019ea:	782b      	ldrb	r3, [r5, #0]
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d1dc      	bne.n	80019aa <RDMResponder::Run()+0x2e>
 80019f0:	6830      	ldr	r0, [r6, #0]
 80019f2:	f000 fefb 	bl	80027ec <RDMSubDevices::Start()>
 80019f6:	2301      	movs	r3, #1
 80019f8:	e7d6      	b.n	80019a8 <RDMResponder::Run()+0x2c>
 80019fa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80019fe:	e7ec      	b.n	80019da <RDMResponder::Run()+0x5e>
 8001a00:	f06f 0001 	mvn.w	r0, #1
 8001a04:	e7e9      	b.n	80019da <RDMResponder::Run()+0x5e>
 8001a06:	bf00      	nop
 8001a08:	200001fc 	strdcs	r0, [r0], -ip
 8001a0c:	200001f3 	strdcs	r0, [r0], -r3
 8001a10:	200000f4 	strdcs	r0, [r0], -r4

08001a14 <CpuTemperature::Initialize()>:
 8001a14:	2001      	movs	r0, #1
 8001a16:	4770      	bx	lr

08001a18 <CpuTemperature::~CpuTemperature()>:
 8001a18:	4770      	bx	lr

08001a1a <CpuTemperature::GetValue()>:
 8001a1a:	b508      	push	{r3, lr}
 8001a1c:	f007 f8ca 	bl	8008bb4 <gd32_adc_gettemp()>
 8001a20:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8001a24:	ee10 3a10 	vmov	r3, s0
 8001a28:	b218      	sxth	r0, r3
 8001a2a:	bd08      	pop	{r3, pc}

08001a2c <CpuTemperature::~CpuTemperature()>:
 8001a2c:	b510      	push	{r4, lr}
 8001a2e:	4604      	mov	r4, r0
 8001a30:	f006 f89f 	bl	8007b72 <operator delete(void*)>
 8001a34:	4620      	mov	r0, r4
 8001a36:	bd10      	pop	{r4, pc}

08001a38 <RDMSensors::RDMSensors()>:
 8001a38:	4b12      	ldr	r3, [pc, #72]	; (8001a84 <RDMSensors::RDMSensors()+0x4c>)
 8001a3a:	b570      	push	{r4, r5, r6, lr}
 8001a3c:	2600      	movs	r6, #0
 8001a3e:	4604      	mov	r4, r0
 8001a40:	6018      	str	r0, [r3, #0]
 8001a42:	6006      	str	r6, [r0, #0]
 8001a44:	7106      	strb	r6, [r0, #4]
 8001a46:	2040      	movs	r0, #64	; 0x40
 8001a48:	f006 f899 	bl	8007b7e <operator new[](unsigned int)>
 8001a4c:	6020      	str	r0, [r4, #0]
 8001a4e:	2040      	movs	r0, #64	; 0x40
 8001a50:	f006 f893 	bl	8007b7a <operator new(unsigned int)>
 8001a54:	7921      	ldrb	r1, [r4, #4]
 8001a56:	4605      	mov	r5, r0
 8001a58:	f000 fad8 	bl	800200c <RDMSensor::RDMSensor(unsigned char)>
 8001a5c:	4b0a      	ldr	r3, [pc, #40]	; (8001a88 <RDMSensors::RDMSensors()+0x50>)
 8001a5e:	602b      	str	r3, [r5, #0]
 8001a60:	4b0a      	ldr	r3, [pc, #40]	; (8001a8c <RDMSensors::RDMSensors()+0x54>)
 8001a62:	60ab      	str	r3, [r5, #8]
 8001a64:	3354      	adds	r3, #84	; 0x54
 8001a66:	60eb      	str	r3, [r5, #12]
 8001a68:	4628      	mov	r0, r5
 8001a6a:	2355      	movs	r3, #85	; 0x55
 8001a6c:	4908      	ldr	r1, [pc, #32]	; (8001a90 <RDMSensors::RDMSensors()+0x58>)
 8001a6e:	822b      	strh	r3, [r5, #16]
 8001a70:	71ee      	strb	r6, [r5, #7]
 8001a72:	f000 fadd 	bl	8002030 <RDMSensor::SetDescription(char const*)>
 8001a76:	4629      	mov	r1, r5
 8001a78:	4620      	mov	r0, r4
 8001a7a:	f000 f85b 	bl	8001b34 <RDMSensors::Add(RDMSensor*)>
 8001a7e:	4620      	mov	r0, r4
 8001a80:	bd70      	pop	{r4, r5, r6, pc}
 8001a82:	bf00      	nop
 8001a84:	200001f8 	strdcs	r0, [r0], -r8
 8001a88:	08009820 	stmdaeq	r0, {r5, fp, ip, pc}
 8001a8c:	ffd80001 			; <UNDEFINED> instruction: 0xffd80001
 8001a90:	08009811 	stmdaeq	r0, {r0, r4, fp, ip, pc}

08001a94 <RDMSensors::~RDMSensors()>:
 8001a94:	b570      	push	{r4, r5, r6, lr}
 8001a96:	2500      	movs	r5, #0
 8001a98:	4604      	mov	r4, r0
 8001a9a:	462e      	mov	r6, r5
 8001a9c:	7923      	ldrb	r3, [r4, #4]
 8001a9e:	6820      	ldr	r0, [r4, #0]
 8001aa0:	42ab      	cmp	r3, r5
 8001aa2:	d804      	bhi.n	8001aae <RDMSensors::~RDMSensors()+0x1a>
 8001aa4:	b108      	cbz	r0, 8001aaa <RDMSensors::~RDMSensors()+0x16>
 8001aa6:	f006 f866 	bl	8007b76 <operator delete[](void*)>
 8001aaa:	4620      	mov	r0, r4
 8001aac:	bd70      	pop	{r4, r5, r6, pc}
 8001aae:	f850 0025 	ldr.w	r0, [r0, r5, lsl #2]
 8001ab2:	b128      	cbz	r0, 8001ac0 <RDMSensors::~RDMSensors()+0x2c>
 8001ab4:	6803      	ldr	r3, [r0, #0]
 8001ab6:	685b      	ldr	r3, [r3, #4]
 8001ab8:	4798      	blx	r3
 8001aba:	6823      	ldr	r3, [r4, #0]
 8001abc:	f843 6025 	str.w	r6, [r3, r5, lsl #2]
 8001ac0:	3501      	adds	r5, #1
 8001ac2:	e7eb      	b.n	8001a9c <RDMSensors::~RDMSensors()+0x8>

08001ac4 <RDMSensors::GetDefintion(unsigned char)>:
 8001ac4:	6803      	ldr	r3, [r0, #0]
 8001ac6:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
 8001aca:	3006      	adds	r0, #6
 8001acc:	4770      	bx	lr

08001ace <RDMSensors::GetValues(unsigned char)>:
 8001ace:	6803      	ldr	r3, [r0, #0]
 8001ad0:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
 8001ad4:	f000 baba 	b.w	800204c <RDMSensor::GetValues()>

08001ad8 <RDMSensors::SetValues(unsigned char)>:
 8001ad8:	29ff      	cmp	r1, #255	; 0xff
 8001ada:	b538      	push	{r3, r4, r5, lr}
 8001adc:	4604      	mov	r4, r0
 8001ade:	d010      	beq.n	8001b02 <RDMSensors::SetValues(unsigned char)+0x2a>
 8001ae0:	6803      	ldr	r3, [r0, #0]
 8001ae2:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
 8001ae6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001aea:	f000 bac4 	b.w	8002076 <RDMSensor::SetValues()>
 8001aee:	6823      	ldr	r3, [r4, #0]
 8001af0:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8001af4:	f000 fabf 	bl	8002076 <RDMSensor::SetValues()>
 8001af8:	3501      	adds	r5, #1
 8001afa:	7923      	ldrb	r3, [r4, #4]
 8001afc:	42ab      	cmp	r3, r5
 8001afe:	d8f6      	bhi.n	8001aee <RDMSensors::SetValues(unsigned char)+0x16>
 8001b00:	bd38      	pop	{r3, r4, r5, pc}
 8001b02:	2500      	movs	r5, #0
 8001b04:	e7f9      	b.n	8001afa <RDMSensors::SetValues(unsigned char)+0x22>

08001b06 <RDMSensors::SetRecord(unsigned char)>:
 8001b06:	29ff      	cmp	r1, #255	; 0xff
 8001b08:	b538      	push	{r3, r4, r5, lr}
 8001b0a:	4604      	mov	r4, r0
 8001b0c:	d010      	beq.n	8001b30 <RDMSensors::SetRecord(unsigned char)+0x2a>
 8001b0e:	6803      	ldr	r3, [r0, #0]
 8001b10:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
 8001b14:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001b18:	f000 bab7 	b.w	800208a <RDMSensor::Record()>
 8001b1c:	6823      	ldr	r3, [r4, #0]
 8001b1e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8001b22:	f000 fab2 	bl	800208a <RDMSensor::Record()>
 8001b26:	3501      	adds	r5, #1
 8001b28:	7923      	ldrb	r3, [r4, #4]
 8001b2a:	42ab      	cmp	r3, r5
 8001b2c:	d8f6      	bhi.n	8001b1c <RDMSensors::SetRecord(unsigned char)+0x16>
 8001b2e:	bd38      	pop	{r3, r4, r5, pc}
 8001b30:	2500      	movs	r5, #0
 8001b32:	e7f9      	b.n	8001b28 <RDMSensors::SetRecord(unsigned char)+0x22>

08001b34 <RDMSensors::Add(RDMSensor*)>:
 8001b34:	6803      	ldr	r3, [r0, #0]
 8001b36:	b510      	push	{r4, lr}
 8001b38:	b143      	cbz	r3, 8001b4c <RDMSensors::Add(RDMSensor*)+0x18>
 8001b3a:	7902      	ldrb	r2, [r0, #4]
 8001b3c:	2a10      	cmp	r2, #16
 8001b3e:	d005      	beq.n	8001b4c <RDMSensors::Add(RDMSensor*)+0x18>
 8001b40:	1c54      	adds	r4, r2, #1
 8001b42:	7104      	strb	r4, [r0, #4]
 8001b44:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8001b48:	2001      	movs	r0, #1
 8001b4a:	bd10      	pop	{r4, pc}
 8001b4c:	2000      	movs	r0, #0
 8001b4e:	e7fc      	b.n	8001b4a <RDMSensors::Add(RDMSensor*)+0x16>

08001b50 <RDMSensorBH170::Initialize()>:
 8001b50:	f890 0048 	ldrb.w	r0, [r0, #72]	; 0x48
 8001b54:	4770      	bx	lr

08001b56 <RDMSensorMCP9808::Initialize()>:
 8001b56:	f890 0048 	ldrb.w	r0, [r0, #72]	; 0x48
 8001b5a:	4770      	bx	lr

08001b5c <RDMSensorHTU21DHumidity::Initialize()>:
 8001b5c:	f890 0048 	ldrb.w	r0, [r0, #72]	; 0x48
 8001b60:	4770      	bx	lr

08001b62 <RDMSensorHTU21DTemperature::Initialize()>:
 8001b62:	f890 0048 	ldrb.w	r0, [r0, #72]	; 0x48
 8001b66:	4770      	bx	lr

08001b68 <RDMSensorINA219Current::Initialize()>:
 8001b68:	f890 0048 	ldrb.w	r0, [r0, #72]	; 0x48
 8001b6c:	4770      	bx	lr

08001b6e <RDMSensorINA219Power::Initialize()>:
 8001b6e:	f890 0048 	ldrb.w	r0, [r0, #72]	; 0x48
 8001b72:	4770      	bx	lr

08001b74 <RDMSensorINA219Voltage::Initialize()>:
 8001b74:	f890 0048 	ldrb.w	r0, [r0, #72]	; 0x48
 8001b78:	4770      	bx	lr

08001b7a <RDMSensorSI7021Humidity::Initialize()>:
 8001b7a:	f890 0048 	ldrb.w	r0, [r0, #72]	; 0x48
 8001b7e:	4770      	bx	lr

08001b80 <RDMSensorSI7021Temperature::Initialize()>:
 8001b80:	f890 0048 	ldrb.w	r0, [r0, #72]	; 0x48
 8001b84:	4770      	bx	lr

08001b86 <RDMSensorSI7021Temperature::GetValue()>:
 8001b86:	b508      	push	{r3, lr}
 8001b88:	3040      	adds	r0, #64	; 0x40
 8001b8a:	f000 fd8f 	bl	80026ac <sensor::SI7021::GetTemperature()>
 8001b8e:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8001b92:	ee10 3a10 	vmov	r3, s0
 8001b96:	b218      	sxth	r0, r3
 8001b98:	bd08      	pop	{r3, pc}

08001b9a <RDMSensorSI7021Humidity::GetValue()>:
 8001b9a:	b508      	push	{r3, lr}
 8001b9c:	3040      	adds	r0, #64	; 0x40
 8001b9e:	f000 fd99 	bl	80026d4 <sensor::SI7021::GetHumidity()>
 8001ba2:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8001ba6:	ee10 3a10 	vmov	r3, s0
 8001baa:	b218      	sxth	r0, r3
 8001bac:	bd08      	pop	{r3, pc}
	...

08001bb0 <RDMSensorINA219Voltage::GetValue()>:
 8001bb0:	b508      	push	{r3, lr}
 8001bb2:	3040      	adds	r0, #64	; 0x40
 8001bb4:	f000 fc84 	bl	80024c0 <sensor::INA219::GetBusVoltage()>
 8001bb8:	eddf 7a04 	vldr	s15, [pc, #16]	; 8001bcc <RDMSensorINA219Voltage::GetValue()+0x1c>
 8001bbc:	ee20 0a27 	vmul.f32	s0, s0, s15
 8001bc0:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8001bc4:	ee10 3a10 	vmov	r3, s0
 8001bc8:	b218      	sxth	r0, r3
 8001bca:	bd08      	pop	{r3, pc}
 8001bcc:	447a0000 	ldrbtmi	r0, [sl], #-0

08001bd0 <RDMSensorINA219Power::GetValue()>:
 8001bd0:	b508      	push	{r3, lr}
 8001bd2:	3040      	adds	r0, #64	; 0x40
 8001bd4:	f000 fc82 	bl	80024dc <sensor::INA219::GetBusPower()>
 8001bd8:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8001bdc:	ee10 3a10 	vmov	r3, s0
 8001be0:	b218      	sxth	r0, r3
 8001be2:	bd08      	pop	{r3, pc}

08001be4 <RDMSensorINA219Current::GetValue()>:
 8001be4:	b508      	push	{r3, lr}
 8001be6:	3040      	adds	r0, #64	; 0x40
 8001be8:	f000 fc4e 	bl	8002488 <sensor::INA219::GetShuntCurrent()>
 8001bec:	eddf 7a04 	vldr	s15, [pc, #16]	; 8001c00 <RDMSensorINA219Current::GetValue()+0x1c>
 8001bf0:	ee20 0a27 	vmul.f32	s0, s0, s15
 8001bf4:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8001bf8:	ee10 3a10 	vmov	r3, s0
 8001bfc:	b218      	sxth	r0, r3
 8001bfe:	bd08      	pop	{r3, pc}
 8001c00:	447a0000 	ldrbtmi	r0, [sl], #-0

08001c04 <RDMSensorHTU21DTemperature::GetValue()>:
 8001c04:	b508      	push	{r3, lr}
 8001c06:	3040      	adds	r0, #64	; 0x40
 8001c08:	f000 fb1e 	bl	8002248 <sensor::HTU21D::GetTemperature()>
 8001c0c:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8001c10:	ee10 3a10 	vmov	r3, s0
 8001c14:	b218      	sxth	r0, r3
 8001c16:	bd08      	pop	{r3, pc}

08001c18 <RDMSensorHTU21DHumidity::GetValue()>:
 8001c18:	b508      	push	{r3, lr}
 8001c1a:	3040      	adds	r0, #64	; 0x40
 8001c1c:	f000 fb28 	bl	8002270 <sensor::HTU21D::GetHumidity()>
 8001c20:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8001c24:	ee10 3a10 	vmov	r3, s0
 8001c28:	b218      	sxth	r0, r3
 8001c2a:	bd08      	pop	{r3, pc}

08001c2c <RDMSensorMCP9808::GetValue()>:
 8001c2c:	b508      	push	{r3, lr}
 8001c2e:	3040      	adds	r0, #64	; 0x40
 8001c30:	f000 fcc6 	bl	80025c0 <sensor::MCP9808::Get()>
 8001c34:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8001c38:	ee10 3a10 	vmov	r3, s0
 8001c3c:	b218      	sxth	r0, r3
 8001c3e:	bd08      	pop	{r3, pc}

08001c40 <RDMSensorBH170::GetValue()>:
 8001c40:	b508      	push	{r3, lr}
 8001c42:	3040      	adds	r0, #64	; 0x40
 8001c44:	f000 fa7a 	bl	800213c <sensor::BH170::Get()>
 8001c48:	f3c0 000e 	ubfx	r0, r0, #0, #15
 8001c4c:	bd08      	pop	{r3, pc}

08001c4e <RDMSensorSI7021Temperature::~RDMSensorSI7021Temperature()>:
 8001c4e:	4770      	bx	lr

08001c50 <RDMSensorSI7021Temperature::~RDMSensorSI7021Temperature()>:
 8001c50:	b510      	push	{r4, lr}
 8001c52:	4604      	mov	r4, r0
 8001c54:	f005 ff8d 	bl	8007b72 <operator delete(void*)>
 8001c58:	4620      	mov	r0, r4
 8001c5a:	bd10      	pop	{r4, pc}

08001c5c <RDMSensorSI7021Humidity::~RDMSensorSI7021Humidity()>:
 8001c5c:	4770      	bx	lr

08001c5e <RDMSensorSI7021Humidity::~RDMSensorSI7021Humidity()>:
 8001c5e:	b510      	push	{r4, lr}
 8001c60:	4604      	mov	r4, r0
 8001c62:	f005 ff86 	bl	8007b72 <operator delete(void*)>
 8001c66:	4620      	mov	r0, r4
 8001c68:	bd10      	pop	{r4, pc}

08001c6a <RDMSensorINA219Voltage::~RDMSensorINA219Voltage()>:
 8001c6a:	4770      	bx	lr

08001c6c <RDMSensorINA219Voltage::~RDMSensorINA219Voltage()>:
 8001c6c:	b510      	push	{r4, lr}
 8001c6e:	4604      	mov	r4, r0
 8001c70:	f005 ff7f 	bl	8007b72 <operator delete(void*)>
 8001c74:	4620      	mov	r0, r4
 8001c76:	bd10      	pop	{r4, pc}

08001c78 <RDMSensorINA219Power::~RDMSensorINA219Power()>:
 8001c78:	4770      	bx	lr

08001c7a <RDMSensorINA219Power::~RDMSensorINA219Power()>:
 8001c7a:	b510      	push	{r4, lr}
 8001c7c:	4604      	mov	r4, r0
 8001c7e:	f005 ff78 	bl	8007b72 <operator delete(void*)>
 8001c82:	4620      	mov	r0, r4
 8001c84:	bd10      	pop	{r4, pc}

08001c86 <RDMSensorINA219Current::~RDMSensorINA219Current()>:
 8001c86:	4770      	bx	lr

08001c88 <RDMSensorINA219Current::~RDMSensorINA219Current()>:
 8001c88:	b510      	push	{r4, lr}
 8001c8a:	4604      	mov	r4, r0
 8001c8c:	f005 ff71 	bl	8007b72 <operator delete(void*)>
 8001c90:	4620      	mov	r0, r4
 8001c92:	bd10      	pop	{r4, pc}

08001c94 <RDMSensorHTU21DTemperature::~RDMSensorHTU21DTemperature()>:
 8001c94:	4770      	bx	lr

08001c96 <RDMSensorHTU21DTemperature::~RDMSensorHTU21DTemperature()>:
 8001c96:	b510      	push	{r4, lr}
 8001c98:	4604      	mov	r4, r0
 8001c9a:	f005 ff6a 	bl	8007b72 <operator delete(void*)>
 8001c9e:	4620      	mov	r0, r4
 8001ca0:	bd10      	pop	{r4, pc}

08001ca2 <RDMSensorHTU21DHumidity::~RDMSensorHTU21DHumidity()>:
 8001ca2:	4770      	bx	lr

08001ca4 <RDMSensorHTU21DHumidity::~RDMSensorHTU21DHumidity()>:
 8001ca4:	b510      	push	{r4, lr}
 8001ca6:	4604      	mov	r4, r0
 8001ca8:	f005 ff63 	bl	8007b72 <operator delete(void*)>
 8001cac:	4620      	mov	r0, r4
 8001cae:	bd10      	pop	{r4, pc}

08001cb0 <RDMSensorMCP9808::~RDMSensorMCP9808()>:
 8001cb0:	4770      	bx	lr

08001cb2 <RDMSensorMCP9808::~RDMSensorMCP9808()>:
 8001cb2:	b510      	push	{r4, lr}
 8001cb4:	4604      	mov	r4, r0
 8001cb6:	f005 ff5c 	bl	8007b72 <operator delete(void*)>
 8001cba:	4620      	mov	r0, r4
 8001cbc:	bd10      	pop	{r4, pc}

08001cbe <RDMSensorBH170::~RDMSensorBH170()>:
 8001cbe:	4770      	bx	lr

08001cc0 <RDMSensorBH170::~RDMSensorBH170()>:
 8001cc0:	b510      	push	{r4, lr}
 8001cc2:	4604      	mov	r4, r0
 8001cc4:	f005 ff55 	bl	8007b72 <operator delete(void*)>
 8001cc8:	4620      	mov	r0, r4
 8001cca:	bd10      	pop	{r4, pc}

08001ccc <RDMSensorsParams::RDMSensorsParams(RDMSensorsParamsStore*)>:
 8001ccc:	6001      	str	r1, [r0, #0]
 8001cce:	4770      	bx	lr

08001cd0 <RDMSensorsParams::Load()>:
 8001cd0:	b508      	push	{r3, lr}
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	4601      	mov	r1, r0
 8001cd6:	6043      	str	r3, [r0, #4]
 8001cd8:	6800      	ldr	r0, [r0, #0]
 8001cda:	b120      	cbz	r0, 8001ce6 <RDMSensorsParams::Load()+0x16>
 8001cdc:	6803      	ldr	r3, [r0, #0]
 8001cde:	3104      	adds	r1, #4
 8001ce0:	68db      	ldr	r3, [r3, #12]
 8001ce2:	4798      	blx	r3
 8001ce4:	2001      	movs	r0, #1
 8001ce6:	bd08      	pop	{r3, pc}

08001ce8 <RDMSensorsParams::Dump()>:
 8001ce8:	4770      	bx	lr
	...

08001cec <RDMSensorsParams::Add(RDMSensor*)>:
 8001cec:	b538      	push	{r3, r4, r5, lr}
 8001cee:	680b      	ldr	r3, [r1, #0]
 8001cf0:	4608      	mov	r0, r1
 8001cf2:	689b      	ldr	r3, [r3, #8]
 8001cf4:	460c      	mov	r4, r1
 8001cf6:	4798      	blx	r3
 8001cf8:	4605      	mov	r5, r0
 8001cfa:	b130      	cbz	r0, 8001d0a <RDMSensorsParams::Add(RDMSensor*)+0x1e>
 8001cfc:	4b05      	ldr	r3, [pc, #20]	; (8001d14 <RDMSensorsParams::Add(RDMSensor*)+0x28>)
 8001cfe:	4621      	mov	r1, r4
 8001d00:	6818      	ldr	r0, [r3, #0]
 8001d02:	f7ff ff17 	bl	8001b34 <RDMSensors::Add(RDMSensor*)>
 8001d06:	4628      	mov	r0, r5
 8001d08:	bd38      	pop	{r3, r4, r5, pc}
 8001d0a:	6823      	ldr	r3, [r4, #0]
 8001d0c:	4620      	mov	r0, r4
 8001d0e:	685b      	ldr	r3, [r3, #4]
 8001d10:	4798      	blx	r3
 8001d12:	e7f8      	b.n	8001d06 <RDMSensorsParams::Add(RDMSensor*)+0x1a>
 8001d14:	200001f8 	strdcs	r0, [r0], -r8

08001d18 <RDMSensorsParams::Set()>:
 8001d18:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001d1c:	f8df b2e8 	ldr.w	fp, [pc, #744]	; 8002008 <RDMSensorsParams::Set()+0x2f0>
 8001d20:	4605      	mov	r5, r0
 8001d22:	4607      	mov	r7, r0
 8001d24:	f04f 0800 	mov.w	r8, #0
 8001d28:	686b      	ldr	r3, [r5, #4]
 8001d2a:	4543      	cmp	r3, r8
 8001d2c:	d801      	bhi.n	8001d32 <RDMSensorsParams::Set()+0x1a>
 8001d2e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001d32:	4b9b      	ldr	r3, [pc, #620]	; (8001fa0 <RDMSensorsParams::Set()+0x288>)
 8001d34:	7a7e      	ldrb	r6, [r7, #9]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	791c      	ldrb	r4, [r3, #4]
 8001d3a:	7a3b      	ldrb	r3, [r7, #8]
 8001d3c:	2b04      	cmp	r3, #4
 8001d3e:	d827      	bhi.n	8001d90 <RDMSensorsParams::Set()+0x78>
 8001d40:	e8df f013 	tbh	[pc, r3, lsl #1]
 8001d44:	002a0005 	eoreq	r0, sl, r5
 8001d48:	00d5006b 	sbcseq	r0, r5, fp, rrx
 8001d4c:	204c00f0 	strdcs	r0, [ip], #-0
 8001d50:	f005 ff13 	bl	8007b7a <operator new(unsigned int)>
 8001d54:	4621      	mov	r1, r4
 8001d56:	4681      	mov	r9, r0
 8001d58:	f000 f958 	bl	800200c <RDMSensor::RDMSensor(unsigned char)>
 8001d5c:	4631      	mov	r1, r6
 8001d5e:	f109 0040 	add.w	r0, r9, #64	; 0x40
 8001d62:	f000 f9b7 	bl	80020d4 <sensor::BH170::BH170(unsigned char)>
 8001d66:	4b8f      	ldr	r3, [pc, #572]	; (8001fa4 <RDMSensorsParams::Set()+0x28c>)
 8001d68:	f8c9 3000 	str.w	r3, [r9]
 8001d6c:	2318      	movs	r3, #24
 8001d6e:	f889 3007 	strb.w	r3, [r9, #7]
 8001d72:	241a      	movs	r4, #26
 8001d74:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8001d78:	e9c9 4302 	strd	r4, r3, [r9, #8]
 8001d7c:	498a      	ldr	r1, [pc, #552]	; (8001fa8 <RDMSensorsParams::Set()+0x290>)
 8001d7e:	f8a9 3010 	strh.w	r3, [r9, #16]
 8001d82:	4648      	mov	r0, r9
 8001d84:	f000 f954 	bl	8002030 <RDMSensor::SetDescription(char const*)>
 8001d88:	4649      	mov	r1, r9
 8001d8a:	4628      	mov	r0, r5
 8001d8c:	f7ff ffae 	bl	8001cec <RDMSensorsParams::Add(RDMSensor*)>
 8001d90:	f108 0801 	add.w	r8, r8, #1
 8001d94:	3703      	adds	r7, #3
 8001d96:	e7c7      	b.n	8001d28 <RDMSensorsParams::Set()+0x10>
 8001d98:	204c      	movs	r0, #76	; 0x4c
 8001d9a:	f005 feee 	bl	8007b7a <operator new(unsigned int)>
 8001d9e:	4621      	mov	r1, r4
 8001da0:	4682      	mov	sl, r0
 8001da2:	f000 f933 	bl	800200c <RDMSensor::RDMSensor(unsigned char)>
 8001da6:	4631      	mov	r1, r6
 8001da8:	f10a 0040 	add.w	r0, sl, #64	; 0x40
 8001dac:	f000 f9ea 	bl	8002184 <sensor::HTU21D::HTU21D(unsigned char)>
 8001db0:	4a7e      	ldr	r2, [pc, #504]	; (8001fac <RDMSensorsParams::Set()+0x294>)
 8001db2:	f8ca 2000 	str.w	r2, [sl]
 8001db6:	221f      	movs	r2, #31
 8001db8:	f88a 2007 	strb.w	r2, [sl, #7]
 8001dbc:	f04f 0900 	mov.w	r9, #0
 8001dc0:	2264      	movs	r2, #100	; 0x64
 8001dc2:	497b      	ldr	r1, [pc, #492]	; (8001fb0 <RDMSensorsParams::Set()+0x298>)
 8001dc4:	f8aa 2010 	strh.w	r2, [sl, #16]
 8001dc8:	4650      	mov	r0, sl
 8001dca:	e9ca 9202 	strd	r9, r2, [sl, #8]
 8001dce:	f000 f92f 	bl	8002030 <RDMSensor::SetDescription(char const*)>
 8001dd2:	4651      	mov	r1, sl
 8001dd4:	4628      	mov	r0, r5
 8001dd6:	f7ff ff89 	bl	8001cec <RDMSensorsParams::Add(RDMSensor*)>
 8001dda:	2800      	cmp	r0, #0
 8001ddc:	d0d8      	beq.n	8001d90 <RDMSensorsParams::Set()+0x78>
 8001dde:	204c      	movs	r0, #76	; 0x4c
 8001de0:	f005 fecb 	bl	8007b7a <operator new(unsigned int)>
 8001de4:	1c61      	adds	r1, r4, #1
 8001de6:	4682      	mov	sl, r0
 8001de8:	b2c9      	uxtb	r1, r1
 8001dea:	f000 f90f 	bl	800200c <RDMSensor::RDMSensor(unsigned char)>
 8001dee:	4631      	mov	r1, r6
 8001df0:	f10a 0040 	add.w	r0, sl, #64	; 0x40
 8001df4:	f000 f9c6 	bl	8002184 <sensor::HTU21D::HTU21D(unsigned char)>
 8001df8:	4b6e      	ldr	r3, [pc, #440]	; (8001fb4 <RDMSensorsParams::Set()+0x29c>)
 8001dfa:	4a6f      	ldr	r2, [pc, #444]	; (8001fb8 <RDMSensorsParams::Set()+0x2a0>)
 8001dfc:	f8ca 2000 	str.w	r2, [sl]
 8001e00:	e9ca 3b02 	strd	r3, fp, [sl, #8]
 8001e04:	227d      	movs	r2, #125	; 0x7d
 8001e06:	496d      	ldr	r1, [pc, #436]	; (8001fbc <RDMSensorsParams::Set()+0x2a4>)
 8001e08:	f88a 9007 	strb.w	r9, [sl, #7]
 8001e0c:	f8aa 2010 	strh.w	r2, [sl, #16]
 8001e10:	4650      	mov	r0, sl
 8001e12:	f000 f90d 	bl	8002030 <RDMSensor::SetDescription(char const*)>
 8001e16:	4651      	mov	r1, sl
 8001e18:	e7b7      	b.n	8001d8a <RDMSensorsParams::Set()+0x72>
 8001e1a:	2060      	movs	r0, #96	; 0x60
 8001e1c:	f005 fead 	bl	8007b7a <operator new(unsigned int)>
 8001e20:	4621      	mov	r1, r4
 8001e22:	4682      	mov	sl, r0
 8001e24:	f000 f8f2 	bl	800200c <RDMSensor::RDMSensor(unsigned char)>
 8001e28:	4631      	mov	r1, r6
 8001e2a:	f10a 0040 	add.w	r0, sl, #64	; 0x40
 8001e2e:	f000 fae9 	bl	8002404 <sensor::INA219::INA219(unsigned char)>
 8001e32:	4a63      	ldr	r2, [pc, #396]	; (8001fc0 <RDMSensorsParams::Set()+0x2a8>)
 8001e34:	f8ca 2000 	str.w	r2, [sl]
 8001e38:	4a62      	ldr	r2, [pc, #392]	; (8001fc4 <RDMSensorsParams::Set()+0x2ac>)
 8001e3a:	f8ca 2008 	str.w	r2, [sl, #8]
 8001e3e:	f202 42cb 	addw	r2, r2, #1227	; 0x4cb
 8001e42:	f8ca 200c 	str.w	r2, [sl, #12]
 8001e46:	f04f 0902 	mov.w	r9, #2
 8001e4a:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8001e4e:	495e      	ldr	r1, [pc, #376]	; (8001fc8 <RDMSensorsParams::Set()+0x2b0>)
 8001e50:	f88a 9007 	strb.w	r9, [sl, #7]
 8001e54:	4650      	mov	r0, sl
 8001e56:	f8aa 2010 	strh.w	r2, [sl, #16]
 8001e5a:	f000 f8e9 	bl	8002030 <RDMSensor::SetDescription(char const*)>
 8001e5e:	4651      	mov	r1, sl
 8001e60:	4628      	mov	r0, r5
 8001e62:	f7ff ff43 	bl	8001cec <RDMSensorsParams::Add(RDMSensor*)>
 8001e66:	2800      	cmp	r0, #0
 8001e68:	d092      	beq.n	8001d90 <RDMSensorsParams::Set()+0x78>
 8001e6a:	2060      	movs	r0, #96	; 0x60
 8001e6c:	f005 fe85 	bl	8007b7a <operator new(unsigned int)>
 8001e70:	1c61      	adds	r1, r4, #1
 8001e72:	4682      	mov	sl, r0
 8001e74:	b2c9      	uxtb	r1, r1
 8001e76:	f000 f8c9 	bl	800200c <RDMSensor::RDMSensor(unsigned char)>
 8001e7a:	4631      	mov	r1, r6
 8001e7c:	f10a 0040 	add.w	r0, sl, #64	; 0x40
 8001e80:	f000 fac0 	bl	8002404 <sensor::INA219::INA219(unsigned char)>
 8001e84:	4a51      	ldr	r2, [pc, #324]	; (8001fcc <RDMSensorsParams::Set()+0x2b4>)
 8001e86:	f8ca 2000 	str.w	r2, [sl]
 8001e8a:	4a51      	ldr	r2, [pc, #324]	; (8001fd0 <RDMSensorsParams::Set()+0x2b8>)
 8001e8c:	f8ca 2008 	str.w	r2, [sl, #8]
 8001e90:	f46f 7131 	mvn.w	r1, #708	; 0x2c4
 8001e94:	440a      	add	r2, r1
 8001e96:	f8ca 200c 	str.w	r2, [sl, #12]
 8001e9a:	2240      	movs	r2, #64	; 0x40
 8001e9c:	f8aa 2010 	strh.w	r2, [sl, #16]
 8001ea0:	4650      	mov	r0, sl
 8001ea2:	494c      	ldr	r1, [pc, #304]	; (8001fd4 <RDMSensorsParams::Set()+0x2bc>)
 8001ea4:	f88a 9007 	strb.w	r9, [sl, #7]
 8001ea8:	f000 f8c2 	bl	8002030 <RDMSensor::SetDescription(char const*)>
 8001eac:	4651      	mov	r1, sl
 8001eae:	4628      	mov	r0, r5
 8001eb0:	f7ff ff1c 	bl	8001cec <RDMSensorsParams::Add(RDMSensor*)>
 8001eb4:	2060      	movs	r0, #96	; 0x60
 8001eb6:	f005 fe60 	bl	8007b7a <operator new(unsigned int)>
 8001eba:	eb04 0109 	add.w	r1, r4, r9
 8001ebe:	4682      	mov	sl, r0
 8001ec0:	b2c9      	uxtb	r1, r1
 8001ec2:	f000 f8a3 	bl	800200c <RDMSensor::RDMSensor(unsigned char)>
 8001ec6:	4631      	mov	r1, r6
 8001ec8:	f10a 0040 	add.w	r0, sl, #64	; 0x40
 8001ecc:	f000 fa9a 	bl	8002404 <sensor::INA219::INA219(unsigned char)>
 8001ed0:	4a41      	ldr	r2, [pc, #260]	; (8001fd8 <RDMSensorsParams::Set()+0x2c0>)
 8001ed2:	4842      	ldr	r0, [pc, #264]	; (8001fdc <RDMSensorsParams::Set()+0x2c4>)
 8001ed4:	f8ca 2000 	str.w	r2, [sl]
 8001ed8:	4a41      	ldr	r2, [pc, #260]	; (8001fe0 <RDMSensorsParams::Set()+0x2c8>)
 8001eda:	4942      	ldr	r1, [pc, #264]	; (8001fe4 <RDMSensorsParams::Set()+0x2cc>)
 8001edc:	f88a 9007 	strb.w	r9, [sl, #7]
 8001ee0:	e9ca 0202 	strd	r0, r2, [sl, #8]
 8001ee4:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
 8001ee8:	f8aa 2010 	strh.w	r2, [sl, #16]
 8001eec:	e790      	b.n	8001e10 <RDMSensorsParams::Set()+0xf8>
 8001eee:	204c      	movs	r0, #76	; 0x4c
 8001ef0:	f005 fe43 	bl	8007b7a <operator new(unsigned int)>
 8001ef4:	4621      	mov	r1, r4
 8001ef6:	4681      	mov	r9, r0
 8001ef8:	f000 f888 	bl	800200c <RDMSensor::RDMSensor(unsigned char)>
 8001efc:	4631      	mov	r1, r6
 8001efe:	f109 0040 	add.w	r0, r9, #64	; 0x40
 8001f02:	f000 fb1f 	bl	8002544 <sensor::MCP9808::MCP9808(unsigned char)>
 8001f06:	4b38      	ldr	r3, [pc, #224]	; (8001fe8 <RDMSensorsParams::Set()+0x2d0>)
 8001f08:	f8c9 3000 	str.w	r3, [r9]
 8001f0c:	2300      	movs	r3, #0
 8001f0e:	4a37      	ldr	r2, [pc, #220]	; (8001fec <RDMSensorsParams::Set()+0x2d4>)
 8001f10:	f889 3007 	strb.w	r3, [r9, #7]
 8001f14:	4b36      	ldr	r3, [pc, #216]	; (8001ff0 <RDMSensorsParams::Set()+0x2d8>)
 8001f16:	4937      	ldr	r1, [pc, #220]	; (8001ff4 <RDMSensorsParams::Set()+0x2dc>)
 8001f18:	e9c9 2302 	strd	r2, r3, [r9, #8]
 8001f1c:	2328      	movs	r3, #40	; 0x28
 8001f1e:	f8a9 3010 	strh.w	r3, [r9, #16]
 8001f22:	e72e      	b.n	8001d82 <RDMSensorsParams::Set()+0x6a>
 8001f24:	204c      	movs	r0, #76	; 0x4c
 8001f26:	f005 fe28 	bl	8007b7a <operator new(unsigned int)>
 8001f2a:	4621      	mov	r1, r4
 8001f2c:	4682      	mov	sl, r0
 8001f2e:	f000 f86d 	bl	800200c <RDMSensor::RDMSensor(unsigned char)>
 8001f32:	4631      	mov	r1, r6
 8001f34:	f10a 0040 	add.w	r0, sl, #64	; 0x40
 8001f38:	f000 fb56 	bl	80025e8 <sensor::SI7021::SI7021(unsigned char)>
 8001f3c:	4a2e      	ldr	r2, [pc, #184]	; (8001ff8 <RDMSensorsParams::Set()+0x2e0>)
 8001f3e:	f8ca 2000 	str.w	r2, [sl]
 8001f42:	221f      	movs	r2, #31
 8001f44:	f88a 2007 	strb.w	r2, [sl, #7]
 8001f48:	f04f 0900 	mov.w	r9, #0
 8001f4c:	2264      	movs	r2, #100	; 0x64
 8001f4e:	492b      	ldr	r1, [pc, #172]	; (8001ffc <RDMSensorsParams::Set()+0x2e4>)
 8001f50:	f8aa 2010 	strh.w	r2, [sl, #16]
 8001f54:	4650      	mov	r0, sl
 8001f56:	e9ca 9202 	strd	r9, r2, [sl, #8]
 8001f5a:	f000 f869 	bl	8002030 <RDMSensor::SetDescription(char const*)>
 8001f5e:	4651      	mov	r1, sl
 8001f60:	4628      	mov	r0, r5
 8001f62:	f7ff fec3 	bl	8001cec <RDMSensorsParams::Add(RDMSensor*)>
 8001f66:	2800      	cmp	r0, #0
 8001f68:	f43f af12 	beq.w	8001d90 <RDMSensorsParams::Set()+0x78>
 8001f6c:	204c      	movs	r0, #76	; 0x4c
 8001f6e:	f005 fe04 	bl	8007b7a <operator new(unsigned int)>
 8001f72:	1c61      	adds	r1, r4, #1
 8001f74:	4682      	mov	sl, r0
 8001f76:	b2c9      	uxtb	r1, r1
 8001f78:	f000 f848 	bl	800200c <RDMSensor::RDMSensor(unsigned char)>
 8001f7c:	4631      	mov	r1, r6
 8001f7e:	f10a 0040 	add.w	r0, sl, #64	; 0x40
 8001f82:	f000 fb31 	bl	80025e8 <sensor::SI7021::SI7021(unsigned char)>
 8001f86:	4a1e      	ldr	r2, [pc, #120]	; (8002000 <RDMSensorsParams::Set()+0x2e8>)
 8001f88:	4b0a      	ldr	r3, [pc, #40]	; (8001fb4 <RDMSensorsParams::Set()+0x29c>)
 8001f8a:	f8ca 2000 	str.w	r2, [sl]
 8001f8e:	227d      	movs	r2, #125	; 0x7d
 8001f90:	e9ca 3b02 	strd	r3, fp, [sl, #8]
 8001f94:	491b      	ldr	r1, [pc, #108]	; (8002004 <RDMSensorsParams::Set()+0x2ec>)
 8001f96:	f88a 9007 	strb.w	r9, [sl, #7]
 8001f9a:	f8aa 2010 	strh.w	r2, [sl, #16]
 8001f9e:	e737      	b.n	8001e10 <RDMSensorsParams::Set()+0xf8>
 8001fa0:	200001f8 	strdcs	r0, [r0], -r8
 8001fa4:	08009838 	stmdaeq	r0, {r3, r4, r5, fp, ip, pc}
 8001fa8:	08009908 	stmdaeq	r0, {r3, r8, fp, ip, pc}
 8001fac:	08009868 	stmdaeq	r0, {r3, r5, r6, fp, ip, pc}
 8001fb0:	0800992a 	stmdaeq	r0, {r1, r3, r5, r8, fp, ip, pc}
 8001fb4:	ffd80001 			; <UNDEFINED> instruction: 0xffd80001
 8001fb8:	08009880 	stmdaeq	r0, {r7, fp, ip, pc}
 8001fbc:	08009916 	stmdaeq	r0, {r1, r2, r4, r8, fp, ip, pc}
 8001fc0:	08009898 	stmdaeq	r0, {r3, r4, r7, fp, ip, pc}
 8001fc4:	f8300305 			; <UNDEFINED> instruction: 0xf8300305
 8001fc8:	08009942 	stmdaeq	r0, {r1, r6, r8, fp, ip, pc}
 8001fcc:	080098b0 	stmdaeq	r0, {r4, r5, r7, fp, ip, pc}
 8001fd0:	ffc00305 			; <UNDEFINED> instruction: 0xffc00305
 8001fd4:	0800993c 	stmdaeq	r0, {r2, r3, r4, r5, r8, fp, ip, pc}
 8001fd8:	080098c8 	stmdaeq	r0, {r3, r6, r7, fp, ip, pc}
 8001fdc:	83000305 	movwhi	r0, #773	; 0x305
 8001fe0:	83007d00 	movwhi	r7, #3328	; 0xd00
 8001fe4:	0800994a 	stmdaeq	r0, {r1, r3, r6, r8, fp, ip, pc}
 8001fe8:	08009850 	stmdaeq	r0, {r4, r6, fp, ip, pc}
 8001fec:	ffec0001 			; <UNDEFINED> instruction: 0xffec0001
 8001ff0:	00120064 	andseq	r0, r2, r4, rrx
 8001ff4:	08009978 	stmdaeq	r0, {r3, r4, r5, r6, r8, fp, ip, pc}
 8001ff8:	080098e0 	stmdaeq	r0, {r5, r6, r7, fp, ip, pc}
 8001ffc:	08009966 	stmdaeq	r0, {r1, r2, r5, r6, r8, fp, ip, pc}
 8002000:	080098f8 	stmdaeq	r0, {r3, r4, r5, r6, r7, fp, ip, pc}
 8002004:	08009952 	stmdaeq	r0, {r1, r4, r6, r8, fp, ip, pc}
 8002008:	ffd8007d 			; <UNDEFINED> instruction: 0xffd8007d

0800200c <RDMSensor::RDMSensor(unsigned char)>:
 800200c:	4a07      	ldr	r2, [pc, #28]	; (800202c <RDMSensor::RDMSensor(unsigned char)+0x20>)
 800200e:	6002      	str	r2, [r0, #0]
 8002010:	2203      	movs	r2, #3
 8002012:	f880 2033 	strb.w	r2, [r0, #51]	; 0x33
 8002016:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800201a:	86c2      	strh	r2, [r0, #54]	; 0x36
 800201c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002020:	7101      	strb	r1, [r0, #4]
 8002022:	7181      	strb	r1, [r0, #6]
 8002024:	f880 103c 	strb.w	r1, [r0, #60]	; 0x3c
 8002028:	8702      	strh	r2, [r0, #56]	; 0x38
 800202a:	4770      	bx	lr
 800202c:	08009994 	stmdaeq	r0, {r2, r4, r7, r8, fp, ip, pc}

08002030 <RDMSensor::SetDescription(char const*)>:
 8002030:	b510      	push	{r4, lr}
 8002032:	2300      	movs	r3, #0
 8002034:	f100 0412 	add.w	r4, r0, #18
 8002038:	5cca      	ldrb	r2, [r1, r3]
 800203a:	b122      	cbz	r2, 8002046 <RDMSensor::SetDescription(char const*)+0x16>
 800203c:	3301      	adds	r3, #1
 800203e:	2b20      	cmp	r3, #32
 8002040:	f804 2b01 	strb.w	r2, [r4], #1
 8002044:	d1f8      	bne.n	8002038 <RDMSensor::SetDescription(char const*)+0x8>
 8002046:	f880 3032 	strb.w	r3, [r0, #50]	; 0x32
 800204a:	bd10      	pop	{r4, pc}

0800204c <RDMSensor::GetValues()>:
 800204c:	6803      	ldr	r3, [r0, #0]
 800204e:	b510      	push	{r4, lr}
 8002050:	68db      	ldr	r3, [r3, #12]
 8002052:	4604      	mov	r4, r0
 8002054:	4798      	blx	r3
 8002056:	f9b4 3036 	ldrsh.w	r3, [r4, #54]	; 0x36
 800205a:	86a0      	strh	r0, [r4, #52]	; 0x34
 800205c:	4283      	cmp	r3, r0
 800205e:	bfa8      	it	ge
 8002060:	4603      	movge	r3, r0
 8002062:	86e3      	strh	r3, [r4, #54]	; 0x36
 8002064:	f9b4 3038 	ldrsh.w	r3, [r4, #56]	; 0x38
 8002068:	4283      	cmp	r3, r0
 800206a:	bfb8      	it	lt
 800206c:	4603      	movlt	r3, r0
 800206e:	8723      	strh	r3, [r4, #56]	; 0x38
 8002070:	f104 0034 	add.w	r0, r4, #52	; 0x34
 8002074:	bd10      	pop	{r4, pc}

08002076 <RDMSensor::SetValues()>:
 8002076:	6803      	ldr	r3, [r0, #0]
 8002078:	b510      	push	{r4, lr}
 800207a:	68db      	ldr	r3, [r3, #12]
 800207c:	4604      	mov	r4, r0
 800207e:	4798      	blx	r3
 8002080:	86a0      	strh	r0, [r4, #52]	; 0x34
 8002082:	86e0      	strh	r0, [r4, #54]	; 0x36
 8002084:	8720      	strh	r0, [r4, #56]	; 0x38
 8002086:	8760      	strh	r0, [r4, #58]	; 0x3a
 8002088:	bd10      	pop	{r4, pc}

0800208a <RDMSensor::Record()>:
 800208a:	6803      	ldr	r3, [r0, #0]
 800208c:	b510      	push	{r4, lr}
 800208e:	68db      	ldr	r3, [r3, #12]
 8002090:	4604      	mov	r4, r0
 8002092:	4798      	blx	r3
 8002094:	f9b4 3036 	ldrsh.w	r3, [r4, #54]	; 0x36
 8002098:	86a0      	strh	r0, [r4, #52]	; 0x34
 800209a:	4283      	cmp	r3, r0
 800209c:	bfa8      	it	ge
 800209e:	4603      	movge	r3, r0
 80020a0:	86e3      	strh	r3, [r4, #54]	; 0x36
 80020a2:	f9b4 3038 	ldrsh.w	r3, [r4, #56]	; 0x38
 80020a6:	8760      	strh	r0, [r4, #58]	; 0x3a
 80020a8:	4283      	cmp	r3, r0
 80020aa:	bfb8      	it	lt
 80020ac:	4603      	movlt	r3, r0
 80020ae:	8723      	strh	r3, [r4, #56]	; 0x38
 80020b0:	bd10      	pop	{r4, pc}

080020b2 <HAL_I2C::Write(char)>:
 80020b2:	b513      	push	{r0, r1, r4, lr}
 80020b4:	4604      	mov	r4, r0
 80020b6:	7800      	ldrb	r0, [r0, #0]
 80020b8:	f88d 1007 	strb.w	r1, [sp, #7]
 80020bc:	f006 fe00 	bl	8008cc0 <gd32_i2c_set_address>
 80020c0:	6860      	ldr	r0, [r4, #4]
 80020c2:	f006 fdf5 	bl	8008cb0 <gd32_i2c_set_baudrate>
 80020c6:	2101      	movs	r1, #1
 80020c8:	f10d 0007 	add.w	r0, sp, #7
 80020cc:	f006 fdfe 	bl	8008ccc <gd32_i2c_write>
 80020d0:	b002      	add	sp, #8
 80020d2:	bd10      	pop	{r4, pc}

080020d4 <sensor::BH170::BH170(unsigned char)>:
 80020d4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80020d6:	1e0c      	subs	r4, r1, #0
 80020d8:	bf08      	it	eq
 80020da:	2423      	moveq	r4, #35	; 0x23
 80020dc:	4f16      	ldr	r7, [pc, #88]	; (8002138 <sensor::BH170::BH170(unsigned char)+0x64>)
 80020de:	7004      	strb	r4, [r0, #0]
 80020e0:	2600      	movs	r6, #0
 80020e2:	6047      	str	r7, [r0, #4]
 80020e4:	7206      	strb	r6, [r0, #8]
 80020e6:	4605      	mov	r5, r0
 80020e8:	4620      	mov	r0, r4
 80020ea:	f006 fde9 	bl	8008cc0 <gd32_i2c_set_address>
 80020ee:	4638      	mov	r0, r7
 80020f0:	f006 fdde 	bl	8008cb0 <gd32_i2c_set_baudrate>
 80020f4:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 80020f8:	2b07      	cmp	r3, #7
 80020fa:	d902      	bls.n	8002102 <sensor::BH170::BH170(unsigned char)+0x2e>
 80020fc:	3c50      	subs	r4, #80	; 0x50
 80020fe:	2c0f      	cmp	r4, #15
 8002100:	d814      	bhi.n	800212c <sensor::BH170::BH170(unsigned char)+0x58>
 8002102:	2101      	movs	r1, #1
 8002104:	f10d 0007 	add.w	r0, sp, #7
 8002108:	f006 fe46 	bl	8008d98 <gd32_i2c_read>
 800210c:	fab0 f080 	clz	r0, r0
 8002110:	0940      	lsrs	r0, r0, #5
 8002112:	7228      	strb	r0, [r5, #8]
 8002114:	b138      	cbz	r0, 8002126 <sensor::BH170::BH170(unsigned char)+0x52>
 8002116:	2101      	movs	r1, #1
 8002118:	4628      	mov	r0, r5
 800211a:	f7ff ffca 	bl	80020b2 <HAL_I2C::Write(char)>
 800211e:	2110      	movs	r1, #16
 8002120:	4628      	mov	r0, r5
 8002122:	f7ff ffc6 	bl	80020b2 <HAL_I2C::Write(char)>
 8002126:	4628      	mov	r0, r5
 8002128:	b003      	add	sp, #12
 800212a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800212c:	4631      	mov	r1, r6
 800212e:	4630      	mov	r0, r6
 8002130:	f006 fdcc 	bl	8008ccc <gd32_i2c_write>
 8002134:	e7ea      	b.n	800210c <sensor::BH170::BH170(unsigned char)+0x38>
 8002136:	bf00      	nop
 8002138:	00061a80 	andeq	r1, r6, r0, lsl #21

0800213c <sensor::BH170::Get()>:
 800213c:	b513      	push	{r0, r1, r4, lr}
 800213e:	4604      	mov	r4, r0
 8002140:	2300      	movs	r3, #0
 8002142:	7800      	ldrb	r0, [r0, #0]
 8002144:	f8ad 3004 	strh.w	r3, [sp, #4]
 8002148:	f006 fdba 	bl	8008cc0 <gd32_i2c_set_address>
 800214c:	6860      	ldr	r0, [r4, #4]
 800214e:	f006 fdaf 	bl	8008cb0 <gd32_i2c_set_baudrate>
 8002152:	2102      	movs	r1, #2
 8002154:	a801      	add	r0, sp, #4
 8002156:	f006 fe1f 	bl	8008d98 <gd32_i2c_read>
 800215a:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 800215e:	eddf 6a08 	vldr	s13, [pc, #32]	; 8002180 <sensor::BH170::Get()+0x44>
 8002162:	ba5b      	rev16	r3, r3
 8002164:	b29b      	uxth	r3, r3
 8002166:	ee07 3a90 	vmov	s15, r3
 800216a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800216e:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8002172:	eefc 7ac7 	vcvt.u32.f32	s15, s14
 8002176:	ee17 3a90 	vmov	r3, s15
 800217a:	b298      	uxth	r0, r3
 800217c:	b002      	add	sp, #8
 800217e:	bd10      	pop	{r4, pc}
 8002180:	3f99999a 	svccc	0x0099999a

08002184 <sensor::HTU21D::HTU21D(unsigned char)>:
 8002184:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002186:	1e0c      	subs	r4, r1, #0
 8002188:	bf08      	it	eq
 800218a:	2440      	moveq	r4, #64	; 0x40
 800218c:	4f11      	ldr	r7, [pc, #68]	; (80021d4 <sensor::HTU21D::HTU21D(unsigned char)+0x50>)
 800218e:	7004      	strb	r4, [r0, #0]
 8002190:	2600      	movs	r6, #0
 8002192:	6047      	str	r7, [r0, #4]
 8002194:	7206      	strb	r6, [r0, #8]
 8002196:	4605      	mov	r5, r0
 8002198:	4620      	mov	r0, r4
 800219a:	f006 fd91 	bl	8008cc0 <gd32_i2c_set_address>
 800219e:	4638      	mov	r0, r7
 80021a0:	f006 fd86 	bl	8008cb0 <gd32_i2c_set_baudrate>
 80021a4:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 80021a8:	2b07      	cmp	r3, #7
 80021aa:	d902      	bls.n	80021b2 <sensor::HTU21D::HTU21D(unsigned char)+0x2e>
 80021ac:	3c50      	subs	r4, #80	; 0x50
 80021ae:	2c0f      	cmp	r4, #15
 80021b0:	d80b      	bhi.n	80021ca <sensor::HTU21D::HTU21D(unsigned char)+0x46>
 80021b2:	2101      	movs	r1, #1
 80021b4:	f10d 0007 	add.w	r0, sp, #7
 80021b8:	f006 fdee 	bl	8008d98 <gd32_i2c_read>
 80021bc:	fab0 f380 	clz	r3, r0
 80021c0:	095b      	lsrs	r3, r3, #5
 80021c2:	4628      	mov	r0, r5
 80021c4:	722b      	strb	r3, [r5, #8]
 80021c6:	b003      	add	sp, #12
 80021c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80021ca:	4631      	mov	r1, r6
 80021cc:	4630      	mov	r0, r6
 80021ce:	f006 fd7d 	bl	8008ccc <gd32_i2c_write>
 80021d2:	e7f3      	b.n	80021bc <sensor::HTU21D::HTU21D(unsigned char)+0x38>
 80021d4:	00061a80 	andeq	r1, r6, r0, lsl #21

080021d8 <sensor::HTU21D::ReadRaw(unsigned char)>:
 80021d8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80021da:	4604      	mov	r4, r0
 80021dc:	7800      	ldrb	r0, [r0, #0]
 80021de:	f88d 1004 	strb.w	r1, [sp, #4]
 80021e2:	f006 fd6d 	bl	8008cc0 <gd32_i2c_set_address>
 80021e6:	6860      	ldr	r0, [r4, #4]
 80021e8:	f006 fd62 	bl	8008cb0 <gd32_i2c_set_baudrate>
 80021ec:	2101      	movs	r1, #1
 80021ee:	a801      	add	r0, sp, #4
 80021f0:	f006 fd6c 	bl	8008ccc <gd32_i2c_write>
 80021f4:	4b13      	ldr	r3, [pc, #76]	; (8002244 <sensor::HTU21D::ReadRaw(unsigned char)+0x6c>)
 80021f6:	881b      	ldrh	r3, [r3, #0]
 80021f8:	f8ad 3004 	strh.w	r3, [sp, #4]
 80021fc:	2300      	movs	r3, #0
 80021fe:	f88d 3006 	strb.w	r3, [sp, #6]
 8002202:	2508      	movs	r5, #8
 8002204:	2100      	movs	r1, #0
 8002206:	f242 7010 	movw	r0, #10000	; 0x2710
 800220a:	f007 f80b 	bl	8009224 <udelay(unsigned int, unsigned int)>
 800220e:	7820      	ldrb	r0, [r4, #0]
 8002210:	f006 fd56 	bl	8008cc0 <gd32_i2c_set_address>
 8002214:	6860      	ldr	r0, [r4, #4]
 8002216:	f006 fd4b 	bl	8008cb0 <gd32_i2c_set_baudrate>
 800221a:	2103      	movs	r1, #3
 800221c:	a801      	add	r0, sp, #4
 800221e:	f006 fdbb 	bl	8008d98 <gd32_i2c_read>
 8002222:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8002226:	f003 0303 	and.w	r3, r3, #3
 800222a:	2b02      	cmp	r3, #2
 800222c:	d001      	beq.n	8002232 <sensor::HTU21D::ReadRaw(unsigned char)+0x5a>
 800222e:	3d01      	subs	r5, #1
 8002230:	d1e8      	bne.n	8002204 <sensor::HTU21D::ReadRaw(unsigned char)+0x2c>
 8002232:	f8bd 0004 	ldrh.w	r0, [sp, #4]
 8002236:	ba40      	rev16	r0, r0
 8002238:	f020 0003 	bic.w	r0, r0, #3
 800223c:	b280      	uxth	r0, r0
 800223e:	b003      	add	sp, #12
 8002240:	bd30      	pop	{r4, r5, pc}
 8002242:	bf00      	nop
 8002244:	08009690 	stmdaeq	r0, {r4, r7, r9, sl, ip, pc}

08002248 <sensor::HTU21D::GetTemperature()>:
 8002248:	b508      	push	{r3, lr}
 800224a:	21f3      	movs	r1, #243	; 0xf3
 800224c:	f7ff ffc4 	bl	80021d8 <sensor::HTU21D::ReadRaw(unsigned char)>
 8002250:	ee07 0a90 	vmov	s15, r0
 8002254:	ed9f 7a04 	vldr	s14, [pc, #16]	; 8002268 <sensor::HTU21D::GetTemperature()+0x20>
 8002258:	ed9f 0a04 	vldr	s0, [pc, #16]	; 800226c <sensor::HTU21D::GetTemperature()+0x24>
 800225c:	eefb 7ac8 	vcvt.f32.u32	s15, s15, #16
 8002260:	eea7 0a87 	vfma.f32	s0, s15, s14
 8002264:	bd08      	pop	{r3, pc}
 8002266:	bf00      	nop
 8002268:	432fb852 			; <UNDEFINED> instruction: 0x432fb852
 800226c:	c23b6666 	eorsgt	r6, fp, #106954752	; 0x6600000

08002270 <sensor::HTU21D::GetHumidity()>:
 8002270:	b508      	push	{r3, lr}
 8002272:	21f5      	movs	r1, #245	; 0xf5
 8002274:	f7ff ffb0 	bl	80021d8 <sensor::HTU21D::ReadRaw(unsigned char)>
 8002278:	ee07 0a90 	vmov	s15, r0
 800227c:	ed9f 7a04 	vldr	s14, [pc, #16]	; 8002290 <sensor::HTU21D::GetHumidity()+0x20>
 8002280:	eefb 7ac8 	vcvt.f32.u32	s15, s15, #16
 8002284:	eeb9 0a08 	vmov.f32	s0, #152	; 0xc0c00000 -6.0
 8002288:	eea7 0a87 	vfma.f32	s0, s15, s14
 800228c:	bd08      	pop	{r3, pc}
 800228e:	bf00      	nop
 8002290:	42fa0000 	rscsmi	r0, sl, #0

08002294 <HAL_I2C::WriteRegister(unsigned char, unsigned short)>:
 8002294:	b513      	push	{r0, r1, r4, lr}
 8002296:	4604      	mov	r4, r0
 8002298:	0a13      	lsrs	r3, r2, #8
 800229a:	7800      	ldrb	r0, [r0, #0]
 800229c:	f88d 1004 	strb.w	r1, [sp, #4]
 80022a0:	f88d 3005 	strb.w	r3, [sp, #5]
 80022a4:	f88d 2006 	strb.w	r2, [sp, #6]
 80022a8:	f006 fd0a 	bl	8008cc0 <gd32_i2c_set_address>
 80022ac:	6860      	ldr	r0, [r4, #4]
 80022ae:	f006 fcff 	bl	8008cb0 <gd32_i2c_set_baudrate>
 80022b2:	2103      	movs	r1, #3
 80022b4:	a801      	add	r0, sp, #4
 80022b6:	f006 fd09 	bl	8008ccc <gd32_i2c_write>
 80022ba:	b002      	add	sp, #8
 80022bc:	bd10      	pop	{r4, pc}

080022be <HAL_I2C::ReadRegister16DelayUs(unsigned char, unsigned int)>:
 80022be:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80022c0:	4604      	mov	r4, r0
 80022c2:	2600      	movs	r6, #0
 80022c4:	7800      	ldrb	r0, [r0, #0]
 80022c6:	f8ad 6004 	strh.w	r6, [sp, #4]
 80022ca:	4615      	mov	r5, r2
 80022cc:	f88d 1004 	strb.w	r1, [sp, #4]
 80022d0:	f006 fcf6 	bl	8008cc0 <gd32_i2c_set_address>
 80022d4:	6860      	ldr	r0, [r4, #4]
 80022d6:	f006 fceb 	bl	8008cb0 <gd32_i2c_set_baudrate>
 80022da:	2101      	movs	r1, #1
 80022dc:	a801      	add	r0, sp, #4
 80022de:	f006 fcf5 	bl	8008ccc <gd32_i2c_write>
 80022e2:	4631      	mov	r1, r6
 80022e4:	4628      	mov	r0, r5
 80022e6:	f006 ff9d 	bl	8009224 <udelay(unsigned int, unsigned int)>
 80022ea:	2102      	movs	r1, #2
 80022ec:	a801      	add	r0, sp, #4
 80022ee:	f006 fd53 	bl	8008d98 <gd32_i2c_read>
 80022f2:	f8bd 0004 	ldrh.w	r0, [sp, #4]
 80022f6:	ba40      	rev16	r0, r0
 80022f8:	b280      	uxth	r0, r0
 80022fa:	b002      	add	sp, #8
 80022fc:	bd70      	pop	{r4, r5, r6, pc}
	...

08002300 <sensor::INA219::Configure(sensor::ina219::Config&)>:
 8002300:	880b      	ldrh	r3, [r1, #0]
 8002302:	b510      	push	{r4, lr}
 8002304:	b1d3      	cbz	r3, 800233c <sensor::INA219::Configure(sensor::ina219::Config&)+0x3c>
 8002306:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800230a:	d102      	bne.n	8002312 <sensor::INA219::Configure(sensor::ina219::Config&)+0x12>
 800230c:	f04f 4284 	mov.w	r2, #1107296256	; 0x42000000
 8002310:	6182      	str	r2, [r0, #24]
 8002312:	884a      	ldrh	r2, [r1, #2]
 8002314:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 8002318:	d019      	beq.n	800234e <sensor::INA219::Configure(sensor::ina219::Config&)+0x4e>
 800231a:	d812      	bhi.n	8002342 <sensor::INA219::Configure(sensor::ina219::Config&)+0x42>
 800231c:	b1da      	cbz	r2, 8002356 <sensor::INA219::Configure(sensor::ina219::Config&)+0x56>
 800231e:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 8002322:	d016      	beq.n	8002352 <sensor::INA219::Configure(sensor::ina219::Config&)+0x52>
 8002324:	431a      	orrs	r2, r3
 8002326:	888b      	ldrh	r3, [r1, #4]
 8002328:	431a      	orrs	r2, r3
 800232a:	88cb      	ldrh	r3, [r1, #6]
 800232c:	431a      	orrs	r2, r3
 800232e:	890b      	ldrh	r3, [r1, #8]
 8002330:	431a      	orrs	r2, r3
 8002332:	b292      	uxth	r2, r2
 8002334:	2100      	movs	r1, #0
 8002336:	f7ff ffad 	bl	8002294 <HAL_I2C::WriteRegister(unsigned char, unsigned short)>
 800233a:	bd10      	pop	{r4, pc}
 800233c:	f04f 4283 	mov.w	r2, #1098907648	; 0x41800000
 8002340:	e7e6      	b.n	8002310 <sensor::INA219::Configure(sensor::ina219::Config&)+0x10>
 8002342:	f5b2 5fc0 	cmp.w	r2, #6144	; 0x1800
 8002346:	d1ed      	bne.n	8002324 <sensor::INA219::Configure(sensor::ina219::Config&)+0x24>
 8002348:	4c04      	ldr	r4, [pc, #16]	; (800235c <sensor::INA219::Configure(sensor::ina219::Config&)+0x5c>)
 800234a:	6144      	str	r4, [r0, #20]
 800234c:	e7ea      	b.n	8002324 <sensor::INA219::Configure(sensor::ina219::Config&)+0x24>
 800234e:	4c04      	ldr	r4, [pc, #16]	; (8002360 <sensor::INA219::Configure(sensor::ina219::Config&)+0x60>)
 8002350:	e7fb      	b.n	800234a <sensor::INA219::Configure(sensor::ina219::Config&)+0x4a>
 8002352:	4c04      	ldr	r4, [pc, #16]	; (8002364 <sensor::INA219::Configure(sensor::ina219::Config&)+0x64>)
 8002354:	e7f9      	b.n	800234a <sensor::INA219::Configure(sensor::ina219::Config&)+0x4a>
 8002356:	4c04      	ldr	r4, [pc, #16]	; (8002368 <sensor::INA219::Configure(sensor::ina219::Config&)+0x68>)
 8002358:	e7f7      	b.n	800234a <sensor::INA219::Configure(sensor::ina219::Config&)+0x4a>
 800235a:	bf00      	nop
 800235c:	3ea3d70a 	cdpcc	7, 10, cr13, cr3, cr10, {0}
 8002360:	3e23d70a 	cdpcc	7, 2, cr13, cr3, cr10, {0}
 8002364:	3da3d70a 	stccc	7, cr13, [r3, #40]!	; 0x28
 8002368:	3d23d70a 	stccc	7, cr13, [r3, #-40]!	; 0xffffffd8

0800236c <sensor::INA219::Calibrate(float, float)>:
 800236c:	ed9f 7a21 	vldr	s14, [pc, #132]	; 80023f4 <sensor::INA219::Calibrate(float, float)+0x88>
 8002370:	eddf 6a21 	vldr	s13, [pc, #132]	; 80023f8 <sensor::INA219::Calibrate(float, float)+0x8c>
 8002374:	ed80 0a07 	vstr	s0, [r0, #28]
 8002378:	eec0 7a87 	vdiv.f32	s15, s1, s14
 800237c:	b508      	push	{r3, lr}
 800237e:	2105      	movs	r1, #5
 8002380:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 80023fc <sensor::INA219::Calibrate(float, float)+0x90>
 8002384:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002388:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800238c:	ee17 3a90 	vmov	r3, s15
 8002390:	b29b      	uxth	r3, r3
 8002392:	ee07 3a90 	vmov	s15, r3
 8002396:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800239a:	eec7 5a87 	vdiv.f32	s11, s15, s14
 800239e:	ee85 6aa6 	vdiv.f32	s12, s11, s13
 80023a2:	eebd 7ac6 	vcvt.s32.f32	s14, s12
 80023a6:	eef8 7ac7 	vcvt.f32.s32	s15, s14
 80023aa:	eeb4 6a67 	vcmp.f32	s12, s15
 80023ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80023b2:	bf1f      	itttt	ne
 80023b4:	ee17 3a10 	vmovne	r3, s14
 80023b8:	3301      	addne	r3, #1
 80023ba:	ee07 3a10 	vmovne	s14, r3
 80023be:	eef8 7ac7 	vcvtne.f32.s32	s15, s14
 80023c2:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 80023c6:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80023ca:	ee27 7a87 	vmul.f32	s14, s15, s14
 80023ce:	ee27 0a80 	vmul.f32	s0, s15, s0
 80023d2:	ed80 7a04 	vstr	s14, [r0, #16]
 80023d6:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 8002400 <sensor::INA219::Calibrate(float, float)+0x94>
 80023da:	edc0 7a03 	vstr	s15, [r0, #12]
 80023de:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80023e2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80023e6:	ee17 3a90 	vmov	r3, s15
 80023ea:	b29a      	uxth	r2, r3
 80023ec:	f7ff ff52 	bl	8002294 <HAL_I2C::WriteRegister(unsigned char, unsigned short)>
 80023f0:	bd08      	pop	{r3, pc}
 80023f2:	bf00      	nop
 80023f4:	46fffe00 	ldrbtmi	pc, [pc], r0, lsl #28	; <UNPREDICTABLE>
 80023f8:	38d1b717 	ldmcc	r1, {r0, r1, r2, r4, r8, r9, sl, ip, sp, pc}^
 80023fc:	4cbebc20 	ldcmi	12, cr11, [lr], #128	; 0x80
 8002400:	3d27c5ac 	cfstr32cc	mvfx12, [r7, #-688]!	; 0xfffffd50

08002404 <sensor::INA219::INA219(unsigned char)>:
 8002404:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002406:	1e0c      	subs	r4, r1, #0
 8002408:	bf08      	it	eq
 800240a:	2440      	moveq	r4, #64	; 0x40
 800240c:	4f1b      	ldr	r7, [pc, #108]	; (800247c <sensor::INA219::INA219(unsigned char)+0x78>)
 800240e:	7004      	strb	r4, [r0, #0]
 8002410:	2600      	movs	r6, #0
 8002412:	b085      	sub	sp, #20
 8002414:	6047      	str	r7, [r0, #4]
 8002416:	7206      	strb	r6, [r0, #8]
 8002418:	4605      	mov	r5, r0
 800241a:	4620      	mov	r0, r4
 800241c:	f006 fc50 	bl	8008cc0 <gd32_i2c_set_address>
 8002420:	4638      	mov	r0, r7
 8002422:	f006 fc45 	bl	8008cb0 <gd32_i2c_set_baudrate>
 8002426:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 800242a:	2b07      	cmp	r3, #7
 800242c:	d902      	bls.n	8002434 <sensor::INA219::INA219(unsigned char)+0x30>
 800242e:	3c50      	subs	r4, #80	; 0x50
 8002430:	2c0f      	cmp	r4, #15
 8002432:	d81d      	bhi.n	8002470 <sensor::INA219::INA219(unsigned char)+0x6c>
 8002434:	2101      	movs	r1, #1
 8002436:	a801      	add	r0, sp, #4
 8002438:	f006 fcae 	bl	8008d98 <gd32_i2c_read>
 800243c:	fab0 f080 	clz	r0, r0
 8002440:	0940      	lsrs	r0, r0, #5
 8002442:	7228      	strb	r0, [r5, #8]
 8002444:	b188      	cbz	r0, 800246a <sensor::INA219::INA219(unsigned char)+0x66>
 8002446:	4a0e      	ldr	r2, [pc, #56]	; (8002480 <sensor::INA219::INA219(unsigned char)+0x7c>)
 8002448:	6810      	ldr	r0, [r2, #0]
 800244a:	6851      	ldr	r1, [r2, #4]
 800244c:	8912      	ldrh	r2, [r2, #8]
 800244e:	ab01      	add	r3, sp, #4
 8002450:	c303      	stmia	r3!, {r0, r1}
 8002452:	4628      	mov	r0, r5
 8002454:	801a      	strh	r2, [r3, #0]
 8002456:	a901      	add	r1, sp, #4
 8002458:	f7ff ff52 	bl	8002300 <sensor::INA219::Configure(sensor::ina219::Config&)>
 800245c:	ed9f 0a09 	vldr	s0, [pc, #36]	; 8002484 <sensor::INA219::INA219(unsigned char)+0x80>
 8002460:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 8002464:	4628      	mov	r0, r5
 8002466:	f7ff ff81 	bl	800236c <sensor::INA219::Calibrate(float, float)>
 800246a:	4628      	mov	r0, r5
 800246c:	b005      	add	sp, #20
 800246e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002470:	4631      	mov	r1, r6
 8002472:	4630      	mov	r0, r6
 8002474:	f006 fc2a 	bl	8008ccc <gd32_i2c_write>
 8002478:	e7e0      	b.n	800243c <sensor::INA219::INA219(unsigned char)+0x38>
 800247a:	bf00      	nop
 800247c:	00061a80 	andeq	r1, r6, r0, lsl #21
 8002480:	08009694 	stmdaeq	r0, {r2, r4, r7, r9, sl, ip, pc}
 8002484:	3dcccccd 	stclcc	12, cr12, [ip, #820]	; 0x334

08002488 <sensor::INA219::GetShuntCurrent()>:
 8002488:	b510      	push	{r4, lr}
 800248a:	f44f 7248 	mov.w	r2, #800	; 0x320
 800248e:	2104      	movs	r1, #4
 8002490:	4604      	mov	r4, r0
 8002492:	f7ff ff14 	bl	80022be <HAL_I2C::ReadRegister16DelayUs(unsigned char, unsigned int)>
 8002496:	ee07 0a90 	vmov	s15, r0
 800249a:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 800249e:	edd4 7a03 	vldr	s15, [r4, #12]
 80024a2:	ee20 0a27 	vmul.f32	s0, s0, s15
 80024a6:	bd10      	pop	{r4, pc}

080024a8 <sensor::INA219::GetBusVoltageRaw()>:
 80024a8:	b508      	push	{r3, lr}
 80024aa:	f44f 7248 	mov.w	r2, #800	; 0x320
 80024ae:	2102      	movs	r1, #2
 80024b0:	f7ff ff05 	bl	80022be <HAL_I2C::ReadRegister16DelayUs(unsigned char, unsigned int)>
 80024b4:	f340 004f 	sbfx	r0, r0, #1, #16
 80024b8:	f020 0003 	bic.w	r0, r0, #3
 80024bc:	bd08      	pop	{r3, pc}
	...

080024c0 <sensor::INA219::GetBusVoltage()>:
 80024c0:	b508      	push	{r3, lr}
 80024c2:	f7ff fff1 	bl	80024a8 <sensor::INA219::GetBusVoltageRaw()>
 80024c6:	ee07 0a90 	vmov	s15, r0
 80024ca:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 80024ce:	eddf 7a02 	vldr	s15, [pc, #8]	; 80024d8 <sensor::INA219::GetBusVoltage()+0x18>
 80024d2:	ee20 0a27 	vmul.f32	s0, s0, s15
 80024d6:	bd08      	pop	{r3, pc}
 80024d8:	3a83126f 	bcc	60c6e9c <__heap_size+0x60c5e9c>

080024dc <sensor::INA219::GetBusPower()>:
 80024dc:	b510      	push	{r4, lr}
 80024de:	f44f 7248 	mov.w	r2, #800	; 0x320
 80024e2:	2103      	movs	r1, #3
 80024e4:	4604      	mov	r4, r0
 80024e6:	f7ff feea 	bl	80022be <HAL_I2C::ReadRegister16DelayUs(unsigned char, unsigned int)>
 80024ea:	ee07 0a90 	vmov	s15, r0
 80024ee:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 80024f2:	edd4 7a04 	vldr	s15, [r4, #16]
 80024f6:	ee20 0a27 	vmul.f32	s0, s0, s15
 80024fa:	bd10      	pop	{r4, pc}

080024fc <HAL_I2C::ReadRegister16(unsigned char)>:
 80024fc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80024fe:	4604      	mov	r4, r0
 8002500:	2501      	movs	r5, #1
 8002502:	7800      	ldrb	r0, [r0, #0]
 8002504:	f88d 1000 	strb.w	r1, [sp]
 8002508:	f88d 5001 	strb.w	r5, [sp, #1]
 800250c:	f006 fbd8 	bl	8008cc0 <gd32_i2c_set_address>
 8002510:	6860      	ldr	r0, [r4, #4]
 8002512:	f006 fbcd 	bl	8008cb0 <gd32_i2c_set_baudrate>
 8002516:	4629      	mov	r1, r5
 8002518:	4668      	mov	r0, sp
 800251a:	f006 fbd7 	bl	8008ccc <gd32_i2c_write>
 800251e:	2300      	movs	r3, #0
 8002520:	7820      	ldrb	r0, [r4, #0]
 8002522:	f8ad 3004 	strh.w	r3, [sp, #4]
 8002526:	f006 fbcb 	bl	8008cc0 <gd32_i2c_set_address>
 800252a:	6860      	ldr	r0, [r4, #4]
 800252c:	f006 fbc0 	bl	8008cb0 <gd32_i2c_set_baudrate>
 8002530:	2102      	movs	r1, #2
 8002532:	a801      	add	r0, sp, #4
 8002534:	f006 fc30 	bl	8008d98 <gd32_i2c_read>
 8002538:	f8bd 0004 	ldrh.w	r0, [sp, #4]
 800253c:	ba40      	rev16	r0, r0
 800253e:	b280      	uxth	r0, r0
 8002540:	b003      	add	sp, #12
 8002542:	bd30      	pop	{r4, r5, pc}

08002544 <sensor::MCP9808::MCP9808(unsigned char)>:
 8002544:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002546:	1e0d      	subs	r5, r1, #0
 8002548:	bf08      	it	eq
 800254a:	2518      	moveq	r5, #24
 800254c:	4f1b      	ldr	r7, [pc, #108]	; (80025bc <sensor::MCP9808::MCP9808(unsigned char)+0x78>)
 800254e:	7005      	strb	r5, [r0, #0]
 8002550:	2600      	movs	r6, #0
 8002552:	6047      	str	r7, [r0, #4]
 8002554:	7206      	strb	r6, [r0, #8]
 8002556:	4604      	mov	r4, r0
 8002558:	4628      	mov	r0, r5
 800255a:	f006 fbb1 	bl	8008cc0 <gd32_i2c_set_address>
 800255e:	4638      	mov	r0, r7
 8002560:	f006 fba6 	bl	8008cb0 <gd32_i2c_set_baudrate>
 8002564:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
 8002568:	2b07      	cmp	r3, #7
 800256a:	d902      	bls.n	8002572 <sensor::MCP9808::MCP9808(unsigned char)+0x2e>
 800256c:	3d50      	subs	r5, #80	; 0x50
 800256e:	2d0f      	cmp	r5, #15
 8002570:	d81f      	bhi.n	80025b2 <sensor::MCP9808::MCP9808(unsigned char)+0x6e>
 8002572:	2101      	movs	r1, #1
 8002574:	f10d 0007 	add.w	r0, sp, #7
 8002578:	f006 fc0e 	bl	8008d98 <gd32_i2c_read>
 800257c:	fab0 f080 	clz	r0, r0
 8002580:	0940      	lsrs	r0, r0, #5
 8002582:	7220      	strb	r0, [r4, #8]
 8002584:	b190      	cbz	r0, 80025ac <sensor::MCP9808::MCP9808(unsigned char)+0x68>
 8002586:	2106      	movs	r1, #6
 8002588:	4620      	mov	r0, r4
 800258a:	f7ff ffb7 	bl	80024fc <HAL_I2C::ReadRegister16(unsigned char)>
 800258e:	2854      	cmp	r0, #84	; 0x54
 8002590:	bf0c      	ite	eq
 8002592:	2301      	moveq	r3, #1
 8002594:	2300      	movne	r3, #0
 8002596:	7223      	strb	r3, [r4, #8]
 8002598:	d108      	bne.n	80025ac <sensor::MCP9808::MCP9808(unsigned char)+0x68>
 800259a:	2107      	movs	r1, #7
 800259c:	4620      	mov	r0, r4
 800259e:	f7ff ffad 	bl	80024fc <HAL_I2C::ReadRegister16(unsigned char)>
 80025a2:	f5a0 6380 	sub.w	r3, r0, #1024	; 0x400
 80025a6:	4258      	negs	r0, r3
 80025a8:	4158      	adcs	r0, r3
 80025aa:	7220      	strb	r0, [r4, #8]
 80025ac:	4620      	mov	r0, r4
 80025ae:	b003      	add	sp, #12
 80025b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80025b2:	4631      	mov	r1, r6
 80025b4:	4630      	mov	r0, r6
 80025b6:	f006 fb89 	bl	8008ccc <gd32_i2c_write>
 80025ba:	e7df      	b.n	800257c <sensor::MCP9808::MCP9808(unsigned char)+0x38>
 80025bc:	00061a80 	andeq	r1, r6, r0, lsl #21

080025c0 <sensor::MCP9808::Get()>:
 80025c0:	b508      	push	{r3, lr}
 80025c2:	2105      	movs	r1, #5
 80025c4:	f7ff ff9a 	bl	80024fc <HAL_I2C::ReadRegister16(unsigned char)>
 80025c8:	f3c0 030b 	ubfx	r3, r0, #0, #12
 80025cc:	ee00 3a10 	vmov	s0, r3
 80025d0:	04c3      	lsls	r3, r0, #19
 80025d2:	eeba 0ace 	vcvt.f32.s32	s0, s0, #4
 80025d6:	bf44      	itt	mi
 80025d8:	eddf 7a02 	vldrmi	s15, [pc, #8]	; 80025e4 <sensor::MCP9808::Get()+0x24>
 80025dc:	ee30 0a67 	vsubmi.f32	s0, s0, s15
 80025e0:	bd08      	pop	{r3, pc}
 80025e2:	bf00      	nop
 80025e4:	43800000 	orrmi	r0, r0, #0

080025e8 <sensor::SI7021::SI7021(unsigned char)>:
 80025e8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80025ea:	1e0c      	subs	r4, r1, #0
 80025ec:	bf08      	it	eq
 80025ee:	2440      	moveq	r4, #64	; 0x40
 80025f0:	4f11      	ldr	r7, [pc, #68]	; (8002638 <sensor::SI7021::SI7021(unsigned char)+0x50>)
 80025f2:	7004      	strb	r4, [r0, #0]
 80025f4:	2600      	movs	r6, #0
 80025f6:	6047      	str	r7, [r0, #4]
 80025f8:	7206      	strb	r6, [r0, #8]
 80025fa:	4605      	mov	r5, r0
 80025fc:	4620      	mov	r0, r4
 80025fe:	f006 fb5f 	bl	8008cc0 <gd32_i2c_set_address>
 8002602:	4638      	mov	r0, r7
 8002604:	f006 fb54 	bl	8008cb0 <gd32_i2c_set_baudrate>
 8002608:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 800260c:	2b07      	cmp	r3, #7
 800260e:	d902      	bls.n	8002616 <sensor::SI7021::SI7021(unsigned char)+0x2e>
 8002610:	3c50      	subs	r4, #80	; 0x50
 8002612:	2c0f      	cmp	r4, #15
 8002614:	d80b      	bhi.n	800262e <sensor::SI7021::SI7021(unsigned char)+0x46>
 8002616:	2101      	movs	r1, #1
 8002618:	f10d 0007 	add.w	r0, sp, #7
 800261c:	f006 fbbc 	bl	8008d98 <gd32_i2c_read>
 8002620:	fab0 f380 	clz	r3, r0
 8002624:	095b      	lsrs	r3, r3, #5
 8002626:	4628      	mov	r0, r5
 8002628:	722b      	strb	r3, [r5, #8]
 800262a:	b003      	add	sp, #12
 800262c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800262e:	4631      	mov	r1, r6
 8002630:	4630      	mov	r0, r6
 8002632:	f006 fb4b 	bl	8008ccc <gd32_i2c_write>
 8002636:	e7f3      	b.n	8002620 <sensor::SI7021::SI7021(unsigned char)+0x38>
 8002638:	00061a80 	andeq	r1, r6, r0, lsl #21

0800263c <sensor::SI7021::ReadRaw(unsigned char)>:
 800263c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800263e:	4604      	mov	r4, r0
 8002640:	7800      	ldrb	r0, [r0, #0]
 8002642:	f88d 1004 	strb.w	r1, [sp, #4]
 8002646:	f006 fb3b 	bl	8008cc0 <gd32_i2c_set_address>
 800264a:	6860      	ldr	r0, [r4, #4]
 800264c:	f006 fb30 	bl	8008cb0 <gd32_i2c_set_baudrate>
 8002650:	2101      	movs	r1, #1
 8002652:	a801      	add	r0, sp, #4
 8002654:	f006 fb3a 	bl	8008ccc <gd32_i2c_write>
 8002658:	4b13      	ldr	r3, [pc, #76]	; (80026a8 <sensor::SI7021::ReadRaw(unsigned char)+0x6c>)
 800265a:	881b      	ldrh	r3, [r3, #0]
 800265c:	f8ad 3004 	strh.w	r3, [sp, #4]
 8002660:	2300      	movs	r3, #0
 8002662:	f88d 3006 	strb.w	r3, [sp, #6]
 8002666:	2508      	movs	r5, #8
 8002668:	2100      	movs	r1, #0
 800266a:	f242 7010 	movw	r0, #10000	; 0x2710
 800266e:	f006 fdd9 	bl	8009224 <udelay(unsigned int, unsigned int)>
 8002672:	7820      	ldrb	r0, [r4, #0]
 8002674:	f006 fb24 	bl	8008cc0 <gd32_i2c_set_address>
 8002678:	6860      	ldr	r0, [r4, #4]
 800267a:	f006 fb19 	bl	8008cb0 <gd32_i2c_set_baudrate>
 800267e:	2103      	movs	r1, #3
 8002680:	a801      	add	r0, sp, #4
 8002682:	f006 fb89 	bl	8008d98 <gd32_i2c_read>
 8002686:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800268a:	f003 0303 	and.w	r3, r3, #3
 800268e:	2b02      	cmp	r3, #2
 8002690:	d001      	beq.n	8002696 <sensor::SI7021::ReadRaw(unsigned char)+0x5a>
 8002692:	3d01      	subs	r5, #1
 8002694:	d1e8      	bne.n	8002668 <sensor::SI7021::ReadRaw(unsigned char)+0x2c>
 8002696:	f8bd 0004 	ldrh.w	r0, [sp, #4]
 800269a:	ba40      	rev16	r0, r0
 800269c:	f020 0003 	bic.w	r0, r0, #3
 80026a0:	b280      	uxth	r0, r0
 80026a2:	b003      	add	sp, #12
 80026a4:	bd30      	pop	{r4, r5, pc}
 80026a6:	bf00      	nop
 80026a8:	0800969e 	stmdaeq	r0, {r1, r2, r3, r4, r7, r9, sl, ip, pc}

080026ac <sensor::SI7021::GetTemperature()>:
 80026ac:	b508      	push	{r3, lr}
 80026ae:	21f3      	movs	r1, #243	; 0xf3
 80026b0:	f7ff ffc4 	bl	800263c <sensor::SI7021::ReadRaw(unsigned char)>
 80026b4:	ee07 0a90 	vmov	s15, r0
 80026b8:	ed9f 7a04 	vldr	s14, [pc, #16]	; 80026cc <sensor::SI7021::GetTemperature()+0x20>
 80026bc:	ed9f 0a04 	vldr	s0, [pc, #16]	; 80026d0 <sensor::SI7021::GetTemperature()+0x24>
 80026c0:	eefb 7ac8 	vcvt.f32.u32	s15, s15, #16
 80026c4:	eea7 0a87 	vfma.f32	s0, s15, s14
 80026c8:	bd08      	pop	{r3, pc}
 80026ca:	bf00      	nop
 80026cc:	432fb852 			; <UNDEFINED> instruction: 0x432fb852
 80026d0:	c23b6666 	eorsgt	r6, fp, #106954752	; 0x6600000

080026d4 <sensor::SI7021::GetHumidity()>:
 80026d4:	b508      	push	{r3, lr}
 80026d6:	21f5      	movs	r1, #245	; 0xf5
 80026d8:	f7ff ffb0 	bl	800263c <sensor::SI7021::ReadRaw(unsigned char)>
 80026dc:	ee07 0a90 	vmov	s15, r0
 80026e0:	ed9f 7a04 	vldr	s14, [pc, #16]	; 80026f4 <sensor::SI7021::GetHumidity()+0x20>
 80026e4:	eefb 7ac8 	vcvt.f32.u32	s15, s15, #16
 80026e8:	eeb9 0a08 	vmov.f32	s0, #152	; 0xc0c00000 -6.0
 80026ec:	eea7 0a87 	vfma.f32	s0, s15, s14
 80026f0:	bd08      	pop	{r3, pc}
 80026f2:	bf00      	nop
 80026f4:	42fa0000 	rscsmi	r0, sl, #0

080026f8 <RDMSubDevices::RDMSubDevices()>:
 80026f8:	2200      	movs	r2, #0
 80026fa:	6002      	str	r2, [r0, #0]
 80026fc:	8082      	strh	r2, [r0, #4]
 80026fe:	4a01      	ldr	r2, [pc, #4]	; (8002704 <RDMSubDevices::RDMSubDevices()+0xc>)
 8002700:	6010      	str	r0, [r2, #0]
 8002702:	4770      	bx	lr
 8002704:	200001fc 	strdcs	r0, [r0], -ip

08002708 <RDMSubDevices::~RDMSubDevices()>:
 8002708:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800270a:	2500      	movs	r5, #0
 800270c:	4604      	mov	r4, r0
 800270e:	462e      	mov	r6, r5
 8002710:	88a3      	ldrh	r3, [r4, #4]
 8002712:	6820      	ldr	r0, [r4, #0]
 8002714:	42ab      	cmp	r3, r5
 8002716:	d804      	bhi.n	8002722 <RDMSubDevices::~RDMSubDevices()+0x1a>
 8002718:	b108      	cbz	r0, 800271e <RDMSubDevices::~RDMSubDevices()+0x16>
 800271a:	f005 fa2c 	bl	8007b76 <operator delete[](void*)>
 800271e:	4620      	mov	r0, r4
 8002720:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002722:	f850 0025 	ldr.w	r0, [r0, r5, lsl #2]
 8002726:	00af      	lsls	r7, r5, #2
 8002728:	b110      	cbz	r0, 8002730 <RDMSubDevices::~RDMSubDevices()+0x28>
 800272a:	6803      	ldr	r3, [r0, #0]
 800272c:	685b      	ldr	r3, [r3, #4]
 800272e:	4798      	blx	r3
 8002730:	6823      	ldr	r3, [r4, #0]
 8002732:	3501      	adds	r5, #1
 8002734:	51de      	str	r6, [r3, r7]
 8002736:	e7eb      	b.n	8002710 <RDMSubDevices::~RDMSubDevices()+0x8>

08002738 <RDMSubDevices::GetInfo(unsigned short)>:
 8002738:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 800273c:	6803      	ldr	r3, [r0, #0]
 800273e:	3901      	subs	r1, #1
 8002740:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
 8002744:	3010      	adds	r0, #16
 8002746:	4770      	bx	lr

08002748 <RDMSubDevices::GetLabel(unsigned short, TRDMDeviceInfoData*)>:
 8002748:	f101 4380 	add.w	r3, r1, #1073741824	; 0x40000000
 800274c:	6800      	ldr	r0, [r0, #0]
 800274e:	3b01      	subs	r3, #1
 8002750:	4611      	mov	r1, r2
 8002752:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 8002756:	f000 b8c2 	b.w	80028de <RDMSubDevice::GetLabel(TRDMDeviceInfoData*)>

0800275a <RDMSubDevices::SetLabel(unsigned short, char const*, unsigned char)>:
 800275a:	b410      	push	{r4}
 800275c:	460c      	mov	r4, r1
 800275e:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
 8002762:	3c01      	subs	r4, #1
 8002764:	6800      	ldr	r0, [r0, #0]
 8002766:	4611      	mov	r1, r2
 8002768:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 800276c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002770:	461a      	mov	r2, r3
 8002772:	f000 b8c9 	b.w	8002908 <RDMSubDevice::SetLabel(char const*, unsigned char)>

08002776 <RDMSubDevices::GetDmxStartAddress(unsigned short)>:
 8002776:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 800277a:	6803      	ldr	r3, [r0, #0]
 800277c:	3901      	subs	r1, #1
 800277e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8002782:	8a58      	ldrh	r0, [r3, #18]
 8002784:	4770      	bx	lr

08002786 <RDMSubDevices::SetDmxStartAddress(unsigned short, unsigned short)>:
 8002786:	f101 4380 	add.w	r3, r1, #1073741824	; 0x40000000
 800278a:	6800      	ldr	r0, [r0, #0]
 800278c:	3b01      	subs	r3, #1
 800278e:	4611      	mov	r1, r2
 8002790:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 8002794:	f000 b897 	b.w	80028c6 <RDMSubDevice::SetDmxStartAddress(unsigned short)>

08002798 <RDMSubDevices::GetDmxFootPrint(unsigned short)>:
 8002798:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 800279c:	6803      	ldr	r3, [r0, #0]
 800279e:	3901      	subs	r1, #1
 80027a0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80027a4:	8a18      	ldrh	r0, [r3, #16]
 80027a6:	4770      	bx	lr

080027a8 <RDMSubDevices::GetPersonalityCurrent(unsigned short)>:
 80027a8:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 80027ac:	6803      	ldr	r3, [r0, #0]
 80027ae:	3901      	subs	r1, #1
 80027b0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80027b4:	7d18      	ldrb	r0, [r3, #20]
 80027b6:	4770      	bx	lr

080027b8 <RDMSubDevices::SetPersonalityCurrent(unsigned short, unsigned char)>:
 80027b8:	f101 4380 	add.w	r3, r1, #1073741824	; 0x40000000
 80027bc:	6800      	ldr	r0, [r0, #0]
 80027be:	3b01      	subs	r3, #1
 80027c0:	4611      	mov	r1, r2
 80027c2:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 80027c6:	f000 b8ae 	b.w	8002926 <RDMSubDevice::SetPersonalityCurrent(unsigned char)>

080027ca <RDMSubDevices::GetPersonalityCount(unsigned short)>:
 80027ca:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 80027ce:	6803      	ldr	r3, [r0, #0]
 80027d0:	3901      	subs	r1, #1
 80027d2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80027d6:	7d58      	ldrb	r0, [r3, #21]
 80027d8:	4770      	bx	lr

080027da <RDMSubDevices::GetPersonality(unsigned short, unsigned char)>:
 80027da:	f101 4380 	add.w	r3, r1, #1073741824	; 0x40000000
 80027de:	6800      	ldr	r0, [r0, #0]
 80027e0:	3b01      	subs	r3, #1
 80027e2:	4611      	mov	r1, r2
 80027e4:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 80027e8:	f000 b872 	b.w	80028d0 <RDMSubDevice::GetPersonality(unsigned char)>

080027ec <RDMSubDevices::Start()>:
 80027ec:	b538      	push	{r3, r4, r5, lr}
 80027ee:	4605      	mov	r5, r0
 80027f0:	2400      	movs	r4, #0
 80027f2:	88ab      	ldrh	r3, [r5, #4]
 80027f4:	42a3      	cmp	r3, r4
 80027f6:	d800      	bhi.n	80027fa <RDMSubDevices::Start()+0xe>
 80027f8:	bd38      	pop	{r3, r4, r5, pc}
 80027fa:	682b      	ldr	r3, [r5, #0]
 80027fc:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8002800:	b110      	cbz	r0, 8002808 <RDMSubDevices::Start()+0x1c>
 8002802:	6803      	ldr	r3, [r0, #0]
 8002804:	68db      	ldr	r3, [r3, #12]
 8002806:	4798      	blx	r3
 8002808:	3401      	adds	r4, #1
 800280a:	e7f2      	b.n	80027f2 <RDMSubDevices::Start()+0x6>

0800280c <RDMSubDevices::Stop()>:
 800280c:	b538      	push	{r3, r4, r5, lr}
 800280e:	4605      	mov	r5, r0
 8002810:	2400      	movs	r4, #0
 8002812:	88ab      	ldrh	r3, [r5, #4]
 8002814:	42a3      	cmp	r3, r4
 8002816:	d800      	bhi.n	800281a <RDMSubDevices::Stop()+0xe>
 8002818:	bd38      	pop	{r3, r4, r5, pc}
 800281a:	682b      	ldr	r3, [r5, #0]
 800281c:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8002820:	b110      	cbz	r0, 8002828 <RDMSubDevices::Stop()+0x1c>
 8002822:	6803      	ldr	r3, [r0, #0]
 8002824:	691b      	ldr	r3, [r3, #16]
 8002826:	4798      	blx	r3
 8002828:	3401      	adds	r4, #1
 800282a:	e7f2      	b.n	8002812 <RDMSubDevices::Stop()+0x6>

0800282c <RDMSubDevices::SetData(unsigned char const*, unsigned int)>:
 800282c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800282e:	4605      	mov	r5, r0
 8002830:	460f      	mov	r7, r1
 8002832:	4616      	mov	r6, r2
 8002834:	2400      	movs	r4, #0
 8002836:	88ab      	ldrh	r3, [r5, #4]
 8002838:	42a3      	cmp	r3, r4
 800283a:	d800      	bhi.n	800283e <RDMSubDevices::SetData(unsigned char const*, unsigned int)+0x12>
 800283c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800283e:	682b      	ldr	r3, [r5, #0]
 8002840:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8002844:	b158      	cbz	r0, 800285e <RDMSubDevices::SetData(unsigned char const*, unsigned int)+0x32>
 8002846:	8a43      	ldrh	r3, [r0, #18]
 8002848:	8a02      	ldrh	r2, [r0, #16]
 800284a:	4413      	add	r3, r2
 800284c:	b29b      	uxth	r3, r3
 800284e:	3b01      	subs	r3, #1
 8002850:	42b3      	cmp	r3, r6
 8002852:	d804      	bhi.n	800285e <RDMSubDevices::SetData(unsigned char const*, unsigned int)+0x32>
 8002854:	6803      	ldr	r3, [r0, #0]
 8002856:	4632      	mov	r2, r6
 8002858:	695b      	ldr	r3, [r3, #20]
 800285a:	4639      	mov	r1, r7
 800285c:	4798      	blx	r3
 800285e:	3401      	adds	r4, #1
 8002860:	e7e9      	b.n	8002836 <RDMSubDevices::SetData(unsigned char const*, unsigned int)+0xa>

08002862 <RDMSubDevices::GetFactoryDefaults()>:
 8002862:	b538      	push	{r3, r4, r5, lr}
 8002864:	4605      	mov	r5, r0
 8002866:	2400      	movs	r4, #0
 8002868:	88ab      	ldrh	r3, [r5, #4]
 800286a:	42a3      	cmp	r3, r4
 800286c:	d801      	bhi.n	8002872 <RDMSubDevices::GetFactoryDefaults()+0x10>
 800286e:	2001      	movs	r0, #1
 8002870:	e009      	b.n	8002886 <RDMSubDevices::GetFactoryDefaults()+0x24>
 8002872:	682b      	ldr	r3, [r5, #0]
 8002874:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8002878:	b908      	cbnz	r0, 800287e <RDMSubDevices::GetFactoryDefaults()+0x1c>
 800287a:	3401      	adds	r4, #1
 800287c:	e7f4      	b.n	8002868 <RDMSubDevices::GetFactoryDefaults()+0x6>
 800287e:	f000 f87a 	bl	8002976 <RDMSubDevice::GetFactoryDefaults()>
 8002882:	2800      	cmp	r0, #0
 8002884:	d1f9      	bne.n	800287a <RDMSubDevices::GetFactoryDefaults()+0x18>
 8002886:	bd38      	pop	{r3, r4, r5, pc}

08002888 <RDMSubDevices::SetFactoryDefaults()>:
 8002888:	b538      	push	{r3, r4, r5, lr}
 800288a:	4605      	mov	r5, r0
 800288c:	2400      	movs	r4, #0
 800288e:	88ab      	ldrh	r3, [r5, #4]
 8002890:	42a3      	cmp	r3, r4
 8002892:	d800      	bhi.n	8002896 <RDMSubDevices::SetFactoryDefaults()+0xe>
 8002894:	bd38      	pop	{r3, r4, r5, pc}
 8002896:	682b      	ldr	r3, [r5, #0]
 8002898:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800289c:	b108      	cbz	r0, 80028a2 <RDMSubDevices::SetFactoryDefaults()+0x1a>
 800289e:	f000 f844 	bl	800292a <RDMSubDevice::SetFactoryDefaults()>
 80028a2:	3401      	adds	r4, #1
 80028a4:	e7f3      	b.n	800288e <RDMSubDevices::SetFactoryDefaults()+0x6>

080028a6 <RDMSubDevicesParams::RDMSubDevicesParams(RDMSubDevicesParamsStore*)>:
 80028a6:	6001      	str	r1, [r0, #0]
 80028a8:	4770      	bx	lr

080028aa <RDMSubDevicesParams::Load()>:
 80028aa:	b508      	push	{r3, lr}
 80028ac:	2300      	movs	r3, #0
 80028ae:	4601      	mov	r1, r0
 80028b0:	6043      	str	r3, [r0, #4]
 80028b2:	6800      	ldr	r0, [r0, #0]
 80028b4:	b120      	cbz	r0, 80028c0 <RDMSubDevicesParams::Load()+0x16>
 80028b6:	6803      	ldr	r3, [r0, #0]
 80028b8:	3104      	adds	r1, #4
 80028ba:	68db      	ldr	r3, [r3, #12]
 80028bc:	4798      	blx	r3
 80028be:	2001      	movs	r0, #1
 80028c0:	bd08      	pop	{r3, pc}

080028c2 <RDMSubDevicesParams::Dump()>:
 80028c2:	4770      	bx	lr

080028c4 <RDMSubDevicesParams::Set()>:
 80028c4:	4770      	bx	lr

080028c6 <RDMSubDevice::SetDmxStartAddress(unsigned short)>:
 80028c6:	6803      	ldr	r3, [r0, #0]
 80028c8:	8241      	strh	r1, [r0, #18]
 80028ca:	699b      	ldr	r3, [r3, #24]
 80028cc:	2100      	movs	r1, #0
 80028ce:	4718      	bx	r3

080028d0 <RDMSubDevice::GetPersonality(unsigned char)>:
 80028d0:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 80028d4:	6843      	ldr	r3, [r0, #4]
 80028d6:	3901      	subs	r1, #1
 80028d8:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
 80028dc:	4770      	bx	lr

080028de <RDMSubDevice::GetLabel(TRDMDeviceInfoData*)>:
 80028de:	f100 0316 	add.w	r3, r0, #22
 80028e2:	600b      	str	r3, [r1, #0]
 80028e4:	f890 3036 	ldrb.w	r3, [r0, #54]	; 0x36
 80028e8:	710b      	strb	r3, [r1, #4]
 80028ea:	4770      	bx	lr

080028ec <RDMSubDevice::SetLabel(char const*)>:
 80028ec:	b510      	push	{r4, lr}
 80028ee:	2300      	movs	r3, #0
 80028f0:	f100 0416 	add.w	r4, r0, #22
 80028f4:	5cca      	ldrb	r2, [r1, r3]
 80028f6:	b122      	cbz	r2, 8002902 <RDMSubDevice::SetLabel(char const*)+0x16>
 80028f8:	3301      	adds	r3, #1
 80028fa:	2b20      	cmp	r3, #32
 80028fc:	f804 2b01 	strb.w	r2, [r4], #1
 8002900:	d1f8      	bne.n	80028f4 <RDMSubDevice::SetLabel(char const*)+0x8>
 8002902:	f880 3036 	strb.w	r3, [r0, #54]	; 0x36
 8002906:	bd10      	pop	{r4, pc}

08002908 <RDMSubDevice::SetLabel(char const*, unsigned char)>:
 8002908:	b530      	push	{r4, r5, lr}
 800290a:	2300      	movs	r3, #0
 800290c:	f100 0416 	add.w	r4, r0, #22
 8002910:	429a      	cmp	r2, r3
 8002912:	d905      	bls.n	8002920 <RDMSubDevice::SetLabel(char const*, unsigned char)+0x18>
 8002914:	5ccd      	ldrb	r5, [r1, r3]
 8002916:	f804 5b01 	strb.w	r5, [r4], #1
 800291a:	3301      	adds	r3, #1
 800291c:	2b20      	cmp	r3, #32
 800291e:	d1f7      	bne.n	8002910 <RDMSubDevice::SetLabel(char const*, unsigned char)+0x8>
 8002920:	f880 3036 	strb.w	r3, [r0, #54]	; 0x36
 8002924:	bd30      	pop	{r4, r5, pc}

08002926 <RDMSubDevice::SetPersonalityCurrent(unsigned char)>:
 8002926:	7501      	strb	r1, [r0, #20]
 8002928:	4770      	bx	lr

0800292a <RDMSubDevice::SetFactoryDefaults()>:
 800292a:	7a03      	ldrb	r3, [r0, #8]
 800292c:	b510      	push	{r4, lr}
 800292e:	b94b      	cbnz	r3, 8002944 <RDMSubDevice::SetFactoryDefaults()+0x1a>
 8002930:	f100 0138 	add.w	r1, r0, #56	; 0x38
 8002934:	f7ff ffda 	bl	80028ec <RDMSubDevice::SetLabel(char const*)>
 8002938:	8983      	ldrh	r3, [r0, #12]
 800293a:	8243      	strh	r3, [r0, #18]
 800293c:	7b83      	ldrb	r3, [r0, #14]
 800293e:	7503      	strb	r3, [r0, #20]
 8002940:	2301      	movs	r3, #1
 8002942:	7203      	strb	r3, [r0, #8]
 8002944:	bd10      	pop	{r4, pc}

08002946 <RDMSubDevice::CalculateChecksum()>:
 8002946:	b510      	push	{r4, lr}
 8002948:	8a43      	ldrh	r3, [r0, #18]
 800294a:	7d02      	ldrb	r2, [r0, #20]
 800294c:	f890 4036 	ldrb.w	r4, [r0, #54]	; 0x36
 8002950:	4413      	add	r3, r2
 8002952:	f100 0216 	add.w	r2, r0, #22
 8002956:	f1c0 20ff 	rsb	r0, r0, #4278255360	; 0xff00ff00
 800295a:	f500 007f 	add.w	r0, r0, #16711680	; 0xff0000
 800295e:	b29b      	uxth	r3, r3
 8002960:	30ea      	adds	r0, #234	; 0xea
 8002962:	1881      	adds	r1, r0, r2
 8002964:	428c      	cmp	r4, r1
 8002966:	d801      	bhi.n	800296c <RDMSubDevice::CalculateChecksum()+0x26>
 8002968:	4618      	mov	r0, r3
 800296a:	bd10      	pop	{r4, pc}
 800296c:	f812 1b01 	ldrb.w	r1, [r2], #1
 8002970:	440b      	add	r3, r1
 8002972:	b29b      	uxth	r3, r3
 8002974:	e7f5      	b.n	8002962 <RDMSubDevice::CalculateChecksum()+0x1c>

08002976 <RDMSubDevice::GetFactoryDefaults()>:
 8002976:	7a03      	ldrb	r3, [r0, #8]
 8002978:	b510      	push	{r4, lr}
 800297a:	4604      	mov	r4, r0
 800297c:	b133      	cbz	r3, 800298c <RDMSubDevice::GetFactoryDefaults()+0x16>
 800297e:	f7ff ffe2 	bl	8002946 <RDMSubDevice::CalculateChecksum()>
 8002982:	8963      	ldrh	r3, [r4, #10]
 8002984:	4283      	cmp	r3, r0
 8002986:	bf1c      	itt	ne
 8002988:	2300      	movne	r3, #0
 800298a:	7223      	strbne	r3, [r4, #8]
 800298c:	7a20      	ldrb	r0, [r4, #8]
 800298e:	bd10      	pop	{r4, pc}

08002990 <Rdm::Receive(unsigned int)>:
 8002990:	4b02      	ldr	r3, [pc, #8]	; (800299c <Rdm::Receive(unsigned int)+0xc>)
 8002992:	4601      	mov	r1, r0
 8002994:	6818      	ldr	r0, [r3, #0]
 8002996:	f000 bc6d 	b.w	8003274 <Dmx::RdmReceive(unsigned int)>
 800299a:	bf00      	nop
 800299c:	20000638 	andcs	r0, r0, r8, lsr r6

080029a0 <Rdm::SendRaw(unsigned int, unsigned char const*, unsigned int)>:
 80029a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80029a4:	4d0d      	ldr	r5, [pc, #52]	; (80029dc <Rdm::SendRaw(unsigned int, unsigned char const*, unsigned int)+0x3c>)
 80029a6:	2300      	movs	r3, #0
 80029a8:	4604      	mov	r4, r0
 80029aa:	460e      	mov	r6, r1
 80029ac:	4617      	mov	r7, r2
 80029ae:	4601      	mov	r1, r0
 80029b0:	461a      	mov	r2, r3
 80029b2:	6828      	ldr	r0, [r5, #0]
 80029b4:	f000 faf2 	bl	8002f9c <Dmx::SetPortDirection(unsigned int, dmx::PortDirection, bool)>
 80029b8:	463b      	mov	r3, r7
 80029ba:	4632      	mov	r2, r6
 80029bc:	6828      	ldr	r0, [r5, #0]
 80029be:	4621      	mov	r1, r4
 80029c0:	f000 fc12 	bl	80031e8 <Dmx::RdmSendRaw(unsigned int, unsigned char const*, unsigned int)>
 80029c4:	2100      	movs	r1, #0
 80029c6:	2004      	movs	r0, #4
 80029c8:	f006 fc2c 	bl	8009224 <udelay(unsigned int, unsigned int)>
 80029cc:	2301      	movs	r3, #1
 80029ce:	6828      	ldr	r0, [r5, #0]
 80029d0:	4621      	mov	r1, r4
 80029d2:	461a      	mov	r2, r3
 80029d4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80029d8:	f000 bae0 	b.w	8002f9c <Dmx::SetPortDirection(unsigned int, dmx::PortDirection, bool)>
 80029dc:	20000638 	andcs	r0, r0, r8, lsr r6

080029e0 <USART2_IRQHandler>:
 80029e0:	b510      	push	{r4, lr}
 80029e2:	f3bf 8f5f 	dmb	sy
 80029e6:	498d      	ldr	r1, [pc, #564]	; (8002c1c <USART2_IRQHandler+0x23c>)
 80029e8:	2408      	movs	r4, #8
 80029ea:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 80029ee:	f8c1 4c10 	str.w	r4, [r1, #3088]	; 0xc10
 80029f2:	f8d2 3800 	ldr.w	r3, [r2, #2048]	; 0x800
 80029f6:	f013 0f02 	tst.w	r3, #2
 80029fa:	4b89      	ldr	r3, [pc, #548]	; (8002c20 <USART2_IRQHandler+0x240>)
 80029fc:	d016      	beq.n	8002a2c <USART2_IRQHandler+0x4c>
 80029fe:	f8d2 0800 	ldr.w	r0, [r2, #2048]	; 0x800
 8002a02:	f020 0002 	bic.w	r0, r0, #2
 8002a06:	f8c2 0800 	str.w	r0, [r2, #2048]	; 0x800
 8002a0a:	f8d2 2804 	ldr.w	r2, [r2, #2052]	; 0x804
 8002a0e:	2200      	movs	r2, #0
 8002a10:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8002a14:	2202      	movs	r2, #2
 8002a16:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
 8002a1a:	2310      	movs	r3, #16
 8002a1c:	f8c1 4c14 	str.w	r4, [r1, #3092]	; 0xc14
 8002a20:	f8c1 3c14 	str.w	r3, [r1, #3092]	; 0xc14
 8002a24:	2320      	movs	r3, #32
 8002a26:	f8c1 3c14 	str.w	r3, [r1, #3092]	; 0xc14
 8002a2a:	bd10      	pop	{r4, pc}
 8002a2c:	f8d2 2804 	ldr.w	r2, [r2, #2052]	; 0x804
 8002a30:	f8d3 020c 	ldr.w	r0, [r3, #524]	; 0x20c
 8002a34:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002a38:	280a      	cmp	r0, #10
 8002a3a:	f200 80eb 	bhi.w	8002c14 <USART2_IRQHandler+0x234>
 8002a3e:	e8df f010 	tbh	[pc, r0, lsl #1]
 8002a42:	00e9000b 	rsceq	r0, r9, fp
 8002a46:	00e90019 	rsceq	r0, r9, r9, lsl r0
 8002a4a:	005c0039 	subseq	r0, ip, r9, lsr r0
 8002a4e:	00870077 	addeq	r0, r7, r7, ror r0
 8002a52:	00b900a8 	adcseq	r0, r9, r8, lsr #1
 8002a56:	210800cd 	smlabtcs	r8, sp, r0, r0
 8002a5a:	701a      	strb	r2, [r3, #0]
 8002a5c:	2201      	movs	r2, #1
 8002a5e:	f8c3 120c 	str.w	r1, [r3, #524]	; 0x20c
 8002a62:	f8a3 2204 	strh.w	r2, [r3, #516]	; 0x204
 8002a66:	4b6d      	ldr	r3, [pc, #436]	; (8002c1c <USART2_IRQHandler+0x23c>)
 8002a68:	2208      	movs	r2, #8
 8002a6a:	f8c3 2c14 	str.w	r2, [r3, #3092]	; 0xc14
 8002a6e:	f3bf 8f5f 	dmb	sy
 8002a72:	e7da      	b.n	8002a2a <USART2_IRQHandler+0x4a>
 8002a74:	b11a      	cbz	r2, 8002a7e <USART2_IRQHandler+0x9e>
 8002a76:	2acc      	cmp	r2, #204	; 0xcc
 8002a78:	d016      	beq.n	8002aa8 <USART2_IRQHandler+0xc8>
 8002a7a:	2200      	movs	r2, #0
 8002a7c:	e065      	b.n	8002b4a <USART2_IRQHandler+0x16a>
 8002a7e:	701a      	strb	r2, [r3, #0]
 8002a80:	2201      	movs	r2, #1
 8002a82:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8002a86:	4a67      	ldr	r2, [pc, #412]	; (8002c24 <USART2_IRQHandler+0x244>)
 8002a88:	6851      	ldr	r1, [r2, #4]
 8002a8a:	3101      	adds	r1, #1
 8002a8c:	6051      	str	r1, [r2, #4]
 8002a8e:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8002a92:	f8d1 1424 	ldr.w	r1, [r1, #1060]	; 0x424
 8002a96:	60d1      	str	r1, [r2, #12]
 8002a98:	2204      	movs	r2, #4
 8002a9a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
 8002a9e:	4b5f      	ldr	r3, [pc, #380]	; (8002c1c <USART2_IRQHandler+0x23c>)
 8002aa0:	2210      	movs	r2, #16
 8002aa2:	f8c3 2c10 	str.w	r2, [r3, #3088]	; 0xc10
 8002aa6:	e7de      	b.n	8002a66 <USART2_IRQHandler+0x86>
 8002aa8:	701a      	strb	r2, [r3, #0]
 8002aaa:	4a5f      	ldr	r2, [pc, #380]	; (8002c28 <USART2_IRQHandler+0x248>)
 8002aac:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8002ab0:	2205      	movs	r2, #5
 8002ab2:	e7f2      	b.n	8002a9a <USART2_IRQHandler+0xba>
 8002ab4:	f8d3 1204 	ldr.w	r1, [r3, #516]	; 0x204
 8002ab8:	b288      	uxth	r0, r1
 8002aba:	541a      	strb	r2, [r3, r0]
 8002abc:	1c4a      	adds	r2, r1, #1
 8002abe:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 8002ac2:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8002ac6:	d90b      	bls.n	8002ae0 <USART2_IRQHandler+0x100>
 8002ac8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002acc:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8002ad0:	2200      	movs	r2, #0
 8002ad2:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
 8002ad6:	4b51      	ldr	r3, [pc, #324]	; (8002c1c <USART2_IRQHandler+0x23c>)
 8002ad8:	2210      	movs	r2, #16
 8002ada:	f8c3 2c14 	str.w	r2, [r3, #3092]	; 0xc14
 8002ade:	e7c2      	b.n	8002a66 <USART2_IRQHandler+0x86>
 8002ae0:	4850      	ldr	r0, [pc, #320]	; (8002c24 <USART2_IRQHandler+0x244>)
 8002ae2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002ae6:	f8d2 1424 	ldr.w	r1, [r2, #1060]	; 0x424
 8002aea:	68c3      	ldr	r3, [r0, #12]
 8002aec:	60c1      	str	r1, [r0, #12]
 8002aee:	ebc3 0341 	rsb	r3, r3, r1, lsl #1
 8002af2:	3304      	adds	r3, #4
 8002af4:	f8c2 3434 	str.w	r3, [r2, #1076]	; 0x434
 8002af8:	e7b5      	b.n	8002a66 <USART2_IRQHandler+0x86>
 8002afa:	f8b3 0204 	ldrh.w	r0, [r3, #516]	; 0x204
 8002afe:	f8b3 4206 	ldrh.w	r4, [r3, #518]	; 0x206
 8002b02:	541a      	strb	r2, [r3, r0]
 8002b04:	1c41      	adds	r1, r0, #1
 8002b06:	3817      	subs	r0, #23
 8002b08:	b289      	uxth	r1, r1
 8002b0a:	4422      	add	r2, r4
 8002b0c:	28e7      	cmp	r0, #231	; 0xe7
 8002b0e:	f8a3 1204 	strh.w	r1, [r3, #516]	; 0x204
 8002b12:	f8a3 2206 	strh.w	r2, [r3, #518]	; 0x206
 8002b16:	d808      	bhi.n	8002b2a <USART2_IRQHandler+0x14a>
 8002b18:	789a      	ldrb	r2, [r3, #2]
 8002b1a:	428a      	cmp	r2, r1
 8002b1c:	d105      	bne.n	8002b2a <USART2_IRQHandler+0x14a>
 8002b1e:	2206      	movs	r2, #6
 8002b20:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
 8002b24:	4b3d      	ldr	r3, [pc, #244]	; (8002c1c <USART2_IRQHandler+0x23c>)
 8002b26:	2220      	movs	r2, #32
 8002b28:	e7bb      	b.n	8002aa2 <USART2_IRQHandler+0xc2>
 8002b2a:	29ff      	cmp	r1, #255	; 0xff
 8002b2c:	d99b      	bls.n	8002a66 <USART2_IRQHandler+0x86>
 8002b2e:	e7a4      	b.n	8002a7a <USART2_IRQHandler+0x9a>
 8002b30:	f8b3 1204 	ldrh.w	r1, [r3, #516]	; 0x204
 8002b34:	545a      	strb	r2, [r3, r1]
 8002b36:	3101      	adds	r1, #1
 8002b38:	f8a3 1204 	strh.w	r1, [r3, #516]	; 0x204
 8002b3c:	f8b3 1206 	ldrh.w	r1, [r3, #518]	; 0x206
 8002b40:	eba1 2202 	sub.w	r2, r1, r2, lsl #8
 8002b44:	f8a3 2206 	strh.w	r2, [r3, #518]	; 0x206
 8002b48:	2207      	movs	r2, #7
 8002b4a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
 8002b4e:	e78a      	b.n	8002a66 <USART2_IRQHandler+0x86>
 8002b50:	2020      	movs	r0, #32
 8002b52:	f8c1 0c14 	str.w	r0, [r1, #3092]	; 0xc14
 8002b56:	f8b3 4206 	ldrh.w	r4, [r3, #518]	; 0x206
 8002b5a:	f8b3 0204 	ldrh.w	r0, [r3, #516]	; 0x204
 8002b5e:	541a      	strb	r2, [r3, r0]
 8002b60:	1aa2      	subs	r2, r4, r2
 8002b62:	b292      	uxth	r2, r2
 8002b64:	f8a3 2206 	strh.w	r2, [r3, #518]	; 0x206
 8002b68:	b912      	cbnz	r2, 8002b70 <USART2_IRQHandler+0x190>
 8002b6a:	785a      	ldrb	r2, [r3, #1]
 8002b6c:	2a01      	cmp	r2, #1
 8002b6e:	d003      	beq.n	8002b78 <USART2_IRQHandler+0x198>
 8002b70:	2200      	movs	r2, #0
 8002b72:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8002b76:	e780      	b.n	8002a7a <USART2_IRQHandler+0x9a>
 8002b78:	3001      	adds	r0, #1
 8002b7a:	4a2c      	ldr	r2, [pc, #176]	; (8002c2c <USART2_IRQHandler+0x24c>)
 8002b7c:	f440 4080 	orr.w	r0, r0, #16384	; 0x4000
 8002b80:	f8a3 0204 	strh.w	r0, [r3, #516]	; 0x204
 8002b84:	6850      	ldr	r0, [r2, #4]
 8002b86:	4a2a      	ldr	r2, [pc, #168]	; (8002c30 <USART2_IRQHandler+0x250>)
 8002b88:	6010      	str	r0, [r2, #0]
 8002b8a:	2210      	movs	r2, #16
 8002b8c:	f8c1 2c14 	str.w	r2, [r1, #3092]	; 0xc14
 8002b90:	e773      	b.n	8002a7a <USART2_IRQHandler+0x9a>
 8002b92:	f8b3 1204 	ldrh.w	r1, [r3, #516]	; 0x204
 8002b96:	545a      	strb	r2, [r3, r1]
 8002b98:	3101      	adds	r1, #1
 8002b9a:	b289      	uxth	r1, r1
 8002b9c:	2aaa      	cmp	r2, #170	; 0xaa
 8002b9e:	f8a3 1204 	strh.w	r1, [r3, #516]	; 0x204
 8002ba2:	d002      	beq.n	8002baa <USART2_IRQHandler+0x1ca>
 8002ba4:	2909      	cmp	r1, #9
 8002ba6:	f47f af5e 	bne.w	8002a66 <USART2_IRQHandler+0x86>
 8002baa:	2200      	movs	r2, #0
 8002bac:	f8a3 2208 	strh.w	r2, [r3, #520]	; 0x208
 8002bb0:	2209      	movs	r2, #9
 8002bb2:	e7ca      	b.n	8002b4a <USART2_IRQHandler+0x16a>
 8002bb4:	f8b3 1204 	ldrh.w	r1, [r3, #516]	; 0x204
 8002bb8:	545a      	strb	r2, [r3, r1]
 8002bba:	f8b3 2208 	ldrh.w	r2, [r3, #520]	; 0x208
 8002bbe:	3201      	adds	r2, #1
 8002bc0:	b292      	uxth	r2, r2
 8002bc2:	3101      	adds	r1, #1
 8002bc4:	2a0c      	cmp	r2, #12
 8002bc6:	f8a3 1204 	strh.w	r1, [r3, #516]	; 0x204
 8002bca:	d002      	beq.n	8002bd2 <USART2_IRQHandler+0x1f2>
 8002bcc:	f8a3 2208 	strh.w	r2, [r3, #520]	; 0x208
 8002bd0:	e749      	b.n	8002a66 <USART2_IRQHandler+0x86>
 8002bd2:	2200      	movs	r2, #0
 8002bd4:	f8a3 2208 	strh.w	r2, [r3, #520]	; 0x208
 8002bd8:	220a      	movs	r2, #10
 8002bda:	e7b6      	b.n	8002b4a <USART2_IRQHandler+0x16a>
 8002bdc:	f8b3 1204 	ldrh.w	r1, [r3, #516]	; 0x204
 8002be0:	545a      	strb	r2, [r3, r1]
 8002be2:	1c4a      	adds	r2, r1, #1
 8002be4:	f8b3 1208 	ldrh.w	r1, [r3, #520]	; 0x208
 8002be8:	3101      	adds	r1, #1
 8002bea:	b289      	uxth	r1, r1
 8002bec:	b292      	uxth	r2, r2
 8002bee:	2904      	cmp	r1, #4
 8002bf0:	f8a3 2204 	strh.w	r2, [r3, #516]	; 0x204
 8002bf4:	f8a3 1208 	strh.w	r1, [r3, #520]	; 0x208
 8002bf8:	f47f af35 	bne.w	8002a66 <USART2_IRQHandler+0x86>
 8002bfc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002c00:	2100      	movs	r1, #0
 8002c02:	f8c3 120c 	str.w	r1, [r3, #524]	; 0x20c
 8002c06:	f8a3 2204 	strh.w	r2, [r3, #516]	; 0x204
 8002c0a:	4b08      	ldr	r3, [pc, #32]	; (8002c2c <USART2_IRQHandler+0x24c>)
 8002c0c:	685a      	ldr	r2, [r3, #4]
 8002c0e:	4b08      	ldr	r3, [pc, #32]	; (8002c30 <USART2_IRQHandler+0x250>)
 8002c10:	601a      	str	r2, [r3, #0]
 8002c12:	e728      	b.n	8002a66 <USART2_IRQHandler+0x86>
 8002c14:	2200      	movs	r2, #0
 8002c16:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8002c1a:	e796      	b.n	8002b4a <USART2_IRQHandler+0x16a>
 8002c1c:	40010000 	andmi	r0, r1, r0
 8002c20:	2000020c 	andcs	r0, r0, ip, lsl #4
 8002c24:	20000624 	andcs	r0, r0, r4, lsr #12
 8002c28:	00cc0001 	sbceq	r0, ip, r1
 8002c2c:	e0001000 	and	r1, r0, r0
 8002c30:	2000063c 	andcs	r0, r0, ip, lsr r6

08002c34 <TIMER1_IRQHandler>:
 8002c34:	b538      	push	{r3, r4, r5, lr}
 8002c36:	f3bf 8f5f 	dmb	sy
 8002c3a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002c3e:	4a25      	ldr	r2, [pc, #148]	; (8002cd4 <TIMER1_IRQHandler+0xa0>)
 8002c40:	691c      	ldr	r4, [r3, #16]
 8002c42:	4925      	ldr	r1, [pc, #148]	; (8002cd8 <TIMER1_IRQHandler+0xa4>)
 8002c44:	8813      	ldrh	r3, [r2, #0]
 8002c46:	2008      	movs	r0, #8
 8002c48:	f8c1 0c10 	str.w	r0, [r1, #3088]	; 0xc10
 8002c4c:	07a1      	lsls	r1, r4, #30
 8002c4e:	b29b      	uxth	r3, r3
 8002c50:	d51d      	bpl.n	8002c8e <TIMER1_IRQHandler+0x5a>
 8002c52:	07dd      	lsls	r5, r3, #31
 8002c54:	d50f      	bpl.n	8002c76 <TIMER1_IRQHandler+0x42>
 8002c56:	8813      	ldrh	r3, [r2, #0]
 8002c58:	4d20      	ldr	r5, [pc, #128]	; (8002cdc <TIMER1_IRQHandler+0xa8>)
 8002c5a:	b29b      	uxth	r3, r3
 8002c5c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c60:	8013      	strh	r3, [r2, #0]
 8002c62:	2110      	movs	r1, #16
 8002c64:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002c68:	2203      	movs	r2, #3
 8002c6a:	4628      	mov	r0, r5
 8002c6c:	f005 fb82 	bl	8008374 <gpio_init>
 8002c70:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002c74:	616b      	str	r3, [r5, #20]
 8002c76:	4621      	mov	r1, r4
 8002c78:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8002c7c:	f005 fe4b 	bl	8008916 <timer_interrupt_flag_clear>
 8002c80:	4b15      	ldr	r3, [pc, #84]	; (8002cd8 <TIMER1_IRQHandler+0xa4>)
 8002c82:	2208      	movs	r2, #8
 8002c84:	f8c3 2c14 	str.w	r2, [r3, #3092]	; 0xc14
 8002c88:	f3bf 8f5f 	dmb	sy
 8002c8c:	bd38      	pop	{r3, r4, r5, pc}
 8002c8e:	0760      	lsls	r0, r4, #29
 8002c90:	d509      	bpl.n	8002ca6 <TIMER1_IRQHandler+0x72>
 8002c92:	05d9      	lsls	r1, r3, #23
 8002c94:	d5ef      	bpl.n	8002c76 <TIMER1_IRQHandler+0x42>
 8002c96:	4811      	ldr	r0, [pc, #68]	; (8002cdc <TIMER1_IRQHandler+0xa8>)
 8002c98:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002c9c:	2203      	movs	r2, #3
 8002c9e:	2118      	movs	r1, #24
 8002ca0:	f005 fb68 	bl	8008374 <gpio_init>
 8002ca4:	e7e7      	b.n	8002c76 <TIMER1_IRQHandler+0x42>
 8002ca6:	0722      	lsls	r2, r4, #28
 8002ca8:	d5e5      	bpl.n	8002c76 <TIMER1_IRQHandler+0x42>
 8002caa:	05db      	lsls	r3, r3, #23
 8002cac:	d5e3      	bpl.n	8002c76 <TIMER1_IRQHandler+0x42>
 8002cae:	4b0c      	ldr	r3, [pc, #48]	; (8002ce0 <TIMER1_IRQHandler+0xac>)
 8002cb0:	480c      	ldr	r0, [pc, #48]	; (8002ce4 <TIMER1_IRQHandler+0xb0>)
 8002cb2:	69da      	ldr	r2, [r3, #28]
 8002cb4:	f022 0201 	bic.w	r2, r2, #1
 8002cb8:	61da      	str	r2, [r3, #28]
 8002cba:	4a0b      	ldr	r2, [pc, #44]	; (8002ce8 <TIMER1_IRQHandler+0xb4>)
 8002cbc:	629a      	str	r2, [r3, #40]	; 0x28
 8002cbe:	f8b2 2202 	ldrh.w	r2, [r2, #514]	; 0x202
 8002cc2:	621a      	str	r2, [r3, #32]
 8002cc4:	69da      	ldr	r2, [r3, #28]
 8002cc6:	f042 0201 	orr.w	r2, r2, #1
 8002cca:	61da      	str	r2, [r3, #28]
 8002ccc:	2180      	movs	r1, #128	; 0x80
 8002cce:	f005 fef5 	bl	8008abc <usart_dma_transmit_config>
 8002cd2:	e7d0      	b.n	8002c76 <TIMER1_IRQHandler+0x42>
 8002cd4:	20000634 	andcs	r0, r0, r4, lsr r6
 8002cd8:	40010000 	andmi	r0, r1, r0
 8002cdc:	40011000 	andmi	r1, r1, r0
 8002ce0:	40020000 	andmi	r0, r2, r0
 8002ce4:	40004800 	andmi	r4, r0, r0, lsl #16
 8002ce8:	2000041c 	andcs	r0, r0, ip, lsl r4

08002cec <TIMER2_IRQHandler>:
 8002cec:	b508      	push	{r3, lr}
 8002cee:	f3bf 8f5f 	dmb	sy
 8002cf2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002cf6:	f8d3 1410 	ldr.w	r1, [r3, #1040]	; 0x410
 8002cfa:	078b      	lsls	r3, r1, #30
 8002cfc:	d511      	bpl.n	8002d22 <TIMER2_IRQHandler+0x36>
 8002cfe:	4b0c      	ldr	r3, [pc, #48]	; (8002d30 <TIMER2_IRQHandler+0x44>)
 8002d00:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8002d04:	2a04      	cmp	r2, #4
 8002d06:	d10c      	bne.n	8002d22 <TIMER2_IRQHandler+0x36>
 8002d08:	2200      	movs	r2, #0
 8002d0a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
 8002d0e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8002d12:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002d16:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8002d1a:	4b06      	ldr	r3, [pc, #24]	; (8002d34 <TIMER2_IRQHandler+0x48>)
 8002d1c:	2210      	movs	r2, #16
 8002d1e:	f8c3 2c14 	str.w	r2, [r3, #3092]	; 0xc14
 8002d22:	4805      	ldr	r0, [pc, #20]	; (8002d38 <TIMER2_IRQHandler+0x4c>)
 8002d24:	f005 fdf7 	bl	8008916 <timer_interrupt_flag_clear>
 8002d28:	f3bf 8f5f 	dmb	sy
 8002d2c:	bd08      	pop	{r3, pc}
 8002d2e:	bf00      	nop
 8002d30:	2000020c 	andcs	r0, r0, ip, lsl #4
 8002d34:	40010000 	andmi	r0, r1, r0
 8002d38:	40000400 	andmi	r0, r0, r0, lsl #8

08002d3c <TIMER3_IRQHandler>:
 8002d3c:	b508      	push	{r3, lr}
 8002d3e:	f3bf 8f5f 	dmb	sy
 8002d42:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002d46:	4804      	ldr	r0, [pc, #16]	; (8002d58 <TIMER3_IRQHandler+0x1c>)
 8002d48:	f8d3 1810 	ldr.w	r1, [r3, #2064]	; 0x810
 8002d4c:	f005 fde3 	bl	8008916 <timer_interrupt_flag_clear>
 8002d50:	f3bf 8f5f 	dmb	sy
 8002d54:	bd08      	pop	{r3, pc}
 8002d56:	bf00      	nop
 8002d58:	40000800 	andmi	r0, r0, r0, lsl #16

08002d5c <TIMER6_IRQHandler>:
 8002d5c:	b508      	push	{r3, lr}
 8002d5e:	f3bf 8f5f 	dmb	sy
 8002d62:	4b07      	ldr	r3, [pc, #28]	; (8002d80 <TIMER6_IRQHandler+0x24>)
 8002d64:	4807      	ldr	r0, [pc, #28]	; (8002d84 <TIMER6_IRQHandler+0x28>)
 8002d66:	685a      	ldr	r2, [r3, #4]
 8002d68:	6899      	ldr	r1, [r3, #8]
 8002d6a:	1a52      	subs	r2, r2, r1
 8002d6c:	601a      	str	r2, [r3, #0]
 8002d6e:	685a      	ldr	r2, [r3, #4]
 8002d70:	609a      	str	r2, [r3, #8]
 8002d72:	2101      	movs	r1, #1
 8002d74:	f005 fdcf 	bl	8008916 <timer_interrupt_flag_clear>
 8002d78:	f3bf 8f5f 	dmb	sy
 8002d7c:	bd08      	pop	{r3, pc}
 8002d7e:	bf00      	nop
 8002d80:	20000624 	andcs	r0, r0, r4, lsr #12
 8002d84:	40001400 	andmi	r1, r0, r0, lsl #8

08002d88 <Dmx::ClearData(unsigned int)>:
 8002d88:	4a0a      	ldr	r2, [pc, #40]	; (8002db4 <Dmx::ClearData(unsigned int)+0x2c>)
 8002d8a:	f44f 7301 	mov.w	r3, #516	; 0x204
 8002d8e:	fb03 2301 	mla	r3, r3, r1, r2
 8002d92:	b510      	push	{r4, lr}
 8002d94:	f203 2002 	addw	r0, r3, #514	; 0x202
 8002d98:	2400      	movs	r4, #0
 8002d9a:	f823 4b02 	strh.w	r4, [r3], #2
 8002d9e:	4283      	cmp	r3, r0
 8002da0:	d1fb      	bne.n	8002d9a <Dmx::ClearData(unsigned int)+0x12>
 8002da2:	f44f 7301 	mov.w	r3, #516	; 0x204
 8002da6:	fb03 2101 	mla	r1, r3, r1, r2
 8002daa:	f240 2301 	movw	r3, #513	; 0x201
 8002dae:	f8a1 3202 	strh.w	r3, [r1, #514]	; 0x202
 8002db2:	bd10      	pop	{r4, pc}
 8002db4:	2000041c 	andcs	r0, r0, ip, lsl r4

08002db8 <Dmx::StartData(unsigned int, unsigned int)>:
 8002db8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002dba:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 8002dbe:	b085      	sub	sp, #20
 8002dc0:	6943      	ldr	r3, [r0, #20]
 8002dc2:	460c      	mov	r4, r1
 8002dc4:	4615      	mov	r5, r2
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d168      	bne.n	8002e9c <Dmx::StartData(unsigned int, unsigned int)+0xe4>
 8002dca:	4e46      	ldr	r6, [pc, #280]	; (8002ee4 <Dmx::StartData(unsigned int, unsigned int)+0x12c>)
 8002dcc:	8834      	ldrh	r4, [r6, #0]
 8002dce:	b2a4      	uxth	r4, r4
 8002dd0:	2c00      	cmp	r4, #0
 8002dd2:	d157      	bne.n	8002e84 <Dmx::StartData(unsigned int, unsigned int)+0xcc>
 8002dd4:	f44f 60e0 	mov.w	r0, #1792	; 0x700
 8002dd8:	f005 fb64 	bl	80084a4 <rcu_periph_clock_enable>
 8002ddc:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8002de0:	f005 fcf0 	bl	80087c4 <timer_deinit>
 8002de4:	4b40      	ldr	r3, [pc, #256]	; (8002ee8 <Dmx::StartData(unsigned int, unsigned int)+0x130>)
 8002de6:	f88d 400c 	strb.w	r4, [sp, #12]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	9302      	str	r3, [sp, #8]
 8002dee:	4669      	mov	r1, sp
 8002df0:	2377      	movs	r3, #119	; 0x77
 8002df2:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8002df6:	e9cd 3400 	strd	r3, r4, [sp]
 8002dfa:	f005 fd45 	bl	8008888 <timer_init>
 8002dfe:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002e02:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8002e06:	f005 fd89 	bl	800891c <timer_flag_clear>
 8002e0a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002e0e:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8002e12:	f005 fd80 	bl	8008916 <timer_interrupt_flag_clear>
 8002e16:	2210      	movs	r2, #16
 8002e18:	4621      	mov	r1, r4
 8002e1a:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8002e1e:	f005 fd80 	bl	8008922 <timer_channel_output_mode_config>
 8002e22:	2210      	movs	r2, #16
 8002e24:	2101      	movs	r1, #1
 8002e26:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8002e2a:	f005 fd7a 	bl	8008922 <timer_channel_output_mode_config>
 8002e2e:	4f2f      	ldr	r7, [pc, #188]	; (8002eec <Dmx::StartData(unsigned int, unsigned int)+0x134>)
 8002e30:	2210      	movs	r2, #16
 8002e32:	2102      	movs	r1, #2
 8002e34:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8002e38:	f005 fd73 	bl	8008922 <timer_channel_output_mode_config>
 8002e3c:	4622      	mov	r2, r4
 8002e3e:	4621      	mov	r1, r4
 8002e40:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8002e44:	f005 fd93 	bl	800896e <timer_channel_output_pulse_value_config>
 8002e48:	683a      	ldr	r2, [r7, #0]
 8002e4a:	2101      	movs	r1, #1
 8002e4c:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8002e50:	f005 fd8d 	bl	800896e <timer_channel_output_pulse_value_config>
 8002e54:	4b26      	ldr	r3, [pc, #152]	; (8002ef0 <Dmx::StartData(unsigned int, unsigned int)+0x138>)
 8002e56:	683a      	ldr	r2, [r7, #0]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	2102      	movs	r1, #2
 8002e5c:	441a      	add	r2, r3
 8002e5e:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8002e62:	f005 fd84 	bl	800896e <timer_channel_output_pulse_value_config>
 8002e66:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8002e6a:	210e      	movs	r1, #14
 8002e6c:	f005 fd4f 	bl	800890e <timer_interrupt_enable>
 8002e70:	4b20      	ldr	r3, [pc, #128]	; (8002ef4 <Dmx::StartData(unsigned int, unsigned int)+0x13c>)
 8002e72:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002e76:	f883 431c 	strb.w	r4, [r3, #796]	; 0x31c
 8002e7a:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8002e7e:	601a      	str	r2, [r3, #0]
 8002e80:	f005 fd40 	bl	8008904 <timer_enable>
 8002e84:	8831      	ldrh	r1, [r6, #0]
 8002e86:	2201      	movs	r2, #1
 8002e88:	fa02 f305 	lsl.w	r3, r2, r5
 8002e8c:	430b      	orrs	r3, r1
 8002e8e:	b29b      	uxth	r3, r3
 8002e90:	8033      	strh	r3, [r6, #0]
 8002e92:	4b19      	ldr	r3, [pc, #100]	; (8002ef8 <Dmx::StartData(unsigned int, unsigned int)+0x140>)
 8002e94:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8002e98:	b005      	add	sp, #20
 8002e9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002e9c:	4b17      	ldr	r3, [pc, #92]	; (8002efc <Dmx::StartData(unsigned int, unsigned int)+0x144>)
 8002e9e:	f44f 7204 	mov.w	r2, #528	; 0x210
 8002ea2:	fb02 3305 	mla	r3, r2, r5, r3
 8002ea6:	2200      	movs	r2, #0
 8002ea8:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
 8002eac:	2107      	movs	r1, #7
 8002eae:	4620      	mov	r0, r4
 8002eb0:	f005 fe0a 	bl	8008ac8 <usart_flag_get>
 8002eb4:	2800      	cmp	r0, #0
 8002eb6:	d0f9      	beq.n	8002eac <Dmx::StartData(unsigned int, unsigned int)+0xf4>
 8002eb8:	4911      	ldr	r1, [pc, #68]	; (8002f00 <Dmx::StartData(unsigned int, unsigned int)+0x148>)
 8002eba:	4620      	mov	r0, r4
 8002ebc:	f005 fe26 	bl	8008b0c <usart_interrupt_flag_clear>
 8002ec0:	f240 3105 	movw	r1, #773	; 0x305
 8002ec4:	4620      	mov	r0, r4
 8002ec6:	f005 fe15 	bl	8008af4 <usart_interrupt_enable>
 8002eca:	4b0b      	ldr	r3, [pc, #44]	; (8002ef8 <Dmx::StartData(unsigned int, unsigned int)+0x140>)
 8002ecc:	2202      	movs	r2, #2
 8002ece:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8002ed2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002ed6:	f8d2 340c 	ldr.w	r3, [r2, #1036]	; 0x40c
 8002eda:	f043 0302 	orr.w	r3, r3, #2
 8002ede:	f8c2 340c 	str.w	r3, [r2, #1036]	; 0x40c
 8002ee2:	e7d9      	b.n	8002e98 <Dmx::StartData(unsigned int, unsigned int)+0xe0>
 8002ee4:	20000634 	andcs	r0, r0, r4, lsr r6
 8002ee8:	20000000 	andcs	r0, r0, r0
 8002eec:	20000008 	andcs	r0, r0, r8
 8002ef0:	20000004 	andcs	r0, r0, r4
 8002ef4:	e000e100 	and	lr, r0, r0, lsl #2
 8002ef8:	20000620 	andcs	r0, r0, r0, lsr #12
 8002efc:	2000020c 	andcs	r0, r0, ip, lsl #4
 8002f00:	00050305 	andeq	r0, r5, r5, lsl #6

08002f04 <Dmx::StopData(unsigned int, unsigned int)>:
 8002f04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002f08:	4f21      	ldr	r7, [pc, #132]	; (8002f90 <Dmx::StopData(unsigned int, unsigned int)+0x8c>)
 8002f0a:	f857 3022 	ldr.w	r3, [r7, r2, lsl #2]
 8002f0e:	4688      	mov	r8, r1
 8002f10:	4614      	mov	r4, r2
 8002f12:	b323      	cbz	r3, 8002f5e <Dmx::StopData(unsigned int, unsigned int)+0x5a>
 8002f14:	6943      	ldr	r3, [r0, #20]
 8002f16:	bb23      	cbnz	r3, 8002f62 <Dmx::StopData(unsigned int, unsigned int)+0x5e>
 8002f18:	4d1e      	ldr	r5, [pc, #120]	; (8002f94 <Dmx::StopData(unsigned int, unsigned int)+0x90>)
 8002f1a:	882b      	ldrh	r3, [r5, #0]
 8002f1c:	2601      	movs	r6, #1
 8002f1e:	fa06 f202 	lsl.w	r2, r6, r2
 8002f22:	b29b      	uxth	r3, r3
 8002f24:	ea23 0302 	bic.w	r3, r3, r2
 8002f28:	802b      	strh	r3, [r5, #0]
 8002f2a:	f3bf 8f5f 	dmb	sy
 8002f2e:	882b      	ldrh	r3, [r5, #0]
 8002f30:	f104 0208 	add.w	r2, r4, #8
 8002f34:	b29b      	uxth	r3, r3
 8002f36:	4096      	lsls	r6, r2
 8002f38:	ea36 0303 	bics.w	r3, r6, r3
 8002f3c:	d105      	bne.n	8002f4a <Dmx::StopData(unsigned int, unsigned int)+0x46>
 8002f3e:	2107      	movs	r1, #7
 8002f40:	4640      	mov	r0, r8
 8002f42:	f005 fdc1 	bl	8008ac8 <usart_flag_get>
 8002f46:	2801      	cmp	r0, #1
 8002f48:	d1f9      	bne.n	8002f3e <Dmx::StopData(unsigned int, unsigned int)+0x3a>
 8002f4a:	882b      	ldrh	r3, [r5, #0]
 8002f4c:	b29b      	uxth	r3, r3
 8002f4e:	ea23 0306 	bic.w	r3, r3, r6
 8002f52:	802b      	strh	r3, [r5, #0]
 8002f54:	f3bf 8f4f 	dsb	sy
 8002f58:	2300      	movs	r3, #0
 8002f5a:	f847 3024 	str.w	r3, [r7, r4, lsl #2]
 8002f5e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002f62:	f240 3105 	movw	r1, #773	; 0x305
 8002f66:	4640      	mov	r0, r8
 8002f68:	f005 fdce 	bl	8008b08 <usart_interrupt_disable>
 8002f6c:	4b0a      	ldr	r3, [pc, #40]	; (8002f98 <Dmx::StopData(unsigned int, unsigned int)+0x94>)
 8002f6e:	f44f 7204 	mov.w	r2, #528	; 0x210
 8002f72:	fb02 3304 	mla	r3, r2, r4, r3
 8002f76:	2200      	movs	r2, #0
 8002f78:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
 8002f7c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002f80:	f8d2 340c 	ldr.w	r3, [r2, #1036]	; 0x40c
 8002f84:	f023 0302 	bic.w	r3, r3, #2
 8002f88:	f8c2 340c 	str.w	r3, [r2, #1036]	; 0x40c
 8002f8c:	e7e4      	b.n	8002f58 <Dmx::StopData(unsigned int, unsigned int)+0x54>
 8002f8e:	bf00      	nop
 8002f90:	20000620 	andcs	r0, r0, r0, lsr #12
 8002f94:	20000634 	andcs	r0, r0, r4, lsr r6
 8002f98:	2000020c 	andcs	r0, r0, ip, lsl #4

08002f9c <Dmx::SetPortDirection(unsigned int, dmx::PortDirection, bool)>:
 8002f9c:	b570      	push	{r4, r5, r6, lr}
 8002f9e:	461d      	mov	r5, r3
 8002fa0:	6943      	ldr	r3, [r0, #20]
 8002fa2:	4293      	cmp	r3, r2
 8002fa4:	4606      	mov	r6, r0
 8002fa6:	4614      	mov	r4, r2
 8002fa8:	d014      	beq.n	8002fd4 <Dmx::SetPortDirection(unsigned int, dmx::PortDirection, bool)+0x38>
 8002faa:	6142      	str	r2, [r0, #20]
 8002fac:	4910      	ldr	r1, [pc, #64]	; (8002ff0 <Dmx::SetPortDirection(unsigned int, dmx::PortDirection, bool)+0x54>)
 8002fae:	2200      	movs	r2, #0
 8002fb0:	f7ff ffa8 	bl	8002f04 <Dmx::StopData(unsigned int, unsigned int)>
 8002fb4:	b934      	cbnz	r4, 8002fc4 <Dmx::SetPortDirection(unsigned int, dmx::PortDirection, bool)+0x28>
 8002fb6:	4b0f      	ldr	r3, [pc, #60]	; (8002ff4 <Dmx::SetPortDirection(unsigned int, dmx::PortDirection, bool)+0x58>)
 8002fb8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002fbc:	f8c3 2c10 	str.w	r2, [r3, #3088]	; 0xc10
 8002fc0:	b94d      	cbnz	r5, 8002fd6 <Dmx::SetPortDirection(unsigned int, dmx::PortDirection, bool)+0x3a>
 8002fc2:	bd70      	pop	{r4, r5, r6, pc}
 8002fc4:	2c01      	cmp	r4, #1
 8002fc6:	d1fb      	bne.n	8002fc0 <Dmx::SetPortDirection(unsigned int, dmx::PortDirection, bool)+0x24>
 8002fc8:	4b0a      	ldr	r3, [pc, #40]	; (8002ff4 <Dmx::SetPortDirection(unsigned int, dmx::PortDirection, bool)+0x58>)
 8002fca:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002fce:	f8c3 2c14 	str.w	r2, [r3, #3092]	; 0xc14
 8002fd2:	e7f5      	b.n	8002fc0 <Dmx::SetPortDirection(unsigned int, dmx::PortDirection, bool)+0x24>
 8002fd4:	b135      	cbz	r5, 8002fe4 <Dmx::SetPortDirection(unsigned int, dmx::PortDirection, bool)+0x48>
 8002fd6:	4630      	mov	r0, r6
 8002fd8:	4905      	ldr	r1, [pc, #20]	; (8002ff0 <Dmx::SetPortDirection(unsigned int, dmx::PortDirection, bool)+0x54>)
 8002fda:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8002fde:	2200      	movs	r2, #0
 8002fe0:	f7ff beea 	b.w	8002db8 <Dmx::StartData(unsigned int, unsigned int)>
 8002fe4:	462a      	mov	r2, r5
 8002fe6:	4902      	ldr	r1, [pc, #8]	; (8002ff0 <Dmx::SetPortDirection(unsigned int, dmx::PortDirection, bool)+0x54>)
 8002fe8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8002fec:	f7ff bf8a 	b.w	8002f04 <Dmx::StopData(unsigned int, unsigned int)>
 8002ff0:	40004800 	andmi	r4, r0, r0, lsl #16
 8002ff4:	40010000 	andmi	r0, r1, r0

08002ff8 <Dmx::Dmx()>:
 8002ff8:	225c      	movs	r2, #92	; 0x5c
 8002ffa:	230c      	movs	r3, #12
 8002ffc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003000:	e9c0 2300 	strd	r2, r3, [r0]
 8003004:	f246 13a8 	movw	r3, #25000	; 0x61a8
 8003008:	e9c0 3302 	strd	r3, r3, [r0, #8]
 800300c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003010:	8203      	strh	r3, [r0, #16]
 8003012:	4b5b      	ldr	r3, [pc, #364]	; (8003180 <Dmx::Dmx()+0x188>)
 8003014:	4e5b      	ldr	r6, [pc, #364]	; (8003184 <Dmx::Dmx()+0x18c>)
 8003016:	6018      	str	r0, [r3, #0]
 8003018:	4b5b      	ldr	r3, [pc, #364]	; (8003188 <Dmx::Dmx()+0x190>)
 800301a:	f8df 8190 	ldr.w	r8, [pc, #400]	; 80031ac <Dmx::Dmx()+0x1b4>
 800301e:	2400      	movs	r4, #0
 8003020:	b08b      	sub	sp, #44	; 0x2c
 8003022:	4605      	mov	r5, r0
 8003024:	801c      	strh	r4, [r3, #0]
 8003026:	2203      	movs	r2, #3
 8003028:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800302c:	4857      	ldr	r0, [pc, #348]	; (800318c <Dmx::Dmx()+0x194>)
 800302e:	2110      	movs	r1, #16
 8003030:	f005 f9a0 	bl	8008374 <gpio_init>
 8003034:	4621      	mov	r1, r4
 8003036:	4628      	mov	r0, r5
 8003038:	f7ff fea6 	bl	8002d88 <Dmx::ClearData(unsigned int)>
 800303c:	4b54      	ldr	r3, [pc, #336]	; (8003190 <Dmx::Dmx()+0x198>)
 800303e:	2201      	movs	r2, #1
 8003040:	4621      	mov	r1, r4
 8003042:	601c      	str	r4, [r3, #0]
 8003044:	4628      	mov	r0, r5
 8003046:	4623      	mov	r3, r4
 8003048:	f7ff ffa8 	bl	8002f9c <Dmx::SetPortDirection(unsigned int, dmx::PortDirection, bool)>
 800304c:	4b51      	ldr	r3, [pc, #324]	; (8003194 <Dmx::Dmx()+0x19c>)
 800304e:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 8003052:	f8c3 420c 	str.w	r4, [r3, #524]	; 0x20c
 8003056:	f005 fa25 	bl	80084a4 <rcu_periph_clock_enable>
 800305a:	f240 5001 	movw	r0, #1281	; 0x501
 800305e:	f005 fa21 	bl	80084a4 <rcu_periph_clock_enable>
 8003062:	484d      	ldr	r0, [pc, #308]	; (8003198 <Dmx::Dmx()+0x1a0>)
 8003064:	2101      	movs	r1, #1
 8003066:	f005 f879 	bl	800815c <dma_deinit>
 800306a:	4b4c      	ldr	r3, [pc, #304]	; (800319c <Dmx::Dmx()+0x1a4>)
 800306c:	484a      	ldr	r0, [pc, #296]	; (8003198 <Dmx::Dmx()+0x1a0>)
 800306e:	9406      	str	r4, [sp, #24]
 8003070:	2701      	movs	r7, #1
 8003072:	e9cd 3403 	strd	r3, r4, [sp, #12]
 8003076:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800307a:	aa03      	add	r2, sp, #12
 800307c:	9308      	str	r3, [sp, #32]
 800307e:	4639      	mov	r1, r7
 8003080:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003084:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
 8003088:	f88d 7026 	strb.w	r7, [sp, #38]	; 0x26
 800308c:	f005 f88e 	bl	80081ac <dma_init>
 8003090:	4639      	mov	r1, r7
 8003092:	4841      	ldr	r0, [pc, #260]	; (8003198 <Dmx::Dmx()+0x1a0>)
 8003094:	f005 f8c4 	bl	8008220 <dma_circulation_disable>
 8003098:	4639      	mov	r1, r7
 800309a:	483f      	ldr	r0, [pc, #252]	; (8003198 <Dmx::Dmx()+0x1a0>)
 800309c:	f005 f8d0 	bl	8008240 <dma_memory_to_memory_disable>
 80030a0:	f240 7001 	movw	r0, #1793	; 0x701
 80030a4:	f005 f9fe 	bl	80084a4 <rcu_periph_clock_enable>
 80030a8:	4630      	mov	r0, r6
 80030aa:	f005 fb8b 	bl	80087c4 <timer_deinit>
 80030ae:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
 80030b2:	2377      	movs	r3, #119	; 0x77
 80030b4:	a903      	add	r1, sp, #12
 80030b6:	4630      	mov	r0, r6
 80030b8:	e9cd 3403 	strd	r3, r4, [sp, #12]
 80030bc:	f8cd 9014 	str.w	r9, [sp, #20]
 80030c0:	f88d 4018 	strb.w	r4, [sp, #24]
 80030c4:	f005 fbe0 	bl	8008888 <timer_init>
 80030c8:	4649      	mov	r1, r9
 80030ca:	4630      	mov	r0, r6
 80030cc:	f005 fc26 	bl	800891c <timer_flag_clear>
 80030d0:	4649      	mov	r1, r9
 80030d2:	4630      	mov	r0, r6
 80030d4:	f005 fc1f 	bl	8008916 <timer_interrupt_flag_clear>
 80030d8:	4621      	mov	r1, r4
 80030da:	4630      	mov	r0, r6
 80030dc:	2210      	movs	r2, #16
 80030de:	f005 fc20 	bl	8008922 <timer_channel_output_mode_config>
 80030e2:	4639      	mov	r1, r7
 80030e4:	4630      	mov	r0, r6
 80030e6:	2210      	movs	r2, #16
 80030e8:	f005 fc1b 	bl	8008922 <timer_channel_output_mode_config>
 80030ec:	4630      	mov	r0, r6
 80030ee:	2210      	movs	r2, #16
 80030f0:	2102      	movs	r1, #2
 80030f2:	f005 fc16 	bl	8008922 <timer_channel_output_mode_config>
 80030f6:	2210      	movs	r2, #16
 80030f8:	2103      	movs	r1, #3
 80030fa:	4630      	mov	r0, r6
 80030fc:	f005 fc11 	bl	8008922 <timer_channel_output_mode_config>
 8003100:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8003104:	f888 431d 	strb.w	r4, [r8, #797]	; 0x31d
 8003108:	4630      	mov	r0, r6
 800310a:	f8c8 3000 	str.w	r3, [r8]
 800310e:	f005 fbf9 	bl	8008904 <timer_enable>
 8003112:	f240 7005 	movw	r0, #1797	; 0x705
 8003116:	f005 f9c5 	bl	80084a4 <rcu_periph_clock_enable>
 800311a:	4821      	ldr	r0, [pc, #132]	; (80031a0 <Dmx::Dmx()+0x1a8>)
 800311c:	f005 fb52 	bl	80087c4 <timer_deinit>
 8003120:	f642 63df 	movw	r3, #11999	; 0x2edf
 8003124:	f8ad 300c 	strh.w	r3, [sp, #12]
 8003128:	a903      	add	r1, sp, #12
 800312a:	f242 7310 	movw	r3, #10000	; 0x2710
 800312e:	481c      	ldr	r0, [pc, #112]	; (80031a0 <Dmx::Dmx()+0x1a8>)
 8003130:	9305      	str	r3, [sp, #20]
 8003132:	f005 fba9 	bl	8008888 <timer_init>
 8003136:	4649      	mov	r1, r9
 8003138:	4819      	ldr	r0, [pc, #100]	; (80031a0 <Dmx::Dmx()+0x1a8>)
 800313a:	f005 fbef 	bl	800891c <timer_flag_clear>
 800313e:	4649      	mov	r1, r9
 8003140:	4817      	ldr	r0, [pc, #92]	; (80031a0 <Dmx::Dmx()+0x1a8>)
 8003142:	f005 fbe8 	bl	8008916 <timer_interrupt_flag_clear>
 8003146:	4639      	mov	r1, r7
 8003148:	4815      	ldr	r0, [pc, #84]	; (80031a0 <Dmx::Dmx()+0x1a8>)
 800314a:	f005 fbe0 	bl	800890e <timer_interrupt_enable>
 800314e:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8003152:	f888 4337 	strb.w	r4, [r8, #823]	; 0x337
 8003156:	4812      	ldr	r0, [pc, #72]	; (80031a0 <Dmx::Dmx()+0x1a8>)
 8003158:	f8c8 3004 	str.w	r3, [r8, #4]
 800315c:	f005 fbd2 	bl	8008904 <timer_enable>
 8003160:	2302      	movs	r3, #2
 8003162:	9300      	str	r3, [sp, #0]
 8003164:	490f      	ldr	r1, [pc, #60]	; (80031a4 <Dmx::Dmx()+0x1ac>)
 8003166:	4810      	ldr	r0, [pc, #64]	; (80031a8 <Dmx::Dmx()+0x1b0>)
 8003168:	4623      	mov	r3, r4
 800316a:	2208      	movs	r2, #8
 800316c:	f005 ff6c 	bl	8009048 <gd32_uart_begin>
 8003170:	2380      	movs	r3, #128	; 0x80
 8003172:	4628      	mov	r0, r5
 8003174:	f8c8 3004 	str.w	r3, [r8, #4]
 8003178:	b00b      	add	sp, #44	; 0x2c
 800317a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800317e:	bf00      	nop
 8003180:	20000638 	andcs	r0, r0, r8, lsr r6
 8003184:	40000400 	andmi	r0, r0, r0, lsl #8
 8003188:	20000634 	andcs	r0, r0, r4, lsr r6
 800318c:	40010c00 	andmi	r0, r1, r0, lsl #24
 8003190:	20000620 	andcs	r0, r0, r0, lsr #12
 8003194:	2000020c 	andcs	r0, r0, ip, lsl #4
 8003198:	40020000 	andmi	r0, r2, r0
 800319c:	40004804 	andmi	r4, r0, r4, lsl #16
 80031a0:	40001400 	andmi	r1, r0, r0, lsl #8
 80031a4:	0003d090 	muleq	r3, r0, r0
 80031a8:	40004800 	andmi	r4, r0, r0, lsl #16
 80031ac:	e000e100 	and	lr, r0, r0, lsl #2

080031b0 <Dmx::GetDmxAvailable(unsigned int)>:
 80031b0:	4b08      	ldr	r3, [pc, #32]	; (80031d4 <Dmx::GetDmxAvailable(unsigned int)+0x24>)
 80031b2:	f44f 7204 	mov.w	r2, #528	; 0x210
 80031b6:	fb02 3101 	mla	r1, r2, r1, r3
 80031ba:	f8d1 3204 	ldr.w	r3, [r1, #516]	; 0x204
 80031be:	f413 4000 	ands.w	r0, r3, #32768	; 0x8000
 80031c2:	bf1f      	itttt	ne
 80031c4:	f423 4300 	bicne.w	r3, r3, #32768	; 0x8000
 80031c8:	f103 33ff 	addne.w	r3, r3, #4294967295	; 0xffffffff
 80031cc:	f8c1 3204 	strne.w	r3, [r1, #516]	; 0x204
 80031d0:	4608      	movne	r0, r1
 80031d2:	4770      	bx	lr
 80031d4:	2000020c 	andcs	r0, r0, ip, lsl #4

080031d8 <Dmx::GetUpdatesPerSecond(unsigned int)>:
 80031d8:	f3bf 8f5f 	dmb	sy
 80031dc:	4b01      	ldr	r3, [pc, #4]	; (80031e4 <Dmx::GetUpdatesPerSecond(unsigned int)+0xc>)
 80031de:	0109      	lsls	r1, r1, #4
 80031e0:	5858      	ldr	r0, [r3, r1]
 80031e2:	4770      	bx	lr
 80031e4:	20000624 	andcs	r0, r0, r4, lsr #12

080031e8 <Dmx::RdmSendRaw(unsigned int, unsigned char const*, unsigned int)>:
 80031e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80031ea:	4e20      	ldr	r6, [pc, #128]	; (800326c <Dmx::RdmSendRaw(unsigned int, unsigned char const*, unsigned int)+0x84>)
 80031ec:	4614      	mov	r4, r2
 80031ee:	461d      	mov	r5, r3
 80031f0:	2106      	movs	r1, #6
 80031f2:	4630      	mov	r0, r6
 80031f4:	f005 fc68 	bl	8008ac8 <usart_flag_get>
 80031f8:	2800      	cmp	r0, #0
 80031fa:	d0f9      	beq.n	80031f0 <Dmx::RdmSendRaw(unsigned int, unsigned char const*, unsigned int)+0x8>
 80031fc:	4e1c      	ldr	r6, [pc, #112]	; (8003270 <Dmx::RdmSendRaw(unsigned int, unsigned char const*, unsigned int)+0x88>)
 80031fe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003202:	2203      	movs	r2, #3
 8003204:	4630      	mov	r0, r6
 8003206:	f44f 6780 	mov.w	r7, #1024	; 0x400
 800320a:	2110      	movs	r1, #16
 800320c:	f005 f8b2 	bl	8008374 <gpio_init>
 8003210:	6177      	str	r7, [r6, #20]
 8003212:	2100      	movs	r1, #0
 8003214:	20b0      	movs	r0, #176	; 0xb0
 8003216:	f006 f805 	bl	8009224 <udelay(unsigned int, unsigned int)>
 800321a:	463b      	mov	r3, r7
 800321c:	4630      	mov	r0, r6
 800321e:	2203      	movs	r2, #3
 8003220:	2118      	movs	r1, #24
 8003222:	f005 f8a7 	bl	8008374 <gpio_init>
 8003226:	2100      	movs	r1, #0
 8003228:	200c      	movs	r0, #12
 800322a:	f005 fffb 	bl	8009224 <udelay(unsigned int, unsigned int)>
 800322e:	4425      	add	r5, r4
 8003230:	f5a6 4648 	sub.w	r6, r6, #51200	; 0xc800
 8003234:	f04f 2740 	mov.w	r7, #1073758208	; 0x40004000
 8003238:	42ac      	cmp	r4, r5
 800323a:	d109      	bne.n	8003250 <Dmx::RdmSendRaw(unsigned int, unsigned char const*, unsigned int)+0x68>
 800323c:	4c0b      	ldr	r4, [pc, #44]	; (800326c <Dmx::RdmSendRaw(unsigned int, unsigned char const*, unsigned int)+0x84>)
 800323e:	f04f 2540 	mov.w	r5, #1073758208	; 0x40004000
 8003242:	2106      	movs	r1, #6
 8003244:	4620      	mov	r0, r4
 8003246:	f005 fc3f 	bl	8008ac8 <usart_flag_get>
 800324a:	2801      	cmp	r0, #1
 800324c:	d10b      	bne.n	8003266 <Dmx::RdmSendRaw(unsigned int, unsigned char const*, unsigned int)+0x7e>
 800324e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003250:	2107      	movs	r1, #7
 8003252:	4630      	mov	r0, r6
 8003254:	f005 fc38 	bl	8008ac8 <usart_flag_get>
 8003258:	2800      	cmp	r0, #0
 800325a:	d0f9      	beq.n	8003250 <Dmx::RdmSendRaw(unsigned int, unsigned char const*, unsigned int)+0x68>
 800325c:	f814 3b01 	ldrb.w	r3, [r4], #1
 8003260:	f8c7 3804 	str.w	r3, [r7, #2052]	; 0x804
 8003264:	e7e8      	b.n	8003238 <Dmx::RdmSendRaw(unsigned int, unsigned char const*, unsigned int)+0x50>
 8003266:	f8d5 3804 	ldr.w	r3, [r5, #2052]	; 0x804
 800326a:	e7ea      	b.n	8003242 <Dmx::RdmSendRaw(unsigned int, unsigned char const*, unsigned int)+0x5a>
 800326c:	40004800 	andmi	r4, r0, r0, lsl #16
 8003270:	40011000 	andmi	r1, r1, r0

08003274 <Dmx::RdmReceive(unsigned int)>:
 8003274:	4b07      	ldr	r3, [pc, #28]	; (8003294 <Dmx::RdmReceive(unsigned int)+0x20>)
 8003276:	f44f 7204 	mov.w	r2, #528	; 0x210
 800327a:	fb02 3101 	mla	r1, r2, r1, r3
 800327e:	f8b1 0204 	ldrh.w	r0, [r1, #516]	; 0x204
 8003282:	f410 4080 	ands.w	r0, r0, #16384	; 0x4000
 8003286:	bf1e      	ittt	ne
 8003288:	2300      	movne	r3, #0
 800328a:	f8c1 3204 	strne.w	r3, [r1, #516]	; 0x204
 800328e:	4608      	movne	r0, r1
 8003290:	4770      	bx	lr
 8003292:	bf00      	nop
 8003294:	2000020c 	andcs	r0, r0, ip, lsl #4

08003298 <Rdm::SendRawRespondMessage(unsigned int, unsigned char const*, unsigned int)>:
 8003298:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800329a:	4b08      	ldr	r3, [pc, #32]	; (80032bc <Rdm::SendRawRespondMessage(unsigned int, unsigned char const*, unsigned int)+0x24>)
 800329c:	9201      	str	r2, [sp, #4]
 800329e:	4604      	mov	r4, r0
 80032a0:	460d      	mov	r5, r1
 80032a2:	20c8      	movs	r0, #200	; 0xc8
 80032a4:	6819      	ldr	r1, [r3, #0]
 80032a6:	f005 ffbd 	bl	8009224 <udelay(unsigned int, unsigned int)>
 80032aa:	9a01      	ldr	r2, [sp, #4]
 80032ac:	4629      	mov	r1, r5
 80032ae:	4620      	mov	r0, r4
 80032b0:	b003      	add	sp, #12
 80032b2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80032b6:	f7ff bb73 	b.w	80029a0 <Rdm::SendRaw(unsigned int, unsigned char const*, unsigned int)>
 80032ba:	bf00      	nop
 80032bc:	2000063c 	andcs	r0, r0, ip, lsr r6

080032c0 <Rdm::SendDiscoveryRespondMessage(unsigned int, unsigned char const*, unsigned int)>:
 80032c0:	4b1d      	ldr	r3, [pc, #116]	; (8003338 <Rdm::SendDiscoveryRespondMessage(unsigned int, unsigned char const*, unsigned int)+0x78>)
 80032c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80032c6:	4606      	mov	r6, r0
 80032c8:	460c      	mov	r4, r1
 80032ca:	20c8      	movs	r0, #200	; 0xc8
 80032cc:	6819      	ldr	r1, [r3, #0]
 80032ce:	4f1b      	ldr	r7, [pc, #108]	; (800333c <Rdm::SendDiscoveryRespondMessage(unsigned int, unsigned char const*, unsigned int)+0x7c>)
 80032d0:	4615      	mov	r5, r2
 80032d2:	f005 ffa7 	bl	8009224 <udelay(unsigned int, unsigned int)>
 80032d6:	2300      	movs	r3, #0
 80032d8:	4631      	mov	r1, r6
 80032da:	6838      	ldr	r0, [r7, #0]
 80032dc:	4e18      	ldr	r6, [pc, #96]	; (8003340 <Rdm::SendDiscoveryRespondMessage(unsigned int, unsigned char const*, unsigned int)+0x80>)
 80032de:	461a      	mov	r2, r3
 80032e0:	f7ff fe5c 	bl	8002f9c <Dmx::SetPortDirection(unsigned int, dmx::PortDirection, bool)>
 80032e4:	4425      	add	r5, r4
 80032e6:	f04f 2840 	mov.w	r8, #1073758208	; 0x40004000
 80032ea:	42ac      	cmp	r4, r5
 80032ec:	d115      	bne.n	800331a <Rdm::SendDiscoveryRespondMessage(unsigned int, unsigned char const*, unsigned int)+0x5a>
 80032ee:	4d14      	ldr	r5, [pc, #80]	; (8003340 <Rdm::SendDiscoveryRespondMessage(unsigned int, unsigned char const*, unsigned int)+0x80>)
 80032f0:	f04f 2640 	mov.w	r6, #1073758208	; 0x40004000
 80032f4:	2106      	movs	r1, #6
 80032f6:	4628      	mov	r0, r5
 80032f8:	f005 fbe6 	bl	8008ac8 <usart_flag_get>
 80032fc:	2801      	cmp	r0, #1
 80032fe:	4604      	mov	r4, r0
 8003300:	d116      	bne.n	8003330 <Rdm::SendDiscoveryRespondMessage(unsigned int, unsigned char const*, unsigned int)+0x70>
 8003302:	2100      	movs	r1, #0
 8003304:	2004      	movs	r0, #4
 8003306:	f005 ff8d 	bl	8009224 <udelay(unsigned int, unsigned int)>
 800330a:	6838      	ldr	r0, [r7, #0]
 800330c:	4623      	mov	r3, r4
 800330e:	4622      	mov	r2, r4
 8003310:	2100      	movs	r1, #0
 8003312:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003316:	f7ff be41 	b.w	8002f9c <Dmx::SetPortDirection(unsigned int, dmx::PortDirection, bool)>
 800331a:	2107      	movs	r1, #7
 800331c:	4630      	mov	r0, r6
 800331e:	f005 fbd3 	bl	8008ac8 <usart_flag_get>
 8003322:	2800      	cmp	r0, #0
 8003324:	d0f9      	beq.n	800331a <Rdm::SendDiscoveryRespondMessage(unsigned int, unsigned char const*, unsigned int)+0x5a>
 8003326:	f814 3b01 	ldrb.w	r3, [r4], #1
 800332a:	f8c8 3804 	str.w	r3, [r8, #2052]	; 0x804
 800332e:	e7dc      	b.n	80032ea <Rdm::SendDiscoveryRespondMessage(unsigned int, unsigned char const*, unsigned int)+0x2a>
 8003330:	f8d6 3804 	ldr.w	r3, [r6, #2052]	; 0x804
 8003334:	e7de      	b.n	80032f4 <Rdm::SendDiscoveryRespondMessage(unsigned int, unsigned char const*, unsigned int)+0x34>
 8003336:	bf00      	nop
 8003338:	2000063c 	andcs	r0, r0, ip, lsr r6
 800333c:	20000638 	andcs	r0, r0, r8, lsr r6
 8003340:	40004800 	andmi	r4, r0, r0, lsl #16

08003344 <memcpy.isra.0>:
 8003344:	f004 bc8e 	b.w	8007c64 <memcpy>

08003348 <RDMDeviceParams::RDMDeviceParams(RDMDeviceParamsStore*)>:
 8003348:	b510      	push	{r4, lr}
 800334a:	6001      	str	r1, [r0, #0]
 800334c:	2100      	movs	r1, #0
 800334e:	4604      	mov	r4, r0
 8003350:	6041      	str	r1, [r0, #4]
 8003352:	2220      	movs	r2, #32
 8003354:	3008      	adds	r0, #8
 8003356:	f004 fca7 	bl	8007ca8 <memset>
 800335a:	4b03      	ldr	r3, [pc, #12]	; (8003368 <RDMDeviceParams::RDMDeviceParams(RDMDeviceParamsStore*)+0x20>)
 800335c:	62a3      	str	r3, [r4, #40]	; 0x28
 800335e:	237f      	movs	r3, #127	; 0x7f
 8003360:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
 8003364:	4620      	mov	r0, r4
 8003366:	bd10      	pop	{r4, pc}
 8003368:	ff7fff00 			; <UNDEFINED> instruction: 0xff7fff00

0800336c <RDMDeviceParams::Load()>:
 800336c:	4601      	mov	r1, r0
 800336e:	6800      	ldr	r0, [r0, #0]
 8003370:	b130      	cbz	r0, 8003380 <RDMDeviceParams::Load()+0x14>
 8003372:	b508      	push	{r3, lr}
 8003374:	6803      	ldr	r3, [r0, #0]
 8003376:	3104      	adds	r1, #4
 8003378:	68db      	ldr	r3, [r3, #12]
 800337a:	4798      	blx	r3
 800337c:	2001      	movs	r0, #1
 800337e:	bd08      	pop	{r3, pc}
 8003380:	4770      	bx	lr

08003382 <RDMDeviceParams::Set(RDMDevice*)>:
 8003382:	6843      	ldr	r3, [r0, #4]
 8003384:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003388:	460c      	mov	r4, r1
 800338a:	07d9      	lsls	r1, r3, #31
 800338c:	4605      	mov	r5, r0
 800338e:	d519      	bpl.n	80033c4 <RDMDeviceParams::Set(RDMDevice*)+0x42>
 8003390:	f890 6028 	ldrb.w	r6, [r0, #40]	; 0x28
 8003394:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
 8003398:	2e20      	cmp	r6, #32
 800339a:	f100 0108 	add.w	r1, r0, #8
 800339e:	bf28      	it	cs
 80033a0:	2620      	movcs	r6, #32
 80033a2:	b1f3      	cbz	r3, 80033e2 <RDMDeviceParams::Set(RDMDevice*)+0x60>
 80033a4:	f104 070a 	add.w	r7, r4, #10
 80033a8:	4638      	mov	r0, r7
 80033aa:	4632      	mov	r2, r6
 80033ac:	f7ff ffca 	bl	8003344 <memcpy.isra.0>
 80033b0:	6f60      	ldr	r0, [r4, #116]	; 0x74
 80033b2:	f884 602a 	strb.w	r6, [r4, #42]	; 0x2a
 80033b6:	b128      	cbz	r0, 80033c4 <RDMDeviceParams::Set(RDMDevice*)+0x42>
 80033b8:	6802      	ldr	r2, [r0, #0]
 80033ba:	4639      	mov	r1, r7
 80033bc:	f8d2 8008 	ldr.w	r8, [r2, #8]
 80033c0:	4632      	mov	r2, r6
 80033c2:	47c0      	blx	r8
 80033c4:	686b      	ldr	r3, [r5, #4]
 80033c6:	079a      	lsls	r2, r3, #30
 80033c8:	bf44      	itt	mi
 80033ca:	f8b5 2029 	ldrhmi.w	r2, [r5, #41]	; 0x29
 80033ce:	f8a4 204c 	strhmi.w	r2, [r4, #76]	; 0x4c
 80033d2:	075b      	lsls	r3, r3, #29
 80033d4:	bf44      	itt	mi
 80033d6:	f8b5 302b 	ldrhmi.w	r3, [r5, #43]	; 0x2b
 80033da:	f8a4 304e 	strhmi.w	r3, [r4, #78]	; 0x4e
 80033de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80033e2:	4632      	mov	r2, r6
 80033e4:	f104 0051 	add.w	r0, r4, #81	; 0x51
 80033e8:	f7ff ffac 	bl	8003344 <memcpy.isra.0>
 80033ec:	f884 6071 	strb.w	r6, [r4, #113]	; 0x71
 80033f0:	e7e8      	b.n	80033c4 <RDMDeviceParams::Set(RDMDevice*)+0x42>

080033f2 <RDMDeviceParams::Dump()>:
 80033f2:	4770      	bx	lr

080033f4 <RDMDeviceResponder::PersonalityUpdate(LightSet*)>:
 80033f4:	4770      	bx	lr

080033f6 <RDMDeviceResponder::DmxStartAddressUpdate()>:
 80033f6:	4770      	bx	lr

080033f8 <RDMDeviceResponder::~RDMDeviceResponder()>:
 80033f8:	b510      	push	{r4, lr}
 80033fa:	4b06      	ldr	r3, [pc, #24]	; (8003414 <RDMDeviceResponder::~RDMDeviceResponder()+0x1c>)
 80033fc:	4604      	mov	r4, r0
 80033fe:	f840 3b88 	str.w	r3, [r0], #136
 8003402:	f7ff f981 	bl	8002708 <RDMSubDevices::~RDMSubDevices()>
 8003406:	f104 0080 	add.w	r0, r4, #128	; 0x80
 800340a:	f7fe fb43 	bl	8001a94 <RDMSensors::~RDMSensors()>
 800340e:	4620      	mov	r0, r4
 8003410:	bd10      	pop	{r4, pc}
 8003412:	bf00      	nop
 8003414:	08009a78 	stmdaeq	r0, {r3, r4, r5, r6, r9, fp, ip, pc}

08003418 <RDMDeviceResponder::~RDMDeviceResponder()>:
 8003418:	b510      	push	{r4, lr}
 800341a:	4604      	mov	r4, r0
 800341c:	f7ff ffec 	bl	80033f8 <RDMDeviceResponder::~RDMDeviceResponder()>
 8003420:	4620      	mov	r0, r4
 8003422:	f004 fba6 	bl	8007b72 <operator delete(void*)>
 8003426:	4620      	mov	r0, r4
 8003428:	bd10      	pop	{r4, pc}

0800342a <RDMDevice::SetLabel(TRDMDeviceInfoData const*)>:
 800342a:	b470      	push	{r4, r5, r6}
 800342c:	790a      	ldrb	r2, [r1, #4]
 800342e:	680b      	ldr	r3, [r1, #0]
 8003430:	f890 1050 	ldrb.w	r1, [r0, #80]	; 0x50
 8003434:	2a20      	cmp	r2, #32
 8003436:	bf28      	it	cs
 8003438:	2220      	movcs	r2, #32
 800343a:	189c      	adds	r4, r3, r2
 800343c:	b189      	cbz	r1, 8003462 <RDMDevice::SetLabel(TRDMDeviceInfoData const*)+0x38>
 800343e:	f100 010a 	add.w	r1, r0, #10
 8003442:	460d      	mov	r5, r1
 8003444:	42a3      	cmp	r3, r4
 8003446:	d107      	bne.n	8003458 <RDMDevice::SetLabel(TRDMDeviceInfoData const*)+0x2e>
 8003448:	f880 202a 	strb.w	r2, [r0, #42]	; 0x2a
 800344c:	6f40      	ldr	r0, [r0, #116]	; 0x74
 800344e:	b170      	cbz	r0, 800346e <RDMDevice::SetLabel(TRDMDeviceInfoData const*)+0x44>
 8003450:	6803      	ldr	r3, [r0, #0]
 8003452:	bc70      	pop	{r4, r5, r6}
 8003454:	689b      	ldr	r3, [r3, #8]
 8003456:	4718      	bx	r3
 8003458:	f813 6b01 	ldrb.w	r6, [r3], #1
 800345c:	f805 6b01 	strb.w	r6, [r5], #1
 8003460:	e7f0      	b.n	8003444 <RDMDevice::SetLabel(TRDMDeviceInfoData const*)+0x1a>
 8003462:	f100 0151 	add.w	r1, r0, #81	; 0x51
 8003466:	42a3      	cmp	r3, r4
 8003468:	d103      	bne.n	8003472 <RDMDevice::SetLabel(TRDMDeviceInfoData const*)+0x48>
 800346a:	f880 2071 	strb.w	r2, [r0, #113]	; 0x71
 800346e:	bc70      	pop	{r4, r5, r6}
 8003470:	4770      	bx	lr
 8003472:	f813 5b01 	ldrb.w	r5, [r3], #1
 8003476:	f801 5b01 	strb.w	r5, [r1], #1
 800347a:	e7f4      	b.n	8003466 <RDMDevice::SetLabel(TRDMDeviceInfoData const*)+0x3c>

0800347c <RDMDeviceResponder::RDMDeviceResponder(RDMPersonality**, unsigned int)>:
 800347c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800347e:	1d07      	adds	r7, r0, #4
 8003480:	4604      	mov	r4, r0
 8003482:	4638      	mov	r0, r7
 8003484:	460e      	mov	r6, r1
 8003486:	4615      	mov	r5, r2
 8003488:	f001 f9f2 	bl	8004870 <RDMDevice::RDMDevice()>
 800348c:	4620      	mov	r0, r4
 800348e:	4b27      	ldr	r3, [pc, #156]	; (800352c <RDMDeviceResponder::RDMDeviceResponder(RDMPersonality**, unsigned int)+0xb0>)
 8003490:	f840 3b7c 	str.w	r3, [r0], #124
 8003494:	f001 f9ac 	bl	80047f0 <RDMIdentify::RDMIdentify()>
 8003498:	f104 0080 	add.w	r0, r4, #128	; 0x80
 800349c:	f7fe facc 	bl	8001a38 <RDMSensors::RDMSensors()>
 80034a0:	f104 0088 	add.w	r0, r4, #136	; 0x88
 80034a4:	f7ff f928 	bl	80026f8 <RDMSubDevices::RDMSubDevices()>
 80034a8:	4b21      	ldr	r3, [pc, #132]	; (8003530 <RDMDeviceResponder::RDMDeviceResponder(RDMPersonality**, unsigned int)+0xb4>)
 80034aa:	f8c4 6090 	str.w	r6, [r4, #144]	; 0x90
 80034ae:	601c      	str	r4, [r3, #0]
 80034b0:	2365      	movs	r3, #101	; 0x65
 80034b2:	f884 30bf 	strb.w	r3, [r4, #191]	; 0xbf
 80034b6:	f44f 73b7 	mov.w	r3, #366	; 0x16e
 80034ba:	2200      	movs	r2, #0
 80034bc:	f8c4 30c0 	str.w	r3, [r4, #192]	; 0xc0
 80034c0:	2301      	movs	r3, #1
 80034c2:	f8a4 30c4 	strh.w	r3, [r4, #196]	; 0xc4
 80034c6:	f8c4 20c8 	str.w	r2, [r4, #200]	; 0xc8
 80034ca:	f104 0399 	add.w	r3, r4, #153	; 0x99
 80034ce:	f104 01ac 	add.w	r1, r4, #172	; 0xac
 80034d2:	428b      	cmp	r3, r1
 80034d4:	d123      	bne.n	800351e <RDMDeviceResponder::RDMDeviceResponder(RDMPersonality**, unsigned int)+0xa2>
 80034d6:	f104 02bf 	add.w	r2, r4, #191	; 0xbf
 80034da:	2100      	movs	r1, #0
 80034dc:	4293      	cmp	r3, r2
 80034de:	d121      	bne.n	8003524 <RDMDeviceResponder::RDMDeviceResponder(RDMPersonality**, unsigned int)+0xa8>
 80034e0:	f884 50a6 	strb.w	r5, [r4, #166]	; 0xa6
 80034e4:	f7fd fe3a 	bl	800115c <RDMSoftwareVersion::GetVersion()>
 80034e8:	f8c4 0094 	str.w	r0, [r4, #148]	; 0x94
 80034ec:	f7fd fe3a 	bl	8001164 <RDMSoftwareVersion::GetVersionLength()>
 80034f0:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 80034f4:	f884 0098 	strb.w	r0, [r4, #152]	; 0x98
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	685b      	ldr	r3, [r3, #4]
 80034fc:	b91b      	cbnz	r3, 8003506 <RDMDeviceResponder::RDMDeviceResponder(RDMPersonality**, unsigned int)+0x8a>
 80034fe:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003502:	f8a4 30c4 	strh.w	r3, [r4, #196]	; 0xc4
 8003506:	4b0b      	ldr	r3, [pc, #44]	; (8003534 <RDMDeviceResponder::RDMDeviceResponder(RDMPersonality**, unsigned int)+0xb8>)
 8003508:	9300      	str	r3, [sp, #0]
 800350a:	4638      	mov	r0, r7
 800350c:	2317      	movs	r3, #23
 800350e:	4669      	mov	r1, sp
 8003510:	f88d 3004 	strb.w	r3, [sp, #4]
 8003514:	f7ff ff89 	bl	800342a <RDMDevice::SetLabel(TRDMDeviceInfoData const*)>
 8003518:	4620      	mov	r0, r4
 800351a:	b003      	add	sp, #12
 800351c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800351e:	f803 2b01 	strb.w	r2, [r3], #1
 8003522:	e7d6      	b.n	80034d2 <RDMDeviceResponder::RDMDeviceResponder(RDMPersonality**, unsigned int)+0x56>
 8003524:	f803 1b01 	strb.w	r1, [r3], #1
 8003528:	e7d8      	b.n	80034dc <RDMDeviceResponder::RDMDeviceResponder(RDMPersonality**, unsigned int)+0x60>
 800352a:	bf00      	nop
 800352c:	08009a78 	stmdaeq	r0, {r3, r4, r5, r6, r9, fp, ip, pc}
 8003530:	20000640 	andcs	r0, r0, r0, asr #12
 8003534:	08009a58 	stmdaeq	r0, {r3, r4, r6, r9, fp, ip, pc}

08003538 <RDMDeviceResponder::Init()>:
 8003538:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800353a:	2301      	movs	r3, #1
 800353c:	4604      	mov	r4, r0
 800353e:	f880 3054 	strb.w	r3, [r0, #84]	; 0x54
 8003542:	f100 0355 	add.w	r3, r0, #85	; 0x55
 8003546:	9300      	str	r3, [sp, #0]
 8003548:	3004      	adds	r0, #4
 800354a:	f890 3071 	ldrb.w	r3, [r0, #113]	; 0x71
 800354e:	f88d 3004 	strb.w	r3, [sp, #4]
 8003552:	4669      	mov	r1, sp
 8003554:	f7ff ff69 	bl	800342a <RDMDevice::SetLabel(TRDMDeviceInfoData const*)>
 8003558:	f06f 050d 	mvn.w	r5, #13
 800355c:	f894 3075 	ldrb.w	r3, [r4, #117]	; 0x75
 8003560:	f894 002e 	ldrb.w	r0, [r4, #46]	; 0x2e
 8003564:	f104 020e 	add.w	r2, r4, #14
 8003568:	1b2d      	subs	r5, r5, r4
 800356a:	18a9      	adds	r1, r5, r2
 800356c:	4288      	cmp	r0, r1
 800356e:	d84b      	bhi.n	8003608 <RDMDeviceResponder::Init()+0xd0>
 8003570:	f8a4 3076 	strh.w	r3, [r4, #118]	; 0x76
 8003574:	f7fd fdf8 	bl	8001168 <RDMSoftwareVersion::GetVersionId()>
 8003578:	f8b4 3050 	ldrh.w	r3, [r4, #80]	; 0x50
 800357c:	f884 309e 	strb.w	r3, [r4, #158]	; 0x9e
 8003580:	2201      	movs	r2, #1
 8003582:	f884 2099 	strb.w	r2, [r4, #153]	; 0x99
 8003586:	2200      	movs	r2, #0
 8003588:	f8a4 209a 	strh.w	r2, [r4, #154]	; 0x9a
 800358c:	f884 209c 	strb.w	r2, [r4, #156]	; 0x9c
 8003590:	0a1a      	lsrs	r2, r3, #8
 8003592:	0e03      	lsrs	r3, r0, #24
 8003594:	f884 309f 	strb.w	r3, [r4, #159]	; 0x9f
 8003598:	0c03      	lsrs	r3, r0, #16
 800359a:	f884 30a0 	strb.w	r3, [r4, #160]	; 0xa0
 800359e:	0a03      	lsrs	r3, r0, #8
 80035a0:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
 80035a4:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 80035a8:	f884 209d 	strb.w	r2, [r4, #157]	; 0x9d
 80035ac:	f884 00a2 	strb.w	r0, [r4, #162]	; 0xa2
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	f8b4 608c 	ldrh.w	r6, [r4, #140]	; 0x8c
 80035b6:	685d      	ldr	r5, [r3, #4]
 80035b8:	bb5d      	cbnz	r5, 8003612 <RDMDeviceResponder::Init()+0xda>
 80035ba:	f8b4 00c4 	ldrh.w	r0, [r4, #196]	; 0xc4
 80035be:	f884 50a3 	strb.w	r5, [r4, #163]	; 0xa3
 80035c2:	0a03      	lsrs	r3, r0, #8
 80035c4:	f884 50a4 	strb.w	r5, [r4, #164]	; 0xa4
 80035c8:	f884 30a7 	strb.w	r3, [r4, #167]	; 0xa7
 80035cc:	2301      	movs	r3, #1
 80035ce:	f884 30a5 	strb.w	r3, [r4, #165]	; 0xa5
 80035d2:	0a33      	lsrs	r3, r6, #8
 80035d4:	b2c0      	uxtb	r0, r0
 80035d6:	f884 30a9 	strb.w	r3, [r4, #169]	; 0xa9
 80035da:	f894 3084 	ldrb.w	r3, [r4, #132]	; 0x84
 80035de:	f884 30ab 	strb.w	r3, [r4, #171]	; 0xab
 80035e2:	f884 00a8 	strb.w	r0, [r4, #168]	; 0xa8
 80035e6:	f884 60aa 	strb.w	r6, [r4, #170]	; 0xaa
 80035ea:	f104 0399 	add.w	r3, r4, #153	; 0x99
 80035ee:	f104 02ac 	add.w	r2, r4, #172	; 0xac
 80035f2:	4293      	cmp	r3, r2
 80035f4:	d126      	bne.n	8003644 <RDMDeviceResponder::Init()+0x10c>
 80035f6:	f894 30a8 	ldrb.w	r3, [r4, #168]	; 0xa8
 80035fa:	f894 20a5 	ldrb.w	r2, [r4, #165]	; 0xa5
 80035fe:	4413      	add	r3, r2
 8003600:	f8a4 30c2 	strh.w	r3, [r4, #194]	; 0xc2
 8003604:	b002      	add	sp, #8
 8003606:	bd70      	pop	{r4, r5, r6, pc}
 8003608:	f812 1b01 	ldrb.w	r1, [r2], #1
 800360c:	440b      	add	r3, r1
 800360e:	b29b      	uxth	r3, r3
 8003610:	e7ab      	b.n	800356a <RDMDeviceResponder::Init()+0x32>
 8003612:	682b      	ldr	r3, [r5, #0]
 8003614:	4628      	mov	r0, r5
 8003616:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003618:	4798      	blx	r3
 800361a:	0a00      	lsrs	r0, r0, #8
 800361c:	f884 00a3 	strb.w	r0, [r4, #163]	; 0xa3
 8003620:	682b      	ldr	r3, [r5, #0]
 8003622:	4628      	mov	r0, r5
 8003624:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003626:	4798      	blx	r3
 8003628:	f884 00a4 	strb.w	r0, [r4, #164]	; 0xa4
 800362c:	682b      	ldr	r3, [r5, #0]
 800362e:	4628      	mov	r0, r5
 8003630:	6a1b      	ldr	r3, [r3, #32]
 8003632:	4798      	blx	r3
 8003634:	0a00      	lsrs	r0, r0, #8
 8003636:	f884 00a7 	strb.w	r0, [r4, #167]	; 0xa7
 800363a:	682b      	ldr	r3, [r5, #0]
 800363c:	4628      	mov	r0, r5
 800363e:	6a1b      	ldr	r3, [r3, #32]
 8003640:	4798      	blx	r3
 8003642:	e7c3      	b.n	80035cc <RDMDeviceResponder::Init()+0x94>
 8003644:	f813 1b01 	ldrb.w	r1, [r3], #1
 8003648:	7499      	strb	r1, [r3, #18]
 800364a:	e7d2      	b.n	80035f2 <RDMDeviceResponder::Init()+0xba>

0800364c <RDMDeviceResponder::Print()>:
 800364c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800364e:	4604      	mov	r4, r0
 8003650:	3004      	adds	r0, #4
 8003652:	f001 f97f 	bl	8004954 <RDMDevice::Print()>
 8003656:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 800365a:	481c      	ldr	r0, [pc, #112]	; (80036cc <RDMDeviceResponder::Print()+0x80>)
 800365c:	681d      	ldr	r5, [r3, #0]
 800365e:	6aae      	ldr	r6, [r5, #40]	; 0x28
 8003660:	f7fd ff80 	bl	8001564 <printf>
 8003664:	f894 209a 	ldrb.w	r2, [r4, #154]	; 0x9a
 8003668:	f894 1099 	ldrb.w	r1, [r4, #153]	; 0x99
 800366c:	4818      	ldr	r0, [pc, #96]	; (80036d0 <RDMDeviceResponder::Print()+0x84>)
 800366e:	f7fd ff79 	bl	8001564 <printf>
 8003672:	f894 30a8 	ldrb.w	r3, [r4, #168]	; 0xa8
 8003676:	f894 10a7 	ldrb.w	r1, [r4, #167]	; 0xa7
 800367a:	4816      	ldr	r0, [pc, #88]	; (80036d4 <RDMDeviceResponder::Print()+0x88>)
 800367c:	eb03 2101 	add.w	r1, r3, r1, lsl #8
 8003680:	f7fd ff70 	bl	8001564 <printf>
 8003684:	f894 30a4 	ldrb.w	r3, [r4, #164]	; 0xa4
 8003688:	f894 10a3 	ldrb.w	r1, [r4, #163]	; 0xa3
 800368c:	4812      	ldr	r0, [pc, #72]	; (80036d8 <RDMDeviceResponder::Print()+0x8c>)
 800368e:	eb03 2101 	add.w	r1, r3, r1, lsl #8
 8003692:	3508      	adds	r5, #8
 8003694:	f7fd ff66 	bl	8001564 <printf>
 8003698:	f894 20a6 	ldrb.w	r2, [r4, #166]	; 0xa6
 800369c:	f894 10a5 	ldrb.w	r1, [r4, #165]	; 0xa5
 80036a0:	9500      	str	r5, [sp, #0]
 80036a2:	b2f3      	uxtb	r3, r6
 80036a4:	480d      	ldr	r0, [pc, #52]	; (80036dc <RDMDeviceResponder::Print()+0x90>)
 80036a6:	f7fd ff5d 	bl	8001564 <printf>
 80036aa:	f894 10a9 	ldrb.w	r1, [r4, #169]	; 0xa9
 80036ae:	f894 30aa 	ldrb.w	r3, [r4, #170]	; 0xaa
 80036b2:	480b      	ldr	r0, [pc, #44]	; (80036e0 <RDMDeviceResponder::Print()+0x94>)
 80036b4:	eb03 2101 	add.w	r1, r3, r1, lsl #8
 80036b8:	f7fd ff54 	bl	8001564 <printf>
 80036bc:	f894 10ab 	ldrb.w	r1, [r4, #171]	; 0xab
 80036c0:	4808      	ldr	r0, [pc, #32]	; (80036e4 <RDMDeviceResponder::Print()+0x98>)
 80036c2:	b002      	add	sp, #8
 80036c4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80036c8:	f7fd bf4c 	b.w	8001564 <printf>
 80036cc:	080099a4 	stmdaeq	r0, {r2, r5, r7, r8, fp, ip, pc}
 80036d0:	080099c1 	stmdaeq	r0, {r0, r6, r7, r8, fp, ip, pc}
 80036d4:	080099da 	stmdaeq	r0, {r1, r3, r4, r6, r7, r8, fp, ip, pc}
 80036d8:	080099f2 	stmdaeq	r0, {r1, r4, r5, r6, r7, r8, fp, ip, pc}
 80036dc:	08009a0a 	stmdaeq	r0, {r1, r3, r9, fp, ip, pc}
 80036e0:	08009a28 	stmdaeq	r0, {r3, r5, r9, fp, ip, pc}
 80036e4:	08009a40 	stmdaeq	r0, {r6, r9, fp, ip, pc}

080036e8 <memcmp>:
 80036e8:	b510      	push	{r4, lr}
 80036ea:	3901      	subs	r1, #1
 80036ec:	4402      	add	r2, r0
 80036ee:	4290      	cmp	r0, r2
 80036f0:	d101      	bne.n	80036f6 <memcmp+0xe>
 80036f2:	2000      	movs	r0, #0
 80036f4:	e005      	b.n	8003702 <memcmp+0x1a>
 80036f6:	7803      	ldrb	r3, [r0, #0]
 80036f8:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80036fc:	42a3      	cmp	r3, r4
 80036fe:	d001      	beq.n	8003704 <memcmp+0x1c>
 8003700:	1b18      	subs	r0, r3, r4
 8003702:	bd10      	pop	{r4, pc}
 8003704:	3001      	adds	r0, #1
 8003706:	e7f2      	b.n	80036ee <memcmp+0x6>

08003708 <RDMDeviceResponder::GetSlotInfo(unsigned short, unsigned short, lightset::SlotInfo&) [clone .part.0]>:
 8003708:	f890 30a5 	ldrb.w	r3, [r0, #165]	; 0xa5
 800370c:	f8d0 0090 	ldr.w	r0, [r0, #144]	; 0x90
 8003710:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003714:	3b01      	subs	r3, #1
 8003716:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 800371a:	6858      	ldr	r0, [r3, #4]
 800371c:	6803      	ldr	r3, [r0, #0]
 800371e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003720:	4718      	bx	r3

08003722 <memcpy.isra.0>:
 8003722:	3801      	subs	r0, #1
 8003724:	440a      	add	r2, r1
 8003726:	4291      	cmp	r1, r2
 8003728:	d100      	bne.n	800372c <memcpy.isra.0+0xa>
 800372a:	4770      	bx	lr
 800372c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003730:	f800 3f01 	strb.w	r3, [r0, #1]!
 8003734:	e7f7      	b.n	8003726 <memcpy.isra.0+0x4>

08003736 <RDMDeviceResponder::SetDmxStartAddress(unsigned short, unsigned short)>:
 8003736:	b570      	push	{r4, r5, r6, lr}
 8003738:	4604      	mov	r4, r0
 800373a:	1e50      	subs	r0, r2, #1
 800373c:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8003740:	4615      	mov	r5, r2
 8003742:	d221      	bcs.n	8003788 <RDMDeviceResponder::SetDmxStartAddress(unsigned short, unsigned short)+0x52>
 8003744:	b129      	cbz	r1, 8003752 <RDMDeviceResponder::SetDmxStartAddress(unsigned short, unsigned short)+0x1c>
 8003746:	f104 0088 	add.w	r0, r4, #136	; 0x88
 800374a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800374e:	f7ff b81a 	b.w	8002786 <RDMSubDevices::SetDmxStartAddress(unsigned short, unsigned short)>
 8003752:	f894 30a5 	ldrb.w	r3, [r4, #165]	; 0xa5
 8003756:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 800375a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800375e:	3b01      	subs	r3, #1
 8003760:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003764:	6858      	ldr	r0, [r3, #4]
 8003766:	b178      	cbz	r0, 8003788 <RDMDeviceResponder::SetDmxStartAddress(unsigned short, unsigned short)+0x52>
 8003768:	6803      	ldr	r3, [r0, #0]
 800376a:	4629      	mov	r1, r5
 800376c:	69db      	ldr	r3, [r3, #28]
 800376e:	4798      	blx	r3
 8003770:	b120      	cbz	r0, 800377c <RDMDeviceResponder::SetDmxStartAddress(unsigned short, unsigned short)+0x46>
 8003772:	0a2b      	lsrs	r3, r5, #8
 8003774:	f884 30a7 	strb.w	r3, [r4, #167]	; 0xa7
 8003778:	f884 50a8 	strb.w	r5, [r4, #168]	; 0xa8
 800377c:	6823      	ldr	r3, [r4, #0]
 800377e:	4620      	mov	r0, r4
 8003780:	68db      	ldr	r3, [r3, #12]
 8003782:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8003786:	4718      	bx	r3
 8003788:	bd70      	pop	{r4, r5, r6, pc}

0800378a <RDMDeviceResponder::GetPersonality(unsigned short, unsigned char)>:
 800378a:	b111      	cbz	r1, 8003792 <RDMDeviceResponder::GetPersonality(unsigned short, unsigned char)+0x8>
 800378c:	3088      	adds	r0, #136	; 0x88
 800378e:	f7ff b824 	b.w	80027da <RDMSubDevices::GetPersonality(unsigned short, unsigned char)>
 8003792:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 8003796:	f8d0 3090 	ldr.w	r3, [r0, #144]	; 0x90
 800379a:	3a01      	subs	r2, #1
 800379c:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 80037a0:	4770      	bx	lr

080037a2 <RDMDeviceResponder::GetPersonalityCount(unsigned short)>:
 80037a2:	b111      	cbz	r1, 80037aa <RDMDeviceResponder::GetPersonalityCount(unsigned short)+0x8>
 80037a4:	3088      	adds	r0, #136	; 0x88
 80037a6:	f7ff b810 	b.w	80027ca <RDMSubDevices::GetPersonalityCount(unsigned short)>
 80037aa:	f890 00a6 	ldrb.w	r0, [r0, #166]	; 0xa6
 80037ae:	4770      	bx	lr

080037b0 <RDMDeviceResponder::SetPersonalityCurrent(unsigned short, unsigned char)>:
 80037b0:	b570      	push	{r4, r5, r6, lr}
 80037b2:	4604      	mov	r4, r0
 80037b4:	b121      	cbz	r1, 80037c0 <RDMDeviceResponder::SetPersonalityCurrent(unsigned short, unsigned char)+0x10>
 80037b6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80037ba:	3088      	adds	r0, #136	; 0x88
 80037bc:	f7fe bffc 	b.w	80027b8 <RDMSubDevices::SetPersonalityCurrent(unsigned short, unsigned char)>
 80037c0:	f884 20a5 	strb.w	r2, [r4, #165]	; 0xa5
 80037c4:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 80037c8:	f8d0 3090 	ldr.w	r3, [r0, #144]	; 0x90
 80037cc:	3a01      	subs	r2, #1
 80037ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80037d2:	685d      	ldr	r5, [r3, #4]
 80037d4:	b305      	cbz	r5, 8003818 <RDMDeviceResponder::SetPersonalityCurrent(unsigned short, unsigned char)+0x68>
 80037d6:	682b      	ldr	r3, [r5, #0]
 80037d8:	4628      	mov	r0, r5
 80037da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037dc:	4798      	blx	r3
 80037de:	0a00      	lsrs	r0, r0, #8
 80037e0:	f884 00a3 	strb.w	r0, [r4, #163]	; 0xa3
 80037e4:	682b      	ldr	r3, [r5, #0]
 80037e6:	4628      	mov	r0, r5
 80037e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037ea:	4798      	blx	r3
 80037ec:	f884 00a4 	strb.w	r0, [r4, #164]	; 0xa4
 80037f0:	682b      	ldr	r3, [r5, #0]
 80037f2:	4628      	mov	r0, r5
 80037f4:	6a1b      	ldr	r3, [r3, #32]
 80037f6:	4798      	blx	r3
 80037f8:	0a00      	lsrs	r0, r0, #8
 80037fa:	f884 00a7 	strb.w	r0, [r4, #167]	; 0xa7
 80037fe:	682b      	ldr	r3, [r5, #0]
 8003800:	4628      	mov	r0, r5
 8003802:	6a1b      	ldr	r3, [r3, #32]
 8003804:	4798      	blx	r3
 8003806:	6823      	ldr	r3, [r4, #0]
 8003808:	f884 00a8 	strb.w	r0, [r4, #168]	; 0xa8
 800380c:	4629      	mov	r1, r5
 800380e:	4620      	mov	r0, r4
 8003810:	689b      	ldr	r3, [r3, #8]
 8003812:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8003816:	4718      	bx	r3
 8003818:	bd70      	pop	{r4, r5, r6, pc}

0800381a <RDMHandler::RDMHandler(bool)>:
 800381a:	2200      	movs	r2, #0
 800381c:	e9c0 2201 	strd	r2, r2, [r0, #4]
 8003820:	7001      	strb	r1, [r0, #0]
 8003822:	7042      	strb	r2, [r0, #1]
 8003824:	4770      	bx	lr

08003826 <RDMHandler::HandleString(char const*, unsigned int)>:
 8003826:	6883      	ldr	r3, [r0, #8]
 8003828:	75da      	strb	r2, [r3, #23]
 800382a:	3318      	adds	r3, #24
 800382c:	440a      	add	r2, r1
 800382e:	4291      	cmp	r1, r2
 8003830:	d100      	bne.n	8003834 <RDMHandler::HandleString(char const*, unsigned int)+0xe>
 8003832:	4770      	bx	lr
 8003834:	f811 0b01 	ldrb.w	r0, [r1], #1
 8003838:	f803 0b01 	strb.w	r0, [r3], #1
 800383c:	e7f7      	b.n	800382e <RDMHandler::HandleString(char const*, unsigned int)+0x8>
	...

08003840 <RDMHandler::CreateRespondMessage(unsigned char, unsigned short)>:
 8003840:	b570      	push	{r4, r5, r6, lr}
 8003842:	e9d0 4301 	ldrd	r4, r3, [r0, #4]
 8003846:	25cc      	movs	r5, #204	; 0xcc
 8003848:	701d      	strb	r5, [r3, #0]
 800384a:	7825      	ldrb	r5, [r4, #0]
 800384c:	705d      	strb	r5, [r3, #1]
 800384e:	7ba5      	ldrb	r5, [r4, #14]
 8003850:	73dd      	strb	r5, [r3, #15]
 8003852:	2500      	movs	r5, #0
 8003854:	745d      	strb	r5, [r3, #17]
 8003856:	7c65      	ldrb	r5, [r4, #17]
 8003858:	749d      	strb	r5, [r3, #18]
 800385a:	7ca5      	ldrb	r5, [r4, #18]
 800385c:	74dd      	strb	r5, [r3, #19]
 800385e:	7ce5      	ldrb	r5, [r4, #19]
 8003860:	3501      	adds	r5, #1
 8003862:	751d      	strb	r5, [r3, #20]
 8003864:	7d25      	ldrb	r5, [r4, #20]
 8003866:	755d      	strb	r5, [r3, #21]
 8003868:	7d65      	ldrb	r5, [r4, #21]
 800386a:	759d      	strb	r5, [r3, #22]
 800386c:	b119      	cbz	r1, 8003876 <RDMHandler::CreateRespondMessage(unsigned char, unsigned short)+0x36>
 800386e:	1e4d      	subs	r5, r1, #1
 8003870:	2d01      	cmp	r5, #1
 8003872:	d922      	bls.n	80038ba <RDMHandler::CreateRespondMessage(unsigned char, unsigned short)+0x7a>
 8003874:	bd70      	pop	{r4, r5, r6, pc}
 8003876:	7dda      	ldrb	r2, [r3, #23]
 8003878:	7419      	strb	r1, [r3, #16]
 800387a:	3218      	adds	r2, #24
 800387c:	709a      	strb	r2, [r3, #2]
 800387e:	4a16      	ldr	r2, [pc, #88]	; (80038d8 <RDMHandler::CreateRespondMessage(unsigned char, unsigned short)+0x98>)
 8003880:	6812      	ldr	r2, [r2, #0]
 8003882:	f104 0108 	add.w	r1, r4, #8
 8003886:	1cdd      	adds	r5, r3, #3
 8003888:	3204      	adds	r2, #4
 800388a:	340e      	adds	r4, #14
 800388c:	f811 6b01 	ldrb.w	r6, [r1], #1
 8003890:	f805 6b01 	strb.w	r6, [r5], #1
 8003894:	42a1      	cmp	r1, r4
 8003896:	f812 6b01 	ldrb.w	r6, [r2], #1
 800389a:	716e      	strb	r6, [r5, #5]
 800389c:	d1f6      	bne.n	800388c <RDMHandler::CreateRespondMessage(unsigned char, unsigned short)+0x4c>
 800389e:	2200      	movs	r2, #0
 80038a0:	6884      	ldr	r4, [r0, #8]
 80038a2:	7899      	ldrb	r1, [r3, #2]
 80038a4:	4613      	mov	r3, r2
 80038a6:	428a      	cmp	r2, r1
 80038a8:	eb04 0502 	add.w	r5, r4, r2
 80038ac:	d30e      	bcc.n	80038cc <RDMHandler::CreateRespondMessage(unsigned char, unsigned short)+0x8c>
 80038ae:	0a1a      	lsrs	r2, r3, #8
 80038b0:	702a      	strb	r2, [r5, #0]
 80038b2:	6882      	ldr	r2, [r0, #8]
 80038b4:	440a      	add	r2, r1
 80038b6:	7053      	strb	r3, [r2, #1]
 80038b8:	e7dc      	b.n	8003874 <RDMHandler::CreateRespondMessage(unsigned char, unsigned short)+0x34>
 80038ba:	7419      	strb	r1, [r3, #16]
 80038bc:	2102      	movs	r1, #2
 80038be:	251a      	movs	r5, #26
 80038c0:	75d9      	strb	r1, [r3, #23]
 80038c2:	0a11      	lsrs	r1, r2, #8
 80038c4:	709d      	strb	r5, [r3, #2]
 80038c6:	7619      	strb	r1, [r3, #24]
 80038c8:	765a      	strb	r2, [r3, #25]
 80038ca:	e7d8      	b.n	800387e <RDMHandler::CreateRespondMessage(unsigned char, unsigned short)+0x3e>
 80038cc:	5ca5      	ldrb	r5, [r4, r2]
 80038ce:	442b      	add	r3, r5
 80038d0:	b29b      	uxth	r3, r3
 80038d2:	3201      	adds	r2, #1
 80038d4:	e7e7      	b.n	80038a6 <RDMHandler::CreateRespondMessage(unsigned char, unsigned short)+0x66>
 80038d6:	bf00      	nop
 80038d8:	20000640 	andcs	r0, r0, r0, asr #12

080038dc <RDMHandler::RespondMessageAck()>:
 80038dc:	6843      	ldr	r3, [r0, #4]
 80038de:	7d9a      	ldrb	r2, [r3, #22]
 80038e0:	b90a      	cbnz	r2, 80038e6 <RDMHandler::RespondMessageAck()+0xa>
 80038e2:	2218      	movs	r2, #24
 80038e4:	705a      	strb	r2, [r3, #1]
 80038e6:	2200      	movs	r2, #0
 80038e8:	4611      	mov	r1, r2
 80038ea:	f7ff bfa9 	b.w	8003840 <RDMHandler::CreateRespondMessage(unsigned char, unsigned short)>
	...

080038f0 <RDMHandler::GetSupportedParameters(unsigned short)>:
 80038f0:	4b18      	ldr	r3, [pc, #96]	; (8003954 <RDMHandler::GetSupportedParameters(unsigned short)+0x64>)
 80038f2:	4a19      	ldr	r2, [pc, #100]	; (8003958 <RDMHandler::GetSupportedParameters(unsigned short)+0x68>)
 80038f4:	2900      	cmp	r1, #0
 80038f6:	bf08      	it	eq
 80038f8:	461a      	moveq	r2, r3
 80038fa:	b4f0      	push	{r4, r5, r6, r7}
 80038fc:	bf14      	ite	ne
 80038fe:	2108      	movne	r1, #8
 8003900:	211e      	moveq	r1, #30
 8003902:	2518      	movs	r5, #24
 8003904:	4614      	mov	r4, r2
 8003906:	fb05 2501 	mla	r5, r5, r1, r2
 800390a:	2300      	movs	r3, #0
 800390c:	7d66      	ldrb	r6, [r4, #21]
 800390e:	b10e      	cbz	r6, 8003914 <RDMHandler::GetSupportedParameters(unsigned short)+0x24>
 8003910:	3301      	adds	r3, #1
 8003912:	b2db      	uxtb	r3, r3
 8003914:	3418      	adds	r4, #24
 8003916:	42ac      	cmp	r4, r5
 8003918:	d1f8      	bne.n	800390c <RDMHandler::GetSupportedParameters(unsigned short)+0x1c>
 800391a:	6886      	ldr	r6, [r0, #8]
 800391c:	005b      	lsls	r3, r3, #1
 800391e:	75f3      	strb	r3, [r6, #23]
 8003920:	230c      	movs	r3, #12
 8003922:	4359      	muls	r1, r3
 8003924:	2300      	movs	r3, #0
 8003926:	461c      	mov	r4, r3
 8003928:	f102 0c15 	add.w	ip, r2, #21
 800392c:	f81c 5013 	ldrb.w	r5, [ip, r3, lsl #1]
 8003930:	b14d      	cbz	r5, 8003946 <RDMHandler::GetSupportedParameters(unsigned short)+0x56>
 8003932:	f832 5013 	ldrh.w	r5, [r2, r3, lsl #1]
 8003936:	eb06 0744 	add.w	r7, r6, r4, lsl #1
 800393a:	0a2d      	lsrs	r5, r5, #8
 800393c:	763d      	strb	r5, [r7, #24]
 800393e:	f832 5013 	ldrh.w	r5, [r2, r3, lsl #1]
 8003942:	767d      	strb	r5, [r7, #25]
 8003944:	3401      	adds	r4, #1
 8003946:	330c      	adds	r3, #12
 8003948:	4299      	cmp	r1, r3
 800394a:	d1ef      	bne.n	800392c <RDMHandler::GetSupportedParameters(unsigned short)+0x3c>
 800394c:	bcf0      	pop	{r4, r5, r6, r7}
 800394e:	f7ff bfc5 	b.w	80038dc <RDMHandler::RespondMessageAck()>
 8003952:	bf00      	nop
 8003954:	08009aa4 	stmdaeq	r0, {r2, r5, r7, r9, fp, ip, pc}
 8003958:	08009d74 	stmdaeq	r0, {r2, r4, r5, r6, r8, sl, fp, ip, pc}

0800395c <RDMHandler::GetDeviceInfo(unsigned short)>:
 800395c:	b538      	push	{r3, r4, r5, lr}
 800395e:	4b18      	ldr	r3, [pc, #96]	; (80039c0 <RDMHandler::GetDeviceInfo(unsigned short)+0x64>)
 8003960:	4605      	mov	r5, r0
 8003962:	681c      	ldr	r4, [r3, #0]
 8003964:	b349      	cbz	r1, 80039ba <RDMHandler::GetDeviceInfo(unsigned short)+0x5e>
 8003966:	f104 0088 	add.w	r0, r4, #136	; 0x88
 800396a:	f7fe fee5 	bl	8002738 <RDMSubDevices::GetInfo(unsigned short)>
 800396e:	b1b8      	cbz	r0, 80039a0 <RDMHandler::GetDeviceInfo(unsigned short)+0x44>
 8003970:	8803      	ldrh	r3, [r0, #0]
 8003972:	0a1b      	lsrs	r3, r3, #8
 8003974:	f884 30b6 	strb.w	r3, [r4, #182]	; 0xb6
 8003978:	8803      	ldrh	r3, [r0, #0]
 800397a:	f884 30b7 	strb.w	r3, [r4, #183]	; 0xb7
 800397e:	7903      	ldrb	r3, [r0, #4]
 8003980:	f884 30b8 	strb.w	r3, [r4, #184]	; 0xb8
 8003984:	7943      	ldrb	r3, [r0, #5]
 8003986:	f884 30b9 	strb.w	r3, [r4, #185]	; 0xb9
 800398a:	8843      	ldrh	r3, [r0, #2]
 800398c:	0a1b      	lsrs	r3, r3, #8
 800398e:	f884 30ba 	strb.w	r3, [r4, #186]	; 0xba
 8003992:	8843      	ldrh	r3, [r0, #2]
 8003994:	f884 30bb 	strb.w	r3, [r4, #187]	; 0xbb
 8003998:	f890 3027 	ldrb.w	r3, [r0, #39]	; 0x27
 800399c:	f884 30be 	strb.w	r3, [r4, #190]	; 0xbe
 80039a0:	f104 01ac 	add.w	r1, r4, #172	; 0xac
 80039a4:	68a8      	ldr	r0, [r5, #8]
 80039a6:	2213      	movs	r2, #19
 80039a8:	75c2      	strb	r2, [r0, #23]
 80039aa:	3018      	adds	r0, #24
 80039ac:	f7ff feb9 	bl	8003722 <memcpy.isra.0>
 80039b0:	4628      	mov	r0, r5
 80039b2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80039b6:	f7ff bf91 	b.w	80038dc <RDMHandler::RespondMessageAck()>
 80039ba:	f104 0199 	add.w	r1, r4, #153	; 0x99
 80039be:	e7f1      	b.n	80039a4 <RDMHandler::GetDeviceInfo(unsigned short)+0x48>
 80039c0:	20000640 	andcs	r0, r0, r0, asr #12

080039c4 <RDMHandler::GetFactoryDefaults(unsigned short)>:
 80039c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80039c6:	6886      	ldr	r6, [r0, #8]
 80039c8:	2301      	movs	r3, #1
 80039ca:	75f3      	strb	r3, [r6, #23]
 80039cc:	4b1c      	ldr	r3, [pc, #112]	; (8003a40 <RDMHandler::GetFactoryDefaults(unsigned short)+0x7c>)
 80039ce:	681c      	ldr	r4, [r3, #0]
 80039d0:	f894 30c1 	ldrb.w	r3, [r4, #193]	; 0xc1
 80039d4:	4605      	mov	r5, r0
 80039d6:	b37b      	cbz	r3, 8003a38 <RDMHandler::GetFactoryDefaults(unsigned short)+0x74>
 80039d8:	f06f 0c0d 	mvn.w	ip, #13
 80039dc:	f8b4 1076 	ldrh.w	r1, [r4, #118]	; 0x76
 80039e0:	f894 3075 	ldrb.w	r3, [r4, #117]	; 0x75
 80039e4:	f894 002e 	ldrb.w	r0, [r4, #46]	; 0x2e
 80039e8:	f104 020e 	add.w	r2, r4, #14
 80039ec:	ebac 0c04 	sub.w	ip, ip, r4
 80039f0:	eb0c 0702 	add.w	r7, ip, r2
 80039f4:	4287      	cmp	r7, r0
 80039f6:	d30a      	bcc.n	8003a0e <RDMHandler::GetFactoryDefaults(unsigned short)+0x4a>
 80039f8:	4299      	cmp	r1, r3
 80039fa:	d00d      	beq.n	8003a18 <RDMHandler::GetFactoryDefaults(unsigned short)+0x54>
 80039fc:	2300      	movs	r3, #0
 80039fe:	f884 30c1 	strb.w	r3, [r4, #193]	; 0xc1
 8003a02:	7633      	strb	r3, [r6, #24]
 8003a04:	4628      	mov	r0, r5
 8003a06:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8003a0a:	f7ff bf67 	b.w	80038dc <RDMHandler::RespondMessageAck()>
 8003a0e:	f812 7b01 	ldrb.w	r7, [r2], #1
 8003a12:	443b      	add	r3, r7
 8003a14:	b29b      	uxth	r3, r3
 8003a16:	e7eb      	b.n	80039f0 <RDMHandler::GetFactoryDefaults(unsigned short)+0x2c>
 8003a18:	f894 30a8 	ldrb.w	r3, [r4, #168]	; 0xa8
 8003a1c:	f894 10a5 	ldrb.w	r1, [r4, #165]	; 0xa5
 8003a20:	f8b4 20c2 	ldrh.w	r2, [r4, #194]	; 0xc2
 8003a24:	440b      	add	r3, r1
 8003a26:	429a      	cmp	r2, r3
 8003a28:	d1e8      	bne.n	80039fc <RDMHandler::GetFactoryDefaults(unsigned short)+0x38>
 8003a2a:	f104 0088 	add.w	r0, r4, #136	; 0x88
 8003a2e:	f7fe ff18 	bl	8002862 <RDMSubDevices::GetFactoryDefaults()>
 8003a32:	4603      	mov	r3, r0
 8003a34:	2800      	cmp	r0, #0
 8003a36:	d0e2      	beq.n	80039fe <RDMHandler::GetFactoryDefaults(unsigned short)+0x3a>
 8003a38:	f894 30c1 	ldrb.w	r3, [r4, #193]	; 0xc1
 8003a3c:	e7e1      	b.n	8003a02 <RDMHandler::GetFactoryDefaults(unsigned short)+0x3e>
 8003a3e:	bf00      	nop
 8003a40:	20000640 	andcs	r0, r0, r0, asr #12

08003a44 <RDMHandler::GetProductDetailIdList(unsigned short)>:
 8003a44:	4b05      	ldr	r3, [pc, #20]	; (8003a5c <RDMHandler::GetProductDetailIdList(unsigned short)+0x18>)
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	f8b3 2052 	ldrh.w	r2, [r3, #82]	; 0x52
 8003a4c:	6883      	ldr	r3, [r0, #8]
 8003a4e:	2102      	movs	r1, #2
 8003a50:	75d9      	strb	r1, [r3, #23]
 8003a52:	0a11      	lsrs	r1, r2, #8
 8003a54:	7619      	strb	r1, [r3, #24]
 8003a56:	765a      	strb	r2, [r3, #25]
 8003a58:	f7ff bf40 	b.w	80038dc <RDMHandler::RespondMessageAck()>
 8003a5c:	20000640 	andcs	r0, r0, r0, asr #12

08003a60 <RDMHandler::GetDeviceModelDescription(unsigned short)>:
 8003a60:	b510      	push	{r4, lr}
 8003a62:	4905      	ldr	r1, [pc, #20]	; (8003a78 <RDMHandler::GetDeviceModelDescription(unsigned short)+0x18>)
 8003a64:	4604      	mov	r4, r0
 8003a66:	2209      	movs	r2, #9
 8003a68:	f7ff fedd 	bl	8003826 <RDMHandler::HandleString(char const*, unsigned int)>
 8003a6c:	4620      	mov	r0, r4
 8003a6e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003a72:	f7ff bf33 	b.w	80038dc <RDMHandler::RespondMessageAck()>
 8003a76:	bf00      	nop
 8003a78:	08009a88 	stmdaeq	r0, {r3, r7, r9, fp, ip, pc}

08003a7c <RDMHandler::GetManufacturerLabel(unsigned short)>:
 8003a7c:	b510      	push	{r4, lr}
 8003a7e:	4b06      	ldr	r3, [pc, #24]	; (8003a98 <RDMHandler::GetManufacturerLabel(unsigned short)+0x1c>)
 8003a80:	6819      	ldr	r1, [r3, #0]
 8003a82:	4604      	mov	r4, r0
 8003a84:	f891 204f 	ldrb.w	r2, [r1, #79]	; 0x4f
 8003a88:	312f      	adds	r1, #47	; 0x2f
 8003a8a:	f7ff fecc 	bl	8003826 <RDMHandler::HandleString(char const*, unsigned int)>
 8003a8e:	4620      	mov	r0, r4
 8003a90:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003a94:	f7ff bf22 	b.w	80038dc <RDMHandler::RespondMessageAck()>
 8003a98:	20000640 	andcs	r0, r0, r0, asr #12

08003a9c <RDMHandler::GetDeviceLabel(unsigned short)>:
 8003a9c:	4b0d      	ldr	r3, [pc, #52]	; (8003ad4 <RDMHandler::GetDeviceLabel(unsigned short)+0x38>)
 8003a9e:	b513      	push	{r0, r1, r4, lr}
 8003aa0:	4604      	mov	r4, r0
 8003aa2:	6818      	ldr	r0, [r3, #0]
 8003aa4:	b171      	cbz	r1, 8003ac4 <RDMHandler::GetDeviceLabel(unsigned short)+0x28>
 8003aa6:	466a      	mov	r2, sp
 8003aa8:	3088      	adds	r0, #136	; 0x88
 8003aaa:	f7fe fe4d 	bl	8002748 <RDMSubDevices::GetLabel(unsigned short, TRDMDeviceInfoData*)>
 8003aae:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8003ab2:	9900      	ldr	r1, [sp, #0]
 8003ab4:	4620      	mov	r0, r4
 8003ab6:	f7ff feb6 	bl	8003826 <RDMHandler::HandleString(char const*, unsigned int)>
 8003aba:	4620      	mov	r0, r4
 8003abc:	f7ff ff0e 	bl	80038dc <RDMHandler::RespondMessageAck()>
 8003ac0:	b002      	add	sp, #8
 8003ac2:	bd10      	pop	{r4, pc}
 8003ac4:	f100 030e 	add.w	r3, r0, #14
 8003ac8:	9300      	str	r3, [sp, #0]
 8003aca:	f890 302e 	ldrb.w	r3, [r0, #46]	; 0x2e
 8003ace:	f88d 3004 	strb.w	r3, [sp, #4]
 8003ad2:	e7ec      	b.n	8003aae <RDMHandler::GetDeviceLabel(unsigned short)+0x12>
 8003ad4:	20000640 	andcs	r0, r0, r0, asr #12

08003ad8 <RDMHandler::GetSoftwareVersionLabel(unsigned short)>:
 8003ad8:	b510      	push	{r4, lr}
 8003ada:	4b07      	ldr	r3, [pc, #28]	; (8003af8 <RDMHandler::GetSoftwareVersionLabel(unsigned short)+0x20>)
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	4604      	mov	r4, r0
 8003ae0:	f893 2098 	ldrb.w	r2, [r3, #152]	; 0x98
 8003ae4:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 8003ae8:	f7ff fe9d 	bl	8003826 <RDMHandler::HandleString(char const*, unsigned int)>
 8003aec:	4620      	mov	r0, r4
 8003aee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003af2:	f7ff bef3 	b.w	80038dc <RDMHandler::RespondMessageAck()>
 8003af6:	bf00      	nop
 8003af8:	20000640 	andcs	r0, r0, r0, asr #12

08003afc <RDMHandler::GetIdentifyDevice(unsigned short)>:
 8003afc:	6883      	ldr	r3, [r0, #8]
 8003afe:	2201      	movs	r2, #1
 8003b00:	75da      	strb	r2, [r3, #23]
 8003b02:	4a02      	ldr	r2, [pc, #8]	; (8003b0c <RDMHandler::GetIdentifyDevice(unsigned short)+0x10>)
 8003b04:	7812      	ldrb	r2, [r2, #0]
 8003b06:	761a      	strb	r2, [r3, #24]
 8003b08:	f7ff bee8 	b.w	80038dc <RDMHandler::RespondMessageAck()>
 8003b0c:	20000644 	andcs	r0, r0, r4, asr #12

08003b10 <RDMHandler::GetLanguage(unsigned short)>:
 8003b10:	b510      	push	{r4, lr}
 8003b12:	4b06      	ldr	r3, [pc, #24]	; (8003b2c <RDMHandler::GetLanguage(unsigned short)+0x1c>)
 8003b14:	6819      	ldr	r1, [r3, #0]
 8003b16:	4604      	mov	r4, r0
 8003b18:	2202      	movs	r2, #2
 8003b1a:	31bf      	adds	r1, #191	; 0xbf
 8003b1c:	f7ff fe83 	bl	8003826 <RDMHandler::HandleString(char const*, unsigned int)>
 8003b20:	4620      	mov	r0, r4
 8003b22:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003b26:	f7ff bed9 	b.w	80038dc <RDMHandler::RespondMessageAck()>
 8003b2a:	bf00      	nop
 8003b2c:	20000640 	andcs	r0, r0, r0, asr #12

08003b30 <RDMHandler::GetPersonality(unsigned short)>:
 8003b30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b32:	4f0d      	ldr	r7, [pc, #52]	; (8003b68 <RDMHandler::GetPersonality(unsigned short)+0x38>)
 8003b34:	4604      	mov	r4, r0
 8003b36:	460e      	mov	r6, r1
 8003b38:	6838      	ldr	r0, [r7, #0]
 8003b3a:	b189      	cbz	r1, 8003b60 <RDMHandler::GetPersonality(unsigned short)+0x30>
 8003b3c:	3088      	adds	r0, #136	; 0x88
 8003b3e:	f7fe fe33 	bl	80027a8 <RDMSubDevices::GetPersonalityCurrent(unsigned short)>
 8003b42:	4605      	mov	r5, r0
 8003b44:	6838      	ldr	r0, [r7, #0]
 8003b46:	4631      	mov	r1, r6
 8003b48:	f7ff fe2b 	bl	80037a2 <RDMDeviceResponder::GetPersonalityCount(unsigned short)>
 8003b4c:	68a3      	ldr	r3, [r4, #8]
 8003b4e:	2202      	movs	r2, #2
 8003b50:	7658      	strb	r0, [r3, #25]
 8003b52:	75da      	strb	r2, [r3, #23]
 8003b54:	761d      	strb	r5, [r3, #24]
 8003b56:	4620      	mov	r0, r4
 8003b58:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8003b5c:	f7ff bebe 	b.w	80038dc <RDMHandler::RespondMessageAck()>
 8003b60:	f890 50a5 	ldrb.w	r5, [r0, #165]	; 0xa5
 8003b64:	e7ee      	b.n	8003b44 <RDMHandler::GetPersonality(unsigned short)+0x14>
 8003b66:	bf00      	nop
 8003b68:	20000640 	andcs	r0, r0, r0, asr #12

08003b6c <RDMHandler::GetDmxStartAddress(unsigned short)>:
 8003b6c:	4b0d      	ldr	r3, [pc, #52]	; (8003ba4 <RDMHandler::GetDmxStartAddress(unsigned short)+0x38>)
 8003b6e:	b510      	push	{r4, lr}
 8003b70:	4604      	mov	r4, r0
 8003b72:	6818      	ldr	r0, [r3, #0]
 8003b74:	b169      	cbz	r1, 8003b92 <RDMHandler::GetDmxStartAddress(unsigned short)+0x26>
 8003b76:	3088      	adds	r0, #136	; 0x88
 8003b78:	f7fe fdfd 	bl	8002776 <RDMSubDevices::GetDmxStartAddress(unsigned short)>
 8003b7c:	68a3      	ldr	r3, [r4, #8]
 8003b7e:	2202      	movs	r2, #2
 8003b80:	75da      	strb	r2, [r3, #23]
 8003b82:	0a02      	lsrs	r2, r0, #8
 8003b84:	7658      	strb	r0, [r3, #25]
 8003b86:	761a      	strb	r2, [r3, #24]
 8003b88:	4620      	mov	r0, r4
 8003b8a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003b8e:	f7ff bea5 	b.w	80038dc <RDMHandler::RespondMessageAck()>
 8003b92:	f890 20a7 	ldrb.w	r2, [r0, #167]	; 0xa7
 8003b96:	f890 30a8 	ldrb.w	r3, [r0, #168]	; 0xa8
 8003b9a:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8003b9e:	b298      	uxth	r0, r3
 8003ba0:	e7ec      	b.n	8003b7c <RDMHandler::GetDmxStartAddress(unsigned short)+0x10>
 8003ba2:	bf00      	nop
 8003ba4:	20000640 	andcs	r0, r0, r0, asr #12

08003ba8 <RDMHandler::GetDeviceHours(unsigned short)>:
 8003ba8:	4b07      	ldr	r3, [pc, #28]	; (8003bc8 <RDMHandler::GetDeviceHours(unsigned short)+0x20>)
 8003baa:	681a      	ldr	r2, [r3, #0]
 8003bac:	4b07      	ldr	r3, [pc, #28]	; (8003bcc <RDMHandler::GetDeviceHours(unsigned short)+0x24>)
 8003bae:	fbb2 f2f3 	udiv	r2, r2, r3
 8003bb2:	6883      	ldr	r3, [r0, #8]
 8003bb4:	2104      	movs	r1, #4
 8003bb6:	75d9      	strb	r1, [r3, #23]
 8003bb8:	2100      	movs	r1, #0
 8003bba:	7619      	strb	r1, [r3, #24]
 8003bbc:	7659      	strb	r1, [r3, #25]
 8003bbe:	0a11      	lsrs	r1, r2, #8
 8003bc0:	7699      	strb	r1, [r3, #26]
 8003bc2:	76da      	strb	r2, [r3, #27]
 8003bc4:	f7ff be8a 	b.w	80038dc <RDMHandler::RespondMessageAck()>
 8003bc8:	20001814 	andcs	r1, r0, r4, lsl r8
 8003bcc:	0036ee80 	eorseq	lr, r6, r0, lsl #29

08003bd0 <RDMHandler::GetDisplayInvert(unsigned short)>:
 8003bd0:	6882      	ldr	r2, [r0, #8]
 8003bd2:	2301      	movs	r3, #1
 8003bd4:	75d3      	strb	r3, [r2, #23]
 8003bd6:	4b04      	ldr	r3, [pc, #16]	; (8003be8 <RDMHandler::GetDisplayInvert(unsigned short)+0x18>)
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	699b      	ldr	r3, [r3, #24]
 8003bdc:	b103      	cbz	r3, 8003be0 <RDMHandler::GetDisplayInvert(unsigned short)+0x10>
 8003bde:	79db      	ldrb	r3, [r3, #7]
 8003be0:	7613      	strb	r3, [r2, #24]
 8003be2:	f7ff be7b 	b.w	80038dc <RDMHandler::RespondMessageAck()>
 8003be6:	bf00      	nop
 8003be8:	200016ec 	andcs	r1, r0, ip, ror #13

08003bec <RDMHandler::GetDisplayLevel(unsigned short)>:
 8003bec:	6882      	ldr	r2, [r0, #8]
 8003bee:	2301      	movs	r3, #1
 8003bf0:	75d3      	strb	r3, [r2, #23]
 8003bf2:	4b04      	ldr	r3, [pc, #16]	; (8003c04 <RDMHandler::GetDisplayLevel(unsigned short)+0x18>)
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	699b      	ldr	r3, [r3, #24]
 8003bf8:	b103      	cbz	r3, 8003bfc <RDMHandler::GetDisplayLevel(unsigned short)+0x10>
 8003bfa:	799b      	ldrb	r3, [r3, #6]
 8003bfc:	7613      	strb	r3, [r2, #24]
 8003bfe:	f7ff be6d 	b.w	80038dc <RDMHandler::RespondMessageAck()>
 8003c02:	bf00      	nop
 8003c04:	200016ec 	andcs	r1, r0, ip, ror #13

08003c08 <RDMHandler::GetRealTimeClock(unsigned short)>:
 8003c08:	b510      	push	{r4, lr}
 8003c0a:	4b10      	ldr	r3, [pc, #64]	; (8003c4c <RDMHandler::GetRealTimeClock(unsigned short)+0x44>)
 8003c0c:	b08a      	sub	sp, #40	; 0x28
 8003c0e:	4604      	mov	r4, r0
 8003c10:	a901      	add	r1, sp, #4
 8003c12:	6818      	ldr	r0, [r3, #0]
 8003c14:	f003 fe07 	bl	8007826 <Hardware::GetTime(tm*)>
 8003c18:	9a06      	ldr	r2, [sp, #24]
 8003c1a:	68a3      	ldr	r3, [r4, #8]
 8003c1c:	f202 726c 	addw	r2, r2, #1900	; 0x76c
 8003c20:	f3c2 2107 	ubfx	r1, r2, #8, #8
 8003c24:	765a      	strb	r2, [r3, #25]
 8003c26:	9a05      	ldr	r2, [sp, #20]
 8003c28:	7619      	strb	r1, [r3, #24]
 8003c2a:	3201      	adds	r2, #1
 8003c2c:	769a      	strb	r2, [r3, #26]
 8003c2e:	9a04      	ldr	r2, [sp, #16]
 8003c30:	76da      	strb	r2, [r3, #27]
 8003c32:	9a03      	ldr	r2, [sp, #12]
 8003c34:	771a      	strb	r2, [r3, #28]
 8003c36:	9a02      	ldr	r2, [sp, #8]
 8003c38:	775a      	strb	r2, [r3, #29]
 8003c3a:	9a01      	ldr	r2, [sp, #4]
 8003c3c:	779a      	strb	r2, [r3, #30]
 8003c3e:	2207      	movs	r2, #7
 8003c40:	75da      	strb	r2, [r3, #23]
 8003c42:	4620      	mov	r0, r4
 8003c44:	f7ff fe4a 	bl	80038dc <RDMHandler::RespondMessageAck()>
 8003c48:	b00a      	add	sp, #40	; 0x28
 8003c4a:	bd10      	pop	{r4, pc}
 8003c4c:	200017dc 	ldrdcs	r1, [r0], -ip

08003c50 <RDMHandler::GetPowerState(unsigned short)>:
 8003c50:	6883      	ldr	r3, [r0, #8]
 8003c52:	2201      	movs	r2, #1
 8003c54:	75da      	strb	r2, [r3, #23]
 8003c56:	22ff      	movs	r2, #255	; 0xff
 8003c58:	761a      	strb	r2, [r3, #24]
 8003c5a:	f7ff be3f 	b.w	80038dc <RDMHandler::RespondMessageAck()>

08003c5e <RDMHandler::GetPerformSelfTest(unsigned short)>:
 8003c5e:	b538      	push	{r3, r4, r5, lr}
 8003c60:	6885      	ldr	r5, [r0, #8]
 8003c62:	2301      	movs	r3, #1
 8003c64:	75eb      	strb	r3, [r5, #23]
 8003c66:	4604      	mov	r4, r0
 8003c68:	f7fd f974 	bl	8000f54 <rdm::selftest::Get()>
 8003c6c:	3800      	subs	r0, #0
 8003c6e:	bf18      	it	ne
 8003c70:	2001      	movne	r0, #1
 8003c72:	7628      	strb	r0, [r5, #24]
 8003c74:	4620      	mov	r0, r4
 8003c76:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003c7a:	f7ff be2f 	b.w	80038dc <RDMHandler::RespondMessageAck()>
	...

08003c80 <RDMHandler::GetBootSoftwareVersionLabel(unsigned short)>:
 8003c80:	b510      	push	{r4, lr}
 8003c82:	4905      	ldr	r1, [pc, #20]	; (8003c98 <RDMHandler::GetBootSoftwareVersionLabel(unsigned short)+0x18>)
 8003c84:	4604      	mov	r4, r0
 8003c86:	2208      	movs	r2, #8
 8003c88:	f7ff fdcd 	bl	8003826 <RDMHandler::HandleString(char const*, unsigned int)>
 8003c8c:	4620      	mov	r0, r4
 8003c8e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003c92:	f7ff be23 	b.w	80038dc <RDMHandler::RespondMessageAck()>
 8003c96:	bf00      	nop
 8003c98:	08009a92 	stmdaeq	r0, {r1, r4, r7, r9, fp, ip, pc}

08003c9c <RDMHandler::GetSlotInfo(unsigned short)>:
 8003c9c:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8003ca0:	f8df 8084 	ldr.w	r8, [pc, #132]	; 8003d28 <RDMHandler::GetSlotInfo(unsigned short)+0x8c>
 8003ca4:	6887      	ldr	r7, [r0, #8]
 8003ca6:	4606      	mov	r6, r0
 8003ca8:	4689      	mov	r9, r1
 8003caa:	f8d8 0000 	ldr.w	r0, [r8]
 8003cae:	b1b9      	cbz	r1, 8003ce0 <RDMHandler::GetSlotInfo(unsigned short)+0x44>
 8003cb0:	3088      	adds	r0, #136	; 0x88
 8003cb2:	f7fe fd71 	bl	8002798 <RDMSubDevices::GetDmxFootPrint(unsigned short)>
 8003cb6:	282e      	cmp	r0, #46	; 0x2e
 8003cb8:	bf28      	it	cs
 8003cba:	202e      	movcs	r0, #46	; 0x2e
 8003cbc:	f04f 0a00 	mov.w	sl, #0
 8003cc0:	b285      	uxth	r5, r0
 8003cc2:	4654      	mov	r4, sl
 8003cc4:	fa1f f18a 	uxth.w	r1, sl
 8003cc8:	42a9      	cmp	r1, r5
 8003cca:	d311      	bcc.n	8003cf0 <RDMHandler::GetSlotInfo(unsigned short)+0x54>
 8003ccc:	b2e4      	uxtb	r4, r4
 8003cce:	75fc      	strb	r4, [r7, #23]
 8003cd0:	3418      	adds	r4, #24
 8003cd2:	70bc      	strb	r4, [r7, #2]
 8003cd4:	4630      	mov	r0, r6
 8003cd6:	f7ff fe01 	bl	80038dc <RDMHandler::RespondMessageAck()>
 8003cda:	b002      	add	sp, #8
 8003cdc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003ce0:	f890 30a3 	ldrb.w	r3, [r0, #163]	; 0xa3
 8003ce4:	f890 00a4 	ldrb.w	r0, [r0, #164]	; 0xa4
 8003ce8:	eb00 2303 	add.w	r3, r0, r3, lsl #8
 8003cec:	b298      	uxth	r0, r3
 8003cee:	e7e2      	b.n	8003cb6 <RDMHandler::GetSlotInfo(unsigned short)+0x1a>
 8003cf0:	f1b9 0f00 	cmp.w	r9, #0
 8003cf4:	d115      	bne.n	8003d22 <RDMHandler::GetSlotInfo(unsigned short)+0x86>
 8003cf6:	f8d8 0000 	ldr.w	r0, [r8]
 8003cfa:	aa01      	add	r2, sp, #4
 8003cfc:	f7ff fd04 	bl	8003708 <RDMDeviceResponder::GetSlotInfo(unsigned short, unsigned short, lightset::SlotInfo&) [clone .part.0]>
 8003d00:	b178      	cbz	r0, 8003d22 <RDMHandler::GetSlotInfo(unsigned short)+0x86>
 8003d02:	193a      	adds	r2, r7, r4
 8003d04:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8003d08:	f8bd 1004 	ldrh.w	r1, [sp, #4]
 8003d0c:	7693      	strb	r3, [r2, #26]
 8003d0e:	1d23      	adds	r3, r4, #4
 8003d10:	443b      	add	r3, r7
 8003d12:	0a08      	lsrs	r0, r1, #8
 8003d14:	f882 9018 	strb.w	r9, [r2, #24]
 8003d18:	f882 a019 	strb.w	sl, [r2, #25]
 8003d1c:	76d0      	strb	r0, [r2, #27]
 8003d1e:	3405      	adds	r4, #5
 8003d20:	7619      	strb	r1, [r3, #24]
 8003d22:	f10a 0a01 	add.w	sl, sl, #1
 8003d26:	e7cd      	b.n	8003cc4 <RDMHandler::GetSlotInfo(unsigned short)+0x28>
 8003d28:	20000640 	andcs	r0, r0, r0, asr #12

08003d2c <RDMHandler::RespondMessageNack(unsigned short)>:
 8003d2c:	460a      	mov	r2, r1
 8003d2e:	2102      	movs	r1, #2
 8003d30:	f7ff bd86 	b.w	8003840 <RDMHandler::CreateRespondMessage(unsigned char, unsigned short)>

08003d34 <RDMHandler::SetResetDevice(bool, unsigned short)>:
 8003d34:	b510      	push	{r4, lr}
 8003d36:	6843      	ldr	r3, [r0, #4]
 8003d38:	7d9a      	ldrb	r2, [r3, #22]
 8003d3a:	2a01      	cmp	r2, #1
 8003d3c:	4604      	mov	r4, r0
 8003d3e:	d004      	beq.n	8003d4a <RDMHandler::SetResetDevice(bool, unsigned short)+0x16>
 8003d40:	2101      	movs	r1, #1
 8003d42:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003d46:	f7ff bff1 	b.w	8003d2c <RDMHandler::RespondMessageNack(unsigned short)>
 8003d4a:	7ddb      	ldrb	r3, [r3, #23]
 8003d4c:	2b01      	cmp	r3, #1
 8003d4e:	d003      	beq.n	8003d58 <RDMHandler::SetResetDevice(bool, unsigned short)+0x24>
 8003d50:	2bff      	cmp	r3, #255	; 0xff
 8003d52:	d001      	beq.n	8003d58 <RDMHandler::SetResetDevice(bool, unsigned short)+0x24>
 8003d54:	2106      	movs	r1, #6
 8003d56:	e7f4      	b.n	8003d42 <RDMHandler::SetResetDevice(bool, unsigned short)+0xe>
 8003d58:	68a2      	ldr	r2, [r4, #8]
 8003d5a:	2100      	movs	r1, #0
 8003d5c:	2bff      	cmp	r3, #255	; 0xff
 8003d5e:	75d1      	strb	r1, [r2, #23]
 8003d60:	d102      	bne.n	8003d68 <RDMHandler::SetResetDevice(bool, unsigned short)+0x34>
 8003d62:	2104      	movs	r1, #4
 8003d64:	4620      	mov	r0, r4
 8003d66:	e7ec      	b.n	8003d42 <RDMHandler::SetResetDevice(bool, unsigned short)+0xe>
 8003d68:	4b03      	ldr	r3, [pc, #12]	; (8003d78 <RDMHandler::SetResetDevice(bool, unsigned short)+0x44>)
 8003d6a:	6818      	ldr	r0, [r3, #0]
 8003d6c:	f003 fd72 	bl	8007854 <Hardware::Reboot()>
 8003d70:	2800      	cmp	r0, #0
 8003d72:	d0f6      	beq.n	8003d62 <RDMHandler::SetResetDevice(bool, unsigned short)+0x2e>
 8003d74:	bd10      	pop	{r4, pc}
 8003d76:	bf00      	nop
 8003d78:	200017dc 	ldrdcs	r1, [r0], -ip

08003d7c <RDMHandler::SetIdentifyDevice(bool, unsigned short)>:
 8003d7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d7e:	6843      	ldr	r3, [r0, #4]
 8003d80:	460d      	mov	r5, r1
 8003d82:	7d99      	ldrb	r1, [r3, #22]
 8003d84:	2901      	cmp	r1, #1
 8003d86:	4604      	mov	r4, r0
 8003d88:	d004      	beq.n	8003d94 <RDMHandler::SetIdentifyDevice(bool, unsigned short)+0x18>
 8003d8a:	2101      	movs	r1, #1
 8003d8c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8003d90:	f7ff bfcc 	b.w	8003d2c <RDMHandler::RespondMessageNack(unsigned short)>
 8003d94:	7ddb      	ldrb	r3, [r3, #23]
 8003d96:	2b01      	cmp	r3, #1
 8003d98:	d901      	bls.n	8003d9e <RDMHandler::SetIdentifyDevice(bool, unsigned short)+0x22>
 8003d9a:	2106      	movs	r1, #6
 8003d9c:	e7f6      	b.n	8003d8c <RDMHandler::SetIdentifyDevice(bool, unsigned short)+0x10>
 8003d9e:	4a12      	ldr	r2, [pc, #72]	; (8003de8 <RDMHandler::SetIdentifyDevice(bool, unsigned short)+0x6c>)
 8003da0:	4f12      	ldr	r7, [pc, #72]	; (8003dec <RDMHandler::SetIdentifyDevice(bool, unsigned short)+0x70>)
 8003da2:	6816      	ldr	r6, [r2, #0]
 8003da4:	4a12      	ldr	r2, [pc, #72]	; (8003df0 <RDMHandler::SetIdentifyDevice(bool, unsigned short)+0x74>)
 8003da6:	6810      	ldr	r0, [r2, #0]
 8003da8:	4a12      	ldr	r2, [pc, #72]	; (8003df4 <RDMHandler::SetIdentifyDevice(bool, unsigned short)+0x78>)
 8003daa:	b983      	cbnz	r3, 8003dce <RDMHandler::SetIdentifyDevice(bool, unsigned short)+0x52>
 8003dac:	2102      	movs	r1, #2
 8003dae:	7013      	strb	r3, [r2, #0]
 8003db0:	f003 fc94 	bl	80076dc <LedBlink::SetMode(ledblink::Mode)>
 8003db4:	7839      	ldrb	r1, [r7, #0]
 8003db6:	b111      	cbz	r1, 8003dbe <RDMHandler::SetIdentifyDevice(bool, unsigned short)+0x42>
 8003db8:	4630      	mov	r0, r6
 8003dba:	f7fd f991 	bl	80010e0 <RDMIdentify::Off(rdm::identify::Mode)>
 8003dbe:	b98d      	cbnz	r5, 8003de4 <RDMHandler::SetIdentifyDevice(bool, unsigned short)+0x68>
 8003dc0:	68a3      	ldr	r3, [r4, #8]
 8003dc2:	75dd      	strb	r5, [r3, #23]
 8003dc4:	4620      	mov	r0, r4
 8003dc6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8003dca:	f7ff bd87 	b.w	80038dc <RDMHandler::RespondMessageAck()>
 8003dce:	7011      	strb	r1, [r2, #0]
 8003dd0:	2104      	movs	r1, #4
 8003dd2:	f003 fc83 	bl	80076dc <LedBlink::SetMode(ledblink::Mode)>
 8003dd6:	7839      	ldrb	r1, [r7, #0]
 8003dd8:	2900      	cmp	r1, #0
 8003dda:	d0f0      	beq.n	8003dbe <RDMHandler::SetIdentifyDevice(bool, unsigned short)+0x42>
 8003ddc:	4630      	mov	r0, r6
 8003dde:	f7fd f965 	bl	80010ac <RDMIdentify::On(rdm::identify::Mode)>
 8003de2:	e7ec      	b.n	8003dbe <RDMHandler::SetIdentifyDevice(bool, unsigned short)+0x42>
 8003de4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003de6:	bf00      	nop
 8003de8:	20000648 	andcs	r0, r0, r8, asr #12
 8003dec:	20000645 	andcs	r0, r0, r5, asr #12
 8003df0:	200017d8 	ldrdcs	r1, [r0], -r8
 8003df4:	20000644 	andcs	r0, r0, r4, asr #12

08003df8 <RDMHandler::SetLanguage(bool, unsigned short)>:
 8003df8:	b470      	push	{r4, r5, r6}
 8003dfa:	6842      	ldr	r2, [r0, #4]
 8003dfc:	7d94      	ldrb	r4, [r2, #22]
 8003dfe:	2c02      	cmp	r4, #2
 8003e00:	4603      	mov	r3, r0
 8003e02:	d003      	beq.n	8003e0c <RDMHandler::SetLanguage(bool, unsigned short)+0x14>
 8003e04:	2101      	movs	r1, #1
 8003e06:	bc70      	pop	{r4, r5, r6}
 8003e08:	f7ff bf90 	b.w	8003d2c <RDMHandler::RespondMessageNack(unsigned short)>
 8003e0c:	4c0b      	ldr	r4, [pc, #44]	; (8003e3c <RDMHandler::SetLanguage(bool, unsigned short)+0x44>)
 8003e0e:	7dd6      	ldrb	r6, [r2, #23]
 8003e10:	6824      	ldr	r4, [r4, #0]
 8003e12:	f894 50bf 	ldrb.w	r5, [r4, #191]	; 0xbf
 8003e16:	42ae      	cmp	r6, r5
 8003e18:	d104      	bne.n	8003e24 <RDMHandler::SetLanguage(bool, unsigned short)+0x2c>
 8003e1a:	7e15      	ldrb	r5, [r2, #24]
 8003e1c:	f894 20c0 	ldrb.w	r2, [r4, #192]	; 0xc0
 8003e20:	4295      	cmp	r5, r2
 8003e22:	d002      	beq.n	8003e2a <RDMHandler::SetLanguage(bool, unsigned short)+0x32>
 8003e24:	2106      	movs	r1, #6
 8003e26:	4618      	mov	r0, r3
 8003e28:	e7ed      	b.n	8003e06 <RDMHandler::SetLanguage(bool, unsigned short)+0xe>
 8003e2a:	b921      	cbnz	r1, 8003e36 <RDMHandler::SetLanguage(bool, unsigned short)+0x3e>
 8003e2c:	6883      	ldr	r3, [r0, #8]
 8003e2e:	75d9      	strb	r1, [r3, #23]
 8003e30:	bc70      	pop	{r4, r5, r6}
 8003e32:	f7ff bd53 	b.w	80038dc <RDMHandler::RespondMessageAck()>
 8003e36:	bc70      	pop	{r4, r5, r6}
 8003e38:	4770      	bx	lr
 8003e3a:	bf00      	nop
 8003e3c:	20000640 	andcs	r0, r0, r0, asr #12

08003e40 <RDMHandler::GetBootSoftwareVersionId(unsigned short)>:
 8003e40:	6842      	ldr	r2, [r0, #4]
 8003e42:	7d92      	ldrb	r2, [r2, #22]
 8003e44:	b112      	cbz	r2, 8003e4c <RDMHandler::GetBootSoftwareVersionId(unsigned short)+0xc>
 8003e46:	2101      	movs	r1, #1
 8003e48:	f7ff bf70 	b.w	8003d2c <RDMHandler::RespondMessageNack(unsigned short)>
 8003e4c:	6883      	ldr	r3, [r0, #8]
 8003e4e:	2104      	movs	r1, #4
 8003e50:	75d9      	strb	r1, [r3, #23]
 8003e52:	761a      	strb	r2, [r3, #24]
 8003e54:	765a      	strb	r2, [r3, #25]
 8003e56:	769a      	strb	r2, [r3, #26]
 8003e58:	76da      	strb	r2, [r3, #27]
 8003e5a:	f7ff bd3f 	b.w	80038dc <RDMHandler::RespondMessageAck()>
	...

08003e60 <RDMHandler::SetPersonality(bool, unsigned short)>:
 8003e60:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003e62:	6843      	ldr	r3, [r0, #4]
 8003e64:	4611      	mov	r1, r2
 8003e66:	7d9a      	ldrb	r2, [r3, #22]
 8003e68:	2a01      	cmp	r2, #1
 8003e6a:	4604      	mov	r4, r0
 8003e6c:	d005      	beq.n	8003e7a <RDMHandler::SetPersonality(bool, unsigned short)+0x1a>
 8003e6e:	2101      	movs	r1, #1
 8003e70:	b002      	add	sp, #8
 8003e72:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8003e76:	f7ff bf59 	b.w	8003d2c <RDMHandler::RespondMessageNack(unsigned short)>
 8003e7a:	4e0d      	ldr	r6, [pc, #52]	; (8003eb0 <RDMHandler::SetPersonality(bool, unsigned short)+0x50>)
 8003e7c:	7ddd      	ldrb	r5, [r3, #23]
 8003e7e:	6830      	ldr	r0, [r6, #0]
 8003e80:	9101      	str	r1, [sp, #4]
 8003e82:	f7ff fc8e 	bl	80037a2 <RDMDeviceResponder::GetPersonalityCount(unsigned short)>
 8003e86:	b115      	cbz	r5, 8003e8e <RDMHandler::SetPersonality(bool, unsigned short)+0x2e>
 8003e88:	4285      	cmp	r5, r0
 8003e8a:	9901      	ldr	r1, [sp, #4]
 8003e8c:	d902      	bls.n	8003e94 <RDMHandler::SetPersonality(bool, unsigned short)+0x34>
 8003e8e:	2106      	movs	r1, #6
 8003e90:	4620      	mov	r0, r4
 8003e92:	e7ed      	b.n	8003e70 <RDMHandler::SetPersonality(bool, unsigned short)+0x10>
 8003e94:	6830      	ldr	r0, [r6, #0]
 8003e96:	462a      	mov	r2, r5
 8003e98:	f7ff fc8a 	bl	80037b0 <RDMDeviceResponder::SetPersonalityCurrent(unsigned short, unsigned char)>
 8003e9c:	68a3      	ldr	r3, [r4, #8]
 8003e9e:	2200      	movs	r2, #0
 8003ea0:	4620      	mov	r0, r4
 8003ea2:	75da      	strb	r2, [r3, #23]
 8003ea4:	b002      	add	sp, #8
 8003ea6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8003eaa:	f7ff bd17 	b.w	80038dc <RDMHandler::RespondMessageAck()>
 8003eae:	bf00      	nop
 8003eb0:	20000640 	andcs	r0, r0, r0, asr #12

08003eb4 <RDMHandler::GetPersonalityDescription(unsigned short)>:
 8003eb4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003eb8:	6843      	ldr	r3, [r0, #4]
 8003eba:	f8df 9078 	ldr.w	r9, [pc, #120]	; 8003f34 <RDMHandler::GetPersonalityDescription(unsigned short)+0x80>
 8003ebe:	7dde      	ldrb	r6, [r3, #23]
 8003ec0:	4604      	mov	r4, r0
 8003ec2:	f8d9 0000 	ldr.w	r0, [r9]
 8003ec6:	460f      	mov	r7, r1
 8003ec8:	f7ff fc6b 	bl	80037a2 <RDMDeviceResponder::GetPersonalityCount(unsigned short)>
 8003ecc:	b10e      	cbz	r6, 8003ed2 <RDMHandler::GetPersonalityDescription(unsigned short)+0x1e>
 8003ece:	4286      	cmp	r6, r0
 8003ed0:	d905      	bls.n	8003ede <RDMHandler::GetPersonalityDescription(unsigned short)+0x2a>
 8003ed2:	4620      	mov	r0, r4
 8003ed4:	2106      	movs	r1, #6
 8003ed6:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003eda:	f7ff bf27 	b.w	8003d2c <RDMHandler::RespondMessageNack(unsigned short)>
 8003ede:	4632      	mov	r2, r6
 8003ee0:	4639      	mov	r1, r7
 8003ee2:	f8d9 0000 	ldr.w	r0, [r9]
 8003ee6:	f7ff fc50 	bl	800378a <RDMDeviceResponder::GetPersonality(unsigned short, unsigned char)>
 8003eea:	8803      	ldrh	r3, [r0, #0]
 8003eec:	68a5      	ldr	r5, [r4, #8]
 8003eee:	f8d9 0000 	ldr.w	r0, [r9]
 8003ef2:	76ab      	strb	r3, [r5, #26]
 8003ef4:	0a1a      	lsrs	r2, r3, #8
 8003ef6:	766a      	strb	r2, [r5, #25]
 8003ef8:	4639      	mov	r1, r7
 8003efa:	762e      	strb	r6, [r5, #24]
 8003efc:	4632      	mov	r2, r6
 8003efe:	f7ff fc44 	bl	800378a <RDMDeviceResponder::GetPersonality(unsigned short, unsigned char)>
 8003f02:	f105 081b 	add.w	r8, r5, #27
 8003f06:	1dc1      	adds	r1, r0, #7
 8003f08:	2300      	movs	r3, #0
 8003f0a:	6a86      	ldr	r6, [r0, #40]	; 0x28
 8003f0c:	42b3      	cmp	r3, r6
 8003f0e:	b2da      	uxtb	r2, r3
 8003f10:	d203      	bcs.n	8003f1a <RDMHandler::GetPersonalityDescription(unsigned short)+0x66>
 8003f12:	3301      	adds	r3, #1
 8003f14:	2b21      	cmp	r3, #33	; 0x21
 8003f16:	d107      	bne.n	8003f28 <RDMHandler::GetPersonalityDescription(unsigned short)+0x74>
 8003f18:	2220      	movs	r2, #32
 8003f1a:	3203      	adds	r2, #3
 8003f1c:	75ea      	strb	r2, [r5, #23]
 8003f1e:	4620      	mov	r0, r4
 8003f20:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003f24:	f7ff bcda 	b.w	80038dc <RDMHandler::RespondMessageAck()>
 8003f28:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8003f2c:	f808 2b01 	strb.w	r2, [r8], #1
 8003f30:	e7eb      	b.n	8003f0a <RDMHandler::GetPersonalityDescription(unsigned short)+0x56>
 8003f32:	bf00      	nop
 8003f34:	20000640 	andcs	r0, r0, r0, asr #12

08003f38 <RDMHandler::SetDmxStartAddress(bool, unsigned short)>:
 8003f38:	b538      	push	{r3, r4, r5, lr}
 8003f3a:	6843      	ldr	r3, [r0, #4]
 8003f3c:	460d      	mov	r5, r1
 8003f3e:	4611      	mov	r1, r2
 8003f40:	7d9a      	ldrb	r2, [r3, #22]
 8003f42:	2a02      	cmp	r2, #2
 8003f44:	4604      	mov	r4, r0
 8003f46:	d004      	beq.n	8003f52 <RDMHandler::SetDmxStartAddress(bool, unsigned short)+0x1a>
 8003f48:	2101      	movs	r1, #1
 8003f4a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003f4e:	f7ff beed 	b.w	8003d2c <RDMHandler::RespondMessageNack(unsigned short)>
 8003f52:	7dda      	ldrb	r2, [r3, #23]
 8003f54:	7e1b      	ldrb	r3, [r3, #24]
 8003f56:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8003f5a:	b29a      	uxth	r2, r3
 8003f5c:	1e53      	subs	r3, r2, #1
 8003f5e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003f62:	d301      	bcc.n	8003f68 <RDMHandler::SetDmxStartAddress(bool, unsigned short)+0x30>
 8003f64:	2106      	movs	r1, #6
 8003f66:	e7f0      	b.n	8003f4a <RDMHandler::SetDmxStartAddress(bool, unsigned short)+0x12>
 8003f68:	4b06      	ldr	r3, [pc, #24]	; (8003f84 <RDMHandler::SetDmxStartAddress(bool, unsigned short)+0x4c>)
 8003f6a:	6818      	ldr	r0, [r3, #0]
 8003f6c:	f7ff fbe3 	bl	8003736 <RDMDeviceResponder::SetDmxStartAddress(unsigned short, unsigned short)>
 8003f70:	b935      	cbnz	r5, 8003f80 <RDMHandler::SetDmxStartAddress(bool, unsigned short)+0x48>
 8003f72:	68a3      	ldr	r3, [r4, #8]
 8003f74:	75dd      	strb	r5, [r3, #23]
 8003f76:	4620      	mov	r0, r4
 8003f78:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003f7c:	f7ff bcae 	b.w	80038dc <RDMHandler::RespondMessageAck()>
 8003f80:	bd38      	pop	{r3, r4, r5, pc}
 8003f82:	bf00      	nop
 8003f84:	20000640 	andcs	r0, r0, r0, asr #12

08003f88 <RDMHandler::GetSensorDefinition(unsigned short)>:
 8003f88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f8a:	6843      	ldr	r3, [r0, #4]
 8003f8c:	7dde      	ldrb	r6, [r3, #23]
 8003f8e:	2eff      	cmp	r6, #255	; 0xff
 8003f90:	4605      	mov	r5, r0
 8003f92:	d004      	beq.n	8003f9e <RDMHandler::GetSensorDefinition(unsigned short)+0x16>
 8003f94:	4b26      	ldr	r3, [pc, #152]	; (8004030 <RDMHandler::GetSensorDefinition(unsigned short)+0xa8>)
 8003f96:	6818      	ldr	r0, [r3, #0]
 8003f98:	7903      	ldrb	r3, [r0, #4]
 8003f9a:	42b3      	cmp	r3, r6
 8003f9c:	d805      	bhi.n	8003faa <RDMHandler::GetSensorDefinition(unsigned short)+0x22>
 8003f9e:	4628      	mov	r0, r5
 8003fa0:	2106      	movs	r1, #6
 8003fa2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8003fa6:	f7ff bec1 	b.w	8003d2c <RDMHandler::RespondMessageNack(unsigned short)>
 8003faa:	4631      	mov	r1, r6
 8003fac:	68ac      	ldr	r4, [r5, #8]
 8003fae:	f7fd fd89 	bl	8001ac4 <RDMSensors::GetDefintion(unsigned char)>
 8003fb2:	7802      	ldrb	r2, [r0, #0]
 8003fb4:	42b2      	cmp	r2, r6
 8003fb6:	4603      	mov	r3, r0
 8003fb8:	d1f1      	bne.n	8003f9e <RDMHandler::GetSensorDefinition(unsigned short)+0x16>
 8003fba:	7622      	strb	r2, [r4, #24]
 8003fbc:	7842      	ldrb	r2, [r0, #1]
 8003fbe:	7662      	strb	r2, [r4, #25]
 8003fc0:	7882      	ldrb	r2, [r0, #2]
 8003fc2:	76a2      	strb	r2, [r4, #26]
 8003fc4:	78c2      	ldrb	r2, [r0, #3]
 8003fc6:	76e2      	strb	r2, [r4, #27]
 8003fc8:	f990 2005 	ldrsb.w	r2, [r0, #5]
 8003fcc:	7722      	strb	r2, [r4, #28]
 8003fce:	8882      	ldrh	r2, [r0, #4]
 8003fd0:	7762      	strb	r2, [r4, #29]
 8003fd2:	f990 2007 	ldrsb.w	r2, [r0, #7]
 8003fd6:	77a2      	strb	r2, [r4, #30]
 8003fd8:	88c2      	ldrh	r2, [r0, #6]
 8003fda:	77e2      	strb	r2, [r4, #31]
 8003fdc:	f990 2009 	ldrsb.w	r2, [r0, #9]
 8003fe0:	f884 2020 	strb.w	r2, [r4, #32]
 8003fe4:	8902      	ldrh	r2, [r0, #8]
 8003fe6:	f884 2021 	strb.w	r2, [r4, #33]	; 0x21
 8003fea:	f990 200b 	ldrsb.w	r2, [r0, #11]
 8003fee:	f884 2022 	strb.w	r2, [r4, #34]	; 0x22
 8003ff2:	8942      	ldrh	r2, [r0, #10]
 8003ff4:	f884 2023 	strb.w	r2, [r4, #35]	; 0x23
 8003ff8:	f890 202d 	ldrb.w	r2, [r0, #45]	; 0x2d
 8003ffc:	f884 2024 	strb.w	r2, [r4, #36]	; 0x24
 8004000:	f100 010c 	add.w	r1, r0, #12
 8004004:	220d      	movs	r2, #13
 8004006:	f104 0025 	add.w	r0, r4, #37	; 0x25
 800400a:	f893 702c 	ldrb.w	r7, [r3, #44]	; 0x2c
 800400e:	f1a2 060d 	sub.w	r6, r2, #13
 8004012:	42b7      	cmp	r7, r6
 8004014:	dc05      	bgt.n	8004022 <RDMHandler::GetSensorDefinition(unsigned short)+0x9a>
 8004016:	75e2      	strb	r2, [r4, #23]
 8004018:	4628      	mov	r0, r5
 800401a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800401e:	f7ff bc5d 	b.w	80038dc <RDMHandler::RespondMessageAck()>
 8004022:	f811 6b01 	ldrb.w	r6, [r1], #1
 8004026:	f800 6b01 	strb.w	r6, [r0], #1
 800402a:	3201      	adds	r2, #1
 800402c:	e7ed      	b.n	800400a <RDMHandler::GetSensorDefinition(unsigned short)+0x82>
 800402e:	bf00      	nop
 8004030:	200001f8 	strdcs	r0, [r0], -r8

08004034 <RDMHandler::GetSensorValue(unsigned short)>:
 8004034:	b570      	push	{r4, r5, r6, lr}
 8004036:	6843      	ldr	r3, [r0, #4]
 8004038:	7d9a      	ldrb	r2, [r3, #22]
 800403a:	2a01      	cmp	r2, #1
 800403c:	4605      	mov	r5, r0
 800403e:	d004      	beq.n	800404a <RDMHandler::GetSensorValue(unsigned short)+0x16>
 8004040:	2101      	movs	r1, #1
 8004042:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8004046:	f7ff be71 	b.w	8003d2c <RDMHandler::RespondMessageNack(unsigned short)>
 800404a:	7dde      	ldrb	r6, [r3, #23]
 800404c:	2eff      	cmp	r6, #255	; 0xff
 800404e:	d004      	beq.n	800405a <RDMHandler::GetSensorValue(unsigned short)+0x26>
 8004050:	4b17      	ldr	r3, [pc, #92]	; (80040b0 <RDMHandler::GetSensorValue(unsigned short)+0x7c>)
 8004052:	6818      	ldr	r0, [r3, #0]
 8004054:	7903      	ldrb	r3, [r0, #4]
 8004056:	42b3      	cmp	r3, r6
 8004058:	d802      	bhi.n	8004060 <RDMHandler::GetSensorValue(unsigned short)+0x2c>
 800405a:	2106      	movs	r1, #6
 800405c:	4628      	mov	r0, r5
 800405e:	e7f0      	b.n	8004042 <RDMHandler::GetSensorValue(unsigned short)+0xe>
 8004060:	4631      	mov	r1, r6
 8004062:	68ac      	ldr	r4, [r5, #8]
 8004064:	f7fd fd33 	bl	8001ace <RDMSensors::GetValues(unsigned char)>
 8004068:	7a03      	ldrb	r3, [r0, #8]
 800406a:	42b3      	cmp	r3, r6
 800406c:	d1f5      	bne.n	800405a <RDMHandler::GetSensorValue(unsigned short)+0x26>
 800406e:	2309      	movs	r3, #9
 8004070:	75e3      	strb	r3, [r4, #23]
 8004072:	2321      	movs	r3, #33	; 0x21
 8004074:	70a3      	strb	r3, [r4, #2]
 8004076:	7a03      	ldrb	r3, [r0, #8]
 8004078:	7623      	strb	r3, [r4, #24]
 800407a:	f990 3001 	ldrsb.w	r3, [r0, #1]
 800407e:	7663      	strb	r3, [r4, #25]
 8004080:	8803      	ldrh	r3, [r0, #0]
 8004082:	76a3      	strb	r3, [r4, #26]
 8004084:	f990 3003 	ldrsb.w	r3, [r0, #3]
 8004088:	76e3      	strb	r3, [r4, #27]
 800408a:	8843      	ldrh	r3, [r0, #2]
 800408c:	7723      	strb	r3, [r4, #28]
 800408e:	f990 3005 	ldrsb.w	r3, [r0, #5]
 8004092:	7763      	strb	r3, [r4, #29]
 8004094:	8883      	ldrh	r3, [r0, #4]
 8004096:	77a3      	strb	r3, [r4, #30]
 8004098:	f990 3007 	ldrsb.w	r3, [r0, #7]
 800409c:	77e3      	strb	r3, [r4, #31]
 800409e:	88c3      	ldrh	r3, [r0, #6]
 80040a0:	f884 3020 	strb.w	r3, [r4, #32]
 80040a4:	4628      	mov	r0, r5
 80040a6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80040aa:	f7ff bc17 	b.w	80038dc <RDMHandler::RespondMessageAck()>
 80040ae:	bf00      	nop
 80040b0:	200001f8 	strdcs	r0, [r0], -r8

080040b4 <RDMHandler::SetSensorValue(bool, unsigned short)>:
 80040b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80040b8:	6843      	ldr	r3, [r0, #4]
 80040ba:	7d9a      	ldrb	r2, [r3, #22]
 80040bc:	2a01      	cmp	r2, #1
 80040be:	4606      	mov	r6, r0
 80040c0:	460d      	mov	r5, r1
 80040c2:	d004      	beq.n	80040ce <RDMHandler::SetSensorValue(bool, unsigned short)+0x1a>
 80040c4:	2101      	movs	r1, #1
 80040c6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80040ca:	f7ff be2f 	b.w	8003d2c <RDMHandler::RespondMessageNack(unsigned short)>
 80040ce:	7ddf      	ldrb	r7, [r3, #23]
 80040d0:	f8df 8090 	ldr.w	r8, [pc, #144]	; 8004164 <RDMHandler::SetSensorValue(bool, unsigned short)+0xb0>
 80040d4:	2fff      	cmp	r7, #255	; 0xff
 80040d6:	f8d8 3000 	ldr.w	r3, [r8]
 80040da:	d004      	beq.n	80040e6 <RDMHandler::SetSensorValue(bool, unsigned short)+0x32>
 80040dc:	791a      	ldrb	r2, [r3, #4]
 80040de:	42ba      	cmp	r2, r7
 80040e0:	d801      	bhi.n	80040e6 <RDMHandler::SetSensorValue(bool, unsigned short)+0x32>
 80040e2:	2106      	movs	r1, #6
 80040e4:	e7ef      	b.n	80040c6 <RDMHandler::SetSensorValue(bool, unsigned short)+0x12>
 80040e6:	4639      	mov	r1, r7
 80040e8:	4618      	mov	r0, r3
 80040ea:	f7fd fcf5 	bl	8001ad8 <RDMSensors::SetValues(unsigned char)>
 80040ee:	bbb5      	cbnz	r5, 800415e <RDMHandler::SetSensorValue(bool, unsigned short)+0xaa>
 80040f0:	2fff      	cmp	r7, #255	; 0xff
 80040f2:	68b4      	ldr	r4, [r6, #8]
 80040f4:	d112      	bne.n	800411c <RDMHandler::SetSensorValue(bool, unsigned short)+0x68>
 80040f6:	2309      	movs	r3, #9
 80040f8:	75e3      	strb	r3, [r4, #23]
 80040fa:	2321      	movs	r3, #33	; 0x21
 80040fc:	70a3      	strb	r3, [r4, #2]
 80040fe:	7625      	strb	r5, [r4, #24]
 8004100:	7665      	strb	r5, [r4, #25]
 8004102:	76a5      	strb	r5, [r4, #26]
 8004104:	76e5      	strb	r5, [r4, #27]
 8004106:	7725      	strb	r5, [r4, #28]
 8004108:	7765      	strb	r5, [r4, #29]
 800410a:	77a5      	strb	r5, [r4, #30]
 800410c:	77e5      	strb	r5, [r4, #31]
 800410e:	f884 5020 	strb.w	r5, [r4, #32]
 8004112:	4630      	mov	r0, r6
 8004114:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004118:	f7ff bbe0 	b.w	80038dc <RDMHandler::RespondMessageAck()>
 800411c:	f8d8 0000 	ldr.w	r0, [r8]
 8004120:	4639      	mov	r1, r7
 8004122:	f7fd fcd4 	bl	8001ace <RDMSensors::GetValues(unsigned char)>
 8004126:	2309      	movs	r3, #9
 8004128:	75e3      	strb	r3, [r4, #23]
 800412a:	2321      	movs	r3, #33	; 0x21
 800412c:	70a3      	strb	r3, [r4, #2]
 800412e:	7a03      	ldrb	r3, [r0, #8]
 8004130:	7623      	strb	r3, [r4, #24]
 8004132:	f990 3001 	ldrsb.w	r3, [r0, #1]
 8004136:	7663      	strb	r3, [r4, #25]
 8004138:	8803      	ldrh	r3, [r0, #0]
 800413a:	76a3      	strb	r3, [r4, #26]
 800413c:	f990 3003 	ldrsb.w	r3, [r0, #3]
 8004140:	76e3      	strb	r3, [r4, #27]
 8004142:	8843      	ldrh	r3, [r0, #2]
 8004144:	7723      	strb	r3, [r4, #28]
 8004146:	f990 3005 	ldrsb.w	r3, [r0, #5]
 800414a:	7763      	strb	r3, [r4, #29]
 800414c:	8883      	ldrh	r3, [r0, #4]
 800414e:	77a3      	strb	r3, [r4, #30]
 8004150:	f990 3007 	ldrsb.w	r3, [r0, #7]
 8004154:	77e3      	strb	r3, [r4, #31]
 8004156:	88c3      	ldrh	r3, [r0, #6]
 8004158:	f884 3020 	strb.w	r3, [r4, #32]
 800415c:	e7d9      	b.n	8004112 <RDMHandler::SetSensorValue(bool, unsigned short)+0x5e>
 800415e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004162:	bf00      	nop
 8004164:	200001f8 	strdcs	r0, [r0], -r8

08004168 <RDMHandler::SetRecordSensors(bool, unsigned short)>:
 8004168:	b538      	push	{r3, r4, r5, lr}
 800416a:	6843      	ldr	r3, [r0, #4]
 800416c:	7d9a      	ldrb	r2, [r3, #22]
 800416e:	2a01      	cmp	r2, #1
 8004170:	4604      	mov	r4, r0
 8004172:	460d      	mov	r5, r1
 8004174:	d004      	beq.n	8004180 <RDMHandler::SetRecordSensors(bool, unsigned short)+0x18>
 8004176:	2101      	movs	r1, #1
 8004178:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800417c:	f7ff bdd6 	b.w	8003d2c <RDMHandler::RespondMessageNack(unsigned short)>
 8004180:	7dd9      	ldrb	r1, [r3, #23]
 8004182:	4b0b      	ldr	r3, [pc, #44]	; (80041b0 <RDMHandler::SetRecordSensors(bool, unsigned short)+0x48>)
 8004184:	6818      	ldr	r0, [r3, #0]
 8004186:	29ff      	cmp	r1, #255	; 0xff
 8004188:	7903      	ldrb	r3, [r0, #4]
 800418a:	d103      	bne.n	8004194 <RDMHandler::SetRecordSensors(bool, unsigned short)+0x2c>
 800418c:	b923      	cbnz	r3, 8004198 <RDMHandler::SetRecordSensors(bool, unsigned short)+0x30>
 800418e:	2106      	movs	r1, #6
 8004190:	4620      	mov	r0, r4
 8004192:	e7f1      	b.n	8004178 <RDMHandler::SetRecordSensors(bool, unsigned short)+0x10>
 8004194:	4299      	cmp	r1, r3
 8004196:	d2fa      	bcs.n	800418e <RDMHandler::SetRecordSensors(bool, unsigned short)+0x26>
 8004198:	f7fd fcb5 	bl	8001b06 <RDMSensors::SetRecord(unsigned char)>
 800419c:	b935      	cbnz	r5, 80041ac <RDMHandler::SetRecordSensors(bool, unsigned short)+0x44>
 800419e:	68a3      	ldr	r3, [r4, #8]
 80041a0:	75dd      	strb	r5, [r3, #23]
 80041a2:	4620      	mov	r0, r4
 80041a4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80041a8:	f7ff bb98 	b.w	80038dc <RDMHandler::RespondMessageAck()>
 80041ac:	bd38      	pop	{r3, r4, r5, pc}
 80041ae:	bf00      	nop
 80041b0:	200001f8 	strdcs	r0, [r0], -r8

080041b4 <RDMHandler::SetDeviceHours(bool, unsigned short)>:
 80041b4:	2104      	movs	r1, #4
 80041b6:	f7ff bdb9 	b.w	8003d2c <RDMHandler::RespondMessageNack(unsigned short)>
	...

080041bc <RDMHandler::SetDisplayInvert(bool, unsigned short)>:
 80041bc:	b538      	push	{r3, r4, r5, lr}
 80041be:	6843      	ldr	r3, [r0, #4]
 80041c0:	7d9a      	ldrb	r2, [r3, #22]
 80041c2:	2a01      	cmp	r2, #1
 80041c4:	4604      	mov	r4, r0
 80041c6:	d004      	beq.n	80041d2 <RDMHandler::SetDisplayInvert(bool, unsigned short)+0x16>
 80041c8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80041cc:	2101      	movs	r1, #1
 80041ce:	f7ff bdad 	b.w	8003d2c <RDMHandler::RespondMessageNack(unsigned short)>
 80041d2:	7ddd      	ldrb	r5, [r3, #23]
 80041d4:	2d02      	cmp	r5, #2
 80041d6:	d102      	bne.n	80041de <RDMHandler::SetDisplayInvert(bool, unsigned short)+0x22>
 80041d8:	2106      	movs	r1, #6
 80041da:	f7ff fda7 	bl	8003d2c <RDMHandler::RespondMessageNack(unsigned short)>
 80041de:	1e6b      	subs	r3, r5, #1
 80041e0:	4259      	negs	r1, r3
 80041e2:	4159      	adcs	r1, r3
 80041e4:	4b07      	ldr	r3, [pc, #28]	; (8004204 <RDMHandler::SetDisplayInvert(bool, unsigned short)+0x48>)
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	6998      	ldr	r0, [r3, #24]
 80041ea:	b110      	cbz	r0, 80041f2 <RDMHandler::SetDisplayInvert(bool, unsigned short)+0x36>
 80041ec:	6803      	ldr	r3, [r0, #0]
 80041ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041f0:	4798      	blx	r3
 80041f2:	68a3      	ldr	r3, [r4, #8]
 80041f4:	2200      	movs	r2, #0
 80041f6:	75da      	strb	r2, [r3, #23]
 80041f8:	4620      	mov	r0, r4
 80041fa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80041fe:	f7ff bb6d 	b.w	80038dc <RDMHandler::RespondMessageAck()>
 8004202:	bf00      	nop
 8004204:	200016ec 	andcs	r1, r0, ip, ror #13

08004208 <RDMHandler::SetDisplayLevel(bool, unsigned short)>:
 8004208:	b570      	push	{r4, r5, r6, lr}
 800420a:	6843      	ldr	r3, [r0, #4]
 800420c:	7d99      	ldrb	r1, [r3, #22]
 800420e:	2901      	cmp	r1, #1
 8004210:	4604      	mov	r4, r0
 8004212:	d004      	beq.n	800421e <RDMHandler::SetDisplayLevel(bool, unsigned short)+0x16>
 8004214:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8004218:	2101      	movs	r1, #1
 800421a:	f7ff bd87 	b.w	8003d2c <RDMHandler::RespondMessageNack(unsigned short)>
 800421e:	4e0b      	ldr	r6, [pc, #44]	; (800424c <RDMHandler::SetDisplayLevel(bool, unsigned short)+0x44>)
 8004220:	7ddd      	ldrb	r5, [r3, #23]
 8004222:	6830      	ldr	r0, [r6, #0]
 8004224:	b105      	cbz	r5, 8004228 <RDMHandler::SetDisplayLevel(bool, unsigned short)+0x20>
 8004226:	2100      	movs	r1, #0
 8004228:	f7fc fa3a 	bl	80006a0 <Display::SetSleep(bool)>
 800422c:	6833      	ldr	r3, [r6, #0]
 800422e:	6998      	ldr	r0, [r3, #24]
 8004230:	b118      	cbz	r0, 800423a <RDMHandler::SetDisplayLevel(bool, unsigned short)+0x32>
 8004232:	6803      	ldr	r3, [r0, #0]
 8004234:	4629      	mov	r1, r5
 8004236:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004238:	4798      	blx	r3
 800423a:	68a3      	ldr	r3, [r4, #8]
 800423c:	2200      	movs	r2, #0
 800423e:	75da      	strb	r2, [r3, #23]
 8004240:	4620      	mov	r0, r4
 8004242:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8004246:	f7ff bb49 	b.w	80038dc <RDMHandler::RespondMessageAck()>
 800424a:	bf00      	nop
 800424c:	200016ec 	andcs	r1, r0, ip, ror #13

08004250 <RDMHandler::SetRealTimeClock(bool, unsigned short)>:
 8004250:	b510      	push	{r4, lr}
 8004252:	6843      	ldr	r3, [r0, #4]
 8004254:	7d9a      	ldrb	r2, [r3, #22]
 8004256:	2a07      	cmp	r2, #7
 8004258:	b08a      	sub	sp, #40	; 0x28
 800425a:	4604      	mov	r4, r0
 800425c:	d005      	beq.n	800426a <RDMHandler::SetRealTimeClock(bool, unsigned short)+0x1a>
 800425e:	2101      	movs	r1, #1
 8004260:	b00a      	add	sp, #40	; 0x28
 8004262:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004266:	f7ff bd61 	b.w	8003d2c <RDMHandler::RespondMessageNack(unsigned short)>
 800426a:	7dd8      	ldrb	r0, [r3, #23]
 800426c:	7e1a      	ldrb	r2, [r3, #24]
 800426e:	eb02 2200 	add.w	r2, r2, r0, lsl #8
 8004272:	f2a2 726c 	subw	r2, r2, #1900	; 0x76c
 8004276:	9206      	str	r2, [sp, #24]
 8004278:	7e5a      	ldrb	r2, [r3, #25]
 800427a:	3a01      	subs	r2, #1
 800427c:	9205      	str	r2, [sp, #20]
 800427e:	7e9a      	ldrb	r2, [r3, #26]
 8004280:	9204      	str	r2, [sp, #16]
 8004282:	7eda      	ldrb	r2, [r3, #27]
 8004284:	9203      	str	r2, [sp, #12]
 8004286:	7f1a      	ldrb	r2, [r3, #28]
 8004288:	7f5b      	ldrb	r3, [r3, #29]
 800428a:	9202      	str	r2, [sp, #8]
 800428c:	9301      	str	r3, [sp, #4]
 800428e:	b979      	cbnz	r1, 80042b0 <RDMHandler::SetRealTimeClock(bool, unsigned short)+0x60>
 8004290:	4b08      	ldr	r3, [pc, #32]	; (80042b4 <RDMHandler::SetRealTimeClock(bool, unsigned short)+0x64>)
 8004292:	a901      	add	r1, sp, #4
 8004294:	6818      	ldr	r0, [r3, #0]
 8004296:	f003 fab1 	bl	80077fc <Hardware::SetTime(tm const*)>
 800429a:	b918      	cbnz	r0, 80042a4 <RDMHandler::SetRealTimeClock(bool, unsigned short)+0x54>
 800429c:	2104      	movs	r1, #4
 800429e:	4620      	mov	r0, r4
 80042a0:	f7ff fd44 	bl	8003d2c <RDMHandler::RespondMessageNack(unsigned short)>
 80042a4:	68a3      	ldr	r3, [r4, #8]
 80042a6:	2200      	movs	r2, #0
 80042a8:	75da      	strb	r2, [r3, #23]
 80042aa:	4620      	mov	r0, r4
 80042ac:	f7ff fb16 	bl	80038dc <RDMHandler::RespondMessageAck()>
 80042b0:	b00a      	add	sp, #40	; 0x28
 80042b2:	bd10      	pop	{r4, pc}
 80042b4:	200017dc 	ldrdcs	r1, [r0], -ip

080042b8 <RDMHandler::SetPowerState(bool, unsigned short)>:
 80042b8:	6842      	ldr	r2, [r0, #4]
 80042ba:	7d91      	ldrb	r1, [r2, #22]
 80042bc:	2901      	cmp	r1, #1
 80042be:	d002      	beq.n	80042c6 <RDMHandler::SetPowerState(bool, unsigned short)+0xe>
 80042c0:	2101      	movs	r1, #1
 80042c2:	f7ff bd33 	b.w	8003d2c <RDMHandler::RespondMessageNack(unsigned short)>
 80042c6:	7dd1      	ldrb	r1, [r2, #23]
 80042c8:	1eca      	subs	r2, r1, #3
 80042ca:	b2d2      	uxtb	r2, r2
 80042cc:	2afb      	cmp	r2, #251	; 0xfb
 80042ce:	d801      	bhi.n	80042d4 <RDMHandler::SetPowerState(bool, unsigned short)+0x1c>
 80042d0:	2106      	movs	r1, #6
 80042d2:	e7f6      	b.n	80042c2 <RDMHandler::SetPowerState(bool, unsigned short)+0xa>
 80042d4:	29ff      	cmp	r1, #255	; 0xff
 80042d6:	6883      	ldr	r3, [r0, #8]
 80042d8:	d103      	bne.n	80042e2 <RDMHandler::SetPowerState(bool, unsigned short)+0x2a>
 80042da:	2200      	movs	r2, #0
 80042dc:	75da      	strb	r2, [r3, #23]
 80042de:	f7ff bafd 	b.w	80038dc <RDMHandler::RespondMessageAck()>
 80042e2:	2104      	movs	r1, #4
 80042e4:	e7ed      	b.n	80042c2 <RDMHandler::SetPowerState(bool, unsigned short)+0xa>

080042e6 <RDMHandler::SetPerformSelfTest(bool, unsigned short)>:
 80042e6:	b510      	push	{r4, lr}
 80042e8:	6843      	ldr	r3, [r0, #4]
 80042ea:	7d9a      	ldrb	r2, [r3, #22]
 80042ec:	2a01      	cmp	r2, #1
 80042ee:	4604      	mov	r4, r0
 80042f0:	d004      	beq.n	80042fc <RDMHandler::SetPerformSelfTest(bool, unsigned short)+0x16>
 80042f2:	2101      	movs	r1, #1
 80042f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80042f8:	f7ff bd18 	b.w	8003d2c <RDMHandler::RespondMessageNack(unsigned short)>
 80042fc:	7dd8      	ldrb	r0, [r3, #23]
 80042fe:	f7fc fe2f 	bl	8000f60 <rdm::selftest::Set(unsigned char)>
 8004302:	b910      	cbnz	r0, 800430a <RDMHandler::SetPerformSelfTest(bool, unsigned short)+0x24>
 8004304:	2106      	movs	r1, #6
 8004306:	4620      	mov	r0, r4
 8004308:	e7f4      	b.n	80042f4 <RDMHandler::SetPerformSelfTest(bool, unsigned short)+0xe>
 800430a:	68a3      	ldr	r3, [r4, #8]
 800430c:	2200      	movs	r2, #0
 800430e:	75da      	strb	r2, [r3, #23]
 8004310:	4620      	mov	r0, r4
 8004312:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004316:	f7ff bae1 	b.w	80038dc <RDMHandler::RespondMessageAck()>

0800431a <RDMHandler::GetSelfTestDescription(unsigned short)>:
 800431a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800431c:	6845      	ldr	r5, [r0, #4]
 800431e:	4604      	mov	r4, r0
 8004320:	a901      	add	r1, sp, #4
 8004322:	7de8      	ldrb	r0, [r5, #23]
 8004324:	f7fc fe50 	bl	8000fc8 <rdm::selftest::GetDescription(unsigned char, unsigned int&)>
 8004328:	4603      	mov	r3, r0
 800432a:	b928      	cbnz	r0, 8004338 <RDMHandler::GetSelfTestDescription(unsigned short)+0x1e>
 800432c:	2106      	movs	r1, #6
 800432e:	4620      	mov	r0, r4
 8004330:	f7ff fcfc 	bl	8003d2c <RDMHandler::RespondMessageNack(unsigned short)>
 8004334:	b003      	add	sp, #12
 8004336:	bd30      	pop	{r4, r5, pc}
 8004338:	9a01      	ldr	r2, [sp, #4]
 800433a:	2a20      	cmp	r2, #32
 800433c:	bf84      	itt	hi
 800433e:	2220      	movhi	r2, #32
 8004340:	9201      	strhi	r2, [sp, #4]
 8004342:	9901      	ldr	r1, [sp, #4]
 8004344:	68a2      	ldr	r2, [r4, #8]
 8004346:	1c48      	adds	r0, r1, #1
 8004348:	75d0      	strb	r0, [r2, #23]
 800434a:	7de8      	ldrb	r0, [r5, #23]
 800434c:	7610      	strb	r0, [r2, #24]
 800434e:	4419      	add	r1, r3
 8004350:	3219      	adds	r2, #25
 8004352:	428b      	cmp	r3, r1
 8004354:	d103      	bne.n	800435e <RDMHandler::GetSelfTestDescription(unsigned short)+0x44>
 8004356:	4620      	mov	r0, r4
 8004358:	f7ff fac0 	bl	80038dc <RDMHandler::RespondMessageAck()>
 800435c:	e7ea      	b.n	8004334 <RDMHandler::GetSelfTestDescription(unsigned short)+0x1a>
 800435e:	f813 0b01 	ldrb.w	r0, [r3], #1
 8004362:	f802 0b01 	strb.w	r0, [r2], #1
 8004366:	e7f4      	b.n	8004352 <RDMHandler::GetSelfTestDescription(unsigned short)+0x38>

08004368 <RDMHandler::GetSlotDescription(unsigned short)>:
 8004368:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800436a:	4a1c      	ldr	r2, [pc, #112]	; (80043dc <RDMHandler::GetSlotDescription(unsigned short)+0x74>)
 800436c:	6846      	ldr	r6, [r0, #4]
 800436e:	4604      	mov	r4, r0
 8004370:	7df3      	ldrb	r3, [r6, #23]
 8004372:	7e35      	ldrb	r5, [r6, #24]
 8004374:	6810      	ldr	r0, [r2, #0]
 8004376:	b939      	cbnz	r1, 8004388 <RDMHandler::GetSlotDescription(unsigned short)+0x20>
 8004378:	eb05 2503 	add.w	r5, r5, r3, lsl #8
 800437c:	b2ad      	uxth	r5, r5
 800437e:	466a      	mov	r2, sp
 8004380:	4629      	mov	r1, r5
 8004382:	f7ff f9c1 	bl	8003708 <RDMDeviceResponder::GetSlotInfo(unsigned short, unsigned short, lightset::SlotInfo&) [clone .part.0]>
 8004386:	b928      	cbnz	r0, 8004394 <RDMHandler::GetSlotDescription(unsigned short)+0x2c>
 8004388:	2106      	movs	r1, #6
 800438a:	4620      	mov	r0, r4
 800438c:	f7ff fcce 	bl	8003d2c <RDMHandler::RespondMessageNack(unsigned short)>
 8004390:	b002      	add	sp, #8
 8004392:	bd70      	pop	{r4, r5, r6, pc}
 8004394:	f8bd 1000 	ldrh.w	r1, [sp]
 8004398:	aa01      	add	r2, sp, #4
 800439a:	4628      	mov	r0, r5
 800439c:	f000 fa46 	bl	800482c <RDMSlotInfo::GetCategoryText(unsigned short, unsigned short, unsigned int&)>
 80043a0:	4603      	mov	r3, r0
 80043a2:	2800      	cmp	r0, #0
 80043a4:	d0f0      	beq.n	8004388 <RDMHandler::GetSlotDescription(unsigned short)+0x20>
 80043a6:	9a01      	ldr	r2, [sp, #4]
 80043a8:	2a20      	cmp	r2, #32
 80043aa:	bf84      	itt	hi
 80043ac:	2220      	movhi	r2, #32
 80043ae:	9201      	strhi	r2, [sp, #4]
 80043b0:	9901      	ldr	r1, [sp, #4]
 80043b2:	68a2      	ldr	r2, [r4, #8]
 80043b4:	1c88      	adds	r0, r1, #2
 80043b6:	75d0      	strb	r0, [r2, #23]
 80043b8:	7df0      	ldrb	r0, [r6, #23]
 80043ba:	7610      	strb	r0, [r2, #24]
 80043bc:	7e30      	ldrb	r0, [r6, #24]
 80043be:	7650      	strb	r0, [r2, #25]
 80043c0:	4419      	add	r1, r3
 80043c2:	321a      	adds	r2, #26
 80043c4:	428b      	cmp	r3, r1
 80043c6:	d103      	bne.n	80043d0 <RDMHandler::GetSlotDescription(unsigned short)+0x68>
 80043c8:	4620      	mov	r0, r4
 80043ca:	f7ff fa87 	bl	80038dc <RDMHandler::RespondMessageAck()>
 80043ce:	e7df      	b.n	8004390 <RDMHandler::GetSlotDescription(unsigned short)+0x28>
 80043d0:	f813 0b01 	ldrb.w	r0, [r3], #1
 80043d4:	f802 0b01 	strb.w	r0, [r2], #1
 80043d8:	e7f4      	b.n	80043c4 <RDMHandler::GetSlotDescription(unsigned short)+0x5c>
 80043da:	bf00      	nop
 80043dc:	20000640 	andcs	r0, r0, r0, asr #12

080043e0 <RDMHandler::SetFactoryDefaults(bool, unsigned short)>:
 80043e0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80043e2:	6843      	ldr	r3, [r0, #4]
 80043e4:	7d9b      	ldrb	r3, [r3, #22]
 80043e6:	4605      	mov	r5, r0
 80043e8:	460e      	mov	r6, r1
 80043ea:	b12b      	cbz	r3, 80043f8 <RDMHandler::SetFactoryDefaults(bool, unsigned short)+0x18>
 80043ec:	2101      	movs	r1, #1
 80043ee:	b003      	add	sp, #12
 80043f0:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 80043f4:	f7ff bc9a 	b.w	8003d2c <RDMHandler::RespondMessageNack(unsigned short)>
 80043f8:	4b28      	ldr	r3, [pc, #160]	; (800449c <RDMHandler::SetFactoryDefaults(bool, unsigned short)+0xbc>)
 80043fa:	681c      	ldr	r4, [r3, #0]
 80043fc:	f104 0355 	add.w	r3, r4, #85	; 0x55
 8004400:	9300      	str	r3, [sp, #0]
 8004402:	1d20      	adds	r0, r4, #4
 8004404:	f894 3075 	ldrb.w	r3, [r4, #117]	; 0x75
 8004408:	f88d 3004 	strb.w	r3, [sp, #4]
 800440c:	4669      	mov	r1, sp
 800440e:	f7ff f80c 	bl	800342a <RDMDevice::SetLabel(TRDMDeviceInfoData const*)>
 8004412:	f06f 070d 	mvn.w	r7, #13
 8004416:	f894 3075 	ldrb.w	r3, [r4, #117]	; 0x75
 800441a:	f894 002e 	ldrb.w	r0, [r4, #46]	; 0x2e
 800441e:	f104 020e 	add.w	r2, r4, #14
 8004422:	1b3f      	subs	r7, r7, r4
 8004424:	18b9      	adds	r1, r7, r2
 8004426:	4288      	cmp	r0, r1
 8004428:	d830      	bhi.n	800448c <RDMHandler::SetFactoryDefaults(bool, unsigned short)+0xac>
 800442a:	f8a4 3076 	strh.w	r3, [r4, #118]	; 0x76
 800442e:	2201      	movs	r2, #1
 8004430:	2100      	movs	r1, #0
 8004432:	4620      	mov	r0, r4
 8004434:	f7ff f9bc 	bl	80037b0 <RDMDeviceResponder::SetPersonalityCurrent(unsigned short, unsigned char)>
 8004438:	f8b4 20c4 	ldrh.w	r2, [r4, #196]	; 0xc4
 800443c:	2100      	movs	r1, #0
 800443e:	4620      	mov	r0, r4
 8004440:	f7ff f979 	bl	8003736 <RDMDeviceResponder::SetDmxStartAddress(unsigned short, unsigned short)>
 8004444:	2213      	movs	r2, #19
 8004446:	f104 0199 	add.w	r1, r4, #153	; 0x99
 800444a:	f104 00ac 	add.w	r0, r4, #172	; 0xac
 800444e:	f7ff f968 	bl	8003722 <memcpy.isra.0>
 8004452:	f104 0088 	add.w	r0, r4, #136	; 0x88
 8004456:	f7fe fa17 	bl	8002888 <RDMSubDevices::SetFactoryDefaults()>
 800445a:	f894 30a8 	ldrb.w	r3, [r4, #168]	; 0xa8
 800445e:	f894 20a5 	ldrb.w	r2, [r4, #165]	; 0xa5
 8004462:	f8d4 00c8 	ldr.w	r0, [r4, #200]	; 0xc8
 8004466:	4413      	add	r3, r2
 8004468:	f8a4 30c2 	strh.w	r3, [r4, #194]	; 0xc2
 800446c:	2301      	movs	r3, #1
 800446e:	f884 30c1 	strb.w	r3, [r4, #193]	; 0xc1
 8004472:	b110      	cbz	r0, 800447a <RDMHandler::SetFactoryDefaults(bool, unsigned short)+0x9a>
 8004474:	6803      	ldr	r3, [r0, #0]
 8004476:	689b      	ldr	r3, [r3, #8]
 8004478:	4798      	blx	r3
 800447a:	b966      	cbnz	r6, 8004496 <RDMHandler::SetFactoryDefaults(bool, unsigned short)+0xb6>
 800447c:	68ab      	ldr	r3, [r5, #8]
 800447e:	4628      	mov	r0, r5
 8004480:	75de      	strb	r6, [r3, #23]
 8004482:	b003      	add	sp, #12
 8004484:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8004488:	f7ff ba28 	b.w	80038dc <RDMHandler::RespondMessageAck()>
 800448c:	f812 1b01 	ldrb.w	r1, [r2], #1
 8004490:	440b      	add	r3, r1
 8004492:	b29b      	uxth	r3, r3
 8004494:	e7c6      	b.n	8004424 <RDMHandler::SetFactoryDefaults(bool, unsigned short)+0x44>
 8004496:	b003      	add	sp, #12
 8004498:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800449a:	bf00      	nop
 800449c:	20000640 	andcs	r0, r0, r0, asr #12

080044a0 <RDMHandler::SetDeviceLabel(bool, unsigned short)>:
 80044a0:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80044a2:	6845      	ldr	r5, [r0, #4]
 80044a4:	7dab      	ldrb	r3, [r5, #22]
 80044a6:	2b20      	cmp	r3, #32
 80044a8:	460e      	mov	r6, r1
 80044aa:	4604      	mov	r4, r0
 80044ac:	4611      	mov	r1, r2
 80044ae:	d905      	bls.n	80044bc <RDMHandler::SetDeviceLabel(bool, unsigned short)+0x1c>
 80044b0:	2101      	movs	r1, #1
 80044b2:	b002      	add	sp, #8
 80044b4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80044b8:	f7ff bc38 	b.w	8003d2c <RDMHandler::RespondMessageNack(unsigned short)>
 80044bc:	4a0d      	ldr	r2, [pc, #52]	; (80044f4 <RDMHandler::SetDeviceLabel(bool, unsigned short)+0x54>)
 80044be:	6810      	ldr	r0, [r2, #0]
 80044c0:	f105 0217 	add.w	r2, r5, #23
 80044c4:	b159      	cbz	r1, 80044de <RDMHandler::SetDeviceLabel(bool, unsigned short)+0x3e>
 80044c6:	3088      	adds	r0, #136	; 0x88
 80044c8:	f7fe f947 	bl	800275a <RDMSubDevices::SetLabel(unsigned short, char const*, unsigned char)>
 80044cc:	b97e      	cbnz	r6, 80044ee <RDMHandler::SetDeviceLabel(bool, unsigned short)+0x4e>
 80044ce:	68a3      	ldr	r3, [r4, #8]
 80044d0:	4620      	mov	r0, r4
 80044d2:	75de      	strb	r6, [r3, #23]
 80044d4:	b002      	add	sp, #8
 80044d6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80044da:	f7ff b9ff 	b.w	80038dc <RDMHandler::RespondMessageAck()>
 80044de:	4669      	mov	r1, sp
 80044e0:	3004      	adds	r0, #4
 80044e2:	9200      	str	r2, [sp, #0]
 80044e4:	f88d 3004 	strb.w	r3, [sp, #4]
 80044e8:	f7fe ff9f 	bl	800342a <RDMDevice::SetLabel(TRDMDeviceInfoData const*)>
 80044ec:	e7ee      	b.n	80044cc <RDMHandler::SetDeviceLabel(bool, unsigned short)+0x2c>
 80044ee:	b002      	add	sp, #8
 80044f0:	bd70      	pop	{r4, r5, r6, pc}
 80044f2:	bf00      	nop
 80044f4:	20000640 	andcs	r0, r0, r0, asr #12

080044f8 <RDMHandler::Handlers(bool, unsigned char, unsigned short, unsigned char, unsigned short)>:
 80044f8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80044fc:	4616      	mov	r6, r2
 80044fe:	4604      	mov	r4, r0
 8004500:	f006 00ef 	and.w	r0, r6, #239	; 0xef
 8004504:	2700      	movs	r7, #0
 8004506:	2820      	cmp	r0, #32
 8004508:	f89d 801c 	ldrb.w	r8, [sp, #28]
 800450c:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 8004510:	46be      	mov	lr, r7
 8004512:	d005      	beq.n	8004520 <RDMHandler::Handlers(bool, unsigned char, unsigned short, unsigned char, unsigned short)+0x28>
 8004514:	2105      	movs	r1, #5
 8004516:	4620      	mov	r0, r4
 8004518:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800451c:	f7ff bc06 	b.w	8003d2c <RDMHandler::RespondMessageNack(unsigned short)>
 8004520:	482b      	ldr	r0, [pc, #172]	; (80045d0 <RDMHandler::Handlers(bool, unsigned char, unsigned short, unsigned char, unsigned short)+0xd8>)
 8004522:	6800      	ldr	r0, [r0, #0]
 8004524:	8880      	ldrh	r0, [r0, #4]
 8004526:	4290      	cmp	r0, r2
 8004528:	d205      	bcs.n	8004536 <RDMHandler::Handlers(bool, unsigned char, unsigned short, unsigned char, unsigned short)+0x3e>
 800452a:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800452e:	4282      	cmp	r2, r0
 8004530:	d001      	beq.n	8004536 <RDMHandler::Handlers(bool, unsigned char, unsigned short, unsigned char, unsigned short)+0x3e>
 8004532:	2109      	movs	r1, #9
 8004534:	e7ef      	b.n	8004516 <RDMHandler::Handlers(bool, unsigned char, unsigned short, unsigned char, unsigned short)+0x1e>
 8004536:	4d27      	ldr	r5, [pc, #156]	; (80045d4 <RDMHandler::Handlers(bool, unsigned char, unsigned short, unsigned char, unsigned short)+0xdc>)
 8004538:	f04f 0c1e 	mov.w	ip, #30
 800453c:	2000      	movs	r0, #0
 800453e:	f8b5 9000 	ldrh.w	r9, [r5]
 8004542:	4599      	cmp	r9, r3
 8004544:	bf02      	ittt	eq
 8004546:	7daf      	ldrbeq	r7, [r5, #22]
 8004548:	f895 e017 	ldrbeq.w	lr, [r5, #23]
 800454c:	4628      	moveq	r0, r5
 800454e:	f1bc 0c01 	subs.w	ip, ip, #1
 8004552:	f105 0518 	add.w	r5, r5, #24
 8004556:	d1f2      	bne.n	800453e <RDMHandler::Handlers(bool, unsigned char, unsigned short, unsigned char, unsigned short)+0x46>
 8004558:	b908      	cbnz	r0, 800455e <RDMHandler::Handlers(bool, unsigned char, unsigned short, unsigned char, unsigned short)+0x66>
 800455a:	2100      	movs	r1, #0
 800455c:	e7db      	b.n	8004516 <RDMHandler::Handlers(bool, unsigned char, unsigned short, unsigned char, unsigned short)+0x1e>
 800455e:	7823      	ldrb	r3, [r4, #0]
 8004560:	b193      	cbz	r3, 8004588 <RDMHandler::Handlers(bool, unsigned char, unsigned short, unsigned char, unsigned short)+0x90>
 8004562:	2f00      	cmp	r7, #0
 8004564:	d0f9      	beq.n	800455a <RDMHandler::Handlers(bool, unsigned char, unsigned short, unsigned char, unsigned short)+0x62>
 8004566:	2e20      	cmp	r6, #32
 8004568:	d11f      	bne.n	80045aa <RDMHandler::Handlers(bool, unsigned char, unsigned short, unsigned char, unsigned short)+0xb2>
 800456a:	bb71      	cbnz	r1, 80045ca <RDMHandler::Handlers(bool, unsigned char, unsigned short, unsigned char, unsigned short)+0xd2>
 800456c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004570:	429a      	cmp	r2, r3
 8004572:	d0de      	beq.n	8004532 <RDMHandler::Handlers(bool, unsigned char, unsigned short, unsigned char, unsigned short)+0x3a>
 8004574:	6843      	ldr	r3, [r0, #4]
 8004576:	b913      	cbnz	r3, 800457e <RDMHandler::Handlers(bool, unsigned char, unsigned short, unsigned char, unsigned short)+0x86>
 8004578:	6881      	ldr	r1, [r0, #8]
 800457a:	07cd      	lsls	r5, r1, #31
 800457c:	d5ca      	bpl.n	8004514 <RDMHandler::Handlers(bool, unsigned char, unsigned short, unsigned char, unsigned short)+0x1c>
 800457e:	7d01      	ldrb	r1, [r0, #20]
 8004580:	4541      	cmp	r1, r8
 8004582:	d005      	beq.n	8004590 <RDMHandler::Handlers(bool, unsigned char, unsigned short, unsigned char, unsigned short)+0x98>
 8004584:	2101      	movs	r1, #1
 8004586:	e7c6      	b.n	8004516 <RDMHandler::Handlers(bool, unsigned char, unsigned short, unsigned char, unsigned short)+0x1e>
 8004588:	f1be 0f00 	cmp.w	lr, #0
 800458c:	d1eb      	bne.n	8004566 <RDMHandler::Handlers(bool, unsigned char, unsigned short, unsigned char, unsigned short)+0x6e>
 800458e:	e7e4      	b.n	800455a <RDMHandler::Handlers(bool, unsigned char, unsigned short, unsigned char, unsigned short)+0x62>
 8004590:	6881      	ldr	r1, [r0, #8]
 8004592:	104d      	asrs	r5, r1, #1
 8004594:	eb04 0061 	add.w	r0, r4, r1, asr #1
 8004598:	07c9      	lsls	r1, r1, #31
 800459a:	bf48      	it	mi
 800459c:	5961      	ldrmi	r1, [r4, r5]
 800459e:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80045a2:	bf48      	it	mi
 80045a4:	58cb      	ldrmi	r3, [r1, r3]
 80045a6:	4611      	mov	r1, r2
 80045a8:	4718      	bx	r3
 80045aa:	e9d0 3003 	ldrd	r3, r0, [r0, #12]
 80045ae:	f000 0501 	and.w	r5, r0, #1
 80045b2:	b90b      	cbnz	r3, 80045b8 <RDMHandler::Handlers(bool, unsigned char, unsigned short, unsigned char, unsigned short)+0xc0>
 80045b4:	2d00      	cmp	r5, #0
 80045b6:	d0ad      	beq.n	8004514 <RDMHandler::Handlers(bool, unsigned char, unsigned short, unsigned char, unsigned short)+0x1c>
 80045b8:	1046      	asrs	r6, r0, #1
 80045ba:	eb04 0060 	add.w	r0, r4, r0, asr #1
 80045be:	b10d      	cbz	r5, 80045c4 <RDMHandler::Handlers(bool, unsigned char, unsigned short, unsigned char, unsigned short)+0xcc>
 80045c0:	59a4      	ldr	r4, [r4, r6]
 80045c2:	58e3      	ldr	r3, [r4, r3]
 80045c4:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80045c8:	4718      	bx	r3
 80045ca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80045ce:	bf00      	nop
 80045d0:	200001fc 	strdcs	r0, [r0], -ip
 80045d4:	08009aa4 	stmdaeq	r0, {r2, r5, r7, r9, fp, ip, pc}

080045d8 <RDMHandler::HandleData(unsigned char const*, unsigned char*)>:
 80045d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80045dc:	23ff      	movs	r3, #255	; 0xff
 80045de:	7013      	strb	r3, [r2, #0]
 80045e0:	e9c0 1201 	strd	r1, r2, [r0, #4]
 80045e4:	7d0b      	ldrb	r3, [r1, #20]
 80045e6:	f891 8015 	ldrb.w	r8, [r1, #21]
 80045ea:	f891 a013 	ldrb.w	sl, [r1, #19]
 80045ee:	eb08 2803 	add.w	r8, r8, r3, lsl #8
 80045f2:	4b5f      	ldr	r3, [pc, #380]	; (8004770 <RDMHandler::HandleData(unsigned char const*, unsigned char*)+0x198>)
 80045f4:	b085      	sub	sp, #20
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	9303      	str	r3, [sp, #12]
 80045fa:	f101 0902 	add.w	r9, r1, #2
 80045fe:	4607      	mov	r7, r0
 8004600:	460d      	mov	r5, r1
 8004602:	4614      	mov	r4, r2
 8004604:	495b      	ldr	r1, [pc, #364]	; (8004774 <RDMHandler::HandleData(unsigned char const*, unsigned char*)+0x19c>)
 8004606:	2206      	movs	r2, #6
 8004608:	4648      	mov	r0, r9
 800460a:	1d1e      	adds	r6, r3, #4
 800460c:	f7ff f86c 	bl	80036e8 <memcmp>
 8004610:	2202      	movs	r2, #2
 8004612:	4683      	mov	fp, r0
 8004614:	4631      	mov	r1, r6
 8004616:	4648      	mov	r0, r9
 8004618:	fa1f f888 	uxth.w	r8, r8
 800461c:	f7ff f864 	bl	80036e8 <memcmp>
 8004620:	b928      	cbnz	r0, 800462e <RDMHandler::HandleData(unsigned char const*, unsigned char*)+0x56>
 8004622:	2204      	movs	r2, #4
 8004624:	4953      	ldr	r1, [pc, #332]	; (8004774 <RDMHandler::HandleData(unsigned char const*, unsigned char*)+0x19c>)
 8004626:	18a8      	adds	r0, r5, r2
 8004628:	f7ff f85e 	bl	80036e8 <memcmp>
 800462c:	b158      	cbz	r0, 8004646 <RDMHandler::HandleData(unsigned char const*, unsigned char*)+0x6e>
 800462e:	2206      	movs	r2, #6
 8004630:	4631      	mov	r1, r6
 8004632:	4648      	mov	r0, r9
 8004634:	f7ff f858 	bl	80036e8 <memcmp>
 8004638:	b130      	cbz	r0, 8004648 <RDMHandler::HandleData(unsigned char const*, unsigned char*)+0x70>
 800463a:	f1bb 0f00 	cmp.w	fp, #0
 800463e:	d04c      	beq.n	80046da <RDMHandler::HandleData(unsigned char const*, unsigned char*)+0x102>
 8004640:	b005      	add	sp, #20
 8004642:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004646:	2001      	movs	r0, #1
 8004648:	2301      	movs	r3, #1
 800464a:	f1ba 0f10 	cmp.w	sl, #16
 800464e:	d17b      	bne.n	8004748 <RDMHandler::HandleData(unsigned char const*, unsigned char*)+0x170>
 8004650:	f1b8 0f01 	cmp.w	r8, #1
 8004654:	d144      	bne.n	80046e0 <RDMHandler::HandleData(unsigned char const*, unsigned char*)+0x108>
 8004656:	787b      	ldrb	r3, [r7, #1]
 8004658:	2b00      	cmp	r3, #0
 800465a:	d1f1      	bne.n	8004640 <RDMHandler::HandleData(unsigned char const*, unsigned char*)+0x68>
 800465c:	2206      	movs	r2, #6
 800465e:	4631      	mov	r1, r6
 8004660:	f105 0017 	add.w	r0, r5, #23
 8004664:	f7ff f840 	bl	80036e8 <memcmp>
 8004668:	2800      	cmp	r0, #0
 800466a:	dce9      	bgt.n	8004640 <RDMHandler::HandleData(unsigned char const*, unsigned char*)+0x68>
 800466c:	2206      	movs	r2, #6
 800466e:	f105 011d 	add.w	r1, r5, #29
 8004672:	4630      	mov	r0, r6
 8004674:	f7ff f838 	bl	80036e8 <memcmp>
 8004678:	2800      	cmp	r0, #0
 800467a:	dce1      	bgt.n	8004640 <RDMHandler::HandleData(unsigned char const*, unsigned char*)+0x68>
 800467c:	23fe      	movs	r3, #254	; 0xfe
 800467e:	7023      	strb	r3, [r4, #0]
 8004680:	7063      	strb	r3, [r4, #1]
 8004682:	70a3      	strb	r3, [r4, #2]
 8004684:	70e3      	strb	r3, [r4, #3]
 8004686:	7123      	strb	r3, [r4, #4]
 8004688:	7163      	strb	r3, [r4, #5]
 800468a:	71a3      	strb	r3, [r4, #6]
 800468c:	23aa      	movs	r3, #170	; 0xaa
 800468e:	71e3      	strb	r3, [r4, #7]
 8004690:	9b03      	ldr	r3, [sp, #12]
 8004692:	4622      	mov	r2, r4
 8004694:	f103 090a 	add.w	r9, r3, #10
 8004698:	f240 53fa 	movw	r3, #1530	; 0x5fa
 800469c:	7831      	ldrb	r1, [r6, #0]
 800469e:	f061 0155 	orn	r1, r1, #85	; 0x55
 80046a2:	7211      	strb	r1, [r2, #8]
 80046a4:	f816 1b01 	ldrb.w	r1, [r6], #1
 80046a8:	f041 0155 	orr.w	r1, r1, #85	; 0x55
 80046ac:	7251      	strb	r1, [r2, #9]
 80046ae:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 80046b2:	454e      	cmp	r6, r9
 80046b4:	440b      	add	r3, r1
 80046b6:	b29b      	uxth	r3, r3
 80046b8:	f102 0202 	add.w	r2, r2, #2
 80046bc:	d1ee      	bne.n	800469c <RDMHandler::HandleData(unsigned char const*, unsigned char*)+0xc4>
 80046be:	0a1a      	lsrs	r2, r3, #8
 80046c0:	f062 0155 	orn	r1, r2, #85	; 0x55
 80046c4:	f042 0255 	orr.w	r2, r2, #85	; 0x55
 80046c8:	7562      	strb	r2, [r4, #21]
 80046ca:	f063 0255 	orn	r2, r3, #85	; 0x55
 80046ce:	f043 0355 	orr.w	r3, r3, #85	; 0x55
 80046d2:	7521      	strb	r1, [r4, #20]
 80046d4:	75a2      	strb	r2, [r4, #22]
 80046d6:	75e3      	strb	r3, [r4, #23]
 80046d8:	e7b2      	b.n	8004640 <RDMHandler::HandleData(unsigned char const*, unsigned char*)+0x68>
 80046da:	4658      	mov	r0, fp
 80046dc:	465b      	mov	r3, fp
 80046de:	e7b4      	b.n	800464a <RDMHandler::HandleData(unsigned char const*, unsigned char*)+0x72>
 80046e0:	f1b8 0f03 	cmp.w	r8, #3
 80046e4:	d11a      	bne.n	800471c <RDMHandler::HandleData(unsigned char const*, unsigned char*)+0x144>
 80046e6:	7daa      	ldrb	r2, [r5, #22]
 80046e8:	2a00      	cmp	r2, #0
 80046ea:	d1a9      	bne.n	8004640 <RDMHandler::HandleData(unsigned char const*, unsigned char*)+0x68>
 80046ec:	707a      	strb	r2, [r7, #1]
 80046ee:	f1bb 0f00 	cmp.w	fp, #0
 80046f2:	d0a5      	beq.n	8004640 <RDMHandler::HandleData(unsigned char const*, unsigned char*)+0x68>
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d0a3      	beq.n	8004640 <RDMHandler::HandleData(unsigned char const*, unsigned char*)+0x68>
 80046f8:	2302      	movs	r3, #2
 80046fa:	75e3      	strb	r3, [r4, #23]
 80046fc:	4b1e      	ldr	r3, [pc, #120]	; (8004778 <RDMHandler::HandleData(unsigned char const*, unsigned char*)+0x1a0>)
 80046fe:	7622      	strb	r2, [r4, #24]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	7662      	strb	r2, [r4, #25]
 8004704:	889b      	ldrh	r3, [r3, #4]
 8004706:	3b00      	subs	r3, #0
 8004708:	bf18      	it	ne
 800470a:	2301      	movne	r3, #1
 800470c:	005b      	lsls	r3, r3, #1
 800470e:	4638      	mov	r0, r7
 8004710:	7663      	strb	r3, [r4, #25]
 8004712:	b005      	add	sp, #20
 8004714:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004718:	f7ff b8e0 	b.w	80038dc <RDMHandler::RespondMessageAck()>
 800471c:	f1b8 0f02 	cmp.w	r8, #2
 8004720:	d18e      	bne.n	8004640 <RDMHandler::HandleData(unsigned char const*, unsigned char*)+0x68>
 8004722:	7daa      	ldrb	r2, [r5, #22]
 8004724:	2a00      	cmp	r2, #0
 8004726:	d18b      	bne.n	8004640 <RDMHandler::HandleData(unsigned char const*, unsigned char*)+0x68>
 8004728:	2101      	movs	r1, #1
 800472a:	7079      	strb	r1, [r7, #1]
 800472c:	2b00      	cmp	r3, #0
 800472e:	d087      	beq.n	8004640 <RDMHandler::HandleData(unsigned char const*, unsigned char*)+0x68>
 8004730:	4b11      	ldr	r3, [pc, #68]	; (8004778 <RDMHandler::HandleData(unsigned char const*, unsigned char*)+0x1a0>)
 8004732:	f884 8017 	strb.w	r8, [r4, #23]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	7622      	strb	r2, [r4, #24]
 800473a:	7662      	strb	r2, [r4, #25]
 800473c:	889b      	ldrh	r3, [r3, #4]
 800473e:	3b00      	subs	r3, #0
 8004740:	bf18      	it	ne
 8004742:	2301      	movne	r3, #1
 8004744:	408b      	lsls	r3, r1
 8004746:	e7e2      	b.n	800470e <RDMHandler::HandleData(unsigned char const*, unsigned char*)+0x136>
 8004748:	7c6a      	ldrb	r2, [r5, #17]
 800474a:	7cab      	ldrb	r3, [r5, #18]
 800474c:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8004750:	b29b      	uxth	r3, r3
 8004752:	f1bb 0f00 	cmp.w	fp, #0
 8004756:	9301      	str	r3, [sp, #4]
 8004758:	7dab      	ldrb	r3, [r5, #22]
 800475a:	9300      	str	r3, [sp, #0]
 800475c:	bf18      	it	ne
 800475e:	4601      	movne	r1, r0
 8004760:	4643      	mov	r3, r8
 8004762:	4652      	mov	r2, sl
 8004764:	bf08      	it	eq
 8004766:	2101      	moveq	r1, #1
 8004768:	4638      	mov	r0, r7
 800476a:	f7ff fec5 	bl	80044f8 <RDMHandler::Handlers(bool, unsigned char, unsigned short, unsigned char, unsigned short)>
 800476e:	e767      	b.n	8004640 <RDMHandler::HandleData(unsigned char const*, unsigned char*)+0x68>
 8004770:	20000640 	andcs	r0, r0, r0, asr #12
 8004774:	08009a9c 	stmdaeq	r0, {r2, r3, r4, r7, r9, fp, ip, pc}
 8004778:	200001fc 	strdcs	r0, [r0], -ip

0800477c <RDMHandler::GetIdentifyMode(unsigned short)>:
 800477c:	6883      	ldr	r3, [r0, #8]
 800477e:	2201      	movs	r2, #1
 8004780:	75da      	strb	r2, [r3, #23]
 8004782:	4a02      	ldr	r2, [pc, #8]	; (800478c <RDMHandler::GetIdentifyMode(unsigned short)+0x10>)
 8004784:	7812      	ldrb	r2, [r2, #0]
 8004786:	761a      	strb	r2, [r3, #24]
 8004788:	f7ff b8a8 	b.w	80038dc <RDMHandler::RespondMessageAck()>
 800478c:	20000645 	andcs	r0, r0, r5, asr #12

08004790 <RDMHandler::SetIdentifyMode(bool, unsigned short)>:
 8004790:	b538      	push	{r3, r4, r5, lr}
 8004792:	6843      	ldr	r3, [r0, #4]
 8004794:	7d9a      	ldrb	r2, [r3, #22]
 8004796:	2a01      	cmp	r2, #1
 8004798:	4604      	mov	r4, r0
 800479a:	460d      	mov	r5, r1
 800479c:	d004      	beq.n	80047a8 <RDMHandler::SetIdentifyMode(bool, unsigned short)+0x18>
 800479e:	2101      	movs	r1, #1
 80047a0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80047a4:	f7ff bac2 	b.w	8003d2c <RDMHandler::RespondMessageNack(unsigned short)>
 80047a8:	7dd9      	ldrb	r1, [r3, #23]
 80047aa:	1e4b      	subs	r3, r1, #1
 80047ac:	b2db      	uxtb	r3, r3
 80047ae:	2bfd      	cmp	r3, #253	; 0xfd
 80047b0:	d801      	bhi.n	80047b6 <RDMHandler::SetIdentifyMode(bool, unsigned short)+0x26>
 80047b2:	2106      	movs	r1, #6
 80047b4:	e7f4      	b.n	80047a0 <RDMHandler::SetIdentifyMode(bool, unsigned short)+0x10>
 80047b6:	4b0b      	ldr	r3, [pc, #44]	; (80047e4 <RDMHandler::SetIdentifyMode(bool, unsigned short)+0x54>)
 80047b8:	6818      	ldr	r0, [r3, #0]
 80047ba:	4b0b      	ldr	r3, [pc, #44]	; (80047e8 <RDMHandler::SetIdentifyMode(bool, unsigned short)+0x58>)
 80047bc:	7019      	strb	r1, [r3, #0]
 80047be:	4b0b      	ldr	r3, [pc, #44]	; (80047ec <RDMHandler::SetIdentifyMode(bool, unsigned short)+0x5c>)
 80047c0:	781b      	ldrb	r3, [r3, #0]
 80047c2:	b15b      	cbz	r3, 80047dc <RDMHandler::SetIdentifyMode(bool, unsigned short)+0x4c>
 80047c4:	b151      	cbz	r1, 80047dc <RDMHandler::SetIdentifyMode(bool, unsigned short)+0x4c>
 80047c6:	21ff      	movs	r1, #255	; 0xff
 80047c8:	f7fc fc70 	bl	80010ac <RDMIdentify::On(rdm::identify::Mode)>
 80047cc:	b94d      	cbnz	r5, 80047e2 <RDMHandler::SetIdentifyMode(bool, unsigned short)+0x52>
 80047ce:	68a3      	ldr	r3, [r4, #8]
 80047d0:	75dd      	strb	r5, [r3, #23]
 80047d2:	4620      	mov	r0, r4
 80047d4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80047d8:	f7ff b880 	b.w	80038dc <RDMHandler::RespondMessageAck()>
 80047dc:	f7fc fc80 	bl	80010e0 <RDMIdentify::Off(rdm::identify::Mode)>
 80047e0:	e7f4      	b.n	80047cc <RDMHandler::SetIdentifyMode(bool, unsigned short)+0x3c>
 80047e2:	bd38      	pop	{r3, r4, r5, pc}
 80047e4:	20000648 	andcs	r0, r0, r8, asr #12
 80047e8:	20000645 	andcs	r0, r0, r5, asr #12
 80047ec:	20000644 	andcs	r0, r0, r4, asr #12

080047f0 <RDMIdentify::RDMIdentify()>:
 80047f0:	4b01      	ldr	r3, [pc, #4]	; (80047f8 <RDMIdentify::RDMIdentify()+0x8>)
 80047f2:	6018      	str	r0, [r3, #0]
 80047f4:	4770      	bx	lr
 80047f6:	bf00      	nop
 80047f8:	20000648 	andcs	r0, r0, r8, asr #12

080047fc <RDMSlotInfo::bsearch(unsigned short)>:
 80047fc:	b530      	push	{r4, r5, lr}
 80047fe:	4c0a      	ldr	r4, [pc, #40]	; (8004828 <RDMSlotInfo::bsearch(unsigned short)+0x2c>)
 8004800:	2128      	movs	r1, #40	; 0x28
 8004802:	2200      	movs	r2, #0
 8004804:	1a8b      	subs	r3, r1, r2
 8004806:	eb02 0363 	add.w	r3, r2, r3, asr #1
 800480a:	f834 5033 	ldrh.w	r5, [r4, r3, lsl #3]
 800480e:	4285      	cmp	r5, r0
 8004810:	d206      	bcs.n	8004820 <RDMSlotInfo::bsearch(unsigned short)+0x24>
 8004812:	1c5a      	adds	r2, r3, #1
 8004814:	428a      	cmp	r2, r1
 8004816:	ddf5      	ble.n	8004804 <RDMSlotInfo::bsearch(unsigned short)+0x8>
 8004818:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800481c:	4618      	mov	r0, r3
 800481e:	bd30      	pop	{r4, r5, pc}
 8004820:	d9fc      	bls.n	800481c <RDMSlotInfo::bsearch(unsigned short)+0x20>
 8004822:	1e59      	subs	r1, r3, #1
 8004824:	e7f6      	b.n	8004814 <RDMSlotInfo::bsearch(unsigned short)+0x18>
 8004826:	bf00      	nop
 8004828:	0800a2c8 	stmdaeq	r0, {r3, r6, r7, r9, sp, pc}

0800482c <RDMSlotInfo::GetCategoryText(unsigned short, unsigned short, unsigned int&)>:
 800482c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004830:	4299      	cmp	r1, r3
 8004832:	b510      	push	{r4, lr}
 8004834:	4614      	mov	r4, r2
 8004836:	d103      	bne.n	8004840 <RDMSlotInfo::GetCategoryText(unsigned short, unsigned short, unsigned int&)+0x14>
 8004838:	4611      	mov	r1, r2
 800483a:	f7fc fc63 	bl	8001104 <RDMSlotInfo::GetCategoryTextUndefined(unsigned short, unsigned int&)>
 800483e:	bd10      	pop	{r4, pc}
 8004840:	4608      	mov	r0, r1
 8004842:	f7ff ffdb 	bl	80047fc <RDMSlotInfo::bsearch(unsigned short)>
 8004846:	2800      	cmp	r0, #0
 8004848:	da02      	bge.n	8004850 <RDMSlotInfo::GetCategoryText(unsigned short, unsigned short, unsigned int&)+0x24>
 800484a:	2000      	movs	r0, #0
 800484c:	6020      	str	r0, [r4, #0]
 800484e:	e7f6      	b.n	800483e <RDMSlotInfo::GetCategoryText(unsigned short, unsigned short, unsigned int&)+0x12>
 8004850:	4b06      	ldr	r3, [pc, #24]	; (800486c <RDMSlotInfo::GetCategoryText(unsigned short, unsigned short, unsigned int&)+0x40>)
 8004852:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
 8004856:	6858      	ldr	r0, [r3, #4]
 8004858:	4602      	mov	r2, r0
 800485a:	4613      	mov	r3, r2
 800485c:	3201      	adds	r2, #1
 800485e:	7819      	ldrb	r1, [r3, #0]
 8004860:	2900      	cmp	r1, #0
 8004862:	d1fa      	bne.n	800485a <RDMSlotInfo::GetCategoryText(unsigned short, unsigned short, unsigned int&)+0x2e>
 8004864:	1a1b      	subs	r3, r3, r0
 8004866:	b29b      	uxth	r3, r3
 8004868:	6023      	str	r3, [r4, #0]
 800486a:	e7e8      	b.n	800483e <RDMSlotInfo::GetCategoryText(unsigned short, unsigned short, unsigned int&)+0x12>
 800486c:	0800a2c8 	stmdaeq	r0, {r3, r6, r7, r9, sp, pc}

08004870 <RDMDevice::RDMDevice()>:
 8004870:	4a33      	ldr	r2, [pc, #204]	; (8004940 <RDMDevice::RDMDevice()+0xd0>)
 8004872:	2300      	movs	r3, #0
 8004874:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004876:	4604      	mov	r4, r0
 8004878:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
 800487c:	f880 3071 	strb.w	r3, [r0, #113]	; 0x71
 8004880:	f8a0 3072 	strh.w	r3, [r0, #114]	; 0x72
 8004884:	6743      	str	r3, [r0, #116]	; 0x74
 8004886:	4611      	mov	r1, r2
 8004888:	4613      	mov	r3, r2
 800488a:	3201      	adds	r2, #1
 800488c:	7818      	ldrb	r0, [r3, #0]
 800488e:	2800      	cmp	r0, #0
 8004890:	d1fa      	bne.n	8004888 <RDMDevice::RDMDevice()+0x18>
 8004892:	1a5b      	subs	r3, r3, r1
 8004894:	2b20      	cmp	r3, #32
 8004896:	bf28      	it	cs
 8004898:	2320      	movcs	r3, #32
 800489a:	f104 052b 	add.w	r5, r4, #43	; 0x2b
 800489e:	4828      	ldr	r0, [pc, #160]	; (8004940 <RDMDevice::RDMDevice()+0xd0>)
 80048a0:	4629      	mov	r1, r5
 80048a2:	461a      	mov	r2, r3
 80048a4:	3a01      	subs	r2, #1
 80048a6:	d23b      	bcs.n	8004920 <RDMDevice::RDMDevice()+0xb0>
 80048a8:	f884 304b 	strb.w	r3, [r4, #75]	; 0x4b
 80048ac:	4b25      	ldr	r3, [pc, #148]	; (8004944 <RDMDevice::RDMDevice()+0xd4>)
 80048ae:	781a      	ldrb	r2, [r3, #0]
 80048b0:	7022      	strb	r2, [r4, #0]
 80048b2:	785b      	ldrb	r3, [r3, #1]
 80048b4:	7063      	strb	r3, [r4, #1]
 80048b6:	4b24      	ldr	r3, [pc, #144]	; (8004948 <RDMDevice::RDMDevice()+0xd8>)
 80048b8:	4669      	mov	r1, sp
 80048ba:	6818      	ldr	r0, [r3, #0]
 80048bc:	f002 fb16 	bl	8006eec <Network::MacAddressCopyTo(unsigned char*)>
 80048c0:	f89d 3002 	ldrb.w	r3, [sp, #2]
 80048c4:	70a3      	strb	r3, [r4, #2]
 80048c6:	7263      	strb	r3, [r4, #9]
 80048c8:	4b20      	ldr	r3, [pc, #128]	; (800494c <RDMDevice::RDMDevice()+0xdc>)
 80048ca:	f89d 2003 	ldrb.w	r2, [sp, #3]
 80048ce:	f89d 1004 	ldrb.w	r1, [sp, #4]
 80048d2:	f89d 0005 	ldrb.w	r0, [sp, #5]
 80048d6:	70e2      	strb	r2, [r4, #3]
 80048d8:	7222      	strb	r2, [r4, #8]
 80048da:	7121      	strb	r1, [r4, #4]
 80048dc:	7160      	strb	r0, [r4, #5]
 80048de:	71a0      	strb	r0, [r4, #6]
 80048e0:	71e1      	strb	r1, [r4, #7]
 80048e2:	461a      	mov	r2, r3
 80048e4:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 80048e8:	2900      	cmp	r1, #0
 80048ea:	d1fb      	bne.n	80048e4 <RDMDevice::RDMDevice()+0x74>
 80048ec:	1a9b      	subs	r3, r3, r2
 80048ee:	2b20      	cmp	r3, #32
 80048f0:	bf28      	it	cs
 80048f2:	2320      	movcs	r3, #32
 80048f4:	4915      	ldr	r1, [pc, #84]	; (800494c <RDMDevice::RDMDevice()+0xdc>)
 80048f6:	461a      	mov	r2, r3
 80048f8:	3a01      	subs	r2, #1
 80048fa:	d216      	bcs.n	800492a <RDMDevice::RDMDevice()+0xba>
 80048fc:	f884 304b 	strb.w	r3, [r4, #75]	; 0x4b
 8004900:	f06f 2380 	mvn.w	r3, #2147516416	; 0x80008000
 8004904:	64e3      	str	r3, [r4, #76]	; 0x4c
 8004906:	4a12      	ldr	r2, [pc, #72]	; (8004950 <RDMDevice::RDMDevice()+0xe0>)
 8004908:	2314      	movs	r3, #20
 800490a:	f884 3071 	strb.w	r3, [r4, #113]	; 0x71
 800490e:	f104 0165 	add.w	r1, r4, #101	; 0x65
 8004912:	f104 0351 	add.w	r3, r4, #81	; 0x51
 8004916:	4299      	cmp	r1, r3
 8004918:	d10c      	bne.n	8004934 <RDMDevice::RDMDevice()+0xc4>
 800491a:	4620      	mov	r0, r4
 800491c:	b002      	add	sp, #8
 800491e:	bd70      	pop	{r4, r5, r6, pc}
 8004920:	f810 6b01 	ldrb.w	r6, [r0], #1
 8004924:	f801 6b01 	strb.w	r6, [r1], #1
 8004928:	e7bc      	b.n	80048a4 <RDMDevice::RDMDevice()+0x34>
 800492a:	f811 0b01 	ldrb.w	r0, [r1], #1
 800492e:	f805 0b01 	strb.w	r0, [r5], #1
 8004932:	e7e1      	b.n	80048f8 <RDMDevice::RDMDevice()+0x88>
 8004934:	f812 0b01 	ldrb.w	r0, [r2], #1
 8004938:	f803 0b01 	strb.w	r0, [r3], #1
 800493c:	e7eb      	b.n	8004916 <RDMDevice::RDMDevice()+0xa6>
 800493e:	bf00      	nop
 8004940:	0800a507 	stmdaeq	r0, {r0, r1, r2, r8, sl, sp, pc}
 8004944:	0800a505 	stmdaeq	r0, {r0, r2, r8, sl, sp, pc}
 8004948:	200016e4 	andcs	r1, r0, r4, ror #13
 800494c:	0800a408 	stmdaeq	r0, {r3, sl, sp, pc}
 8004950:	0800a4f0 	stmdaeq	r0, {r4, r5, r6, r7, sl, sp, pc}

08004954 <RDMDevice::Print()>:
 8004954:	b513      	push	{r0, r1, r4, lr}
 8004956:	4604      	mov	r4, r0
 8004958:	4818      	ldr	r0, [pc, #96]	; (80049bc <RDMDevice::Print()+0x68>)
 800495a:	f7fc fe03 	bl	8001564 <printf>
 800495e:	f894 104b 	ldrb.w	r1, [r4, #75]	; 0x4b
 8004962:	4817      	ldr	r0, [pc, #92]	; (80049c0 <RDMDevice::Print()+0x6c>)
 8004964:	f104 022b 	add.w	r2, r4, #43	; 0x2b
 8004968:	f7fc fdfc 	bl	8001564 <printf>
 800496c:	7862      	ldrb	r2, [r4, #1]
 800496e:	7821      	ldrb	r1, [r4, #0]
 8004970:	4814      	ldr	r0, [pc, #80]	; (80049c4 <RDMDevice::Print()+0x70>)
 8004972:	f7fc fdf7 	bl	8001564 <printf>
 8004976:	79a3      	ldrb	r3, [r4, #6]
 8004978:	7a22      	ldrb	r2, [r4, #8]
 800497a:	7a61      	ldrb	r1, [r4, #9]
 800497c:	9300      	str	r3, [sp, #0]
 800497e:	4812      	ldr	r0, [pc, #72]	; (80049c8 <RDMDevice::Print()+0x74>)
 8004980:	79e3      	ldrb	r3, [r4, #7]
 8004982:	f7fc fdef 	bl	8001564 <printf>
 8004986:	f894 102a 	ldrb.w	r1, [r4, #42]	; 0x2a
 800498a:	4810      	ldr	r0, [pc, #64]	; (80049cc <RDMDevice::Print()+0x78>)
 800498c:	f104 020a 	add.w	r2, r4, #10
 8004990:	f7fc fde8 	bl	8001564 <printf>
 8004994:	f8b4 104c 	ldrh.w	r1, [r4, #76]	; 0x4c
 8004998:	f894 204c 	ldrb.w	r2, [r4, #76]	; 0x4c
 800499c:	480c      	ldr	r0, [pc, #48]	; (80049d0 <RDMDevice::Print()+0x7c>)
 800499e:	0a09      	lsrs	r1, r1, #8
 80049a0:	f7fc fde0 	bl	8001564 <printf>
 80049a4:	f8b4 104e 	ldrh.w	r1, [r4, #78]	; 0x4e
 80049a8:	f894 204e 	ldrb.w	r2, [r4, #78]	; 0x4e
 80049ac:	4809      	ldr	r0, [pc, #36]	; (80049d4 <RDMDevice::Print()+0x80>)
 80049ae:	0a09      	lsrs	r1, r1, #8
 80049b0:	b002      	add	sp, #8
 80049b2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80049b6:	f7fc bdd5 	b.w	8001564 <printf>
 80049ba:	bf00      	nop
 80049bc:	0800a41c 	stmdaeq	r0, {r2, r3, r4, sl, sp, pc}
 80049c0:	0800a436 	stmdaeq	r0, {r1, r2, r4, r5, sl, sp, pc}
 80049c4:	0800a451 	stmdaeq	r0, {r0, r4, r6, sl, sp, pc}
 80049c8:	0800a470 	stmdaeq	r0, {r4, r5, r6, sl, sp, pc}
 80049cc:	0800a497 	stmdaeq	r0, {r0, r1, r2, r4, r7, sl, sp, pc}
 80049d0:	0800a4b2 	stmdaeq	r0, {r1, r4, r5, r7, sl, sp, pc}
 80049d4:	0800a4d1 	stmdaeq	r0, {r0, r4, r6, r7, sl, sp, pc}

080049d8 <PixelDmxConfiguration::Validate(unsigned int, unsigned int&, pixeldmxconfiguration::PortInfo&, unsigned int&, unsigned int&)>:
 80049d8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80049da:	460e      	mov	r6, r1
 80049dc:	4611      	mov	r1, r2
 80049de:	9f08      	ldr	r7, [sp, #32]
 80049e0:	9201      	str	r2, [sp, #4]
 80049e2:	4604      	mov	r4, r0
 80049e4:	461d      	mov	r5, r3
 80049e6:	f000 fa97 	bl	8004f18 <PixelConfiguration::Validate(unsigned int&)>
 80049ea:	2e01      	cmp	r6, #1
 80049ec:	d009      	beq.n	8004a02 <PixelDmxConfiguration::Validate(unsigned int, unsigned int&, pixeldmxconfiguration::PortInfo&, unsigned int&, unsigned int&)+0x2a>
 80049ee:	7ce2      	ldrb	r2, [r4, #19]
 80049f0:	b93a      	cbnz	r2, 8004a02 <PixelDmxConfiguration::Validate(unsigned int, unsigned int&, pixeldmxconfiguration::PortInfo&, unsigned int&, unsigned int&)+0x2a>
 80049f2:	2e04      	cmp	r6, #4
 80049f4:	9901      	ldr	r1, [sp, #4]
 80049f6:	d13b      	bne.n	8004a70 <PixelDmxConfiguration::Validate(unsigned int, unsigned int&, pixeldmxconfiguration::PortInfo&, unsigned int&, unsigned int&)+0x98>
 80049f8:	2303      	movs	r3, #3
 80049fa:	6023      	str	r3, [r4, #0]
 80049fc:	4620      	mov	r0, r4
 80049fe:	f000 fa8b 	bl	8004f18 <PixelConfiguration::Validate(unsigned int&)>
 8004a02:	6823      	ldr	r3, [r4, #0]
 8004a04:	2b07      	cmp	r3, #7
 8004a06:	bf15      	itete	ne
 8004a08:	f44f 72aa 	movne.w	r2, #340	; 0x154
 8004a0c:	f44f 7280 	moveq.w	r2, #256	; 0x100
 8004a10:	21aa      	movne	r1, #170	; 0xaa
 8004a12:	2180      	moveq	r1, #128	; 0x80
 8004a14:	e9c5 1200 	strd	r1, r2, [r5]
 8004a18:	69a2      	ldr	r2, [r4, #24]
 8004a1a:	bf14      	ite	ne
 8004a1c:	f44f 73ff 	movne.w	r3, #510	; 0x1fe
 8004a20:	f44f 73c0 	moveq.w	r3, #384	; 0x180
 8004a24:	60ab      	str	r3, [r5, #8]
 8004a26:	6863      	ldr	r3, [r4, #4]
 8004a28:	b10a      	cbz	r2, 8004a2e <PixelDmxConfiguration::Validate(unsigned int, unsigned int&, pixeldmxconfiguration::PortInfo&, unsigned int&, unsigned int&)+0x56>
 8004a2a:	429a      	cmp	r2, r3
 8004a2c:	d900      	bls.n	8004a30 <PixelDmxConfiguration::Validate(unsigned int, unsigned int&, pixeldmxconfiguration::PortInfo&, unsigned int&, unsigned int&)+0x58>
 8004a2e:	61a3      	str	r3, [r4, #24]
 8004a30:	69a2      	ldr	r2, [r4, #24]
 8004a32:	fbb3 f3f2 	udiv	r3, r3, r2
 8004a36:	603b      	str	r3, [r7, #0]
 8004a38:	6963      	ldr	r3, [r4, #20]
 8004a3a:	42b3      	cmp	r3, r6
 8004a3c:	bf94      	ite	ls
 8004a3e:	6163      	strls	r3, [r4, #20]
 8004a40:	6166      	strhi	r6, [r4, #20]
 8004a42:	682b      	ldr	r3, [r5, #0]
 8004a44:	683a      	ldr	r2, [r7, #0]
 8004a46:	3301      	adds	r3, #1
 8004a48:	fbb2 f2f3 	udiv	r2, r2, r3
 8004a4c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004a4e:	3201      	adds	r2, #1
 8004a50:	601a      	str	r2, [r3, #0]
 8004a52:	2e01      	cmp	r6, #1
 8004a54:	bf13      	iteet	ne
 8004a56:	6963      	ldrne	r3, [r4, #20]
 8004a58:	682b      	ldreq	r3, [r5, #0]
 8004a5a:	683a      	ldreq	r2, [r7, #0]
 8004a5c:	435a      	mulne	r2, r3
 8004a5e:	bf0a      	itet	eq
 8004a60:	3301      	addeq	r3, #1
 8004a62:	f102 32ff 	addne.w	r2, r2, #4294967295	; 0xffffffff
 8004a66:	fbb2 f2f3 	udiveq	r2, r2, r3
 8004a6a:	60ea      	str	r2, [r5, #12]
 8004a6c:	b003      	add	sp, #12
 8004a6e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004a70:	6823      	ldr	r3, [r4, #0]
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d0c2      	beq.n	80049fc <PixelDmxConfiguration::Validate(unsigned int, unsigned int&, pixeldmxconfiguration::PortInfo&, unsigned int&, unsigned int&)+0x24>
 8004a76:	3b0b      	subs	r3, #11
 8004a78:	2b01      	cmp	r3, #1
 8004a7a:	bf88      	it	hi
 8004a7c:	6022      	strhi	r2, [r4, #0]
 8004a7e:	e7bd      	b.n	80049fc <PixelDmxConfiguration::Validate(unsigned int, unsigned int&, pixeldmxconfiguration::PortInfo&, unsigned int&, unsigned int&)+0x24>

08004a80 <PixelDmxConfiguration::Dump()>:
 8004a80:	4770      	bx	lr

08004a82 <LightSet::Blackout(bool)>:
 8004a82:	4770      	bx	lr

08004a84 <LightSet::Print()>:
 8004a84:	4770      	bx	lr

08004a86 <PixelDmxParamsRdm::SetDmxStartAddress(unsigned short)>:
 8004a86:	2000      	movs	r0, #0
 8004a88:	4770      	bx	lr

08004a8a <PixelDmxParamsRdm::GetDmxStartAddress()>:
 8004a8a:	2001      	movs	r0, #1
 8004a8c:	4770      	bx	lr

08004a8e <PixelDmxParamsRdm::GetDmxFootprint()>:
 8004a8e:	2006      	movs	r0, #6
 8004a90:	4770      	bx	lr

08004a92 <PixelDmxParamsRdm::Stop(unsigned int)>:
 8004a92:	4770      	bx	lr

08004a94 <PixelDmxParamsRdm::GetSlotInfo(unsigned short, lightset::SlotInfo&)>:
 8004a94:	2905      	cmp	r1, #5
 8004a96:	f04f 0000 	mov.w	r0, #0
 8004a9a:	bf9f      	itttt	ls
 8004a9c:	f64f 73ff 	movwls	r3, #65535	; 0xffff
 8004aa0:	7090      	strbls	r0, [r2, #2]
 8004aa2:	8013      	strhls	r3, [r2, #0]
 8004aa4:	2001      	movls	r0, #1
 8004aa6:	4770      	bx	lr

08004aa8 <PixelDmxParamsRdm::~PixelDmxParamsRdm()>:
 8004aa8:	4770      	bx	lr

08004aaa <PixelDmxParamsRdm::~PixelDmxParamsRdm()>:
 8004aaa:	b510      	push	{r4, lr}
 8004aac:	4604      	mov	r4, r0
 8004aae:	f003 f860 	bl	8007b72 <operator delete(void*)>
 8004ab2:	4620      	mov	r0, r4
 8004ab4:	bd10      	pop	{r4, pc}
	...

08004ab8 <PixelDmxParamsRdm::PixelDmxParamsRdm(WS28xxDmxStore*)>:
 8004ab8:	4b02      	ldr	r3, [pc, #8]	; (8004ac4 <PixelDmxParamsRdm::PixelDmxParamsRdm(WS28xxDmxStore*)+0xc>)
 8004aba:	6003      	str	r3, [r0, #0]
 8004abc:	4b02      	ldr	r3, [pc, #8]	; (8004ac8 <PixelDmxParamsRdm::PixelDmxParamsRdm(WS28xxDmxStore*)+0x10>)
 8004abe:	6019      	str	r1, [r3, #0]
 8004ac0:	4770      	bx	lr
 8004ac2:	bf00      	nop
 8004ac4:	0800a52c 	stmdaeq	r0, {r2, r3, r5, r8, sl, sp, pc}
 8004ac8:	2000064c 	andcs	r0, r0, ip, asr #12

08004acc <PixelDmxParamsRdm::SetData(unsigned int, unsigned char const*, unsigned int)>:
 8004acc:	2b05      	cmp	r3, #5
 8004ace:	b570      	push	{r4, r5, r6, lr}
 8004ad0:	4606      	mov	r6, r0
 8004ad2:	4614      	mov	r4, r2
 8004ad4:	d934      	bls.n	8004b40 <PixelDmxParamsRdm::SetData(unsigned int, unsigned char const*, unsigned int)+0x74>
 8004ad6:	7953      	ldrb	r3, [r2, #5]
 8004ad8:	b933      	cbnz	r3, 8004ae8 <PixelDmxParamsRdm::SetData(unsigned int, unsigned char const*, unsigned int)+0x1c>
 8004ada:	4a1a      	ldr	r2, [pc, #104]	; (8004b44 <PixelDmxParamsRdm::SetData(unsigned int, unsigned char const*, unsigned int)+0x78>)
 8004adc:	7013      	strb	r3, [r2, #0]
 8004ade:	4621      	mov	r1, r4
 8004ae0:	4630      	mov	r0, r6
 8004ae2:	f7fc f90d 	bl	8000d00 <PixelDmxParamsRdm::Display(unsigned char const*)>
 8004ae6:	e02b      	b.n	8004b40 <PixelDmxParamsRdm::SetData(unsigned int, unsigned char const*, unsigned int)+0x74>
 8004ae8:	2bff      	cmp	r3, #255	; 0xff
 8004aea:	d124      	bne.n	8004b36 <PixelDmxParamsRdm::SetData(unsigned int, unsigned char const*, unsigned int)+0x6a>
 8004aec:	4a15      	ldr	r2, [pc, #84]	; (8004b44 <PixelDmxParamsRdm::SetData(unsigned int, unsigned char const*, unsigned int)+0x78>)
 8004aee:	7811      	ldrb	r1, [r2, #0]
 8004af0:	2900      	cmp	r1, #0
 8004af2:	d1f4      	bne.n	8004ade <PixelDmxParamsRdm::SetData(unsigned int, unsigned char const*, unsigned int)+0x12>
 8004af4:	4d14      	ldr	r5, [pc, #80]	; (8004b48 <PixelDmxParamsRdm::SetData(unsigned int, unsigned char const*, unsigned int)+0x7c>)
 8004af6:	7013      	strb	r3, [r2, #0]
 8004af8:	6828      	ldr	r0, [r5, #0]
 8004afa:	7821      	ldrb	r1, [r4, #0]
 8004afc:	6803      	ldr	r3, [r0, #0]
 8004afe:	290e      	cmp	r1, #14
 8004b00:	bf28      	it	cs
 8004b02:	210e      	movcs	r1, #14
 8004b04:	689b      	ldr	r3, [r3, #8]
 8004b06:	4798      	blx	r3
 8004b08:	6828      	ldr	r0, [r5, #0]
 8004b0a:	7861      	ldrb	r1, [r4, #1]
 8004b0c:	6803      	ldr	r3, [r0, #0]
 8004b0e:	68db      	ldr	r3, [r3, #12]
 8004b10:	4798      	blx	r3
 8004b12:	6828      	ldr	r0, [r5, #0]
 8004b14:	78a1      	ldrb	r1, [r4, #2]
 8004b16:	6803      	ldr	r3, [r0, #0]
 8004b18:	691b      	ldr	r3, [r3, #16]
 8004b1a:	4798      	blx	r3
 8004b1c:	6828      	ldr	r0, [r5, #0]
 8004b1e:	78e1      	ldrb	r1, [r4, #3]
 8004b20:	6803      	ldr	r3, [r0, #0]
 8004b22:	2906      	cmp	r1, #6
 8004b24:	695b      	ldr	r3, [r3, #20]
 8004b26:	bf28      	it	cs
 8004b28:	2106      	movcs	r1, #6
 8004b2a:	4798      	blx	r3
 8004b2c:	6828      	ldr	r0, [r5, #0]
 8004b2e:	7921      	ldrb	r1, [r4, #4]
 8004b30:	6803      	ldr	r3, [r0, #0]
 8004b32:	699b      	ldr	r3, [r3, #24]
 8004b34:	4798      	blx	r3
 8004b36:	7963      	ldrb	r3, [r4, #5]
 8004b38:	3b01      	subs	r3, #1
 8004b3a:	b2db      	uxtb	r3, r3
 8004b3c:	2bfd      	cmp	r3, #253	; 0xfd
 8004b3e:	d8ce      	bhi.n	8004ade <PixelDmxParamsRdm::SetData(unsigned int, unsigned char const*, unsigned int)+0x12>
 8004b40:	bd70      	pop	{r4, r5, r6, pc}
 8004b42:	bf00      	nop
 8004b44:	20000650 	andcs	r0, r0, r0, asr r6
 8004b48:	2000064c 	andcs	r0, r0, ip, asr #12

08004b4c <WS28xxDmx::GetDmxStartAddress()>:
 8004b4c:	8dc0      	ldrh	r0, [r0, #46]	; 0x2e
 8004b4e:	4770      	bx	lr

08004b50 <WS28xxDmx::GetDmxFootprint()>:
 8004b50:	8e00      	ldrh	r0, [r0, #48]	; 0x30
 8004b52:	4770      	bx	lr

08004b54 <WS28xxDmx::~WS28xxDmx()>:
 8004b54:	b538      	push	{r3, r4, r5, lr}
 8004b56:	6b45      	ldr	r5, [r0, #52]	; 0x34
 8004b58:	4b05      	ldr	r3, [pc, #20]	; (8004b70 <WS28xxDmx::~WS28xxDmx()+0x1c>)
 8004b5a:	6003      	str	r3, [r0, #0]
 8004b5c:	4604      	mov	r4, r0
 8004b5e:	b12d      	cbz	r5, 8004b6c <WS28xxDmx::~WS28xxDmx()+0x18>
 8004b60:	4628      	mov	r0, r5
 8004b62:	f001 fbf9 	bl	8006358 <WS28xx::~WS28xx()>
 8004b66:	4628      	mov	r0, r5
 8004b68:	f003 f803 	bl	8007b72 <operator delete(void*)>
 8004b6c:	4620      	mov	r0, r4
 8004b6e:	bd38      	pop	{r3, r4, r5, pc}
 8004b70:	0800a560 	stmdaeq	r0, {r5, r6, r8, sl, sp, pc}

08004b74 <WS28xxDmx::~WS28xxDmx()>:
 8004b74:	b510      	push	{r4, lr}
 8004b76:	4604      	mov	r4, r0
 8004b78:	f7ff ffec 	bl	8004b54 <WS28xxDmx::~WS28xxDmx()>
 8004b7c:	4620      	mov	r0, r4
 8004b7e:	f002 fff8 	bl	8007b72 <operator delete(void*)>
 8004b82:	4620      	mov	r0, r4
 8004b84:	bd10      	pop	{r4, pc}

08004b86 <WS28xxDmx::Blackout(bool)>:
 8004b86:	b538      	push	{r3, r4, r5, lr}
 8004b88:	4605      	mov	r5, r0
 8004b8a:	460c      	mov	r4, r1
 8004b8c:	f880 1041 	strb.w	r1, [r0, #65]	; 0x41
 8004b90:	f004 fa50 	bl	8009034 <gd32_spi_dma_tx_is_active()>
 8004b94:	2800      	cmp	r0, #0
 8004b96:	d1fb      	bne.n	8004b90 <WS28xxDmx::Blackout(bool)+0xa>
 8004b98:	6b68      	ldr	r0, [r5, #52]	; 0x34
 8004b9a:	b11c      	cbz	r4, 8004ba4 <WS28xxDmx::Blackout(bool)+0x1e>
 8004b9c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004ba0:	f001 bc54 	b.w	800644c <WS28xx::Blackout()>
 8004ba4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004ba8:	f001 bc34 	b.w	8006414 <WS28xx::Update()>

08004bac <WS28xxDmx::Start(unsigned int)>:
 8004bac:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8004bb0:	b93b      	cbnz	r3, 8004bc2 <WS28xxDmx::Start(unsigned int)+0x16>
 8004bb2:	2301      	movs	r3, #1
 8004bb4:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
 8004bb8:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
 8004bba:	b110      	cbz	r0, 8004bc2 <WS28xxDmx::Start(unsigned int)+0x16>
 8004bbc:	6803      	ldr	r3, [r0, #0]
 8004bbe:	689b      	ldr	r3, [r3, #8]
 8004bc0:	4718      	bx	r3
 8004bc2:	4770      	bx	lr

08004bc4 <WS28xxDmx::SetDmxStartAddress(unsigned short)>:
 8004bc4:	8dc2      	ldrh	r2, [r0, #46]	; 0x2e
 8004bc6:	428a      	cmp	r2, r1
 8004bc8:	b508      	push	{r3, lr}
 8004bca:	d101      	bne.n	8004bd0 <WS28xxDmx::SetDmxStartAddress(unsigned short)+0xc>
 8004bcc:	2001      	movs	r0, #1
 8004bce:	bd08      	pop	{r3, pc}
 8004bd0:	8e02      	ldrh	r2, [r0, #48]	; 0x30
 8004bd2:	440a      	add	r2, r1
 8004bd4:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 8004bd8:	dc0b      	bgt.n	8004bf2 <WS28xxDmx::SetDmxStartAddress(unsigned short)+0x2e>
 8004bda:	1e4a      	subs	r2, r1, #1
 8004bdc:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 8004be0:	d207      	bcs.n	8004bf2 <WS28xxDmx::SetDmxStartAddress(unsigned short)+0x2e>
 8004be2:	85c1      	strh	r1, [r0, #46]	; 0x2e
 8004be4:	6b80      	ldr	r0, [r0, #56]	; 0x38
 8004be6:	2800      	cmp	r0, #0
 8004be8:	d0f0      	beq.n	8004bcc <WS28xxDmx::SetDmxStartAddress(unsigned short)+0x8>
 8004bea:	6803      	ldr	r3, [r0, #0]
 8004bec:	69db      	ldr	r3, [r3, #28]
 8004bee:	4798      	blx	r3
 8004bf0:	e7ec      	b.n	8004bcc <WS28xxDmx::SetDmxStartAddress(unsigned short)+0x8>
 8004bf2:	2000      	movs	r0, #0
 8004bf4:	e7eb      	b.n	8004bce <WS28xxDmx::SetDmxStartAddress(unsigned short)+0xa>

08004bf6 <WS28xxDmx::Stop(unsigned int)>:
 8004bf6:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8004bfa:	b510      	push	{r4, lr}
 8004bfc:	4604      	mov	r4, r0
 8004bfe:	b16b      	cbz	r3, 8004c1c <WS28xxDmx::Stop(unsigned int)+0x26>
 8004c00:	2300      	movs	r3, #0
 8004c02:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
 8004c06:	6b40      	ldr	r0, [r0, #52]	; 0x34
 8004c08:	b108      	cbz	r0, 8004c0e <WS28xxDmx::Stop(unsigned int)+0x18>
 8004c0a:	f001 fc1f 	bl	800644c <WS28xx::Blackout()>
 8004c0e:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8004c10:	b120      	cbz	r0, 8004c1c <WS28xxDmx::Stop(unsigned int)+0x26>
 8004c12:	6803      	ldr	r3, [r0, #0]
 8004c14:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004c18:	68db      	ldr	r3, [r3, #12]
 8004c1a:	4718      	bx	r3
 8004c1c:	bd10      	pop	{r4, pc}

08004c1e <WS28xxDmx::GetSlotInfo(unsigned short, lightset::SlotInfo&)>:
 8004c1e:	8e03      	ldrh	r3, [r0, #48]	; 0x30
 8004c20:	428b      	cmp	r3, r1
 8004c22:	f04f 0300 	mov.w	r3, #0
 8004c26:	d319      	bcc.n	8004c5c <WS28xxDmx::GetSlotInfo(unsigned short, lightset::SlotInfo&)+0x3e>
 8004c28:	7093      	strb	r3, [r2, #2]
 8004c2a:	6a03      	ldr	r3, [r0, #32]
 8004c2c:	fbb1 f0f3 	udiv	r0, r1, r3
 8004c30:	fb03 1110 	mls	r1, r3, r0, r1
 8004c34:	2903      	cmp	r1, #3
 8004c36:	d80e      	bhi.n	8004c56 <WS28xxDmx::GetSlotInfo(unsigned short, lightset::SlotInfo&)+0x38>
 8004c38:	e8df f001 	tbb	[pc, r1]
 8004c3c:	0d0a0702 	stceq	7, cr0, [sl, #-8]
 8004c40:	f240 2305 	movw	r3, #517	; 0x205
 8004c44:	8013      	strh	r3, [r2, #0]
 8004c46:	2001      	movs	r0, #1
 8004c48:	4770      	bx	lr
 8004c4a:	f240 2306 	movw	r3, #518	; 0x206
 8004c4e:	e7f9      	b.n	8004c44 <WS28xxDmx::GetSlotInfo(unsigned short, lightset::SlotInfo&)+0x26>
 8004c50:	f240 2307 	movw	r3, #519	; 0x207
 8004c54:	e7f6      	b.n	8004c44 <WS28xxDmx::GetSlotInfo(unsigned short, lightset::SlotInfo&)+0x26>
 8004c56:	f240 2312 	movw	r3, #530	; 0x212
 8004c5a:	e7f3      	b.n	8004c44 <WS28xxDmx::GetSlotInfo(unsigned short, lightset::SlotInfo&)+0x26>
 8004c5c:	4618      	mov	r0, r3
 8004c5e:	4770      	bx	lr

08004c60 <WS28xxDmx::SetData(unsigned int, unsigned char const*, unsigned int)>:
 8004c60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004c64:	b085      	sub	sp, #20
 8004c66:	4606      	mov	r6, r0
 8004c68:	9103      	str	r1, [sp, #12]
 8004c6a:	4691      	mov	r9, r2
 8004c6c:	4698      	mov	r8, r3
 8004c6e:	f004 f9e1 	bl	8009034 <gd32_spi_dma_tx_is_active()>
 8004c72:	2800      	cmp	r0, #0
 8004c74:	d172      	bne.n	8004d5c <WS28xxDmx::SetData(unsigned int, unsigned char const*, unsigned int)+0xfc>
 8004c76:	9b03      	ldr	r3, [sp, #12]
 8004c78:	6972      	ldr	r2, [r6, #20]
 8004c7a:	f003 0103 	and.w	r1, r3, #3
 8004c7e:	2902      	cmp	r1, #2
 8004c80:	6a33      	ldr	r3, [r6, #32]
 8004c82:	fbb8 f7f3 	udiv	r7, r8, r3
 8004c86:	d01f      	beq.n	8004cc8 <WS28xxDmx::SetData(unsigned int, unsigned char const*, unsigned int)+0x68>
 8004c88:	2903      	cmp	r1, #3
 8004c8a:	d024      	beq.n	8004cd6 <WS28xxDmx::SetData(unsigned int, unsigned char const*, unsigned int)+0x76>
 8004c8c:	2901      	cmp	r1, #1
 8004c8e:	6875      	ldr	r5, [r6, #4]
 8004c90:	d01b      	beq.n	8004cca <WS28xxDmx::SetData(unsigned int, unsigned char const*, unsigned int)+0x6a>
 8004c92:	4297      	cmp	r7, r2
 8004c94:	bf28      	it	cs
 8004c96:	4617      	movcs	r7, r2
 8004c98:	4295      	cmp	r5, r2
 8004c9a:	d91e      	bls.n	8004cda <WS28xxDmx::SetData(unsigned int, unsigned char const*, unsigned int)+0x7a>
 8004c9c:	8df4      	ldrh	r4, [r6, #46]	; 0x2e
 8004c9e:	4605      	mov	r5, r0
 8004ca0:	3c01      	subs	r4, #1
 8004ca2:	2b03      	cmp	r3, #3
 8004ca4:	444c      	add	r4, r9
 8004ca6:	d144      	bne.n	8004d32 <WS28xxDmx::SetData(unsigned int, unsigned char const*, unsigned int)+0xd2>
 8004ca8:	42bd      	cmp	r5, r7
 8004caa:	d325      	bcc.n	8004cf8 <WS28xxDmx::SetData(unsigned int, unsigned char const*, unsigned int)+0x98>
 8004cac:	6933      	ldr	r3, [r6, #16]
 8004cae:	9a03      	ldr	r2, [sp, #12]
 8004cb0:	429a      	cmp	r2, r3
 8004cb2:	d153      	bne.n	8004d5c <WS28xxDmx::SetData(unsigned int, unsigned char const*, unsigned int)+0xfc>
 8004cb4:	f896 3041 	ldrb.w	r3, [r6, #65]	; 0x41
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d14f      	bne.n	8004d5c <WS28xxDmx::SetData(unsigned int, unsigned char const*, unsigned int)+0xfc>
 8004cbc:	6b70      	ldr	r0, [r6, #52]	; 0x34
 8004cbe:	b005      	add	sp, #20
 8004cc0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004cc4:	f001 bba6 	b.w	8006414 <WS28xx::Update()>
 8004cc8:	68b5      	ldr	r5, [r6, #8]
 8004cca:	442f      	add	r7, r5
 8004ccc:	4297      	cmp	r7, r2
 8004cce:	bf28      	it	cs
 8004cd0:	4617      	movcs	r7, r2
 8004cd2:	4604      	mov	r4, r0
 8004cd4:	e7e5      	b.n	8004ca2 <WS28xxDmx::SetData(unsigned int, unsigned char const*, unsigned int)+0x42>
 8004cd6:	68f5      	ldr	r5, [r6, #12]
 8004cd8:	e7f7      	b.n	8004cca <WS28xxDmx::SetData(unsigned int, unsigned char const*, unsigned int)+0x6a>
 8004cda:	4605      	mov	r5, r0
 8004cdc:	4604      	mov	r4, r0
 8004cde:	e7e0      	b.n	8004ca2 <WS28xxDmx::SetData(unsigned int, unsigned char const*, unsigned int)+0x42>
 8004ce0:	78a2      	ldrb	r2, [r4, #2]
 8004ce2:	7863      	ldrb	r3, [r4, #1]
 8004ce4:	9200      	str	r2, [sp, #0]
 8004ce6:	eb0b 010a 	add.w	r1, fp, sl
 8004cea:	7822      	ldrb	r2, [r4, #0]
 8004cec:	6b70      	ldr	r0, [r6, #52]	; 0x34
 8004cee:	f000 fc95 	bl	800561c <WS28xx::SetPixel(unsigned int, unsigned char, unsigned char, unsigned char)>
 8004cf2:	f10a 0a01 	add.w	sl, sl, #1
 8004cf6:	e00a      	b.n	8004d0e <WS28xxDmx::SetData(unsigned int, unsigned char const*, unsigned int)+0xae>
 8004cf8:	eba4 0309 	sub.w	r3, r4, r9
 8004cfc:	4598      	cmp	r8, r3
 8004cfe:	d9d5      	bls.n	8004cac <WS28xxDmx::SetData(unsigned int, unsigned char const*, unsigned int)+0x4c>
 8004d00:	69b3      	ldr	r3, [r6, #24]
 8004d02:	f894 f000 	pld	[r4]
 8004d06:	fb03 fb05 	mul.w	fp, r3, r5
 8004d0a:	f04f 0a00 	mov.w	sl, #0
 8004d0e:	69b3      	ldr	r3, [r6, #24]
 8004d10:	459a      	cmp	sl, r3
 8004d12:	d3e5      	bcc.n	8004ce0 <WS28xxDmx::SetData(unsigned int, unsigned char const*, unsigned int)+0x80>
 8004d14:	3501      	adds	r5, #1
 8004d16:	3403      	adds	r4, #3
 8004d18:	e7c6      	b.n	8004ca8 <WS28xxDmx::SetData(unsigned int, unsigned char const*, unsigned int)+0x48>
 8004d1a:	69b3      	ldr	r3, [r6, #24]
 8004d1c:	f894 f000 	pld	[r4]
 8004d20:	fb03 fb05 	mul.w	fp, r3, r5
 8004d24:	f04f 0a00 	mov.w	sl, #0
 8004d28:	69b3      	ldr	r3, [r6, #24]
 8004d2a:	459a      	cmp	sl, r3
 8004d2c:	d308      	bcc.n	8004d40 <WS28xxDmx::SetData(unsigned int, unsigned char const*, unsigned int)+0xe0>
 8004d2e:	3501      	adds	r5, #1
 8004d30:	3404      	adds	r4, #4
 8004d32:	42af      	cmp	r7, r5
 8004d34:	d9ba      	bls.n	8004cac <WS28xxDmx::SetData(unsigned int, unsigned char const*, unsigned int)+0x4c>
 8004d36:	eba4 0309 	sub.w	r3, r4, r9
 8004d3a:	4598      	cmp	r8, r3
 8004d3c:	d8ed      	bhi.n	8004d1a <WS28xxDmx::SetData(unsigned int, unsigned char const*, unsigned int)+0xba>
 8004d3e:	e7b5      	b.n	8004cac <WS28xxDmx::SetData(unsigned int, unsigned char const*, unsigned int)+0x4c>
 8004d40:	78e2      	ldrb	r2, [r4, #3]
 8004d42:	7863      	ldrb	r3, [r4, #1]
 8004d44:	9201      	str	r2, [sp, #4]
 8004d46:	78a2      	ldrb	r2, [r4, #2]
 8004d48:	9200      	str	r2, [sp, #0]
 8004d4a:	eb0b 010a 	add.w	r1, fp, sl
 8004d4e:	7822      	ldrb	r2, [r4, #0]
 8004d50:	6b70      	ldr	r0, [r6, #52]	; 0x34
 8004d52:	f001 f9e9 	bl	8006128 <WS28xx::SetPixel(unsigned int, unsigned char, unsigned char, unsigned char, unsigned char)>
 8004d56:	f10a 0a01 	add.w	sl, sl, #1
 8004d5a:	e7e5      	b.n	8004d28 <WS28xxDmx::SetData(unsigned int, unsigned char const*, unsigned int)+0xc8>
 8004d5c:	b005      	add	sp, #20
 8004d5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08004d64 <WS28xxDmx::WS28xxDmx(PixelDmxConfiguration&)>:
 8004d64:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004d66:	4b1e      	ldr	r3, [pc, #120]	; (8004de0 <WS28xxDmx::WS28xxDmx(PixelDmxConfiguration&)+0x7c>)
 8004d68:	6003      	str	r3, [r0, #0]
 8004d6a:	2300      	movs	r3, #0
 8004d6c:	e9c0 330d 	strd	r3, r3, [r0, #52]	; 0x34
 8004d70:	8483      	strh	r3, [r0, #36]	; 0x24
 8004d72:	6283      	str	r3, [r0, #40]	; 0x28
 8004d74:	63c3      	str	r3, [r0, #60]	; 0x3c
 8004d76:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
 8004d7a:	4b1a      	ldr	r3, [pc, #104]	; (8004de4 <WS28xxDmx::WS28xxDmx(PixelDmxConfiguration&)+0x80>)
 8004d7c:	22ff      	movs	r2, #255	; 0xff
 8004d7e:	460d      	mov	r5, r1
 8004d80:	f880 202c 	strb.w	r2, [r0, #44]	; 0x2c
 8004d84:	6018      	str	r0, [r3, #0]
 8004d86:	2101      	movs	r1, #1
 8004d88:	f100 031c 	add.w	r3, r0, #28
 8004d8c:	f44f 72ff 	mov.w	r2, #510	; 0x1fe
 8004d90:	85c1      	strh	r1, [r0, #46]	; 0x2e
 8004d92:	8602      	strh	r2, [r0, #48]	; 0x30
 8004d94:	9301      	str	r3, [sp, #4]
 8004d96:	f100 0314 	add.w	r3, r0, #20
 8004d9a:	4604      	mov	r4, r0
 8004d9c:	f100 0220 	add.w	r2, r0, #32
 8004da0:	9300      	str	r3, [sp, #0]
 8004da2:	1d03      	adds	r3, r0, #4
 8004da4:	4628      	mov	r0, r5
 8004da6:	f7ff fe17 	bl	80049d8 <PixelDmxConfiguration::Validate(unsigned int, unsigned int&, pixeldmxconfiguration::PortInfo&, unsigned int&, unsigned int&)>
 8004daa:	201c      	movs	r0, #28
 8004dac:	f002 fee5 	bl	8007b7a <operator new(unsigned int)>
 8004db0:	4629      	mov	r1, r5
 8004db2:	4606      	mov	r6, r0
 8004db4:	f001 faee 	bl	8006394 <WS28xx::WS28xx(PixelConfiguration&)>
 8004db8:	4630      	mov	r0, r6
 8004dba:	6366      	str	r6, [r4, #52]	; 0x34
 8004dbc:	f001 fb46 	bl	800644c <WS28xx::Blackout()>
 8004dc0:	69ab      	ldr	r3, [r5, #24]
 8004dc2:	61a3      	str	r3, [r4, #24]
 8004dc4:	8bab      	ldrh	r3, [r5, #28]
 8004dc6:	6962      	ldr	r2, [r4, #20]
 8004dc8:	85e3      	strh	r3, [r4, #46]	; 0x2e
 8004dca:	6a23      	ldr	r3, [r4, #32]
 8004dcc:	fb13 f302 	smulbb	r3, r3, r2
 8004dd0:	4628      	mov	r0, r5
 8004dd2:	8623      	strh	r3, [r4, #48]	; 0x30
 8004dd4:	f7ff fe54 	bl	8004a80 <PixelDmxConfiguration::Dump()>
 8004dd8:	4620      	mov	r0, r4
 8004dda:	b002      	add	sp, #8
 8004ddc:	bd70      	pop	{r4, r5, r6, pc}
 8004dde:	bf00      	nop
 8004de0:	0800a560 	stmdaeq	r0, {r5, r6, r8, sl, sp, pc}
 8004de4:	20000654 	andcs	r0, r0, r4, asr r6

08004de8 <WS28xxDmxParams::WS28xxDmxParams(WS28xxDmxParamsStore*)>:
 8004de8:	6001      	str	r1, [r0, #0]
 8004dea:	4911      	ldr	r1, [pc, #68]	; (8004e30 <WS28xxDmxParams::WS28xxDmxParams(WS28xxDmxParamsStore*)+0x48>)
 8004dec:	2200      	movs	r2, #0
 8004dee:	e9c0 2101 	strd	r2, r1, [r0, #4]
 8004df2:	f44f 6110 	mov.w	r1, #2304	; 0x900
 8004df6:	81c1      	strh	r1, [r0, #14]
 8004df8:	213d      	movs	r1, #61	; 0x3d
 8004dfa:	8201      	strh	r1, [r0, #16]
 8004dfc:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004e00:	8241      	strh	r1, [r0, #18]
 8004e02:	2101      	movs	r1, #1
 8004e04:	7541      	strb	r1, [r0, #21]
 8004e06:	2106      	movs	r1, #6
 8004e08:	75c1      	strb	r1, [r0, #23]
 8004e0a:	490a      	ldr	r1, [pc, #40]	; (8004e34 <WS28xxDmxParams::WS28xxDmxParams(WS28xxDmxParamsStore*)+0x4c>)
 8004e0c:	7302      	strb	r2, [r0, #12]
 8004e0e:	f44f 3c80 	mov.w	ip, #65536	; 0x10000
 8004e12:	e9c0 c106 	strd	ip, r1, [r0, #24]
 8004e16:	f101 1108 	add.w	r1, r1, #524296	; 0x80008
 8004e1a:	6201      	str	r1, [r0, #32]
 8004e1c:	f101 1108 	add.w	r1, r1, #524296	; 0x80008
 8004e20:	6241      	str	r1, [r0, #36]	; 0x24
 8004e22:	211d      	movs	r1, #29
 8004e24:	7582      	strb	r2, [r0, #22]
 8004e26:	8501      	strh	r1, [r0, #40]	; 0x28
 8004e28:	f880 202a 	strb.w	r2, [r0, #42]	; 0x2a
 8004e2c:	4770      	bx	lr
 8004e2e:	bf00      	nop
 8004e30:	0100aa03 	tsteq	r0, r3, lsl #20
 8004e34:	00090005 	andeq	r0, r9, r5

08004e38 <WS28xxDmxParams::Load()>:
 8004e38:	b508      	push	{r3, lr}
 8004e3a:	2300      	movs	r3, #0
 8004e3c:	4601      	mov	r1, r0
 8004e3e:	6043      	str	r3, [r0, #4]
 8004e40:	6800      	ldr	r0, [r0, #0]
 8004e42:	b120      	cbz	r0, 8004e4e <WS28xxDmxParams::Load()+0x16>
 8004e44:	6803      	ldr	r3, [r0, #0]
 8004e46:	3104      	adds	r1, #4
 8004e48:	68db      	ldr	r3, [r3, #12]
 8004e4a:	4798      	blx	r3
 8004e4c:	2001      	movs	r0, #1
 8004e4e:	bd08      	pop	{r3, pc}

08004e50 <WS28xxDmxParams::Set(PixelDmxConfiguration*)>:
 8004e50:	6843      	ldr	r3, [r0, #4]
 8004e52:	07da      	lsls	r2, r3, #31
 8004e54:	bf44      	itt	mi
 8004e56:	7a02      	ldrbmi	r2, [r0, #8]
 8004e58:	600a      	strmi	r2, [r1, #0]
 8004e5a:	079a      	lsls	r2, r3, #30
 8004e5c:	d505      	bpl.n	8004e6a <WS28xxDmxParams::Set(PixelDmxConfiguration*)+0x1a>
 8004e5e:	f8b0 2009 	ldrh.w	r2, [r0, #9]
 8004e62:	2a00      	cmp	r2, #0
 8004e64:	bf08      	it	eq
 8004e66:	22aa      	moveq	r2, #170	; 0xaa
 8004e68:	604a      	str	r2, [r1, #4]
 8004e6a:	059a      	lsls	r2, r3, #22
 8004e6c:	bf44      	itt	mi
 8004e6e:	7dc2      	ldrbmi	r2, [r0, #23]
 8004e70:	608a      	strmi	r2, [r1, #8]
 8004e72:	055a      	lsls	r2, r3, #21
 8004e74:	bf44      	itt	mi
 8004e76:	7e02      	ldrbmi	r2, [r0, #24]
 8004e78:	740a      	strbmi	r2, [r1, #16]
 8004e7a:	051a      	lsls	r2, r3, #20
 8004e7c:	bf44      	itt	mi
 8004e7e:	7e42      	ldrbmi	r2, [r0, #25]
 8004e80:	744a      	strbmi	r2, [r1, #17]
 8004e82:	06da      	lsls	r2, r3, #27
 8004e84:	bf44      	itt	mi
 8004e86:	f8d0 200e 	ldrmi.w	r2, [r0, #14]
 8004e8a:	60ca      	strmi	r2, [r1, #12]
 8004e8c:	069a      	lsls	r2, r3, #26
 8004e8e:	bf44      	itt	mi
 8004e90:	7c82      	ldrbmi	r2, [r0, #18]
 8004e92:	748a      	strbmi	r2, [r1, #18]
 8004e94:	075a      	lsls	r2, r3, #29
 8004e96:	d50b      	bpl.n	8004eb0 <WS28xxDmxParams::Set(PixelDmxConfiguration*)+0x60>
 8004e98:	7ac2      	ldrb	r2, [r0, #11]
 8004e9a:	b510      	push	{r4, lr}
 8004e9c:	7b04      	ldrb	r4, [r0, #12]
 8004e9e:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
 8004ea2:	838a      	strh	r2, [r1, #28]
 8004ea4:	05da      	lsls	r2, r3, #23
 8004ea6:	bf44      	itt	mi
 8004ea8:	f8b0 3015 	ldrhmi.w	r3, [r0, #21]
 8004eac:	618b      	strmi	r3, [r1, #24]
 8004eae:	bd10      	pop	{r4, pc}
 8004eb0:	05db      	lsls	r3, r3, #23
 8004eb2:	bf44      	itt	mi
 8004eb4:	f8b0 3015 	ldrhmi.w	r3, [r0, #21]
 8004eb8:	618b      	strmi	r3, [r1, #24]
 8004eba:	4770      	bx	lr

08004ebc <WS28xxDmxParams::Dump()>:
 8004ebc:	4770      	bx	lr
	...

08004ec0 <WS28xxDmx::Print()>:
 8004ec0:	b510      	push	{r4, lr}
 8004ec2:	4604      	mov	r4, r0
 8004ec4:	6b40      	ldr	r0, [r0, #52]	; 0x34
 8004ec6:	f000 fb63 	bl	8005590 <WS28xx::Print()>
 8004eca:	4805      	ldr	r0, [pc, #20]	; (8004ee0 <WS28xxDmx::Print()+0x20>)
 8004ecc:	f7fc fb4a 	bl	8001564 <printf>
 8004ed0:	e9d4 2105 	ldrd	r2, r1, [r4, #20]
 8004ed4:	4803      	ldr	r0, [pc, #12]	; (8004ee4 <WS28xxDmx::Print()+0x24>)
 8004ed6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004eda:	f7fc bb43 	b.w	8001564 <printf>
 8004ede:	bf00      	nop
 8004ee0:	0800a58c 	stmdaeq	r0, {r2, r3, r7, r8, sl, sp, pc}
 8004ee4:	0800a5a2 	stmdaeq	r0, {r1, r5, r7, r8, sl, sp, pc}

08004ee8 <PixelConfiguration::GetRgbMapping(pixel::Type)>:
 8004ee8:	3801      	subs	r0, #1
 8004eea:	2809      	cmp	r0, #9
 8004eec:	bf9a      	itte	ls
 8004eee:	4b02      	ldrls	r3, [pc, #8]	; (8004ef8 <PixelConfiguration::GetRgbMapping(pixel::Type)+0x10>)
 8004ef0:	5618      	ldrsbls	r0, [r3, r0]
 8004ef2:	2002      	movhi	r0, #2
 8004ef4:	4770      	bx	lr
 8004ef6:	bf00      	nop
 8004ef8:	0800a5c6 	stmdaeq	r0, {r1, r2, r6, r7, r8, sl, sp, pc}

08004efc <PixelConfiguration::GetTxH(pixel::Type, unsigned char&, unsigned char&)>:
 8004efc:	23c0      	movs	r3, #192	; 0xc0
 8004efe:	2803      	cmp	r0, #3
 8004f00:	700b      	strb	r3, [r1, #0]
 8004f02:	d006      	beq.n	8004f12 <PixelConfiguration::GetTxH(pixel::Type, unsigned char&, unsigned char&)+0x16>
 8004f04:	3808      	subs	r0, #8
 8004f06:	2803      	cmp	r0, #3
 8004f08:	bf34      	ite	cc
 8004f0a:	23fc      	movcc	r3, #252	; 0xfc
 8004f0c:	23f0      	movcs	r3, #240	; 0xf0
 8004f0e:	7013      	strb	r3, [r2, #0]
 8004f10:	4770      	bx	lr
 8004f12:	23f8      	movs	r3, #248	; 0xf8
 8004f14:	e7fb      	b.n	8004f0e <PixelConfiguration::GetTxH(pixel::Type, unsigned char&, unsigned char&)+0x12>
	...

08004f18 <PixelConfiguration::Validate(unsigned int&)>:
 8004f18:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004f1a:	e9d0 5300 	ldrd	r5, r3, [r0]
 8004f1e:	2d07      	cmp	r5, #7
 8004f20:	6882      	ldr	r2, [r0, #8]
 8004f22:	4604      	mov	r4, r0
 8004f24:	d128      	bne.n	8004f78 <PixelConfiguration::Validate(unsigned int&)+0x60>
 8004f26:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004f2a:	bf28      	it	cs
 8004f2c:	f44f 7300 	movcs.w	r3, #512	; 0x200
 8004f30:	6043      	str	r3, [r0, #4]
 8004f32:	2304      	movs	r3, #4
 8004f34:	600b      	str	r3, [r1, #0]
 8004f36:	2301      	movs	r3, #1
 8004f38:	2a06      	cmp	r2, #6
 8004f3a:	74e3      	strb	r3, [r4, #19]
 8004f3c:	d103      	bne.n	8004f46 <PixelConfiguration::Validate(unsigned int&)+0x2e>
 8004f3e:	4628      	mov	r0, r5
 8004f40:	f7ff ffd2 	bl	8004ee8 <PixelConfiguration::GetRgbMapping(pixel::Type)>
 8004f44:	60a0      	str	r0, [r4, #8]
 8004f46:	7c63      	ldrb	r3, [r4, #17]
 8004f48:	7c22      	ldrb	r2, [r4, #16]
 8004f4a:	429a      	cmp	r2, r3
 8004f4c:	bf24      	itt	cs
 8004f4e:	2300      	movcs	r3, #0
 8004f50:	8223      	strhcs	r3, [r4, #16]
 8004f52:	f10d 0207 	add.w	r2, sp, #7
 8004f56:	f10d 0106 	add.w	r1, sp, #6
 8004f5a:	4628      	mov	r0, r5
 8004f5c:	f7ff ffce 	bl	8004efc <PixelConfiguration::GetTxH(pixel::Type, unsigned char&, unsigned char&)>
 8004f60:	7c23      	ldrb	r3, [r4, #16]
 8004f62:	b913      	cbnz	r3, 8004f6a <PixelConfiguration::Validate(unsigned int&)+0x52>
 8004f64:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8004f68:	7423      	strb	r3, [r4, #16]
 8004f6a:	7c63      	ldrb	r3, [r4, #17]
 8004f6c:	b913      	cbnz	r3, 8004f74 <PixelConfiguration::Validate(unsigned int&)+0x5c>
 8004f6e:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8004f72:	7463      	strb	r3, [r4, #17]
 8004f74:	4b19      	ldr	r3, [pc, #100]	; (8004fdc <PixelConfiguration::Validate(unsigned int&)+0xc4>)
 8004f76:	e020      	b.n	8004fba <PixelConfiguration::Validate(unsigned int&)+0xa2>
 8004f78:	f5b3 7f2a 	cmp.w	r3, #680	; 0x2a8
 8004f7c:	bf28      	it	cs
 8004f7e:	f44f 732a 	movcs.w	r3, #680	; 0x2a8
 8004f82:	6043      	str	r3, [r0, #4]
 8004f84:	2303      	movs	r3, #3
 8004f86:	600b      	str	r3, [r1, #0]
 8004f88:	f1a5 030b 	sub.w	r3, r5, #11
 8004f8c:	2b01      	cmp	r3, #1
 8004f8e:	d806      	bhi.n	8004f9e <PixelConfiguration::Validate(unsigned int&)+0x86>
 8004f90:	7c83      	ldrb	r3, [r0, #18]
 8004f92:	2b1f      	cmp	r3, #31
 8004f94:	d81d      	bhi.n	8004fd2 <PixelConfiguration::Validate(unsigned int&)+0xba>
 8004f96:	f043 03e0 	orr.w	r3, r3, #224	; 0xe0
 8004f9a:	74a3      	strb	r3, [r4, #18]
 8004f9c:	e000      	b.n	8004fa0 <PixelConfiguration::Validate(unsigned int&)+0x88>
 8004f9e:	b9d5      	cbnz	r5, 8004fd6 <PixelConfiguration::Validate(unsigned int&)+0xbe>
 8004fa0:	2300      	movs	r3, #0
 8004fa2:	2a06      	cmp	r2, #6
 8004fa4:	bf08      	it	eq
 8004fa6:	60a3      	streq	r3, [r4, #8]
 8004fa8:	f44f 417f 	mov.w	r1, #65280	; 0xff00
 8004fac:	2d0d      	cmp	r5, #13
 8004fae:	74e3      	strb	r3, [r4, #19]
 8004fb0:	8221      	strh	r1, [r4, #16]
 8004fb2:	68e3      	ldr	r3, [r4, #12]
 8004fb4:	d109      	bne.n	8004fca <PixelConfiguration::Validate(unsigned int&)+0xb2>
 8004fb6:	b913      	cbnz	r3, 8004fbe <PixelConfiguration::Validate(unsigned int&)+0xa6>
 8004fb8:	4b09      	ldr	r3, [pc, #36]	; (8004fe0 <PixelConfiguration::Validate(unsigned int&)+0xc8>)
 8004fba:	60e3      	str	r3, [r4, #12]
 8004fbc:	e003      	b.n	8004fc6 <PixelConfiguration::Validate(unsigned int&)+0xae>
 8004fbe:	4a09      	ldr	r2, [pc, #36]	; (8004fe4 <PixelConfiguration::Validate(unsigned int&)+0xcc>)
 8004fc0:	4293      	cmp	r3, r2
 8004fc2:	d900      	bls.n	8004fc6 <PixelConfiguration::Validate(unsigned int&)+0xae>
 8004fc4:	60e2      	str	r2, [r4, #12]
 8004fc6:	b003      	add	sp, #12
 8004fc8:	bd30      	pop	{r4, r5, pc}
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d0f4      	beq.n	8004fb8 <PixelConfiguration::Validate(unsigned int&)+0xa0>
 8004fce:	4a06      	ldr	r2, [pc, #24]	; (8004fe8 <PixelConfiguration::Validate(unsigned int&)+0xd0>)
 8004fd0:	e7f6      	b.n	8004fc0 <PixelConfiguration::Validate(unsigned int&)+0xa8>
 8004fd2:	23ff      	movs	r3, #255	; 0xff
 8004fd4:	e7e1      	b.n	8004f9a <PixelConfiguration::Validate(unsigned int&)+0x82>
 8004fd6:	2d0d      	cmp	r5, #13
 8004fd8:	d1ad      	bne.n	8004f36 <PixelConfiguration::Validate(unsigned int&)+0x1e>
 8004fda:	e7e1      	b.n	8004fa0 <PixelConfiguration::Validate(unsigned int&)+0x88>
 8004fdc:	0061a800 	rsbeq	sl, r1, r0, lsl #16
 8004fe0:	003d0900 	eorseq	r0, sp, r0, lsl #18
 8004fe4:	00e4e1c0 	rsceq	lr, r4, r0, asr #3
 8004fe8:	017d7840 	cmneq	sp, r0, asr #16

08004fec <PixelConfiguration::Dump()>:
 8004fec:	4770      	bx	lr
	...

08004ff0 <PixelPatterns::SetPixelColour(unsigned int, unsigned int, unsigned int) [clone .constprop.0]>:
 8004ff0:	b507      	push	{r0, r1, r2, lr}
 8004ff2:	b2cb      	uxtb	r3, r1
 8004ff4:	9300      	str	r3, [sp, #0]
 8004ff6:	f3c1 4207 	ubfx	r2, r1, #16, #8
 8004ffa:	f3c1 2307 	ubfx	r3, r1, #8, #8
 8004ffe:	4601      	mov	r1, r0
 8005000:	4803      	ldr	r0, [pc, #12]	; (8005010 <PixelPatterns::SetPixelColour(unsigned int, unsigned int, unsigned int) [clone .constprop.0]+0x20>)
 8005002:	6800      	ldr	r0, [r0, #0]
 8005004:	f000 fb0a 	bl	800561c <WS28xx::SetPixel(unsigned int, unsigned char, unsigned char, unsigned char)>
 8005008:	b003      	add	sp, #12
 800500a:	f85d fb04 	ldr.w	pc, [sp], #4
 800500e:	bf00      	nop
 8005010:	20000684 	andcs	r0, r0, r4, lsl #13

08005014 <PixelPatterns::Clear(unsigned int) [clone .isra.0]>:
 8005014:	b538      	push	{r3, r4, r5, lr}
 8005016:	4d06      	ldr	r5, [pc, #24]	; (8005030 <PixelPatterns::Clear(unsigned int) [clone .isra.0]+0x1c>)
 8005018:	2400      	movs	r4, #0
 800501a:	682b      	ldr	r3, [r5, #0]
 800501c:	429c      	cmp	r4, r3
 800501e:	d300      	bcc.n	8005022 <PixelPatterns::Clear(unsigned int) [clone .isra.0]+0xe>
 8005020:	bd38      	pop	{r3, r4, r5, pc}
 8005022:	4620      	mov	r0, r4
 8005024:	2100      	movs	r1, #0
 8005026:	f7ff ffe3 	bl	8004ff0 <PixelPatterns::SetPixelColour(unsigned int, unsigned int, unsigned int) [clone .constprop.0]>
 800502a:	3401      	adds	r4, #1
 800502c:	e7f5      	b.n	800501a <PixelPatterns::Clear(unsigned int) [clone .isra.0]+0x6>
 800502e:	bf00      	nop
 8005030:	20000680 	andcs	r0, r0, r0, lsl #13

08005034 <PixelPatterns::PixelPatterns(unsigned int)>:
 8005034:	4b09      	ldr	r3, [pc, #36]	; (800505c <PixelPatterns::PixelPatterns(unsigned int)+0x28>)
 8005036:	4a0a      	ldr	r2, [pc, #40]	; (8005060 <PixelPatterns::PixelPatterns(unsigned int)+0x2c>)
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	6013      	str	r3, [r2, #0]
 800503c:	2901      	cmp	r1, #1
 800503e:	4a09      	ldr	r2, [pc, #36]	; (8005064 <PixelPatterns::PixelPatterns(unsigned int)+0x30>)
 8005040:	bf28      	it	cs
 8005042:	2101      	movcs	r1, #1
 8005044:	6011      	str	r1, [r2, #0]
 8005046:	685a      	ldr	r2, [r3, #4]
 8005048:	4b07      	ldr	r3, [pc, #28]	; (8005068 <PixelPatterns::PixelPatterns(unsigned int)+0x34>)
 800504a:	601a      	str	r2, [r3, #0]
 800504c:	4b07      	ldr	r3, [pc, #28]	; (800506c <PixelPatterns::PixelPatterns(unsigned int)+0x38>)
 800504e:	6819      	ldr	r1, [r3, #0]
 8005050:	4b07      	ldr	r3, [pc, #28]	; (8005070 <PixelPatterns::PixelPatterns(unsigned int)+0x3c>)
 8005052:	2200      	movs	r2, #0
 8005054:	61da      	str	r2, [r3, #28]
 8005056:	6019      	str	r1, [r3, #0]
 8005058:	619a      	str	r2, [r3, #24]
 800505a:	4770      	bx	lr
 800505c:	20000694 	mulcs	r0, r4, r6
 8005060:	20000684 	andcs	r0, r0, r4, lsl #13
 8005064:	20000678 	andcs	r0, r0, r8, ror r6
 8005068:	20000680 	andcs	r0, r0, r0, lsl #13
 800506c:	20001814 	andcs	r1, r0, r4, lsl r8
 8005070:	20000658 	andcs	r0, r0, r8, asr r6

08005074 <PixelPatterns::GetName(pixelpatterns::Pattern)>:
 8005074:	2805      	cmp	r0, #5
 8005076:	bfdd      	ittte	le
 8005078:	4b02      	ldrle	r3, [pc, #8]	; (8005084 <PixelPatterns::GetName(pixelpatterns::Pattern)+0x10>)
 800507a:	220e      	movle	r2, #14
 800507c:	fb02 3000 	mlale	r0, r2, r0, r3
 8005080:	4801      	ldrgt	r0, [pc, #4]	; (8005088 <PixelPatterns::GetName(pixelpatterns::Pattern)+0x14>)
 8005082:	4770      	bx	lr
 8005084:	0800a5d8 	stmdaeq	r0, {r3, r4, r6, r7, r8, sl, sp, pc}
 8005088:	0800a5d0 	stmdaeq	r0, {r4, r6, r7, r8, sl, sp, pc}

0800508c <PixelPatterns::RainbowCycle(unsigned int, unsigned int, pixelpatterns::Direction)>:
 800508c:	b570      	push	{r4, r5, r6, lr}
 800508e:	460e      	mov	r6, r1
 8005090:	4615      	mov	r5, r2
 8005092:	461c      	mov	r4, r3
 8005094:	f7ff ffbe 	bl	8005014 <PixelPatterns::Clear(unsigned int) [clone .isra.0]>
 8005098:	4905      	ldr	r1, [pc, #20]	; (80050b0 <PixelPatterns::RainbowCycle(unsigned int, unsigned int, pixelpatterns::Direction)+0x24>)
 800509a:	eb01 1146 	add.w	r1, r1, r6, lsl #5
 800509e:	2301      	movs	r3, #1
 80050a0:	61cb      	str	r3, [r1, #28]
 80050a2:	22ff      	movs	r2, #255	; 0xff
 80050a4:	2300      	movs	r3, #0
 80050a6:	e9c1 2304 	strd	r2, r3, [r1, #16]
 80050aa:	604d      	str	r5, [r1, #4]
 80050ac:	618c      	str	r4, [r1, #24]
 80050ae:	bd70      	pop	{r4, r5, r6, pc}
 80050b0:	20000658 	andcs	r0, r0, r8, asr r6

080050b4 <PixelPatterns::TheaterChase(unsigned int, unsigned int, unsigned int, unsigned int, pixelpatterns::Direction)>:
 80050b4:	b570      	push	{r4, r5, r6, lr}
 80050b6:	460e      	mov	r6, r1
 80050b8:	461c      	mov	r4, r3
 80050ba:	4615      	mov	r5, r2
 80050bc:	f7ff ffaa 	bl	8005014 <PixelPatterns::Clear(unsigned int) [clone .isra.0]>
 80050c0:	4908      	ldr	r1, [pc, #32]	; (80050e4 <PixelPatterns::TheaterChase(unsigned int, unsigned int, unsigned int, unsigned int, pixelpatterns::Direction)+0x30>)
 80050c2:	eb01 1146 	add.w	r1, r1, r6, lsl #5
 80050c6:	2302      	movs	r3, #2
 80050c8:	61cb      	str	r3, [r1, #28]
 80050ca:	9b04      	ldr	r3, [sp, #16]
 80050cc:	604b      	str	r3, [r1, #4]
 80050ce:	4b06      	ldr	r3, [pc, #24]	; (80050e8 <PixelPatterns::TheaterChase(unsigned int, unsigned int, unsigned int, unsigned int, pixelpatterns::Direction)+0x34>)
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	610b      	str	r3, [r1, #16]
 80050d4:	2300      	movs	r3, #0
 80050d6:	614b      	str	r3, [r1, #20]
 80050d8:	9b05      	ldr	r3, [sp, #20]
 80050da:	618b      	str	r3, [r1, #24]
 80050dc:	e9c1 5402 	strd	r5, r4, [r1, #8]
 80050e0:	bd70      	pop	{r4, r5, r6, pc}
 80050e2:	bf00      	nop
 80050e4:	20000658 	andcs	r0, r0, r8, asr r6
 80050e8:	20000680 	andcs	r0, r0, r0, lsl #13

080050ec <PixelPatterns::ColourWipe(unsigned int, unsigned int, unsigned int, pixelpatterns::Direction)>:
 80050ec:	b570      	push	{r4, r5, r6, lr}
 80050ee:	460e      	mov	r6, r1
 80050f0:	461d      	mov	r5, r3
 80050f2:	4614      	mov	r4, r2
 80050f4:	f7ff ff8e 	bl	8005014 <PixelPatterns::Clear(unsigned int) [clone .isra.0]>
 80050f8:	4907      	ldr	r1, [pc, #28]	; (8005118 <PixelPatterns::ColourWipe(unsigned int, unsigned int, unsigned int, pixelpatterns::Direction)+0x2c>)
 80050fa:	eb01 1146 	add.w	r1, r1, r6, lsl #5
 80050fe:	2303      	movs	r3, #3
 8005100:	61cb      	str	r3, [r1, #28]
 8005102:	4b06      	ldr	r3, [pc, #24]	; (800511c <PixelPatterns::ColourWipe(unsigned int, unsigned int, unsigned int, pixelpatterns::Direction)+0x30>)
 8005104:	604d      	str	r5, [r1, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	610b      	str	r3, [r1, #16]
 800510a:	2300      	movs	r3, #0
 800510c:	614b      	str	r3, [r1, #20]
 800510e:	9b04      	ldr	r3, [sp, #16]
 8005110:	608c      	str	r4, [r1, #8]
 8005112:	618b      	str	r3, [r1, #24]
 8005114:	bd70      	pop	{r4, r5, r6, pc}
 8005116:	bf00      	nop
 8005118:	20000658 	andcs	r0, r0, r8, asr r6
 800511c:	20000680 	andcs	r0, r0, r0, lsl #13

08005120 <PixelPatterns::Scanner(unsigned int, unsigned int, unsigned int)>:
 8005120:	b570      	push	{r4, r5, r6, lr}
 8005122:	461d      	mov	r5, r3
 8005124:	460e      	mov	r6, r1
 8005126:	4614      	mov	r4, r2
 8005128:	f7ff ff74 	bl	8005014 <PixelPatterns::Clear(unsigned int) [clone .isra.0]>
 800512c:	4912      	ldr	r1, [pc, #72]	; (8005178 <PixelPatterns::Scanner(unsigned int, unsigned int, unsigned int)+0x58>)
 800512e:	eb01 1146 	add.w	r1, r1, r6, lsl #5
 8005132:	2304      	movs	r3, #4
 8005134:	604d      	str	r5, [r1, #4]
 8005136:	4d11      	ldr	r5, [pc, #68]	; (800517c <PixelPatterns::Scanner(unsigned int, unsigned int, unsigned int)+0x5c>)
 8005138:	61cb      	str	r3, [r1, #28]
 800513a:	6828      	ldr	r0, [r5, #0]
 800513c:	608c      	str	r4, [r1, #8]
 800513e:	1e43      	subs	r3, r0, #1
 8005140:	005b      	lsls	r3, r3, #1
 8005142:	b29b      	uxth	r3, r3
 8005144:	4c0e      	ldr	r4, [pc, #56]	; (8005180 <PixelPatterns::Scanner(unsigned int, unsigned int, unsigned int)+0x60>)
 8005146:	610b      	str	r3, [r1, #16]
 8005148:	2300      	movs	r3, #0
 800514a:	614b      	str	r3, [r1, #20]
 800514c:	6823      	ldr	r3, [r4, #0]
 800514e:	b97b      	cbnz	r3, 8005170 <PixelPatterns::Scanner(unsigned int, unsigned int, unsigned int)+0x50>
 8005150:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
 8005154:	4298      	cmp	r0, r3
 8005156:	bf34      	ite	cc
 8005158:	0080      	lslcc	r0, r0, #2
 800515a:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
 800515e:	f002 fd0e 	bl	8007b7e <operator new[](unsigned int)>
 8005162:	682b      	ldr	r3, [r5, #0]
 8005164:	6020      	str	r0, [r4, #0]
 8005166:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 800516a:	2200      	movs	r2, #0
 800516c:	4298      	cmp	r0, r3
 800516e:	d100      	bne.n	8005172 <PixelPatterns::Scanner(unsigned int, unsigned int, unsigned int)+0x52>
 8005170:	bd70      	pop	{r4, r5, r6, pc}
 8005172:	f840 2b04 	str.w	r2, [r0], #4
 8005176:	e7f9      	b.n	800516c <PixelPatterns::Scanner(unsigned int, unsigned int, unsigned int)+0x4c>
 8005178:	20000658 	andcs	r0, r0, r8, asr r6
 800517c:	20000680 	andcs	r0, r0, r0, lsl #13
 8005180:	2000067c 	andcs	r0, r0, ip, ror r6

08005184 <PixelPatterns::Fade(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, pixelpatterns::Direction)>:
 8005184:	b570      	push	{r4, r5, r6, lr}
 8005186:	460e      	mov	r6, r1
 8005188:	461c      	mov	r4, r3
 800518a:	4615      	mov	r5, r2
 800518c:	f7ff ff42 	bl	8005014 <PixelPatterns::Clear(unsigned int) [clone .isra.0]>
 8005190:	4907      	ldr	r1, [pc, #28]	; (80051b0 <PixelPatterns::Fade(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, pixelpatterns::Direction)+0x2c>)
 8005192:	eb01 1146 	add.w	r1, r1, r6, lsl #5
 8005196:	2305      	movs	r3, #5
 8005198:	61cb      	str	r3, [r1, #28]
 800519a:	9b05      	ldr	r3, [sp, #20]
 800519c:	604b      	str	r3, [r1, #4]
 800519e:	9b04      	ldr	r3, [sp, #16]
 80051a0:	610b      	str	r3, [r1, #16]
 80051a2:	2300      	movs	r3, #0
 80051a4:	614b      	str	r3, [r1, #20]
 80051a6:	9b06      	ldr	r3, [sp, #24]
 80051a8:	618b      	str	r3, [r1, #24]
 80051aa:	e9c1 5402 	strd	r5, r4, [r1, #8]
 80051ae:	bd70      	pop	{r4, r5, r6, pc}
 80051b0:	20000658 	andcs	r0, r0, r8, asr r6

080051b4 <PixelPatterns::Wheel(unsigned char)>:
 80051b4:	43cb      	mvns	r3, r1
 80051b6:	b2db      	uxtb	r3, r3
 80051b8:	2b54      	cmp	r3, #84	; 0x54
 80051ba:	d809      	bhi.n	80051d0 <PixelPatterns::Wheel(unsigned char)+0x1c>
 80051bc:	eba3 0383 	sub.w	r3, r3, r3, lsl #2
 80051c0:	b2db      	uxtb	r3, r3
 80051c2:	1e5a      	subs	r2, r3, #1
 80051c4:	4258      	negs	r0, r3
 80051c6:	b2d2      	uxtb	r2, r2
 80051c8:	b2c0      	uxtb	r0, r0
 80051ca:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 80051ce:	4770      	bx	lr
 80051d0:	2ba9      	cmp	r3, #169	; 0xa9
 80051d2:	d809      	bhi.n	80051e8 <PixelPatterns::Wheel(unsigned char)+0x34>
 80051d4:	f1c1 01aa 	rsb	r1, r1, #170	; 0xaa
 80051d8:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 80051dc:	b2c9      	uxtb	r1, r1
 80051de:	43c8      	mvns	r0, r1
 80051e0:	b2c0      	uxtb	r0, r0
 80051e2:	ea40 2001 	orr.w	r0, r0, r1, lsl #8
 80051e6:	4770      	bx	lr
 80051e8:	f1c1 0155 	rsb	r1, r1, #85	; 0x55
 80051ec:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 80051f0:	b2c9      	uxtb	r1, r1
 80051f2:	0208      	lsls	r0, r1, #8
 80051f4:	f480 407f 	eor.w	r0, r0, #65280	; 0xff00
 80051f8:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80051fc:	4770      	bx	lr
	...

08005200 <PixelPatterns::Increment(unsigned int)>:
 8005200:	4a0d      	ldr	r2, [pc, #52]	; (8005238 <PixelPatterns::Increment(unsigned int)+0x38>)
 8005202:	b510      	push	{r4, lr}
 8005204:	014c      	lsls	r4, r1, #5
 8005206:	eb02 1141 	add.w	r1, r2, r1, lsl #5
 800520a:	e9d1 3005 	ldrd	r3, r0, [r1, #20]
 800520e:	b930      	cbnz	r0, 800521e <PixelPatterns::Increment(unsigned int)+0x1e>
 8005210:	690a      	ldr	r2, [r1, #16]
 8005212:	3301      	adds	r3, #1
 8005214:	4293      	cmp	r3, r2
 8005216:	bf18      	it	ne
 8005218:	4618      	movne	r0, r3
 800521a:	6148      	str	r0, [r1, #20]
 800521c:	bd10      	pop	{r4, pc}
 800521e:	b92b      	cbnz	r3, 800522c <PixelPatterns::Increment(unsigned int)+0x2c>
 8005220:	4422      	add	r2, r4
 8005222:	6913      	ldr	r3, [r2, #16]
 8005224:	3b01      	subs	r3, #1
 8005226:	b29b      	uxth	r3, r3
 8005228:	6153      	str	r3, [r2, #20]
 800522a:	e7f7      	b.n	800521c <PixelPatterns::Increment(unsigned int)+0x1c>
 800522c:	3b01      	subs	r3, #1
 800522e:	614b      	str	r3, [r1, #20]
 8005230:	2b00      	cmp	r3, #0
 8005232:	d1f3      	bne.n	800521c <PixelPatterns::Increment(unsigned int)+0x1c>
 8005234:	e7f4      	b.n	8005220 <PixelPatterns::Increment(unsigned int)+0x20>
 8005236:	bf00      	nop
 8005238:	20000658 	andcs	r0, r0, r8, asr r6

0800523c <PixelPatterns::RainbowCycleUpdate(unsigned int)>:
 800523c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005240:	4b11      	ldr	r3, [pc, #68]	; (8005288 <PixelPatterns::RainbowCycleUpdate(unsigned int)+0x4c>)
 8005242:	f8df 8048 	ldr.w	r8, [pc, #72]	; 800528c <PixelPatterns::RainbowCycleUpdate(unsigned int)+0x50>
 8005246:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800524a:	4604      	mov	r4, r0
 800524c:	f8d3 9014 	ldr.w	r9, [r3, #20]
 8005250:	460d      	mov	r5, r1
 8005252:	2700      	movs	r7, #0
 8005254:	f8d8 2000 	ldr.w	r2, [r8]
 8005258:	b2be      	uxth	r6, r7
 800525a:	42b2      	cmp	r2, r6
 800525c:	f107 0701 	add.w	r7, r7, #1
 8005260:	d805      	bhi.n	800526e <PixelPatterns::RainbowCycleUpdate(unsigned int)+0x32>
 8005262:	4629      	mov	r1, r5
 8005264:	4620      	mov	r0, r4
 8005266:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800526a:	f7ff bfc9 	b.w	8005200 <PixelPatterns::Increment(unsigned int)>
 800526e:	0233      	lsls	r3, r6, #8
 8005270:	fbb3 f3f2 	udiv	r3, r3, r2
 8005274:	444b      	add	r3, r9
 8005276:	b2d9      	uxtb	r1, r3
 8005278:	4620      	mov	r0, r4
 800527a:	f7ff ff9b 	bl	80051b4 <PixelPatterns::Wheel(unsigned char)>
 800527e:	4601      	mov	r1, r0
 8005280:	4630      	mov	r0, r6
 8005282:	f7ff feb5 	bl	8004ff0 <PixelPatterns::SetPixelColour(unsigned int, unsigned int, unsigned int) [clone .constprop.0]>
 8005286:	e7e5      	b.n	8005254 <PixelPatterns::RainbowCycleUpdate(unsigned int)+0x18>
 8005288:	20000658 	andcs	r0, r0, r8, asr r6
 800528c:	20000680 	andcs	r0, r0, r0, lsl #13

08005290 <PixelPatterns::TheaterChaseUpdate(unsigned int)>:
 8005290:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005294:	4b13      	ldr	r3, [pc, #76]	; (80052e4 <PixelPatterns::TheaterChaseUpdate(unsigned int)+0x54>)
 8005296:	4e14      	ldr	r6, [pc, #80]	; (80052e8 <PixelPatterns::TheaterChaseUpdate(unsigned int)+0x58>)
 8005298:	f8df a050 	ldr.w	sl, [pc, #80]	; 80052ec <PixelPatterns::TheaterChaseUpdate(unsigned int)+0x5c>
 800529c:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 80052a0:	e9d3 7802 	ldrd	r7, r8, [r3, #8]
 80052a4:	f8d3 9014 	ldr.w	r9, [r3, #20]
 80052a8:	4605      	mov	r5, r0
 80052aa:	460c      	mov	r4, r1
 80052ac:	f04f 0b00 	mov.w	fp, #0
 80052b0:	6833      	ldr	r3, [r6, #0]
 80052b2:	fa1f f08b 	uxth.w	r0, fp
 80052b6:	4283      	cmp	r3, r0
 80052b8:	d805      	bhi.n	80052c6 <PixelPatterns::TheaterChaseUpdate(unsigned int)+0x36>
 80052ba:	4621      	mov	r1, r4
 80052bc:	4628      	mov	r0, r5
 80052be:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80052c2:	f7ff bf9d 	b.w	8005200 <PixelPatterns::Increment(unsigned int)>
 80052c6:	eb09 0300 	add.w	r3, r9, r0
 80052ca:	fb0a f303 	mul.w	r3, sl, r3
 80052ce:	f1b3 3f55 	cmp.w	r3, #1431655765	; 0x55555555
 80052d2:	bf94      	ite	ls
 80052d4:	4639      	movls	r1, r7
 80052d6:	4641      	movhi	r1, r8
 80052d8:	f7ff fe8a 	bl	8004ff0 <PixelPatterns::SetPixelColour(unsigned int, unsigned int, unsigned int) [clone .constprop.0]>
 80052dc:	f10b 0b01 	add.w	fp, fp, #1
 80052e0:	e7e6      	b.n	80052b0 <PixelPatterns::TheaterChaseUpdate(unsigned int)+0x20>
 80052e2:	bf00      	nop
 80052e4:	20000658 	andcs	r0, r0, r8, asr r6
 80052e8:	20000680 	andcs	r0, r0, r0, lsl #13
 80052ec:	aaaaaaab 	bge	6aafda0 <__heap_size+0x6aaeda0>

080052f0 <PixelPatterns::ColourWipeUpdate(unsigned int)>:
 80052f0:	b538      	push	{r3, r4, r5, lr}
 80052f2:	4b07      	ldr	r3, [pc, #28]	; (8005310 <PixelPatterns::ColourWipeUpdate(unsigned int)+0x20>)
 80052f4:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 80052f8:	4605      	mov	r5, r0
 80052fa:	460c      	mov	r4, r1
 80052fc:	6958      	ldr	r0, [r3, #20]
 80052fe:	6899      	ldr	r1, [r3, #8]
 8005300:	f7ff fe76 	bl	8004ff0 <PixelPatterns::SetPixelColour(unsigned int, unsigned int, unsigned int) [clone .constprop.0]>
 8005304:	4621      	mov	r1, r4
 8005306:	4628      	mov	r0, r5
 8005308:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800530c:	f7ff bf78 	b.w	8005200 <PixelPatterns::Increment(unsigned int)>
 8005310:	20000658 	andcs	r0, r0, r8, asr r6

08005314 <PixelPatterns::ScannerUpdate(unsigned int)>:
 8005314:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005318:	4a2b      	ldr	r2, [pc, #172]	; (80053c8 <PixelPatterns::ScannerUpdate(unsigned int)+0xb4>)
 800531a:	f8df a0b0 	ldr.w	sl, [pc, #176]	; 80053cc <PixelPatterns::ScannerUpdate(unsigned int)+0xb8>
 800531e:	f8df 80b0 	ldr.w	r8, [pc, #176]	; 80053d0 <PixelPatterns::ScannerUpdate(unsigned int)+0xbc>
 8005322:	ed2d 8b02 	vpush	{d8}
 8005326:	eb02 1241 	add.w	r2, r2, r1, lsl #5
 800532a:	e9d2 7604 	ldrd	r7, r6, [r2, #16]
 800532e:	b083      	sub	sp, #12
 8005330:	00b3      	lsls	r3, r6, #2
 8005332:	ee08 0a10 	vmov	s16, r0
 8005336:	f8d2 b008 	ldr.w	fp, [r2, #8]
 800533a:	9300      	str	r3, [sp, #0]
 800533c:	460d      	mov	r5, r1
 800533e:	f04f 0900 	mov.w	r9, #0
 8005342:	1bbf      	subs	r7, r7, r6
 8005344:	f8da 1000 	ldr.w	r1, [sl]
 8005348:	fa1f f489 	uxth.w	r4, r9
 800534c:	42a1      	cmp	r1, r4
 800534e:	d809      	bhi.n	8005364 <PixelPatterns::ScannerUpdate(unsigned int)+0x50>
 8005350:	ee18 0a10 	vmov	r0, s16
 8005354:	4629      	mov	r1, r5
 8005356:	b003      	add	sp, #12
 8005358:	ecbd 8b02 	vpop	{d8}
 800535c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005360:	f7ff bf4e 	b.w	8005200 <PixelPatterns::Increment(unsigned int)>
 8005364:	42a6      	cmp	r6, r4
 8005366:	d10b      	bne.n	8005380 <PixelPatterns::ScannerUpdate(unsigned int)+0x6c>
 8005368:	4659      	mov	r1, fp
 800536a:	4630      	mov	r0, r6
 800536c:	f7ff fe40 	bl	8004ff0 <PixelPatterns::SetPixelColour(unsigned int, unsigned int, unsigned int) [clone .constprop.0]>
 8005370:	f8d8 1000 	ldr.w	r1, [r8]
 8005374:	9b00      	ldr	r3, [sp, #0]
 8005376:	f841 b003 	str.w	fp, [r1, r3]
 800537a:	f109 0901 	add.w	r9, r9, #1
 800537e:	e7e1      	b.n	8005344 <PixelPatterns::ScannerUpdate(unsigned int)+0x30>
 8005380:	42a7      	cmp	r7, r4
 8005382:	d108      	bne.n	8005396 <PixelPatterns::ScannerUpdate(unsigned int)+0x82>
 8005384:	4659      	mov	r1, fp
 8005386:	4638      	mov	r0, r7
 8005388:	f7ff fe32 	bl	8004ff0 <PixelPatterns::SetPixelColour(unsigned int, unsigned int, unsigned int) [clone .constprop.0]>
 800538c:	f8d8 1000 	ldr.w	r1, [r8]
 8005390:	f841 b024 	str.w	fp, [r1, r4, lsl #2]
 8005394:	e7f1      	b.n	800537a <PixelPatterns::ScannerUpdate(unsigned int)+0x66>
 8005396:	f8d8 1000 	ldr.w	r1, [r8]
 800539a:	f851 0024 	ldr.w	r0, [r1, r4, lsl #2]
 800539e:	f3c0 2146 	ubfx	r1, r0, #9, #7
 80053a2:	f3c0 4c46 	ubfx	ip, r0, #17, #7
 80053a6:	0209      	lsls	r1, r1, #8
 80053a8:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80053ac:	f3c0 0046 	ubfx	r0, r0, #1, #7
 80053b0:	4301      	orrs	r1, r0
 80053b2:	4620      	mov	r0, r4
 80053b4:	9101      	str	r1, [sp, #4]
 80053b6:	f7ff fe1b 	bl	8004ff0 <PixelPatterns::SetPixelColour(unsigned int, unsigned int, unsigned int) [clone .constprop.0]>
 80053ba:	f8d8 0000 	ldr.w	r0, [r8]
 80053be:	9901      	ldr	r1, [sp, #4]
 80053c0:	f840 1024 	str.w	r1, [r0, r4, lsl #2]
 80053c4:	e7d9      	b.n	800537a <PixelPatterns::ScannerUpdate(unsigned int)+0x66>
 80053c6:	bf00      	nop
 80053c8:	20000658 	andcs	r0, r0, r8, asr r6
 80053cc:	20000680 	andcs	r0, r0, r0, lsl #13
 80053d0:	2000067c 	andcs	r0, r0, ip, ror r6

080053d4 <PixelPatterns::FadeUpdate(unsigned int)>:
 80053d4:	4a21      	ldr	r2, [pc, #132]	; (800545c <PixelPatterns::FadeUpdate(unsigned int)+0x88>)
 80053d6:	eb02 1241 	add.w	r2, r2, r1, lsl #5
 80053da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80053de:	460c      	mov	r4, r1
 80053e0:	e9d2 1302 	ldrd	r1, r3, [r2, #8]
 80053e4:	4605      	mov	r5, r0
 80053e6:	e9d2 0704 	ldrd	r0, r7, [r2, #16]
 80053ea:	f3c3 2207 	ubfx	r2, r3, #8, #8
 80053ee:	1bc6      	subs	r6, r0, r7
 80053f0:	f3c1 2c07 	ubfx	ip, r1, #8, #8
 80053f4:	437a      	muls	r2, r7
 80053f6:	fb06 220c 	mla	r2, r6, ip, r2
 80053fa:	fbb2 f2f0 	udiv	r2, r2, r0
 80053fe:	0212      	lsls	r2, r2, #8
 8005400:	fa1f fc82 	uxth.w	ip, r2
 8005404:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8005408:	f3c1 4e07 	ubfx	lr, r1, #16, #8
 800540c:	437a      	muls	r2, r7
 800540e:	fb06 220e 	mla	r2, r6, lr, r2
 8005412:	b2db      	uxtb	r3, r3
 8005414:	fbb2 f2f0 	udiv	r2, r2, r0
 8005418:	0412      	lsls	r2, r2, #16
 800541a:	437b      	muls	r3, r7
 800541c:	f402 027f 	and.w	r2, r2, #16711680	; 0xff0000
 8005420:	b2c9      	uxtb	r1, r1
 8005422:	fb06 3301 	mla	r3, r6, r1, r3
 8005426:	ea4c 0202 	orr.w	r2, ip, r2
 800542a:	fbb3 f3f0 	udiv	r3, r3, r0
 800542e:	f8df 8030 	ldr.w	r8, [pc, #48]	; 8005460 <PixelPatterns::FadeUpdate(unsigned int)+0x8c>
 8005432:	b2db      	uxtb	r3, r3
 8005434:	ea42 0603 	orr.w	r6, r2, r3
 8005438:	2700      	movs	r7, #0
 800543a:	f8d8 3000 	ldr.w	r3, [r8]
 800543e:	429f      	cmp	r7, r3
 8005440:	d305      	bcc.n	800544e <PixelPatterns::FadeUpdate(unsigned int)+0x7a>
 8005442:	4621      	mov	r1, r4
 8005444:	4628      	mov	r0, r5
 8005446:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800544a:	f7ff bed9 	b.w	8005200 <PixelPatterns::Increment(unsigned int)>
 800544e:	4638      	mov	r0, r7
 8005450:	4631      	mov	r1, r6
 8005452:	f7ff fdcd 	bl	8004ff0 <PixelPatterns::SetPixelColour(unsigned int, unsigned int, unsigned int) [clone .constprop.0]>
 8005456:	3701      	adds	r7, #1
 8005458:	e7ef      	b.n	800543a <PixelPatterns::FadeUpdate(unsigned int)+0x66>
 800545a:	bf00      	nop
 800545c:	20000658 	andcs	r0, r0, r8, asr r6
 8005460:	20000680 	andcs	r0, r0, r0, lsl #13

08005464 <PixelPatterns::PortUpdate(unsigned int, unsigned int)>:
 8005464:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005466:	4b12      	ldr	r3, [pc, #72]	; (80054b0 <PixelPatterns::PortUpdate(unsigned int, unsigned int)+0x4c>)
 8005468:	014e      	lsls	r6, r1, #5
 800546a:	eb03 1541 	add.w	r5, r3, r1, lsl #5
 800546e:	599c      	ldr	r4, [r3, r6]
 8005470:	686f      	ldr	r7, [r5, #4]
 8005472:	1b14      	subs	r4, r2, r4
 8005474:	42bc      	cmp	r4, r7
 8005476:	d319      	bcc.n	80054ac <PixelPatterns::PortUpdate(unsigned int, unsigned int)+0x48>
 8005478:	519a      	str	r2, [r3, r6]
 800547a:	69eb      	ldr	r3, [r5, #28]
 800547c:	3b01      	subs	r3, #1
 800547e:	2b04      	cmp	r3, #4
 8005480:	d814      	bhi.n	80054ac <PixelPatterns::PortUpdate(unsigned int, unsigned int)+0x48>
 8005482:	e8df f003 	tbb	[pc, r3]
 8005486:	0d0a0703 	stceq	7, cr0, [sl, #-12]
 800548a:	f7ff0010 			; <UNDEFINED> instruction: 0xf7ff0010
 800548e:	fed6 2001 	cdp2	0, 13, cr2, cr6, cr1, {0}
 8005492:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005494:	f7ff fefc 	bl	8005290 <PixelPatterns::TheaterChaseUpdate(unsigned int)>
 8005498:	e7fa      	b.n	8005490 <PixelPatterns::PortUpdate(unsigned int, unsigned int)+0x2c>
 800549a:	f7ff ff29 	bl	80052f0 <PixelPatterns::ColourWipeUpdate(unsigned int)>
 800549e:	e7f7      	b.n	8005490 <PixelPatterns::PortUpdate(unsigned int, unsigned int)+0x2c>
 80054a0:	f7ff ff38 	bl	8005314 <PixelPatterns::ScannerUpdate(unsigned int)>
 80054a4:	e7f4      	b.n	8005490 <PixelPatterns::PortUpdate(unsigned int, unsigned int)+0x2c>
 80054a6:	f7ff ff95 	bl	80053d4 <PixelPatterns::FadeUpdate(unsigned int)>
 80054aa:	e7f1      	b.n	8005490 <PixelPatterns::PortUpdate(unsigned int, unsigned int)+0x2c>
 80054ac:	2000      	movs	r0, #0
 80054ae:	e7f0      	b.n	8005492 <PixelPatterns::PortUpdate(unsigned int, unsigned int)+0x2e>
 80054b0:	20000658 	andcs	r0, r0, r8, asr r6

080054b4 <PixelPatterns::Run()>:
 80054b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80054b8:	4606      	mov	r6, r0
 80054ba:	f003 fdbb 	bl	8009034 <gd32_spi_dma_tx_is_active()>
 80054be:	4604      	mov	r4, r0
 80054c0:	b9c0      	cbnz	r0, 80054f4 <PixelPatterns::Run()+0x40>
 80054c2:	4b0d      	ldr	r3, [pc, #52]	; (80054f8 <PixelPatterns::Run()+0x44>)
 80054c4:	4f0d      	ldr	r7, [pc, #52]	; (80054fc <PixelPatterns::Run()+0x48>)
 80054c6:	f8d3 8000 	ldr.w	r8, [r3]
 80054ca:	4605      	mov	r5, r0
 80054cc:	683b      	ldr	r3, [r7, #0]
 80054ce:	b2e9      	uxtb	r1, r5
 80054d0:	428b      	cmp	r3, r1
 80054d2:	f105 0501 	add.w	r5, r5, #1
 80054d6:	d806      	bhi.n	80054e6 <PixelPatterns::Run()+0x32>
 80054d8:	b164      	cbz	r4, 80054f4 <PixelPatterns::Run()+0x40>
 80054da:	4b09      	ldr	r3, [pc, #36]	; (8005500 <PixelPatterns::Run()+0x4c>)
 80054dc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80054e0:	6818      	ldr	r0, [r3, #0]
 80054e2:	f000 bf97 	b.w	8006414 <WS28xx::Update()>
 80054e6:	4642      	mov	r2, r8
 80054e8:	4630      	mov	r0, r6
 80054ea:	f7ff ffbb 	bl	8005464 <PixelPatterns::PortUpdate(unsigned int, unsigned int)>
 80054ee:	4304      	orrs	r4, r0
 80054f0:	b2e4      	uxtb	r4, r4
 80054f2:	e7eb      	b.n	80054cc <PixelPatterns::Run()+0x18>
 80054f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80054f8:	20001814 	andcs	r1, r0, r4, lsl r8
 80054fc:	20000678 	andcs	r0, r0, r8, ror r6
 8005500:	20000684 	andcs	r0, r0, r4, lsl #13

08005504 <PixelType::GetType(pixel::Type)>:
 8005504:	280d      	cmp	r0, #13
 8005506:	bfda      	itte	le
 8005508:	4b02      	ldrle	r3, [pc, #8]	; (8005514 <PixelType::GetType(pixel::Type)+0x10>)
 800550a:	eb03 00c0 	addle.w	r0, r3, r0, lsl #3
 800550e:	4802      	ldrgt	r0, [pc, #8]	; (8005518 <PixelType::GetType(pixel::Type)+0x14>)
 8005510:	4770      	bx	lr
 8005512:	bf00      	nop
 8005514:	0800a644 	stmdaeq	r0, {r2, r6, r9, sl, sp, pc}
 8005518:	0800a5d0 	stmdaeq	r0, {r4, r6, r7, r8, sl, sp, pc}

0800551c <PixelType::GetMap(pixel::Map)>:
 800551c:	2805      	cmp	r0, #5
 800551e:	bfda      	itte	le
 8005520:	4b02      	ldrle	r3, [pc, #8]	; (800552c <PixelType::GetMap(pixel::Map)+0x10>)
 8005522:	eb03 0080 	addle.w	r0, r3, r0, lsl #2
 8005526:	4802      	ldrgt	r0, [pc, #8]	; (8005530 <PixelType::GetMap(pixel::Map)+0x14>)
 8005528:	4770      	bx	lr
 800552a:	bf00      	nop
 800552c:	0800a62c 	stmdaeq	r0, {r2, r3, r5, r9, sl, sp, pc}
 8005530:	08009803 	stmdaeq	r0, {r0, r1, fp, ip, pc}

08005534 <PixelType::ConvertTxH(unsigned char)>:
 8005534:	28f0      	cmp	r0, #240	; 0xf0
 8005536:	d017      	beq.n	8005568 <PixelType::ConvertTxH(unsigned char)+0x34>
 8005538:	d80c      	bhi.n	8005554 <PixelType::ConvertTxH(unsigned char)+0x20>
 800553a:	28c0      	cmp	r0, #192	; 0xc0
 800553c:	d017      	beq.n	800556e <PixelType::ConvertTxH(unsigned char)+0x3a>
 800553e:	28e0      	cmp	r0, #224	; 0xe0
 8005540:	d018      	beq.n	8005574 <PixelType::ConvertTxH(unsigned char)+0x40>
 8005542:	ed9f 0a11 	vldr	s0, [pc, #68]	; 8005588 <PixelType::ConvertTxH(unsigned char)+0x54>
 8005546:	2880      	cmp	r0, #128	; 0x80
 8005548:	eef4 7a04 	vmov.f32	s15, #68	; 0x3e200000  0.1562500
 800554c:	bf08      	it	eq
 800554e:	eeb0 0a67 	vmoveq.f32	s0, s15
 8005552:	4770      	bx	lr
 8005554:	28fc      	cmp	r0, #252	; 0xfc
 8005556:	d010      	beq.n	800557a <PixelType::ConvertTxH(unsigned char)+0x46>
 8005558:	28fe      	cmp	r0, #254	; 0xfe
 800555a:	d011      	beq.n	8005580 <PixelType::ConvertTxH(unsigned char)+0x4c>
 800555c:	ed9f 0a0a 	vldr	s0, [pc, #40]	; 8005588 <PixelType::ConvertTxH(unsigned char)+0x54>
 8005560:	28f8      	cmp	r0, #248	; 0xf8
 8005562:	eef6 7a09 	vmov.f32	s15, #105	; 0x3f480000  0.7812500
 8005566:	e7f1      	b.n	800554c <PixelType::ConvertTxH(unsigned char)+0x18>
 8005568:	eeb6 0a04 	vmov.f32	s0, #100	; 0x3f200000  0.625
 800556c:	4770      	bx	lr
 800556e:	eeb5 0a04 	vmov.f32	s0, #84	; 0x3ea00000  0.3125000
 8005572:	4770      	bx	lr
 8005574:	eeb5 0a0e 	vmov.f32	s0, #94	; 0x3ef00000  0.4687500
 8005578:	4770      	bx	lr
 800557a:	eeb6 0a0e 	vmov.f32	s0, #110	; 0x3f700000  0.9375000
 800557e:	4770      	bx	lr
 8005580:	ed9f 0a02 	vldr	s0, [pc, #8]	; 800558c <PixelType::ConvertTxH(unsigned char)+0x58>
 8005584:	4770      	bx	lr
 8005586:	bf00      	nop
 8005588:	00000000 	andeq	r0, r0, r0
 800558c:	3f8c0000 	svccc	0x008c0000

08005590 <WS28xx::Print()>:
 8005590:	b513      	push	{r0, r1, r4, lr}
 8005592:	4604      	mov	r4, r0
 8005594:	481b      	ldr	r0, [pc, #108]	; (8005604 <WS28xx::Print()+0x74>)
 8005596:	f7fb ffe5 	bl	8001564 <printf>
 800559a:	6820      	ldr	r0, [r4, #0]
 800559c:	f7ff ffb2 	bl	8005504 <PixelType::GetType(pixel::Type)>
 80055a0:	6822      	ldr	r2, [r4, #0]
 80055a2:	4601      	mov	r1, r0
 80055a4:	4818      	ldr	r0, [pc, #96]	; (8005608 <WS28xx::Print()+0x78>)
 80055a6:	f7fb ffdd 	bl	8001564 <printf>
 80055aa:	6861      	ldr	r1, [r4, #4]
 80055ac:	4817      	ldr	r0, [pc, #92]	; (800560c <WS28xx::Print()+0x7c>)
 80055ae:	f7fb ffd9 	bl	8001564 <printf>
 80055b2:	7ca3      	ldrb	r3, [r4, #18]
 80055b4:	b31b      	cbz	r3, 80055fe <WS28xx::Print()+0x6e>
 80055b6:	68a0      	ldr	r0, [r4, #8]
 80055b8:	f7ff ffb0 	bl	800551c <PixelType::GetMap(pixel::Map)>
 80055bc:	68a2      	ldr	r2, [r4, #8]
 80055be:	4601      	mov	r1, r0
 80055c0:	4813      	ldr	r0, [pc, #76]	; (8005610 <WS28xx::Print()+0x80>)
 80055c2:	f7fb ffcf 	bl	8001564 <printf>
 80055c6:	7c20      	ldrb	r0, [r4, #16]
 80055c8:	f7ff ffb4 	bl	8005534 <PixelType::ConvertTxH(unsigned char)>
 80055cc:	ee10 0a10 	vmov	r0, s0
 80055d0:	f7fa ff68 	bl	80004a4 <__aeabi_f2d>
 80055d4:	460b      	mov	r3, r1
 80055d6:	7c21      	ldrb	r1, [r4, #16]
 80055d8:	9100      	str	r1, [sp, #0]
 80055da:	4602      	mov	r2, r0
 80055dc:	480d      	ldr	r0, [pc, #52]	; (8005614 <WS28xx::Print()+0x84>)
 80055de:	f7fb ffc1 	bl	8001564 <printf>
 80055e2:	7c60      	ldrb	r0, [r4, #17]
 80055e4:	f7ff ffa6 	bl	8005534 <PixelType::ConvertTxH(unsigned char)>
 80055e8:	ee10 0a10 	vmov	r0, s0
 80055ec:	f7fa ff5a 	bl	80004a4 <__aeabi_f2d>
 80055f0:	460b      	mov	r3, r1
 80055f2:	7c61      	ldrb	r1, [r4, #17]
 80055f4:	9100      	str	r1, [sp, #0]
 80055f6:	4602      	mov	r2, r0
 80055f8:	4807      	ldr	r0, [pc, #28]	; (8005618 <WS28xx::Print()+0x88>)
 80055fa:	f7fb ffb3 	bl	8001564 <printf>
 80055fe:	b002      	add	sp, #8
 8005600:	bd10      	pop	{r4, pc}
 8005602:	bf00      	nop
 8005604:	0800a6b4 	stmdaeq	r0, {r2, r4, r5, r7, r9, sl, sp, pc}
 8005608:	0800a6c6 	stmdaeq	r0, {r1, r2, r6, r7, r9, sl, sp, pc}
 800560c:	0800a6da 	stmdaeq	r0, {r1, r3, r4, r6, r7, r9, sl, sp, pc}
 8005610:	0800a6e9 	stmdaeq	r0, {r0, r3, r5, r6, r7, r9, sl, sp, pc}
 8005614:	0800a6fd 	stmdaeq	r0, {r0, r2, r3, r4, r5, r6, r7, r9, sl, sp, pc}
 8005618:	0800a715 	stmdaeq	r0, {r0, r2, r4, r8, r9, sl, sp, pc}

0800561c <WS28xx::SetPixel(unsigned int, unsigned char, unsigned char, unsigned char)>:
 800561c:	b530      	push	{r4, r5, lr}
 800561e:	7c84      	ldrb	r4, [r0, #18]
 8005620:	f89d c00c 	ldrb.w	ip, [sp, #12]
 8005624:	b994      	cbnz	r4, 800564c <WS28xx::SetPixel(unsigned int, unsigned char, unsigned char, unsigned char)+0x30>
 8005626:	6804      	ldr	r4, [r0, #0]
 8005628:	f1a4 0e0b 	sub.w	lr, r4, #11
 800562c:	f1be 0f01 	cmp.w	lr, #1
 8005630:	d93d      	bls.n	80056ae <WS28xx::SetPixel(unsigned int, unsigned char, unsigned char, unsigned char)+0x92>
 8005632:	b9d4      	cbnz	r4, 800566a <WS28xx::SetPixel(unsigned int, unsigned char, unsigned char, unsigned char)+0x4e>
 8005634:	6944      	ldr	r4, [r0, #20]
 8005636:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 800563a:	5462      	strb	r2, [r4, r1]
 800563c:	6942      	ldr	r2, [r0, #20]
 800563e:	440a      	add	r2, r1
 8005640:	7053      	strb	r3, [r2, #1]
 8005642:	6943      	ldr	r3, [r0, #20]
 8005644:	440b      	add	r3, r1
 8005646:	f883 c002 	strb.w	ip, [r3, #2]
 800564a:	bd30      	pop	{r4, r5, pc}
 800564c:	6884      	ldr	r4, [r0, #8]
 800564e:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8005652:	00c9      	lsls	r1, r1, #3
 8005654:	2c05      	cmp	r4, #5
 8005656:	f200 814a 	bhi.w	80058ee <WS28xx::SetPixel(unsigned int, unsigned char, unsigned char, unsigned char)+0x2d2>
 800565a:	e8df f014 	tbh	[pc, r4, lsl #1]
 800565e:	03460148 	movteq	r0, #24904	; 0x6148
 8005662:	04ac03fe 	strteq	r0, [ip], #1022	; 0x3fe
 8005666:	023f003c 	eorseq	r0, pc, #60	; 0x3c
 800566a:	ea6f 0e9c 	mvn.w	lr, ip, lsr #2
 800566e:	f082 04c0 	eor.w	r4, r2, #192	; 0xc0
 8005672:	f00e 0e30 	and.w	lr, lr, #48	; 0x30
 8005676:	ea4e 1e94 	orr.w	lr, lr, r4, lsr #6
 800567a:	ea6f 1413 	mvn.w	r4, r3, lsr #4
 800567e:	f004 040c 	and.w	r4, r4, #12
 8005682:	3101      	adds	r1, #1
 8005684:	ea4e 0e04 	orr.w	lr, lr, r4
 8005688:	6944      	ldr	r4, [r0, #20]
 800568a:	f06e 0e3f 	orn	lr, lr, #63	; 0x3f
 800568e:	f804 e021 	strb.w	lr, [r4, r1, lsl #2]
 8005692:	6944      	ldr	r4, [r0, #20]
 8005694:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 8005698:	f884 c001 	strb.w	ip, [r4, #1]
 800569c:	6944      	ldr	r4, [r0, #20]
 800569e:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 80056a2:	70a3      	strb	r3, [r4, #2]
 80056a4:	6943      	ldr	r3, [r0, #20]
 80056a6:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 80056aa:	70da      	strb	r2, [r3, #3]
 80056ac:	bd30      	pop	{r4, r5, pc}
 80056ae:	6944      	ldr	r4, [r0, #20]
 80056b0:	f890 e013 	ldrb.w	lr, [r0, #19]
 80056b4:	3101      	adds	r1, #1
 80056b6:	f804 e021 	strb.w	lr, [r4, r1, lsl #2]
 80056ba:	6944      	ldr	r4, [r0, #20]
 80056bc:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 80056c0:	7062      	strb	r2, [r4, #1]
 80056c2:	6942      	ldr	r2, [r0, #20]
 80056c4:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 80056c8:	7093      	strb	r3, [r2, #2]
 80056ca:	6943      	ldr	r3, [r0, #20]
 80056cc:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 80056d0:	f883 c003 	strb.w	ip, [r3, #3]
 80056d4:	bd30      	pop	{r4, r5, pc}
 80056d6:	f01c 0f80 	tst.w	ip, #128	; 0x80
 80056da:	6945      	ldr	r5, [r0, #20]
 80056dc:	bf0c      	ite	eq
 80056de:	f890 e010 	ldrbeq.w	lr, [r0, #16]
 80056e2:	f890 e011 	ldrbne.w	lr, [r0, #17]
 80056e6:	1c4c      	adds	r4, r1, #1
 80056e8:	f01c 0f40 	tst.w	ip, #64	; 0x40
 80056ec:	f805 e004 	strb.w	lr, [r5, r4]
 80056f0:	f101 0402 	add.w	r4, r1, #2
 80056f4:	6945      	ldr	r5, [r0, #20]
 80056f6:	bf0c      	ite	eq
 80056f8:	f890 e010 	ldrbeq.w	lr, [r0, #16]
 80056fc:	f890 e011 	ldrbne.w	lr, [r0, #17]
 8005700:	f805 e004 	strb.w	lr, [r5, r4]
 8005704:	f01c 0f20 	tst.w	ip, #32
 8005708:	6945      	ldr	r5, [r0, #20]
 800570a:	bf0c      	ite	eq
 800570c:	f890 e010 	ldrbeq.w	lr, [r0, #16]
 8005710:	f890 e011 	ldrbne.w	lr, [r0, #17]
 8005714:	1ccc      	adds	r4, r1, #3
 8005716:	f01c 0f10 	tst.w	ip, #16
 800571a:	f805 e004 	strb.w	lr, [r5, r4]
 800571e:	f101 0404 	add.w	r4, r1, #4
 8005722:	6945      	ldr	r5, [r0, #20]
 8005724:	bf0c      	ite	eq
 8005726:	f890 e010 	ldrbeq.w	lr, [r0, #16]
 800572a:	f890 e011 	ldrbne.w	lr, [r0, #17]
 800572e:	f805 e004 	strb.w	lr, [r5, r4]
 8005732:	f01c 0f08 	tst.w	ip, #8
 8005736:	6945      	ldr	r5, [r0, #20]
 8005738:	bf0c      	ite	eq
 800573a:	f890 e010 	ldrbeq.w	lr, [r0, #16]
 800573e:	f890 e011 	ldrbne.w	lr, [r0, #17]
 8005742:	1d4c      	adds	r4, r1, #5
 8005744:	f01c 0f04 	tst.w	ip, #4
 8005748:	f805 e004 	strb.w	lr, [r5, r4]
 800574c:	f101 0406 	add.w	r4, r1, #6
 8005750:	6945      	ldr	r5, [r0, #20]
 8005752:	bf0c      	ite	eq
 8005754:	f890 e010 	ldrbeq.w	lr, [r0, #16]
 8005758:	f890 e011 	ldrbne.w	lr, [r0, #17]
 800575c:	f805 e004 	strb.w	lr, [r5, r4]
 8005760:	f01c 0f02 	tst.w	ip, #2
 8005764:	6945      	ldr	r5, [r0, #20]
 8005766:	bf0c      	ite	eq
 8005768:	f890 e010 	ldrbeq.w	lr, [r0, #16]
 800576c:	f890 e011 	ldrbne.w	lr, [r0, #17]
 8005770:	1dcc      	adds	r4, r1, #7
 8005772:	f01c 0f01 	tst.w	ip, #1
 8005776:	f805 e004 	strb.w	lr, [r5, r4]
 800577a:	f101 0408 	add.w	r4, r1, #8
 800577e:	6945      	ldr	r5, [r0, #20]
 8005780:	bf14      	ite	ne
 8005782:	f890 c011 	ldrbne.w	ip, [r0, #17]
 8005786:	f890 c010 	ldrbeq.w	ip, [r0, #16]
 800578a:	f805 c004 	strb.w	ip, [r5, r4]
 800578e:	0615      	lsls	r5, r2, #24
 8005790:	bf58      	it	pl
 8005792:	f890 c010 	ldrbpl.w	ip, [r0, #16]
 8005796:	6945      	ldr	r5, [r0, #20]
 8005798:	bf48      	it	mi
 800579a:	f890 c011 	ldrbmi.w	ip, [r0, #17]
 800579e:	f101 0409 	add.w	r4, r1, #9
 80057a2:	f805 c004 	strb.w	ip, [r5, r4]
 80057a6:	0655      	lsls	r5, r2, #25
 80057a8:	f101 040a 	add.w	r4, r1, #10
 80057ac:	6945      	ldr	r5, [r0, #20]
 80057ae:	bf54      	ite	pl
 80057b0:	f890 c010 	ldrbpl.w	ip, [r0, #16]
 80057b4:	f890 c011 	ldrbmi.w	ip, [r0, #17]
 80057b8:	f805 c004 	strb.w	ip, [r5, r4]
 80057bc:	0695      	lsls	r5, r2, #26
 80057be:	f101 040b 	add.w	r4, r1, #11
 80057c2:	6945      	ldr	r5, [r0, #20]
 80057c4:	bf54      	ite	pl
 80057c6:	f890 c010 	ldrbpl.w	ip, [r0, #16]
 80057ca:	f890 c011 	ldrbmi.w	ip, [r0, #17]
 80057ce:	f805 c004 	strb.w	ip, [r5, r4]
 80057d2:	06d5      	lsls	r5, r2, #27
 80057d4:	f101 040c 	add.w	r4, r1, #12
 80057d8:	6945      	ldr	r5, [r0, #20]
 80057da:	bf54      	ite	pl
 80057dc:	f890 c010 	ldrbpl.w	ip, [r0, #16]
 80057e0:	f890 c011 	ldrbmi.w	ip, [r0, #17]
 80057e4:	f805 c004 	strb.w	ip, [r5, r4]
 80057e8:	0715      	lsls	r5, r2, #28
 80057ea:	f101 040d 	add.w	r4, r1, #13
 80057ee:	6945      	ldr	r5, [r0, #20]
 80057f0:	bf54      	ite	pl
 80057f2:	f890 c010 	ldrbpl.w	ip, [r0, #16]
 80057f6:	f890 c011 	ldrbmi.w	ip, [r0, #17]
 80057fa:	f805 c004 	strb.w	ip, [r5, r4]
 80057fe:	0755      	lsls	r5, r2, #29
 8005800:	f101 040e 	add.w	r4, r1, #14
 8005804:	6945      	ldr	r5, [r0, #20]
 8005806:	bf54      	ite	pl
 8005808:	f890 c010 	ldrbpl.w	ip, [r0, #16]
 800580c:	f890 c011 	ldrbmi.w	ip, [r0, #17]
 8005810:	f805 c004 	strb.w	ip, [r5, r4]
 8005814:	0795      	lsls	r5, r2, #30
 8005816:	f101 040f 	add.w	r4, r1, #15
 800581a:	6945      	ldr	r5, [r0, #20]
 800581c:	bf54      	ite	pl
 800581e:	f890 c010 	ldrbpl.w	ip, [r0, #16]
 8005822:	f890 c011 	ldrbmi.w	ip, [r0, #17]
 8005826:	f805 c004 	strb.w	ip, [r5, r4]
 800582a:	07d5      	lsls	r5, r2, #31
 800582c:	bf4c      	ite	mi
 800582e:	f890 c011 	ldrbmi.w	ip, [r0, #17]
 8005832:	f890 c010 	ldrbpl.w	ip, [r0, #16]
 8005836:	6942      	ldr	r2, [r0, #20]
 8005838:	f101 0410 	add.w	r4, r1, #16
 800583c:	f802 c004 	strb.w	ip, [r2, r4]
 8005840:	061c      	lsls	r4, r3, #24
 8005842:	f101 0211 	add.w	r2, r1, #17
 8005846:	6944      	ldr	r4, [r0, #20]
 8005848:	bf54      	ite	pl
 800584a:	f890 c010 	ldrbpl.w	ip, [r0, #16]
 800584e:	f890 c011 	ldrbmi.w	ip, [r0, #17]
 8005852:	f804 c002 	strb.w	ip, [r4, r2]
 8005856:	065d      	lsls	r5, r3, #25
 8005858:	6944      	ldr	r4, [r0, #20]
 800585a:	bf54      	ite	pl
 800585c:	f890 c010 	ldrbpl.w	ip, [r0, #16]
 8005860:	f890 c011 	ldrbmi.w	ip, [r0, #17]
 8005864:	f101 0212 	add.w	r2, r1, #18
 8005868:	f804 c002 	strb.w	ip, [r4, r2]
 800586c:	069c      	lsls	r4, r3, #26
 800586e:	f101 0213 	add.w	r2, r1, #19
 8005872:	6944      	ldr	r4, [r0, #20]
 8005874:	bf54      	ite	pl
 8005876:	f890 c010 	ldrbpl.w	ip, [r0, #16]
 800587a:	f890 c011 	ldrbmi.w	ip, [r0, #17]
 800587e:	f804 c002 	strb.w	ip, [r4, r2]
 8005882:	06dd      	lsls	r5, r3, #27
 8005884:	6944      	ldr	r4, [r0, #20]
 8005886:	bf54      	ite	pl
 8005888:	f890 c010 	ldrbpl.w	ip, [r0, #16]
 800588c:	f890 c011 	ldrbmi.w	ip, [r0, #17]
 8005890:	f101 0214 	add.w	r2, r1, #20
 8005894:	f804 c002 	strb.w	ip, [r4, r2]
 8005898:	071c      	lsls	r4, r3, #28
 800589a:	f101 0215 	add.w	r2, r1, #21
 800589e:	6944      	ldr	r4, [r0, #20]
 80058a0:	bf54      	ite	pl
 80058a2:	f890 c010 	ldrbpl.w	ip, [r0, #16]
 80058a6:	f890 c011 	ldrbmi.w	ip, [r0, #17]
 80058aa:	f804 c002 	strb.w	ip, [r4, r2]
 80058ae:	075d      	lsls	r5, r3, #29
 80058b0:	6944      	ldr	r4, [r0, #20]
 80058b2:	bf54      	ite	pl
 80058b4:	f890 c010 	ldrbpl.w	ip, [r0, #16]
 80058b8:	f890 c011 	ldrbmi.w	ip, [r0, #17]
 80058bc:	f101 0216 	add.w	r2, r1, #22
 80058c0:	f804 c002 	strb.w	ip, [r4, r2]
 80058c4:	079c      	lsls	r4, r3, #30
 80058c6:	f101 0217 	add.w	r2, r1, #23
 80058ca:	6944      	ldr	r4, [r0, #20]
 80058cc:	bf54      	ite	pl
 80058ce:	f890 c010 	ldrbpl.w	ip, [r0, #16]
 80058d2:	f890 c011 	ldrbmi.w	ip, [r0, #17]
 80058d6:	f804 c002 	strb.w	ip, [r4, r2]
 80058da:	f013 0f01 	tst.w	r3, #1
 80058de:	6943      	ldr	r3, [r0, #20]
 80058e0:	f101 0118 	add.w	r1, r1, #24
 80058e4:	f000 80f7 	beq.w	8005ad6 <WS28xx::SetPixel(unsigned int, unsigned char, unsigned char, unsigned char)+0x4ba>
 80058e8:	7c42      	ldrb	r2, [r0, #17]
 80058ea:	545a      	strb	r2, [r3, r1]
 80058ec:	bd30      	pop	{r4, r5, pc}
 80058ee:	0615      	lsls	r5, r2, #24
 80058f0:	f101 0401 	add.w	r4, r1, #1
 80058f4:	6945      	ldr	r5, [r0, #20]
 80058f6:	bf54      	ite	pl
 80058f8:	f890 e010 	ldrbpl.w	lr, [r0, #16]
 80058fc:	f890 e011 	ldrbmi.w	lr, [r0, #17]
 8005900:	f805 e004 	strb.w	lr, [r5, r4]
 8005904:	0655      	lsls	r5, r2, #25
 8005906:	f101 0402 	add.w	r4, r1, #2
 800590a:	6945      	ldr	r5, [r0, #20]
 800590c:	bf54      	ite	pl
 800590e:	f890 e010 	ldrbpl.w	lr, [r0, #16]
 8005912:	f890 e011 	ldrbmi.w	lr, [r0, #17]
 8005916:	f805 e004 	strb.w	lr, [r5, r4]
 800591a:	0695      	lsls	r5, r2, #26
 800591c:	f101 0403 	add.w	r4, r1, #3
 8005920:	6945      	ldr	r5, [r0, #20]
 8005922:	bf54      	ite	pl
 8005924:	f890 e010 	ldrbpl.w	lr, [r0, #16]
 8005928:	f890 e011 	ldrbmi.w	lr, [r0, #17]
 800592c:	f805 e004 	strb.w	lr, [r5, r4]
 8005930:	06d5      	lsls	r5, r2, #27
 8005932:	f101 0404 	add.w	r4, r1, #4
 8005936:	6945      	ldr	r5, [r0, #20]
 8005938:	bf54      	ite	pl
 800593a:	f890 e010 	ldrbpl.w	lr, [r0, #16]
 800593e:	f890 e011 	ldrbmi.w	lr, [r0, #17]
 8005942:	f805 e004 	strb.w	lr, [r5, r4]
 8005946:	0715      	lsls	r5, r2, #28
 8005948:	f101 0405 	add.w	r4, r1, #5
 800594c:	6945      	ldr	r5, [r0, #20]
 800594e:	bf54      	ite	pl
 8005950:	f890 e010 	ldrbpl.w	lr, [r0, #16]
 8005954:	f890 e011 	ldrbmi.w	lr, [r0, #17]
 8005958:	f805 e004 	strb.w	lr, [r5, r4]
 800595c:	0755      	lsls	r5, r2, #29
 800595e:	f101 0406 	add.w	r4, r1, #6
 8005962:	6945      	ldr	r5, [r0, #20]
 8005964:	bf54      	ite	pl
 8005966:	f890 e010 	ldrbpl.w	lr, [r0, #16]
 800596a:	f890 e011 	ldrbmi.w	lr, [r0, #17]
 800596e:	f805 e004 	strb.w	lr, [r5, r4]
 8005972:	0795      	lsls	r5, r2, #30
 8005974:	f101 0407 	add.w	r4, r1, #7
 8005978:	6945      	ldr	r5, [r0, #20]
 800597a:	bf54      	ite	pl
 800597c:	f890 e010 	ldrbpl.w	lr, [r0, #16]
 8005980:	f890 e011 	ldrbmi.w	lr, [r0, #17]
 8005984:	f805 e004 	strb.w	lr, [r5, r4]
 8005988:	f012 0f01 	tst.w	r2, #1
 800598c:	f101 0408 	add.w	r4, r1, #8
 8005990:	6942      	ldr	r2, [r0, #20]
 8005992:	bf14      	ite	ne
 8005994:	f890 e011 	ldrbne.w	lr, [r0, #17]
 8005998:	f890 e010 	ldrbeq.w	lr, [r0, #16]
 800599c:	f802 e004 	strb.w	lr, [r2, r4]
 80059a0:	061d      	lsls	r5, r3, #24
 80059a2:	6944      	ldr	r4, [r0, #20]
 80059a4:	bf54      	ite	pl
 80059a6:	f890 e010 	ldrbpl.w	lr, [r0, #16]
 80059aa:	f890 e011 	ldrbmi.w	lr, [r0, #17]
 80059ae:	f101 0209 	add.w	r2, r1, #9
 80059b2:	065d      	lsls	r5, r3, #25
 80059b4:	f804 e002 	strb.w	lr, [r4, r2]
 80059b8:	f101 020a 	add.w	r2, r1, #10
 80059bc:	6944      	ldr	r4, [r0, #20]
 80059be:	bf54      	ite	pl
 80059c0:	f890 e010 	ldrbpl.w	lr, [r0, #16]
 80059c4:	f890 e011 	ldrbmi.w	lr, [r0, #17]
 80059c8:	f804 e002 	strb.w	lr, [r4, r2]
 80059cc:	069d      	lsls	r5, r3, #26
 80059ce:	6944      	ldr	r4, [r0, #20]
 80059d0:	bf54      	ite	pl
 80059d2:	f890 e010 	ldrbpl.w	lr, [r0, #16]
 80059d6:	f890 e011 	ldrbmi.w	lr, [r0, #17]
 80059da:	f101 020b 	add.w	r2, r1, #11
 80059de:	06dd      	lsls	r5, r3, #27
 80059e0:	f804 e002 	strb.w	lr, [r4, r2]
 80059e4:	f101 020c 	add.w	r2, r1, #12
 80059e8:	6944      	ldr	r4, [r0, #20]
 80059ea:	bf54      	ite	pl
 80059ec:	f890 e010 	ldrbpl.w	lr, [r0, #16]
 80059f0:	f890 e011 	ldrbmi.w	lr, [r0, #17]
 80059f4:	f804 e002 	strb.w	lr, [r4, r2]
 80059f8:	071d      	lsls	r5, r3, #28
 80059fa:	6944      	ldr	r4, [r0, #20]
 80059fc:	bf54      	ite	pl
 80059fe:	f890 e010 	ldrbpl.w	lr, [r0, #16]
 8005a02:	f890 e011 	ldrbmi.w	lr, [r0, #17]
 8005a06:	f101 020d 	add.w	r2, r1, #13
 8005a0a:	075d      	lsls	r5, r3, #29
 8005a0c:	f804 e002 	strb.w	lr, [r4, r2]
 8005a10:	f101 020e 	add.w	r2, r1, #14
 8005a14:	6944      	ldr	r4, [r0, #20]
 8005a16:	bf54      	ite	pl
 8005a18:	f890 e010 	ldrbpl.w	lr, [r0, #16]
 8005a1c:	f890 e011 	ldrbmi.w	lr, [r0, #17]
 8005a20:	f804 e002 	strb.w	lr, [r4, r2]
 8005a24:	079d      	lsls	r5, r3, #30
 8005a26:	6944      	ldr	r4, [r0, #20]
 8005a28:	bf54      	ite	pl
 8005a2a:	f890 e010 	ldrbpl.w	lr, [r0, #16]
 8005a2e:	f890 e011 	ldrbmi.w	lr, [r0, #17]
 8005a32:	f101 020f 	add.w	r2, r1, #15
 8005a36:	07db      	lsls	r3, r3, #31
 8005a38:	f804 e002 	strb.w	lr, [r4, r2]
 8005a3c:	bf4c      	ite	mi
 8005a3e:	7c44      	ldrbmi	r4, [r0, #17]
 8005a40:	7c04      	ldrbpl	r4, [r0, #16]
 8005a42:	6943      	ldr	r3, [r0, #20]
 8005a44:	f101 0210 	add.w	r2, r1, #16
 8005a48:	549c      	strb	r4, [r3, r2]
 8005a4a:	f01c 0f80 	tst.w	ip, #128	; 0x80
 8005a4e:	6942      	ldr	r2, [r0, #20]
 8005a50:	bf0c      	ite	eq
 8005a52:	7c04      	ldrbeq	r4, [r0, #16]
 8005a54:	7c44      	ldrbne	r4, [r0, #17]
 8005a56:	f101 0311 	add.w	r3, r1, #17
 8005a5a:	f01c 0f40 	tst.w	ip, #64	; 0x40
 8005a5e:	54d4      	strb	r4, [r2, r3]
 8005a60:	f101 0312 	add.w	r3, r1, #18
 8005a64:	6942      	ldr	r2, [r0, #20]
 8005a66:	bf0c      	ite	eq
 8005a68:	7c04      	ldrbeq	r4, [r0, #16]
 8005a6a:	7c44      	ldrbne	r4, [r0, #17]
 8005a6c:	54d4      	strb	r4, [r2, r3]
 8005a6e:	f01c 0f20 	tst.w	ip, #32
 8005a72:	6942      	ldr	r2, [r0, #20]
 8005a74:	bf0c      	ite	eq
 8005a76:	7c04      	ldrbeq	r4, [r0, #16]
 8005a78:	7c44      	ldrbne	r4, [r0, #17]
 8005a7a:	f101 0313 	add.w	r3, r1, #19
 8005a7e:	f01c 0f10 	tst.w	ip, #16
 8005a82:	54d4      	strb	r4, [r2, r3]
 8005a84:	f101 0314 	add.w	r3, r1, #20
 8005a88:	6942      	ldr	r2, [r0, #20]
 8005a8a:	bf0c      	ite	eq
 8005a8c:	7c04      	ldrbeq	r4, [r0, #16]
 8005a8e:	7c44      	ldrbne	r4, [r0, #17]
 8005a90:	54d4      	strb	r4, [r2, r3]
 8005a92:	f01c 0f08 	tst.w	ip, #8
 8005a96:	6942      	ldr	r2, [r0, #20]
 8005a98:	bf0c      	ite	eq
 8005a9a:	7c04      	ldrbeq	r4, [r0, #16]
 8005a9c:	7c44      	ldrbne	r4, [r0, #17]
 8005a9e:	f101 0315 	add.w	r3, r1, #21
 8005aa2:	f01c 0f04 	tst.w	ip, #4
 8005aa6:	54d4      	strb	r4, [r2, r3]
 8005aa8:	f101 0316 	add.w	r3, r1, #22
 8005aac:	6942      	ldr	r2, [r0, #20]
 8005aae:	bf0c      	ite	eq
 8005ab0:	7c04      	ldrbeq	r4, [r0, #16]
 8005ab2:	7c44      	ldrbne	r4, [r0, #17]
 8005ab4:	54d4      	strb	r4, [r2, r3]
 8005ab6:	f01c 0f02 	tst.w	ip, #2
 8005aba:	f101 0317 	add.w	r3, r1, #23
 8005abe:	6942      	ldr	r2, [r0, #20]
 8005ac0:	bf0c      	ite	eq
 8005ac2:	7c04      	ldrbeq	r4, [r0, #16]
 8005ac4:	7c44      	ldrbne	r4, [r0, #17]
 8005ac6:	54d4      	strb	r4, [r2, r3]
 8005ac8:	f01c 0f01 	tst.w	ip, #1
 8005acc:	6943      	ldr	r3, [r0, #20]
 8005ace:	f101 0118 	add.w	r1, r1, #24
 8005ad2:	f47f af09 	bne.w	80058e8 <WS28xx::SetPixel(unsigned int, unsigned char, unsigned char, unsigned char)+0x2cc>
 8005ad6:	7c02      	ldrb	r2, [r0, #16]
 8005ad8:	545a      	strb	r2, [r3, r1]
 8005ada:	e707      	b.n	80058ec <WS28xx::SetPixel(unsigned int, unsigned char, unsigned char, unsigned char)+0x2d0>
 8005adc:	f01c 0f80 	tst.w	ip, #128	; 0x80
 8005ae0:	6945      	ldr	r5, [r0, #20]
 8005ae2:	bf0c      	ite	eq
 8005ae4:	f890 e010 	ldrbeq.w	lr, [r0, #16]
 8005ae8:	f890 e011 	ldrbne.w	lr, [r0, #17]
 8005aec:	1c4c      	adds	r4, r1, #1
 8005aee:	f01c 0f40 	tst.w	ip, #64	; 0x40
 8005af2:	f805 e004 	strb.w	lr, [r5, r4]
 8005af6:	f101 0402 	add.w	r4, r1, #2
 8005afa:	6945      	ldr	r5, [r0, #20]
 8005afc:	bf0c      	ite	eq
 8005afe:	f890 e010 	ldrbeq.w	lr, [r0, #16]
 8005b02:	f890 e011 	ldrbne.w	lr, [r0, #17]
 8005b06:	f805 e004 	strb.w	lr, [r5, r4]
 8005b0a:	f01c 0f20 	tst.w	ip, #32
 8005b0e:	6945      	ldr	r5, [r0, #20]
 8005b10:	bf0c      	ite	eq
 8005b12:	f890 e010 	ldrbeq.w	lr, [r0, #16]
 8005b16:	f890 e011 	ldrbne.w	lr, [r0, #17]
 8005b1a:	1ccc      	adds	r4, r1, #3
 8005b1c:	f01c 0f10 	tst.w	ip, #16
 8005b20:	f805 e004 	strb.w	lr, [r5, r4]
 8005b24:	f101 0404 	add.w	r4, r1, #4
 8005b28:	6945      	ldr	r5, [r0, #20]
 8005b2a:	bf0c      	ite	eq
 8005b2c:	f890 e010 	ldrbeq.w	lr, [r0, #16]
 8005b30:	f890 e011 	ldrbne.w	lr, [r0, #17]
 8005b34:	f805 e004 	strb.w	lr, [r5, r4]
 8005b38:	f01c 0f08 	tst.w	ip, #8
 8005b3c:	6945      	ldr	r5, [r0, #20]
 8005b3e:	bf0c      	ite	eq
 8005b40:	f890 e010 	ldrbeq.w	lr, [r0, #16]
 8005b44:	f890 e011 	ldrbne.w	lr, [r0, #17]
 8005b48:	1d4c      	adds	r4, r1, #5
 8005b4a:	f01c 0f04 	tst.w	ip, #4
 8005b4e:	f805 e004 	strb.w	lr, [r5, r4]
 8005b52:	f101 0406 	add.w	r4, r1, #6
 8005b56:	6945      	ldr	r5, [r0, #20]
 8005b58:	bf0c      	ite	eq
 8005b5a:	f890 e010 	ldrbeq.w	lr, [r0, #16]
 8005b5e:	f890 e011 	ldrbne.w	lr, [r0, #17]
 8005b62:	f805 e004 	strb.w	lr, [r5, r4]
 8005b66:	f01c 0f02 	tst.w	ip, #2
 8005b6a:	6945      	ldr	r5, [r0, #20]
 8005b6c:	bf0c      	ite	eq
 8005b6e:	f890 e010 	ldrbeq.w	lr, [r0, #16]
 8005b72:	f890 e011 	ldrbne.w	lr, [r0, #17]
 8005b76:	1dcc      	adds	r4, r1, #7
 8005b78:	f01c 0f01 	tst.w	ip, #1
 8005b7c:	f805 e004 	strb.w	lr, [r5, r4]
 8005b80:	f101 0408 	add.w	r4, r1, #8
 8005b84:	6945      	ldr	r5, [r0, #20]
 8005b86:	bf14      	ite	ne
 8005b88:	f890 c011 	ldrbne.w	ip, [r0, #17]
 8005b8c:	f890 c010 	ldrbeq.w	ip, [r0, #16]
 8005b90:	f805 c004 	strb.w	ip, [r5, r4]
 8005b94:	061d      	lsls	r5, r3, #24
 8005b96:	bf58      	it	pl
 8005b98:	f890 c010 	ldrbpl.w	ip, [r0, #16]
 8005b9c:	6945      	ldr	r5, [r0, #20]
 8005b9e:	bf48      	it	mi
 8005ba0:	f890 c011 	ldrbmi.w	ip, [r0, #17]
 8005ba4:	f101 0409 	add.w	r4, r1, #9
 8005ba8:	f805 c004 	strb.w	ip, [r5, r4]
 8005bac:	065d      	lsls	r5, r3, #25
 8005bae:	f101 040a 	add.w	r4, r1, #10
 8005bb2:	6945      	ldr	r5, [r0, #20]
 8005bb4:	bf54      	ite	pl
 8005bb6:	f890 c010 	ldrbpl.w	ip, [r0, #16]
 8005bba:	f890 c011 	ldrbmi.w	ip, [r0, #17]
 8005bbe:	f805 c004 	strb.w	ip, [r5, r4]
 8005bc2:	069d      	lsls	r5, r3, #26
 8005bc4:	f101 040b 	add.w	r4, r1, #11
 8005bc8:	6945      	ldr	r5, [r0, #20]
 8005bca:	bf54      	ite	pl
 8005bcc:	f890 c010 	ldrbpl.w	ip, [r0, #16]
 8005bd0:	f890 c011 	ldrbmi.w	ip, [r0, #17]
 8005bd4:	f805 c004 	strb.w	ip, [r5, r4]
 8005bd8:	06dd      	lsls	r5, r3, #27
 8005bda:	f101 040c 	add.w	r4, r1, #12
 8005bde:	6945      	ldr	r5, [r0, #20]
 8005be0:	bf54      	ite	pl
 8005be2:	f890 c010 	ldrbpl.w	ip, [r0, #16]
 8005be6:	f890 c011 	ldrbmi.w	ip, [r0, #17]
 8005bea:	f805 c004 	strb.w	ip, [r5, r4]
 8005bee:	071d      	lsls	r5, r3, #28
 8005bf0:	f101 040d 	add.w	r4, r1, #13
 8005bf4:	6945      	ldr	r5, [r0, #20]
 8005bf6:	bf54      	ite	pl
 8005bf8:	f890 c010 	ldrbpl.w	ip, [r0, #16]
 8005bfc:	f890 c011 	ldrbmi.w	ip, [r0, #17]
 8005c00:	f805 c004 	strb.w	ip, [r5, r4]
 8005c04:	075d      	lsls	r5, r3, #29
 8005c06:	f101 040e 	add.w	r4, r1, #14
 8005c0a:	6945      	ldr	r5, [r0, #20]
 8005c0c:	bf54      	ite	pl
 8005c0e:	f890 c010 	ldrbpl.w	ip, [r0, #16]
 8005c12:	f890 c011 	ldrbmi.w	ip, [r0, #17]
 8005c16:	f805 c004 	strb.w	ip, [r5, r4]
 8005c1a:	079d      	lsls	r5, r3, #30
 8005c1c:	f101 040f 	add.w	r4, r1, #15
 8005c20:	6945      	ldr	r5, [r0, #20]
 8005c22:	bf54      	ite	pl
 8005c24:	f890 c010 	ldrbpl.w	ip, [r0, #16]
 8005c28:	f890 c011 	ldrbmi.w	ip, [r0, #17]
 8005c2c:	f805 c004 	strb.w	ip, [r5, r4]
 8005c30:	07dd      	lsls	r5, r3, #31
 8005c32:	bf4c      	ite	mi
 8005c34:	f890 c011 	ldrbmi.w	ip, [r0, #17]
 8005c38:	f890 c010 	ldrbpl.w	ip, [r0, #16]
 8005c3c:	6943      	ldr	r3, [r0, #20]
 8005c3e:	f101 0410 	add.w	r4, r1, #16
 8005c42:	f803 c004 	strb.w	ip, [r3, r4]
 8005c46:	0614      	lsls	r4, r2, #24
 8005c48:	f101 0311 	add.w	r3, r1, #17
 8005c4c:	6944      	ldr	r4, [r0, #20]
 8005c4e:	bf54      	ite	pl
 8005c50:	f890 c010 	ldrbpl.w	ip, [r0, #16]
 8005c54:	f890 c011 	ldrbmi.w	ip, [r0, #17]
 8005c58:	f804 c003 	strb.w	ip, [r4, r3]
 8005c5c:	0655      	lsls	r5, r2, #25
 8005c5e:	6944      	ldr	r4, [r0, #20]
 8005c60:	bf54      	ite	pl
 8005c62:	f890 c010 	ldrbpl.w	ip, [r0, #16]
 8005c66:	f890 c011 	ldrbmi.w	ip, [r0, #17]
 8005c6a:	f101 0312 	add.w	r3, r1, #18
 8005c6e:	f804 c003 	strb.w	ip, [r4, r3]
 8005c72:	0694      	lsls	r4, r2, #26
 8005c74:	f101 0313 	add.w	r3, r1, #19
 8005c78:	6944      	ldr	r4, [r0, #20]
 8005c7a:	bf54      	ite	pl
 8005c7c:	f890 c010 	ldrbpl.w	ip, [r0, #16]
 8005c80:	f890 c011 	ldrbmi.w	ip, [r0, #17]
 8005c84:	f804 c003 	strb.w	ip, [r4, r3]
 8005c88:	06d5      	lsls	r5, r2, #27
 8005c8a:	6944      	ldr	r4, [r0, #20]
 8005c8c:	bf54      	ite	pl
 8005c8e:	f890 c010 	ldrbpl.w	ip, [r0, #16]
 8005c92:	f890 c011 	ldrbmi.w	ip, [r0, #17]
 8005c96:	f101 0314 	add.w	r3, r1, #20
 8005c9a:	f804 c003 	strb.w	ip, [r4, r3]
 8005c9e:	0714      	lsls	r4, r2, #28
 8005ca0:	f101 0315 	add.w	r3, r1, #21
 8005ca4:	6944      	ldr	r4, [r0, #20]
 8005ca6:	bf54      	ite	pl
 8005ca8:	f890 c010 	ldrbpl.w	ip, [r0, #16]
 8005cac:	f890 c011 	ldrbmi.w	ip, [r0, #17]
 8005cb0:	f804 c003 	strb.w	ip, [r4, r3]
 8005cb4:	0755      	lsls	r5, r2, #29
 8005cb6:	6944      	ldr	r4, [r0, #20]
 8005cb8:	bf54      	ite	pl
 8005cba:	f890 c010 	ldrbpl.w	ip, [r0, #16]
 8005cbe:	f890 c011 	ldrbmi.w	ip, [r0, #17]
 8005cc2:	f101 0316 	add.w	r3, r1, #22
 8005cc6:	f804 c003 	strb.w	ip, [r4, r3]
 8005cca:	0794      	lsls	r4, r2, #30
 8005ccc:	f101 0317 	add.w	r3, r1, #23
 8005cd0:	6944      	ldr	r4, [r0, #20]
 8005cd2:	bf54      	ite	pl
 8005cd4:	f890 c010 	ldrbpl.w	ip, [r0, #16]
 8005cd8:	f890 c011 	ldrbmi.w	ip, [r0, #17]
 8005cdc:	f804 c003 	strb.w	ip, [r4, r3]
 8005ce0:	3118      	adds	r1, #24
 8005ce2:	6943      	ldr	r3, [r0, #20]
 8005ce4:	f012 0f01 	tst.w	r2, #1
 8005ce8:	e5fc      	b.n	80058e4 <WS28xx::SetPixel(unsigned int, unsigned char, unsigned char, unsigned char)+0x2c8>
 8005cea:	0615      	lsls	r5, r2, #24
 8005cec:	f101 0401 	add.w	r4, r1, #1
 8005cf0:	6945      	ldr	r5, [r0, #20]
 8005cf2:	bf54      	ite	pl
 8005cf4:	f890 e010 	ldrbpl.w	lr, [r0, #16]
 8005cf8:	f890 e011 	ldrbmi.w	lr, [r0, #17]
 8005cfc:	f805 e004 	strb.w	lr, [r5, r4]
 8005d00:	0655      	lsls	r5, r2, #25
 8005d02:	f101 0402 	add.w	r4, r1, #2
 8005d06:	6945      	ldr	r5, [r0, #20]
 8005d08:	bf54      	ite	pl
 8005d0a:	f890 e010 	ldrbpl.w	lr, [r0, #16]
 8005d0e:	f890 e011 	ldrbmi.w	lr, [r0, #17]
 8005d12:	f805 e004 	strb.w	lr, [r5, r4]
 8005d16:	0695      	lsls	r5, r2, #26
 8005d18:	f101 0403 	add.w	r4, r1, #3
 8005d1c:	6945      	ldr	r5, [r0, #20]
 8005d1e:	bf54      	ite	pl
 8005d20:	f890 e010 	ldrbpl.w	lr, [r0, #16]
 8005d24:	f890 e011 	ldrbmi.w	lr, [r0, #17]
 8005d28:	f805 e004 	strb.w	lr, [r5, r4]
 8005d2c:	06d5      	lsls	r5, r2, #27
 8005d2e:	f101 0404 	add.w	r4, r1, #4
 8005d32:	6945      	ldr	r5, [r0, #20]
 8005d34:	bf54      	ite	pl
 8005d36:	f890 e010 	ldrbpl.w	lr, [r0, #16]
 8005d3a:	f890 e011 	ldrbmi.w	lr, [r0, #17]
 8005d3e:	f805 e004 	strb.w	lr, [r5, r4]
 8005d42:	0715      	lsls	r5, r2, #28
 8005d44:	f101 0405 	add.w	r4, r1, #5
 8005d48:	6945      	ldr	r5, [r0, #20]
 8005d4a:	bf54      	ite	pl
 8005d4c:	f890 e010 	ldrbpl.w	lr, [r0, #16]
 8005d50:	f890 e011 	ldrbmi.w	lr, [r0, #17]
 8005d54:	f805 e004 	strb.w	lr, [r5, r4]
 8005d58:	0755      	lsls	r5, r2, #29
 8005d5a:	f101 0406 	add.w	r4, r1, #6
 8005d5e:	6945      	ldr	r5, [r0, #20]
 8005d60:	bf54      	ite	pl
 8005d62:	f890 e010 	ldrbpl.w	lr, [r0, #16]
 8005d66:	f890 e011 	ldrbmi.w	lr, [r0, #17]
 8005d6a:	f805 e004 	strb.w	lr, [r5, r4]
 8005d6e:	0795      	lsls	r5, r2, #30
 8005d70:	f101 0407 	add.w	r4, r1, #7
 8005d74:	6945      	ldr	r5, [r0, #20]
 8005d76:	bf54      	ite	pl
 8005d78:	f890 e010 	ldrbpl.w	lr, [r0, #16]
 8005d7c:	f890 e011 	ldrbmi.w	lr, [r0, #17]
 8005d80:	f805 e004 	strb.w	lr, [r5, r4]
 8005d84:	f012 0f01 	tst.w	r2, #1
 8005d88:	f101 0408 	add.w	r4, r1, #8
 8005d8c:	6942      	ldr	r2, [r0, #20]
 8005d8e:	bf14      	ite	ne
 8005d90:	f890 e011 	ldrbne.w	lr, [r0, #17]
 8005d94:	f890 e010 	ldrbeq.w	lr, [r0, #16]
 8005d98:	f802 e004 	strb.w	lr, [r2, r4]
 8005d9c:	f01c 0f80 	tst.w	ip, #128	; 0x80
 8005da0:	6944      	ldr	r4, [r0, #20]
 8005da2:	bf0c      	ite	eq
 8005da4:	f890 e010 	ldrbeq.w	lr, [r0, #16]
 8005da8:	f890 e011 	ldrbne.w	lr, [r0, #17]
 8005dac:	f101 0209 	add.w	r2, r1, #9
 8005db0:	f01c 0f40 	tst.w	ip, #64	; 0x40
 8005db4:	f804 e002 	strb.w	lr, [r4, r2]
 8005db8:	f101 020a 	add.w	r2, r1, #10
 8005dbc:	6944      	ldr	r4, [r0, #20]
 8005dbe:	bf0c      	ite	eq
 8005dc0:	f890 e010 	ldrbeq.w	lr, [r0, #16]
 8005dc4:	f890 e011 	ldrbne.w	lr, [r0, #17]
 8005dc8:	f804 e002 	strb.w	lr, [r4, r2]
 8005dcc:	f01c 0f20 	tst.w	ip, #32
 8005dd0:	6944      	ldr	r4, [r0, #20]
 8005dd2:	bf0c      	ite	eq
 8005dd4:	f890 e010 	ldrbeq.w	lr, [r0, #16]
 8005dd8:	f890 e011 	ldrbne.w	lr, [r0, #17]
 8005ddc:	f101 020b 	add.w	r2, r1, #11
 8005de0:	f01c 0f10 	tst.w	ip, #16
 8005de4:	f804 e002 	strb.w	lr, [r4, r2]
 8005de8:	f101 020c 	add.w	r2, r1, #12
 8005dec:	6944      	ldr	r4, [r0, #20]
 8005dee:	bf0c      	ite	eq
 8005df0:	f890 e010 	ldrbeq.w	lr, [r0, #16]
 8005df4:	f890 e011 	ldrbne.w	lr, [r0, #17]
 8005df8:	f804 e002 	strb.w	lr, [r4, r2]
 8005dfc:	f01c 0f08 	tst.w	ip, #8
 8005e00:	6944      	ldr	r4, [r0, #20]
 8005e02:	bf0c      	ite	eq
 8005e04:	f890 e010 	ldrbeq.w	lr, [r0, #16]
 8005e08:	f890 e011 	ldrbne.w	lr, [r0, #17]
 8005e0c:	f101 020d 	add.w	r2, r1, #13
 8005e10:	f01c 0f04 	tst.w	ip, #4
 8005e14:	f804 e002 	strb.w	lr, [r4, r2]
 8005e18:	f101 020e 	add.w	r2, r1, #14
 8005e1c:	6944      	ldr	r4, [r0, #20]
 8005e1e:	bf0c      	ite	eq
 8005e20:	f890 e010 	ldrbeq.w	lr, [r0, #16]
 8005e24:	f890 e011 	ldrbne.w	lr, [r0, #17]
 8005e28:	f804 e002 	strb.w	lr, [r4, r2]
 8005e2c:	f01c 0f02 	tst.w	ip, #2
 8005e30:	6944      	ldr	r4, [r0, #20]
 8005e32:	bf0c      	ite	eq
 8005e34:	f890 e010 	ldrbeq.w	lr, [r0, #16]
 8005e38:	f890 e011 	ldrbne.w	lr, [r0, #17]
 8005e3c:	f101 020f 	add.w	r2, r1, #15
 8005e40:	f01c 0f01 	tst.w	ip, #1
 8005e44:	f804 e002 	strb.w	lr, [r4, r2]
 8005e48:	f101 0210 	add.w	r2, r1, #16
 8005e4c:	bf14      	ite	ne
 8005e4e:	f890 c011 	ldrbne.w	ip, [r0, #17]
 8005e52:	f890 c010 	ldrbeq.w	ip, [r0, #16]
 8005e56:	6944      	ldr	r4, [r0, #20]
 8005e58:	e4f0      	b.n	800583c <WS28xx::SetPixel(unsigned int, unsigned char, unsigned char, unsigned char)+0x220>
 8005e5a:	061d      	lsls	r5, r3, #24
 8005e5c:	f101 0401 	add.w	r4, r1, #1
 8005e60:	6945      	ldr	r5, [r0, #20]
 8005e62:	bf54      	ite	pl
 8005e64:	f890 e010 	ldrbpl.w	lr, [r0, #16]
 8005e68:	f890 e011 	ldrbmi.w	lr, [r0, #17]
 8005e6c:	f805 e004 	strb.w	lr, [r5, r4]
 8005e70:	065d      	lsls	r5, r3, #25
 8005e72:	f101 0402 	add.w	r4, r1, #2
 8005e76:	6945      	ldr	r5, [r0, #20]
 8005e78:	bf54      	ite	pl
 8005e7a:	f890 e010 	ldrbpl.w	lr, [r0, #16]
 8005e7e:	f890 e011 	ldrbmi.w	lr, [r0, #17]
 8005e82:	f805 e004 	strb.w	lr, [r5, r4]
 8005e86:	069d      	lsls	r5, r3, #26
 8005e88:	f101 0403 	add.w	r4, r1, #3
 8005e8c:	6945      	ldr	r5, [r0, #20]
 8005e8e:	bf54      	ite	pl
 8005e90:	f890 e010 	ldrbpl.w	lr, [r0, #16]
 8005e94:	f890 e011 	ldrbmi.w	lr, [r0, #17]
 8005e98:	f805 e004 	strb.w	lr, [r5, r4]
 8005e9c:	06dd      	lsls	r5, r3, #27
 8005e9e:	f101 0404 	add.w	r4, r1, #4
 8005ea2:	6945      	ldr	r5, [r0, #20]
 8005ea4:	bf54      	ite	pl
 8005ea6:	f890 e010 	ldrbpl.w	lr, [r0, #16]
 8005eaa:	f890 e011 	ldrbmi.w	lr, [r0, #17]
 8005eae:	f805 e004 	strb.w	lr, [r5, r4]
 8005eb2:	071d      	lsls	r5, r3, #28
 8005eb4:	f101 0405 	add.w	r4, r1, #5
 8005eb8:	6945      	ldr	r5, [r0, #20]
 8005eba:	bf54      	ite	pl
 8005ebc:	f890 e010 	ldrbpl.w	lr, [r0, #16]
 8005ec0:	f890 e011 	ldrbmi.w	lr, [r0, #17]
 8005ec4:	f805 e004 	strb.w	lr, [r5, r4]
 8005ec8:	075d      	lsls	r5, r3, #29
 8005eca:	f101 0406 	add.w	r4, r1, #6
 8005ece:	6945      	ldr	r5, [r0, #20]
 8005ed0:	bf54      	ite	pl
 8005ed2:	f890 e010 	ldrbpl.w	lr, [r0, #16]
 8005ed6:	f890 e011 	ldrbmi.w	lr, [r0, #17]
 8005eda:	f805 e004 	strb.w	lr, [r5, r4]
 8005ede:	079d      	lsls	r5, r3, #30
 8005ee0:	f101 0407 	add.w	r4, r1, #7
 8005ee4:	6945      	ldr	r5, [r0, #20]
 8005ee6:	bf54      	ite	pl
 8005ee8:	f890 e010 	ldrbpl.w	lr, [r0, #16]
 8005eec:	f890 e011 	ldrbmi.w	lr, [r0, #17]
 8005ef0:	f805 e004 	strb.w	lr, [r5, r4]
 8005ef4:	f013 0f01 	tst.w	r3, #1
 8005ef8:	f101 0408 	add.w	r4, r1, #8
 8005efc:	6943      	ldr	r3, [r0, #20]
 8005efe:	bf14      	ite	ne
 8005f00:	f890 e011 	ldrbne.w	lr, [r0, #17]
 8005f04:	f890 e010 	ldrbeq.w	lr, [r0, #16]
 8005f08:	f803 e004 	strb.w	lr, [r3, r4]
 8005f0c:	0615      	lsls	r5, r2, #24
 8005f0e:	6944      	ldr	r4, [r0, #20]
 8005f10:	bf54      	ite	pl
 8005f12:	f890 e010 	ldrbpl.w	lr, [r0, #16]
 8005f16:	f890 e011 	ldrbmi.w	lr, [r0, #17]
 8005f1a:	f101 0309 	add.w	r3, r1, #9
 8005f1e:	0655      	lsls	r5, r2, #25
 8005f20:	f804 e003 	strb.w	lr, [r4, r3]
 8005f24:	f101 030a 	add.w	r3, r1, #10
 8005f28:	6944      	ldr	r4, [r0, #20]
 8005f2a:	bf54      	ite	pl
 8005f2c:	f890 e010 	ldrbpl.w	lr, [r0, #16]
 8005f30:	f890 e011 	ldrbmi.w	lr, [r0, #17]
 8005f34:	f804 e003 	strb.w	lr, [r4, r3]
 8005f38:	0695      	lsls	r5, r2, #26
 8005f3a:	6944      	ldr	r4, [r0, #20]
 8005f3c:	bf54      	ite	pl
 8005f3e:	f890 e010 	ldrbpl.w	lr, [r0, #16]
 8005f42:	f890 e011 	ldrbmi.w	lr, [r0, #17]
 8005f46:	f101 030b 	add.w	r3, r1, #11
 8005f4a:	06d5      	lsls	r5, r2, #27
 8005f4c:	f804 e003 	strb.w	lr, [r4, r3]
 8005f50:	f101 030c 	add.w	r3, r1, #12
 8005f54:	6944      	ldr	r4, [r0, #20]
 8005f56:	bf54      	ite	pl
 8005f58:	f890 e010 	ldrbpl.w	lr, [r0, #16]
 8005f5c:	f890 e011 	ldrbmi.w	lr, [r0, #17]
 8005f60:	f804 e003 	strb.w	lr, [r4, r3]
 8005f64:	0715      	lsls	r5, r2, #28
 8005f66:	6944      	ldr	r4, [r0, #20]
 8005f68:	bf54      	ite	pl
 8005f6a:	f890 e010 	ldrbpl.w	lr, [r0, #16]
 8005f6e:	f890 e011 	ldrbmi.w	lr, [r0, #17]
 8005f72:	f101 030d 	add.w	r3, r1, #13
 8005f76:	0755      	lsls	r5, r2, #29
 8005f78:	f804 e003 	strb.w	lr, [r4, r3]
 8005f7c:	f101 030e 	add.w	r3, r1, #14
 8005f80:	6944      	ldr	r4, [r0, #20]
 8005f82:	bf54      	ite	pl
 8005f84:	f890 e010 	ldrbpl.w	lr, [r0, #16]
 8005f88:	f890 e011 	ldrbmi.w	lr, [r0, #17]
 8005f8c:	f804 e003 	strb.w	lr, [r4, r3]
 8005f90:	0795      	lsls	r5, r2, #30
 8005f92:	6944      	ldr	r4, [r0, #20]
 8005f94:	bf54      	ite	pl
 8005f96:	f890 e010 	ldrbpl.w	lr, [r0, #16]
 8005f9a:	f890 e011 	ldrbmi.w	lr, [r0, #17]
 8005f9e:	f101 030f 	add.w	r3, r1, #15
 8005fa2:	07d2      	lsls	r2, r2, #31
 8005fa4:	f804 e003 	strb.w	lr, [r4, r3]
 8005fa8:	f101 0310 	add.w	r3, r1, #16
 8005fac:	bf4c      	ite	mi
 8005fae:	7c44      	ldrbmi	r4, [r0, #17]
 8005fb0:	7c04      	ldrbpl	r4, [r0, #16]
 8005fb2:	6942      	ldr	r2, [r0, #20]
 8005fb4:	e548      	b.n	8005a48 <WS28xx::SetPixel(unsigned int, unsigned char, unsigned char, unsigned char)+0x42c>
 8005fb6:	061d      	lsls	r5, r3, #24
 8005fb8:	f101 0401 	add.w	r4, r1, #1
 8005fbc:	6945      	ldr	r5, [r0, #20]
 8005fbe:	bf54      	ite	pl
 8005fc0:	f890 e010 	ldrbpl.w	lr, [r0, #16]
 8005fc4:	f890 e011 	ldrbmi.w	lr, [r0, #17]
 8005fc8:	f805 e004 	strb.w	lr, [r5, r4]
 8005fcc:	065d      	lsls	r5, r3, #25
 8005fce:	f101 0402 	add.w	r4, r1, #2
 8005fd2:	6945      	ldr	r5, [r0, #20]
 8005fd4:	bf54      	ite	pl
 8005fd6:	f890 e010 	ldrbpl.w	lr, [r0, #16]
 8005fda:	f890 e011 	ldrbmi.w	lr, [r0, #17]
 8005fde:	f805 e004 	strb.w	lr, [r5, r4]
 8005fe2:	069d      	lsls	r5, r3, #26
 8005fe4:	f101 0403 	add.w	r4, r1, #3
 8005fe8:	6945      	ldr	r5, [r0, #20]
 8005fea:	bf54      	ite	pl
 8005fec:	f890 e010 	ldrbpl.w	lr, [r0, #16]
 8005ff0:	f890 e011 	ldrbmi.w	lr, [r0, #17]
 8005ff4:	f805 e004 	strb.w	lr, [r5, r4]
 8005ff8:	06dd      	lsls	r5, r3, #27
 8005ffa:	f101 0404 	add.w	r4, r1, #4
 8005ffe:	6945      	ldr	r5, [r0, #20]
 8006000:	bf54      	ite	pl
 8006002:	f890 e010 	ldrbpl.w	lr, [r0, #16]
 8006006:	f890 e011 	ldrbmi.w	lr, [r0, #17]
 800600a:	f805 e004 	strb.w	lr, [r5, r4]
 800600e:	071d      	lsls	r5, r3, #28
 8006010:	f101 0405 	add.w	r4, r1, #5
 8006014:	6945      	ldr	r5, [r0, #20]
 8006016:	bf54      	ite	pl
 8006018:	f890 e010 	ldrbpl.w	lr, [r0, #16]
 800601c:	f890 e011 	ldrbmi.w	lr, [r0, #17]
 8006020:	f805 e004 	strb.w	lr, [r5, r4]
 8006024:	075d      	lsls	r5, r3, #29
 8006026:	f101 0406 	add.w	r4, r1, #6
 800602a:	6945      	ldr	r5, [r0, #20]
 800602c:	bf54      	ite	pl
 800602e:	f890 e010 	ldrbpl.w	lr, [r0, #16]
 8006032:	f890 e011 	ldrbmi.w	lr, [r0, #17]
 8006036:	f805 e004 	strb.w	lr, [r5, r4]
 800603a:	079d      	lsls	r5, r3, #30
 800603c:	f101 0407 	add.w	r4, r1, #7
 8006040:	6945      	ldr	r5, [r0, #20]
 8006042:	bf54      	ite	pl
 8006044:	f890 e010 	ldrbpl.w	lr, [r0, #16]
 8006048:	f890 e011 	ldrbmi.w	lr, [r0, #17]
 800604c:	f805 e004 	strb.w	lr, [r5, r4]
 8006050:	f013 0f01 	tst.w	r3, #1
 8006054:	f101 0408 	add.w	r4, r1, #8
 8006058:	6943      	ldr	r3, [r0, #20]
 800605a:	bf14      	ite	ne
 800605c:	f890 e011 	ldrbne.w	lr, [r0, #17]
 8006060:	f890 e010 	ldrbeq.w	lr, [r0, #16]
 8006064:	f803 e004 	strb.w	lr, [r3, r4]
 8006068:	f01c 0f80 	tst.w	ip, #128	; 0x80
 800606c:	6944      	ldr	r4, [r0, #20]
 800606e:	bf0c      	ite	eq
 8006070:	f890 e010 	ldrbeq.w	lr, [r0, #16]
 8006074:	f890 e011 	ldrbne.w	lr, [r0, #17]
 8006078:	f101 0309 	add.w	r3, r1, #9
 800607c:	f01c 0f40 	tst.w	ip, #64	; 0x40
 8006080:	f804 e003 	strb.w	lr, [r4, r3]
 8006084:	f101 030a 	add.w	r3, r1, #10
 8006088:	6944      	ldr	r4, [r0, #20]
 800608a:	bf0c      	ite	eq
 800608c:	f890 e010 	ldrbeq.w	lr, [r0, #16]
 8006090:	f890 e011 	ldrbne.w	lr, [r0, #17]
 8006094:	f804 e003 	strb.w	lr, [r4, r3]
 8006098:	f01c 0f20 	tst.w	ip, #32
 800609c:	6944      	ldr	r4, [r0, #20]
 800609e:	bf0c      	ite	eq
 80060a0:	f890 e010 	ldrbeq.w	lr, [r0, #16]
 80060a4:	f890 e011 	ldrbne.w	lr, [r0, #17]
 80060a8:	f101 030b 	add.w	r3, r1, #11
 80060ac:	f01c 0f10 	tst.w	ip, #16
 80060b0:	f804 e003 	strb.w	lr, [r4, r3]
 80060b4:	f101 030c 	add.w	r3, r1, #12
 80060b8:	6944      	ldr	r4, [r0, #20]
 80060ba:	bf0c      	ite	eq
 80060bc:	f890 e010 	ldrbeq.w	lr, [r0, #16]
 80060c0:	f890 e011 	ldrbne.w	lr, [r0, #17]
 80060c4:	f804 e003 	strb.w	lr, [r4, r3]
 80060c8:	f01c 0f08 	tst.w	ip, #8
 80060cc:	6944      	ldr	r4, [r0, #20]
 80060ce:	bf0c      	ite	eq
 80060d0:	f890 e010 	ldrbeq.w	lr, [r0, #16]
 80060d4:	f890 e011 	ldrbne.w	lr, [r0, #17]
 80060d8:	f101 030d 	add.w	r3, r1, #13
 80060dc:	f01c 0f04 	tst.w	ip, #4
 80060e0:	f804 e003 	strb.w	lr, [r4, r3]
 80060e4:	f101 030e 	add.w	r3, r1, #14
 80060e8:	6944      	ldr	r4, [r0, #20]
 80060ea:	bf0c      	ite	eq
 80060ec:	f890 e010 	ldrbeq.w	lr, [r0, #16]
 80060f0:	f890 e011 	ldrbne.w	lr, [r0, #17]
 80060f4:	f804 e003 	strb.w	lr, [r4, r3]
 80060f8:	f01c 0f02 	tst.w	ip, #2
 80060fc:	6944      	ldr	r4, [r0, #20]
 80060fe:	bf0c      	ite	eq
 8006100:	f890 e010 	ldrbeq.w	lr, [r0, #16]
 8006104:	f890 e011 	ldrbne.w	lr, [r0, #17]
 8006108:	f101 030f 	add.w	r3, r1, #15
 800610c:	f01c 0f01 	tst.w	ip, #1
 8006110:	f804 e003 	strb.w	lr, [r4, r3]
 8006114:	f101 0310 	add.w	r3, r1, #16
 8006118:	bf14      	ite	ne
 800611a:	f890 c011 	ldrbne.w	ip, [r0, #17]
 800611e:	f890 c010 	ldrbeq.w	ip, [r0, #16]
 8006122:	6944      	ldr	r4, [r0, #20]
 8006124:	e58d      	b.n	8005c42 <WS28xx::SetPixel(unsigned int, unsigned char, unsigned char, unsigned char)+0x626>
 8006126:	bf00      	nop

08006128 <WS28xx::SetPixel(unsigned int, unsigned char, unsigned char, unsigned char, unsigned char)>:
 8006128:	b570      	push	{r4, r5, r6, lr}
 800612a:	6804      	ldr	r4, [r0, #0]
 800612c:	f89d e010 	ldrb.w	lr, [sp, #16]
 8006130:	f89d c014 	ldrb.w	ip, [sp, #20]
 8006134:	2c07      	cmp	r4, #7
 8006136:	d000      	beq.n	800613a <WS28xx::SetPixel(unsigned int, unsigned char, unsigned char, unsigned char, unsigned char)+0x12>
 8006138:	bd70      	pop	{r4, r5, r6, pc}
 800613a:	0149      	lsls	r1, r1, #5
 800613c:	061e      	lsls	r6, r3, #24
 800613e:	6945      	ldr	r5, [r0, #20]
 8006140:	bf54      	ite	pl
 8006142:	7c06      	ldrbpl	r6, [r0, #16]
 8006144:	7c46      	ldrbmi	r6, [r0, #17]
 8006146:	1c4c      	adds	r4, r1, #1
 8006148:	552e      	strb	r6, [r5, r4]
 800614a:	065e      	lsls	r6, r3, #25
 800614c:	6945      	ldr	r5, [r0, #20]
 800614e:	bf54      	ite	pl
 8006150:	7c06      	ldrbpl	r6, [r0, #16]
 8006152:	7c46      	ldrbmi	r6, [r0, #17]
 8006154:	1c8c      	adds	r4, r1, #2
 8006156:	552e      	strb	r6, [r5, r4]
 8006158:	069e      	lsls	r6, r3, #26
 800615a:	6945      	ldr	r5, [r0, #20]
 800615c:	bf54      	ite	pl
 800615e:	7c06      	ldrbpl	r6, [r0, #16]
 8006160:	7c46      	ldrbmi	r6, [r0, #17]
 8006162:	1ccc      	adds	r4, r1, #3
 8006164:	552e      	strb	r6, [r5, r4]
 8006166:	06de      	lsls	r6, r3, #27
 8006168:	6945      	ldr	r5, [r0, #20]
 800616a:	bf54      	ite	pl
 800616c:	7c06      	ldrbpl	r6, [r0, #16]
 800616e:	7c46      	ldrbmi	r6, [r0, #17]
 8006170:	1d0c      	adds	r4, r1, #4
 8006172:	552e      	strb	r6, [r5, r4]
 8006174:	071e      	lsls	r6, r3, #28
 8006176:	6945      	ldr	r5, [r0, #20]
 8006178:	bf54      	ite	pl
 800617a:	7c06      	ldrbpl	r6, [r0, #16]
 800617c:	7c46      	ldrbmi	r6, [r0, #17]
 800617e:	1d4c      	adds	r4, r1, #5
 8006180:	552e      	strb	r6, [r5, r4]
 8006182:	075e      	lsls	r6, r3, #29
 8006184:	6945      	ldr	r5, [r0, #20]
 8006186:	bf54      	ite	pl
 8006188:	7c06      	ldrbpl	r6, [r0, #16]
 800618a:	7c46      	ldrbmi	r6, [r0, #17]
 800618c:	1d8c      	adds	r4, r1, #6
 800618e:	552e      	strb	r6, [r5, r4]
 8006190:	079e      	lsls	r6, r3, #30
 8006192:	6945      	ldr	r5, [r0, #20]
 8006194:	bf54      	ite	pl
 8006196:	7c06      	ldrbpl	r6, [r0, #16]
 8006198:	7c46      	ldrbmi	r6, [r0, #17]
 800619a:	1dcc      	adds	r4, r1, #7
 800619c:	f013 0f01 	tst.w	r3, #1
 80061a0:	552e      	strb	r6, [r5, r4]
 80061a2:	f101 0408 	add.w	r4, r1, #8
 80061a6:	6943      	ldr	r3, [r0, #20]
 80061a8:	bf14      	ite	ne
 80061aa:	7c45      	ldrbne	r5, [r0, #17]
 80061ac:	7c05      	ldrbeq	r5, [r0, #16]
 80061ae:	551d      	strb	r5, [r3, r4]
 80061b0:	0615      	lsls	r5, r2, #24
 80061b2:	6944      	ldr	r4, [r0, #20]
 80061b4:	bf54      	ite	pl
 80061b6:	7c05      	ldrbpl	r5, [r0, #16]
 80061b8:	7c45      	ldrbmi	r5, [r0, #17]
 80061ba:	f101 0309 	add.w	r3, r1, #9
 80061be:	0656      	lsls	r6, r2, #25
 80061c0:	54e5      	strb	r5, [r4, r3]
 80061c2:	f101 030a 	add.w	r3, r1, #10
 80061c6:	6944      	ldr	r4, [r0, #20]
 80061c8:	bf54      	ite	pl
 80061ca:	7c05      	ldrbpl	r5, [r0, #16]
 80061cc:	7c45      	ldrbmi	r5, [r0, #17]
 80061ce:	54e5      	strb	r5, [r4, r3]
 80061d0:	0695      	lsls	r5, r2, #26
 80061d2:	6944      	ldr	r4, [r0, #20]
 80061d4:	bf54      	ite	pl
 80061d6:	7c05      	ldrbpl	r5, [r0, #16]
 80061d8:	7c45      	ldrbmi	r5, [r0, #17]
 80061da:	f101 030b 	add.w	r3, r1, #11
 80061de:	06d6      	lsls	r6, r2, #27
 80061e0:	54e5      	strb	r5, [r4, r3]
 80061e2:	f101 030c 	add.w	r3, r1, #12
 80061e6:	6944      	ldr	r4, [r0, #20]
 80061e8:	bf54      	ite	pl
 80061ea:	7c05      	ldrbpl	r5, [r0, #16]
 80061ec:	7c45      	ldrbmi	r5, [r0, #17]
 80061ee:	54e5      	strb	r5, [r4, r3]
 80061f0:	0715      	lsls	r5, r2, #28
 80061f2:	6944      	ldr	r4, [r0, #20]
 80061f4:	bf54      	ite	pl
 80061f6:	7c05      	ldrbpl	r5, [r0, #16]
 80061f8:	7c45      	ldrbmi	r5, [r0, #17]
 80061fa:	f101 030d 	add.w	r3, r1, #13
 80061fe:	0756      	lsls	r6, r2, #29
 8006200:	54e5      	strb	r5, [r4, r3]
 8006202:	f101 030e 	add.w	r3, r1, #14
 8006206:	6944      	ldr	r4, [r0, #20]
 8006208:	bf54      	ite	pl
 800620a:	7c05      	ldrbpl	r5, [r0, #16]
 800620c:	7c45      	ldrbmi	r5, [r0, #17]
 800620e:	54e5      	strb	r5, [r4, r3]
 8006210:	0795      	lsls	r5, r2, #30
 8006212:	6944      	ldr	r4, [r0, #20]
 8006214:	bf54      	ite	pl
 8006216:	7c05      	ldrbpl	r5, [r0, #16]
 8006218:	7c45      	ldrbmi	r5, [r0, #17]
 800621a:	f101 030f 	add.w	r3, r1, #15
 800621e:	f012 0f01 	tst.w	r2, #1
 8006222:	54e5      	strb	r5, [r4, r3]
 8006224:	f101 0310 	add.w	r3, r1, #16
 8006228:	6942      	ldr	r2, [r0, #20]
 800622a:	bf14      	ite	ne
 800622c:	7c44      	ldrbne	r4, [r0, #17]
 800622e:	7c04      	ldrbeq	r4, [r0, #16]
 8006230:	54d4      	strb	r4, [r2, r3]
 8006232:	f01e 0f80 	tst.w	lr, #128	; 0x80
 8006236:	6942      	ldr	r2, [r0, #20]
 8006238:	bf14      	ite	ne
 800623a:	7c44      	ldrbne	r4, [r0, #17]
 800623c:	7c04      	ldrbeq	r4, [r0, #16]
 800623e:	f101 0311 	add.w	r3, r1, #17
 8006242:	f01e 0f40 	tst.w	lr, #64	; 0x40
 8006246:	54d4      	strb	r4, [r2, r3]
 8006248:	f101 0312 	add.w	r3, r1, #18
 800624c:	6942      	ldr	r2, [r0, #20]
 800624e:	bf14      	ite	ne
 8006250:	7c44      	ldrbne	r4, [r0, #17]
 8006252:	7c04      	ldrbeq	r4, [r0, #16]
 8006254:	54d4      	strb	r4, [r2, r3]
 8006256:	f01e 0f20 	tst.w	lr, #32
 800625a:	6942      	ldr	r2, [r0, #20]
 800625c:	bf14      	ite	ne
 800625e:	7c44      	ldrbne	r4, [r0, #17]
 8006260:	7c04      	ldrbeq	r4, [r0, #16]
 8006262:	f101 0313 	add.w	r3, r1, #19
 8006266:	f01e 0f10 	tst.w	lr, #16
 800626a:	54d4      	strb	r4, [r2, r3]
 800626c:	f101 0314 	add.w	r3, r1, #20
 8006270:	6942      	ldr	r2, [r0, #20]
 8006272:	bf14      	ite	ne
 8006274:	7c44      	ldrbne	r4, [r0, #17]
 8006276:	7c04      	ldrbeq	r4, [r0, #16]
 8006278:	54d4      	strb	r4, [r2, r3]
 800627a:	f01e 0f08 	tst.w	lr, #8
 800627e:	6942      	ldr	r2, [r0, #20]
 8006280:	bf14      	ite	ne
 8006282:	7c44      	ldrbne	r4, [r0, #17]
 8006284:	7c04      	ldrbeq	r4, [r0, #16]
 8006286:	f101 0315 	add.w	r3, r1, #21
 800628a:	f01e 0f04 	tst.w	lr, #4
 800628e:	54d4      	strb	r4, [r2, r3]
 8006290:	f101 0316 	add.w	r3, r1, #22
 8006294:	6942      	ldr	r2, [r0, #20]
 8006296:	bf14      	ite	ne
 8006298:	7c44      	ldrbne	r4, [r0, #17]
 800629a:	7c04      	ldrbeq	r4, [r0, #16]
 800629c:	54d4      	strb	r4, [r2, r3]
 800629e:	f01e 0f02 	tst.w	lr, #2
 80062a2:	6942      	ldr	r2, [r0, #20]
 80062a4:	bf14      	ite	ne
 80062a6:	7c44      	ldrbne	r4, [r0, #17]
 80062a8:	7c04      	ldrbeq	r4, [r0, #16]
 80062aa:	f101 0317 	add.w	r3, r1, #23
 80062ae:	f01e 0f01 	tst.w	lr, #1
 80062b2:	54d4      	strb	r4, [r2, r3]
 80062b4:	f101 0318 	add.w	r3, r1, #24
 80062b8:	6942      	ldr	r2, [r0, #20]
 80062ba:	bf14      	ite	ne
 80062bc:	7c44      	ldrbne	r4, [r0, #17]
 80062be:	7c04      	ldrbeq	r4, [r0, #16]
 80062c0:	54d4      	strb	r4, [r2, r3]
 80062c2:	f01c 0f80 	tst.w	ip, #128	; 0x80
 80062c6:	bf08      	it	eq
 80062c8:	7c04      	ldrbeq	r4, [r0, #16]
 80062ca:	6942      	ldr	r2, [r0, #20]
 80062cc:	bf18      	it	ne
 80062ce:	7c44      	ldrbne	r4, [r0, #17]
 80062d0:	f101 0319 	add.w	r3, r1, #25
 80062d4:	f01c 0f40 	tst.w	ip, #64	; 0x40
 80062d8:	54d4      	strb	r4, [r2, r3]
 80062da:	f101 031a 	add.w	r3, r1, #26
 80062de:	6942      	ldr	r2, [r0, #20]
 80062e0:	bf0c      	ite	eq
 80062e2:	7c04      	ldrbeq	r4, [r0, #16]
 80062e4:	7c44      	ldrbne	r4, [r0, #17]
 80062e6:	54d4      	strb	r4, [r2, r3]
 80062e8:	f01c 0f20 	tst.w	ip, #32
 80062ec:	6942      	ldr	r2, [r0, #20]
 80062ee:	bf0c      	ite	eq
 80062f0:	7c04      	ldrbeq	r4, [r0, #16]
 80062f2:	7c44      	ldrbne	r4, [r0, #17]
 80062f4:	f101 031b 	add.w	r3, r1, #27
 80062f8:	f01c 0f10 	tst.w	ip, #16
 80062fc:	54d4      	strb	r4, [r2, r3]
 80062fe:	f101 031c 	add.w	r3, r1, #28
 8006302:	6942      	ldr	r2, [r0, #20]
 8006304:	bf0c      	ite	eq
 8006306:	7c04      	ldrbeq	r4, [r0, #16]
 8006308:	7c44      	ldrbne	r4, [r0, #17]
 800630a:	54d4      	strb	r4, [r2, r3]
 800630c:	f01c 0f08 	tst.w	ip, #8
 8006310:	6942      	ldr	r2, [r0, #20]
 8006312:	bf0c      	ite	eq
 8006314:	7c04      	ldrbeq	r4, [r0, #16]
 8006316:	7c44      	ldrbne	r4, [r0, #17]
 8006318:	f101 031d 	add.w	r3, r1, #29
 800631c:	f01c 0f04 	tst.w	ip, #4
 8006320:	54d4      	strb	r4, [r2, r3]
 8006322:	f101 031e 	add.w	r3, r1, #30
 8006326:	6942      	ldr	r2, [r0, #20]
 8006328:	bf0c      	ite	eq
 800632a:	7c04      	ldrbeq	r4, [r0, #16]
 800632c:	7c44      	ldrbne	r4, [r0, #17]
 800632e:	54d4      	strb	r4, [r2, r3]
 8006330:	f01c 0f02 	tst.w	ip, #2
 8006334:	6942      	ldr	r2, [r0, #20]
 8006336:	bf0c      	ite	eq
 8006338:	7c04      	ldrbeq	r4, [r0, #16]
 800633a:	7c44      	ldrbne	r4, [r0, #17]
 800633c:	f101 031f 	add.w	r3, r1, #31
 8006340:	f01c 0f01 	tst.w	ip, #1
 8006344:	54d4      	strb	r4, [r2, r3]
 8006346:	f101 0120 	add.w	r1, r1, #32
 800634a:	6943      	ldr	r3, [r0, #20]
 800634c:	bf14      	ite	ne
 800634e:	7c42      	ldrbne	r2, [r0, #17]
 8006350:	7c02      	ldrbeq	r2, [r0, #16]
 8006352:	545a      	strb	r2, [r3, r1]
 8006354:	bd70      	pop	{r4, r5, r6, pc}
 8006356:	bf00      	nop

08006358 <WS28xx::~WS28xx()>:
 8006358:	4b01      	ldr	r3, [pc, #4]	; (8006360 <WS28xx::~WS28xx()+0x8>)
 800635a:	2200      	movs	r2, #0
 800635c:	601a      	str	r2, [r3, #0]
 800635e:	4770      	bx	lr
 8006360:	20000694 	mulcs	r0, r4, r6

08006364 <WS28xx::SetupBuffers()>:
 8006364:	b513      	push	{r0, r1, r4, lr}
 8006366:	4604      	mov	r4, r0
 8006368:	a801      	add	r0, sp, #4
 800636a:	f002 fe41 	bl	8008ff0 <gd32_spi_dma_tx_prepare(unsigned int*)>
 800636e:	9b01      	ldr	r3, [sp, #4]
 8006370:	4a07      	ldr	r2, [pc, #28]	; (8006390 <WS28xx::SetupBuffers()+0x2c>)
 8006372:	6160      	str	r0, [r4, #20]
 8006374:	085b      	lsrs	r3, r3, #1
 8006376:	f023 0303 	bic.w	r3, r3, #3
 800637a:	4418      	add	r0, r3
 800637c:	68e3      	ldr	r3, [r4, #12]
 800637e:	6013      	str	r3, [r2, #0]
 8006380:	3303      	adds	r3, #3
 8006382:	f023 0303 	bic.w	r3, r3, #3
 8006386:	61a0      	str	r0, [r4, #24]
 8006388:	60e3      	str	r3, [r4, #12]
 800638a:	b002      	add	sp, #8
 800638c:	bd10      	pop	{r4, pc}
 800638e:	bf00      	nop
 8006390:	20000690 	mulcs	r0, r0, r6

08006394 <WS28xx::WS28xx(PixelConfiguration&)>:
 8006394:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006396:	23aa      	movs	r3, #170	; 0xaa
 8006398:	2203      	movs	r2, #3
 800639a:	e9c0 2300 	strd	r2, r3, [r0]
 800639e:	2306      	movs	r3, #6
 80063a0:	6083      	str	r3, [r0, #8]
 80063a2:	f44f 437f 	mov.w	r3, #65280	; 0xff00
 80063a6:	8243      	strh	r3, [r0, #18]
 80063a8:	2300      	movs	r3, #0
 80063aa:	e9c0 3305 	strd	r3, r3, [r0, #20]
 80063ae:	4b18      	ldr	r3, [pc, #96]	; (8006410 <WS28xx::WS28xx(PixelConfiguration&)+0x7c>)
 80063b0:	460d      	mov	r5, r1
 80063b2:	4604      	mov	r4, r0
 80063b4:	6018      	str	r0, [r3, #0]
 80063b6:	a901      	add	r1, sp, #4
 80063b8:	4628      	mov	r0, r5
 80063ba:	f7fe fdad 	bl	8004f18 <PixelConfiguration::Validate(unsigned int&)>
 80063be:	4628      	mov	r0, r5
 80063c0:	f7fe fe14 	bl	8004fec <PixelConfiguration::Dump()>
 80063c4:	68ab      	ldr	r3, [r5, #8]
 80063c6:	60a3      	str	r3, [r4, #8]
 80063c8:	8a2b      	ldrh	r3, [r5, #16]
 80063ca:	8223      	strh	r3, [r4, #16]
 80063cc:	7cab      	ldrb	r3, [r5, #18]
 80063ce:	686a      	ldr	r2, [r5, #4]
 80063d0:	7ce8      	ldrb	r0, [r5, #19]
 80063d2:	74e3      	strb	r3, [r4, #19]
 80063d4:	9b01      	ldr	r3, [sp, #4]
 80063d6:	6829      	ldr	r1, [r5, #0]
 80063d8:	6021      	str	r1, [r4, #0]
 80063da:	6062      	str	r2, [r4, #4]
 80063dc:	74a0      	strb	r0, [r4, #18]
 80063de:	4353      	muls	r3, r2
 80063e0:	b990      	cbnz	r0, 8006408 <WS28xx::WS28xx(PixelConfiguration&)+0x74>
 80063e2:	390b      	subs	r1, #11
 80063e4:	2902      	cmp	r1, #2
 80063e6:	60e3      	str	r3, [r4, #12]
 80063e8:	bf9f      	itttt	ls
 80063ea:	68e3      	ldrls	r3, [r4, #12]
 80063ec:	3208      	addls	r2, #8
 80063ee:	189b      	addls	r3, r3, r2
 80063f0:	60e3      	strls	r3, [r4, #12]
 80063f2:	4620      	mov	r0, r4
 80063f4:	f7ff ffb6 	bl	8006364 <WS28xx::SetupBuffers()>
 80063f8:	f002 fd72 	bl	8008ee0 <gd32_spi_dma_begin()>
 80063fc:	68e8      	ldr	r0, [r5, #12]
 80063fe:	f002 fde5 	bl	8008fcc <gd32_spi_dma_set_speed_hz(unsigned int)>
 8006402:	4620      	mov	r0, r4
 8006404:	b003      	add	sp, #12
 8006406:	bd30      	pop	{r4, r5, pc}
 8006408:	00db      	lsls	r3, r3, #3
 800640a:	3301      	adds	r3, #1
 800640c:	e7e9      	b.n	80063e2 <WS28xx::WS28xx(PixelConfiguration&)+0x4e>
 800640e:	bf00      	nop
 8006410:	20000694 	mulcs	r0, r4, r6

08006414 <WS28xx::Update()>:
 8006414:	b430      	push	{r4, r5}
 8006416:	4b0c      	ldr	r3, [pc, #48]	; (8006448 <WS28xx::Update()+0x34>)
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	2200      	movs	r2, #0
 800641c:	68c1      	ldr	r1, [r0, #12]
 800641e:	6944      	ldr	r4, [r0, #20]
 8006420:	4299      	cmp	r1, r3
 8006422:	d807      	bhi.n	8006434 <WS28xx::Update()+0x20>
 8006424:	6980      	ldr	r0, [r0, #24]
 8006426:	084d      	lsrs	r5, r1, #1
 8006428:	2300      	movs	r3, #0
 800642a:	42ab      	cmp	r3, r5
 800642c:	d105      	bne.n	800643a <WS28xx::Update()+0x26>
 800642e:	bc30      	pop	{r4, r5}
 8006430:	f002 bde6 	b.w	8009000 <gd32_spi_dma_tx_start(unsigned char const*, unsigned int)>
 8006434:	54e2      	strb	r2, [r4, r3]
 8006436:	3301      	adds	r3, #1
 8006438:	e7f0      	b.n	800641c <WS28xx::Update()+0x8>
 800643a:	f834 2013 	ldrh.w	r2, [r4, r3, lsl #1]
 800643e:	ba52      	rev16	r2, r2
 8006440:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
 8006444:	3301      	adds	r3, #1
 8006446:	e7f0      	b.n	800642a <WS28xx::Update()+0x16>
 8006448:	20000690 	mulcs	r0, r0, r6

0800644c <WS28xx::Blackout()>:
 800644c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800644e:	e9d0 6305 	ldrd	r6, r3, [r0, #20]
 8006452:	4604      	mov	r4, r0
 8006454:	6143      	str	r3, [r0, #20]
 8006456:	f3bf 8f6f 	isb	sy
 800645a:	f002 fdeb 	bl	8009034 <gd32_spi_dma_tx_is_active()>
 800645e:	2800      	cmp	r0, #0
 8006460:	d1f9      	bne.n	8006456 <WS28xx::Blackout()+0xa>
 8006462:	6822      	ldr	r2, [r4, #0]
 8006464:	6963      	ldr	r3, [r4, #20]
 8006466:	3a0b      	subs	r2, #11
 8006468:	2a02      	cmp	r2, #2
 800646a:	7018      	strb	r0, [r3, #0]
 800646c:	d82a      	bhi.n	80064c4 <WS28xx::Blackout()+0x78>
 800646e:	7058      	strb	r0, [r3, #1]
 8006470:	7098      	strb	r0, [r3, #2]
 8006472:	70d8      	strb	r0, [r3, #3]
 8006474:	4605      	mov	r5, r0
 8006476:	4607      	mov	r7, r0
 8006478:	6863      	ldr	r3, [r4, #4]
 800647a:	42ab      	cmp	r3, r5
 800647c:	d819      	bhi.n	80064b2 <WS28xx::Blackout()+0x66>
 800647e:	68e2      	ldr	r2, [r4, #12]
 8006480:	6821      	ldr	r1, [r4, #0]
 8006482:	6960      	ldr	r0, [r4, #20]
 8006484:	390b      	subs	r1, #11
 8006486:	3a04      	subs	r2, #4
 8006488:	1883      	adds	r3, r0, r2
 800648a:	2901      	cmp	r1, #1
 800648c:	bf94      	ite	ls
 800648e:	21ff      	movls	r1, #255	; 0xff
 8006490:	2100      	movhi	r1, #0
 8006492:	5481      	strb	r1, [r0, r2]
 8006494:	7059      	strb	r1, [r3, #1]
 8006496:	7099      	strb	r1, [r3, #2]
 8006498:	70d9      	strb	r1, [r3, #3]
 800649a:	4620      	mov	r0, r4
 800649c:	f7ff ffba 	bl	8006414 <WS28xx::Update()>
 80064a0:	f3bf 8f6f 	isb	sy
 80064a4:	f002 fdc6 	bl	8009034 <gd32_spi_dma_tx_is_active()>
 80064a8:	2800      	cmp	r0, #0
 80064aa:	d1f9      	bne.n	80064a0 <WS28xx::Blackout()+0x54>
 80064ac:	6166      	str	r6, [r4, #20]
 80064ae:	b003      	add	sp, #12
 80064b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80064b2:	2300      	movs	r3, #0
 80064b4:	4629      	mov	r1, r5
 80064b6:	9700      	str	r7, [sp, #0]
 80064b8:	461a      	mov	r2, r3
 80064ba:	4620      	mov	r0, r4
 80064bc:	f7ff f8ae 	bl	800561c <WS28xx::SetPixel(unsigned int, unsigned char, unsigned char, unsigned char)>
 80064c0:	3501      	adds	r5, #1
 80064c2:	e7d9      	b.n	8006478 <WS28xx::Blackout()+0x2c>
 80064c4:	6963      	ldr	r3, [r4, #20]
 80064c6:	6821      	ldr	r1, [r4, #0]
 80064c8:	1c5a      	adds	r2, r3, #1
 80064ca:	b101      	cbz	r1, 80064ce <WS28xx::Blackout()+0x82>
 80064cc:	7c21      	ldrb	r1, [r4, #16]
 80064ce:	68e0      	ldr	r0, [r4, #12]
 80064d0:	3001      	adds	r0, #1
 80064d2:	4403      	add	r3, r0
 80064d4:	429a      	cmp	r2, r3
 80064d6:	d0e0      	beq.n	800649a <WS28xx::Blackout()+0x4e>
 80064d8:	f802 1b01 	strb.w	r1, [r2], #1
 80064dc:	e7fa      	b.n	80064d4 <WS28xx::Blackout()+0x88>
	...

080064e0 <SpiFlashStore::GetStoreOffset(spiflashstore::Store)>:
 80064e0:	b510      	push	{r4, lr}
 80064e2:	4a05      	ldr	r2, [pc, #20]	; (80064f8 <SpiFlashStore::GetStoreOffset(spiflashstore::Store)+0x18>)
 80064e4:	2300      	movs	r3, #0
 80064e6:	2020      	movs	r0, #32
 80064e8:	428b      	cmp	r3, r1
 80064ea:	d100      	bne.n	80064ee <SpiFlashStore::GetStoreOffset(spiflashstore::Store)+0xe>
 80064ec:	bd10      	pop	{r4, pc}
 80064ee:	f852 4b04 	ldr.w	r4, [r2], #4
 80064f2:	3301      	adds	r3, #1
 80064f4:	4420      	add	r0, r4
 80064f6:	e7f7      	b.n	80064e8 <SpiFlashStore::GetStoreOffset(spiflashstore::Store)+0x8>
 80064f8:	0800a730 	stmdaeq	r0, {r4, r5, r8, r9, sl, sp, pc}

080064fc <SpiFlashStore::Init()>:
 80064fc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006500:	f8df 8128 	ldr.w	r8, [pc, #296]	; 800662c <SpiFlashStore::Init()+0x130>
 8006504:	b085      	sub	sp, #20
 8006506:	4607      	mov	r7, r0
 8006508:	f8d8 0000 	ldr.w	r0, [r8]
 800650c:	f000 fb86 	bl	8006c1c <FlashRom::GetSectorSize() const>
 8006510:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
 8006514:	4605      	mov	r5, r0
 8006516:	d17e      	bne.n	8006616 <SpiFlashStore::Init()+0x11a>
 8006518:	f8d8 0000 	ldr.w	r0, [r8]
 800651c:	f000 fb76 	bl	8006c0c <FlashRom::GetSize() const>
 8006520:	4b3e      	ldr	r3, [pc, #248]	; (800661c <SpiFlashStore::Init()+0x120>)
 8006522:	f5a0 5180 	sub.w	r1, r0, #4096	; 0x1000
 8006526:	f3c1 060b 	ubfx	r6, r1, #0, #12
 800652a:	6019      	str	r1, [r3, #0]
 800652c:	2e00      	cmp	r6, #0
 800652e:	d172      	bne.n	8006616 <SpiFlashStore::Init()+0x11a>
 8006530:	4c3b      	ldr	r4, [pc, #236]	; (8006620 <SpiFlashStore::Init()+0x124>)
 8006532:	ab03      	add	r3, sp, #12
 8006534:	9300      	str	r3, [sp, #0]
 8006536:	462a      	mov	r2, r5
 8006538:	4623      	mov	r3, r4
 800653a:	f8d8 0000 	ldr.w	r0, [r8]
 800653e:	f000 fb70 	bl	8006c22 <FlashRom::Read(unsigned int, unsigned int, unsigned char*, flashrom::result&)>
 8006542:	7823      	ldrb	r3, [r4, #0]
 8006544:	2b41      	cmp	r3, #65	; 0x41
 8006546:	bf1c      	itt	ne
 8006548:	2341      	movne	r3, #65	; 0x41
 800654a:	7023      	strbne	r3, [r4, #0]
 800654c:	7863      	ldrb	r3, [r4, #1]
 800654e:	bf14      	ite	ne
 8006550:	4635      	movne	r5, r6
 8006552:	2501      	moveq	r5, #1
 8006554:	2b76      	cmp	r3, #118	; 0x76
 8006556:	bf1c      	itt	ne
 8006558:	2376      	movne	r3, #118	; 0x76
 800655a:	7063      	strbne	r3, [r4, #1]
 800655c:	78a3      	ldrb	r3, [r4, #2]
 800655e:	bf18      	it	ne
 8006560:	2500      	movne	r5, #0
 8006562:	2b56      	cmp	r3, #86	; 0x56
 8006564:	bf1c      	itt	ne
 8006566:	2356      	movne	r3, #86	; 0x56
 8006568:	70a3      	strbne	r3, [r4, #2]
 800656a:	78e3      	ldrb	r3, [r4, #3]
 800656c:	bf18      	it	ne
 800656e:	2500      	movne	r5, #0
 8006570:	2b10      	cmp	r3, #16
 8006572:	d023      	beq.n	80065bc <SpiFlashStore::Init()+0xc0>
 8006574:	2310      	movs	r3, #16
 8006576:	70e3      	strb	r3, [r4, #3]
 8006578:	4b2a      	ldr	r3, [pc, #168]	; (8006624 <SpiFlashStore::Init()+0x128>)
 800657a:	f8df 80b4 	ldr.w	r8, [pc, #180]	; 8006630 <SpiFlashStore::Init()+0x134>
 800657e:	2201      	movs	r2, #1
 8006580:	701a      	strb	r2, [r3, #0]
 8006582:	2500      	movs	r5, #0
 8006584:	f04f 09ff 	mov.w	r9, #255	; 0xff
 8006588:	4631      	mov	r1, r6
 800658a:	4638      	mov	r0, r7
 800658c:	f7ff ffa8 	bl	80064e0 <SpiFlashStore::GetStoreOffset(spiflashstore::Store)>
 8006590:	1821      	adds	r1, r4, r0
 8006592:	5425      	strb	r5, [r4, r0]
 8006594:	704d      	strb	r5, [r1, #1]
 8006596:	708d      	strb	r5, [r1, #2]
 8006598:	70cd      	strb	r5, [r1, #3]
 800659a:	f858 1b04 	ldr.w	r1, [r8], #4
 800659e:	4603      	mov	r3, r0
 80065a0:	1d02      	adds	r2, r0, #4
 80065a2:	440b      	add	r3, r1
 80065a4:	429a      	cmp	r2, r3
 80065a6:	d332      	bcc.n	800660e <SpiFlashStore::Init()+0x112>
 80065a8:	3601      	adds	r6, #1
 80065aa:	2e1c      	cmp	r6, #28
 80065ac:	d1ec      	bne.n	8006588 <SpiFlashStore::Init()+0x8c>
 80065ae:	4b1e      	ldr	r3, [pc, #120]	; (8006628 <SpiFlashStore::Init()+0x12c>)
 80065b0:	2501      	movs	r5, #1
 80065b2:	601d      	str	r5, [r3, #0]
 80065b4:	4628      	mov	r0, r5
 80065b6:	b005      	add	sp, #20
 80065b8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80065bc:	2d00      	cmp	r5, #0
 80065be:	d0db      	beq.n	8006578 <SpiFlashStore::Init()+0x7c>
 80065c0:	f04f 0900 	mov.w	r9, #0
 80065c4:	46c8      	mov	r8, r9
 80065c6:	4631      	mov	r1, r6
 80065c8:	4638      	mov	r0, r7
 80065ca:	f7ff ff89 	bl	80064e0 <SpiFlashStore::GetStoreOffset(spiflashstore::Store)>
 80065ce:	5c23      	ldrb	r3, [r4, r0]
 80065d0:	2bff      	cmp	r3, #255	; 0xff
 80065d2:	d112      	bne.n	80065fa <SpiFlashStore::Init()+0xfe>
 80065d4:	1823      	adds	r3, r4, r0
 80065d6:	785a      	ldrb	r2, [r3, #1]
 80065d8:	2aff      	cmp	r2, #255	; 0xff
 80065da:	d10e      	bne.n	80065fa <SpiFlashStore::Init()+0xfe>
 80065dc:	789a      	ldrb	r2, [r3, #2]
 80065de:	2aff      	cmp	r2, #255	; 0xff
 80065e0:	d10b      	bne.n	80065fa <SpiFlashStore::Init()+0xfe>
 80065e2:	78da      	ldrb	r2, [r3, #3]
 80065e4:	2aff      	cmp	r2, #255	; 0xff
 80065e6:	d108      	bne.n	80065fa <SpiFlashStore::Init()+0xfe>
 80065e8:	f804 8000 	strb.w	r8, [r4, r0]
 80065ec:	46a9      	mov	r9, r5
 80065ee:	f883 8001 	strb.w	r8, [r3, #1]
 80065f2:	f883 8002 	strb.w	r8, [r3, #2]
 80065f6:	f883 8003 	strb.w	r8, [r3, #3]
 80065fa:	3601      	adds	r6, #1
 80065fc:	2e1c      	cmp	r6, #28
 80065fe:	d1e2      	bne.n	80065c6 <SpiFlashStore::Init()+0xca>
 8006600:	f1b9 0f00 	cmp.w	r9, #0
 8006604:	d0d6      	beq.n	80065b4 <SpiFlashStore::Init()+0xb8>
 8006606:	4b08      	ldr	r3, [pc, #32]	; (8006628 <SpiFlashStore::Init()+0x12c>)
 8006608:	2201      	movs	r2, #1
 800660a:	601a      	str	r2, [r3, #0]
 800660c:	e7d2      	b.n	80065b4 <SpiFlashStore::Init()+0xb8>
 800660e:	f804 9002 	strb.w	r9, [r4, r2]
 8006612:	3201      	adds	r2, #1
 8006614:	e7c6      	b.n	80065a4 <SpiFlashStore::Init()+0xa8>
 8006616:	2500      	movs	r5, #0
 8006618:	e7cc      	b.n	80065b4 <SpiFlashStore::Init()+0xb8>
 800661a:	bf00      	nop
 800661c:	2000169c 	mulcs	r0, ip, r6
 8006620:	2000069c 	mulcs	r0, ip, r6
 8006624:	200016b0 			; <UNDEFINED> instruction: 0x200016b0
 8006628:	200016a8 	andcs	r1, r0, r8, lsr #13
 800662c:	200016c8 	andcs	r1, r0, r8, asr #13
 8006630:	0800a730 	stmdaeq	r0, {r4, r5, r8, r9, sl, sp, pc}

08006634 <SpiFlashStore::SpiFlashStore()>:
 8006634:	b538      	push	{r3, r4, r5, lr}
 8006636:	4b0d      	ldr	r3, [pc, #52]	; (800666c <SpiFlashStore::SpiFlashStore()+0x38>)
 8006638:	4d0d      	ldr	r5, [pc, #52]	; (8006670 <SpiFlashStore::SpiFlashStore()+0x3c>)
 800663a:	6018      	str	r0, [r3, #0]
 800663c:	4b0d      	ldr	r3, [pc, #52]	; (8006674 <SpiFlashStore::SpiFlashStore()+0x40>)
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	781b      	ldrb	r3, [r3, #0]
 8006642:	4604      	mov	r4, r0
 8006644:	b113      	cbz	r3, 800664c <SpiFlashStore::SpiFlashStore()+0x18>
 8006646:	f7ff ff59 	bl	80064fc <SpiFlashStore::Init()>
 800664a:	7028      	strb	r0, [r5, #0]
 800664c:	782b      	ldrb	r3, [r5, #0]
 800664e:	b153      	cbz	r3, 8006666 <SpiFlashStore::SpiFlashStore()+0x32>
 8006650:	4909      	ldr	r1, [pc, #36]	; (8006678 <SpiFlashStore::SpiFlashStore()+0x44>)
 8006652:	2320      	movs	r3, #32
 8006654:	2200      	movs	r2, #0
 8006656:	f851 0b04 	ldr.w	r0, [r1], #4
 800665a:	3201      	adds	r2, #1
 800665c:	2a1c      	cmp	r2, #28
 800665e:	4403      	add	r3, r0
 8006660:	d1f9      	bne.n	8006656 <SpiFlashStore::SpiFlashStore()+0x22>
 8006662:	4a06      	ldr	r2, [pc, #24]	; (800667c <SpiFlashStore::SpiFlashStore()+0x48>)
 8006664:	6013      	str	r3, [r2, #0]
 8006666:	4620      	mov	r0, r4
 8006668:	bd38      	pop	{r3, r4, r5, pc}
 800666a:	bf00      	nop
 800666c:	200016ac 	andcs	r1, r0, ip, lsr #13
 8006670:	200016a0 	andcs	r1, r0, r0, lsr #13
 8006674:	200016c8 	andcs	r1, r0, r8, asr #13
 8006678:	0800a730 	stmdaeq	r0, {r4, r5, r8, r9, sl, sp, pc}
 800667c:	200016a4 	andcs	r1, r0, r4, lsr #13

08006680 <SpiFlashStore::ResetSetList(spiflashstore::Store)>:
 8006680:	b508      	push	{r3, lr}
 8006682:	f7ff ff2d 	bl	80064e0 <SpiFlashStore::GetStoreOffset(spiflashstore::Store)>
 8006686:	4905      	ldr	r1, [pc, #20]	; (800669c <SpiFlashStore::ResetSetList(spiflashstore::Store)+0x1c>)
 8006688:	1842      	adds	r2, r0, r1
 800668a:	2300      	movs	r3, #0
 800668c:	540b      	strb	r3, [r1, r0]
 800668e:	7053      	strb	r3, [r2, #1]
 8006690:	7093      	strb	r3, [r2, #2]
 8006692:	70d3      	strb	r3, [r2, #3]
 8006694:	4b02      	ldr	r3, [pc, #8]	; (80066a0 <SpiFlashStore::ResetSetList(spiflashstore::Store)+0x20>)
 8006696:	2201      	movs	r2, #1
 8006698:	601a      	str	r2, [r3, #0]
 800669a:	bd08      	pop	{r3, pc}
 800669c:	2000069c 	mulcs	r0, ip, r6
 80066a0:	200016a8 	andcs	r1, r0, r8, lsr #13

080066a4 <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>:
 80066a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80066a8:	461c      	mov	r4, r3
 80066aa:	4b19      	ldr	r3, [pc, #100]	; (8006710 <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)+0x6c>)
 80066ac:	9e07      	ldr	r6, [sp, #28]
 80066ae:	781f      	ldrb	r7, [r3, #0]
 80066b0:	4615      	mov	r5, r2
 80066b2:	b307      	cbz	r7, 80066f6 <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)+0x52>
 80066b4:	f7ff ff14 	bl	80064e0 <SpiFlashStore::GetStoreOffset(spiflashstore::Store)>
 80066b8:	4a16      	ldr	r2, [pc, #88]	; (8006714 <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)+0x70>)
 80066ba:	1941      	adds	r1, r0, r5
 80066bc:	1e63      	subs	r3, r4, #1
 80066be:	9c06      	ldr	r4, [sp, #24]
 80066c0:	4411      	add	r1, r2
 80066c2:	440c      	add	r4, r1
 80066c4:	f04f 0c00 	mov.w	ip, #0
 80066c8:	42a1      	cmp	r1, r4
 80066ca:	d116      	bne.n	80066fa <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)+0x56>
 80066cc:	f1bc 0f00 	cmp.w	ip, #0
 80066d0:	d011      	beq.n	80066f6 <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)+0x52>
 80066d2:	4b11      	ldr	r3, [pc, #68]	; (8006718 <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)+0x74>)
 80066d4:	6819      	ldr	r1, [r3, #0]
 80066d6:	b109      	cbz	r1, 80066dc <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)+0x38>
 80066d8:	2906      	cmp	r1, #6
 80066da:	d101      	bne.n	80066e0 <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)+0x3c>
 80066dc:	2101      	movs	r1, #1
 80066de:	6019      	str	r1, [r3, #0]
 80066e0:	4b0e      	ldr	r3, [pc, #56]	; (800671c <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)+0x78>)
 80066e2:	6819      	ldr	r1, [r3, #0]
 80066e4:	4b0e      	ldr	r3, [pc, #56]	; (8006720 <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)+0x7c>)
 80066e6:	6019      	str	r1, [r3, #0]
 80066e8:	b12d      	cbz	r5, 80066f6 <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)+0x52>
 80066ea:	b126      	cbz	r6, 80066f6 <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)+0x52>
 80066ec:	9b08      	ldr	r3, [sp, #32]
 80066ee:	4418      	add	r0, r3
 80066f0:	5813      	ldr	r3, [r2, r0]
 80066f2:	4333      	orrs	r3, r6
 80066f4:	5013      	str	r3, [r2, r0]
 80066f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80066fa:	f891 8000 	ldrb.w	r8, [r1]
 80066fe:	f813 ef01 	ldrb.w	lr, [r3, #1]!
 8006702:	45f0      	cmp	r8, lr
 8006704:	bf1c      	itt	ne
 8006706:	f881 e000 	strbne.w	lr, [r1]
 800670a:	46bc      	movne	ip, r7
 800670c:	3101      	adds	r1, #1
 800670e:	e7db      	b.n	80066c8 <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)+0x24>
 8006710:	200016a0 	andcs	r1, r0, r0, lsr #13
 8006714:	2000069c 	mulcs	r0, ip, r6
 8006718:	200016a8 	andcs	r1, r0, r8, lsr #13
 800671c:	20001814 	andcs	r1, r0, r4, lsl r8
 8006720:	20000698 	mulcs	r0, r8, r6

08006724 <SpiFlashStore::Copy(spiflashstore::Store, void*, unsigned int, unsigned int)>:
 8006724:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8006728:	461d      	mov	r5, r3
 800672a:	4b11      	ldr	r3, [pc, #68]	; (8006770 <SpiFlashStore::Copy(spiflashstore::Store, void*, unsigned int, unsigned int)+0x4c>)
 800672c:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
 8006730:	781b      	ldrb	r3, [r3, #0]
 8006732:	4607      	mov	r7, r0
 8006734:	4614      	mov	r4, r2
 8006736:	b1c3      	cbz	r3, 800676a <SpiFlashStore::Copy(spiflashstore::Store, void*, unsigned int, unsigned int)+0x46>
 8006738:	f7ff fed2 	bl	80064e0 <SpiFlashStore::GetStoreOffset(spiflashstore::Store)>
 800673c:	4a0d      	ldr	r2, [pc, #52]	; (8006774 <SpiFlashStore::Copy(spiflashstore::Store, void*, unsigned int, unsigned int)+0x50>)
 800673e:	eb00 0608 	add.w	r6, r0, r8
 8006742:	18b3      	adds	r3, r6, r2
 8006744:	5990      	ldr	r0, [r2, r6]
 8006746:	b140      	cbz	r0, 800675a <SpiFlashStore::Copy(spiflashstore::Store, void*, unsigned int, unsigned int)+0x36>
 8006748:	3c01      	subs	r4, #1
 800674a:	441d      	add	r5, r3
 800674c:	429d      	cmp	r5, r3
 800674e:	d00c      	beq.n	800676a <SpiFlashStore::Copy(spiflashstore::Store, void*, unsigned int, unsigned int)+0x46>
 8006750:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006754:	f804 2f01 	strb.w	r2, [r4, #1]!
 8006758:	e7f8      	b.n	800674c <SpiFlashStore::Copy(spiflashstore::Store, void*, unsigned int, unsigned int)+0x28>
 800675a:	e9cd 0001 	strd	r0, r0, [sp, #4]
 800675e:	9500      	str	r5, [sp, #0]
 8006760:	4623      	mov	r3, r4
 8006762:	4642      	mov	r2, r8
 8006764:	4638      	mov	r0, r7
 8006766:	f7ff ff9d 	bl	80066a4 <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 800676a:	b004      	add	sp, #16
 800676c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006770:	200016a0 	andcs	r1, r0, r0, lsr #13
 8006774:	2000069c 	mulcs	r0, ip, r6

08006778 <SpiFlashStore::Flash()>:
 8006778:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800677a:	4c25      	ldr	r4, [pc, #148]	; (8006810 <SpiFlashStore::Flash()+0x98>)
 800677c:	6820      	ldr	r0, [r4, #0]
 800677e:	2800      	cmp	r0, #0
 8006780:	d043      	beq.n	800680a <SpiFlashStore::Flash()+0x92>
 8006782:	3801      	subs	r0, #1
 8006784:	2805      	cmp	r0, #5
 8006786:	d831      	bhi.n	80067ec <SpiFlashStore::Flash()+0x74>
 8006788:	e8df f000 	tbb	[pc, r0]
 800678c:	2e140b03 	vnmlscs.f64	d0, d4, d3
 8006790:	4b203025 	blmi	881282c <__exidx_end+0x807adc>
 8006794:	681a      	ldr	r2, [r3, #0]
 8006796:	4b20      	ldr	r3, [pc, #128]	; (8006818 <SpiFlashStore::Flash()+0xa0>)
 8006798:	601a      	str	r2, [r3, #0]
 800679a:	2302      	movs	r3, #2
 800679c:	6023      	str	r3, [r4, #0]
 800679e:	2001      	movs	r0, #1
 80067a0:	e033      	b.n	800680a <SpiFlashStore::Flash()+0x92>
 80067a2:	4b1c      	ldr	r3, [pc, #112]	; (8006814 <SpiFlashStore::Flash()+0x9c>)
 80067a4:	4a1c      	ldr	r2, [pc, #112]	; (8006818 <SpiFlashStore::Flash()+0xa0>)
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	6812      	ldr	r2, [r2, #0]
 80067aa:	1a9b      	subs	r3, r3, r2
 80067ac:	2b63      	cmp	r3, #99	; 0x63
 80067ae:	d9f6      	bls.n	800679e <SpiFlashStore::Flash()+0x26>
 80067b0:	2303      	movs	r3, #3
 80067b2:	e7f3      	b.n	800679c <SpiFlashStore::Flash()+0x24>
 80067b4:	4919      	ldr	r1, [pc, #100]	; (800681c <SpiFlashStore::Flash()+0xa4>)
 80067b6:	481a      	ldr	r0, [pc, #104]	; (8006820 <SpiFlashStore::Flash()+0xa8>)
 80067b8:	6809      	ldr	r1, [r1, #0]
 80067ba:	6800      	ldr	r0, [r0, #0]
 80067bc:	ab03      	add	r3, sp, #12
 80067be:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80067c2:	f000 fa3d 	bl	8006c40 <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)>
 80067c6:	2800      	cmp	r0, #0
 80067c8:	d0e9      	beq.n	800679e <SpiFlashStore::Flash()+0x26>
 80067ca:	4b12      	ldr	r3, [pc, #72]	; (8006814 <SpiFlashStore::Flash()+0x9c>)
 80067cc:	681a      	ldr	r2, [r3, #0]
 80067ce:	4b12      	ldr	r3, [pc, #72]	; (8006818 <SpiFlashStore::Flash()+0xa0>)
 80067d0:	601a      	str	r2, [r3, #0]
 80067d2:	2305      	movs	r3, #5
 80067d4:	e7e2      	b.n	800679c <SpiFlashStore::Flash()+0x24>
 80067d6:	4b0f      	ldr	r3, [pc, #60]	; (8006814 <SpiFlashStore::Flash()+0x9c>)
 80067d8:	4a0f      	ldr	r2, [pc, #60]	; (8006818 <SpiFlashStore::Flash()+0xa0>)
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	6812      	ldr	r2, [r2, #0]
 80067de:	1a9b      	subs	r3, r3, r2
 80067e0:	2b63      	cmp	r3, #99	; 0x63
 80067e2:	d9dc      	bls.n	800679e <SpiFlashStore::Flash()+0x26>
 80067e4:	2304      	movs	r3, #4
 80067e6:	e7d9      	b.n	800679c <SpiFlashStore::Flash()+0x24>
 80067e8:	2306      	movs	r3, #6
 80067ea:	e7d7      	b.n	800679c <SpiFlashStore::Flash()+0x24>
 80067ec:	ab03      	add	r3, sp, #12
 80067ee:	4a0d      	ldr	r2, [pc, #52]	; (8006824 <SpiFlashStore::Flash()+0xac>)
 80067f0:	490a      	ldr	r1, [pc, #40]	; (800681c <SpiFlashStore::Flash()+0xa4>)
 80067f2:	480b      	ldr	r0, [pc, #44]	; (8006820 <SpiFlashStore::Flash()+0xa8>)
 80067f4:	9300      	str	r3, [sp, #0]
 80067f6:	6812      	ldr	r2, [r2, #0]
 80067f8:	4b0b      	ldr	r3, [pc, #44]	; (8006828 <SpiFlashStore::Flash()+0xb0>)
 80067fa:	6809      	ldr	r1, [r1, #0]
 80067fc:	6800      	ldr	r0, [r0, #0]
 80067fe:	f000 fabf 	bl	8006d80 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)>
 8006802:	2800      	cmp	r0, #0
 8006804:	d0cb      	beq.n	800679e <SpiFlashStore::Flash()+0x26>
 8006806:	2000      	movs	r0, #0
 8006808:	6020      	str	r0, [r4, #0]
 800680a:	b004      	add	sp, #16
 800680c:	bd10      	pop	{r4, pc}
 800680e:	bf00      	nop
 8006810:	200016a8 	andcs	r1, r0, r8, lsr #13
 8006814:	20001814 	andcs	r1, r0, r4, lsl r8
 8006818:	20000698 	mulcs	r0, r8, r6
 800681c:	2000169c 	mulcs	r0, ip, r6
 8006820:	200016c8 	andcs	r1, r0, r8, asr #13
 8006824:	200016a4 	andcs	r1, r0, r4, lsr #13
 8006828:	2000069c 	mulcs	r0, ip, r6

0800682c <StoreDisplayUdf::~StoreDisplayUdf()>:
 800682c:	4770      	bx	lr
	...

08006830 <StoreDisplayUdf::Copy(displayudfparams::Params*)>:
 8006830:	b507      	push	{r0, r1, r2, lr}
 8006832:	2300      	movs	r3, #0
 8006834:	4805      	ldr	r0, [pc, #20]	; (800684c <StoreDisplayUdf::Copy(displayudfparams::Params*)+0x1c>)
 8006836:	9300      	str	r3, [sp, #0]
 8006838:	460a      	mov	r2, r1
 800683a:	6800      	ldr	r0, [r0, #0]
 800683c:	2322      	movs	r3, #34	; 0x22
 800683e:	210f      	movs	r1, #15
 8006840:	f7ff ff70 	bl	8006724 <SpiFlashStore::Copy(spiflashstore::Store, void*, unsigned int, unsigned int)>
 8006844:	b003      	add	sp, #12
 8006846:	f85d fb04 	ldr.w	pc, [sp], #4
 800684a:	bf00      	nop
 800684c:	200016ac 	andcs	r1, r0, ip, lsr #13

08006850 <StoreDisplayUdf::Update(displayudfparams::Params const*)>:
 8006850:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006852:	2200      	movs	r2, #0
 8006854:	e9cd 2201 	strd	r2, r2, [sp, #4]
 8006858:	460b      	mov	r3, r1
 800685a:	4805      	ldr	r0, [pc, #20]	; (8006870 <StoreDisplayUdf::Update(displayudfparams::Params const*)+0x20>)
 800685c:	2122      	movs	r1, #34	; 0x22
 800685e:	9100      	str	r1, [sp, #0]
 8006860:	6800      	ldr	r0, [r0, #0]
 8006862:	210f      	movs	r1, #15
 8006864:	f7ff ff1e 	bl	80066a4 <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 8006868:	b005      	add	sp, #20
 800686a:	f85d fb04 	ldr.w	pc, [sp], #4
 800686e:	bf00      	nop
 8006870:	200016ac 	andcs	r1, r0, ip, lsr #13

08006874 <StoreDisplayUdf::~StoreDisplayUdf()>:
 8006874:	b510      	push	{r4, lr}
 8006876:	4604      	mov	r4, r0
 8006878:	f001 f97b 	bl	8007b72 <operator delete(void*)>
 800687c:	4620      	mov	r0, r4
 800687e:	bd10      	pop	{r4, pc}

08006880 <StoreDisplayUdf::StoreDisplayUdf()>:
 8006880:	4a02      	ldr	r2, [pc, #8]	; (800688c <StoreDisplayUdf::StoreDisplayUdf()+0xc>)
 8006882:	6002      	str	r2, [r0, #0]
 8006884:	4a02      	ldr	r2, [pc, #8]	; (8006890 <StoreDisplayUdf::StoreDisplayUdf()+0x10>)
 8006886:	6010      	str	r0, [r2, #0]
 8006888:	4770      	bx	lr
 800688a:	bf00      	nop
 800688c:	0800a7a8 	stmdaeq	r0, {r3, r5, r7, r8, r9, sl, sp, pc}
 8006890:	200016b4 			; <UNDEFINED> instruction: 0x200016b4

08006894 <StoreRDMDevice::~StoreRDMDevice()>:
 8006894:	4770      	bx	lr

08006896 <non-virtual thunk to StoreRDMDevice::~StoreRDMDevice()>:
 8006896:	3804      	subs	r0, #4
 8006898:	4770      	bx	lr
	...

0800689c <StoreRDMDevice::Update(TRDMDeviceParams const*)>:
 800689c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800689e:	2200      	movs	r2, #0
 80068a0:	e9cd 2201 	strd	r2, r2, [sp, #4]
 80068a4:	460b      	mov	r3, r1
 80068a6:	4805      	ldr	r0, [pc, #20]	; (80068bc <StoreRDMDevice::Update(TRDMDeviceParams const*)+0x20>)
 80068a8:	2129      	movs	r1, #41	; 0x29
 80068aa:	9100      	str	r1, [sp, #0]
 80068ac:	6800      	ldr	r0, [r0, #0]
 80068ae:	210b      	movs	r1, #11
 80068b0:	f7ff fef8 	bl	80066a4 <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 80068b4:	b005      	add	sp, #20
 80068b6:	f85d fb04 	ldr.w	pc, [sp], #4
 80068ba:	bf00      	nop
 80068bc:	200016ac 	andcs	r1, r0, ip, lsr #13

080068c0 <StoreRDMDevice::SaveLabel(char const*, unsigned char)>:
 80068c0:	b570      	push	{r4, r5, r6, lr}
 80068c2:	4d0d      	ldr	r5, [pc, #52]	; (80068f8 <StoreRDMDevice::SaveLabel(char const*, unsigned char)+0x38>)
 80068c4:	b086      	sub	sp, #24
 80068c6:	2401      	movs	r4, #1
 80068c8:	2600      	movs	r6, #0
 80068ca:	6828      	ldr	r0, [r5, #0]
 80068cc:	f88d 2017 	strb.w	r2, [sp, #23]
 80068d0:	460b      	mov	r3, r1
 80068d2:	9200      	str	r2, [sp, #0]
 80068d4:	e9cd 4601 	strd	r4, r6, [sp, #4]
 80068d8:	2204      	movs	r2, #4
 80068da:	210b      	movs	r1, #11
 80068dc:	f7ff fee2 	bl	80066a4 <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 80068e0:	e9cd 4601 	strd	r4, r6, [sp, #4]
 80068e4:	6828      	ldr	r0, [r5, #0]
 80068e6:	9400      	str	r4, [sp, #0]
 80068e8:	f10d 0317 	add.w	r3, sp, #23
 80068ec:	2224      	movs	r2, #36	; 0x24
 80068ee:	210b      	movs	r1, #11
 80068f0:	f7ff fed8 	bl	80066a4 <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 80068f4:	b006      	add	sp, #24
 80068f6:	bd70      	pop	{r4, r5, r6, pc}
 80068f8:	200016ac 	andcs	r1, r0, ip, lsr #13

080068fc <non-virtual thunk to StoreRDMDevice::SaveLabel(char const*, unsigned char)>:
 80068fc:	f1a0 0004 	sub.w	r0, r0, #4
 8006900:	e7de      	b.n	80068c0 <StoreRDMDevice::SaveLabel(char const*, unsigned char)>
 8006902:	bf00      	nop

08006904 <StoreRDMDevice::~StoreRDMDevice()>:
 8006904:	b510      	push	{r4, lr}
 8006906:	4604      	mov	r4, r0
 8006908:	f001 f933 	bl	8007b72 <operator delete(void*)>
 800690c:	4620      	mov	r0, r4
 800690e:	bd10      	pop	{r4, pc}

08006910 <non-virtual thunk to StoreRDMDevice::~StoreRDMDevice()>:
 8006910:	f1a0 0004 	sub.w	r0, r0, #4
 8006914:	e7f6      	b.n	8006904 <StoreRDMDevice::~StoreRDMDevice()>
	...

08006918 <StoreRDMDevice::Copy(TRDMDeviceParams*)>:
 8006918:	b507      	push	{r0, r1, r2, lr}
 800691a:	2300      	movs	r3, #0
 800691c:	4805      	ldr	r0, [pc, #20]	; (8006934 <StoreRDMDevice::Copy(TRDMDeviceParams*)+0x1c>)
 800691e:	9300      	str	r3, [sp, #0]
 8006920:	460a      	mov	r2, r1
 8006922:	6800      	ldr	r0, [r0, #0]
 8006924:	2329      	movs	r3, #41	; 0x29
 8006926:	210b      	movs	r1, #11
 8006928:	f7ff fefc 	bl	8006724 <SpiFlashStore::Copy(spiflashstore::Store, void*, unsigned int, unsigned int)>
 800692c:	b003      	add	sp, #12
 800692e:	f85d fb04 	ldr.w	pc, [sp], #4
 8006932:	bf00      	nop
 8006934:	200016ac 	andcs	r1, r0, ip, lsr #13

08006938 <StoreRDMDevice::StoreRDMDevice()>:
 8006938:	4a03      	ldr	r2, [pc, #12]	; (8006948 <StoreRDMDevice::StoreRDMDevice()+0x10>)
 800693a:	6002      	str	r2, [r0, #0]
 800693c:	321c      	adds	r2, #28
 800693e:	6042      	str	r2, [r0, #4]
 8006940:	4a02      	ldr	r2, [pc, #8]	; (800694c <StoreRDMDevice::StoreRDMDevice()+0x14>)
 8006942:	6010      	str	r0, [r2, #0]
 8006944:	4770      	bx	lr
 8006946:	bf00      	nop
 8006948:	0800a7c0 	stmdaeq	r0, {r6, r7, r8, r9, sl, sp, pc}
 800694c:	200016b8 			; <UNDEFINED> instruction: 0x200016b8

08006950 <StoreRDMSensors::~StoreRDMSensors()>:
 8006950:	4770      	bx	lr
	...

08006954 <StoreRDMSensors::Copy(TRDMSensorsParams*)>:
 8006954:	b507      	push	{r0, r1, r2, lr}
 8006956:	2300      	movs	r3, #0
 8006958:	4805      	ldr	r0, [pc, #20]	; (8006970 <StoreRDMSensors::Copy(TRDMSensorsParams*)+0x1c>)
 800695a:	9300      	str	r3, [sp, #0]
 800695c:	460a      	mov	r2, r1
 800695e:	6800      	ldr	r0, [r0, #0]
 8006960:	2334      	movs	r3, #52	; 0x34
 8006962:	2117      	movs	r1, #23
 8006964:	f7ff fede 	bl	8006724 <SpiFlashStore::Copy(spiflashstore::Store, void*, unsigned int, unsigned int)>
 8006968:	b003      	add	sp, #12
 800696a:	f85d fb04 	ldr.w	pc, [sp], #4
 800696e:	bf00      	nop
 8006970:	200016ac 	andcs	r1, r0, ip, lsr #13

08006974 <StoreRDMSensors::Update(TRDMSensorsParams const*)>:
 8006974:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006976:	2200      	movs	r2, #0
 8006978:	e9cd 2201 	strd	r2, r2, [sp, #4]
 800697c:	460b      	mov	r3, r1
 800697e:	4805      	ldr	r0, [pc, #20]	; (8006994 <StoreRDMSensors::Update(TRDMSensorsParams const*)+0x20>)
 8006980:	2134      	movs	r1, #52	; 0x34
 8006982:	9100      	str	r1, [sp, #0]
 8006984:	6800      	ldr	r0, [r0, #0]
 8006986:	2117      	movs	r1, #23
 8006988:	f7ff fe8c 	bl	80066a4 <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 800698c:	b005      	add	sp, #20
 800698e:	f85d fb04 	ldr.w	pc, [sp], #4
 8006992:	bf00      	nop
 8006994:	200016ac 	andcs	r1, r0, ip, lsr #13

08006998 <StoreRDMSensors::~StoreRDMSensors()>:
 8006998:	b510      	push	{r4, lr}
 800699a:	4604      	mov	r4, r0
 800699c:	f001 f8e9 	bl	8007b72 <operator delete(void*)>
 80069a0:	4620      	mov	r0, r4
 80069a2:	bd10      	pop	{r4, pc}

080069a4 <StoreRDMSensors::StoreRDMSensors()>:
 80069a4:	4a02      	ldr	r2, [pc, #8]	; (80069b0 <StoreRDMSensors::StoreRDMSensors()+0xc>)
 80069a6:	6002      	str	r2, [r0, #0]
 80069a8:	4a02      	ldr	r2, [pc, #8]	; (80069b4 <StoreRDMSensors::StoreRDMSensors()+0x10>)
 80069aa:	6010      	str	r0, [r2, #0]
 80069ac:	4770      	bx	lr
 80069ae:	bf00      	nop
 80069b0:	0800a7f0 	stmdaeq	r0, {r4, r5, r6, r7, r8, r9, sl, sp, pc}
 80069b4:	200016bc 			; <UNDEFINED> instruction: 0x200016bc

080069b8 <StoreRDMSubDevices::~StoreRDMSubDevices()>:
 80069b8:	4770      	bx	lr
	...

080069bc <StoreRDMSubDevices::Copy(TRDMSubDevicesParams*)>:
 80069bc:	b507      	push	{r0, r1, r2, lr}
 80069be:	2300      	movs	r3, #0
 80069c0:	4805      	ldr	r0, [pc, #20]	; (80069d8 <StoreRDMSubDevices::Copy(TRDMSubDevicesParams*)+0x1c>)
 80069c2:	9300      	str	r3, [sp, #0]
 80069c4:	460a      	mov	r2, r1
 80069c6:	6800      	ldr	r0, [r0, #0]
 80069c8:	234c      	movs	r3, #76	; 0x4c
 80069ca:	2118      	movs	r1, #24
 80069cc:	f7ff feaa 	bl	8006724 <SpiFlashStore::Copy(spiflashstore::Store, void*, unsigned int, unsigned int)>
 80069d0:	b003      	add	sp, #12
 80069d2:	f85d fb04 	ldr.w	pc, [sp], #4
 80069d6:	bf00      	nop
 80069d8:	200016ac 	andcs	r1, r0, ip, lsr #13

080069dc <StoreRDMSubDevices::Update(TRDMSubDevicesParams const*)>:
 80069dc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80069de:	2200      	movs	r2, #0
 80069e0:	e9cd 2201 	strd	r2, r2, [sp, #4]
 80069e4:	460b      	mov	r3, r1
 80069e6:	4805      	ldr	r0, [pc, #20]	; (80069fc <StoreRDMSubDevices::Update(TRDMSubDevicesParams const*)+0x20>)
 80069e8:	214c      	movs	r1, #76	; 0x4c
 80069ea:	9100      	str	r1, [sp, #0]
 80069ec:	6800      	ldr	r0, [r0, #0]
 80069ee:	2118      	movs	r1, #24
 80069f0:	f7ff fe58 	bl	80066a4 <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 80069f4:	b005      	add	sp, #20
 80069f6:	f85d fb04 	ldr.w	pc, [sp], #4
 80069fa:	bf00      	nop
 80069fc:	200016ac 	andcs	r1, r0, ip, lsr #13

08006a00 <StoreRDMSubDevices::~StoreRDMSubDevices()>:
 8006a00:	b510      	push	{r4, lr}
 8006a02:	4604      	mov	r4, r0
 8006a04:	f001 f8b5 	bl	8007b72 <operator delete(void*)>
 8006a08:	4620      	mov	r0, r4
 8006a0a:	bd10      	pop	{r4, pc}

08006a0c <StoreRDMSubDevices::StoreRDMSubDevices()>:
 8006a0c:	4a02      	ldr	r2, [pc, #8]	; (8006a18 <StoreRDMSubDevices::StoreRDMSubDevices()+0xc>)
 8006a0e:	6002      	str	r2, [r0, #0]
 8006a10:	4a02      	ldr	r2, [pc, #8]	; (8006a1c <StoreRDMSubDevices::StoreRDMSubDevices()+0x10>)
 8006a12:	6010      	str	r0, [r2, #0]
 8006a14:	4770      	bx	lr
 8006a16:	bf00      	nop
 8006a18:	0800a808 	stmdaeq	r0, {r3, fp, sp, pc}
 8006a1c:	200016c0 	andcs	r1, r0, r0, asr #13

08006a20 <StoreWS28xxDmx::~StoreWS28xxDmx()>:
 8006a20:	4770      	bx	lr

08006a22 <non-virtual thunk to StoreWS28xxDmx::~StoreWS28xxDmx()>:
 8006a22:	3804      	subs	r0, #4
 8006a24:	4770      	bx	lr
	...

08006a28 <StoreWS28xxDmx::Update(TWS28xxDmxParams const*)>:
 8006a28:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006a2a:	2200      	movs	r2, #0
 8006a2c:	e9cd 2201 	strd	r2, r2, [sp, #4]
 8006a30:	460b      	mov	r3, r1
 8006a32:	4805      	ldr	r0, [pc, #20]	; (8006a48 <StoreWS28xxDmx::Update(TWS28xxDmxParams const*)+0x20>)
 8006a34:	2127      	movs	r1, #39	; 0x27
 8006a36:	9100      	str	r1, [sp, #0]
 8006a38:	6800      	ldr	r0, [r0, #0]
 8006a3a:	2103      	movs	r1, #3
 8006a3c:	f7ff fe32 	bl	80066a4 <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 8006a40:	b005      	add	sp, #20
 8006a42:	f85d fb04 	ldr.w	pc, [sp], #4
 8006a46:	bf00      	nop
 8006a48:	200016ac 	andcs	r1, r0, ip, lsr #13

08006a4c <StoreWS28xxDmx::SaveDmxStartAddress(unsigned short)>:
 8006a4c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8006a4e:	2304      	movs	r3, #4
 8006a50:	2200      	movs	r2, #0
 8006a52:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8006a56:	4807      	ldr	r0, [pc, #28]	; (8006a74 <StoreWS28xxDmx::SaveDmxStartAddress(unsigned short)+0x28>)
 8006a58:	f8ad 1016 	strh.w	r1, [sp, #22]
 8006a5c:	2302      	movs	r3, #2
 8006a5e:	9300      	str	r3, [sp, #0]
 8006a60:	6800      	ldr	r0, [r0, #0]
 8006a62:	f10d 0316 	add.w	r3, sp, #22
 8006a66:	2207      	movs	r2, #7
 8006a68:	2103      	movs	r1, #3
 8006a6a:	f7ff fe1b 	bl	80066a4 <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 8006a6e:	b007      	add	sp, #28
 8006a70:	f85d fb04 	ldr.w	pc, [sp], #4
 8006a74:	200016ac 	andcs	r1, r0, ip, lsr #13

08006a78 <non-virtual thunk to StoreWS28xxDmx::SaveDmxStartAddress(unsigned short)>:
 8006a78:	f1a0 0004 	sub.w	r0, r0, #4
 8006a7c:	e7e6      	b.n	8006a4c <StoreWS28xxDmx::SaveDmxStartAddress(unsigned short)>
 8006a7e:	bf00      	nop

08006a80 <StoreWS28xxDmx::SaveTestPattern(unsigned char)>:
 8006a80:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8006a82:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8006a86:	2200      	movs	r2, #0
 8006a88:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8006a8c:	4807      	ldr	r0, [pc, #28]	; (8006aac <StoreWS28xxDmx::SaveTestPattern(unsigned char)+0x2c>)
 8006a8e:	f88d 1017 	strb.w	r1, [sp, #23]
 8006a92:	2301      	movs	r3, #1
 8006a94:	9300      	str	r3, [sp, #0]
 8006a96:	6800      	ldr	r0, [r0, #0]
 8006a98:	f10d 0317 	add.w	r3, sp, #23
 8006a9c:	2226      	movs	r2, #38	; 0x26
 8006a9e:	2103      	movs	r1, #3
 8006aa0:	f7ff fe00 	bl	80066a4 <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 8006aa4:	b007      	add	sp, #28
 8006aa6:	f85d fb04 	ldr.w	pc, [sp], #4
 8006aaa:	bf00      	nop
 8006aac:	200016ac 	andcs	r1, r0, ip, lsr #13

08006ab0 <non-virtual thunk to StoreWS28xxDmx::SaveTestPattern(unsigned char)>:
 8006ab0:	f1a0 0004 	sub.w	r0, r0, #4
 8006ab4:	e7e4      	b.n	8006a80 <StoreWS28xxDmx::SaveTestPattern(unsigned char)>
 8006ab6:	bf00      	nop

08006ab8 <StoreWS28xxDmx::SaveMap(unsigned char)>:
 8006ab8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8006aba:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006abe:	2200      	movs	r2, #0
 8006ac0:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8006ac4:	4807      	ldr	r0, [pc, #28]	; (8006ae4 <StoreWS28xxDmx::SaveMap(unsigned char)+0x2c>)
 8006ac6:	f88d 1017 	strb.w	r1, [sp, #23]
 8006aca:	2301      	movs	r3, #1
 8006acc:	9300      	str	r3, [sp, #0]
 8006ace:	6800      	ldr	r0, [r0, #0]
 8006ad0:	f10d 0317 	add.w	r3, sp, #23
 8006ad4:	2213      	movs	r2, #19
 8006ad6:	2103      	movs	r1, #3
 8006ad8:	f7ff fde4 	bl	80066a4 <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 8006adc:	b007      	add	sp, #28
 8006ade:	f85d fb04 	ldr.w	pc, [sp], #4
 8006ae2:	bf00      	nop
 8006ae4:	200016ac 	andcs	r1, r0, ip, lsr #13

08006ae8 <non-virtual thunk to StoreWS28xxDmx::SaveMap(unsigned char)>:
 8006ae8:	f1a0 0004 	sub.w	r0, r0, #4
 8006aec:	e7e4      	b.n	8006ab8 <StoreWS28xxDmx::SaveMap(unsigned char)>
 8006aee:	bf00      	nop

08006af0 <StoreWS28xxDmx::SaveGroupingCount(unsigned short)>:
 8006af0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8006af2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006af6:	2200      	movs	r2, #0
 8006af8:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8006afc:	4807      	ldr	r0, [pc, #28]	; (8006b1c <StoreWS28xxDmx::SaveGroupingCount(unsigned short)+0x2c>)
 8006afe:	f8ad 1016 	strh.w	r1, [sp, #22]
 8006b02:	2302      	movs	r3, #2
 8006b04:	9300      	str	r3, [sp, #0]
 8006b06:	6800      	ldr	r0, [r0, #0]
 8006b08:	f10d 0316 	add.w	r3, sp, #22
 8006b0c:	2211      	movs	r2, #17
 8006b0e:	2103      	movs	r1, #3
 8006b10:	f7ff fdc8 	bl	80066a4 <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 8006b14:	b007      	add	sp, #28
 8006b16:	f85d fb04 	ldr.w	pc, [sp], #4
 8006b1a:	bf00      	nop
 8006b1c:	200016ac 	andcs	r1, r0, ip, lsr #13

08006b20 <non-virtual thunk to StoreWS28xxDmx::SaveGroupingCount(unsigned short)>:
 8006b20:	f1a0 0004 	sub.w	r0, r0, #4
 8006b24:	e7e4      	b.n	8006af0 <StoreWS28xxDmx::SaveGroupingCount(unsigned short)>
 8006b26:	bf00      	nop

08006b28 <StoreWS28xxDmx::SaveCount(unsigned short)>:
 8006b28:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8006b2a:	2302      	movs	r3, #2
 8006b2c:	2200      	movs	r2, #0
 8006b2e:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8006b32:	4807      	ldr	r0, [pc, #28]	; (8006b50 <StoreWS28xxDmx::SaveCount(unsigned short)+0x28>)
 8006b34:	9300      	str	r3, [sp, #0]
 8006b36:	f8ad 1016 	strh.w	r1, [sp, #22]
 8006b3a:	6800      	ldr	r0, [r0, #0]
 8006b3c:	f10d 0316 	add.w	r3, sp, #22
 8006b40:	2205      	movs	r2, #5
 8006b42:	2103      	movs	r1, #3
 8006b44:	f7ff fdae 	bl	80066a4 <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 8006b48:	b007      	add	sp, #28
 8006b4a:	f85d fb04 	ldr.w	pc, [sp], #4
 8006b4e:	bf00      	nop
 8006b50:	200016ac 	andcs	r1, r0, ip, lsr #13

08006b54 <non-virtual thunk to StoreWS28xxDmx::SaveCount(unsigned short)>:
 8006b54:	f1a0 0004 	sub.w	r0, r0, #4
 8006b58:	e7e6      	b.n	8006b28 <StoreWS28xxDmx::SaveCount(unsigned short)>
 8006b5a:	bf00      	nop

08006b5c <StoreWS28xxDmx::SaveType(unsigned char)>:
 8006b5c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8006b5e:	2301      	movs	r3, #1
 8006b60:	2200      	movs	r2, #0
 8006b62:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8006b66:	4807      	ldr	r0, [pc, #28]	; (8006b84 <StoreWS28xxDmx::SaveType(unsigned char)+0x28>)
 8006b68:	9300      	str	r3, [sp, #0]
 8006b6a:	f88d 1017 	strb.w	r1, [sp, #23]
 8006b6e:	6800      	ldr	r0, [r0, #0]
 8006b70:	f10d 0317 	add.w	r3, sp, #23
 8006b74:	2204      	movs	r2, #4
 8006b76:	2103      	movs	r1, #3
 8006b78:	f7ff fd94 	bl	80066a4 <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 8006b7c:	b007      	add	sp, #28
 8006b7e:	f85d fb04 	ldr.w	pc, [sp], #4
 8006b82:	bf00      	nop
 8006b84:	200016ac 	andcs	r1, r0, ip, lsr #13

08006b88 <non-virtual thunk to StoreWS28xxDmx::SaveType(unsigned char)>:
 8006b88:	f1a0 0004 	sub.w	r0, r0, #4
 8006b8c:	e7e6      	b.n	8006b5c <StoreWS28xxDmx::SaveType(unsigned char)>
 8006b8e:	bf00      	nop

08006b90 <StoreWS28xxDmx::~StoreWS28xxDmx()>:
 8006b90:	b510      	push	{r4, lr}
 8006b92:	4604      	mov	r4, r0
 8006b94:	f000 ffed 	bl	8007b72 <operator delete(void*)>
 8006b98:	4620      	mov	r0, r4
 8006b9a:	bd10      	pop	{r4, pc}

08006b9c <non-virtual thunk to StoreWS28xxDmx::~StoreWS28xxDmx()>:
 8006b9c:	f1a0 0004 	sub.w	r0, r0, #4
 8006ba0:	e7f6      	b.n	8006b90 <StoreWS28xxDmx::~StoreWS28xxDmx()>
	...

08006ba4 <StoreWS28xxDmx::Copy(TWS28xxDmxParams*)>:
 8006ba4:	b507      	push	{r0, r1, r2, lr}
 8006ba6:	2300      	movs	r3, #0
 8006ba8:	4805      	ldr	r0, [pc, #20]	; (8006bc0 <StoreWS28xxDmx::Copy(TWS28xxDmxParams*)+0x1c>)
 8006baa:	9300      	str	r3, [sp, #0]
 8006bac:	460a      	mov	r2, r1
 8006bae:	6800      	ldr	r0, [r0, #0]
 8006bb0:	2327      	movs	r3, #39	; 0x27
 8006bb2:	2103      	movs	r1, #3
 8006bb4:	f7ff fdb6 	bl	8006724 <SpiFlashStore::Copy(spiflashstore::Store, void*, unsigned int, unsigned int)>
 8006bb8:	b003      	add	sp, #12
 8006bba:	f85d fb04 	ldr.w	pc, [sp], #4
 8006bbe:	bf00      	nop
 8006bc0:	200016ac 	andcs	r1, r0, ip, lsr #13

08006bc4 <StoreWS28xxDmx::StoreWS28xxDmx()>:
 8006bc4:	4a03      	ldr	r2, [pc, #12]	; (8006bd4 <StoreWS28xxDmx::StoreWS28xxDmx()+0x10>)
 8006bc6:	6002      	str	r2, [r0, #0]
 8006bc8:	3230      	adds	r2, #48	; 0x30
 8006bca:	6042      	str	r2, [r0, #4]
 8006bcc:	4a02      	ldr	r2, [pc, #8]	; (8006bd8 <StoreWS28xxDmx::StoreWS28xxDmx()+0x14>)
 8006bce:	6010      	str	r0, [r2, #0]
 8006bd0:	4770      	bx	lr
 8006bd2:	bf00      	nop
 8006bd4:	0800a820 	stmdaeq	r0, {r5, fp, sp, pc}
 8006bd8:	200016c4 	andcs	r1, r0, r4, asr #13

08006bdc <FlashRom::FlashRom()>:
 8006bdc:	4b07      	ldr	r3, [pc, #28]	; (8006bfc <FlashRom::FlashRom()+0x20>)
 8006bde:	4908      	ldr	r1, [pc, #32]	; (8006c00 <FlashRom::FlashRom()+0x24>)
 8006be0:	b510      	push	{r4, lr}
 8006be2:	6018      	str	r0, [r3, #0]
 8006be4:	2301      	movs	r3, #1
 8006be6:	7003      	strb	r3, [r0, #0]
 8006be8:	4b06      	ldr	r3, [pc, #24]	; (8006c04 <FlashRom::FlashRom()+0x28>)
 8006bea:	f8b3 30e0 	ldrh.w	r3, [r3, #224]	; 0xe0
 8006bee:	4604      	mov	r4, r0
 8006bf0:	029a      	lsls	r2, r3, #10
 8006bf2:	4805      	ldr	r0, [pc, #20]	; (8006c08 <FlashRom::FlashRom()+0x2c>)
 8006bf4:	f7fa fcb6 	bl	8001564 <printf>
 8006bf8:	4620      	mov	r0, r4
 8006bfa:	bd10      	pop	{r4, pc}
 8006bfc:	200016c8 	andcs	r1, r0, r8, asr #13
 8006c00:	08009a88 	stmdaeq	r0, {r3, r7, r9, fp, ip, pc}
 8006c04:	1ffff700 	svcne	0x00fff700
 8006c08:	0800a870 	stmdaeq	r0, {r4, r5, r6, fp, sp, pc}

08006c0c <FlashRom::GetSize() const>:
 8006c0c:	4b02      	ldr	r3, [pc, #8]	; (8006c18 <FlashRom::GetSize() const+0xc>)
 8006c0e:	f8b3 00e0 	ldrh.w	r0, [r3, #224]	; 0xe0
 8006c12:	0280      	lsls	r0, r0, #10
 8006c14:	4770      	bx	lr
 8006c16:	bf00      	nop
 8006c18:	1ffff700 	svcne	0x00fff700

08006c1c <FlashRom::GetSectorSize() const>:
 8006c1c:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8006c20:	4770      	bx	lr

08006c22 <FlashRom::Read(unsigned int, unsigned int, unsigned char*, flashrom::result&)>:
 8006c22:	f101 6100 	add.w	r1, r1, #134217728	; 0x8000000
 8006c26:	441a      	add	r2, r3
 8006c28:	4293      	cmp	r3, r2
 8006c2a:	d104      	bne.n	8006c36 <FlashRom::Read(unsigned int, unsigned int, unsigned char*, flashrom::result&)+0x14>
 8006c2c:	9b00      	ldr	r3, [sp, #0]
 8006c2e:	2200      	movs	r2, #0
 8006c30:	601a      	str	r2, [r3, #0]
 8006c32:	2001      	movs	r0, #1
 8006c34:	4770      	bx	lr
 8006c36:	f851 0b04 	ldr.w	r0, [r1], #4
 8006c3a:	f843 0b04 	str.w	r0, [r3], #4
 8006c3e:	e7f3      	b.n	8006c28 <FlashRom::Read(unsigned int, unsigned int, unsigned char*, flashrom::result&)+0x6>

08006c40 <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)>:
 8006c40:	b538      	push	{r3, r4, r5, lr}
 8006c42:	4c48      	ldr	r4, [pc, #288]	; (8006d64 <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x124>)
 8006c44:	2000      	movs	r0, #0
 8006c46:	6018      	str	r0, [r3, #0]
 8006c48:	6823      	ldr	r3, [r4, #0]
 8006c4a:	2b04      	cmp	r3, #4
 8006c4c:	f200 8082 	bhi.w	8006d54 <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x114>
 8006c50:	e8df f003 	tbb	[pc, r3]
 8006c54:	78452003 	stmdavc	r5, {r0, r1, sp}^
 8006c58:	4b430080 	blmi	90c6e60 <__exidx_end+0x10bc110>
 8006c5c:	f101 6100 	add.w	r1, r1, #134217728	; 0x8000000
 8006c60:	6019      	str	r1, [r3, #0]
 8006c62:	4b42      	ldr	r3, [pc, #264]	; (8006d6c <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x12c>)
 8006c64:	601a      	str	r2, [r3, #0]
 8006c66:	4b42      	ldr	r3, [pc, #264]	; (8006d70 <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x130>)
 8006c68:	f8b3 30e0 	ldrh.w	r3, [r3, #224]	; 0xe0
 8006c6c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006c70:	4b40      	ldr	r3, [pc, #256]	; (8006d74 <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x134>)
 8006c72:	d807      	bhi.n	8006c84 <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x44>
 8006c74:	2201      	movs	r2, #1
 8006c76:	701a      	strb	r2, [r3, #0]
 8006c78:	f001 faf2 	bl	8008260 <fmc_bank0_unlock>
 8006c7c:	2301      	movs	r3, #1
 8006c7e:	6023      	str	r3, [r4, #0]
 8006c80:	2000      	movs	r0, #0
 8006c82:	e026      	b.n	8006cd2 <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x92>
 8006c84:	4a3c      	ldr	r2, [pc, #240]	; (8006d78 <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x138>)
 8006c86:	4291      	cmp	r1, r2
 8006c88:	d3f4      	bcc.n	8006c74 <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x34>
 8006c8a:	2200      	movs	r2, #0
 8006c8c:	701a      	strb	r2, [r3, #0]
 8006c8e:	f001 faf5 	bl	800827c <fmc_bank1_unlock>
 8006c92:	e7f3      	b.n	8006c7c <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x3c>
 8006c94:	4d37      	ldr	r5, [pc, #220]	; (8006d74 <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x134>)
 8006c96:	782b      	ldrb	r3, [r5, #0]
 8006c98:	b15b      	cbz	r3, 8006cb2 <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x72>
 8006c9a:	f001 fb0d 	bl	80082b8 <fmc_bank0_state_get>
 8006c9e:	2801      	cmp	r0, #1
 8006ca0:	d0ee      	beq.n	8006c80 <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x40>
 8006ca2:	7829      	ldrb	r1, [r5, #0]
 8006ca4:	4b35      	ldr	r3, [pc, #212]	; (8006d7c <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x13c>)
 8006ca6:	b939      	cbnz	r1, 8006cb8 <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x78>
 8006ca8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006caa:	f022 0202 	bic.w	r2, r2, #2
 8006cae:	651a      	str	r2, [r3, #80]	; 0x50
 8006cb0:	e006      	b.n	8006cc0 <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x80>
 8006cb2:	f001 fb13 	bl	80082dc <fmc_bank1_state_get>
 8006cb6:	e7f2      	b.n	8006c9e <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x5e>
 8006cb8:	691a      	ldr	r2, [r3, #16]
 8006cba:	f022 0202 	bic.w	r2, r2, #2
 8006cbe:	611a      	str	r2, [r3, #16]
 8006cc0:	4b2a      	ldr	r3, [pc, #168]	; (8006d6c <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x12c>)
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	b94b      	cbnz	r3, 8006cda <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x9a>
 8006cc6:	b129      	cbz	r1, 8006cd4 <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x94>
 8006cc8:	f001 fae6 	bl	8008298 <fmc_bank0_lock>
 8006ccc:	2300      	movs	r3, #0
 8006cce:	6023      	str	r3, [r4, #0]
 8006cd0:	2001      	movs	r0, #1
 8006cd2:	bd38      	pop	{r3, r4, r5, pc}
 8006cd4:	f001 fae8 	bl	80082a8 <fmc_bank1_lock>
 8006cd8:	e7f8      	b.n	8006ccc <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x8c>
 8006cda:	2302      	movs	r3, #2
 8006cdc:	e7cf      	b.n	8006c7e <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x3e>
 8006cde:	4923      	ldr	r1, [pc, #140]	; (8006d6c <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x12c>)
 8006ce0:	680b      	ldr	r3, [r1, #0]
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	d0ca      	beq.n	8006c7c <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x3c>
 8006ce6:	4b23      	ldr	r3, [pc, #140]	; (8006d74 <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x134>)
 8006ce8:	4a1f      	ldr	r2, [pc, #124]	; (8006d68 <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x128>)
 8006cea:	7818      	ldrb	r0, [r3, #0]
 8006cec:	4b23      	ldr	r3, [pc, #140]	; (8006d7c <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x13c>)
 8006cee:	b190      	cbz	r0, 8006d16 <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0xd6>
 8006cf0:	6918      	ldr	r0, [r3, #16]
 8006cf2:	f040 0002 	orr.w	r0, r0, #2
 8006cf6:	6118      	str	r0, [r3, #16]
 8006cf8:	6810      	ldr	r0, [r2, #0]
 8006cfa:	6158      	str	r0, [r3, #20]
 8006cfc:	6918      	ldr	r0, [r3, #16]
 8006cfe:	f040 0040 	orr.w	r0, r0, #64	; 0x40
 8006d02:	6118      	str	r0, [r3, #16]
 8006d04:	680b      	ldr	r3, [r1, #0]
 8006d06:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 8006d0a:	600b      	str	r3, [r1, #0]
 8006d0c:	6813      	ldr	r3, [r2, #0]
 8006d0e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006d12:	6013      	str	r3, [r2, #0]
 8006d14:	e7b2      	b.n	8006c7c <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x3c>
 8006d16:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8006d18:	f040 0002 	orr.w	r0, r0, #2
 8006d1c:	6518      	str	r0, [r3, #80]	; 0x50
 8006d1e:	6810      	ldr	r0, [r2, #0]
 8006d20:	6558      	str	r0, [r3, #84]	; 0x54
 8006d22:	69dd      	ldr	r5, [r3, #28]
 8006d24:	07ad      	lsls	r5, r5, #30
 8006d26:	bf48      	it	mi
 8006d28:	6158      	strmi	r0, [r3, #20]
 8006d2a:	4814      	ldr	r0, [pc, #80]	; (8006d7c <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x13c>)
 8006d2c:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8006d2e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006d32:	6503      	str	r3, [r0, #80]	; 0x50
 8006d34:	680b      	ldr	r3, [r1, #0]
 8006d36:	f5a3 5380 	sub.w	r3, r3, #4096	; 0x1000
 8006d3a:	600b      	str	r3, [r1, #0]
 8006d3c:	6813      	ldr	r3, [r2, #0]
 8006d3e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006d42:	e7e6      	b.n	8006d12 <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0xd2>
 8006d44:	4b0b      	ldr	r3, [pc, #44]	; (8006d74 <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x134>)
 8006d46:	781a      	ldrb	r2, [r3, #0]
 8006d48:	4b0c      	ldr	r3, [pc, #48]	; (8006d7c <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x13c>)
 8006d4a:	b132      	cbz	r2, 8006d5a <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x11a>
 8006d4c:	691a      	ldr	r2, [r3, #16]
 8006d4e:	f022 0201 	bic.w	r2, r2, #1
 8006d52:	611a      	str	r2, [r3, #16]
 8006d54:	2000      	movs	r0, #0
 8006d56:	6020      	str	r0, [r4, #0]
 8006d58:	e7bb      	b.n	8006cd2 <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x92>
 8006d5a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006d5c:	f022 0201 	bic.w	r2, r2, #1
 8006d60:	651a      	str	r2, [r3, #80]	; 0x50
 8006d62:	e7f7      	b.n	8006d54 <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x114>
 8006d64:	200016d0 	ldrdcs	r1, [r0], -r0
 8006d68:	200016d4 	ldrdcs	r1, [r0], -r4
 8006d6c:	200016e0 	andcs	r1, r0, r0, ror #13
 8006d70:	1ffff700 	svcne	0x00fff700
 8006d74:	200016dc 	ldrdcs	r1, [r0], -ip
 8006d78:	0807ffff 	stmdaeq	r7, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, sp, lr, pc}
 8006d7c:	40022000 	andmi	r2, r2, r0

08006d80 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)>:
 8006d80:	b570      	push	{r4, r5, r6, lr}
 8006d82:	9804      	ldr	r0, [sp, #16]
 8006d84:	2400      	movs	r4, #0
 8006d86:	6004      	str	r4, [r0, #0]
 8006d88:	4c48      	ldr	r4, [pc, #288]	; (8006eac <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x12c>)
 8006d8a:	6820      	ldr	r0, [r4, #0]
 8006d8c:	2804      	cmp	r0, #4
 8006d8e:	d848      	bhi.n	8006e22 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0xa2>
 8006d90:	e8df f000 	tbb	[pc, r0]
 8006d94:	22847c03 	addcs	r7, r4, #768	; 0x300
 8006d98:	48450047 	stmdami	r5, {r0, r1, r2, r6}^
 8006d9c:	f101 6100 	add.w	r1, r1, #134217728	; 0x8000000
 8006da0:	6001      	str	r1, [r0, #0]
 8006da2:	4844      	ldr	r0, [pc, #272]	; (8006eb4 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x134>)
 8006da4:	6003      	str	r3, [r0, #0]
 8006da6:	4b44      	ldr	r3, [pc, #272]	; (8006eb8 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x138>)
 8006da8:	601a      	str	r2, [r3, #0]
 8006daa:	4b44      	ldr	r3, [pc, #272]	; (8006ebc <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x13c>)
 8006dac:	f8b3 30e0 	ldrh.w	r3, [r3, #224]	; 0xe0
 8006db0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006db4:	4b42      	ldr	r3, [pc, #264]	; (8006ec0 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x140>)
 8006db6:	d807      	bhi.n	8006dc8 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x48>
 8006db8:	2201      	movs	r2, #1
 8006dba:	701a      	strb	r2, [r3, #0]
 8006dbc:	f001 fa50 	bl	8008260 <fmc_bank0_unlock>
 8006dc0:	2303      	movs	r3, #3
 8006dc2:	6023      	str	r3, [r4, #0]
 8006dc4:	2000      	movs	r0, #0
 8006dc6:	e026      	b.n	8006e16 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x96>
 8006dc8:	4a3e      	ldr	r2, [pc, #248]	; (8006ec4 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x144>)
 8006dca:	4291      	cmp	r1, r2
 8006dcc:	d3f4      	bcc.n	8006db8 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x38>
 8006dce:	2200      	movs	r2, #0
 8006dd0:	701a      	strb	r2, [r3, #0]
 8006dd2:	f001 fa53 	bl	800827c <fmc_bank1_unlock>
 8006dd6:	e7f3      	b.n	8006dc0 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x40>
 8006dd8:	4d39      	ldr	r5, [pc, #228]	; (8006ec0 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x140>)
 8006dda:	782b      	ldrb	r3, [r5, #0]
 8006ddc:	b15b      	cbz	r3, 8006df6 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x76>
 8006dde:	f001 fa6b 	bl	80082b8 <fmc_bank0_state_get>
 8006de2:	2801      	cmp	r0, #1
 8006de4:	d0ee      	beq.n	8006dc4 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x44>
 8006de6:	7829      	ldrb	r1, [r5, #0]
 8006de8:	4b37      	ldr	r3, [pc, #220]	; (8006ec8 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x148>)
 8006dea:	b939      	cbnz	r1, 8006dfc <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x7c>
 8006dec:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006dee:	f022 0201 	bic.w	r2, r2, #1
 8006df2:	651a      	str	r2, [r3, #80]	; 0x50
 8006df4:	e006      	b.n	8006e04 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x84>
 8006df6:	f001 fa71 	bl	80082dc <fmc_bank1_state_get>
 8006dfa:	e7f2      	b.n	8006de2 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x62>
 8006dfc:	691a      	ldr	r2, [r3, #16]
 8006dfe:	f022 0201 	bic.w	r2, r2, #1
 8006e02:	611a      	str	r2, [r3, #16]
 8006e04:	4b2c      	ldr	r3, [pc, #176]	; (8006eb8 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x138>)
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	b94b      	cbnz	r3, 8006e1e <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x9e>
 8006e0a:	b129      	cbz	r1, 8006e18 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x98>
 8006e0c:	f001 fa44 	bl	8008298 <fmc_bank0_lock>
 8006e10:	2300      	movs	r3, #0
 8006e12:	6023      	str	r3, [r4, #0]
 8006e14:	2001      	movs	r0, #1
 8006e16:	bd70      	pop	{r4, r5, r6, pc}
 8006e18:	f001 fa46 	bl	80082a8 <fmc_bank1_lock>
 8006e1c:	e7f8      	b.n	8006e10 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x90>
 8006e1e:	2304      	movs	r3, #4
 8006e20:	e7cf      	b.n	8006dc2 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x42>
 8006e22:	4a25      	ldr	r2, [pc, #148]	; (8006eb8 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x138>)
 8006e24:	6813      	ldr	r3, [r2, #0]
 8006e26:	2b03      	cmp	r3, #3
 8006e28:	d91a      	bls.n	8006e60 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0xe0>
 8006e2a:	4b25      	ldr	r3, [pc, #148]	; (8006ec0 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x140>)
 8006e2c:	7819      	ldrb	r1, [r3, #0]
 8006e2e:	4b26      	ldr	r3, [pc, #152]	; (8006ec8 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x148>)
 8006e30:	b189      	cbz	r1, 8006e56 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0xd6>
 8006e32:	6919      	ldr	r1, [r3, #16]
 8006e34:	f041 0101 	orr.w	r1, r1, #1
 8006e38:	6119      	str	r1, [r3, #16]
 8006e3a:	4d1e      	ldr	r5, [pc, #120]	; (8006eb4 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x134>)
 8006e3c:	481c      	ldr	r0, [pc, #112]	; (8006eb0 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x130>)
 8006e3e:	6829      	ldr	r1, [r5, #0]
 8006e40:	6803      	ldr	r3, [r0, #0]
 8006e42:	f851 6b04 	ldr.w	r6, [r1], #4
 8006e46:	f843 6b04 	str.w	r6, [r3], #4
 8006e4a:	6003      	str	r3, [r0, #0]
 8006e4c:	6813      	ldr	r3, [r2, #0]
 8006e4e:	6029      	str	r1, [r5, #0]
 8006e50:	3b04      	subs	r3, #4
 8006e52:	6013      	str	r3, [r2, #0]
 8006e54:	e7b4      	b.n	8006dc0 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x40>
 8006e56:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8006e58:	f041 0101 	orr.w	r1, r1, #1
 8006e5c:	6519      	str	r1, [r3, #80]	; 0x50
 8006e5e:	e7ec      	b.n	8006e3a <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0xba>
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	d0ad      	beq.n	8006dc0 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x40>
 8006e64:	4b16      	ldr	r3, [pc, #88]	; (8006ec0 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x140>)
 8006e66:	781a      	ldrb	r2, [r3, #0]
 8006e68:	4b17      	ldr	r3, [pc, #92]	; (8006ec8 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x148>)
 8006e6a:	b152      	cbz	r2, 8006e82 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x102>
 8006e6c:	691a      	ldr	r2, [r3, #16]
 8006e6e:	f042 0201 	orr.w	r2, r2, #1
 8006e72:	611a      	str	r2, [r3, #16]
 8006e74:	4a0f      	ldr	r2, [pc, #60]	; (8006eb4 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x134>)
 8006e76:	4b0e      	ldr	r3, [pc, #56]	; (8006eb0 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x130>)
 8006e78:	6812      	ldr	r2, [r2, #0]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	6812      	ldr	r2, [r2, #0]
 8006e7e:	601a      	str	r2, [r3, #0]
 8006e80:	e79e      	b.n	8006dc0 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x40>
 8006e82:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006e84:	f042 0201 	orr.w	r2, r2, #1
 8006e88:	651a      	str	r2, [r3, #80]	; 0x50
 8006e8a:	e7f3      	b.n	8006e74 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0xf4>
 8006e8c:	4b0c      	ldr	r3, [pc, #48]	; (8006ec0 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x140>)
 8006e8e:	781a      	ldrb	r2, [r3, #0]
 8006e90:	4b0d      	ldr	r3, [pc, #52]	; (8006ec8 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x148>)
 8006e92:	b132      	cbz	r2, 8006ea2 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x122>
 8006e94:	691a      	ldr	r2, [r3, #16]
 8006e96:	f022 0202 	bic.w	r2, r2, #2
 8006e9a:	611a      	str	r2, [r3, #16]
 8006e9c:	2000      	movs	r0, #0
 8006e9e:	6020      	str	r0, [r4, #0]
 8006ea0:	e7b9      	b.n	8006e16 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x96>
 8006ea2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006ea4:	f022 0202 	bic.w	r2, r2, #2
 8006ea8:	651a      	str	r2, [r3, #80]	; 0x50
 8006eaa:	e7f7      	b.n	8006e9c <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x11c>
 8006eac:	200016d0 	ldrdcs	r1, [r0], -r0
 8006eb0:	200016cc 	andcs	r1, r0, ip, asr #13
 8006eb4:	200016d8 	ldrdcs	r1, [r0], -r8
 8006eb8:	200016e0 	andcs	r1, r0, r0, ror #13
 8006ebc:	1ffff700 	svcne	0x00fff700
 8006ec0:	200016dc 	ldrdcs	r1, [r0], -ip
 8006ec4:	0807ffff 	stmdaeq	r7, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, sp, lr, pc}
 8006ec8:	40022000 	andmi	r2, r2, r0

08006ecc <Network::Network()>:
 8006ecc:	4b05      	ldr	r3, [pc, #20]	; (8006ee4 <Network::Network()+0x18>)
 8006ece:	4906      	ldr	r1, [pc, #24]	; (8006ee8 <Network::Network()+0x1c>)
 8006ed0:	6018      	str	r0, [r3, #0]
 8006ed2:	1e42      	subs	r2, r0, #1
 8006ed4:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006ed8:	f802 3f01 	strb.w	r3, [r2, #1]!
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	d1f9      	bne.n	8006ed4 <Network::Network()+0x8>
 8006ee0:	4770      	bx	lr
 8006ee2:	bf00      	nop
 8006ee4:	200016e4 	andcs	r1, r0, r4, ror #13
 8006ee8:	0800a89e 	stmdaeq	r0, {r1, r2, r3, r4, r7, fp, sp, pc}

08006eec <Network::MacAddressCopyTo(unsigned char*)>:
 8006eec:	4608      	mov	r0, r1
 8006eee:	f001 b841 	b.w	8007f74 <mac_address_get>

08006ef2 <Display::Write(unsigned char, char const*) [clone .isra.0]>:
 8006ef2:	b430      	push	{r4, r5}
 8006ef4:	b168      	cbz	r0, 8006f12 <Display::Write(unsigned char, char const*) [clone .isra.0]+0x20>
 8006ef6:	7905      	ldrb	r5, [r0, #4]
 8006ef8:	2300      	movs	r3, #0
 8006efa:	5cd4      	ldrb	r4, [r2, r3]
 8006efc:	b11c      	cbz	r4, 8006f06 <Display::Write(unsigned char, char const*) [clone .isra.0]+0x14>
 8006efe:	1c5c      	adds	r4, r3, #1
 8006f00:	429d      	cmp	r5, r3
 8006f02:	4623      	mov	r3, r4
 8006f04:	dcf9      	bgt.n	8006efa <Display::Write(unsigned char, char const*) [clone .isra.0]+0x8>
 8006f06:	6804      	ldr	r4, [r0, #0]
 8006f08:	69e4      	ldr	r4, [r4, #28]
 8006f0a:	b2db      	uxtb	r3, r3
 8006f0c:	46a4      	mov	ip, r4
 8006f0e:	bc30      	pop	{r4, r5}
 8006f10:	4760      	bx	ip
 8006f12:	bc30      	pop	{r4, r5}
 8006f14:	4770      	bx	lr
	...

08006f18 <DisplayUdf::DisplayUdf()>:
 8006f18:	b510      	push	{r4, lr}
 8006f1a:	4604      	mov	r4, r0
 8006f1c:	f000 f94a 	bl	80071b4 <Display::Display()>
 8006f20:	4b05      	ldr	r3, [pc, #20]	; (8006f38 <DisplayUdf::DisplayUdf()+0x20>)
 8006f22:	f104 023c 	add.w	r2, r4, #60	; 0x3c
 8006f26:	601c      	str	r4, [r3, #0]
 8006f28:	2301      	movs	r3, #1
 8006f2a:	f802 3b01 	strb.w	r3, [r2], #1
 8006f2e:	3301      	adds	r3, #1
 8006f30:	2b15      	cmp	r3, #21
 8006f32:	d1fa      	bne.n	8006f2a <DisplayUdf::DisplayUdf()+0x12>
 8006f34:	4620      	mov	r0, r4
 8006f36:	bd10      	pop	{r4, pc}
 8006f38:	200016e8 	andcs	r1, r0, r8, ror #13

08006f3c <DisplayUdf::SetTitle(char const*, ...)>:
 8006f3c:	b40e      	push	{r1, r2, r3}
 8006f3e:	b517      	push	{r0, r1, r2, r4, lr}
 8006f40:	ab05      	add	r3, sp, #20
 8006f42:	4604      	mov	r4, r0
 8006f44:	f853 2b04 	ldr.w	r2, [r3], #4
 8006f48:	9301      	str	r3, [sp, #4]
 8006f4a:	211f      	movs	r1, #31
 8006f4c:	301c      	adds	r0, #28
 8006f4e:	f7fa fb31 	bl	80015b4 <vsnprintf>
 8006f52:	4420      	add	r0, r4
 8006f54:	2300      	movs	r3, #0
 8006f56:	7703      	strb	r3, [r0, #28]
 8006f58:	b003      	add	sp, #12
 8006f5a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006f5e:	b003      	add	sp, #12
 8006f60:	4770      	bx	lr
	...

08006f64 <DisplayUdf::Show()>:
 8006f64:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006f66:	f100 033c 	add.w	r3, r0, #60	; 0x3c
 8006f6a:	4604      	mov	r4, r0
 8006f6c:	f100 0250 	add.w	r2, r0, #80	; 0x50
 8006f70:	21ff      	movs	r1, #255	; 0xff
 8006f72:	f813 0b01 	ldrb.w	r0, [r3], #1
 8006f76:	2806      	cmp	r0, #6
 8006f78:	bf88      	it	hi
 8006f7a:	f803 1c01 	strbhi.w	r1, [r3, #-1]
 8006f7e:	4293      	cmp	r3, r2
 8006f80:	d1f7      	bne.n	8006f72 <DisplayUdf::Show()+0xe>
 8006f82:	2501      	movs	r5, #1
 8006f84:	69a0      	ldr	r0, [r4, #24]
 8006f86:	b118      	cbz	r0, 8006f90 <DisplayUdf::Show()+0x2c>
 8006f88:	6803      	ldr	r3, [r0, #0]
 8006f8a:	4629      	mov	r1, r5
 8006f8c:	691b      	ldr	r3, [r3, #16]
 8006f8e:	4798      	blx	r3
 8006f90:	3501      	adds	r5, #1
 8006f92:	b2ed      	uxtb	r5, r5
 8006f94:	2d06      	cmp	r5, #6
 8006f96:	d1f5      	bne.n	8006f84 <DisplayUdf::Show()+0x20>
 8006f98:	f894 103c 	ldrb.w	r1, [r4, #60]	; 0x3c
 8006f9c:	69a0      	ldr	r0, [r4, #24]
 8006f9e:	f104 021c 	add.w	r2, r4, #28
 8006fa2:	f7ff ffa6 	bl	8006ef2 <Display::Write(unsigned char, char const*) [clone .isra.0]>
 8006fa6:	f894 103d 	ldrb.w	r1, [r4, #61]	; 0x3d
 8006faa:	69a0      	ldr	r0, [r4, #24]
 8006fac:	4a12      	ldr	r2, [pc, #72]	; (8006ff8 <DisplayUdf::Show()+0x94>)
 8006fae:	f7ff ffa0 	bl	8006ef2 <Display::Write(unsigned char, char const*) [clone .isra.0]>
 8006fb2:	4b12      	ldr	r3, [pc, #72]	; (8006ffc <DisplayUdf::Show()+0x98>)
 8006fb4:	f894 103f 	ldrb.w	r1, [r4, #63]	; 0x3f
 8006fb8:	9300      	str	r3, [sp, #0]
 8006fba:	4a11      	ldr	r2, [pc, #68]	; (8007000 <DisplayUdf::Show()+0x9c>)
 8006fbc:	2303      	movs	r3, #3
 8006fbe:	4620      	mov	r0, r4
 8006fc0:	f7f9 fb51 	bl	8000666 <Display::Printf(unsigned char, char const*, ...)>
 8006fc4:	4b0f      	ldr	r3, [pc, #60]	; (8007004 <DisplayUdf::Show()+0xa0>)
 8006fc6:	681a      	ldr	r2, [r3, #0]
 8006fc8:	f892 10a7 	ldrb.w	r1, [r2, #167]	; 0xa7
 8006fcc:	f892 30a8 	ldrb.w	r3, [r2, #168]	; 0xa8
 8006fd0:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 8006fd4:	f892 10a3 	ldrb.w	r1, [r2, #163]	; 0xa3
 8006fd8:	f892 20a4 	ldrb.w	r2, [r2, #164]	; 0xa4
 8006fdc:	eb02 2201 	add.w	r2, r2, r1, lsl #8
 8006fe0:	b292      	uxth	r2, r2
 8006fe2:	9200      	str	r2, [sp, #0]
 8006fe4:	f894 1049 	ldrb.w	r1, [r4, #73]	; 0x49
 8006fe8:	4a07      	ldr	r2, [pc, #28]	; (8007008 <DisplayUdf::Show()+0xa4>)
 8006fea:	b29b      	uxth	r3, r3
 8006fec:	4620      	mov	r0, r4
 8006fee:	f7f9 fb3a 	bl	8000666 <Display::Printf(unsigned char, char const*, ...)>
 8006ff2:	b003      	add	sp, #12
 8006ff4:	bd30      	pop	{r4, r5, pc}
 8006ff6:	bf00      	nop
 8006ff8:	08009a88 	stmdaeq	r0, {r3, r7, r9, fp, ip, pc}
 8006ffc:	2000177c 	andcs	r1, r0, ip, ror r7
 8007000:	0800a8a1 	stmdaeq	r0, {r0, r5, r7, fp, sp, pc}
 8007004:	200001f4 	strdcs	r0, [r0], -r4
 8007008:	0800a8b0 	stmdaeq	r0, {r4, r5, r7, fp, sp, pc}

0800700c <DisplayUdf::Set(unsigned char, displayudf::Labels)>:
 800700c:	1e4b      	subs	r3, r1, #1
 800700e:	2b05      	cmp	r3, #5
 8007010:	b530      	push	{r4, r5, lr}
 8007012:	d80f      	bhi.n	8007034 <DisplayUdf::Set(unsigned char, displayudf::Labels)+0x28>
 8007014:	f100 043c 	add.w	r4, r0, #60	; 0x3c
 8007018:	2300      	movs	r3, #0
 800701a:	f814 5b01 	ldrb.w	r5, [r4], #1
 800701e:	428d      	cmp	r5, r1
 8007020:	d109      	bne.n	8007036 <DisplayUdf::Set(unsigned char, displayudf::Labels)+0x2a>
 8007022:	1884      	adds	r4, r0, r2
 8007024:	4403      	add	r3, r0
 8007026:	f894 403c 	ldrb.w	r4, [r4, #60]	; 0x3c
 800702a:	f883 403c 	strb.w	r4, [r3, #60]	; 0x3c
 800702e:	4402      	add	r2, r0
 8007030:	f882 103c 	strb.w	r1, [r2, #60]	; 0x3c
 8007034:	bd30      	pop	{r4, r5, pc}
 8007036:	3301      	adds	r3, #1
 8007038:	2b14      	cmp	r3, #20
 800703a:	d1ee      	bne.n	800701a <DisplayUdf::Set(unsigned char, displayudf::Labels)+0xe>
 800703c:	e7f7      	b.n	800702e <DisplayUdf::Set(unsigned char, displayudf::Labels)+0x22>

0800703e <DisplayUdfParams::DisplayUdfParams(DisplayUdfParamsStore*)>:
 800703e:	b510      	push	{r4, lr}
 8007040:	2220      	movs	r2, #32
 8007042:	4604      	mov	r4, r0
 8007044:	f840 1b04 	str.w	r1, [r0], #4
 8007048:	2100      	movs	r1, #0
 800704a:	f000 fe2d 	bl	8007ca8 <memset>
 800704e:	f647 7305 	movw	r3, #32517	; 0x7f05
 8007052:	84a3      	strh	r3, [r4, #36]	; 0x24
 8007054:	4620      	mov	r0, r4
 8007056:	bd10      	pop	{r4, pc}

08007058 <DisplayUdfParams::Load()>:
 8007058:	b508      	push	{r3, lr}
 800705a:	2300      	movs	r3, #0
 800705c:	4601      	mov	r1, r0
 800705e:	6043      	str	r3, [r0, #4]
 8007060:	6800      	ldr	r0, [r0, #0]
 8007062:	b120      	cbz	r0, 800706e <DisplayUdfParams::Load()+0x16>
 8007064:	6803      	ldr	r3, [r0, #0]
 8007066:	3104      	adds	r1, #4
 8007068:	68db      	ldr	r3, [r3, #12]
 800706a:	4798      	blx	r3
 800706c:	2001      	movs	r0, #1
 800706e:	bd08      	pop	{r3, pc}

08007070 <DisplayUdfParams::Set(DisplayUdf*)>:
 8007070:	6843      	ldr	r3, [r0, #4]
 8007072:	009a      	lsls	r2, r3, #2
 8007074:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007078:	4604      	mov	r4, r0
 800707a:	460e      	mov	r6, r1
 800707c:	d506      	bpl.n	800708c <DisplayUdfParams::Set(DisplayUdf*)+0x1c>
 800707e:	6988      	ldr	r0, [r1, #24]
 8007080:	b120      	cbz	r0, 800708c <DisplayUdfParams::Set(DisplayUdf*)+0x1c>
 8007082:	6803      	ldr	r3, [r0, #0]
 8007084:	f894 1025 	ldrb.w	r1, [r4, #37]	; 0x25
 8007088:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800708a:	4798      	blx	r3
 800708c:	6863      	ldr	r3, [r4, #4]
 800708e:	69b0      	ldr	r0, [r6, #24]
 8007090:	00db      	lsls	r3, r3, #3
 8007092:	bf41      	itttt	mi
 8007094:	f894 3024 	ldrbmi.w	r3, [r4, #36]	; 0x24
 8007098:	f64e 2260 	movwmi	r2, #60000	; 0xea60
 800709c:	4353      	mulmi	r3, r2
 800709e:	6173      	strmi	r3, [r6, #20]
 80070a0:	6861      	ldr	r1, [r4, #4]
 80070a2:	f3c1 7180 	ubfx	r1, r1, #30, #1
 80070a6:	b110      	cbz	r0, 80070ae <DisplayUdfParams::Set(DisplayUdf*)+0x3e>
 80070a8:	6803      	ldr	r3, [r0, #0]
 80070aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80070ac:	4798      	blx	r3
 80070ae:	2500      	movs	r5, #0
 80070b0:	2701      	movs	r7, #1
 80070b2:	f104 0808 	add.w	r8, r4, #8
 80070b6:	6862      	ldr	r2, [r4, #4]
 80070b8:	fa07 f305 	lsl.w	r3, r7, r5
 80070bc:	4393      	bics	r3, r2
 80070be:	d105      	bne.n	80070cc <DisplayUdfParams::Set(DisplayUdf*)+0x5c>
 80070c0:	f818 1005 	ldrb.w	r1, [r8, r5]
 80070c4:	462a      	mov	r2, r5
 80070c6:	4630      	mov	r0, r6
 80070c8:	f7ff ffa0 	bl	800700c <DisplayUdf::Set(unsigned char, displayudf::Labels)>
 80070cc:	3501      	adds	r5, #1
 80070ce:	2d14      	cmp	r5, #20
 80070d0:	d1f1      	bne.n	80070b6 <DisplayUdfParams::Set(DisplayUdf*)+0x46>
 80070d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080070d6 <DisplayUdfParams::Dump()>:
 80070d6:	4770      	bx	lr

080070d8 <Display::PrintInfo() [clone .isra.0]>:
 80070d8:	b910      	cbnz	r0, 80070e0 <Display::PrintInfo() [clone .isra.0]+0x8>
 80070da:	4803      	ldr	r0, [pc, #12]	; (80070e8 <Display::PrintInfo() [clone .isra.0]+0x10>)
 80070dc:	f7fa ba7a 	b.w	80015d4 <puts>
 80070e0:	6803      	ldr	r3, [r0, #0]
 80070e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80070e4:	4718      	bx	r3
 80070e6:	bf00      	nop
 80070e8:	0800a8c0 	stmdaeq	r0, {r6, r7, fp, sp, pc}

080070ec <HAL_I2C::IsConnected_(unsigned char, unsigned int)>:
 80070ec:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80070ee:	460d      	mov	r5, r1
 80070f0:	4604      	mov	r4, r0
 80070f2:	f001 fde5 	bl	8008cc0 <gd32_i2c_set_address>
 80070f6:	4628      	mov	r0, r5
 80070f8:	f001 fdda 	bl	8008cb0 <gd32_i2c_set_baudrate>
 80070fc:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8007100:	2b07      	cmp	r3, #7
 8007102:	d902      	bls.n	800710a <HAL_I2C::IsConnected_(unsigned char, unsigned int)+0x1e>
 8007104:	3c50      	subs	r4, #80	; 0x50
 8007106:	2c0f      	cmp	r4, #15
 8007108:	d809      	bhi.n	800711e <HAL_I2C::IsConnected_(unsigned char, unsigned int)+0x32>
 800710a:	2101      	movs	r1, #1
 800710c:	f10d 0007 	add.w	r0, sp, #7
 8007110:	f001 fe42 	bl	8008d98 <gd32_i2c_read>
 8007114:	fab0 f080 	clz	r0, r0
 8007118:	0940      	lsrs	r0, r0, #5
 800711a:	b003      	add	sp, #12
 800711c:	bd30      	pop	{r4, r5, pc}
 800711e:	2100      	movs	r1, #0
 8007120:	4608      	mov	r0, r1
 8007122:	f001 fdd3 	bl	8008ccc <gd32_i2c_write>
 8007126:	e7f5      	b.n	8007114 <HAL_I2C::IsConnected_(unsigned char, unsigned int)+0x28>

08007128 <Display::Detect7Segment()>:
 8007128:	b513      	push	{r0, r1, r4, lr}
 800712a:	68c1      	ldr	r1, [r0, #12]
 800712c:	4604      	mov	r4, r0
 800712e:	7a00      	ldrb	r0, [r0, #8]
 8007130:	f7ff ffdc 	bl	80070ec <HAL_I2C::IsConnected_(unsigned char, unsigned int)>
 8007134:	7460      	strb	r0, [r4, #17]
 8007136:	b170      	cbz	r0, 8007156 <Display::Detect7Segment()+0x2e>
 8007138:	2200      	movs	r2, #0
 800713a:	f104 0008 	add.w	r0, r4, #8
 800713e:	4611      	mov	r1, r2
 8007140:	9001      	str	r0, [sp, #4]
 8007142:	f7fb f8a7 	bl	8002294 <HAL_I2C::WriteRegister(unsigned char, unsigned short)>
 8007146:	7c63      	ldrb	r3, [r4, #17]
 8007148:	9801      	ldr	r0, [sp, #4]
 800714a:	b123      	cbz	r3, 8007156 <Display::Detect7Segment()+0x2e>
 800714c:	f24c 02ff 	movw	r2, #49407	; 0xc0ff
 8007150:	2112      	movs	r1, #18
 8007152:	f7fb f89f 	bl	8002294 <HAL_I2C::WriteRegister(unsigned char, unsigned short)>
 8007156:	b002      	add	sp, #8
 8007158:	bd10      	pop	{r4, pc}

0800715a <Display::Detect(display::Type)>:
 800715a:	2902      	cmp	r1, #2
 800715c:	b538      	push	{r3, r4, r5, lr}
 800715e:	4604      	mov	r4, r0
 8007160:	d014      	beq.n	800718c <Display::Detect(display::Type)+0x32>
 8007162:	2904      	cmp	r1, #4
 8007164:	d01b      	beq.n	800719e <Display::Detect(display::Type)+0x44>
 8007166:	69a0      	ldr	r0, [r4, #24]
 8007168:	b168      	cbz	r0, 8007186 <Display::Detect(display::Type)+0x2c>
 800716a:	6803      	ldr	r3, [r0, #0]
 800716c:	689b      	ldr	r3, [r3, #8]
 800716e:	4798      	blx	r3
 8007170:	69a3      	ldr	r3, [r4, #24]
 8007172:	b9b0      	cbnz	r0, 80071a2 <Display::Detect(display::Type)+0x48>
 8007174:	b11b      	cbz	r3, 800717e <Display::Detect(display::Type)+0x24>
 8007176:	681a      	ldr	r2, [r3, #0]
 8007178:	4618      	mov	r0, r3
 800717a:	6852      	ldr	r2, [r2, #4]
 800717c:	4790      	blx	r2
 800717e:	2300      	movs	r3, #0
 8007180:	61a3      	str	r3, [r4, #24]
 8007182:	2304      	movs	r3, #4
 8007184:	6023      	str	r3, [r4, #0]
 8007186:	2300      	movs	r3, #0
 8007188:	6163      	str	r3, [r4, #20]
 800718a:	e011      	b.n	80071b0 <Display::Detect(display::Type)+0x56>
 800718c:	2018      	movs	r0, #24
 800718e:	f000 fcf4 	bl	8007b7a <operator new(unsigned int)>
 8007192:	2100      	movs	r1, #0
 8007194:	4605      	mov	r5, r0
 8007196:	f000 f8a1 	bl	80072dc <Ssd1306::Ssd1306(TOledPanel)>
 800719a:	61a5      	str	r5, [r4, #24]
 800719c:	e7e3      	b.n	8007166 <Display::Detect(display::Type)+0xc>
 800719e:	6001      	str	r1, [r0, #0]
 80071a0:	e7e1      	b.n	8007166 <Display::Detect(display::Type)+0xc>
 80071a2:	681a      	ldr	r2, [r3, #0]
 80071a4:	4618      	mov	r0, r3
 80071a6:	68d2      	ldr	r2, [r2, #12]
 80071a8:	4790      	blx	r2
 80071aa:	69a3      	ldr	r3, [r4, #24]
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	d0ea      	beq.n	8007186 <Display::Detect(display::Type)+0x2c>
 80071b0:	bd38      	pop	{r3, r4, r5, pc}
	...

080071b4 <Display::Display()>:
 80071b4:	2304      	movs	r3, #4
 80071b6:	b510      	push	{r4, lr}
 80071b8:	6003      	str	r3, [r0, #0]
 80071ba:	4b0f      	ldr	r3, [pc, #60]	; (80071f8 <Display::Display()+0x44>)
 80071bc:	4a0f      	ldr	r2, [pc, #60]	; (80071fc <Display::Display()+0x48>)
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	6043      	str	r3, [r0, #4]
 80071c2:	2321      	movs	r3, #33	; 0x21
 80071c4:	7203      	strb	r3, [r0, #8]
 80071c6:	4b0e      	ldr	r3, [pc, #56]	; (8007200 <Display::Display()+0x4c>)
 80071c8:	60c3      	str	r3, [r0, #12]
 80071ca:	2300      	movs	r3, #0
 80071cc:	e9c0 2305 	strd	r2, r3, [r0, #20]
 80071d0:	8203      	strh	r3, [r0, #16]
 80071d2:	4b0c      	ldr	r3, [pc, #48]	; (8007204 <Display::Display()+0x50>)
 80071d4:	4604      	mov	r4, r0
 80071d6:	2102      	movs	r1, #2
 80071d8:	6018      	str	r0, [r3, #0]
 80071da:	f7ff ffbe 	bl	800715a <Display::Detect(display::Type)>
 80071de:	4620      	mov	r0, r4
 80071e0:	f7ff ffa2 	bl	8007128 <Display::Detect7Segment()>
 80071e4:	69a3      	ldr	r3, [r4, #24]
 80071e6:	b10b      	cbz	r3, 80071ec <Display::Display()+0x38>
 80071e8:	f7f9 fa8e 	bl	8000708 <display::timeout::gpio_init()>
 80071ec:	69a0      	ldr	r0, [r4, #24]
 80071ee:	f7ff ff73 	bl	80070d8 <Display::PrintInfo() [clone .isra.0]>
 80071f2:	4620      	mov	r0, r4
 80071f4:	bd10      	pop	{r4, pc}
 80071f6:	bf00      	nop
 80071f8:	20001814 	andcs	r1, r0, r4, lsl r8
 80071fc:	000493e0 	andeq	r9, r4, r0, ror #7
 8007200:	00061a80 	andeq	r1, r6, r0, lsl #21
 8007204:	200016ec 	andcs	r1, r0, ip, ror #13

08007208 <Ssd1306::~Ssd1306()>:
 8007208:	4770      	bx	lr

0800720a <Ssd1306::SetCursor(unsigned int)>:
 800720a:	4770      	bx	lr

0800720c <Ssd1306::PrintInfo()>:
 800720c:	b410      	push	{r4}
 800720e:	4906      	ldr	r1, [pc, #24]	; (8007228 <Ssd1306::PrintInfo()+0x1c>)
 8007210:	7c44      	ldrb	r4, [r0, #17]
 8007212:	7903      	ldrb	r3, [r0, #4]
 8007214:	7942      	ldrb	r2, [r0, #5]
 8007216:	4805      	ldr	r0, [pc, #20]	; (800722c <Ssd1306::PrintInfo()+0x20>)
 8007218:	2c00      	cmp	r4, #0
 800721a:	bf08      	it	eq
 800721c:	4601      	moveq	r1, r0
 800721e:	4804      	ldr	r0, [pc, #16]	; (8007230 <Ssd1306::PrintInfo()+0x24>)
 8007220:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007224:	f7fa b99e 	b.w	8001564 <printf>
 8007228:	0800a8d1 	stmdaeq	r0, {r0, r4, r6, r7, fp, sp, pc}
 800722c:	0800a8d8 	stmdaeq	r0, {r3, r4, r6, r7, fp, sp, pc}
 8007230:	0800a8e0 	stmdaeq	r0, {r5, r6, r7, fp, sp, pc}

08007234 <Ssd1306::~Ssd1306()>:
 8007234:	b510      	push	{r4, lr}
 8007236:	4604      	mov	r4, r0
 8007238:	f000 fc9b 	bl	8007b72 <operator delete(void*)>
 800723c:	4620      	mov	r0, r4
 800723e:	bd10      	pop	{r4, pc}

08007240 <HAL_I2C::Setup()>:
 8007240:	b510      	push	{r4, lr}
 8007242:	4604      	mov	r4, r0
 8007244:	7800      	ldrb	r0, [r0, #0]
 8007246:	f001 fd3b 	bl	8008cc0 <gd32_i2c_set_address>
 800724a:	6860      	ldr	r0, [r4, #4]
 800724c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007250:	f001 bd2e 	b.w	8008cb0 <gd32_i2c_set_baudrate>

08007254 <Ssd1306::PutChar(int)>:
 8007254:	b510      	push	{r4, lr}
 8007256:	3920      	subs	r1, #32
 8007258:	295f      	cmp	r1, #95	; 0x5f
 800725a:	f100 0008 	add.w	r0, r0, #8
 800725e:	bf94      	ite	ls
 8007260:	460c      	movls	r4, r1
 8007262:	2400      	movhi	r4, #0
 8007264:	f7ff ffec 	bl	8007240 <HAL_I2C::Setup()>
 8007268:	4804      	ldr	r0, [pc, #16]	; (800727c <Ssd1306::PutChar(int)+0x28>)
 800726a:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
 800726e:	4420      	add	r0, r4
 8007270:	2107      	movs	r1, #7
 8007272:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007276:	f001 bd29 	b.w	8008ccc <gd32_i2c_write>
 800727a:	bf00      	nop
 800727c:	0800a8f4 	stmdaeq	r0, {r2, r4, r5, r6, r7, fp, sp, pc}

08007280 <Ssd1306::PutString(char const*)>:
 8007280:	b538      	push	{r3, r4, r5, lr}
 8007282:	4605      	mov	r5, r0
 8007284:	1e4c      	subs	r4, r1, #1
 8007286:	f814 1f01 	ldrb.w	r1, [r4, #1]!
 800728a:	b901      	cbnz	r1, 800728e <Ssd1306::PutString(char const*)+0xe>
 800728c:	bd38      	pop	{r3, r4, r5, pc}
 800728e:	4628      	mov	r0, r5
 8007290:	f7ff ffe0 	bl	8007254 <Ssd1306::PutChar(int)>
 8007294:	e7f7      	b.n	8007286 <Ssd1306::PutString(char const*)+0x6>

08007296 <Ssd1306::Text(char const*, unsigned int)>:
 8007296:	b570      	push	{r4, r5, r6, lr}
 8007298:	7903      	ldrb	r3, [r0, #4]
 800729a:	4605      	mov	r5, r0
 800729c:	460c      	mov	r4, r1
 800729e:	4293      	cmp	r3, r2
 80072a0:	bf94      	ite	ls
 80072a2:	18ce      	addls	r6, r1, r3
 80072a4:	188e      	addhi	r6, r1, r2
 80072a6:	42b4      	cmp	r4, r6
 80072a8:	d100      	bne.n	80072ac <Ssd1306::Text(char const*, unsigned int)+0x16>
 80072aa:	bd70      	pop	{r4, r5, r6, pc}
 80072ac:	f814 1b01 	ldrb.w	r1, [r4], #1
 80072b0:	4628      	mov	r0, r5
 80072b2:	f7ff ffcf 	bl	8007254 <Ssd1306::PutChar(int)>
 80072b6:	e7f6      	b.n	80072a6 <Ssd1306::Text(char const*, unsigned int)+0x10>

080072b8 <Ssd1306::InitMembers()>:
 80072b8:	7c03      	ldrb	r3, [r0, #16]
 80072ba:	b14b      	cbz	r3, 80072d0 <Ssd1306::InitMembers()+0x18>
 80072bc:	3b01      	subs	r3, #1
 80072be:	2b01      	cmp	r3, #1
 80072c0:	d909      	bls.n	80072d6 <Ssd1306::InitMembers()+0x1e>
 80072c2:	2308      	movs	r3, #8
 80072c4:	2204      	movs	r2, #4
 80072c6:	2115      	movs	r1, #21
 80072c8:	7101      	strb	r1, [r0, #4]
 80072ca:	7143      	strb	r3, [r0, #5]
 80072cc:	6142      	str	r2, [r0, #20]
 80072ce:	4770      	bx	lr
 80072d0:	2308      	movs	r3, #8
 80072d2:	461a      	mov	r2, r3
 80072d4:	e7f7      	b.n	80072c6 <Ssd1306::InitMembers()+0xe>
 80072d6:	2304      	movs	r3, #4
 80072d8:	e7fb      	b.n	80072d2 <Ssd1306::InitMembers()+0x1a>
	...

080072dc <Ssd1306::Ssd1306(TOledPanel)>:
 80072dc:	4a08      	ldr	r2, [pc, #32]	; (8007300 <Ssd1306::Ssd1306(TOledPanel)+0x24>)
 80072de:	6002      	str	r2, [r0, #0]
 80072e0:	227f      	movs	r2, #127	; 0x7f
 80072e2:	b508      	push	{r3, lr}
 80072e4:	80c2      	strh	r2, [r0, #6]
 80072e6:	223c      	movs	r2, #60	; 0x3c
 80072e8:	7202      	strb	r2, [r0, #8]
 80072ea:	4a06      	ldr	r2, [pc, #24]	; (8007304 <Ssd1306::Ssd1306(TOledPanel)+0x28>)
 80072ec:	60c2      	str	r2, [r0, #12]
 80072ee:	2200      	movs	r2, #0
 80072f0:	7442      	strb	r2, [r0, #17]
 80072f2:	4a05      	ldr	r2, [pc, #20]	; (8007308 <Ssd1306::Ssd1306(TOledPanel)+0x2c>)
 80072f4:	7401      	strb	r1, [r0, #16]
 80072f6:	6010      	str	r0, [r2, #0]
 80072f8:	f7ff ffde 	bl	80072b8 <Ssd1306::InitMembers()>
 80072fc:	bd08      	pop	{r3, pc}
 80072fe:	bf00      	nop
 8007300:	0800abcc 	stmdaeq	r0, {r2, r3, r6, r7, r8, r9, fp, sp, pc}
 8007304:	00061a80 	andeq	r1, r6, r0, lsl #21
 8007308:	20001778 	andcs	r1, r0, r8, ror r7

0800730c <Ssd1306::SendCommand(unsigned char)>:
 800730c:	b507      	push	{r0, r1, r2, lr}
 800730e:	2300      	movs	r3, #0
 8007310:	3008      	adds	r0, #8
 8007312:	f88d 3004 	strb.w	r3, [sp, #4]
 8007316:	f88d 1005 	strb.w	r1, [sp, #5]
 800731a:	f7ff ff91 	bl	8007240 <HAL_I2C::Setup()>
 800731e:	2102      	movs	r1, #2
 8007320:	a801      	add	r0, sp, #4
 8007322:	f001 fcd3 	bl	8008ccc <gd32_i2c_write>
 8007326:	b003      	add	sp, #12
 8007328:	f85d fb04 	ldr.w	pc, [sp], #4

0800732c <Ssd1306::SetCursorPos(unsigned char, unsigned char)>:
 800732c:	2914      	cmp	r1, #20
 800732e:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007330:	4615      	mov	r5, r2
 8007332:	d81d      	bhi.n	8007370 <Ssd1306::SetCursorPos(unsigned char, unsigned char)+0x44>
 8007334:	7943      	ldrb	r3, [r0, #5]
 8007336:	4293      	cmp	r3, r2
 8007338:	d91a      	bls.n	8007370 <Ssd1306::SetCursorPos(unsigned char, unsigned char)+0x44>
 800733a:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 800733e:	7c43      	ldrb	r3, [r0, #17]
 8007340:	004c      	lsls	r4, r1, #1
 8007342:	b2e4      	uxtb	r4, r4
 8007344:	b10b      	cbz	r3, 800734a <Ssd1306::SetCursorPos(unsigned char, unsigned char)+0x1e>
 8007346:	3404      	adds	r4, #4
 8007348:	b2e4      	uxtb	r4, r4
 800734a:	f004 010e 	and.w	r1, r4, #14
 800734e:	9001      	str	r0, [sp, #4]
 8007350:	f7ff ffdc 	bl	800730c <Ssd1306::SendCommand(unsigned char)>
 8007354:	0921      	lsrs	r1, r4, #4
 8007356:	9801      	ldr	r0, [sp, #4]
 8007358:	f041 0110 	orr.w	r1, r1, #16
 800735c:	f7ff ffd6 	bl	800730c <Ssd1306::SendCommand(unsigned char)>
 8007360:	9801      	ldr	r0, [sp, #4]
 8007362:	f045 01b0 	orr.w	r1, r5, #176	; 0xb0
 8007366:	b003      	add	sp, #12
 8007368:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800736c:	f7ff bfce 	b.w	800730c <Ssd1306::SendCommand(unsigned char)>
 8007370:	b003      	add	sp, #12
 8007372:	bd30      	pop	{r4, r5, pc}

08007374 <Ssd1306::TextLine(unsigned char, char const*, unsigned int)>:
 8007374:	b5e0      	push	{r5, r6, r7, lr}
 8007376:	4605      	mov	r5, r0
 8007378:	4616      	mov	r6, r2
 800737a:	461f      	mov	r7, r3
 800737c:	b171      	cbz	r1, 800739c <Ssd1306::TextLine(unsigned char, char const*, unsigned int)+0x28>
 800737e:	7943      	ldrb	r3, [r0, #5]
 8007380:	428b      	cmp	r3, r1
 8007382:	d30b      	bcc.n	800739c <Ssd1306::TextLine(unsigned char, char const*, unsigned int)+0x28>
 8007384:	1e4a      	subs	r2, r1, #1
 8007386:	b2d2      	uxtb	r2, r2
 8007388:	2100      	movs	r1, #0
 800738a:	f7ff ffcf 	bl	800732c <Ssd1306::SetCursorPos(unsigned char, unsigned char)>
 800738e:	463a      	mov	r2, r7
 8007390:	4631      	mov	r1, r6
 8007392:	4628      	mov	r0, r5
 8007394:	e8bd 40e0 	ldmia.w	sp!, {r5, r6, r7, lr}
 8007398:	f7ff bf7d 	b.w	8007296 <Ssd1306::Text(char const*, unsigned int)>
 800739c:	bde0      	pop	{r5, r6, r7, pc}
	...

080073a0 <Ssd1306::ClearLine(unsigned char)>:
 80073a0:	b513      	push	{r0, r1, r4, lr}
 80073a2:	4604      	mov	r4, r0
 80073a4:	b1c1      	cbz	r1, 80073d8 <Ssd1306::ClearLine(unsigned char)+0x38>
 80073a6:	7943      	ldrb	r3, [r0, #5]
 80073a8:	428b      	cmp	r3, r1
 80073aa:	d315      	bcc.n	80073d8 <Ssd1306::ClearLine(unsigned char)+0x38>
 80073ac:	3901      	subs	r1, #1
 80073ae:	b2ca      	uxtb	r2, r1
 80073b0:	2100      	movs	r1, #0
 80073b2:	9201      	str	r2, [sp, #4]
 80073b4:	f7ff ffba 	bl	800732c <Ssd1306::SetCursorPos(unsigned char, unsigned char)>
 80073b8:	f104 0008 	add.w	r0, r4, #8
 80073bc:	f7ff ff40 	bl	8007240 <HAL_I2C::Setup()>
 80073c0:	2181      	movs	r1, #129	; 0x81
 80073c2:	4806      	ldr	r0, [pc, #24]	; (80073dc <Ssd1306::ClearLine(unsigned char)+0x3c>)
 80073c4:	f001 fc82 	bl	8008ccc <gd32_i2c_write>
 80073c8:	9a01      	ldr	r2, [sp, #4]
 80073ca:	2100      	movs	r1, #0
 80073cc:	4620      	mov	r0, r4
 80073ce:	b002      	add	sp, #8
 80073d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80073d4:	f7ff bfaa 	b.w	800732c <Ssd1306::SetCursorPos(unsigned char, unsigned char)>
 80073d8:	b002      	add	sp, #8
 80073da:	bd10      	pop	{r4, pc}
 80073dc:	200016f0 	strdcs	r1, [r0], -r0

080073e0 <Ssd1306::SetSleep(bool)>:
 80073e0:	b111      	cbz	r1, 80073e8 <Ssd1306::SetSleep(bool)+0x8>
 80073e2:	21ae      	movs	r1, #174	; 0xae
 80073e4:	f7ff bf92 	b.w	800730c <Ssd1306::SendCommand(unsigned char)>
 80073e8:	21af      	movs	r1, #175	; 0xaf
 80073ea:	e7fb      	b.n	80073e4 <Ssd1306::SetSleep(bool)+0x4>

080073ec <Ssd1306::SetContrast(unsigned char)>:
 80073ec:	b538      	push	{r3, r4, r5, lr}
 80073ee:	4604      	mov	r4, r0
 80073f0:	460d      	mov	r5, r1
 80073f2:	7181      	strb	r1, [r0, #6]
 80073f4:	2181      	movs	r1, #129	; 0x81
 80073f6:	f7ff ff89 	bl	800730c <Ssd1306::SendCommand(unsigned char)>
 80073fa:	4629      	mov	r1, r5
 80073fc:	4620      	mov	r0, r4
 80073fe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007402:	f7ff bf83 	b.w	800730c <Ssd1306::SendCommand(unsigned char)>

08007406 <Ssd1306::SetFlipVertically(bool)>:
 8007406:	b510      	push	{r4, lr}
 8007408:	4604      	mov	r4, r0
 800740a:	71c1      	strb	r1, [r0, #7]
 800740c:	b141      	cbz	r1, 8007420 <Ssd1306::SetFlipVertically(bool)+0x1a>
 800740e:	21c0      	movs	r1, #192	; 0xc0
 8007410:	f7ff ff7c 	bl	800730c <Ssd1306::SendCommand(unsigned char)>
 8007414:	21a0      	movs	r1, #160	; 0xa0
 8007416:	4620      	mov	r0, r4
 8007418:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800741c:	f7ff bf76 	b.w	800730c <Ssd1306::SendCommand(unsigned char)>
 8007420:	21c8      	movs	r1, #200	; 0xc8
 8007422:	f7ff ff73 	bl	800730c <Ssd1306::SendCommand(unsigned char)>
 8007426:	21a1      	movs	r1, #161	; 0xa1
 8007428:	e7f5      	b.n	8007416 <Ssd1306::SetFlipVertically(bool)+0x10>
	...

0800742c <Ssd1306::CheckSH1106()>:
 800742c:	b570      	push	{r4, r5, r6, lr}
 800742e:	2100      	movs	r1, #0
 8007430:	b086      	sub	sp, #24
 8007432:	4604      	mov	r4, r0
 8007434:	f7ff ff6a 	bl	800730c <Ssd1306::SendCommand(unsigned char)>
 8007438:	2190      	movs	r1, #144	; 0x90
 800743a:	4620      	mov	r0, r4
 800743c:	f7ff ff66 	bl	800730c <Ssd1306::SendCommand(unsigned char)>
 8007440:	21b0      	movs	r1, #176	; 0xb0
 8007442:	4620      	mov	r0, r4
 8007444:	f7ff ff62 	bl	800730c <Ssd1306::SendCommand(unsigned char)>
 8007448:	4b22      	ldr	r3, [pc, #136]	; (80074d4 <Ssd1306::CheckSH1106()+0xa8>)
 800744a:	f104 0608 	add.w	r6, r4, #8
 800744e:	6818      	ldr	r0, [r3, #0]
 8007450:	9002      	str	r0, [sp, #8]
 8007452:	ad02      	add	r5, sp, #8
 8007454:	791b      	ldrb	r3, [r3, #4]
 8007456:	712b      	strb	r3, [r5, #4]
 8007458:	4630      	mov	r0, r6
 800745a:	f7ff fef1 	bl	8007240 <HAL_I2C::Setup()>
 800745e:	2105      	movs	r1, #5
 8007460:	4628      	mov	r0, r5
 8007462:	f001 fc33 	bl	8008ccc <gd32_i2c_write>
 8007466:	2100      	movs	r1, #0
 8007468:	4620      	mov	r0, r4
 800746a:	f7ff ff4f 	bl	800730c <Ssd1306::SendCommand(unsigned char)>
 800746e:	2190      	movs	r1, #144	; 0x90
 8007470:	4620      	mov	r0, r4
 8007472:	f7ff ff4b 	bl	800730c <Ssd1306::SendCommand(unsigned char)>
 8007476:	21b0      	movs	r1, #176	; 0xb0
 8007478:	4620      	mov	r0, r4
 800747a:	f7ff ff47 	bl	800730c <Ssd1306::SendCommand(unsigned char)>
 800747e:	2300      	movs	r3, #0
 8007480:	9304      	str	r3, [sp, #16]
 8007482:	f88d 3014 	strb.w	r3, [sp, #20]
 8007486:	4630      	mov	r0, r6
 8007488:	2340      	movs	r3, #64	; 0x40
 800748a:	f88d 3007 	strb.w	r3, [sp, #7]
 800748e:	f7ff fed7 	bl	8007240 <HAL_I2C::Setup()>
 8007492:	2101      	movs	r1, #1
 8007494:	f10d 0007 	add.w	r0, sp, #7
 8007498:	f001 fc18 	bl	8008ccc <gd32_i2c_write>
 800749c:	4630      	mov	r0, r6
 800749e:	f7ff fecf 	bl	8007240 <HAL_I2C::Setup()>
 80074a2:	2105      	movs	r1, #5
 80074a4:	a804      	add	r0, sp, #16
 80074a6:	f001 fc77 	bl	8008d98 <gd32_i2c_read>
 80074aa:	2201      	movs	r2, #1
 80074ac:	5cab      	ldrb	r3, [r5, r2]
 80074ae:	a904      	add	r1, sp, #16
 80074b0:	3201      	adds	r2, #1
 80074b2:	4411      	add	r1, r2
 80074b4:	f811 1c01 	ldrb.w	r1, [r1, #-1]
 80074b8:	428b      	cmp	r3, r1
 80074ba:	d006      	beq.n	80074ca <Ssd1306::CheckSH1106()+0x9e>
 80074bc:	1a5b      	subs	r3, r3, r1
 80074be:	fab3 f383 	clz	r3, r3
 80074c2:	095b      	lsrs	r3, r3, #5
 80074c4:	7463      	strb	r3, [r4, #17]
 80074c6:	b006      	add	sp, #24
 80074c8:	bd70      	pop	{r4, r5, r6, pc}
 80074ca:	2a05      	cmp	r2, #5
 80074cc:	d1ee      	bne.n	80074ac <Ssd1306::CheckSH1106()+0x80>
 80074ce:	2300      	movs	r3, #0
 80074d0:	e7f5      	b.n	80074be <Ssd1306::CheckSH1106()+0x92>
 80074d2:	bf00      	nop
 80074d4:	0800a8ec 	stmdaeq	r0, {r2, r3, r5, r6, r7, fp, sp, pc}

080074d8 <Ssd1306::Cls()>:
 80074d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80074dc:	7c45      	ldrb	r5, [r0, #17]
 80074de:	00ad      	lsls	r5, r5, #2
 80074e0:	b2ed      	uxtb	r5, r5
 80074e2:	f1a5 077f 	sub.w	r7, r5, #127	; 0x7f
 80074e6:	4604      	mov	r4, r0
 80074e8:	2600      	movs	r6, #0
 80074ea:	f045 0810 	orr.w	r8, r5, #16
 80074ee:	b2ff      	uxtb	r7, r7
 80074f0:	6963      	ldr	r3, [r4, #20]
 80074f2:	42b3      	cmp	r3, r6
 80074f4:	4629      	mov	r1, r5
 80074f6:	4620      	mov	r0, r4
 80074f8:	d80b      	bhi.n	8007512 <Ssd1306::Cls()+0x3a>
 80074fa:	f7ff ff07 	bl	800730c <Ssd1306::SendCommand(unsigned char)>
 80074fe:	4641      	mov	r1, r8
 8007500:	4620      	mov	r0, r4
 8007502:	f7ff ff03 	bl	800730c <Ssd1306::SendCommand(unsigned char)>
 8007506:	4620      	mov	r0, r4
 8007508:	21b0      	movs	r1, #176	; 0xb0
 800750a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800750e:	f7ff befd 	b.w	800730c <Ssd1306::SendCommand(unsigned char)>
 8007512:	f7ff fefb 	bl	800730c <Ssd1306::SendCommand(unsigned char)>
 8007516:	4641      	mov	r1, r8
 8007518:	4620      	mov	r0, r4
 800751a:	f7ff fef7 	bl	800730c <Ssd1306::SendCommand(unsigned char)>
 800751e:	f066 014f 	orn	r1, r6, #79	; 0x4f
 8007522:	b2c9      	uxtb	r1, r1
 8007524:	4620      	mov	r0, r4
 8007526:	f7ff fef1 	bl	800730c <Ssd1306::SendCommand(unsigned char)>
 800752a:	7c23      	ldrb	r3, [r4, #16]
 800752c:	b123      	cbz	r3, 8007538 <Ssd1306::Cls()+0x60>
 800752e:	3b01      	subs	r3, #1
 8007530:	2b01      	cmp	r3, #1
 8007532:	d901      	bls.n	8007538 <Ssd1306::Cls()+0x60>
 8007534:	3601      	adds	r6, #1
 8007536:	e7db      	b.n	80074f0 <Ssd1306::Cls()+0x18>
 8007538:	f104 0008 	add.w	r0, r4, #8
 800753c:	f7ff fe80 	bl	8007240 <HAL_I2C::Setup()>
 8007540:	4639      	mov	r1, r7
 8007542:	4802      	ldr	r0, [pc, #8]	; (800754c <Ssd1306::Cls()+0x74>)
 8007544:	f001 fbc2 	bl	8008ccc <gd32_i2c_write>
 8007548:	e7f4      	b.n	8007534 <Ssd1306::Cls()+0x5c>
 800754a:	bf00      	nop
 800754c:	200016f0 	strdcs	r1, [r0], -r0

08007550 <Ssd1306::Start()>:
 8007550:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007552:	7a04      	ldrb	r4, [r0, #8]
 8007554:	68c6      	ldr	r6, [r0, #12]
 8007556:	4605      	mov	r5, r0
 8007558:	4620      	mov	r0, r4
 800755a:	f001 fbb1 	bl	8008cc0 <gd32_i2c_set_address>
 800755e:	4630      	mov	r0, r6
 8007560:	f001 fba6 	bl	8008cb0 <gd32_i2c_set_baudrate>
 8007564:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8007568:	2b07      	cmp	r3, #7
 800756a:	d902      	bls.n	8007572 <Ssd1306::Start()+0x22>
 800756c:	3c50      	subs	r4, #80	; 0x50
 800756e:	2c0f      	cmp	r4, #15
 8007570:	d80f      	bhi.n	8007592 <Ssd1306::Start()+0x42>
 8007572:	2101      	movs	r1, #1
 8007574:	f10d 0007 	add.w	r0, sp, #7
 8007578:	f001 fc0e 	bl	8008d98 <gd32_i2c_read>
 800757c:	fab0 f480 	clz	r4, r0
 8007580:	0964      	lsrs	r4, r4, #5
 8007582:	b35c      	cbz	r4, 80075dc <Ssd1306::Start()+0x8c>
 8007584:	7c2e      	ldrb	r6, [r5, #16]
 8007586:	b14e      	cbz	r6, 800759c <Ssd1306::Start()+0x4c>
 8007588:	3e01      	subs	r6, #1
 800758a:	2e01      	cmp	r6, #1
 800758c:	d929      	bls.n	80075e2 <Ssd1306::Start()+0x92>
 800758e:	2400      	movs	r4, #0
 8007590:	e024      	b.n	80075dc <Ssd1306::Start()+0x8c>
 8007592:	2100      	movs	r1, #0
 8007594:	4608      	mov	r0, r1
 8007596:	f001 fb99 	bl	8008ccc <gd32_i2c_write>
 800759a:	e7ef      	b.n	800757c <Ssd1306::Start()+0x2c>
 800759c:	4f16      	ldr	r7, [pc, #88]	; (80075f8 <Ssd1306::Start()+0xa8>)
 800759e:	f817 1b01 	ldrb.w	r1, [r7], #1
 80075a2:	4628      	mov	r0, r5
 80075a4:	3601      	adds	r6, #1
 80075a6:	f7ff feb1 	bl	800730c <Ssd1306::SendCommand(unsigned char)>
 80075aa:	2e18      	cmp	r6, #24
 80075ac:	d1f7      	bne.n	800759e <Ssd1306::Start()+0x4e>
 80075ae:	4a13      	ldr	r2, [pc, #76]	; (80075fc <Ssd1306::Start()+0xac>)
 80075b0:	2300      	movs	r3, #0
 80075b2:	4611      	mov	r1, r2
 80075b4:	4618      	mov	r0, r3
 80075b6:	3301      	adds	r3, #1
 80075b8:	2b86      	cmp	r3, #134	; 0x86
 80075ba:	f802 0b01 	strb.w	r0, [r2], #1
 80075be:	d1fa      	bne.n	80075b6 <Ssd1306::Start()+0x66>
 80075c0:	2340      	movs	r3, #64	; 0x40
 80075c2:	700b      	strb	r3, [r1, #0]
 80075c4:	4628      	mov	r0, r5
 80075c6:	f7ff ff31 	bl	800742c <Ssd1306::CheckSH1106()>
 80075ca:	4628      	mov	r0, r5
 80075cc:	f7ff ff84 	bl	80074d8 <Ssd1306::Cls()>
 80075d0:	21af      	movs	r1, #175	; 0xaf
 80075d2:	4628      	mov	r0, r5
 80075d4:	f7ff fe9a 	bl	800730c <Ssd1306::SendCommand(unsigned char)>
 80075d8:	2301      	movs	r3, #1
 80075da:	71eb      	strb	r3, [r5, #7]
 80075dc:	4620      	mov	r0, r4
 80075de:	b003      	add	sp, #12
 80075e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80075e2:	4f07      	ldr	r7, [pc, #28]	; (8007600 <Ssd1306::Start()+0xb0>)
 80075e4:	2600      	movs	r6, #0
 80075e6:	f817 1b01 	ldrb.w	r1, [r7], #1
 80075ea:	4628      	mov	r0, r5
 80075ec:	3601      	adds	r6, #1
 80075ee:	f7ff fe8d 	bl	800730c <Ssd1306::SendCommand(unsigned char)>
 80075f2:	2e18      	cmp	r6, #24
 80075f4:	d1f7      	bne.n	80075e6 <Ssd1306::Start()+0x96>
 80075f6:	e7da      	b.n	80075ae <Ssd1306::Start()+0x5e>
 80075f8:	0800abac 	stmdaeq	r0, {r2, r3, r5, r7, r8, r9, fp, sp, pc}
 80075fc:	200016f0 	strdcs	r1, [r0], -r0
 8007600:	0800ab94 	stmdaeq	r0, {r2, r4, r7, r8, r9, fp, sp, pc}

08007604 <console_putc>:
 8007604:	f000 bc86 	b.w	8007f14 <uart0_putc>

08007608 <console_puts>:
 8007608:	f000 bca4 	b.w	8007f54 <uart0_puts>

0800760c <FirmwareVersion::FirmwareVersion(char const*, char const*, char const*)>:
 800760c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007610:	4d15      	ldr	r5, [pc, #84]	; (8007668 <FirmwareVersion::FirmwareVersion(char const*, char const*, char const*)+0x5c>)
 8007612:	461e      	mov	r6, r3
 8007614:	4b15      	ldr	r3, [pc, #84]	; (800766c <FirmwareVersion::FirmwareVersion(char const*, char const*, char const*)+0x60>)
 8007616:	b086      	sub	sp, #24
 8007618:	6018      	str	r0, [r3, #0]
 800761a:	4604      	mov	r4, r0
 800761c:	4617      	mov	r7, r2
 800761e:	f105 0803 	add.w	r8, r5, #3
 8007622:	2203      	movs	r2, #3
 8007624:	4628      	mov	r0, r5
 8007626:	f000 fb28 	bl	8007c7a <memmove>
 800762a:	4639      	mov	r1, r7
 800762c:	220b      	movs	r2, #11
 800762e:	4640      	mov	r0, r8
 8007630:	f000 fb23 	bl	8007c7a <memmove>
 8007634:	f105 030e 	add.w	r3, r5, #14
 8007638:	4631      	mov	r1, r6
 800763a:	2208      	movs	r2, #8
 800763c:	4618      	mov	r0, r3
 800763e:	f000 fb1c 	bl	8007c7a <memmove>
 8007642:	2308      	movs	r3, #8
 8007644:	e9cd 8303 	strd	r8, r3, [sp, #12]
 8007648:	230b      	movs	r3, #11
 800764a:	9302      	str	r3, [sp, #8]
 800764c:	4b08      	ldr	r3, [pc, #32]	; (8007670 <FirmwareVersion::FirmwareVersion(char const*, char const*, char const*)+0x64>)
 800764e:	9005      	str	r0, [sp, #20]
 8007650:	e9cd 5300 	strd	r5, r3, [sp]
 8007654:	4a07      	ldr	r2, [pc, #28]	; (8007674 <FirmwareVersion::FirmwareVersion(char const*, char const*, char const*)+0x68>)
 8007656:	4808      	ldr	r0, [pc, #32]	; (8007678 <FirmwareVersion::FirmwareVersion(char const*, char const*, char const*)+0x6c>)
 8007658:	2303      	movs	r3, #3
 800765a:	213f      	movs	r1, #63	; 0x3f
 800765c:	f7f9 ff92 	bl	8001584 <snprintf>
 8007660:	4620      	mov	r0, r4
 8007662:	b006      	add	sp, #24
 8007664:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007668:	2000177c 	andcs	r1, r0, ip, ror r7
 800766c:	200017d4 	ldrdcs	r1, [r0], -r4
 8007670:	08009a88 	stmdaeq	r0, {r3, r7, r9, fp, ip, pc}
 8007674:	0800ac10 	stmdaeq	r0, {r4, sl, fp, sp, pc}
 8007678:	20001792 	mulcs	r0, r2, r7

0800767c <FirmwareVersion::Print(char const*)>:
 800767c:	b510      	push	{r4, lr}
 800767e:	4805      	ldr	r0, [pc, #20]	; (8007694 <FirmwareVersion::Print(char const*)+0x18>)
 8007680:	460c      	mov	r4, r1
 8007682:	f7f9 ffa7 	bl	80015d4 <puts>
 8007686:	b124      	cbz	r4, 8007692 <FirmwareVersion::Print(char const*)+0x16>
 8007688:	4620      	mov	r0, r4
 800768a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800768e:	f7f9 bfa1 	b.w	80015d4 <puts>
 8007692:	bd10      	pop	{r4, pc}
 8007694:	20001792 	mulcs	r0, r2, r7

08007698 <LedBlink::LedBlink()>:
 8007698:	b538      	push	{r3, r4, r5, lr}
 800769a:	2205      	movs	r2, #5
 800769c:	2300      	movs	r3, #0
 800769e:	e9c0 3200 	strd	r3, r2, [r0]
 80076a2:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80076a6:	e9c0 2303 	strd	r2, r3, [r0, #12]
 80076aa:	6083      	str	r3, [r0, #8]
 80076ac:	6143      	str	r3, [r0, #20]
 80076ae:	4b09      	ldr	r3, [pc, #36]	; (80076d4 <LedBlink::LedBlink()+0x3c>)
 80076b0:	4d09      	ldr	r5, [pc, #36]	; (80076d8 <LedBlink::LedBlink()+0x40>)
 80076b2:	6018      	str	r0, [r3, #0]
 80076b4:	4604      	mov	r4, r0
 80076b6:	f240 6004 	movw	r0, #1540	; 0x604
 80076ba:	f000 fef3 	bl	80084a4 <rcu_periph_clock_enable>
 80076be:	4628      	mov	r0, r5
 80076c0:	2301      	movs	r3, #1
 80076c2:	2203      	movs	r2, #3
 80076c4:	2110      	movs	r1, #16
 80076c6:	f000 fe55 	bl	8008374 <gpio_init>
 80076ca:	2301      	movs	r3, #1
 80076cc:	616b      	str	r3, [r5, #20]
 80076ce:	4620      	mov	r0, r4
 80076d0:	bd38      	pop	{r3, r4, r5, pc}
 80076d2:	bf00      	nop
 80076d4:	200017d8 	ldrdcs	r1, [r0], -r8
 80076d8:	40011000 	andmi	r1, r1, r0

080076dc <LedBlink::SetMode(ledblink::Mode)>:
 80076dc:	6843      	ldr	r3, [r0, #4]
 80076de:	428b      	cmp	r3, r1
 80076e0:	d02f      	beq.n	8007742 <LedBlink::SetMode(ledblink::Mode)+0x66>
 80076e2:	6041      	str	r1, [r0, #4]
 80076e4:	2904      	cmp	r1, #4
 80076e6:	d822      	bhi.n	800772e <LedBlink::SetMode(ledblink::Mode)+0x52>
 80076e8:	e8df f001 	tbb	[pc, r1]
 80076ec:	18120321 	ldmdane	r2, {r0, r5, r8, r9}
 80076f0:	23ff001d 	mvnscs	r0, #29
 80076f4:	6003      	str	r3, [r0, #0]
 80076f6:	2300      	movs	r3, #0
 80076f8:	60c3      	str	r3, [r0, #12]
 80076fa:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80076fe:	f503 3388 	add.w	r3, r3, #69632	; 0x11000
 8007702:	2201      	movs	r2, #1
 8007704:	611a      	str	r2, [r3, #16]
 8007706:	6880      	ldr	r0, [r0, #8]
 8007708:	b1d8      	cbz	r0, 8007742 <LedBlink::SetMode(ledblink::Mode)+0x66>
 800770a:	6803      	ldr	r3, [r0, #0]
 800770c:	689b      	ldr	r3, [r3, #8]
 800770e:	4718      	bx	r3
 8007710:	2301      	movs	r3, #1
 8007712:	6003      	str	r3, [r0, #0]
 8007714:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8007718:	60c3      	str	r3, [r0, #12]
 800771a:	e7f4      	b.n	8007706 <LedBlink::SetMode(ledblink::Mode)+0x2a>
 800771c:	2303      	movs	r3, #3
 800771e:	6003      	str	r3, [r0, #0]
 8007720:	f240 134d 	movw	r3, #333	; 0x14d
 8007724:	e7f8      	b.n	8007718 <LedBlink::SetMode(ledblink::Mode)+0x3c>
 8007726:	2305      	movs	r3, #5
 8007728:	6003      	str	r3, [r0, #0]
 800772a:	23c8      	movs	r3, #200	; 0xc8
 800772c:	e7f4      	b.n	8007718 <LedBlink::SetMode(ledblink::Mode)+0x3c>
 800772e:	2300      	movs	r3, #0
 8007730:	6003      	str	r3, [r0, #0]
 8007732:	60c3      	str	r3, [r0, #12]
 8007734:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8007738:	f503 3388 	add.w	r3, r3, #69632	; 0x11000
 800773c:	2201      	movs	r2, #1
 800773e:	615a      	str	r2, [r3, #20]
 8007740:	e7e1      	b.n	8007706 <LedBlink::SetMode(ledblink::Mode)+0x2a>
 8007742:	4770      	bx	lr

08007744 <Hardware::Hardware()>:
 8007744:	b530      	push	{r4, r5, lr}
 8007746:	4604      	mov	r4, r0
 8007748:	b091      	sub	sp, #68	; 0x44
 800774a:	f000 f8d3 	bl	80078f4 <HwClock::HwClock()>
 800774e:	2500      	movs	r5, #0
 8007750:	4b28      	ldr	r3, [pc, #160]	; (80077f4 <Hardware::Hardware()+0xb0>)
 8007752:	60e5      	str	r5, [r4, #12]
 8007754:	7425      	strb	r5, [r4, #16]
 8007756:	601c      	str	r4, [r3, #0]
 8007758:	f7f8 fcea 	bl	8000130 <console_init>
 800775c:	f000 fc1c 	bl	8007f98 <systick_config>
 8007760:	f001 fd4c 	bl	80091fc <udelay_init()>
 8007764:	f001 fd48 	bl	80091f8 <micros_init()>
 8007768:	f240 701b 	movw	r0, #1819	; 0x71b
 800776c:	f000 fe9a 	bl	80084a4 <rcu_periph_clock_enable>
 8007770:	f240 701c 	movw	r0, #1820	; 0x71c
 8007774:	f000 fe96 	bl	80084a4 <rcu_periph_clock_enable>
 8007778:	f000 fe8c 	bl	8008494 <pmu_backup_write_enable>
 800777c:	4629      	mov	r1, r5
 800777e:	2002      	movs	r0, #2
 8007780:	f000 fcbe 	bl	8008100 <bkp_write_data>
 8007784:	f240 7004 	movw	r0, #1796	; 0x704
 8007788:	f000 fe8c 	bl	80084a4 <rcu_periph_clock_enable>
 800778c:	481a      	ldr	r0, [pc, #104]	; (80077f8 <Hardware::Hardware()+0xb4>)
 800778e:	f001 f819 	bl	80087c4 <timer_deinit>
 8007792:	2377      	movs	r3, #119	; 0x77
 8007794:	a903      	add	r1, sp, #12
 8007796:	f8ad 300c 	strh.w	r3, [sp, #12]
 800779a:	4817      	ldr	r0, [pc, #92]	; (80077f8 <Hardware::Hardware()+0xb4>)
 800779c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80077a0:	9305      	str	r3, [sp, #20]
 80077a2:	f001 f871 	bl	8008888 <timer_init>
 80077a6:	4814      	ldr	r0, [pc, #80]	; (80077f8 <Hardware::Hardware()+0xb4>)
 80077a8:	f001 f8ac 	bl	8008904 <timer_enable>
 80077ac:	f001 f9ba 	bl	8008b24 <gd32_adc_init()>
 80077b0:	2206      	movs	r2, #6
 80077b2:	2303      	movs	r3, #3
 80077b4:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80077b8:	a807      	add	r0, sp, #28
 80077ba:	237a      	movs	r3, #122	; 0x7a
 80077bc:	930c      	str	r3, [sp, #48]	; 0x30
 80077be:	e9cd 5508 	strd	r5, r5, [sp, #32]
 80077c2:	9507      	str	r5, [sp, #28]
 80077c4:	950f      	str	r5, [sp, #60]	; 0x3c
 80077c6:	f000 fafb 	bl	8007dc0 <mktime>
 80077ca:	4629      	mov	r1, r5
 80077cc:	e9cd 0501 	strd	r0, r5, [sp, #4]
 80077d0:	a801      	add	r0, sp, #4
 80077d2:	f000 fb6b 	bl	8007eac <settimeofday>
 80077d6:	f001 fa37 	bl	8008c48 <gd32_i2c_begin>
 80077da:	4620      	mov	r0, r4
 80077dc:	f000 f982 	bl	8007ae4 <HwClock::RtcProbe()>
 80077e0:	4620      	mov	r0, r4
 80077e2:	f000 f893 	bl	800790c <HwClock::Print()>
 80077e6:	4620      	mov	r0, r4
 80077e8:	f000 f8c4 	bl	8007974 <HwClock::HcToSys()>
 80077ec:	4620      	mov	r0, r4
 80077ee:	b011      	add	sp, #68	; 0x44
 80077f0:	bd30      	pop	{r4, r5, pc}
 80077f2:	bf00      	nop
 80077f4:	200017dc 	ldrdcs	r1, [r0], -ip
 80077f8:	40001000 	andmi	r1, r0, r0

080077fc <Hardware::SetTime(tm const*)>:
 80077fc:	b500      	push	{lr}
 80077fe:	b08b      	sub	sp, #44	; 0x2c
 8007800:	680b      	ldr	r3, [r1, #0]
 8007802:	9301      	str	r3, [sp, #4]
 8007804:	684b      	ldr	r3, [r1, #4]
 8007806:	9302      	str	r3, [sp, #8]
 8007808:	688b      	ldr	r3, [r1, #8]
 800780a:	9303      	str	r3, [sp, #12]
 800780c:	68cb      	ldr	r3, [r1, #12]
 800780e:	9304      	str	r3, [sp, #16]
 8007810:	690b      	ldr	r3, [r1, #16]
 8007812:	9305      	str	r3, [sp, #20]
 8007814:	694b      	ldr	r3, [r1, #20]
 8007816:	9306      	str	r3, [sp, #24]
 8007818:	a901      	add	r1, sp, #4
 800781a:	f000 f90b 	bl	8007a34 <HwClock::Set(rtc_time const*)>
 800781e:	2001      	movs	r0, #1
 8007820:	b00b      	add	sp, #44	; 0x2c
 8007822:	f85d fb04 	ldr.w	pc, [sp], #4

08007826 <Hardware::GetTime(tm*)>:
 8007826:	b513      	push	{r0, r1, r4, lr}
 8007828:	2000      	movs	r0, #0
 800782a:	460c      	mov	r4, r1
 800782c:	f000 fb56 	bl	8007edc <time>
 8007830:	9001      	str	r0, [sp, #4]
 8007832:	a801      	add	r0, sp, #4
 8007834:	f000 fa80 	bl	8007d38 <localtime>
 8007838:	6943      	ldr	r3, [r0, #20]
 800783a:	6163      	str	r3, [r4, #20]
 800783c:	6903      	ldr	r3, [r0, #16]
 800783e:	6123      	str	r3, [r4, #16]
 8007840:	68c3      	ldr	r3, [r0, #12]
 8007842:	60e3      	str	r3, [r4, #12]
 8007844:	6883      	ldr	r3, [r0, #8]
 8007846:	60a3      	str	r3, [r4, #8]
 8007848:	6843      	ldr	r3, [r0, #4]
 800784a:	6063      	str	r3, [r4, #4]
 800784c:	6803      	ldr	r3, [r0, #0]
 800784e:	6023      	str	r3, [r4, #0]
 8007850:	b002      	add	sp, #8
 8007852:	bd10      	pop	{r4, pc}

08007854 <Hardware::Reboot()>:
 8007854:	b508      	push	{r3, lr}
 8007856:	68c3      	ldr	r3, [r0, #12]
 8007858:	4604      	mov	r4, r0
 800785a:	b153      	cbz	r3, 8007872 <Hardware::Reboot()+0x1e>
 800785c:	2300      	movs	r3, #0
 800785e:	7403      	strb	r3, [r0, #16]
 8007860:	2104      	movs	r1, #4
 8007862:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8007866:	f000 fd5b 	bl	8008320 <fwdgt_config>
 800786a:	68e0      	ldr	r0, [r4, #12]
 800786c:	6803      	ldr	r3, [r0, #0]
 800786e:	689b      	ldr	r3, [r3, #8]
 8007870:	4798      	blx	r3
 8007872:	2102      	movs	r1, #2
 8007874:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8007878:	f000 fd52 	bl	8008320 <fwdgt_config>
 800787c:	2801      	cmp	r0, #1
 800787e:	bf0c      	ite	eq
 8007880:	2301      	moveq	r3, #1
 8007882:	2300      	movne	r3, #0
 8007884:	7423      	strb	r3, [r4, #16]
 8007886:	d101      	bne.n	800788c <Hardware::Reboot()+0x38>
 8007888:	f000 fd3a 	bl	8008300 <fwdgt_enable>
 800788c:	4b0d      	ldr	r3, [pc, #52]	; (80078c4 <Hardware::Reboot()+0x70>)
 800788e:	480e      	ldr	r0, [pc, #56]	; (80078c8 <Hardware::Reboot()+0x74>)
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	490e      	ldr	r1, [pc, #56]	; (80078cc <Hardware::Reboot()+0x78>)
 8007894:	2208      	movs	r2, #8
 8007896:	601a      	str	r2, [r3, #0]
 8007898:	227d      	movs	r2, #125	; 0x7d
 800789a:	60da      	str	r2, [r3, #12]
 800789c:	2501      	movs	r5, #1
 800789e:	68dc      	ldr	r4, [r3, #12]
 80078a0:	b904      	cbnz	r4, 80078a4 <Hardware::Reboot()+0x50>
 80078a2:	e7fe      	b.n	80078a2 <Hardware::Reboot()+0x4e>
 80078a4:	6802      	ldr	r2, [r0, #0]
 80078a6:	695e      	ldr	r6, [r3, #20]
 80078a8:	1b92      	subs	r2, r2, r6
 80078aa:	4294      	cmp	r4, r2
 80078ac:	d8f8      	bhi.n	80078a0 <Hardware::Reboot()+0x4c>
 80078ae:	6802      	ldr	r2, [r0, #0]
 80078b0:	615a      	str	r2, [r3, #20]
 80078b2:	691a      	ldr	r2, [r3, #16]
 80078b4:	2a01      	cmp	r2, #1
 80078b6:	f082 0401 	eor.w	r4, r2, #1
 80078ba:	611c      	str	r4, [r3, #16]
 80078bc:	bf14      	ite	ne
 80078be:	610d      	strne	r5, [r1, #16]
 80078c0:	614a      	streq	r2, [r1, #20]
 80078c2:	e7ec      	b.n	800789e <Hardware::Reboot()+0x4a>
 80078c4:	200017d8 	ldrdcs	r1, [r0], -r8
 80078c8:	20001814 	andcs	r1, r0, r4, lsl r8
 80078cc:	40011000 	andmi	r1, r1, r0

080078d0 <Hardware::WatchdogInit()>:
 80078d0:	b510      	push	{r4, lr}
 80078d2:	2102      	movs	r1, #2
 80078d4:	4604      	mov	r4, r0
 80078d6:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80078da:	f000 fd21 	bl	8008320 <fwdgt_config>
 80078de:	2801      	cmp	r0, #1
 80078e0:	bf0c      	ite	eq
 80078e2:	2301      	moveq	r3, #1
 80078e4:	2300      	movne	r3, #0
 80078e6:	7423      	strb	r3, [r4, #16]
 80078e8:	d103      	bne.n	80078f2 <Hardware::WatchdogInit()+0x22>
 80078ea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80078ee:	f000 bd07 	b.w	8008300 <fwdgt_enable>
 80078f2:	bd10      	pop	{r4, pc}

080078f4 <HwClock::HwClock()>:
 80078f4:	2200      	movs	r2, #0
 80078f6:	e9c0 2200 	strd	r2, r2, [r0]
 80078fa:	7282      	strb	r2, [r0, #10]
 80078fc:	4a02      	ldr	r2, [pc, #8]	; (8007908 <HwClock::HwClock()+0x14>)
 80078fe:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8007902:	8101      	strh	r1, [r0, #8]
 8007904:	6010      	str	r0, [r2, #0]
 8007906:	4770      	bx	lr
 8007908:	200017e0 	andcs	r1, r0, r0, ror #15

0800790c <HwClock::Print()>:
 800790c:	b510      	push	{r4, lr}
 800790e:	7a83      	ldrb	r3, [r0, #10]
 8007910:	b08e      	sub	sp, #56	; 0x38
 8007912:	4604      	mov	r4, r0
 8007914:	b92b      	cbnz	r3, 8007922 <HwClock::Print()+0x16>
 8007916:	4812      	ldr	r0, [pc, #72]	; (8007960 <HwClock::Print()+0x54>)
 8007918:	b00e      	add	sp, #56	; 0x38
 800791a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800791e:	f7f9 be59 	b.w	80015d4 <puts>
 8007922:	7a43      	ldrb	r3, [r0, #9]
 8007924:	480f      	ldr	r0, [pc, #60]	; (8007964 <HwClock::Print()+0x58>)
 8007926:	2b03      	cmp	r3, #3
 8007928:	bf96      	itet	ls
 800792a:	4a0f      	ldrls	r2, [pc, #60]	; (8007968 <HwClock::Print()+0x5c>)
 800792c:	490f      	ldrhi	r1, [pc, #60]	; (800796c <HwClock::Print()+0x60>)
 800792e:	f852 1023 	ldrls.w	r1, [r2, r3, lsl #2]
 8007932:	f7f9 fe17 	bl	8001564 <printf>
 8007936:	a905      	add	r1, sp, #20
 8007938:	4620      	mov	r0, r4
 800793a:	f000 f905 	bl	8007b48 <HwClock::RtcGet(rtc_time*)>
 800793e:	9b05      	ldr	r3, [sp, #20]
 8007940:	9302      	str	r3, [sp, #8]
 8007942:	9b06      	ldr	r3, [sp, #24]
 8007944:	9301      	str	r3, [sp, #4]
 8007946:	9b07      	ldr	r3, [sp, #28]
 8007948:	9300      	str	r3, [sp, #0]
 800794a:	e9dd 3208 	ldrd	r3, r2, [sp, #32]
 800794e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8007950:	4807      	ldr	r0, [pc, #28]	; (8007970 <HwClock::Print()+0x64>)
 8007952:	3201      	adds	r2, #1
 8007954:	f201 716c 	addw	r1, r1, #1900	; 0x76c
 8007958:	f7f9 fe04 	bl	8001564 <printf>
 800795c:	b00e      	add	sp, #56	; 0x38
 800795e:	bd10      	pop	{r4, pc}
 8007960:	0800ac34 	stmdaeq	r0, {r2, r4, r5, sl, fp, sp, pc}
 8007964:	0800970e 	stmdaeq	r0, {r1, r2, r3, r8, r9, sl, ip, pc}
 8007968:	0800ac8c 	stmdaeq	r0, {r2, r3, r7, sl, fp, sp, pc}
 800796c:	0800a5d0 	stmdaeq	r0, {r4, r6, r7, r8, sl, sp, pc}
 8007970:	0800ac45 	stmdaeq	r0, {r0, r2, r6, sl, fp, sp, pc}

08007974 <HwClock::HcToSys()>:
 8007974:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007978:	7a83      	ldrb	r3, [r0, #10]
 800797a:	b0a3      	sub	sp, #140	; 0x8c
 800797c:	4604      	mov	r4, r0
 800797e:	2b00      	cmp	r3, #0
 8007980:	d04c      	beq.n	8007a1c <HwClock::HcToSys()+0xa8>
 8007982:	4f2a      	ldr	r7, [pc, #168]	; (8007a2c <HwClock::HcToSys()+0xb8>)
 8007984:	683b      	ldr	r3, [r7, #0]
 8007986:	7c1e      	ldrb	r6, [r3, #16]
 8007988:	b136      	cbz	r6, 8007998 <HwClock::HcToSys()+0x24>
 800798a:	2200      	movs	r2, #0
 800798c:	741a      	strb	r2, [r3, #16]
 800798e:	2104      	movs	r1, #4
 8007990:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8007994:	f000 fcc4 	bl	8008320 <fwdgt_config>
 8007998:	a907      	add	r1, sp, #28
 800799a:	4620      	mov	r0, r4
 800799c:	f000 f8d4 	bl	8007b48 <HwClock::RtcGet(rtc_time*)>
 80079a0:	2100      	movs	r1, #0
 80079a2:	a801      	add	r0, sp, #4
 80079a4:	f000 fa58 	bl	8007e58 <gettimeofday>
 80079a8:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 80079ac:	f04f 083c 	mov.w	r8, #60	; 0x3c
 80079b0:	e9cd 2319 	strd	r2, r3, [sp, #100]	; 0x64
 80079b4:	fb08 2903 	mla	r9, r8, r3, r2
 80079b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80079ba:	931b      	str	r3, [sp, #108]	; 0x6c
 80079bc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80079be:	931c      	str	r3, [sp, #112]	; 0x70
 80079c0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80079c2:	931d      	str	r3, [sp, #116]	; 0x74
 80079c4:	a819      	add	r0, sp, #100	; 0x64
 80079c6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80079c8:	931e      	str	r3, [sp, #120]	; 0x78
 80079ca:	f000 f9f9 	bl	8007dc0 <mktime>
 80079ce:	4605      	mov	r5, r0
 80079d0:	a910      	add	r1, sp, #64	; 0x40
 80079d2:	4620      	mov	r0, r4
 80079d4:	f000 f8b8 	bl	8007b48 <HwClock::RtcGet(rtc_time*)>
 80079d8:	e9dd 3210 	ldrd	r3, r2, [sp, #64]	; 0x40
 80079dc:	fb08 3302 	mla	r3, r8, r2, r3
 80079e0:	4599      	cmp	r9, r3
 80079e2:	d0f5      	beq.n	80079d0 <HwClock::HcToSys()+0x5c>
 80079e4:	2100      	movs	r1, #0
 80079e6:	a803      	add	r0, sp, #12
 80079e8:	f000 fa36 	bl	8007e58 <gettimeofday>
 80079ec:	9b01      	ldr	r3, [sp, #4]
 80079ee:	9a03      	ldr	r2, [sp, #12]
 80079f0:	9902      	ldr	r1, [sp, #8]
 80079f2:	9505      	str	r5, [sp, #20]
 80079f4:	429a      	cmp	r2, r3
 80079f6:	9b04      	ldr	r3, [sp, #16]
 80079f8:	d113      	bne.n	8007a22 <HwClock::HcToSys()+0xae>
 80079fa:	1a5b      	subs	r3, r3, r1
 80079fc:	f5c3 2274 	rsb	r2, r3, #999424	; 0xf4000
 8007a00:	f502 7210 	add.w	r2, r2, #576	; 0x240
 8007a04:	2100      	movs	r1, #0
 8007a06:	a805      	add	r0, sp, #20
 8007a08:	9206      	str	r2, [sp, #24]
 8007a0a:	f000 fa4f 	bl	8007eac <settimeofday>
 8007a0e:	4b08      	ldr	r3, [pc, #32]	; (8007a30 <HwClock::HcToSys()+0xbc>)
 8007a10:	6838      	ldr	r0, [r7, #0]
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	6063      	str	r3, [r4, #4]
 8007a16:	b10e      	cbz	r6, 8007a1c <HwClock::HcToSys()+0xa8>
 8007a18:	f7ff ff5a 	bl	80078d0 <Hardware::WatchdogInit()>
 8007a1c:	b023      	add	sp, #140	; 0x8c
 8007a1e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007a22:	1a5a      	subs	r2, r3, r1
 8007a24:	bf48      	it	mi
 8007a26:	1aca      	submi	r2, r1, r3
 8007a28:	e7ec      	b.n	8007a04 <HwClock::HcToSys()+0x90>
 8007a2a:	bf00      	nop
 8007a2c:	200017dc 	ldrdcs	r1, [r0], -ip
 8007a30:	20001814 	andcs	r1, r0, r4, lsl r8

08007a34 <HwClock::Set(rtc_time const*)>:
 8007a34:	b570      	push	{r4, r5, r6, lr}
 8007a36:	7a86      	ldrb	r6, [r0, #10]
 8007a38:	b090      	sub	sp, #64	; 0x40
 8007a3a:	4605      	mov	r5, r0
 8007a3c:	460c      	mov	r4, r1
 8007a3e:	2e00      	cmp	r6, #0
 8007a40:	d02b      	beq.n	8007a9a <HwClock::Set(rtc_time const*)+0x66>
 8007a42:	2100      	movs	r1, #0
 8007a44:	a801      	add	r0, sp, #4
 8007a46:	f000 fa07 	bl	8007e58 <gettimeofday>
 8007a4a:	4621      	mov	r1, r4
 8007a4c:	4628      	mov	r0, r5
 8007a4e:	f000 f873 	bl	8007b38 <HwClock::RtcSet(rtc_time const*)>
 8007a52:	6823      	ldr	r3, [r4, #0]
 8007a54:	9307      	str	r3, [sp, #28]
 8007a56:	6863      	ldr	r3, [r4, #4]
 8007a58:	9308      	str	r3, [sp, #32]
 8007a5a:	68a3      	ldr	r3, [r4, #8]
 8007a5c:	9309      	str	r3, [sp, #36]	; 0x24
 8007a5e:	68e3      	ldr	r3, [r4, #12]
 8007a60:	930a      	str	r3, [sp, #40]	; 0x28
 8007a62:	6923      	ldr	r3, [r4, #16]
 8007a64:	930b      	str	r3, [sp, #44]	; 0x2c
 8007a66:	a807      	add	r0, sp, #28
 8007a68:	6963      	ldr	r3, [r4, #20]
 8007a6a:	930c      	str	r3, [sp, #48]	; 0x30
 8007a6c:	2400      	movs	r4, #0
 8007a6e:	940f      	str	r4, [sp, #60]	; 0x3c
 8007a70:	f000 f9a6 	bl	8007dc0 <mktime>
 8007a74:	4621      	mov	r1, r4
 8007a76:	9003      	str	r0, [sp, #12]
 8007a78:	a805      	add	r0, sp, #20
 8007a7a:	f000 f9ed 	bl	8007e58 <gettimeofday>
 8007a7e:	9906      	ldr	r1, [sp, #24]
 8007a80:	9b02      	ldr	r3, [sp, #8]
 8007a82:	1aca      	subs	r2, r1, r3
 8007a84:	bf42      	ittt	mi
 8007a86:	1a5b      	submi	r3, r3, r1
 8007a88:	f5c3 2274 	rsbmi	r2, r3, #999424	; 0xf4000
 8007a8c:	f502 7210 	addmi.w	r2, r2, #576	; 0x240
 8007a90:	2100      	movs	r1, #0
 8007a92:	a803      	add	r0, sp, #12
 8007a94:	9204      	str	r2, [sp, #16]
 8007a96:	f000 fa09 	bl	8007eac <settimeofday>
 8007a9a:	4630      	mov	r0, r6
 8007a9c:	b010      	add	sp, #64	; 0x40
 8007a9e:	bd70      	pop	{r4, r5, r6, pc}

08007aa0 <rtc_configuration()>:
 8007aa0:	b510      	push	{r4, lr}
 8007aa2:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8007aa6:	f000 fdbf 	bl	8008628 <rcu_osci_on>
 8007aaa:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8007aae:	f000 fd61 	bl	8008574 <rcu_osci_stab_wait>
 8007ab2:	2801      	cmp	r0, #1
 8007ab4:	4604      	mov	r4, r0
 8007ab6:	d113      	bne.n	8007ae0 <rtc_configuration()+0x40>
 8007ab8:	f44f 7080 	mov.w	r0, #256	; 0x100
 8007abc:	f000 fd40 	bl	8008540 <rcu_rtc_clock_config>
 8007ac0:	f640 000f 	movw	r0, #2063	; 0x80f
 8007ac4:	f000 fcee 	bl	80084a4 <rcu_periph_clock_enable>
 8007ac8:	f000 fe42 	bl	8008750 <rtc_register_sync_wait>
 8007acc:	f000 fe38 	bl	8008740 <rtc_lwoff_wait>
 8007ad0:	f647 70ff 	movw	r0, #32767	; 0x7fff
 8007ad4:	f000 fe64 	bl	80087a0 <rtc_prescaler_set>
 8007ad8:	f000 fe32 	bl	8008740 <rtc_lwoff_wait>
 8007adc:	4620      	mov	r0, r4
 8007ade:	bd10      	pop	{r4, pc}
 8007ae0:	2000      	movs	r0, #0
 8007ae2:	e7fc      	b.n	8007ade <rtc_configuration()+0x3e>

08007ae4 <HwClock::RtcProbe()>:
 8007ae4:	b538      	push	{r3, r4, r5, lr}
 8007ae6:	4604      	mov	r4, r0
 8007ae8:	2001      	movs	r0, #1
 8007aea:	f000 fb1f 	bl	800812c <bkp_read_data>
 8007aee:	f24a 55a5 	movw	r5, #42405	; 0xa5a5
 8007af2:	42a8      	cmp	r0, r5
 8007af4:	d019      	beq.n	8007b2a <HwClock::RtcProbe()+0x46>
 8007af6:	f7ff ffd3 	bl	8007aa0 <rtc_configuration()>
 8007afa:	b908      	cbnz	r0, 8007b00 <HwClock::RtcProbe()+0x1c>
 8007afc:	72a0      	strb	r0, [r4, #10]
 8007afe:	bd38      	pop	{r3, r4, r5, pc}
 8007b00:	f000 fe1e 	bl	8008740 <rtc_lwoff_wait>
 8007b04:	2000      	movs	r0, #0
 8007b06:	f000 f9e9 	bl	8007edc <time>
 8007b0a:	f000 fe39 	bl	8008780 <rtc_counter_set>
 8007b0e:	f000 fe17 	bl	8008740 <rtc_lwoff_wait>
 8007b12:	4629      	mov	r1, r5
 8007b14:	2001      	movs	r0, #1
 8007b16:	f000 faf3 	bl	8008100 <bkp_write_data>
 8007b1a:	2303      	movs	r3, #3
 8007b1c:	7263      	strb	r3, [r4, #9]
 8007b1e:	2301      	movs	r3, #1
 8007b20:	72a3      	strb	r3, [r4, #10]
 8007b22:	4b04      	ldr	r3, [pc, #16]	; (8007b34 <HwClock::RtcProbe()+0x50>)
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	6063      	str	r3, [r4, #4]
 8007b28:	e7e9      	b.n	8007afe <HwClock::RtcProbe()+0x1a>
 8007b2a:	f000 fe11 	bl	8008750 <rtc_register_sync_wait>
 8007b2e:	f000 fe07 	bl	8008740 <rtc_lwoff_wait>
 8007b32:	e7f2      	b.n	8007b1a <HwClock::RtcProbe()+0x36>
 8007b34:	20001814 	andcs	r1, r0, r4, lsl r8

08007b38 <HwClock::RtcSet(rtc_time const*)>:
 8007b38:	b508      	push	{r3, lr}
 8007b3a:	4608      	mov	r0, r1
 8007b3c:	f000 f940 	bl	8007dc0 <mktime>
 8007b40:	f000 fe1e 	bl	8008780 <rtc_counter_set>
 8007b44:	2001      	movs	r0, #1
 8007b46:	bd08      	pop	{r3, pc}

08007b48 <HwClock::RtcGet(rtc_time*)>:
 8007b48:	b513      	push	{r0, r1, r4, lr}
 8007b4a:	460c      	mov	r4, r1
 8007b4c:	f000 fe0e 	bl	800876c <rtc_counter_get>
 8007b50:	9001      	str	r0, [sp, #4]
 8007b52:	a801      	add	r0, sp, #4
 8007b54:	f000 f8f0 	bl	8007d38 <localtime>
 8007b58:	1e61      	subs	r1, r4, #1
 8007b5a:	f100 0324 	add.w	r3, r0, #36	; 0x24
 8007b5e:	4298      	cmp	r0, r3
 8007b60:	d102      	bne.n	8007b68 <HwClock::RtcGet(rtc_time*)+0x20>
 8007b62:	2001      	movs	r0, #1
 8007b64:	b002      	add	sp, #8
 8007b66:	bd10      	pop	{r4, pc}
 8007b68:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007b6c:	f801 2f01 	strb.w	r2, [r1, #1]!
 8007b70:	e7f5      	b.n	8007b5e <HwClock::RtcGet(rtc_time*)+0x16>

08007b72 <operator delete(void*)>:
 8007b72:	f000 b851 	b.w	8007c18 <free>

08007b76 <operator delete[](void*)>:
 8007b76:	f000 b84f 	b.w	8007c18 <free>

08007b7a <operator new(unsigned int)>:
 8007b7a:	f000 b803 	b.w	8007b84 <malloc>

08007b7e <operator new[](unsigned int)>:
 8007b7e:	f000 b801 	b.w	8007b84 <malloc>
	...

08007b84 <malloc>:
 8007b84:	b538      	push	{r3, r4, r5, lr}
 8007b86:	4601      	mov	r1, r0
 8007b88:	4604      	mov	r4, r0
 8007b8a:	481c      	ldr	r0, [pc, #112]	; (8007bfc <malloc+0x78>)
 8007b8c:	f7f9 fcea 	bl	8001564 <printf>
 8007b90:	b17c      	cbz	r4, 8007bb2 <malloc+0x2e>
 8007b92:	4b1b      	ldr	r3, [pc, #108]	; (8007c00 <malloc+0x7c>)
 8007b94:	6818      	ldr	r0, [r3, #0]
 8007b96:	b978      	cbnz	r0, 8007bb8 <malloc+0x34>
 8007b98:	4a1a      	ldr	r2, [pc, #104]	; (8007c04 <malloc+0x80>)
 8007b9a:	481b      	ldr	r0, [pc, #108]	; (8007c08 <malloc+0x84>)
 8007b9c:	6811      	ldr	r1, [r2, #0]
 8007b9e:	f104 031b 	add.w	r3, r4, #27
 8007ba2:	f023 030f 	bic.w	r3, r3, #15
 8007ba6:	440b      	add	r3, r1
 8007ba8:	4283      	cmp	r3, r0
 8007baa:	d921      	bls.n	8007bf0 <malloc+0x6c>
 8007bac:	4817      	ldr	r0, [pc, #92]	; (8007c0c <malloc+0x88>)
 8007bae:	f7f9 fcd9 	bl	8001564 <printf>
 8007bb2:	2500      	movs	r5, #0
 8007bb4:	4628      	mov	r0, r5
 8007bb6:	bd38      	pop	{r3, r4, r5, pc}
 8007bb8:	4284      	cmp	r4, r0
 8007bba:	d80a      	bhi.n	8007bd2 <malloc+0x4e>
 8007bbc:	685a      	ldr	r2, [r3, #4]
 8007bbe:	6899      	ldr	r1, [r3, #8]
 8007bc0:	3201      	adds	r2, #1
 8007bc2:	428a      	cmp	r2, r1
 8007bc4:	605a      	str	r2, [r3, #4]
 8007bc6:	d900      	bls.n	8007bca <malloc+0x46>
 8007bc8:	609a      	str	r2, [r3, #8]
 8007bca:	68d9      	ldr	r1, [r3, #12]
 8007bcc:	b919      	cbnz	r1, 8007bd6 <malloc+0x52>
 8007bce:	4604      	mov	r4, r0
 8007bd0:	e7e2      	b.n	8007b98 <malloc+0x14>
 8007bd2:	3310      	adds	r3, #16
 8007bd4:	e7de      	b.n	8007b94 <malloc+0x10>
 8007bd6:	688a      	ldr	r2, [r1, #8]
 8007bd8:	60da      	str	r2, [r3, #12]
 8007bda:	4604      	mov	r4, r0
 8007bdc:	2300      	movs	r3, #0
 8007bde:	f101 050c 	add.w	r5, r1, #12
 8007be2:	608b      	str	r3, [r1, #8]
 8007be4:	4622      	mov	r2, r4
 8007be6:	462b      	mov	r3, r5
 8007be8:	4809      	ldr	r0, [pc, #36]	; (8007c10 <malloc+0x8c>)
 8007bea:	f7f9 fcbb 	bl	8001564 <printf>
 8007bee:	e7e1      	b.n	8007bb4 <malloc+0x30>
 8007bf0:	6013      	str	r3, [r2, #0]
 8007bf2:	4b08      	ldr	r3, [pc, #32]	; (8007c14 <malloc+0x90>)
 8007bf4:	e9c1 3400 	strd	r3, r4, [r1]
 8007bf8:	e7f0      	b.n	8007bdc <malloc+0x58>
 8007bfa:	bf00      	nop
 8007bfc:	0800ac9c 	stmdaeq	r0, {r2, r3, r4, r7, sl, fp, sp, pc}
 8007c00:	20000010 	andcs	r0, r0, r0, lsl r0
 8007c04:	2000000c 	andcs	r0, r0, ip
 8007c08:	2000b000 	andcs	fp, r0, r0
 8007c0c:	0800aca8 	stmdaeq	r0, {r3, r5, r7, sl, fp, sp, pc}
 8007c10:	0800acc4 	stmdaeq	r0, {r2, r6, r7, sl, fp, sp, pc}
 8007c14:	424c4d43 	submi	r4, ip, #4288	; 0x10c0

08007c18 <free>:
 8007c18:	b538      	push	{r3, r4, r5, lr}
 8007c1a:	4604      	mov	r4, r0
 8007c1c:	b1c8      	cbz	r0, 8007c52 <free+0x3a>
 8007c1e:	f1a0 050c 	sub.w	r5, r0, #12
 8007c22:	4602      	mov	r2, r0
 8007c24:	4629      	mov	r1, r5
 8007c26:	480c      	ldr	r0, [pc, #48]	; (8007c58 <free+0x40>)
 8007c28:	f7f9 fc9c 	bl	8001564 <printf>
 8007c2c:	f854 2c0c 	ldr.w	r2, [r4, #-12]
 8007c30:	4b0a      	ldr	r3, [pc, #40]	; (8007c5c <free+0x44>)
 8007c32:	429a      	cmp	r2, r3
 8007c34:	d10d      	bne.n	8007c52 <free+0x3a>
 8007c36:	4b0a      	ldr	r3, [pc, #40]	; (8007c60 <free+0x48>)
 8007c38:	681a      	ldr	r2, [r3, #0]
 8007c3a:	b152      	cbz	r2, 8007c52 <free+0x3a>
 8007c3c:	f854 1c08 	ldr.w	r1, [r4, #-8]
 8007c40:	4291      	cmp	r1, r2
 8007c42:	d107      	bne.n	8007c54 <free+0x3c>
 8007c44:	68da      	ldr	r2, [r3, #12]
 8007c46:	f844 2c04 	str.w	r2, [r4, #-4]
 8007c4a:	685a      	ldr	r2, [r3, #4]
 8007c4c:	60dd      	str	r5, [r3, #12]
 8007c4e:	3a01      	subs	r2, #1
 8007c50:	605a      	str	r2, [r3, #4]
 8007c52:	bd38      	pop	{r3, r4, r5, pc}
 8007c54:	3310      	adds	r3, #16
 8007c56:	e7ef      	b.n	8007c38 <free+0x20>
 8007c58:	0800acef 	stmdaeq	r0, {r0, r1, r2, r3, r5, r6, r7, sl, fp, sp, pc}
 8007c5c:	424c4d43 	submi	r4, ip, #4288	; 0x10c0
 8007c60:	20000010 	andcs	r0, r0, r0, lsl r0

08007c64 <memcpy>:
 8007c64:	b510      	push	{r4, lr}
 8007c66:	1e43      	subs	r3, r0, #1
 8007c68:	440a      	add	r2, r1
 8007c6a:	4291      	cmp	r1, r2
 8007c6c:	d100      	bne.n	8007c70 <memcpy+0xc>
 8007c6e:	bd10      	pop	{r4, pc}
 8007c70:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007c74:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007c78:	e7f7      	b.n	8007c6a <memcpy+0x6>

08007c7a <memmove>:
 8007c7a:	4288      	cmp	r0, r1
 8007c7c:	b510      	push	{r4, lr}
 8007c7e:	eb01 0302 	add.w	r3, r1, r2
 8007c82:	d208      	bcs.n	8007c96 <memmove+0x1c>
 8007c84:	1e42      	subs	r2, r0, #1
 8007c86:	4299      	cmp	r1, r3
 8007c88:	d100      	bne.n	8007c8c <memmove+0x12>
 8007c8a:	bd10      	pop	{r4, pc}
 8007c8c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007c90:	f802 4f01 	strb.w	r4, [r2, #1]!
 8007c94:	e7f7      	b.n	8007c86 <memmove+0xc>
 8007c96:	4402      	add	r2, r0
 8007c98:	4601      	mov	r1, r0
 8007c9a:	428a      	cmp	r2, r1
 8007c9c:	d0f5      	beq.n	8007c8a <memmove+0x10>
 8007c9e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007ca2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007ca6:	e7f8      	b.n	8007c9a <memmove+0x20>

08007ca8 <memset>:
 8007ca8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007caa:	b1c2      	cbz	r2, 8007cde <memset+0x36>
 8007cac:	b2c9      	uxtb	r1, r1
 8007cae:	4603      	mov	r3, r0
 8007cb0:	075c      	lsls	r4, r3, #29
 8007cb2:	d110      	bne.n	8007cd6 <memset+0x2e>
 8007cb4:	ea41 2401 	orr.w	r4, r1, r1, lsl #8
 8007cb8:	ea44 4704 	orr.w	r7, r4, r4, lsl #16
 8007cbc:	f022 0407 	bic.w	r4, r2, #7
 8007cc0:	463d      	mov	r5, r7
 8007cc2:	441c      	add	r4, r3
 8007cc4:	461e      	mov	r6, r3
 8007cc6:	42a6      	cmp	r6, r4
 8007cc8:	d10a      	bne.n	8007ce0 <memset+0x38>
 8007cca:	441a      	add	r2, r3
 8007ccc:	4294      	cmp	r4, r2
 8007cce:	d006      	beq.n	8007cde <memset+0x36>
 8007cd0:	f804 1b01 	strb.w	r1, [r4], #1
 8007cd4:	e7fa      	b.n	8007ccc <memset+0x24>
 8007cd6:	3a01      	subs	r2, #1
 8007cd8:	f803 1b01 	strb.w	r1, [r3], #1
 8007cdc:	d1e8      	bne.n	8007cb0 <memset+0x8>
 8007cde:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007ce0:	f846 7b08 	str.w	r7, [r6], #8
 8007ce4:	f846 5c04 	str.w	r5, [r6, #-4]
 8007ce8:	e7ed      	b.n	8007cc6 <memset+0x1e>

08007cea <isleapyear>:
 8007cea:	2264      	movs	r2, #100	; 0x64
 8007cec:	fb90 f3f2 	sdiv	r3, r0, r2
 8007cf0:	fb02 0313 	mls	r3, r2, r3, r0
 8007cf4:	b94b      	cbnz	r3, 8007d0a <isleapyear+0x20>
 8007cf6:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8007cfa:	fb90 f2f3 	sdiv	r2, r0, r3
 8007cfe:	fb03 0012 	mls	r0, r3, r2, r0
 8007d02:	fab0 f080 	clz	r0, r0
 8007d06:	0940      	lsrs	r0, r0, #5
 8007d08:	4770      	bx	lr
 8007d0a:	f010 0f03 	tst.w	r0, #3
 8007d0e:	bf0c      	ite	eq
 8007d10:	2001      	moveq	r0, #1
 8007d12:	2000      	movne	r0, #0
 8007d14:	4770      	bx	lr
	...

08007d18 <getdaysofmonth>:
 8007d18:	b510      	push	{r4, lr}
 8007d1a:	4604      	mov	r4, r0
 8007d1c:	2c01      	cmp	r4, #1
 8007d1e:	4608      	mov	r0, r1
 8007d20:	d102      	bne.n	8007d28 <getdaysofmonth+0x10>
 8007d22:	f7ff ffe2 	bl	8007cea <isleapyear>
 8007d26:	b918      	cbnz	r0, 8007d30 <getdaysofmonth+0x18>
 8007d28:	4b02      	ldr	r3, [pc, #8]	; (8007d34 <getdaysofmonth+0x1c>)
 8007d2a:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8007d2e:	bd10      	pop	{r4, pc}
 8007d30:	201d      	movs	r0, #29
 8007d32:	e7fc      	b.n	8007d2e <getdaysofmonth+0x16>
 8007d34:	0800ad18 	stmdaeq	r0, {r3, r4, r8, sl, fp, sp, pc}

08007d38 <localtime>:
 8007d38:	b570      	push	{r4, r5, r6, lr}
 8007d3a:	2800      	cmp	r0, #0
 8007d3c:	d03c      	beq.n	8007db8 <localtime+0x80>
 8007d3e:	6803      	ldr	r3, [r0, #0]
 8007d40:	4d1e      	ldr	r5, [pc, #120]	; (8007dbc <localtime+0x84>)
 8007d42:	213c      	movs	r1, #60	; 0x3c
 8007d44:	fb93 f2f1 	sdiv	r2, r3, r1
 8007d48:	fb01 3312 	mls	r3, r1, r2, r3
 8007d4c:	602b      	str	r3, [r5, #0]
 8007d4e:	fb92 f3f1 	sdiv	r3, r2, r1
 8007d52:	fb01 2213 	mls	r2, r1, r3, r2
 8007d56:	606a      	str	r2, [r5, #4]
 8007d58:	2218      	movs	r2, #24
 8007d5a:	fb93 f4f2 	sdiv	r4, r3, r2
 8007d5e:	fb02 3314 	mls	r3, r2, r4, r3
 8007d62:	60ab      	str	r3, [r5, #8]
 8007d64:	1d22      	adds	r2, r4, #4
 8007d66:	2307      	movs	r3, #7
 8007d68:	fb92 f3f3 	sdiv	r3, r2, r3
 8007d6c:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8007d70:	1ad2      	subs	r2, r2, r3
 8007d72:	61aa      	str	r2, [r5, #24]
 8007d74:	f240 71b2 	movw	r1, #1970	; 0x7b2
 8007d78:	f240 166d 	movw	r6, #365	; 0x16d
 8007d7c:	4608      	mov	r0, r1
 8007d7e:	f7ff ffb4 	bl	8007cea <isleapyear>
 8007d82:	2800      	cmp	r0, #0
 8007d84:	bf14      	ite	ne
 8007d86:	f44f 73b7 	movne.w	r3, #366	; 0x16e
 8007d8a:	4633      	moveq	r3, r6
 8007d8c:	429c      	cmp	r4, r3
 8007d8e:	db02      	blt.n	8007d96 <localtime+0x5e>
 8007d90:	1ae4      	subs	r4, r4, r3
 8007d92:	3101      	adds	r1, #1
 8007d94:	e7f2      	b.n	8007d7c <localtime+0x44>
 8007d96:	f2a1 736c 	subw	r3, r1, #1900	; 0x76c
 8007d9a:	616b      	str	r3, [r5, #20]
 8007d9c:	61ec      	str	r4, [r5, #28]
 8007d9e:	2600      	movs	r6, #0
 8007da0:	4630      	mov	r0, r6
 8007da2:	f7ff ffb9 	bl	8007d18 <getdaysofmonth>
 8007da6:	4284      	cmp	r4, r0
 8007da8:	db02      	blt.n	8007db0 <localtime+0x78>
 8007daa:	1a24      	subs	r4, r4, r0
 8007dac:	3601      	adds	r6, #1
 8007dae:	e7f7      	b.n	8007da0 <localtime+0x68>
 8007db0:	3401      	adds	r4, #1
 8007db2:	4802      	ldr	r0, [pc, #8]	; (8007dbc <localtime+0x84>)
 8007db4:	612e      	str	r6, [r5, #16]
 8007db6:	60ec      	str	r4, [r5, #12]
 8007db8:	bd70      	pop	{r4, r5, r6, pc}
 8007dba:	bf00      	nop
 8007dbc:	200017e4 	andcs	r1, r0, r4, ror #15

08007dc0 <mktime>:
 8007dc0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007dc4:	4604      	mov	r4, r0
 8007dc6:	2800      	cmp	r0, #0
 8007dc8:	d043      	beq.n	8007e52 <mktime+0x92>
 8007dca:	6941      	ldr	r1, [r0, #20]
 8007dcc:	f1a1 0346 	sub.w	r3, r1, #70	; 0x46
 8007dd0:	2b45      	cmp	r3, #69	; 0x45
 8007dd2:	d83e      	bhi.n	8007e52 <mktime+0x92>
 8007dd4:	2600      	movs	r6, #0
 8007dd6:	f240 75b2 	movw	r5, #1970	; 0x7b2
 8007dda:	f201 776b 	addw	r7, r1, #1899	; 0x76b
 8007dde:	f240 186d 	movw	r8, #365	; 0x16d
 8007de2:	42af      	cmp	r7, r5
 8007de4:	da24      	bge.n	8007e30 <mktime+0x70>
 8007de6:	6927      	ldr	r7, [r4, #16]
 8007de8:	2f0b      	cmp	r7, #11
 8007dea:	d832      	bhi.n	8007e52 <mktime+0x92>
 8007dec:	2500      	movs	r5, #0
 8007dee:	42af      	cmp	r7, r5
 8007df0:	d129      	bne.n	8007e46 <mktime+0x86>
 8007df2:	68e5      	ldr	r5, [r4, #12]
 8007df4:	2d00      	cmp	r5, #0
 8007df6:	dd2c      	ble.n	8007e52 <mktime+0x92>
 8007df8:	4638      	mov	r0, r7
 8007dfa:	f7ff ff8d 	bl	8007d18 <getdaysofmonth>
 8007dfe:	4285      	cmp	r5, r0
 8007e00:	dc27      	bgt.n	8007e52 <mktime+0x92>
 8007e02:	3d01      	subs	r5, #1
 8007e04:	2318      	movs	r3, #24
 8007e06:	4435      	add	r5, r6
 8007e08:	435d      	muls	r5, r3
 8007e0a:	68a3      	ldr	r3, [r4, #8]
 8007e0c:	2b17      	cmp	r3, #23
 8007e0e:	d820      	bhi.n	8007e52 <mktime+0x92>
 8007e10:	442b      	add	r3, r5
 8007e12:	213c      	movs	r1, #60	; 0x3c
 8007e14:	fb01 f203 	mul.w	r2, r1, r3
 8007e18:	6863      	ldr	r3, [r4, #4]
 8007e1a:	2b3b      	cmp	r3, #59	; 0x3b
 8007e1c:	d819      	bhi.n	8007e52 <mktime+0x92>
 8007e1e:	6820      	ldr	r0, [r4, #0]
 8007e20:	4413      	add	r3, r2
 8007e22:	283b      	cmp	r0, #59	; 0x3b
 8007e24:	fb01 f303 	mul.w	r3, r1, r3
 8007e28:	d813      	bhi.n	8007e52 <mktime+0x92>
 8007e2a:	4418      	add	r0, r3
 8007e2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007e30:	4628      	mov	r0, r5
 8007e32:	f7ff ff5a 	bl	8007cea <isleapyear>
 8007e36:	2800      	cmp	r0, #0
 8007e38:	bf14      	ite	ne
 8007e3a:	f44f 73b7 	movne.w	r3, #366	; 0x16e
 8007e3e:	4643      	moveq	r3, r8
 8007e40:	441e      	add	r6, r3
 8007e42:	3501      	adds	r5, #1
 8007e44:	e7cd      	b.n	8007de2 <mktime+0x22>
 8007e46:	4628      	mov	r0, r5
 8007e48:	f7ff ff66 	bl	8007d18 <getdaysofmonth>
 8007e4c:	3501      	adds	r5, #1
 8007e4e:	4406      	add	r6, r0
 8007e50:	e7cd      	b.n	8007dee <mktime+0x2e>
 8007e52:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007e56:	e7e9      	b.n	8007e2c <mktime+0x6c>

08007e58 <gettimeofday>:
 8007e58:	b538      	push	{r3, r4, r5, lr}
 8007e5a:	4a10      	ldr	r2, [pc, #64]	; (8007e9c <gettimeofday+0x44>)
 8007e5c:	4b10      	ldr	r3, [pc, #64]	; (8007ea0 <gettimeofday+0x48>)
 8007e5e:	6814      	ldr	r4, [r2, #0]
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	6013      	str	r3, [r2, #0]
 8007e64:	429c      	cmp	r4, r3
 8007e66:	bf2c      	ite	cs
 8007e68:	1ae4      	subcs	r4, r4, r3
 8007e6a:	1b1c      	subcc	r4, r3, r4
 8007e6c:	4b0d      	ldr	r3, [pc, #52]	; (8007ea4 <gettimeofday+0x4c>)
 8007e6e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8007e72:	4354      	muls	r4, r2
 8007e74:	e9d3 2100 	ldrd	r2, r1, [r3]
 8007e78:	18a4      	adds	r4, r4, r2
 8007e7a:	f141 0100 	adc.w	r1, r1, #0
 8007e7e:	4605      	mov	r5, r0
 8007e80:	e9c3 4100 	strd	r4, r1, [r3]
 8007e84:	4a08      	ldr	r2, [pc, #32]	; (8007ea8 <gettimeofday+0x50>)
 8007e86:	2300      	movs	r3, #0
 8007e88:	4620      	mov	r0, r4
 8007e8a:	f7f8 f98d 	bl	80001a8 <__aeabi_uldivmod>
 8007e8e:	4b06      	ldr	r3, [pc, #24]	; (8007ea8 <gettimeofday+0x50>)
 8007e90:	6028      	str	r0, [r5, #0]
 8007e92:	fb03 4410 	mls	r4, r3, r0, r4
 8007e96:	606c      	str	r4, [r5, #4]
 8007e98:	2000      	movs	r0, #0
 8007e9a:	bd38      	pop	{r3, r4, r5, pc}
 8007e9c:	20001810 	andcs	r1, r0, r0, lsl r8
 8007ea0:	20001814 	andcs	r1, r0, r4, lsl r8
 8007ea4:	20001808 	andcs	r1, r0, r8, lsl #16
 8007ea8:	000f4240 	andeq	r4, pc, r0, asr #4

08007eac <settimeofday>:
 8007eac:	4b07      	ldr	r3, [pc, #28]	; (8007ecc <settimeofday+0x20>)
 8007eae:	4908      	ldr	r1, [pc, #32]	; (8007ed0 <settimeofday+0x24>)
 8007eb0:	681a      	ldr	r2, [r3, #0]
 8007eb2:	4b08      	ldr	r3, [pc, #32]	; (8007ed4 <settimeofday+0x28>)
 8007eb4:	b510      	push	{r4, lr}
 8007eb6:	601a      	str	r2, [r3, #0]
 8007eb8:	6843      	ldr	r3, [r0, #4]
 8007eba:	6804      	ldr	r4, [r0, #0]
 8007ebc:	4806      	ldr	r0, [pc, #24]	; (8007ed8 <settimeofday+0x2c>)
 8007ebe:	17da      	asrs	r2, r3, #31
 8007ec0:	fbc4 3200 	smlal	r3, r2, r4, r0
 8007ec4:	e9c1 3200 	strd	r3, r2, [r1]
 8007ec8:	2000      	movs	r0, #0
 8007eca:	bd10      	pop	{r4, pc}
 8007ecc:	20001814 	andcs	r1, r0, r4, lsl r8
 8007ed0:	20001808 	andcs	r1, r0, r8, lsl #16
 8007ed4:	20001810 	andcs	r1, r0, r0, lsl r8
 8007ed8:	000f4240 	andeq	r4, pc, r0, asr #4

08007edc <time>:
 8007edc:	b513      	push	{r0, r1, r4, lr}
 8007ede:	4604      	mov	r4, r0
 8007ee0:	2100      	movs	r1, #0
 8007ee2:	4668      	mov	r0, sp
 8007ee4:	f7ff ffb8 	bl	8007e58 <gettimeofday>
 8007ee8:	9800      	ldr	r0, [sp, #0]
 8007eea:	b104      	cbz	r4, 8007eee <time+0x12>
 8007eec:	6020      	str	r0, [r4, #0]
 8007eee:	b002      	add	sp, #8
 8007ef0:	bd10      	pop	{r4, pc}
	...

08007ef4 <uart0_init>:
 8007ef4:	b507      	push	{r0, r1, r2, lr}
 8007ef6:	2301      	movs	r3, #1
 8007ef8:	9300      	str	r3, [sp, #0]
 8007efa:	4805      	ldr	r0, [pc, #20]	; (8007f10 <uart0_init+0x1c>)
 8007efc:	2300      	movs	r3, #0
 8007efe:	2208      	movs	r2, #8
 8007f00:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
 8007f04:	f001 f8a0 	bl	8009048 <gd32_uart_begin>
 8007f08:	b003      	add	sp, #12
 8007f0a:	f85d fb04 	ldr.w	pc, [sp], #4
 8007f0e:	bf00      	nop
 8007f10:	40013800 	andmi	r3, r1, r0, lsl #16

08007f14 <uart0_putc>:
 8007f14:	280a      	cmp	r0, #10
 8007f16:	b538      	push	{r3, r4, r5, lr}
 8007f18:	4604      	mov	r4, r0
 8007f1a:	d10a      	bne.n	8007f32 <uart0_putc+0x1e>
 8007f1c:	4d0b      	ldr	r5, [pc, #44]	; (8007f4c <uart0_putc+0x38>)
 8007f1e:	2107      	movs	r1, #7
 8007f20:	4628      	mov	r0, r5
 8007f22:	f000 fdd1 	bl	8008ac8 <usart_flag_get>
 8007f26:	2800      	cmp	r0, #0
 8007f28:	d0f9      	beq.n	8007f1e <uart0_putc+0xa>
 8007f2a:	4b09      	ldr	r3, [pc, #36]	; (8007f50 <uart0_putc+0x3c>)
 8007f2c:	220d      	movs	r2, #13
 8007f2e:	f8c3 2804 	str.w	r2, [r3, #2052]	; 0x804
 8007f32:	4d06      	ldr	r5, [pc, #24]	; (8007f4c <uart0_putc+0x38>)
 8007f34:	2107      	movs	r1, #7
 8007f36:	4628      	mov	r0, r5
 8007f38:	f000 fdc6 	bl	8008ac8 <usart_flag_get>
 8007f3c:	2800      	cmp	r0, #0
 8007f3e:	d0f9      	beq.n	8007f34 <uart0_putc+0x20>
 8007f40:	4b03      	ldr	r3, [pc, #12]	; (8007f50 <uart0_putc+0x3c>)
 8007f42:	b2e4      	uxtb	r4, r4
 8007f44:	f8c3 4804 	str.w	r4, [r3, #2052]	; 0x804
 8007f48:	bd38      	pop	{r3, r4, r5, pc}
 8007f4a:	bf00      	nop
 8007f4c:	40013800 	andmi	r3, r1, r0, lsl #16
 8007f50:	40013000 	andmi	r3, r1, r0

08007f54 <uart0_puts>:
 8007f54:	b510      	push	{r4, lr}
 8007f56:	1e44      	subs	r4, r0, #1
 8007f58:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8007f5c:	b903      	cbnz	r3, 8007f60 <uart0_puts+0xc>
 8007f5e:	bd10      	pop	{r4, pc}
 8007f60:	2b0a      	cmp	r3, #10
 8007f62:	d102      	bne.n	8007f6a <uart0_puts+0x16>
 8007f64:	200d      	movs	r0, #13
 8007f66:	f7ff ffd5 	bl	8007f14 <uart0_putc>
 8007f6a:	7820      	ldrb	r0, [r4, #0]
 8007f6c:	f7ff ffd2 	bl	8007f14 <uart0_putc>
 8007f70:	e7f2      	b.n	8007f58 <uart0_puts+0x4>
	...

08007f74 <mac_address_get>:
 8007f74:	4a07      	ldr	r2, [pc, #28]	; (8007f94 <mac_address_get+0x20>)
 8007f76:	f8d2 37e8 	ldr.w	r3, [r2, #2024]	; 0x7e8
 8007f7a:	f8d2 27ec 	ldr.w	r2, [r2, #2028]	; 0x7ec
 8007f7e:	7042      	strb	r2, [r0, #1]
 8007f80:	0e1a      	lsrs	r2, r3, #24
 8007f82:	7082      	strb	r2, [r0, #2]
 8007f84:	0c1a      	lsrs	r2, r3, #16
 8007f86:	2102      	movs	r1, #2
 8007f88:	70c2      	strb	r2, [r0, #3]
 8007f8a:	0a1a      	lsrs	r2, r3, #8
 8007f8c:	7001      	strb	r1, [r0, #0]
 8007f8e:	7102      	strb	r2, [r0, #4]
 8007f90:	7143      	strb	r3, [r0, #5]
 8007f92:	4770      	bx	lr
 8007f94:	1ffff000 	svcne	0x00fff000

08007f98 <systick_config>:
 8007f98:	4b0c      	ldr	r3, [pc, #48]	; (8007fcc <systick_config+0x34>)
 8007f9a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	fbb3 f3f2 	udiv	r3, r3, r2
 8007fa4:	3b01      	subs	r3, #1
 8007fa6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007faa:	d20d      	bcs.n	8007fc8 <systick_config+0x30>
 8007fac:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
 8007fb0:	21f0      	movs	r1, #240	; 0xf0
 8007fb2:	6153      	str	r3, [r2, #20]
 8007fb4:	4b06      	ldr	r3, [pc, #24]	; (8007fd0 <systick_config+0x38>)
 8007fb6:	2007      	movs	r0, #7
 8007fb8:	f883 1023 	strb.w	r1, [r3, #35]	; 0x23
 8007fbc:	2100      	movs	r1, #0
 8007fbe:	6191      	str	r1, [r2, #24]
 8007fc0:	6110      	str	r0, [r2, #16]
 8007fc2:	f883 1023 	strb.w	r1, [r3, #35]	; 0x23
 8007fc6:	4770      	bx	lr
 8007fc8:	e7fe      	b.n	8007fc8 <systick_config+0x30>
 8007fca:	bf00      	nop
 8007fcc:	200000e0 	andcs	r0, r0, r0, ror #1
 8007fd0:	e000ed00 	and	lr, r0, r0, lsl #26

08007fd4 <SysTick_Handler>:
 8007fd4:	4a02      	ldr	r2, [pc, #8]	; (8007fe0 <SysTick_Handler+0xc>)
 8007fd6:	6813      	ldr	r3, [r2, #0]
 8007fd8:	3301      	adds	r3, #1
 8007fda:	6013      	str	r3, [r2, #0]
 8007fdc:	4770      	bx	lr
 8007fde:	bf00      	nop
 8007fe0:	20001814 	andcs	r1, r0, r4, lsl r8

08007fe4 <SystemInit>:
 8007fe4:	4a43      	ldr	r2, [pc, #268]	; (80080f4 <SystemInit+0x110>)
 8007fe6:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8007fea:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007fee:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 8007ff2:	4b41      	ldr	r3, [pc, #260]	; (80080f8 <SystemInit+0x114>)
 8007ff4:	681a      	ldr	r2, [r3, #0]
 8007ff6:	f042 0201 	orr.w	r2, r2, #1
 8007ffa:	601a      	str	r2, [r3, #0]
 8007ffc:	685a      	ldr	r2, [r3, #4]
 8007ffe:	b082      	sub	sp, #8
 8008000:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8008004:	605a      	str	r2, [r3, #4]
 8008006:	2200      	movs	r2, #0
 8008008:	9201      	str	r2, [sp, #4]
 800800a:	f644 611f 	movw	r1, #19999	; 0x4e1f
 800800e:	9a01      	ldr	r2, [sp, #4]
 8008010:	428a      	cmp	r2, r1
 8008012:	d922      	bls.n	800805a <SystemInit+0x76>
 8008014:	685a      	ldr	r2, [r3, #4]
 8008016:	f022 0203 	bic.w	r2, r2, #3
 800801a:	605a      	str	r2, [r3, #4]
 800801c:	681a      	ldr	r2, [r3, #0]
 800801e:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8008022:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8008026:	601a      	str	r2, [r3, #0]
 8008028:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 800802c:	609a      	str	r2, [r3, #8]
 800802e:	681a      	ldr	r2, [r3, #0]
 8008030:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8008034:	601a      	str	r2, [r3, #0]
 8008036:	2200      	movs	r2, #0
 8008038:	605a      	str	r2, [r3, #4]
 800803a:	62da      	str	r2, [r3, #44]	; 0x2c
 800803c:	681a      	ldr	r2, [r3, #0]
 800803e:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8008042:	601a      	str	r2, [r3, #0]
 8008044:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008048:	6819      	ldr	r1, [r3, #0]
 800804a:	0388      	lsls	r0, r1, #14
 800804c:	d401      	bmi.n	8008052 <SystemInit+0x6e>
 800804e:	3a01      	subs	r2, #1
 8008050:	d1fa      	bne.n	8008048 <SystemInit+0x64>
 8008052:	681a      	ldr	r2, [r3, #0]
 8008054:	0391      	lsls	r1, r2, #14
 8008056:	d404      	bmi.n	8008062 <SystemInit+0x7e>
 8008058:	e7fe      	b.n	8008058 <SystemInit+0x74>
 800805a:	9a01      	ldr	r2, [sp, #4]
 800805c:	3201      	adds	r2, #1
 800805e:	9201      	str	r2, [sp, #4]
 8008060:	e7d5      	b.n	800800e <SystemInit+0x2a>
 8008062:	69da      	ldr	r2, [r3, #28]
 8008064:	4925      	ldr	r1, [pc, #148]	; (80080fc <SystemInit+0x118>)
 8008066:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800806a:	61da      	str	r2, [r3, #28]
 800806c:	680a      	ldr	r2, [r1, #0]
 800806e:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8008072:	600a      	str	r2, [r1, #0]
 8008074:	685a      	ldr	r2, [r3, #4]
 8008076:	605a      	str	r2, [r3, #4]
 8008078:	685a      	ldr	r2, [r3, #4]
 800807a:	605a      	str	r2, [r3, #4]
 800807c:	685a      	ldr	r2, [r3, #4]
 800807e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8008082:	605a      	str	r2, [r3, #4]
 8008084:	685a      	ldr	r2, [r3, #4]
 8008086:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 800808a:	605a      	str	r2, [r3, #4]
 800808c:	685a      	ldr	r2, [r3, #4]
 800808e:	f442 3240 	orr.w	r2, r2, #196608	; 0x30000
 8008092:	605a      	str	r2, [r3, #4]
 8008094:	685a      	ldr	r2, [r3, #4]
 8008096:	f022 4290 	bic.w	r2, r2, #1207959552	; 0x48000000
 800809a:	f422 1270 	bic.w	r2, r2, #3932160	; 0x3c0000
 800809e:	605a      	str	r2, [r3, #4]
 80080a0:	685a      	ldr	r2, [r3, #4]
 80080a2:	f042 6203 	orr.w	r2, r2, #137363456	; 0x8300000
 80080a6:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80080aa:	605a      	str	r2, [r3, #4]
 80080ac:	681a      	ldr	r2, [r3, #0]
 80080ae:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 80080b2:	601a      	str	r2, [r3, #0]
 80080b4:	681a      	ldr	r2, [r3, #0]
 80080b6:	0192      	lsls	r2, r2, #6
 80080b8:	d5fc      	bpl.n	80080b4 <SystemInit+0xd0>
 80080ba:	680a      	ldr	r2, [r1, #0]
 80080bc:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80080c0:	600a      	str	r2, [r1, #0]
 80080c2:	4a0e      	ldr	r2, [pc, #56]	; (80080fc <SystemInit+0x118>)
 80080c4:	6851      	ldr	r1, [r2, #4]
 80080c6:	03c8      	lsls	r0, r1, #15
 80080c8:	d5fc      	bpl.n	80080c4 <SystemInit+0xe0>
 80080ca:	6811      	ldr	r1, [r2, #0]
 80080cc:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
 80080d0:	6011      	str	r1, [r2, #0]
 80080d2:	6851      	ldr	r1, [r2, #4]
 80080d4:	0389      	lsls	r1, r1, #14
 80080d6:	d5fc      	bpl.n	80080d2 <SystemInit+0xee>
 80080d8:	685a      	ldr	r2, [r3, #4]
 80080da:	f022 0203 	bic.w	r2, r2, #3
 80080de:	605a      	str	r2, [r3, #4]
 80080e0:	685a      	ldr	r2, [r3, #4]
 80080e2:	f042 0202 	orr.w	r2, r2, #2
 80080e6:	605a      	str	r2, [r3, #4]
 80080e8:	685a      	ldr	r2, [r3, #4]
 80080ea:	0712      	lsls	r2, r2, #28
 80080ec:	d5fc      	bpl.n	80080e8 <SystemInit+0x104>
 80080ee:	b002      	add	sp, #8
 80080f0:	4770      	bx	lr
 80080f2:	bf00      	nop
 80080f4:	e000ed00 	and	lr, r0, r0, lsl #26
 80080f8:	40021000 	andmi	r1, r2, r0
 80080fc:	40007000 	andmi	r7, r0, r0

08008100 <bkp_write_data>:
 8008100:	f1a0 030b 	sub.w	r3, r0, #11
 8008104:	2b1f      	cmp	r3, #31
 8008106:	d804      	bhi.n	8008112 <bkp_write_data+0x12>
 8008108:	4b07      	ldr	r3, [pc, #28]	; (8008128 <bkp_write_data+0x28>)
 800810a:	4403      	add	r3, r0
 800810c:	009b      	lsls	r3, r3, #2
 800810e:	8019      	strh	r1, [r3, #0]
 8008110:	4770      	bx	lr
 8008112:	1e43      	subs	r3, r0, #1
 8008114:	2b09      	cmp	r3, #9
 8008116:	bf9f      	itttt	ls
 8008118:	f100 5080 	addls.w	r0, r0, #268435456	; 0x10000000
 800811c:	f500 50d8 	addls.w	r0, r0, #6912	; 0x1b00
 8008120:	0080      	lslls	r0, r0, #2
 8008122:	8001      	strhls	r1, [r0, #0]
 8008124:	4770      	bx	lr
 8008126:	bf00      	nop
 8008128:	10001b05 	andne	r1, r0, r5, lsl #22

0800812c <bkp_read_data>:
 800812c:	f1a0 030b 	sub.w	r3, r0, #11
 8008130:	2b1f      	cmp	r3, #31
 8008132:	d805      	bhi.n	8008140 <bkp_read_data+0x14>
 8008134:	4b08      	ldr	r3, [pc, #32]	; (8008158 <bkp_read_data+0x2c>)
 8008136:	4403      	add	r3, r0
 8008138:	009b      	lsls	r3, r3, #2
 800813a:	8818      	ldrh	r0, [r3, #0]
 800813c:	b280      	uxth	r0, r0
 800813e:	4770      	bx	lr
 8008140:	1e43      	subs	r3, r0, #1
 8008142:	2b09      	cmp	r3, #9
 8008144:	d806      	bhi.n	8008154 <bkp_read_data+0x28>
 8008146:	f100 5080 	add.w	r0, r0, #268435456	; 0x10000000
 800814a:	f500 50d8 	add.w	r0, r0, #6912	; 0x1b00
 800814e:	0080      	lsls	r0, r0, #2
 8008150:	8800      	ldrh	r0, [r0, #0]
 8008152:	e7f3      	b.n	800813c <bkp_read_data+0x10>
 8008154:	2000      	movs	r0, #0
 8008156:	4770      	bx	lr
 8008158:	10001b05 	andne	r1, r0, r5, lsl #22

0800815c <dma_deinit>:
 800815c:	4b0c      	ldr	r3, [pc, #48]	; (8008190 <dma_deinit+0x34>)
 800815e:	4298      	cmp	r0, r3
 8008160:	d102      	bne.n	8008168 <dma_deinit+0xc>
 8008162:	2904      	cmp	r1, #4
 8008164:	d900      	bls.n	8008168 <dma_deinit+0xc>
 8008166:	e7fe      	b.n	8008166 <dma_deinit+0xa>
 8008168:	2314      	movs	r3, #20
 800816a:	fb03 0301 	mla	r3, r3, r1, r0
 800816e:	0089      	lsls	r1, r1, #2
 8008170:	689a      	ldr	r2, [r3, #8]
 8008172:	f022 0201 	bic.w	r2, r2, #1
 8008176:	609a      	str	r2, [r3, #8]
 8008178:	2200      	movs	r2, #0
 800817a:	609a      	str	r2, [r3, #8]
 800817c:	60da      	str	r2, [r3, #12]
 800817e:	611a      	str	r2, [r3, #16]
 8008180:	615a      	str	r2, [r3, #20]
 8008182:	6842      	ldr	r2, [r0, #4]
 8008184:	230f      	movs	r3, #15
 8008186:	408b      	lsls	r3, r1
 8008188:	4313      	orrs	r3, r2
 800818a:	6043      	str	r3, [r0, #4]
 800818c:	4770      	bx	lr
 800818e:	bf00      	nop
 8008190:	40020400 	andmi	r0, r2, r0, lsl #8

08008194 <dma_struct_para_init>:
 8008194:	b900      	cbnz	r0, 8008198 <dma_struct_para_init+0x4>
 8008196:	e7fe      	b.n	8008196 <dma_struct_para_init+0x2>
 8008198:	2300      	movs	r3, #0
 800819a:	e9c0 3300 	strd	r3, r3, [r0]
 800819e:	e9c0 3302 	strd	r3, r3, [r0, #8]
 80081a2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80081a6:	8303      	strh	r3, [r0, #24]
 80081a8:	7683      	strb	r3, [r0, #26]
 80081aa:	4770      	bx	lr

080081ac <dma_init>:
 80081ac:	4b1b      	ldr	r3, [pc, #108]	; (800821c <dma_init+0x70>)
 80081ae:	4298      	cmp	r0, r3
 80081b0:	b510      	push	{r4, lr}
 80081b2:	d102      	bne.n	80081ba <dma_init+0xe>
 80081b4:	2904      	cmp	r1, #4
 80081b6:	d900      	bls.n	80081ba <dma_init+0xe>
 80081b8:	e7fe      	b.n	80081b8 <dma_init+0xc>
 80081ba:	2314      	movs	r3, #20
 80081bc:	fb03 0101 	mla	r1, r3, r1, r0
 80081c0:	6813      	ldr	r3, [r2, #0]
 80081c2:	610b      	str	r3, [r1, #16]
 80081c4:	6893      	ldr	r3, [r2, #8]
 80081c6:	614b      	str	r3, [r1, #20]
 80081c8:	8a13      	ldrh	r3, [r2, #16]
 80081ca:	60cb      	str	r3, [r1, #12]
 80081cc:	68d4      	ldr	r4, [r2, #12]
 80081ce:	6853      	ldr	r3, [r2, #4]
 80081d0:	6888      	ldr	r0, [r1, #8]
 80081d2:	4323      	orrs	r3, r4
 80081d4:	6954      	ldr	r4, [r2, #20]
 80081d6:	f420 507c 	bic.w	r0, r0, #16128	; 0x3f00
 80081da:	4323      	orrs	r3, r4
 80081dc:	4303      	orrs	r3, r0
 80081de:	608b      	str	r3, [r1, #8]
 80081e0:	7e13      	ldrb	r3, [r2, #24]
 80081e2:	2b01      	cmp	r3, #1
 80081e4:	688b      	ldr	r3, [r1, #8]
 80081e6:	bf0c      	ite	eq
 80081e8:	f043 0340 	orreq.w	r3, r3, #64	; 0x40
 80081ec:	f023 0340 	bicne.w	r3, r3, #64	; 0x40
 80081f0:	608b      	str	r3, [r1, #8]
 80081f2:	7e53      	ldrb	r3, [r2, #25]
 80081f4:	2b01      	cmp	r3, #1
 80081f6:	688b      	ldr	r3, [r1, #8]
 80081f8:	bf0c      	ite	eq
 80081fa:	f043 0380 	orreq.w	r3, r3, #128	; 0x80
 80081fe:	f023 0380 	bicne.w	r3, r3, #128	; 0x80
 8008202:	608b      	str	r3, [r1, #8]
 8008204:	7e93      	ldrb	r3, [r2, #26]
 8008206:	b923      	cbnz	r3, 8008212 <dma_init+0x66>
 8008208:	688b      	ldr	r3, [r1, #8]
 800820a:	f023 0310 	bic.w	r3, r3, #16
 800820e:	608b      	str	r3, [r1, #8]
 8008210:	bd10      	pop	{r4, pc}
 8008212:	688b      	ldr	r3, [r1, #8]
 8008214:	f043 0310 	orr.w	r3, r3, #16
 8008218:	e7f9      	b.n	800820e <dma_init+0x62>
 800821a:	bf00      	nop
 800821c:	40020400 	andmi	r0, r2, r0, lsl #8

08008220 <dma_circulation_disable>:
 8008220:	4b06      	ldr	r3, [pc, #24]	; (800823c <dma_circulation_disable+0x1c>)
 8008222:	4298      	cmp	r0, r3
 8008224:	d102      	bne.n	800822c <dma_circulation_disable+0xc>
 8008226:	2904      	cmp	r1, #4
 8008228:	d900      	bls.n	800822c <dma_circulation_disable+0xc>
 800822a:	e7fe      	b.n	800822a <dma_circulation_disable+0xa>
 800822c:	2314      	movs	r3, #20
 800822e:	4359      	muls	r1, r3
 8008230:	3008      	adds	r0, #8
 8008232:	580b      	ldr	r3, [r1, r0]
 8008234:	f023 0320 	bic.w	r3, r3, #32
 8008238:	500b      	str	r3, [r1, r0]
 800823a:	4770      	bx	lr
 800823c:	40020400 	andmi	r0, r2, r0, lsl #8

08008240 <dma_memory_to_memory_disable>:
 8008240:	4b06      	ldr	r3, [pc, #24]	; (800825c <dma_memory_to_memory_disable+0x1c>)
 8008242:	4298      	cmp	r0, r3
 8008244:	d102      	bne.n	800824c <dma_memory_to_memory_disable+0xc>
 8008246:	2904      	cmp	r1, #4
 8008248:	d900      	bls.n	800824c <dma_memory_to_memory_disable+0xc>
 800824a:	e7fe      	b.n	800824a <dma_memory_to_memory_disable+0xa>
 800824c:	2314      	movs	r3, #20
 800824e:	4359      	muls	r1, r3
 8008250:	3008      	adds	r0, #8
 8008252:	580b      	ldr	r3, [r1, r0]
 8008254:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008258:	500b      	str	r3, [r1, r0]
 800825a:	4770      	bx	lr
 800825c:	40020400 	andmi	r0, r2, r0, lsl #8

08008260 <fmc_bank0_unlock>:
 8008260:	4b04      	ldr	r3, [pc, #16]	; (8008274 <fmc_bank0_unlock+0x14>)
 8008262:	691a      	ldr	r2, [r3, #16]
 8008264:	0612      	lsls	r2, r2, #24
 8008266:	bf41      	itttt	mi
 8008268:	4a03      	ldrmi	r2, [pc, #12]	; (8008278 <fmc_bank0_unlock+0x18>)
 800826a:	605a      	strmi	r2, [r3, #4]
 800826c:	f102 3288 	addmi.w	r2, r2, #2290649224	; 0x88888888
 8008270:	605a      	strmi	r2, [r3, #4]
 8008272:	4770      	bx	lr
 8008274:	40022000 	andmi	r2, r2, r0
 8008278:	45670123 	strbmi	r0, [r7, #-291]!	; 0xfffffedd

0800827c <fmc_bank1_unlock>:
 800827c:	4b04      	ldr	r3, [pc, #16]	; (8008290 <fmc_bank1_unlock+0x14>)
 800827e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008280:	0612      	lsls	r2, r2, #24
 8008282:	bf41      	itttt	mi
 8008284:	4a03      	ldrmi	r2, [pc, #12]	; (8008294 <fmc_bank1_unlock+0x18>)
 8008286:	645a      	strmi	r2, [r3, #68]	; 0x44
 8008288:	f102 3288 	addmi.w	r2, r2, #2290649224	; 0x88888888
 800828c:	645a      	strmi	r2, [r3, #68]	; 0x44
 800828e:	4770      	bx	lr
 8008290:	40022000 	andmi	r2, r2, r0
 8008294:	45670123 	strbmi	r0, [r7, #-291]!	; 0xfffffedd

08008298 <fmc_bank0_lock>:
 8008298:	4a02      	ldr	r2, [pc, #8]	; (80082a4 <fmc_bank0_lock+0xc>)
 800829a:	6913      	ldr	r3, [r2, #16]
 800829c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80082a0:	6113      	str	r3, [r2, #16]
 80082a2:	4770      	bx	lr
 80082a4:	40022000 	andmi	r2, r2, r0

080082a8 <fmc_bank1_lock>:
 80082a8:	4a02      	ldr	r2, [pc, #8]	; (80082b4 <fmc_bank1_lock+0xc>)
 80082aa:	6d13      	ldr	r3, [r2, #80]	; 0x50
 80082ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80082b0:	6513      	str	r3, [r2, #80]	; 0x50
 80082b2:	4770      	bx	lr
 80082b4:	40022000 	andmi	r2, r2, r0

080082b8 <fmc_bank0_state_get>:
 80082b8:	4b07      	ldr	r3, [pc, #28]	; (80082d8 <fmc_bank0_state_get+0x20>)
 80082ba:	68da      	ldr	r2, [r3, #12]
 80082bc:	07d1      	lsls	r1, r2, #31
 80082be:	d407      	bmi.n	80082d0 <fmc_bank0_state_get+0x18>
 80082c0:	68da      	ldr	r2, [r3, #12]
 80082c2:	06d2      	lsls	r2, r2, #27
 80082c4:	d406      	bmi.n	80082d4 <fmc_bank0_state_get+0x1c>
 80082c6:	68d8      	ldr	r0, [r3, #12]
 80082c8:	f3c0 0080 	ubfx	r0, r0, #2, #1
 80082cc:	0040      	lsls	r0, r0, #1
 80082ce:	4770      	bx	lr
 80082d0:	2001      	movs	r0, #1
 80082d2:	4770      	bx	lr
 80082d4:	2003      	movs	r0, #3
 80082d6:	4770      	bx	lr
 80082d8:	40022000 	andmi	r2, r2, r0

080082dc <fmc_bank1_state_get>:
 80082dc:	4b07      	ldr	r3, [pc, #28]	; (80082fc <fmc_bank1_state_get+0x20>)
 80082de:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80082e0:	07d1      	lsls	r1, r2, #31
 80082e2:	d407      	bmi.n	80082f4 <fmc_bank1_state_get+0x18>
 80082e4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80082e6:	06d2      	lsls	r2, r2, #27
 80082e8:	d406      	bmi.n	80082f8 <fmc_bank1_state_get+0x1c>
 80082ea:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 80082ec:	f3c0 0080 	ubfx	r0, r0, #2, #1
 80082f0:	0040      	lsls	r0, r0, #1
 80082f2:	4770      	bx	lr
 80082f4:	2001      	movs	r0, #1
 80082f6:	4770      	bx	lr
 80082f8:	2003      	movs	r0, #3
 80082fa:	4770      	bx	lr
 80082fc:	40022000 	andmi	r2, r2, r0

08008300 <fwdgt_enable>:
 8008300:	4b02      	ldr	r3, [pc, #8]	; (800830c <fwdgt_enable+0xc>)
 8008302:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 8008306:	601a      	str	r2, [r3, #0]
 8008308:	4770      	bx	lr
 800830a:	bf00      	nop
 800830c:	40003000 	andmi	r3, r0, r0

08008310 <fwdgt_counter_reload>:
 8008310:	4b02      	ldr	r3, [pc, #8]	; (800831c <fwdgt_counter_reload+0xc>)
 8008312:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8008316:	601a      	str	r2, [r3, #0]
 8008318:	4770      	bx	lr
 800831a:	bf00      	nop
 800831c:	40003000 	andmi	r3, r0, r0

08008320 <fwdgt_config>:
 8008320:	4a12      	ldr	r2, [pc, #72]	; (800836c <fwdgt_config+0x4c>)
 8008322:	b510      	push	{r4, lr}
 8008324:	f245 5355 	movw	r3, #21845	; 0x5555
 8008328:	4c11      	ldr	r4, [pc, #68]	; (8008370 <fwdgt_config+0x50>)
 800832a:	6013      	str	r3, [r2, #0]
 800832c:	68d3      	ldr	r3, [r2, #12]
 800832e:	3c01      	subs	r4, #1
 8008330:	f003 0301 	and.w	r3, r3, #1
 8008334:	d013      	beq.n	800835e <fwdgt_config+0x3e>
 8008336:	2b00      	cmp	r3, #0
 8008338:	d1f8      	bne.n	800832c <fwdgt_config+0xc>
 800833a:	6051      	str	r1, [r2, #4]
 800833c:	490c      	ldr	r1, [pc, #48]	; (8008370 <fwdgt_config+0x50>)
 800833e:	4a0b      	ldr	r2, [pc, #44]	; (800836c <fwdgt_config+0x4c>)
 8008340:	68d3      	ldr	r3, [r2, #12]
 8008342:	3901      	subs	r1, #1
 8008344:	f003 0302 	and.w	r3, r3, #2
 8008348:	d00d      	beq.n	8008366 <fwdgt_config+0x46>
 800834a:	2b00      	cmp	r3, #0
 800834c:	d1f8      	bne.n	8008340 <fwdgt_config+0x20>
 800834e:	f3c0 000b 	ubfx	r0, r0, #0, #12
 8008352:	f64a 23aa 	movw	r3, #43690	; 0xaaaa
 8008356:	6090      	str	r0, [r2, #8]
 8008358:	6013      	str	r3, [r2, #0]
 800835a:	2001      	movs	r0, #1
 800835c:	e002      	b.n	8008364 <fwdgt_config+0x44>
 800835e:	2b00      	cmp	r3, #0
 8008360:	d0eb      	beq.n	800833a <fwdgt_config+0x1a>
 8008362:	2000      	movs	r0, #0
 8008364:	bd10      	pop	{r4, pc}
 8008366:	2b00      	cmp	r3, #0
 8008368:	d1fb      	bne.n	8008362 <fwdgt_config+0x42>
 800836a:	e7f0      	b.n	800834e <fwdgt_config+0x2e>
 800836c:	40003000 	andmi	r3, r0, r0
 8008370:	000fffff 	strdeq	pc, [pc], -pc	; <UNPREDICTABLE>

08008374 <gpio_init>:
 8008374:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008378:	06cf      	lsls	r7, r1, #27
 800837a:	f001 040f 	and.w	r4, r1, #15
 800837e:	d508      	bpl.n	8008392 <gpio_init+0x1e>
 8008380:	2a04      	cmp	r2, #4
 8008382:	bf01      	itttt	eq
 8008384:	6bc2      	ldreq	r2, [r0, #60]	; 0x3c
 8008386:	431a      	orreq	r2, r3
 8008388:	f044 0403 	orreq.w	r4, r4, #3
 800838c:	63c2      	streq	r2, [r0, #60]	; 0x3c
 800838e:	bf18      	it	ne
 8008390:	4314      	orrne	r4, r2
 8008392:	2500      	movs	r5, #0
 8008394:	f04f 0c0f 	mov.w	ip, #15
 8008398:	2701      	movs	r7, #1
 800839a:	fa23 f205 	lsr.w	r2, r3, r5
 800839e:	07d6      	lsls	r6, r2, #31
 80083a0:	d510      	bpl.n	80083c4 <gpio_init+0x50>
 80083a2:	00aa      	lsls	r2, r5, #2
 80083a4:	6806      	ldr	r6, [r0, #0]
 80083a6:	fa0c fe02 	lsl.w	lr, ip, r2
 80083aa:	ea26 060e 	bic.w	r6, r6, lr
 80083ae:	fa04 f202 	lsl.w	r2, r4, r2
 80083b2:	2928      	cmp	r1, #40	; 0x28
 80083b4:	ea42 0206 	orr.w	r2, r2, r6
 80083b8:	d128      	bne.n	800840c <gpio_init+0x98>
 80083ba:	fa07 f605 	lsl.w	r6, r7, r5
 80083be:	401e      	ands	r6, r3
 80083c0:	6146      	str	r6, [r0, #20]
 80083c2:	6002      	str	r2, [r0, #0]
 80083c4:	3501      	adds	r5, #1
 80083c6:	2d08      	cmp	r5, #8
 80083c8:	d1e7      	bne.n	800839a <gpio_init+0x26>
 80083ca:	2600      	movs	r6, #0
 80083cc:	f04f 0c0f 	mov.w	ip, #15
 80083d0:	2701      	movs	r7, #1
 80083d2:	f106 0208 	add.w	r2, r6, #8
 80083d6:	fa23 f502 	lsr.w	r5, r3, r2
 80083da:	07ed      	lsls	r5, r5, #31
 80083dc:	d511      	bpl.n	8008402 <gpio_init+0x8e>
 80083de:	00b5      	lsls	r5, r6, #2
 80083e0:	f8d0 e004 	ldr.w	lr, [r0, #4]
 80083e4:	fa0c f805 	lsl.w	r8, ip, r5
 80083e8:	ea2e 0e08 	bic.w	lr, lr, r8
 80083ec:	fa04 f505 	lsl.w	r5, r4, r5
 80083f0:	2928      	cmp	r1, #40	; 0x28
 80083f2:	ea45 050e 	orr.w	r5, r5, lr
 80083f6:	d110      	bne.n	800841a <gpio_init+0xa6>
 80083f8:	fa07 f202 	lsl.w	r2, r7, r2
 80083fc:	401a      	ands	r2, r3
 80083fe:	6142      	str	r2, [r0, #20]
 8008400:	6045      	str	r5, [r0, #4]
 8008402:	3601      	adds	r6, #1
 8008404:	2e08      	cmp	r6, #8
 8008406:	d1e4      	bne.n	80083d2 <gpio_init+0x5e>
 8008408:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800840c:	2948      	cmp	r1, #72	; 0x48
 800840e:	bf02      	ittt	eq
 8008410:	fa07 f605 	lsleq.w	r6, r7, r5
 8008414:	401e      	andeq	r6, r3
 8008416:	6106      	streq	r6, [r0, #16]
 8008418:	e7d3      	b.n	80083c2 <gpio_init+0x4e>
 800841a:	2948      	cmp	r1, #72	; 0x48
 800841c:	bf02      	ittt	eq
 800841e:	fa07 f202 	lsleq.w	r2, r7, r2
 8008422:	401a      	andeq	r2, r3
 8008424:	6102      	streq	r2, [r0, #16]
 8008426:	e7eb      	b.n	8008400 <gpio_init+0x8c>

08008428 <gpio_input_bit_get>:
 8008428:	6883      	ldr	r3, [r0, #8]
 800842a:	420b      	tst	r3, r1
 800842c:	bf14      	ite	ne
 800842e:	2001      	movne	r0, #1
 8008430:	2000      	moveq	r0, #0
 8008432:	4770      	bx	lr

08008434 <gpio_pin_remap_config>:
 8008434:	2800      	cmp	r0, #0
 8008436:	4a16      	ldr	r2, [pc, #88]	; (8008490 <gpio_pin_remap_config+0x5c>)
 8008438:	b530      	push	{r4, r5, lr}
 800843a:	f400 1540 	and.w	r5, r0, #3145728	; 0x300000
 800843e:	bfb4      	ite	lt
 8008440:	69d3      	ldrlt	r3, [r2, #28]
 8008442:	6853      	ldrge	r3, [r2, #4]
 8008444:	f5b5 1f40 	cmp.w	r5, #3145728	; 0x300000
 8008448:	b284      	uxth	r4, r0
 800844a:	d110      	bne.n	800846e <gpio_pin_remap_config+0x3a>
 800844c:	6855      	ldr	r5, [r2, #4]
 800844e:	f025 65e0 	bic.w	r5, r5, #117440512	; 0x7000000
 8008452:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8008456:	6055      	str	r5, [r2, #4]
 8008458:	b119      	cbz	r1, 8008462 <gpio_pin_remap_config+0x2e>
 800845a:	0d42      	lsrs	r2, r0, #21
 800845c:	0112      	lsls	r2, r2, #4
 800845e:	4094      	lsls	r4, r2
 8008460:	4323      	orrs	r3, r4
 8008462:	4a0b      	ldr	r2, [pc, #44]	; (8008490 <gpio_pin_remap_config+0x5c>)
 8008464:	2800      	cmp	r0, #0
 8008466:	bfb4      	ite	lt
 8008468:	61d3      	strlt	r3, [r2, #28]
 800846a:	6053      	strge	r3, [r2, #4]
 800846c:	bd30      	pop	{r4, r5, pc}
 800846e:	02c2      	lsls	r2, r0, #11
 8008470:	bf55      	itete	pl
 8008472:	0d42      	lsrpl	r2, r0, #21
 8008474:	2203      	movmi	r2, #3
 8008476:	0112      	lslpl	r2, r2, #4
 8008478:	f3c0 4503 	ubfxmi	r5, r0, #16, #4
 800847c:	bf4c      	ite	mi
 800847e:	40aa      	lslmi	r2, r5
 8008480:	fa04 f202 	lslpl.w	r2, r4, r2
 8008484:	ea23 0302 	bic.w	r3, r3, r2
 8008488:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 800848c:	e7e4      	b.n	8008458 <gpio_pin_remap_config+0x24>
 800848e:	bf00      	nop
 8008490:	40010000 	andmi	r0, r1, r0

08008494 <pmu_backup_write_enable>:
 8008494:	4a02      	ldr	r2, [pc, #8]	; (80084a0 <pmu_backup_write_enable+0xc>)
 8008496:	6813      	ldr	r3, [r2, #0]
 8008498:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800849c:	6013      	str	r3, [r2, #0]
 800849e:	4770      	bx	lr
 80084a0:	40007000 	andmi	r7, r0, r0

080084a4 <rcu_periph_clock_enable>:
 80084a4:	0983      	lsrs	r3, r0, #6
 80084a6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80084aa:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 80084ae:	f000 001f 	and.w	r0, r0, #31
 80084b2:	6819      	ldr	r1, [r3, #0]
 80084b4:	2201      	movs	r2, #1
 80084b6:	4082      	lsls	r2, r0
 80084b8:	430a      	orrs	r2, r1
 80084ba:	601a      	str	r2, [r3, #0]
 80084bc:	4770      	bx	lr

080084be <rcu_periph_clock_disable>:
 80084be:	0983      	lsrs	r3, r0, #6
 80084c0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80084c4:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 80084c8:	f000 001f 	and.w	r0, r0, #31
 80084cc:	681a      	ldr	r2, [r3, #0]
 80084ce:	2101      	movs	r1, #1
 80084d0:	4081      	lsls	r1, r0
 80084d2:	ea22 0201 	bic.w	r2, r2, r1
 80084d6:	601a      	str	r2, [r3, #0]
 80084d8:	4770      	bx	lr

080084da <rcu_periph_reset_enable>:
 80084da:	f7ff bfe3 	b.w	80084a4 <rcu_periph_clock_enable>

080084de <rcu_periph_reset_disable>:
 80084de:	f7ff bfee 	b.w	80084be <rcu_periph_clock_disable>
	...

080084e4 <rcu_adc_clock_config>:
 80084e4:	4913      	ldr	r1, [pc, #76]	; (8008534 <rcu_adc_clock_config+0x50>)
 80084e6:	684b      	ldr	r3, [r1, #4]
 80084e8:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 80084ea:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80084ee:	b510      	push	{r4, lr}
 80084f0:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80084f4:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 80084f8:	280b      	cmp	r0, #11
 80084fa:	d809      	bhi.n	8008510 <rcu_adc_clock_config+0x2c>
 80084fc:	e8df f000 	tbb	[pc, r0]
 8008500:	06060606 	streq	r0, [r6], -r6, lsl #12
 8008504:	0b080b08 	bleq	820b12c <__exidx_end+0x2003dc>
 8008508:	12121212 	andsne	r1, r2, #536870913	; 0x20000001
 800850c:	ea43 3380 	orr.w	r3, r3, r0, lsl #14
 8008510:	604b      	str	r3, [r1, #4]
 8008512:	62ca      	str	r2, [r1, #44]	; 0x2c
 8008514:	bd10      	pop	{r4, pc}
 8008516:	4c08      	ldr	r4, [pc, #32]	; (8008538 <rcu_adc_clock_config+0x54>)
 8008518:	ea04 3080 	and.w	r0, r4, r0, lsl #14
 800851c:	4303      	orrs	r3, r0
 800851e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008522:	e7f5      	b.n	8008510 <rcu_adc_clock_config+0x2c>
 8008524:	4c05      	ldr	r4, [pc, #20]	; (800853c <rcu_adc_clock_config+0x58>)
 8008526:	ea04 3080 	and.w	r0, r4, r0, lsl #14
 800852a:	4303      	orrs	r3, r0
 800852c:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8008530:	e7ee      	b.n	8008510 <rcu_adc_clock_config+0x2c>
 8008532:	bf00      	nop
 8008534:	40021000 	andmi	r1, r2, r0
 8008538:	fffec000 			; <UNDEFINED> instruction: 0xfffec000
 800853c:	fffcc000 			; <UNDEFINED> instruction: 0xfffcc000

08008540 <rcu_rtc_clock_config>:
 8008540:	4a03      	ldr	r2, [pc, #12]	; (8008550 <rcu_rtc_clock_config+0x10>)
 8008542:	6a13      	ldr	r3, [r2, #32]
 8008544:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008548:	4318      	orrs	r0, r3
 800854a:	6210      	str	r0, [r2, #32]
 800854c:	4770      	bx	lr
 800854e:	bf00      	nop
 8008550:	40021000 	andmi	r1, r2, r0

08008554 <rcu_flag_get>:
 8008554:	0983      	lsrs	r3, r0, #6
 8008556:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800855a:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 800855e:	f000 001f 	and.w	r0, r0, #31
 8008562:	681a      	ldr	r2, [r3, #0]
 8008564:	2301      	movs	r3, #1
 8008566:	4083      	lsls	r3, r0
 8008568:	4213      	tst	r3, r2
 800856a:	bf14      	ite	ne
 800856c:	2001      	movne	r0, #1
 800856e:	2000      	moveq	r0, #0
 8008570:	4770      	bx	lr
	...

08008574 <rcu_osci_stab_wait>:
 8008574:	f5b0 6f00 	cmp.w	r0, #2048	; 0x800
 8008578:	b508      	push	{r3, lr}
 800857a:	d028      	beq.n	80085ce <rcu_osci_stab_wait+0x5a>
 800857c:	d806      	bhi.n	800858c <rcu_osci_stab_wait+0x18>
 800857e:	2810      	cmp	r0, #16
 8008580:	d016      	beq.n	80085b0 <rcu_osci_stab_wait+0x3c>
 8008582:	2818      	cmp	r0, #24
 8008584:	d044      	beq.n	8008610 <rcu_osci_stab_wait+0x9c>
 8008586:	b370      	cbz	r0, 80085e6 <rcu_osci_stab_wait+0x72>
 8008588:	2000      	movs	r0, #0
 800858a:	bd08      	pop	{r3, pc}
 800858c:	f5b0 6f10 	cmp.w	r0, #2304	; 0x900
 8008590:	d033      	beq.n	80085fa <rcu_osci_stab_wait+0x86>
 8008592:	f243 0310 	movw	r3, #12304	; 0x3010
 8008596:	4298      	cmp	r0, r3
 8008598:	d1f6      	bne.n	8008588 <rcu_osci_stab_wait+0x14>
 800859a:	4922      	ldr	r1, [pc, #136]	; (8008624 <rcu_osci_stab_wait+0xb0>)
 800859c:	f243 0011 	movw	r0, #12305	; 0x3011
 80085a0:	f7ff ffd8 	bl	8008554 <rcu_flag_get>
 80085a4:	b908      	cbnz	r0, 80085aa <rcu_osci_stab_wait+0x36>
 80085a6:	3901      	subs	r1, #1
 80085a8:	d1f8      	bne.n	800859c <rcu_osci_stab_wait+0x28>
 80085aa:	f243 0011 	movw	r0, #12305	; 0x3011
 80085ae:	e008      	b.n	80085c2 <rcu_osci_stab_wait+0x4e>
 80085b0:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80085b4:	2011      	movs	r0, #17
 80085b6:	f7ff ffcd 	bl	8008554 <rcu_flag_get>
 80085ba:	b908      	cbnz	r0, 80085c0 <rcu_osci_stab_wait+0x4c>
 80085bc:	3901      	subs	r1, #1
 80085be:	d1f9      	bne.n	80085b4 <rcu_osci_stab_wait+0x40>
 80085c0:	2011      	movs	r0, #17
 80085c2:	f7ff ffc7 	bl	8008554 <rcu_flag_get>
 80085c6:	3800      	subs	r0, #0
 80085c8:	bf18      	it	ne
 80085ca:	2001      	movne	r0, #1
 80085cc:	e7dd      	b.n	800858a <rcu_osci_stab_wait+0x16>
 80085ce:	f06f 417c 	mvn.w	r1, #4227858432	; 0xfc000000
 80085d2:	f640 0001 	movw	r0, #2049	; 0x801
 80085d6:	f7ff ffbd 	bl	8008554 <rcu_flag_get>
 80085da:	b908      	cbnz	r0, 80085e0 <rcu_osci_stab_wait+0x6c>
 80085dc:	3901      	subs	r1, #1
 80085de:	d1f8      	bne.n	80085d2 <rcu_osci_stab_wait+0x5e>
 80085e0:	f640 0001 	movw	r0, #2049	; 0x801
 80085e4:	e7ed      	b.n	80085c2 <rcu_osci_stab_wait+0x4e>
 80085e6:	f44f 61a0 	mov.w	r1, #1280	; 0x500
 80085ea:	2001      	movs	r0, #1
 80085ec:	f7ff ffb2 	bl	8008554 <rcu_flag_get>
 80085f0:	b908      	cbnz	r0, 80085f6 <rcu_osci_stab_wait+0x82>
 80085f2:	3901      	subs	r1, #1
 80085f4:	d1f9      	bne.n	80085ea <rcu_osci_stab_wait+0x76>
 80085f6:	2001      	movs	r0, #1
 80085f8:	e7e3      	b.n	80085c2 <rcu_osci_stab_wait+0x4e>
 80085fa:	490a      	ldr	r1, [pc, #40]	; (8008624 <rcu_osci_stab_wait+0xb0>)
 80085fc:	f640 1001 	movw	r0, #2305	; 0x901
 8008600:	f7ff ffa8 	bl	8008554 <rcu_flag_get>
 8008604:	b908      	cbnz	r0, 800860a <rcu_osci_stab_wait+0x96>
 8008606:	3901      	subs	r1, #1
 8008608:	d1f8      	bne.n	80085fc <rcu_osci_stab_wait+0x88>
 800860a:	f640 1001 	movw	r0, #2305	; 0x901
 800860e:	e7d8      	b.n	80085c2 <rcu_osci_stab_wait+0x4e>
 8008610:	4904      	ldr	r1, [pc, #16]	; (8008624 <rcu_osci_stab_wait+0xb0>)
 8008612:	2019      	movs	r0, #25
 8008614:	f7ff ff9e 	bl	8008554 <rcu_flag_get>
 8008618:	b908      	cbnz	r0, 800861e <rcu_osci_stab_wait+0xaa>
 800861a:	3901      	subs	r1, #1
 800861c:	d1f9      	bne.n	8008612 <rcu_osci_stab_wait+0x9e>
 800861e:	2019      	movs	r0, #25
 8008620:	e7cf      	b.n	80085c2 <rcu_osci_stab_wait+0x4e>
 8008622:	bf00      	nop
 8008624:	000fffff 	strdeq	pc, [pc], -pc	; <UNPREDICTABLE>

08008628 <rcu_osci_on>:
 8008628:	f7ff bf3c 	b.w	80084a4 <rcu_periph_clock_enable>

0800862c <rcu_clock_freq_get>:
 800862c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800862e:	4b35      	ldr	r3, [pc, #212]	; (8008704 <rcu_clock_freq_get+0xd8>)
 8008630:	b089      	sub	sp, #36	; 0x24
 8008632:	4604      	mov	r4, r0
 8008634:	ad04      	add	r5, sp, #16
 8008636:	f103 0610 	add.w	r6, r3, #16
 800863a:	461f      	mov	r7, r3
 800863c:	6818      	ldr	r0, [r3, #0]
 800863e:	6859      	ldr	r1, [r3, #4]
 8008640:	462a      	mov	r2, r5
 8008642:	c203      	stmia	r2!, {r0, r1}
 8008644:	3308      	adds	r3, #8
 8008646:	42b3      	cmp	r3, r6
 8008648:	4615      	mov	r5, r2
 800864a:	d1f7      	bne.n	800863c <rcu_clock_freq_get+0x10>
 800864c:	6938      	ldr	r0, [r7, #16]
 800864e:	6871      	ldr	r1, [r6, #4]
 8008650:	4a2d      	ldr	r2, [pc, #180]	; (8008708 <rcu_clock_freq_get+0xdc>)
 8008652:	466b      	mov	r3, sp
 8008654:	c303      	stmia	r3!, {r0, r1}
 8008656:	c303      	stmia	r3!, {r0, r1}
 8008658:	6853      	ldr	r3, [r2, #4]
 800865a:	f3c3 0381 	ubfx	r3, r3, #2, #2
 800865e:	2b02      	cmp	r3, #2
 8008660:	d143      	bne.n	80086ea <rcu_clock_freq_get+0xbe>
 8008662:	6853      	ldr	r3, [r2, #4]
 8008664:	03df      	lsls	r7, r3, #15
 8008666:	d538      	bpl.n	80086da <rcu_clock_freq_get+0xae>
 8008668:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800866a:	4928      	ldr	r1, [pc, #160]	; (800870c <rcu_clock_freq_get+0xe0>)
 800866c:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8008670:	4b27      	ldr	r3, [pc, #156]	; (8008710 <rcu_clock_freq_get+0xe4>)
 8008672:	bf18      	it	ne
 8008674:	4619      	movne	r1, r3
 8008676:	6853      	ldr	r3, [r2, #4]
 8008678:	039e      	lsls	r6, r3, #14
 800867a:	d500      	bpl.n	800867e <rcu_clock_freq_get+0x52>
 800867c:	0849      	lsrs	r1, r1, #1
 800867e:	6853      	ldr	r3, [r2, #4]
 8008680:	6850      	ldr	r0, [r2, #4]
 8008682:	0105      	lsls	r5, r0, #4
 8008684:	6850      	ldr	r0, [r2, #4]
 8008686:	f3c3 4383 	ubfx	r3, r3, #18, #4
 800868a:	bf48      	it	mi
 800868c:	f043 0310 	orrmi.w	r3, r3, #16
 8008690:	0040      	lsls	r0, r0, #1
 8008692:	d524      	bpl.n	80086de <rcu_clock_freq_get+0xb2>
 8008694:	f043 0320 	orr.w	r3, r3, #32
 8008698:	2b3f      	cmp	r3, #63	; 0x3f
 800869a:	d124      	bne.n	80086e6 <rcu_clock_freq_get+0xba>
 800869c:	fb01 f003 	mul.w	r0, r1, r3
 80086a0:	6853      	ldr	r3, [r2, #4]
 80086a2:	6851      	ldr	r1, [r2, #4]
 80086a4:	6852      	ldr	r2, [r2, #4]
 80086a6:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80086aa:	3320      	adds	r3, #32
 80086ac:	446b      	add	r3, sp
 80086ae:	f3c1 2102 	ubfx	r1, r1, #8, #3
 80086b2:	f3c2 22c2 	ubfx	r2, r2, #11, #3
 80086b6:	3120      	adds	r1, #32
 80086b8:	3220      	adds	r2, #32
 80086ba:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 80086be:	4469      	add	r1, sp
 80086c0:	446a      	add	r2, sp
 80086c2:	f811 1c20 	ldrb.w	r1, [r1, #-32]
 80086c6:	f812 2c18 	ldrb.w	r2, [r2, #-24]
 80086ca:	fa20 f303 	lsr.w	r3, r0, r3
 80086ce:	2c03      	cmp	r4, #3
 80086d0:	d816      	bhi.n	8008700 <rcu_clock_freq_get+0xd4>
 80086d2:	e8df f004 	tbb	[pc, r4]
 80086d6:	120f0c0d 	andne	r0, pc, #3328	; 0xd00
 80086da:	490e      	ldr	r1, [pc, #56]	; (8008714 <rcu_clock_freq_get+0xe8>)
 80086dc:	e7cf      	b.n	800867e <rcu_clock_freq_get+0x52>
 80086de:	2b0e      	cmp	r3, #14
 80086e0:	d801      	bhi.n	80086e6 <rcu_clock_freq_get+0xba>
 80086e2:	3302      	adds	r3, #2
 80086e4:	e7da      	b.n	800869c <rcu_clock_freq_get+0x70>
 80086e6:	3301      	adds	r3, #1
 80086e8:	e7d8      	b.n	800869c <rcu_clock_freq_get+0x70>
 80086ea:	4808      	ldr	r0, [pc, #32]	; (800870c <rcu_clock_freq_get+0xe0>)
 80086ec:	e7d8      	b.n	80086a0 <rcu_clock_freq_get+0x74>
 80086ee:	4618      	mov	r0, r3
 80086f0:	b009      	add	sp, #36	; 0x24
 80086f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80086f4:	fa23 f001 	lsr.w	r0, r3, r1
 80086f8:	e7fa      	b.n	80086f0 <rcu_clock_freq_get+0xc4>
 80086fa:	fa23 f002 	lsr.w	r0, r3, r2
 80086fe:	e7f7      	b.n	80086f0 <rcu_clock_freq_get+0xc4>
 8008700:	2000      	movs	r0, #0
 8008702:	e7f5      	b.n	80086f0 <rcu_clock_freq_get+0xc4>
 8008704:	080096a1 	stmdaeq	r0, {r0, r5, r7, r9, sl, ip, pc}
 8008708:	40021000 	andmi	r1, r2, r0
 800870c:	007a1200 	rsbseq	r1, sl, r0, lsl #4
 8008710:	02dc6c00 	sbcseq	r6, ip, #0, 24
 8008714:	003d0900 	eorseq	r0, sp, r0, lsl #18

08008718 <rtc_configuration_mode_enter>:
 8008718:	4a03      	ldr	r2, [pc, #12]	; (8008728 <rtc_configuration_mode_enter+0x10>)
 800871a:	f8d2 3804 	ldr.w	r3, [r2, #2052]	; 0x804
 800871e:	f043 0310 	orr.w	r3, r3, #16
 8008722:	f8c2 3804 	str.w	r3, [r2, #2052]	; 0x804
 8008726:	4770      	bx	lr
 8008728:	40002000 	andmi	r2, r0, r0

0800872c <rtc_configuration_mode_exit>:
 800872c:	4a03      	ldr	r2, [pc, #12]	; (800873c <rtc_configuration_mode_exit+0x10>)
 800872e:	f8d2 3804 	ldr.w	r3, [r2, #2052]	; 0x804
 8008732:	f023 0310 	bic.w	r3, r3, #16
 8008736:	f8c2 3804 	str.w	r3, [r2, #2052]	; 0x804
 800873a:	4770      	bx	lr
 800873c:	40002000 	andmi	r2, r0, r0

08008740 <rtc_lwoff_wait>:
 8008740:	4a02      	ldr	r2, [pc, #8]	; (800874c <rtc_lwoff_wait+0xc>)
 8008742:	f8d2 3804 	ldr.w	r3, [r2, #2052]	; 0x804
 8008746:	069b      	lsls	r3, r3, #26
 8008748:	d5fb      	bpl.n	8008742 <rtc_lwoff_wait+0x2>
 800874a:	4770      	bx	lr
 800874c:	40002000 	andmi	r2, r0, r0

08008750 <rtc_register_sync_wait>:
 8008750:	4b05      	ldr	r3, [pc, #20]	; (8008768 <rtc_register_sync_wait+0x18>)
 8008752:	f8d3 2804 	ldr.w	r2, [r3, #2052]	; 0x804
 8008756:	f022 0208 	bic.w	r2, r2, #8
 800875a:	f8c3 2804 	str.w	r2, [r3, #2052]	; 0x804
 800875e:	f8d3 2804 	ldr.w	r2, [r3, #2052]	; 0x804
 8008762:	0712      	lsls	r2, r2, #28
 8008764:	d5fb      	bpl.n	800875e <rtc_register_sync_wait+0xe>
 8008766:	4770      	bx	lr
 8008768:	40002000 	andmi	r2, r0, r0

0800876c <rtc_counter_get>:
 800876c:	4b03      	ldr	r3, [pc, #12]	; (800877c <rtc_counter_get+0x10>)
 800876e:	f8d3 281c 	ldr.w	r2, [r3, #2076]	; 0x81c
 8008772:	f8d3 0818 	ldr.w	r0, [r3, #2072]	; 0x818
 8008776:	ea42 4000 	orr.w	r0, r2, r0, lsl #16
 800877a:	4770      	bx	lr
 800877c:	40002000 	andmi	r2, r0, r0

08008780 <rtc_counter_set>:
 8008780:	b508      	push	{r3, lr}
 8008782:	f7ff ffc9 	bl	8008718 <rtc_configuration_mode_enter>
 8008786:	4b05      	ldr	r3, [pc, #20]	; (800879c <rtc_counter_set+0x1c>)
 8008788:	0c02      	lsrs	r2, r0, #16
 800878a:	b280      	uxth	r0, r0
 800878c:	f8c3 2818 	str.w	r2, [r3, #2072]	; 0x818
 8008790:	f8c3 081c 	str.w	r0, [r3, #2076]	; 0x81c
 8008794:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8008798:	f7ff bfc8 	b.w	800872c <rtc_configuration_mode_exit>
 800879c:	40002000 	andmi	r2, r0, r0

080087a0 <rtc_prescaler_set>:
 80087a0:	b508      	push	{r3, lr}
 80087a2:	f7ff ffb9 	bl	8008718 <rtc_configuration_mode_enter>
 80087a6:	4b06      	ldr	r3, [pc, #24]	; (80087c0 <rtc_prescaler_set+0x20>)
 80087a8:	f3c0 4203 	ubfx	r2, r0, #16, #4
 80087ac:	b280      	uxth	r0, r0
 80087ae:	f8c3 2808 	str.w	r2, [r3, #2056]	; 0x808
 80087b2:	f8c3 080c 	str.w	r0, [r3, #2060]	; 0x80c
 80087b6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80087ba:	f7ff bfb7 	b.w	800872c <rtc_configuration_mode_exit>
 80087be:	bf00      	nop
 80087c0:	40002000 	andmi	r2, r0, r0

080087c4 <timer_deinit>:
 80087c4:	b508      	push	{r3, lr}
 80087c6:	4b2d      	ldr	r3, [pc, #180]	; (800887c <timer_deinit+0xb8>)
 80087c8:	4298      	cmp	r0, r3
 80087ca:	d048      	beq.n	800885e <timer_deinit+0x9a>
 80087cc:	d816      	bhi.n	80087fc <timer_deinit+0x38>
 80087ce:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 80087d2:	4298      	cmp	r0, r3
 80087d4:	d03c      	beq.n	8008850 <timer_deinit+0x8c>
 80087d6:	d807      	bhi.n	80087e8 <timer_deinit+0x24>
 80087d8:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80087dc:	d02a      	beq.n	8008834 <timer_deinit+0x70>
 80087de:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 80087e2:	4298      	cmp	r0, r3
 80087e4:	d02d      	beq.n	8008842 <timer_deinit+0x7e>
 80087e6:	bd08      	pop	{r3, pc}
 80087e8:	4b25      	ldr	r3, [pc, #148]	; (8008880 <timer_deinit+0xbc>)
 80087ea:	4298      	cmp	r0, r3
 80087ec:	d1fb      	bne.n	80087e6 <timer_deinit+0x22>
 80087ee:	f240 4003 	movw	r0, #1027	; 0x403
 80087f2:	f7ff fe72 	bl	80084da <rcu_periph_reset_enable>
 80087f6:	f240 4003 	movw	r0, #1027	; 0x403
 80087fa:	e017      	b.n	800882c <timer_deinit+0x68>
 80087fc:	4b21      	ldr	r3, [pc, #132]	; (8008884 <timer_deinit+0xc0>)
 80087fe:	4298      	cmp	r0, r3
 8008800:	d00e      	beq.n	8008820 <timer_deinit+0x5c>
 8008802:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008806:	4298      	cmp	r0, r3
 8008808:	d030      	beq.n	800886c <timer_deinit+0xa8>
 800880a:	f5a3 3390 	sub.w	r3, r3, #73728	; 0x12000
 800880e:	4298      	cmp	r0, r3
 8008810:	d1e9      	bne.n	80087e6 <timer_deinit+0x22>
 8008812:	f240 4005 	movw	r0, #1029	; 0x405
 8008816:	f7ff fe60 	bl	80084da <rcu_periph_reset_enable>
 800881a:	f240 4005 	movw	r0, #1029	; 0x405
 800881e:	e005      	b.n	800882c <timer_deinit+0x68>
 8008820:	f240 300b 	movw	r0, #779	; 0x30b
 8008824:	f7ff fe59 	bl	80084da <rcu_periph_reset_enable>
 8008828:	f240 300b 	movw	r0, #779	; 0x30b
 800882c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8008830:	f7ff be55 	b.w	80084de <rcu_periph_reset_disable>
 8008834:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8008838:	f7ff fe4f 	bl	80084da <rcu_periph_reset_enable>
 800883c:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8008840:	e7f4      	b.n	800882c <timer_deinit+0x68>
 8008842:	f240 4001 	movw	r0, #1025	; 0x401
 8008846:	f7ff fe48 	bl	80084da <rcu_periph_reset_enable>
 800884a:	f240 4001 	movw	r0, #1025	; 0x401
 800884e:	e7ed      	b.n	800882c <timer_deinit+0x68>
 8008850:	f240 4002 	movw	r0, #1026	; 0x402
 8008854:	f7ff fe41 	bl	80084da <rcu_periph_reset_enable>
 8008858:	f240 4002 	movw	r0, #1026	; 0x402
 800885c:	e7e6      	b.n	800882c <timer_deinit+0x68>
 800885e:	f240 4004 	movw	r0, #1028	; 0x404
 8008862:	f7ff fe3a 	bl	80084da <rcu_periph_reset_enable>
 8008866:	f240 4004 	movw	r0, #1028	; 0x404
 800886a:	e7df      	b.n	800882c <timer_deinit+0x68>
 800886c:	f240 300d 	movw	r0, #781	; 0x30d
 8008870:	f7ff fe33 	bl	80084da <rcu_periph_reset_enable>
 8008874:	f240 300d 	movw	r0, #781	; 0x30d
 8008878:	e7d8      	b.n	800882c <timer_deinit+0x68>
 800887a:	bf00      	nop
 800887c:	40001000 	andmi	r1, r0, r0
 8008880:	40000c00 	andmi	r0, r0, r0, lsl #24
 8008884:	40012c00 	andmi	r2, r1, r0, lsl #24

08008888 <timer_init>:
 8008888:	880b      	ldrh	r3, [r1, #0]
 800888a:	6283      	str	r3, [r0, #40]	; 0x28
 800888c:	4b1a      	ldr	r3, [pc, #104]	; (80088f8 <timer_init+0x70>)
 800888e:	4298      	cmp	r0, r3
 8008890:	d007      	beq.n	80088a2 <timer_init+0x1a>
 8008892:	f420 6340 	bic.w	r3, r0, #3072	; 0xc00
 8008896:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800889a:	d002      	beq.n	80088a2 <timer_init+0x1a>
 800889c:	4b17      	ldr	r3, [pc, #92]	; (80088fc <timer_init+0x74>)
 800889e:	4298      	cmp	r0, r3
 80088a0:	d10b      	bne.n	80088ba <timer_init+0x32>
 80088a2:	6803      	ldr	r3, [r0, #0]
 80088a4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80088a8:	6003      	str	r3, [r0, #0]
 80088aa:	6802      	ldr	r2, [r0, #0]
 80088ac:	884b      	ldrh	r3, [r1, #2]
 80088ae:	4313      	orrs	r3, r2
 80088b0:	6003      	str	r3, [r0, #0]
 80088b2:	6802      	ldr	r2, [r0, #0]
 80088b4:	888b      	ldrh	r3, [r1, #4]
 80088b6:	4313      	orrs	r3, r2
 80088b8:	6003      	str	r3, [r0, #0]
 80088ba:	688b      	ldr	r3, [r1, #8]
 80088bc:	62c3      	str	r3, [r0, #44]	; 0x2c
 80088be:	4b10      	ldr	r3, [pc, #64]	; (8008900 <timer_init+0x78>)
 80088c0:	4298      	cmp	r0, r3
 80088c2:	d003      	beq.n	80088cc <timer_init+0x44>
 80088c4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80088c8:	4298      	cmp	r0, r3
 80088ca:	d104      	bne.n	80088d6 <timer_init+0x4e>
 80088cc:	6943      	ldr	r3, [r0, #20]
 80088ce:	f043 0301 	orr.w	r3, r3, #1
 80088d2:	6143      	str	r3, [r0, #20]
 80088d4:	4770      	bx	lr
 80088d6:	6803      	ldr	r3, [r0, #0]
 80088d8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80088dc:	6003      	str	r3, [r0, #0]
 80088de:	6802      	ldr	r2, [r0, #0]
 80088e0:	88cb      	ldrh	r3, [r1, #6]
 80088e2:	4313      	orrs	r3, r2
 80088e4:	6003      	str	r3, [r0, #0]
 80088e6:	4b04      	ldr	r3, [pc, #16]	; (80088f8 <timer_init+0x70>)
 80088e8:	4298      	cmp	r0, r3
 80088ea:	d002      	beq.n	80088f2 <timer_init+0x6a>
 80088ec:	4b03      	ldr	r3, [pc, #12]	; (80088fc <timer_init+0x74>)
 80088ee:	4298      	cmp	r0, r3
 80088f0:	d1ec      	bne.n	80088cc <timer_init+0x44>
 80088f2:	7b0b      	ldrb	r3, [r1, #12]
 80088f4:	6303      	str	r3, [r0, #48]	; 0x30
 80088f6:	e7e9      	b.n	80088cc <timer_init+0x44>
 80088f8:	40012c00 	andmi	r2, r1, r0, lsl #24
 80088fc:	40013400 	andmi	r3, r1, r0, lsl #8
 8008900:	40001000 	andmi	r1, r0, r0

08008904 <timer_enable>:
 8008904:	6803      	ldr	r3, [r0, #0]
 8008906:	f043 0301 	orr.w	r3, r3, #1
 800890a:	6003      	str	r3, [r0, #0]
 800890c:	4770      	bx	lr

0800890e <timer_interrupt_enable>:
 800890e:	68c3      	ldr	r3, [r0, #12]
 8008910:	4319      	orrs	r1, r3
 8008912:	60c1      	str	r1, [r0, #12]
 8008914:	4770      	bx	lr

08008916 <timer_interrupt_flag_clear>:
 8008916:	43c9      	mvns	r1, r1
 8008918:	6101      	str	r1, [r0, #16]
 800891a:	4770      	bx	lr

0800891c <timer_flag_clear>:
 800891c:	43c9      	mvns	r1, r1
 800891e:	6101      	str	r1, [r0, #16]
 8008920:	4770      	bx	lr

08008922 <timer_channel_output_mode_config>:
 8008922:	2903      	cmp	r1, #3
 8008924:	d81a      	bhi.n	800895c <timer_channel_output_mode_config+0x3a>
 8008926:	e8df f001 	tbb	[pc, r1]
 800892a:	1a120a02 	bne	848b13a <__exidx_end+0x4803ea>
 800892e:	6983      	ldr	r3, [r0, #24]
 8008930:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008934:	6183      	str	r3, [r0, #24]
 8008936:	6983      	ldr	r3, [r0, #24]
 8008938:	4313      	orrs	r3, r2
 800893a:	6183      	str	r3, [r0, #24]
 800893c:	4770      	bx	lr
 800893e:	6983      	ldr	r3, [r0, #24]
 8008940:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008944:	6183      	str	r3, [r0, #24]
 8008946:	6983      	ldr	r3, [r0, #24]
 8008948:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800894c:	e7f5      	b.n	800893a <timer_channel_output_mode_config+0x18>
 800894e:	69c3      	ldr	r3, [r0, #28]
 8008950:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008954:	61c3      	str	r3, [r0, #28]
 8008956:	69c3      	ldr	r3, [r0, #28]
 8008958:	4313      	orrs	r3, r2
 800895a:	61c3      	str	r3, [r0, #28]
 800895c:	4770      	bx	lr
 800895e:	69c3      	ldr	r3, [r0, #28]
 8008960:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008964:	61c3      	str	r3, [r0, #28]
 8008966:	69c3      	ldr	r3, [r0, #28]
 8008968:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800896c:	e7f5      	b.n	800895a <timer_channel_output_mode_config+0x38>

0800896e <timer_channel_output_pulse_value_config>:
 800896e:	2903      	cmp	r1, #3
 8008970:	d80a      	bhi.n	8008988 <timer_channel_output_pulse_value_config+0x1a>
 8008972:	e8df f001 	tbb	[pc, r1]
 8008976:	08060402 	stmdaeq	r6, {r1, sl}
 800897a:	6342      	str	r2, [r0, #52]	; 0x34
 800897c:	4770      	bx	lr
 800897e:	6382      	str	r2, [r0, #56]	; 0x38
 8008980:	4770      	bx	lr
 8008982:	63c2      	str	r2, [r0, #60]	; 0x3c
 8008984:	4770      	bx	lr
 8008986:	6402      	str	r2, [r0, #64]	; 0x40
 8008988:	4770      	bx	lr
	...

0800898c <usart_deinit>:
 800898c:	b508      	push	{r3, lr}
 800898e:	4b1d      	ldr	r3, [pc, #116]	; (8008a04 <usart_deinit+0x78>)
 8008990:	4298      	cmp	r0, r3
 8008992:	d028      	beq.n	80089e6 <usart_deinit+0x5a>
 8008994:	d808      	bhi.n	80089a8 <usart_deinit+0x1c>
 8008996:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 800899a:	4298      	cmp	r0, r3
 800899c:	d015      	beq.n	80089ca <usart_deinit+0x3e>
 800899e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80089a2:	4298      	cmp	r0, r3
 80089a4:	d018      	beq.n	80089d8 <usart_deinit+0x4c>
 80089a6:	bd08      	pop	{r3, pc}
 80089a8:	4b17      	ldr	r3, [pc, #92]	; (8008a08 <usart_deinit+0x7c>)
 80089aa:	4298      	cmp	r0, r3
 80089ac:	d022      	beq.n	80089f4 <usart_deinit+0x68>
 80089ae:	f503 4368 	add.w	r3, r3, #59392	; 0xe800
 80089b2:	4298      	cmp	r0, r3
 80089b4:	d1f7      	bne.n	80089a6 <usart_deinit+0x1a>
 80089b6:	f240 300e 	movw	r0, #782	; 0x30e
 80089ba:	f7ff fd8e 	bl	80084da <rcu_periph_reset_enable>
 80089be:	f240 300e 	movw	r0, #782	; 0x30e
 80089c2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80089c6:	f7ff bd8a 	b.w	80084de <rcu_periph_reset_disable>
 80089ca:	f240 4011 	movw	r0, #1041	; 0x411
 80089ce:	f7ff fd84 	bl	80084da <rcu_periph_reset_enable>
 80089d2:	f240 4011 	movw	r0, #1041	; 0x411
 80089d6:	e7f4      	b.n	80089c2 <usart_deinit+0x36>
 80089d8:	f240 4012 	movw	r0, #1042	; 0x412
 80089dc:	f7ff fd7d 	bl	80084da <rcu_periph_reset_enable>
 80089e0:	f240 4012 	movw	r0, #1042	; 0x412
 80089e4:	e7ed      	b.n	80089c2 <usart_deinit+0x36>
 80089e6:	f240 4013 	movw	r0, #1043	; 0x413
 80089ea:	f7ff fd76 	bl	80084da <rcu_periph_reset_enable>
 80089ee:	f240 4013 	movw	r0, #1043	; 0x413
 80089f2:	e7e6      	b.n	80089c2 <usart_deinit+0x36>
 80089f4:	f240 4014 	movw	r0, #1044	; 0x414
 80089f8:	f7ff fd6f 	bl	80084da <rcu_periph_reset_enable>
 80089fc:	f240 4014 	movw	r0, #1044	; 0x414
 8008a00:	e7df      	b.n	80089c2 <usart_deinit+0x36>
 8008a02:	bf00      	nop
 8008a04:	40004c00 	andmi	r4, r0, r0, lsl #24
 8008a08:	40005000 	andmi	r5, r0, r0

08008a0c <usart_baudrate_set>:
 8008a0c:	b538      	push	{r3, r4, r5, lr}
 8008a0e:	4b11      	ldr	r3, [pc, #68]	; (8008a54 <usart_baudrate_set+0x48>)
 8008a10:	4298      	cmp	r0, r3
 8008a12:	4604      	mov	r4, r0
 8008a14:	460d      	mov	r5, r1
 8008a16:	d01b      	beq.n	8008a50 <usart_baudrate_set+0x44>
 8008a18:	d809      	bhi.n	8008a2e <usart_baudrate_set+0x22>
 8008a1a:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 8008a1e:	4298      	cmp	r0, r3
 8008a20:	d016      	beq.n	8008a50 <usart_baudrate_set+0x44>
 8008a22:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008a26:	4298      	cmp	r0, r3
 8008a28:	d012      	beq.n	8008a50 <usart_baudrate_set+0x44>
 8008a2a:	2000      	movs	r0, #0
 8008a2c:	e009      	b.n	8008a42 <usart_baudrate_set+0x36>
 8008a2e:	4b0a      	ldr	r3, [pc, #40]	; (8008a58 <usart_baudrate_set+0x4c>)
 8008a30:	4298      	cmp	r0, r3
 8008a32:	d00d      	beq.n	8008a50 <usart_baudrate_set+0x44>
 8008a34:	f503 4368 	add.w	r3, r3, #59392	; 0xe800
 8008a38:	4298      	cmp	r0, r3
 8008a3a:	d1f6      	bne.n	8008a2a <usart_baudrate_set+0x1e>
 8008a3c:	2003      	movs	r0, #3
 8008a3e:	f7ff fdf5 	bl	800862c <rcu_clock_freq_get>
 8008a42:	eb00 0355 	add.w	r3, r0, r5, lsr #1
 8008a46:	fbb3 f1f5 	udiv	r1, r3, r5
 8008a4a:	b289      	uxth	r1, r1
 8008a4c:	60a1      	str	r1, [r4, #8]
 8008a4e:	bd38      	pop	{r3, r4, r5, pc}
 8008a50:	2002      	movs	r0, #2
 8008a52:	e7f4      	b.n	8008a3e <usart_baudrate_set+0x32>
 8008a54:	40004c00 	andmi	r4, r0, r0, lsl #24
 8008a58:	40005000 	andmi	r5, r0, r0

08008a5c <usart_parity_config>:
 8008a5c:	68c3      	ldr	r3, [r0, #12]
 8008a5e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8008a62:	60c3      	str	r3, [r0, #12]
 8008a64:	68c3      	ldr	r3, [r0, #12]
 8008a66:	4319      	orrs	r1, r3
 8008a68:	60c1      	str	r1, [r0, #12]
 8008a6a:	4770      	bx	lr

08008a6c <usart_word_length_set>:
 8008a6c:	68c3      	ldr	r3, [r0, #12]
 8008a6e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008a72:	60c3      	str	r3, [r0, #12]
 8008a74:	68c3      	ldr	r3, [r0, #12]
 8008a76:	4319      	orrs	r1, r3
 8008a78:	60c1      	str	r1, [r0, #12]
 8008a7a:	4770      	bx	lr

08008a7c <usart_stop_bit_set>:
 8008a7c:	6903      	ldr	r3, [r0, #16]
 8008a7e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8008a82:	6103      	str	r3, [r0, #16]
 8008a84:	6903      	ldr	r3, [r0, #16]
 8008a86:	4319      	orrs	r1, r3
 8008a88:	6101      	str	r1, [r0, #16]
 8008a8a:	4770      	bx	lr

08008a8c <usart_transmit_config>:
 8008a8c:	68c3      	ldr	r3, [r0, #12]
 8008a8e:	f023 0308 	bic.w	r3, r3, #8
 8008a92:	4319      	orrs	r1, r3
 8008a94:	60c1      	str	r1, [r0, #12]
 8008a96:	4770      	bx	lr

08008a98 <usart_receive_config>:
 8008a98:	68c3      	ldr	r3, [r0, #12]
 8008a9a:	f023 0304 	bic.w	r3, r3, #4
 8008a9e:	4319      	orrs	r1, r3
 8008aa0:	60c1      	str	r1, [r0, #12]
 8008aa2:	4770      	bx	lr

08008aa4 <usart_hardware_flow_rts_config>:
 8008aa4:	6943      	ldr	r3, [r0, #20]
 8008aa6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008aaa:	4319      	orrs	r1, r3
 8008aac:	6141      	str	r1, [r0, #20]
 8008aae:	4770      	bx	lr

08008ab0 <usart_hardware_flow_cts_config>:
 8008ab0:	6943      	ldr	r3, [r0, #20]
 8008ab2:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008ab6:	4319      	orrs	r1, r3
 8008ab8:	6141      	str	r1, [r0, #20]
 8008aba:	4770      	bx	lr

08008abc <usart_dma_transmit_config>:
 8008abc:	6943      	ldr	r3, [r0, #20]
 8008abe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008ac2:	4319      	orrs	r1, r3
 8008ac4:	6141      	str	r1, [r0, #20]
 8008ac6:	4770      	bx	lr

08008ac8 <usart_flag_get>:
 8008ac8:	098b      	lsrs	r3, r1, #6
 8008aca:	f001 011f 	and.w	r1, r1, #31
 8008ace:	581a      	ldr	r2, [r3, r0]
 8008ad0:	2301      	movs	r3, #1
 8008ad2:	408b      	lsls	r3, r1
 8008ad4:	4213      	tst	r3, r2
 8008ad6:	bf14      	ite	ne
 8008ad8:	2001      	movne	r0, #1
 8008ada:	2000      	moveq	r0, #0
 8008adc:	4770      	bx	lr

08008ade <usart_flag_clear>:
 8008ade:	b510      	push	{r4, lr}
 8008ae0:	098c      	lsrs	r4, r1, #6
 8008ae2:	2201      	movs	r2, #1
 8008ae4:	5823      	ldr	r3, [r4, r0]
 8008ae6:	f001 011f 	and.w	r1, r1, #31
 8008aea:	408a      	lsls	r2, r1
 8008aec:	ea23 0302 	bic.w	r3, r3, r2
 8008af0:	5023      	str	r3, [r4, r0]
 8008af2:	bd10      	pop	{r4, pc}

08008af4 <usart_interrupt_enable>:
 8008af4:	098a      	lsrs	r2, r1, #6
 8008af6:	b510      	push	{r4, lr}
 8008af8:	f001 011f 	and.w	r1, r1, #31
 8008afc:	5814      	ldr	r4, [r2, r0]
 8008afe:	2301      	movs	r3, #1
 8008b00:	408b      	lsls	r3, r1
 8008b02:	4323      	orrs	r3, r4
 8008b04:	5013      	str	r3, [r2, r0]
 8008b06:	bd10      	pop	{r4, pc}

08008b08 <usart_interrupt_disable>:
 8008b08:	f7ff bfe9 	b.w	8008ade <usart_flag_clear>

08008b0c <usart_interrupt_flag_clear>:
 8008b0c:	b510      	push	{r4, lr}
 8008b0e:	0d8c      	lsrs	r4, r1, #22
 8008b10:	2201      	movs	r2, #1
 8008b12:	5823      	ldr	r3, [r4, r0]
 8008b14:	f3c1 4104 	ubfx	r1, r1, #16, #5
 8008b18:	408a      	lsls	r2, r1
 8008b1a:	ea23 0302 	bic.w	r3, r3, r2
 8008b1e:	5023      	str	r3, [r4, r0]
 8008b20:	bd10      	pop	{r4, pc}
	...

08008b24 <gd32_adc_init()>:
 8008b24:	b510      	push	{r4, lr}
 8008b26:	f240 6009 	movw	r0, #1545	; 0x609
 8008b2a:	4c21      	ldr	r4, [pc, #132]	; (8008bb0 <gd32_adc_init()+0x8c>)
 8008b2c:	f7ff fcba 	bl	80084a4 <rcu_periph_clock_enable>
 8008b30:	2005      	movs	r0, #5
 8008b32:	f7ff fcd7 	bl	80084e4 <rcu_adc_clock_config>
 8008b36:	4620      	mov	r0, r4
 8008b38:	2201      	movs	r2, #1
 8008b3a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8008b3e:	f000 fbbd 	bl	80092bc <adc_special_function_config>
 8008b42:	f44f 42e0 	mov.w	r2, #28672	; 0x7000
 8008b46:	4620      	mov	r0, r4
 8008b48:	2102      	movs	r1, #2
 8008b4a:	f000 fc4e 	bl	80093ea <adc_external_trigger_source_config>
 8008b4e:	2100      	movs	r1, #0
 8008b50:	4620      	mov	r0, r4
 8008b52:	f000 fbdb 	bl	800930c <adc_data_alignment_config>
 8008b56:	2000      	movs	r0, #0
 8008b58:	f000 fba0 	bl	800929c <adc_mode_config>
 8008b5c:	2202      	movs	r2, #2
 8008b5e:	4611      	mov	r1, r2
 8008b60:	4620      	mov	r0, r4
 8008b62:	f000 fbdc 	bl	800931e <adc_channel_length_config>
 8008b66:	4620      	mov	r0, r4
 8008b68:	2307      	movs	r3, #7
 8008b6a:	2210      	movs	r2, #16
 8008b6c:	2100      	movs	r1, #0
 8008b6e:	f000 fbf3 	bl	8009358 <adc_inserted_channel_config>
 8008b72:	2307      	movs	r3, #7
 8008b74:	4620      	mov	r0, r4
 8008b76:	2211      	movs	r2, #17
 8008b78:	2101      	movs	r1, #1
 8008b7a:	f000 fbed 	bl	8009358 <adc_inserted_channel_config>
 8008b7e:	2201      	movs	r2, #1
 8008b80:	2102      	movs	r1, #2
 8008b82:	4620      	mov	r0, r4
 8008b84:	f000 fc16 	bl	80093b4 <adc_external_trigger_config>
 8008b88:	f000 fb7e 	bl	8009288 <adc_tempsensor_vrefint_enable>
 8008b8c:	4620      	mov	r0, r4
 8008b8e:	f000 fb61 	bl	8009254 <adc_enable>
 8008b92:	2100      	movs	r1, #0
 8008b94:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8008b98:	f000 fb44 	bl	8009224 <udelay(unsigned int, unsigned int)>
 8008b9c:	4620      	mov	r0, r4
 8008b9e:	f000 fb61 	bl	8009264 <adc_calibration_enable>
 8008ba2:	4620      	mov	r0, r4
 8008ba4:	2102      	movs	r1, #2
 8008ba6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008baa:	f000 bc2f 	b.w	800940c <adc_software_trigger_enable>
 8008bae:	bf00      	nop
 8008bb0:	40012400 	andmi	r2, r1, r0, lsl #8

08008bb4 <gd32_adc_gettemp()>:
 8008bb4:	b508      	push	{r3, lr}
 8008bb6:	4b14      	ldr	r3, [pc, #80]	; (8008c08 <gd32_adc_gettemp()+0x54>)
 8008bb8:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8008c0c <gd32_adc_gettemp()+0x58>
 8008bbc:	eddf 6a14 	vldr	s13, [pc, #80]	; 8008c10 <gd32_adc_gettemp()+0x5c>
 8008bc0:	4814      	ldr	r0, [pc, #80]	; (8008c14 <gd32_adc_gettemp()+0x60>)
 8008bc2:	f203 433c 	addw	r3, r3, #1084	; 0x43c
 8008bc6:	edd3 7a00 	vldr	s15, [r3]
 8008bca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008bce:	ed2d 8b02 	vpush	{d8}
 8008bd2:	ee27 7a67 	vnmul.f32	s14, s14, s15
 8008bd6:	eddf 7a10 	vldr	s15, [pc, #64]	; 8008c18 <gd32_adc_gettemp()+0x64>
 8008bda:	eee7 7a26 	vfma.f32	s15, s14, s13
 8008bde:	2102      	movs	r1, #2
 8008be0:	eeb0 8a67 	vmov.f32	s16, s15
 8008be4:	f000 fc12 	bl	800940c <adc_software_trigger_enable>
 8008be8:	eddf 7a0c 	vldr	s15, [pc, #48]	; 8008c1c <gd32_adc_gettemp()+0x68>
 8008bec:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8008c20 <gd32_adc_gettemp()+0x6c>
 8008bf0:	ee68 7a27 	vmul.f32	s15, s16, s15
 8008bf4:	ecbd 8b02 	vpop	{d8}
 8008bf8:	ee87 0a87 	vdiv.f32	s0, s15, s14
 8008bfc:	eef3 7a09 	vmov.f32	s15, #57	; 0x41c80000  25.0
 8008c00:	ee30 0a27 	vadd.f32	s0, s0, s15
 8008c04:	bd08      	pop	{r3, pc}
 8008c06:	bf00      	nop
 8008c08:	40012000 	andmi	r2, r1, r0
 8008c0c:	40533333 	subsmi	r3, r3, r3, lsr r3
 8008c10:	39800000 	stmibcc	r0, {}	; <UNPREDICTABLE>
 8008c14:	40012400 	andmi	r2, r1, r0, lsl #8
 8008c18:	3fb70a3d 	svccc	0x00b70a3d
 8008c1c:	447a0000 	ldrbtmi	r0, [sl], #-0
 8008c20:	4089999a 	umullmi	r9, r9, sl, r9	; <UNPREDICTABLE>

08008c24 <_stop() [clone .isra.0]>:
 8008c24:	b508      	push	{r3, lr}
 8008c26:	4806      	ldr	r0, [pc, #24]	; (8008c40 <_stop() [clone .isra.0]+0x1c>)
 8008c28:	f000 fca6 	bl	8009578 <i2c_stop_on_bus>
 8008c2c:	4905      	ldr	r1, [pc, #20]	; (8008c44 <_stop() [clone .isra.0]+0x20>)
 8008c2e:	f640 73ff 	movw	r3, #4095	; 0xfff
 8008c32:	f8d1 2400 	ldr.w	r2, [r1, #1024]	; 0x400
 8008c36:	0592      	lsls	r2, r2, #22
 8008c38:	d501      	bpl.n	8008c3e <_stop() [clone .isra.0]+0x1a>
 8008c3a:	3b01      	subs	r3, #1
 8008c3c:	d1f9      	bne.n	8008c32 <_stop() [clone .isra.0]+0xe>
 8008c3e:	bd08      	pop	{r3, pc}
 8008c40:	40005400 	andmi	r5, r0, r0, lsl #8
 8008c44:	40005000 	andmi	r5, r0, r0

08008c48 <gd32_i2c_begin>:
 8008c48:	b508      	push	{r3, lr}
 8008c4a:	f240 7015 	movw	r0, #1813	; 0x715
 8008c4e:	f7ff fc29 	bl	80084a4 <rcu_periph_clock_enable>
 8008c52:	f240 6003 	movw	r0, #1539	; 0x603
 8008c56:	f7ff fc25 	bl	80084a4 <rcu_periph_clock_enable>
 8008c5a:	f240 6003 	movw	r0, #1539	; 0x603
 8008c5e:	f7ff fc21 	bl	80084a4 <rcu_periph_clock_enable>
 8008c62:	4810      	ldr	r0, [pc, #64]	; (8008ca4 <gd32_i2c_begin+0x5c>)
 8008c64:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008c68:	2203      	movs	r2, #3
 8008c6a:	211c      	movs	r1, #28
 8008c6c:	f7ff fb82 	bl	8008374 <gpio_init>
 8008c70:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008c74:	2203      	movs	r2, #3
 8008c76:	480b      	ldr	r0, [pc, #44]	; (8008ca4 <gd32_i2c_begin+0x5c>)
 8008c78:	211c      	movs	r1, #28
 8008c7a:	f7ff fb7b 	bl	8008374 <gpio_init>
 8008c7e:	2101      	movs	r1, #1
 8008c80:	2002      	movs	r0, #2
 8008c82:	f7ff fbd7 	bl	8008434 <gpio_pin_remap_config>
 8008c86:	4908      	ldr	r1, [pc, #32]	; (8008ca8 <gd32_i2c_begin+0x60>)
 8008c88:	4808      	ldr	r0, [pc, #32]	; (8008cac <gd32_i2c_begin+0x64>)
 8008c8a:	2200      	movs	r2, #0
 8008c8c:	f000 fbcc 	bl	8009428 <i2c_clock_config>
 8008c90:	4806      	ldr	r0, [pc, #24]	; (8008cac <gd32_i2c_begin+0x64>)
 8008c92:	f000 fc67 	bl	8009564 <i2c_enable>
 8008c96:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8008c9a:	4804      	ldr	r0, [pc, #16]	; (8008cac <gd32_i2c_begin+0x64>)
 8008c9c:	2101      	movs	r1, #1
 8008c9e:	f000 bc47 	b.w	8009530 <i2c_ack_config>
 8008ca2:	bf00      	nop
 8008ca4:	40010c00 	andmi	r0, r1, r0, lsl #24
 8008ca8:	00061a80 	andeq	r1, r6, r0, lsl #21
 8008cac:	40005400 	andmi	r5, r0, r0, lsl #8

08008cb0 <gd32_i2c_set_baudrate>:
 8008cb0:	4601      	mov	r1, r0
 8008cb2:	2200      	movs	r2, #0
 8008cb4:	4801      	ldr	r0, [pc, #4]	; (8008cbc <gd32_i2c_set_baudrate+0xc>)
 8008cb6:	f000 bbb7 	b.w	8009428 <i2c_clock_config>
 8008cba:	bf00      	nop
 8008cbc:	40005400 	andmi	r5, r0, r0, lsl #8

08008cc0 <gd32_i2c_set_address>:
 8008cc0:	4b01      	ldr	r3, [pc, #4]	; (8008cc8 <gd32_i2c_set_address+0x8>)
 8008cc2:	0040      	lsls	r0, r0, #1
 8008cc4:	7018      	strb	r0, [r3, #0]
 8008cc6:	4770      	bx	lr
 8008cc8:	20001818 	andcs	r1, r0, r8, lsl r8

08008ccc <gd32_i2c_write>:
 8008ccc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008cce:	4e30      	ldr	r6, [pc, #192]	; (8008d90 <gd32_i2c_write+0xc4>)
 8008cd0:	4604      	mov	r4, r0
 8008cd2:	460f      	mov	r7, r1
 8008cd4:	f640 75ff 	movw	r5, #4095	; 0xfff
 8008cd8:	f240 6101 	movw	r1, #1537	; 0x601
 8008cdc:	4630      	mov	r0, r6
 8008cde:	f000 fc55 	bl	800958c <i2c_flag_get>
 8008ce2:	b9b0      	cbnz	r0, 8008d12 <gd32_i2c_write+0x46>
 8008ce4:	482a      	ldr	r0, [pc, #168]	; (8008d90 <gd32_i2c_write+0xc4>)
 8008ce6:	4e2a      	ldr	r6, [pc, #168]	; (8008d90 <gd32_i2c_write+0xc4>)
 8008ce8:	f000 fc41 	bl	800956e <i2c_start_on_bus>
 8008cec:	f640 75ff 	movw	r5, #4095	; 0xfff
 8008cf0:	f44f 61a0 	mov.w	r1, #1280	; 0x500
 8008cf4:	4630      	mov	r0, r6
 8008cf6:	f000 fc49 	bl	800958c <i2c_flag_get>
 8008cfa:	b190      	cbz	r0, 8008d22 <gd32_i2c_write+0x56>
 8008cfc:	4b25      	ldr	r3, [pc, #148]	; (8008d94 <gd32_i2c_write+0xc8>)
 8008cfe:	4824      	ldr	r0, [pc, #144]	; (8008d90 <gd32_i2c_write+0xc4>)
 8008d00:	7819      	ldrb	r1, [r3, #0]
 8008d02:	4e23      	ldr	r6, [pc, #140]	; (8008d90 <gd32_i2c_write+0xc4>)
 8008d04:	f06f 0201 	mvn.w	r2, #1
 8008d08:	f000 fc24 	bl	8009554 <i2c_master_addressing>
 8008d0c:	f640 75ff 	movw	r5, #4095	; 0xfff
 8008d10:	e00c      	b.n	8008d2c <gd32_i2c_write+0x60>
 8008d12:	3d01      	subs	r5, #1
 8008d14:	d1e0      	bne.n	8008cd8 <gd32_i2c_write+0xc>
 8008d16:	f7ff ff85 	bl	8008c24 <_stop() [clone .isra.0]>
 8008d1a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008d1e:	4240      	negs	r0, r0
 8008d20:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008d22:	3d01      	subs	r5, #1
 8008d24:	d1e4      	bne.n	8008cf0 <gd32_i2c_write+0x24>
 8008d26:	e7f6      	b.n	8008d16 <gd32_i2c_write+0x4a>
 8008d28:	3d01      	subs	r5, #1
 8008d2a:	d0f4      	beq.n	8008d16 <gd32_i2c_write+0x4a>
 8008d2c:	f240 5101 	movw	r1, #1281	; 0x501
 8008d30:	4630      	mov	r0, r6
 8008d32:	f000 fc2b 	bl	800958c <i2c_flag_get>
 8008d36:	2800      	cmp	r0, #0
 8008d38:	d0f6      	beq.n	8008d28 <gd32_i2c_write+0x5c>
 8008d3a:	4815      	ldr	r0, [pc, #84]	; (8008d90 <gd32_i2c_write+0xc4>)
 8008d3c:	4e14      	ldr	r6, [pc, #80]	; (8008d90 <gd32_i2c_write+0xc4>)
 8008d3e:	f240 5101 	movw	r1, #1281	; 0x501
 8008d42:	f000 fc2e 	bl	80095a2 <i2c_flag_clear>
 8008d46:	f640 75ff 	movw	r5, #4095	; 0xfff
 8008d4a:	f240 5107 	movw	r1, #1287	; 0x507
 8008d4e:	4630      	mov	r0, r6
 8008d50:	f000 fc1c 	bl	800958c <i2c_flag_get>
 8008d54:	2801      	cmp	r0, #1
 8008d56:	d107      	bne.n	8008d68 <gd32_i2c_write+0x9c>
 8008d58:	4e0d      	ldr	r6, [pc, #52]	; (8008d90 <gd32_i2c_write+0xc4>)
 8008d5a:	4427      	add	r7, r4
 8008d5c:	42a7      	cmp	r7, r4
 8008d5e:	d106      	bne.n	8008d6e <gd32_i2c_write+0xa2>
 8008d60:	f7ff ff60 	bl	8008c24 <_stop() [clone .isra.0]>
 8008d64:	2000      	movs	r0, #0
 8008d66:	e7da      	b.n	8008d1e <gd32_i2c_write+0x52>
 8008d68:	3d01      	subs	r5, #1
 8008d6a:	d1ee      	bne.n	8008d4a <gd32_i2c_write+0x7e>
 8008d6c:	e7d3      	b.n	8008d16 <gd32_i2c_write+0x4a>
 8008d6e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008d72:	4630      	mov	r0, r6
 8008d74:	f000 fc05 	bl	8009582 <i2c_data_transmit>
 8008d78:	f640 75ff 	movw	r5, #4095	; 0xfff
 8008d7c:	f240 5102 	movw	r1, #1282	; 0x502
 8008d80:	4630      	mov	r0, r6
 8008d82:	f000 fc03 	bl	800958c <i2c_flag_get>
 8008d86:	2800      	cmp	r0, #0
 8008d88:	d1e8      	bne.n	8008d5c <gd32_i2c_write+0x90>
 8008d8a:	3d01      	subs	r5, #1
 8008d8c:	d1f6      	bne.n	8008d7c <gd32_i2c_write+0xb0>
 8008d8e:	e7c2      	b.n	8008d16 <gd32_i2c_write+0x4a>
 8008d90:	40005400 	andmi	r5, r0, r0, lsl #8
 8008d94:	20001818 	andcs	r1, r0, r8, lsl r8

08008d98 <gd32_i2c_read>:
 8008d98:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008d9c:	4f4d      	ldr	r7, [pc, #308]	; (8008ed4 <gd32_i2c_read+0x13c>)
 8008d9e:	4680      	mov	r8, r0
 8008da0:	460c      	mov	r4, r1
 8008da2:	f640 76ff 	movw	r6, #4095	; 0xfff
 8008da6:	f240 6101 	movw	r1, #1537	; 0x601
 8008daa:	4638      	mov	r0, r7
 8008dac:	f000 fbee 	bl	800958c <i2c_flag_get>
 8008db0:	4605      	mov	r5, r0
 8008db2:	bb08      	cbnz	r0, 8008df8 <gd32_i2c_read+0x60>
 8008db4:	2c02      	cmp	r4, #2
 8008db6:	d103      	bne.n	8008dc0 <gd32_i2c_read+0x28>
 8008db8:	4601      	mov	r1, r0
 8008dba:	4846      	ldr	r0, [pc, #280]	; (8008ed4 <gd32_i2c_read+0x13c>)
 8008dbc:	f000 fbc1 	bl	8009542 <i2c_ackpos_config>
 8008dc0:	4844      	ldr	r0, [pc, #272]	; (8008ed4 <gd32_i2c_read+0x13c>)
 8008dc2:	4f44      	ldr	r7, [pc, #272]	; (8008ed4 <gd32_i2c_read+0x13c>)
 8008dc4:	f000 fbd3 	bl	800956e <i2c_start_on_bus>
 8008dc8:	f640 76ff 	movw	r6, #4095	; 0xfff
 8008dcc:	f44f 61a0 	mov.w	r1, #1280	; 0x500
 8008dd0:	4638      	mov	r0, r7
 8008dd2:	f000 fbdb 	bl	800958c <i2c_flag_get>
 8008dd6:	b1a8      	cbz	r0, 8008e04 <gd32_i2c_read+0x6c>
 8008dd8:	4b3f      	ldr	r3, [pc, #252]	; (8008ed8 <gd32_i2c_read+0x140>)
 8008dda:	483e      	ldr	r0, [pc, #248]	; (8008ed4 <gd32_i2c_read+0x13c>)
 8008ddc:	7819      	ldrb	r1, [r3, #0]
 8008dde:	2201      	movs	r2, #1
 8008de0:	f000 fbb8 	bl	8009554 <i2c_master_addressing>
 8008de4:	2c02      	cmp	r4, #2
 8008de6:	d803      	bhi.n	8008df0 <gd32_i2c_read+0x58>
 8008de8:	483a      	ldr	r0, [pc, #232]	; (8008ed4 <gd32_i2c_read+0x13c>)
 8008dea:	2100      	movs	r1, #0
 8008dec:	f000 fba0 	bl	8009530 <i2c_ack_config>
 8008df0:	4f38      	ldr	r7, [pc, #224]	; (8008ed4 <gd32_i2c_read+0x13c>)
 8008df2:	f640 76ff 	movw	r6, #4095	; 0xfff
 8008df6:	e00a      	b.n	8008e0e <gd32_i2c_read+0x76>
 8008df8:	3e01      	subs	r6, #1
 8008dfa:	d1d4      	bne.n	8008da6 <gd32_i2c_read+0xe>
 8008dfc:	f7ff ff12 	bl	8008c24 <_stop() [clone .isra.0]>
 8008e00:	2504      	movs	r5, #4
 8008e02:	e04d      	b.n	8008ea0 <gd32_i2c_read+0x108>
 8008e04:	3e01      	subs	r6, #1
 8008e06:	d1e1      	bne.n	8008dcc <gd32_i2c_read+0x34>
 8008e08:	e7f8      	b.n	8008dfc <gd32_i2c_read+0x64>
 8008e0a:	3e01      	subs	r6, #1
 8008e0c:	d0f6      	beq.n	8008dfc <gd32_i2c_read+0x64>
 8008e0e:	f240 5101 	movw	r1, #1281	; 0x501
 8008e12:	4638      	mov	r0, r7
 8008e14:	f000 fbba 	bl	800958c <i2c_flag_get>
 8008e18:	2800      	cmp	r0, #0
 8008e1a:	d0f6      	beq.n	8008e0a <gd32_i2c_read+0x72>
 8008e1c:	482d      	ldr	r0, [pc, #180]	; (8008ed4 <gd32_i2c_read+0x13c>)
 8008e1e:	f240 5101 	movw	r1, #1281	; 0x501
 8008e22:	f000 fbbe 	bl	80095a2 <i2c_flag_clear>
 8008e26:	2c01      	cmp	r4, #1
 8008e28:	d102      	bne.n	8008e30 <gd32_i2c_read+0x98>
 8008e2a:	482a      	ldr	r0, [pc, #168]	; (8008ed4 <gd32_i2c_read+0x13c>)
 8008e2c:	f000 fba4 	bl	8009578 <i2c_stop_on_bus>
 8008e30:	4e28      	ldr	r6, [pc, #160]	; (8008ed4 <gd32_i2c_read+0x13c>)
 8008e32:	f640 77ff 	movw	r7, #4095	; 0xfff
 8008e36:	e022      	b.n	8008e7e <gd32_i2c_read+0xe6>
 8008e38:	2c03      	cmp	r4, #3
 8008e3a:	d134      	bne.n	8008ea6 <gd32_i2c_read+0x10e>
 8008e3c:	f640 79ff 	movw	r9, #4095	; 0xfff
 8008e40:	e002      	b.n	8008e48 <gd32_i2c_read+0xb0>
 8008e42:	f1b9 0901 	subs.w	r9, r9, #1
 8008e46:	d0d9      	beq.n	8008dfc <gd32_i2c_read+0x64>
 8008e48:	f240 5102 	movw	r1, #1282	; 0x502
 8008e4c:	4630      	mov	r0, r6
 8008e4e:	f000 fb9d 	bl	800958c <i2c_flag_get>
 8008e52:	2800      	cmp	r0, #0
 8008e54:	d0f5      	beq.n	8008e42 <gd32_i2c_read+0xaa>
 8008e56:	2100      	movs	r1, #0
 8008e58:	4630      	mov	r0, r6
 8008e5a:	f000 fb69 	bl	8009530 <i2c_ack_config>
 8008e5e:	f240 5106 	movw	r1, #1286	; 0x506
 8008e62:	4630      	mov	r0, r6
 8008e64:	f000 fb92 	bl	800958c <i2c_flag_get>
 8008e68:	b138      	cbz	r0, 8008e7a <gd32_i2c_read+0xe2>
 8008e6a:	4630      	mov	r0, r6
 8008e6c:	f000 fb8b 	bl	8009586 <i2c_data_receive>
 8008e70:	f808 0b01 	strb.w	r0, [r8], #1
 8008e74:	3c01      	subs	r4, #1
 8008e76:	f640 77ff 	movw	r7, #4095	; 0xfff
 8008e7a:	3f01      	subs	r7, #1
 8008e7c:	d0be      	beq.n	8008dfc <gd32_i2c_read+0x64>
 8008e7e:	2c00      	cmp	r4, #0
 8008e80:	d1da      	bne.n	8008e38 <gd32_i2c_read+0xa0>
 8008e82:	4916      	ldr	r1, [pc, #88]	; (8008edc <gd32_i2c_read+0x144>)
 8008e84:	f640 73ff 	movw	r3, #4095	; 0xfff
 8008e88:	f8d1 2400 	ldr.w	r2, [r1, #1024]	; 0x400
 8008e8c:	0592      	lsls	r2, r2, #22
 8008e8e:	d41d      	bmi.n	8008ecc <gd32_i2c_read+0x134>
 8008e90:	4810      	ldr	r0, [pc, #64]	; (8008ed4 <gd32_i2c_read+0x13c>)
 8008e92:	2101      	movs	r1, #1
 8008e94:	f000 fb4c 	bl	8009530 <i2c_ack_config>
 8008e98:	480e      	ldr	r0, [pc, #56]	; (8008ed4 <gd32_i2c_read+0x13c>)
 8008e9a:	2101      	movs	r1, #1
 8008e9c:	f000 fb51 	bl	8009542 <i2c_ackpos_config>
 8008ea0:	4628      	mov	r0, r5
 8008ea2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008ea6:	2c02      	cmp	r4, #2
 8008ea8:	d1d9      	bne.n	8008e5e <gd32_i2c_read+0xc6>
 8008eaa:	f640 79ff 	movw	r9, #4095	; 0xfff
 8008eae:	e002      	b.n	8008eb6 <gd32_i2c_read+0x11e>
 8008eb0:	f1b9 0901 	subs.w	r9, r9, #1
 8008eb4:	d0a2      	beq.n	8008dfc <gd32_i2c_read+0x64>
 8008eb6:	f240 5102 	movw	r1, #1282	; 0x502
 8008eba:	4630      	mov	r0, r6
 8008ebc:	f000 fb66 	bl	800958c <i2c_flag_get>
 8008ec0:	2800      	cmp	r0, #0
 8008ec2:	d0f5      	beq.n	8008eb0 <gd32_i2c_read+0x118>
 8008ec4:	4630      	mov	r0, r6
 8008ec6:	f000 fb57 	bl	8009578 <i2c_stop_on_bus>
 8008eca:	e7c8      	b.n	8008e5e <gd32_i2c_read+0xc6>
 8008ecc:	3b01      	subs	r3, #1
 8008ece:	d1db      	bne.n	8008e88 <gd32_i2c_read+0xf0>
 8008ed0:	e796      	b.n	8008e00 <gd32_i2c_read+0x68>
 8008ed2:	bf00      	nop
 8008ed4:	40005400 	andmi	r5, r0, r0, lsl #8
 8008ed8:	20001818 	andcs	r1, r0, r8, lsl r8
 8008edc:	40005000 	andmi	r5, r0, r0

08008ee0 <gd32_spi_dma_begin()>:
 8008ee0:	b530      	push	{r4, r5, lr}
 8008ee2:	f240 6002 	movw	r0, #1538	; 0x602
 8008ee6:	b089      	sub	sp, #36	; 0x24
 8008ee8:	f7ff fadc 	bl	80084a4 <rcu_periph_clock_enable>
 8008eec:	f240 6003 	movw	r0, #1539	; 0x603
 8008ef0:	f7ff fad8 	bl	80084a4 <rcu_periph_clock_enable>
 8008ef4:	f240 700f 	movw	r0, #1807	; 0x70f
 8008ef8:	f7ff fad4 	bl	80084a4 <rcu_periph_clock_enable>
 8008efc:	f44f 60c0 	mov.w	r0, #1536	; 0x600
 8008f00:	f7ff fad0 	bl	80084a4 <rcu_periph_clock_enable>
 8008f04:	4829      	ldr	r0, [pc, #164]	; (8008fac <gd32_spi_dma_begin()+0xcc>)
 8008f06:	4c2a      	ldr	r4, [pc, #168]	; (8008fb0 <gd32_spi_dma_begin()+0xd0>)
 8008f08:	2338      	movs	r3, #56	; 0x38
 8008f0a:	2203      	movs	r2, #3
 8008f0c:	2118      	movs	r1, #24
 8008f0e:	f7ff fa31 	bl	8008374 <gpio_init>
 8008f12:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008f16:	2203      	movs	r2, #3
 8008f18:	4826      	ldr	r0, [pc, #152]	; (8008fb4 <gd32_spi_dma_begin()+0xd4>)
 8008f1a:	2118      	movs	r1, #24
 8008f1c:	f7ff fa2a 	bl	8008374 <gpio_init>
 8008f20:	2101      	movs	r1, #1
 8008f22:	4825      	ldr	r0, [pc, #148]	; (8008fb8 <gd32_spi_dma_begin()+0xd8>)
 8008f24:	f7ff fa86 	bl	8008434 <gpio_pin_remap_config>
 8008f28:	4824      	ldr	r0, [pc, #144]	; (8008fbc <gd32_spi_dma_begin()+0xdc>)
 8008f2a:	f000 fb92 	bl	8009652 <i2s_disable>
 8008f2e:	2300      	movs	r3, #0
 8008f30:	461a      	mov	r2, r3
 8008f32:	4923      	ldr	r1, [pc, #140]	; (8008fc0 <gd32_spi_dma_begin()+0xe0>)
 8008f34:	4821      	ldr	r0, [pc, #132]	; (8008fbc <gd32_spi_dma_begin()+0xdc>)
 8008f36:	f000 fb55 	bl	80095e4 <i2s_psc_config>
 8008f3a:	2300      	movs	r3, #0
 8008f3c:	2210      	movs	r2, #16
 8008f3e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8008f42:	481e      	ldr	r0, [pc, #120]	; (8008fbc <gd32_spi_dma_begin()+0xdc>)
 8008f44:	f000 fb3f 	bl	80095c6 <i2s_init>
 8008f48:	481c      	ldr	r0, [pc, #112]	; (8008fbc <gd32_spi_dma_begin()+0xdc>)
 8008f4a:	f000 fb7d 	bl	8009648 <i2s_enable>
 8008f4e:	f240 5001 	movw	r0, #1281	; 0x501
 8008f52:	f7ff faa7 	bl	80084a4 <rcu_periph_clock_enable>
 8008f56:	2101      	movs	r1, #1
 8008f58:	4620      	mov	r0, r4
 8008f5a:	f7ff f8ff 	bl	800815c <dma_deinit>
 8008f5e:	a801      	add	r0, sp, #4
 8008f60:	f7ff f918 	bl	8008194 <dma_struct_para_init>
 8008f64:	4917      	ldr	r1, [pc, #92]	; (8008fc4 <gd32_spi_dma_begin()+0xe4>)
 8008f66:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008f6a:	2501      	movs	r5, #1
 8008f6c:	9304      	str	r3, [sp, #16]
 8008f6e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8008f72:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008f76:	e9cd 1301 	strd	r1, r3, [sp, #4]
 8008f7a:	9206      	str	r2, [sp, #24]
 8008f7c:	4629      	mov	r1, r5
 8008f7e:	aa01      	add	r2, sp, #4
 8008f80:	4620      	mov	r0, r4
 8008f82:	f8ad 301c 	strh.w	r3, [sp, #28]
 8008f86:	f88d 501e 	strb.w	r5, [sp, #30]
 8008f8a:	f7ff f90f 	bl	80081ac <dma_init>
 8008f8e:	4629      	mov	r1, r5
 8008f90:	4620      	mov	r0, r4
 8008f92:	f7ff f945 	bl	8008220 <dma_circulation_disable>
 8008f96:	4629      	mov	r1, r5
 8008f98:	4620      	mov	r0, r4
 8008f9a:	f7ff f951 	bl	8008240 <dma_memory_to_memory_disable>
 8008f9e:	4b0a      	ldr	r3, [pc, #40]	; (8008fc8 <gd32_spi_dma_begin()+0xe8>)
 8008fa0:	2200      	movs	r2, #0
 8008fa2:	f8c3 2420 	str.w	r2, [r3, #1056]	; 0x420
 8008fa6:	b009      	add	sp, #36	; 0x24
 8008fa8:	bd30      	pop	{r4, r5, pc}
 8008faa:	bf00      	nop
 8008fac:	40010c00 	andmi	r0, r1, r0, lsl #24
 8008fb0:	40020400 	andmi	r0, r2, r0, lsl #8
 8008fb4:	40010800 	andmi	r0, r1, r0, lsl #16
 8008fb8:	00300400 	eorseq	r0, r0, r0, lsl #8
 8008fbc:	40003c00 	andmi	r3, r0, r0, lsl #24
 8008fc0:	00030d40 	andeq	r0, r3, r0, asr #26
 8008fc4:	40003c0c 	andmi	r3, r0, ip, lsl #24
 8008fc8:	40020000 	andmi	r0, r2, r0

08008fcc <gd32_spi_dma_set_speed_hz(unsigned int)>:
 8008fcc:	b510      	push	{r4, lr}
 8008fce:	4604      	mov	r4, r0
 8008fd0:	4806      	ldr	r0, [pc, #24]	; (8008fec <gd32_spi_dma_set_speed_hz(unsigned int)+0x20>)
 8008fd2:	f000 fb3e 	bl	8009652 <i2s_disable>
 8008fd6:	2300      	movs	r3, #0
 8008fd8:	4804      	ldr	r0, [pc, #16]	; (8008fec <gd32_spi_dma_set_speed_hz(unsigned int)+0x20>)
 8008fda:	0961      	lsrs	r1, r4, #5
 8008fdc:	461a      	mov	r2, r3
 8008fde:	f000 fb01 	bl	80095e4 <i2s_psc_config>
 8008fe2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008fe6:	4801      	ldr	r0, [pc, #4]	; (8008fec <gd32_spi_dma_set_speed_hz(unsigned int)+0x20>)
 8008fe8:	f000 bb2e 	b.w	8009648 <i2s_enable>
 8008fec:	40003c00 	andmi	r3, r0, r0, lsl #24

08008ff0 <gd32_spi_dma_tx_prepare(unsigned int*)>:
 8008ff0:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8008ff4:	6003      	str	r3, [r0, #0]
 8008ff6:	4801      	ldr	r0, [pc, #4]	; (8008ffc <gd32_spi_dma_tx_prepare(unsigned int*)+0xc>)
 8008ff8:	4770      	bx	lr
 8008ffa:	bf00      	nop
 8008ffc:	2000181c 	andcs	r1, r0, ip, lsl r8

08009000 <gd32_spi_dma_tx_start(unsigned char const*, unsigned int)>:
 8009000:	4a0a      	ldr	r2, [pc, #40]	; (800902c <gd32_spi_dma_tx_start(unsigned char const*, unsigned int)+0x2c>)
 8009002:	f8d2 341c 	ldr.w	r3, [r2, #1052]	; 0x41c
 8009006:	3101      	adds	r1, #1
 8009008:	f023 0301 	bic.w	r3, r3, #1
 800900c:	f8c2 341c 	str.w	r3, [r2, #1052]	; 0x41c
 8009010:	f3c1 014f 	ubfx	r1, r1, #1, #16
 8009014:	f043 0301 	orr.w	r3, r3, #1
 8009018:	f8c2 0428 	str.w	r0, [r2, #1064]	; 0x428
 800901c:	f8c2 1420 	str.w	r1, [r2, #1056]	; 0x420
 8009020:	4803      	ldr	r0, [pc, #12]	; (8009030 <gd32_spi_dma_tx_start(unsigned char const*, unsigned int)+0x30>)
 8009022:	f8c2 341c 	str.w	r3, [r2, #1052]	; 0x41c
 8009026:	2100      	movs	r1, #0
 8009028:	f000 bb18 	b.w	800965c <spi_dma_enable>
 800902c:	40020000 	andmi	r0, r2, r0
 8009030:	40003c00 	andmi	r3, r0, r0, lsl #24

08009034 <gd32_spi_dma_tx_is_active()>:
 8009034:	4b03      	ldr	r3, [pc, #12]	; (8009044 <gd32_spi_dma_tx_is_active()+0x10>)
 8009036:	f8d3 0420 	ldr.w	r0, [r3, #1056]	; 0x420
 800903a:	3800      	subs	r0, #0
 800903c:	bf18      	it	ne
 800903e:	2001      	movne	r0, #1
 8009040:	4770      	bx	lr
 8009042:	bf00      	nop
 8009044:	40020000 	andmi	r0, r2, r0

08009048 <gd32_uart_begin>:
 8009048:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800904a:	461e      	mov	r6, r3
 800904c:	4b63      	ldr	r3, [pc, #396]	; (80091dc <gd32_uart_begin+0x194>)
 800904e:	4298      	cmp	r0, r3
 8009050:	4604      	mov	r4, r0
 8009052:	460f      	mov	r7, r1
 8009054:	4615      	mov	r5, r2
 8009056:	d03b      	beq.n	80090d0 <gd32_uart_begin+0x88>
 8009058:	d80a      	bhi.n	8009070 <gd32_uart_begin+0x28>
 800905a:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 800905e:	4298      	cmp	r0, r3
 8009060:	d02f      	beq.n	80090c2 <gd32_uart_begin+0x7a>
 8009062:	f240 7012 	movw	r0, #1810	; 0x712
 8009066:	f7ff fa1d 	bl	80084a4 <rcu_periph_clock_enable>
 800906a:	f240 6004 	movw	r0, #1540	; 0x604
 800906e:	e008      	b.n	8009082 <gd32_uart_begin+0x3a>
 8009070:	4b5b      	ldr	r3, [pc, #364]	; (80091e0 <gd32_uart_begin+0x198>)
 8009072:	4298      	cmp	r0, r3
 8009074:	d02f      	beq.n	80090d6 <gd32_uart_begin+0x8e>
 8009076:	f240 600e 	movw	r0, #1550	; 0x60e
 800907a:	f7ff fa13 	bl	80084a4 <rcu_periph_clock_enable>
 800907e:	f240 6003 	movw	r0, #1539	; 0x603
 8009082:	f7ff fa0f 	bl	80084a4 <rcu_periph_clock_enable>
 8009086:	f44f 60c0 	mov.w	r0, #1536	; 0x600
 800908a:	f7ff fa0b 	bl	80084a4 <rcu_periph_clock_enable>
 800908e:	4b53      	ldr	r3, [pc, #332]	; (80091dc <gd32_uart_begin+0x194>)
 8009090:	429c      	cmp	r4, r3
 8009092:	f000 8084 	beq.w	800919e <gd32_uart_begin+0x156>
 8009096:	d829      	bhi.n	80090ec <gd32_uart_begin+0xa4>
 8009098:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 800909c:	429c      	cmp	r4, r3
 800909e:	d071      	beq.n	8009184 <gd32_uart_begin+0x13c>
 80090a0:	4850      	ldr	r0, [pc, #320]	; (80091e4 <gd32_uart_begin+0x19c>)
 80090a2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80090a6:	2203      	movs	r2, #3
 80090a8:	2118      	movs	r1, #24
 80090aa:	f7ff f963 	bl	8008374 <gpio_init>
 80090ae:	484d      	ldr	r0, [pc, #308]	; (80091e4 <gd32_uart_begin+0x19c>)
 80090b0:	2104      	movs	r1, #4
 80090b2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80090b6:	2203      	movs	r2, #3
 80090b8:	f7ff f95c 	bl	8008374 <gpio_init>
 80090bc:	484a      	ldr	r0, [pc, #296]	; (80091e8 <gd32_uart_begin+0x1a0>)
 80090be:	2101      	movs	r1, #1
 80090c0:	e025      	b.n	800910e <gd32_uart_begin+0xc6>
 80090c2:	f240 7011 	movw	r0, #1809	; 0x711
 80090c6:	f7ff f9ed 	bl	80084a4 <rcu_periph_clock_enable>
 80090ca:	f240 6002 	movw	r0, #1538	; 0x602
 80090ce:	e7d8      	b.n	8009082 <gd32_uart_begin+0x3a>
 80090d0:	f240 7013 	movw	r0, #1811	; 0x713
 80090d4:	e7c7      	b.n	8009066 <gd32_uart_begin+0x1e>
 80090d6:	f240 7014 	movw	r0, #1812	; 0x714
 80090da:	f7ff f9e3 	bl	80084a4 <rcu_periph_clock_enable>
 80090de:	f240 6004 	movw	r0, #1540	; 0x604
 80090e2:	f7ff f9df 	bl	80084a4 <rcu_periph_clock_enable>
 80090e6:	f240 6005 	movw	r0, #1541	; 0x605
 80090ea:	e7ca      	b.n	8009082 <gd32_uart_begin+0x3a>
 80090ec:	4b3c      	ldr	r3, [pc, #240]	; (80091e0 <gd32_uart_begin+0x198>)
 80090ee:	429c      	cmp	r4, r3
 80090f0:	d062      	beq.n	80091b8 <gd32_uart_begin+0x170>
 80090f2:	483e      	ldr	r0, [pc, #248]	; (80091ec <gd32_uart_begin+0x1a4>)
 80090f4:	2340      	movs	r3, #64	; 0x40
 80090f6:	2203      	movs	r2, #3
 80090f8:	2118      	movs	r1, #24
 80090fa:	f7ff f93b 	bl	8008374 <gpio_init>
 80090fe:	483b      	ldr	r0, [pc, #236]	; (80091ec <gd32_uart_begin+0x1a4>)
 8009100:	2104      	movs	r1, #4
 8009102:	2380      	movs	r3, #128	; 0x80
 8009104:	2203      	movs	r2, #3
 8009106:	f7ff f935 	bl	8008374 <gpio_init>
 800910a:	2101      	movs	r1, #1
 800910c:	2004      	movs	r0, #4
 800910e:	f7ff f991 	bl	8008434 <gpio_pin_remap_config>
 8009112:	4620      	mov	r0, r4
 8009114:	f7ff fc3a 	bl	800898c <usart_deinit>
 8009118:	68e3      	ldr	r3, [r4, #12]
 800911a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800911e:	60e3      	str	r3, [r4, #12]
 8009120:	4639      	mov	r1, r7
 8009122:	4620      	mov	r0, r4
 8009124:	f7ff fc72 	bl	8008a0c <usart_baudrate_set>
 8009128:	f1a5 0309 	sub.w	r3, r5, #9
 800912c:	4259      	negs	r1, r3
 800912e:	4159      	adcs	r1, r3
 8009130:	0309      	lsls	r1, r1, #12
 8009132:	4620      	mov	r0, r4
 8009134:	f7ff fc9a 	bl	8008a6c <usart_word_length_set>
 8009138:	9906      	ldr	r1, [sp, #24]
 800913a:	1e8a      	subs	r2, r1, #2
 800913c:	4251      	negs	r1, r2
 800913e:	4151      	adcs	r1, r2
 8009140:	0349      	lsls	r1, r1, #13
 8009142:	4620      	mov	r0, r4
 8009144:	f7ff fc9a 	bl	8008a7c <usart_stop_bit_set>
 8009148:	2e01      	cmp	r6, #1
 800914a:	d041      	beq.n	80091d0 <gd32_uart_begin+0x188>
 800914c:	2e02      	cmp	r6, #2
 800914e:	d142      	bne.n	80091d6 <gd32_uart_begin+0x18e>
 8009150:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8009154:	4620      	mov	r0, r4
 8009156:	f7ff fc81 	bl	8008a5c <usart_parity_config>
 800915a:	2100      	movs	r1, #0
 800915c:	4620      	mov	r0, r4
 800915e:	f7ff fca1 	bl	8008aa4 <usart_hardware_flow_rts_config>
 8009162:	2100      	movs	r1, #0
 8009164:	4620      	mov	r0, r4
 8009166:	f7ff fca3 	bl	8008ab0 <usart_hardware_flow_cts_config>
 800916a:	2104      	movs	r1, #4
 800916c:	4620      	mov	r0, r4
 800916e:	f7ff fc93 	bl	8008a98 <usart_receive_config>
 8009172:	2108      	movs	r1, #8
 8009174:	4620      	mov	r0, r4
 8009176:	f7ff fc89 	bl	8008a8c <usart_transmit_config>
 800917a:	68e3      	ldr	r3, [r4, #12]
 800917c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8009180:	60e3      	str	r3, [r4, #12]
 8009182:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009184:	481a      	ldr	r0, [pc, #104]	; (80091f0 <gd32_uart_begin+0x1a8>)
 8009186:	2304      	movs	r3, #4
 8009188:	2203      	movs	r2, #3
 800918a:	2118      	movs	r1, #24
 800918c:	f7ff f8f2 	bl	8008374 <gpio_init>
 8009190:	4817      	ldr	r0, [pc, #92]	; (80091f0 <gd32_uart_begin+0x1a8>)
 8009192:	2308      	movs	r3, #8
 8009194:	2203      	movs	r2, #3
 8009196:	2104      	movs	r1, #4
 8009198:	f7ff f8ec 	bl	8008374 <gpio_init>
 800919c:	e7b9      	b.n	8009112 <gd32_uart_begin+0xca>
 800919e:	4811      	ldr	r0, [pc, #68]	; (80091e4 <gd32_uart_begin+0x19c>)
 80091a0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80091a4:	2203      	movs	r2, #3
 80091a6:	2118      	movs	r1, #24
 80091a8:	f7ff f8e4 	bl	8008374 <gpio_init>
 80091ac:	480d      	ldr	r0, [pc, #52]	; (80091e4 <gd32_uart_begin+0x19c>)
 80091ae:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80091b2:	2203      	movs	r2, #3
 80091b4:	2104      	movs	r1, #4
 80091b6:	e7ef      	b.n	8009198 <gd32_uart_begin+0x150>
 80091b8:	480a      	ldr	r0, [pc, #40]	; (80091e4 <gd32_uart_begin+0x19c>)
 80091ba:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80091be:	2203      	movs	r2, #3
 80091c0:	2118      	movs	r1, #24
 80091c2:	f7ff f8d7 	bl	8008374 <gpio_init>
 80091c6:	2304      	movs	r3, #4
 80091c8:	480a      	ldr	r0, [pc, #40]	; (80091f4 <gd32_uart_begin+0x1ac>)
 80091ca:	2203      	movs	r2, #3
 80091cc:	4619      	mov	r1, r3
 80091ce:	e7e3      	b.n	8009198 <gd32_uart_begin+0x150>
 80091d0:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80091d4:	e7be      	b.n	8009154 <gd32_uart_begin+0x10c>
 80091d6:	2100      	movs	r1, #0
 80091d8:	e7bc      	b.n	8009154 <gd32_uart_begin+0x10c>
 80091da:	bf00      	nop
 80091dc:	40004c00 	andmi	r4, r0, r0, lsl #24
 80091e0:	40005000 	andmi	r5, r0, r0
 80091e4:	40011000 	andmi	r1, r1, r0
 80091e8:	00140010 	andseq	r0, r4, r0, lsl r0
 80091ec:	40010c00 	andmi	r0, r1, r0, lsl #24
 80091f0:	40010800 	andmi	r0, r1, r0, lsl #16
 80091f4:	40011400 	andmi	r1, r1, r0, lsl #8

080091f8 <micros_init()>:
 80091f8:	4770      	bx	lr
	...

080091fc <udelay_init()>:
 80091fc:	4a07      	ldr	r2, [pc, #28]	; (800921c <udelay_init()+0x20>)
 80091fe:	f8d2 30fc 	ldr.w	r3, [r2, #252]	; 0xfc
 8009202:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8009206:	f8c2 30fc 	str.w	r3, [r2, #252]	; 0xfc
 800920a:	4b05      	ldr	r3, [pc, #20]	; (8009220 <udelay_init()+0x24>)
 800920c:	2200      	movs	r2, #0
 800920e:	605a      	str	r2, [r3, #4]
 8009210:	681a      	ldr	r2, [r3, #0]
 8009212:	f042 0201 	orr.w	r2, r2, #1
 8009216:	601a      	str	r2, [r3, #0]
 8009218:	4770      	bx	lr
 800921a:	bf00      	nop
 800921c:	e000ed00 	and	lr, r0, r0, lsl #26
 8009220:	e0001000 	and	r1, r0, r0

08009224 <udelay(unsigned int, unsigned int)>:
 8009224:	2378      	movs	r3, #120	; 0x78
 8009226:	b530      	push	{r4, r5, lr}
 8009228:	4358      	muls	r0, r3
 800922a:	b909      	cbnz	r1, 8009230 <udelay(unsigned int, unsigned int)+0xc>
 800922c:	4b08      	ldr	r3, [pc, #32]	; (8009250 <udelay(unsigned int, unsigned int)+0x2c>)
 800922e:	6859      	ldr	r1, [r3, #4]
 8009230:	4c07      	ldr	r4, [pc, #28]	; (8009250 <udelay(unsigned int, unsigned int)+0x2c>)
 8009232:	2300      	movs	r3, #0
 8009234:	6862      	ldr	r2, [r4, #4]
 8009236:	4291      	cmp	r1, r2
 8009238:	d0fc      	beq.n	8009234 <udelay(unsigned int, unsigned int)+0x10>
 800923a:	bf2a      	itet	cs
 800923c:	f102 35ff 	addcs.w	r5, r2, #4294967295	; 0xffffffff
 8009240:	189b      	addcc	r3, r3, r2
 8009242:	195b      	addcs	r3, r3, r5
 8009244:	1a5b      	subs	r3, r3, r1
 8009246:	4283      	cmp	r3, r0
 8009248:	d300      	bcc.n	800924c <udelay(unsigned int, unsigned int)+0x28>
 800924a:	bd30      	pop	{r4, r5, pc}
 800924c:	4611      	mov	r1, r2
 800924e:	e7f1      	b.n	8009234 <udelay(unsigned int, unsigned int)+0x10>
 8009250:	e0001000 	and	r1, r0, r0

08009254 <adc_enable>:
 8009254:	6883      	ldr	r3, [r0, #8]
 8009256:	07db      	lsls	r3, r3, #31
 8009258:	bf5e      	ittt	pl
 800925a:	6883      	ldrpl	r3, [r0, #8]
 800925c:	f043 0301 	orrpl.w	r3, r3, #1
 8009260:	6083      	strpl	r3, [r0, #8]
 8009262:	4770      	bx	lr

08009264 <adc_calibration_enable>:
 8009264:	6883      	ldr	r3, [r0, #8]
 8009266:	f043 0308 	orr.w	r3, r3, #8
 800926a:	f100 0208 	add.w	r2, r0, #8
 800926e:	6083      	str	r3, [r0, #8]
 8009270:	6813      	ldr	r3, [r2, #0]
 8009272:	0719      	lsls	r1, r3, #28
 8009274:	d4fc      	bmi.n	8009270 <adc_calibration_enable+0xc>
 8009276:	6883      	ldr	r3, [r0, #8]
 8009278:	f043 0304 	orr.w	r3, r3, #4
 800927c:	6083      	str	r3, [r0, #8]
 800927e:	6813      	ldr	r3, [r2, #0]
 8009280:	075b      	lsls	r3, r3, #29
 8009282:	d4fc      	bmi.n	800927e <adc_calibration_enable+0x1a>
 8009284:	4770      	bx	lr
	...

08009288 <adc_tempsensor_vrefint_enable>:
 8009288:	4a03      	ldr	r2, [pc, #12]	; (8009298 <adc_tempsensor_vrefint_enable+0x10>)
 800928a:	f8d2 3408 	ldr.w	r3, [r2, #1032]	; 0x408
 800928e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8009292:	f8c2 3408 	str.w	r3, [r2, #1032]	; 0x408
 8009296:	4770      	bx	lr
 8009298:	40012000 	andmi	r2, r1, r0

0800929c <adc_mode_config>:
 800929c:	4b06      	ldr	r3, [pc, #24]	; (80092b8 <adc_mode_config+0x1c>)
 800929e:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 80092a2:	f422 2270 	bic.w	r2, r2, #983040	; 0xf0000
 80092a6:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
 80092aa:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 80092ae:	4310      	orrs	r0, r2
 80092b0:	f8c3 0404 	str.w	r0, [r3, #1028]	; 0x404
 80092b4:	4770      	bx	lr
 80092b6:	bf00      	nop
 80092b8:	40012000 	andmi	r2, r1, r0

080092bc <adc_special_function_config>:
 80092bc:	b510      	push	{r4, lr}
 80092be:	f401 7380 	and.w	r3, r1, #256	; 0x100
 80092c2:	f401 6480 	and.w	r4, r1, #1024	; 0x400
 80092c6:	f001 0102 	and.w	r1, r1, #2
 80092ca:	b17a      	cbz	r2, 80092ec <adc_special_function_config+0x30>
 80092cc:	b11b      	cbz	r3, 80092d6 <adc_special_function_config+0x1a>
 80092ce:	6843      	ldr	r3, [r0, #4]
 80092d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80092d4:	6043      	str	r3, [r0, #4]
 80092d6:	b11c      	cbz	r4, 80092e0 <adc_special_function_config+0x24>
 80092d8:	6843      	ldr	r3, [r0, #4]
 80092da:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80092de:	6043      	str	r3, [r0, #4]
 80092e0:	b119      	cbz	r1, 80092ea <adc_special_function_config+0x2e>
 80092e2:	6883      	ldr	r3, [r0, #8]
 80092e4:	f043 0302 	orr.w	r3, r3, #2
 80092e8:	6083      	str	r3, [r0, #8]
 80092ea:	bd10      	pop	{r4, pc}
 80092ec:	b11b      	cbz	r3, 80092f6 <adc_special_function_config+0x3a>
 80092ee:	6843      	ldr	r3, [r0, #4]
 80092f0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80092f4:	6043      	str	r3, [r0, #4]
 80092f6:	b11c      	cbz	r4, 8009300 <adc_special_function_config+0x44>
 80092f8:	6843      	ldr	r3, [r0, #4]
 80092fa:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80092fe:	6043      	str	r3, [r0, #4]
 8009300:	2900      	cmp	r1, #0
 8009302:	d0f2      	beq.n	80092ea <adc_special_function_config+0x2e>
 8009304:	6883      	ldr	r3, [r0, #8]
 8009306:	f023 0302 	bic.w	r3, r3, #2
 800930a:	e7ed      	b.n	80092e8 <adc_special_function_config+0x2c>

0800930c <adc_data_alignment_config>:
 800930c:	6883      	ldr	r3, [r0, #8]
 800930e:	b119      	cbz	r1, 8009318 <adc_data_alignment_config+0xc>
 8009310:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8009314:	6083      	str	r3, [r0, #8]
 8009316:	4770      	bx	lr
 8009318:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800931c:	e7fa      	b.n	8009314 <adc_data_alignment_config+0x8>

0800931e <adc_channel_length_config>:
 800931e:	2901      	cmp	r1, #1
 8009320:	d002      	beq.n	8009328 <adc_channel_length_config+0xa>
 8009322:	2902      	cmp	r1, #2
 8009324:	d00c      	beq.n	8009340 <adc_channel_length_config+0x22>
 8009326:	4770      	bx	lr
 8009328:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800932a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800932e:	62c3      	str	r3, [r0, #44]	; 0x2c
 8009330:	3a01      	subs	r2, #1
 8009332:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8009334:	0512      	lsls	r2, r2, #20
 8009336:	f402 0270 	and.w	r2, r2, #15728640	; 0xf00000
 800933a:	431a      	orrs	r2, r3
 800933c:	62c2      	str	r2, [r0, #44]	; 0x2c
 800933e:	4770      	bx	lr
 8009340:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8009342:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8009346:	6383      	str	r3, [r0, #56]	; 0x38
 8009348:	3a01      	subs	r2, #1
 800934a:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800934c:	0512      	lsls	r2, r2, #20
 800934e:	f402 1240 	and.w	r2, r2, #3145728	; 0x300000
 8009352:	431a      	orrs	r2, r3
 8009354:	6382      	str	r2, [r0, #56]	; 0x38
 8009356:	4770      	bx	lr

08009358 <adc_inserted_channel_config>:
 8009358:	b530      	push	{r4, r5, lr}
 800935a:	6b85      	ldr	r5, [r0, #56]	; 0x38
 800935c:	6b84      	ldr	r4, [r0, #56]	; 0x38
 800935e:	f3c5 5501 	ubfx	r5, r5, #20, #2
 8009362:	3103      	adds	r1, #3
 8009364:	1b49      	subs	r1, r1, r5
 8009366:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 800936a:	251f      	movs	r5, #31
 800936c:	408d      	lsls	r5, r1
 800936e:	ea24 0405 	bic.w	r4, r4, r5
 8009372:	fa02 f101 	lsl.w	r1, r2, r1
 8009376:	4321      	orrs	r1, r4
 8009378:	2a09      	cmp	r2, #9
 800937a:	6381      	str	r1, [r0, #56]	; 0x38
 800937c:	d80a      	bhi.n	8009394 <adc_inserted_channel_config+0x3c>
 800937e:	6901      	ldr	r1, [r0, #16]
 8009380:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8009384:	2407      	movs	r4, #7
 8009386:	4094      	lsls	r4, r2
 8009388:	ea21 0104 	bic.w	r1, r1, r4
 800938c:	4093      	lsls	r3, r2
 800938e:	430b      	orrs	r3, r1
 8009390:	6103      	str	r3, [r0, #16]
 8009392:	bd30      	pop	{r4, r5, pc}
 8009394:	2a11      	cmp	r2, #17
 8009396:	d8fc      	bhi.n	8009392 <adc_inserted_channel_config+0x3a>
 8009398:	2103      	movs	r1, #3
 800939a:	f06f 051d 	mvn.w	r5, #29
 800939e:	fb11 5202 	smlabb	r2, r1, r2, r5
 80093a2:	68c4      	ldr	r4, [r0, #12]
 80093a4:	2107      	movs	r1, #7
 80093a6:	4091      	lsls	r1, r2
 80093a8:	ea24 0101 	bic.w	r1, r4, r1
 80093ac:	4093      	lsls	r3, r2
 80093ae:	430b      	orrs	r3, r1
 80093b0:	60c3      	str	r3, [r0, #12]
 80093b2:	e7ee      	b.n	8009392 <adc_inserted_channel_config+0x3a>

080093b4 <adc_external_trigger_config>:
 80093b4:	f001 0301 	and.w	r3, r1, #1
 80093b8:	f001 0102 	and.w	r1, r1, #2
 80093bc:	b152      	cbz	r2, 80093d4 <adc_external_trigger_config+0x20>
 80093be:	b11b      	cbz	r3, 80093c8 <adc_external_trigger_config+0x14>
 80093c0:	6883      	ldr	r3, [r0, #8]
 80093c2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80093c6:	6083      	str	r3, [r0, #8]
 80093c8:	b119      	cbz	r1, 80093d2 <adc_external_trigger_config+0x1e>
 80093ca:	6883      	ldr	r3, [r0, #8]
 80093cc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80093d0:	6083      	str	r3, [r0, #8]
 80093d2:	4770      	bx	lr
 80093d4:	b11b      	cbz	r3, 80093de <adc_external_trigger_config+0x2a>
 80093d6:	6883      	ldr	r3, [r0, #8]
 80093d8:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80093dc:	6083      	str	r3, [r0, #8]
 80093de:	2900      	cmp	r1, #0
 80093e0:	d0f7      	beq.n	80093d2 <adc_external_trigger_config+0x1e>
 80093e2:	6883      	ldr	r3, [r0, #8]
 80093e4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80093e8:	e7f2      	b.n	80093d0 <adc_external_trigger_config+0x1c>

080093ea <adc_external_trigger_source_config>:
 80093ea:	2901      	cmp	r1, #1
 80093ec:	d002      	beq.n	80093f4 <adc_external_trigger_source_config+0xa>
 80093ee:	2902      	cmp	r1, #2
 80093f0:	d008      	beq.n	8009404 <adc_external_trigger_source_config+0x1a>
 80093f2:	4770      	bx	lr
 80093f4:	6883      	ldr	r3, [r0, #8]
 80093f6:	f423 2360 	bic.w	r3, r3, #917504	; 0xe0000
 80093fa:	6083      	str	r3, [r0, #8]
 80093fc:	6883      	ldr	r3, [r0, #8]
 80093fe:	4313      	orrs	r3, r2
 8009400:	6083      	str	r3, [r0, #8]
 8009402:	4770      	bx	lr
 8009404:	6883      	ldr	r3, [r0, #8]
 8009406:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800940a:	e7f6      	b.n	80093fa <adc_external_trigger_source_config+0x10>

0800940c <adc_software_trigger_enable>:
 800940c:	07ca      	lsls	r2, r1, #31
 800940e:	bf42      	ittt	mi
 8009410:	6883      	ldrmi	r3, [r0, #8]
 8009412:	f443 0380 	orrmi.w	r3, r3, #4194304	; 0x400000
 8009416:	6083      	strmi	r3, [r0, #8]
 8009418:	078b      	lsls	r3, r1, #30
 800941a:	bf42      	ittt	mi
 800941c:	6883      	ldrmi	r3, [r0, #8]
 800941e:	f443 1300 	orrmi.w	r3, r3, #2097152	; 0x200000
 8009422:	6083      	strmi	r3, [r0, #8]
 8009424:	4770      	bx	lr
	...

08009428 <i2c_clock_config>:
 8009428:	b570      	push	{r4, r5, r6, lr}
 800942a:	4604      	mov	r4, r0
 800942c:	4616      	mov	r6, r2
 800942e:	460d      	mov	r5, r1
 8009430:	b901      	cbnz	r1, 8009434 <i2c_clock_config+0xc>
 8009432:	e7fe      	b.n	8009432 <i2c_clock_config+0xa>
 8009434:	2002      	movs	r0, #2
 8009436:	f7ff f8f9 	bl	800862c <rcu_clock_freq_get>
 800943a:	4a39      	ldr	r2, [pc, #228]	; (8009520 <i2c_clock_config+0xf8>)
 800943c:	4939      	ldr	r1, [pc, #228]	; (8009524 <i2c_clock_config+0xfc>)
 800943e:	fbb0 f1f1 	udiv	r1, r0, r1
 8009442:	4290      	cmp	r0, r2
 8009444:	bf34      	ite	cc
 8009446:	460b      	movcc	r3, r1
 8009448:	233c      	movcs	r3, #60	; 0x3c
 800944a:	6862      	ldr	r2, [r4, #4]
 800944c:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
 8009450:	431a      	orrs	r2, r3
 8009452:	6062      	str	r2, [r4, #4]
 8009454:	4a34      	ldr	r2, [pc, #208]	; (8009528 <i2c_clock_config+0x100>)
 8009456:	4295      	cmp	r5, r2
 8009458:	d816      	bhi.n	8009488 <i2c_clock_config+0x60>
 800945a:	3101      	adds	r1, #1
 800945c:	293b      	cmp	r1, #59	; 0x3b
 800945e:	d90d      	bls.n	800947c <i2c_clock_config+0x54>
 8009460:	233c      	movs	r3, #60	; 0x3c
 8009462:	6223      	str	r3, [r4, #32]
 8009464:	006d      	lsls	r5, r5, #1
 8009466:	fbb0 f0f5 	udiv	r0, r0, r5
 800946a:	2804      	cmp	r0, #4
 800946c:	69e3      	ldr	r3, [r4, #28]
 800946e:	bf38      	it	cc
 8009470:	2004      	movcc	r0, #4
 8009472:	f3c0 000b 	ubfx	r0, r0, #0, #12
 8009476:	4318      	orrs	r0, r3
 8009478:	61e0      	str	r0, [r4, #28]
 800947a:	bd70      	pop	{r4, r5, r6, pc}
 800947c:	2902      	cmp	r1, #2
 800947e:	d801      	bhi.n	8009484 <i2c_clock_config+0x5c>
 8009480:	2302      	movs	r3, #2
 8009482:	e7ee      	b.n	8009462 <i2c_clock_config+0x3a>
 8009484:	6221      	str	r1, [r4, #32]
 8009486:	e7ed      	b.n	8009464 <i2c_clock_config+0x3c>
 8009488:	4a28      	ldr	r2, [pc, #160]	; (800952c <i2c_clock_config+0x104>)
 800948a:	4295      	cmp	r5, r2
 800948c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8009490:	d824      	bhi.n	80094dc <i2c_clock_config+0xb4>
 8009492:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8009496:	4353      	muls	r3, r2
 8009498:	fbb3 f3f1 	udiv	r3, r3, r1
 800949c:	3301      	adds	r3, #1
 800949e:	6223      	str	r3, [r4, #32]
 80094a0:	b9a6      	cbnz	r6, 80094cc <i2c_clock_config+0xa4>
 80094a2:	eb05 0345 	add.w	r3, r5, r5, lsl #1
 80094a6:	fbb0 f0f3 	udiv	r0, r0, r3
 80094aa:	69e3      	ldr	r3, [r4, #28]
 80094ac:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80094b0:	61e3      	str	r3, [r4, #28]
 80094b2:	f3c0 030b 	ubfx	r3, r0, #0, #12
 80094b6:	b90b      	cbnz	r3, 80094bc <i2c_clock_config+0x94>
 80094b8:	f040 0001 	orr.w	r0, r0, #1
 80094bc:	69e3      	ldr	r3, [r4, #28]
 80094be:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80094c2:	61e3      	str	r3, [r4, #28]
 80094c4:	69e3      	ldr	r3, [r4, #28]
 80094c6:	4303      	orrs	r3, r0
 80094c8:	61e3      	str	r3, [r4, #28]
 80094ca:	e7d6      	b.n	800947a <i2c_clock_config+0x52>
 80094cc:	2319      	movs	r3, #25
 80094ce:	436b      	muls	r3, r5
 80094d0:	fbb0 f0f3 	udiv	r0, r0, r3
 80094d4:	69e3      	ldr	r3, [r4, #28]
 80094d6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80094da:	e7e9      	b.n	80094b0 <i2c_clock_config+0x88>
 80094dc:	2278      	movs	r2, #120	; 0x78
 80094de:	4353      	muls	r3, r2
 80094e0:	fbb3 f3f1 	udiv	r3, r3, r1
 80094e4:	3301      	adds	r3, #1
 80094e6:	6223      	str	r3, [r4, #32]
 80094e8:	b996      	cbnz	r6, 8009510 <i2c_clock_config+0xe8>
 80094ea:	69e3      	ldr	r3, [r4, #28]
 80094ec:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80094f0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80094f4:	fbb0 f0f5 	udiv	r0, r0, r5
 80094f8:	61e3      	str	r3, [r4, #28]
 80094fa:	69e3      	ldr	r3, [r4, #28]
 80094fc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009500:	61e3      	str	r3, [r4, #28]
 8009502:	69e3      	ldr	r3, [r4, #28]
 8009504:	4303      	orrs	r3, r0
 8009506:	61e3      	str	r3, [r4, #28]
 8009508:	2301      	movs	r3, #1
 800950a:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
 800950e:	e7b4      	b.n	800947a <i2c_clock_config+0x52>
 8009510:	2319      	movs	r3, #25
 8009512:	435d      	muls	r5, r3
 8009514:	69e3      	ldr	r3, [r4, #28]
 8009516:	fbb0 f0f5 	udiv	r0, r0, r5
 800951a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800951e:	e7eb      	b.n	80094f8 <i2c_clock_config+0xd0>
 8009520:	03938700 	orrseq	r8, r3, #0, 14
 8009524:	000f4240 	andeq	r4, pc, r0, asr #4
 8009528:	000186a0 	andeq	r8, r1, r0, lsr #13
 800952c:	00061a80 	andeq	r1, r6, r0, lsl #21

08009530 <i2c_ack_config>:
 8009530:	6803      	ldr	r3, [r0, #0]
 8009532:	2901      	cmp	r1, #1
 8009534:	bf0c      	ite	eq
 8009536:	f443 6380 	orreq.w	r3, r3, #1024	; 0x400
 800953a:	f423 6380 	bicne.w	r3, r3, #1024	; 0x400
 800953e:	6003      	str	r3, [r0, #0]
 8009540:	4770      	bx	lr

08009542 <i2c_ackpos_config>:
 8009542:	6803      	ldr	r3, [r0, #0]
 8009544:	b919      	cbnz	r1, 800954e <i2c_ackpos_config+0xc>
 8009546:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800954a:	6003      	str	r3, [r0, #0]
 800954c:	4770      	bx	lr
 800954e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009552:	e7fa      	b.n	800954a <i2c_ackpos_config+0x8>

08009554 <i2c_master_addressing>:
 8009554:	3202      	adds	r2, #2
 8009556:	bf0c      	ite	eq
 8009558:	f021 0101 	biceq.w	r1, r1, #1
 800955c:	f041 0101 	orrne.w	r1, r1, #1
 8009560:	6101      	str	r1, [r0, #16]
 8009562:	4770      	bx	lr

08009564 <i2c_enable>:
 8009564:	6803      	ldr	r3, [r0, #0]
 8009566:	f043 0301 	orr.w	r3, r3, #1
 800956a:	6003      	str	r3, [r0, #0]
 800956c:	4770      	bx	lr

0800956e <i2c_start_on_bus>:
 800956e:	6803      	ldr	r3, [r0, #0]
 8009570:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009574:	6003      	str	r3, [r0, #0]
 8009576:	4770      	bx	lr

08009578 <i2c_stop_on_bus>:
 8009578:	6803      	ldr	r3, [r0, #0]
 800957a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800957e:	6003      	str	r3, [r0, #0]
 8009580:	4770      	bx	lr

08009582 <i2c_data_transmit>:
 8009582:	6101      	str	r1, [r0, #16]
 8009584:	4770      	bx	lr

08009586 <i2c_data_receive>:
 8009586:	6900      	ldr	r0, [r0, #16]
 8009588:	b2c0      	uxtb	r0, r0
 800958a:	4770      	bx	lr

0800958c <i2c_flag_get>:
 800958c:	098b      	lsrs	r3, r1, #6
 800958e:	f001 011f 	and.w	r1, r1, #31
 8009592:	581a      	ldr	r2, [r3, r0]
 8009594:	2301      	movs	r3, #1
 8009596:	408b      	lsls	r3, r1
 8009598:	4213      	tst	r3, r2
 800959a:	bf14      	ite	ne
 800959c:	2001      	movne	r0, #1
 800959e:	2000      	moveq	r0, #0
 80095a0:	4770      	bx	lr

080095a2 <i2c_flag_clear>:
 80095a2:	f240 5301 	movw	r3, #1281	; 0x501
 80095a6:	4299      	cmp	r1, r3
 80095a8:	b510      	push	{r4, lr}
 80095aa:	d102      	bne.n	80095b2 <i2c_flag_clear+0x10>
 80095ac:	6943      	ldr	r3, [r0, #20]
 80095ae:	6983      	ldr	r3, [r0, #24]
 80095b0:	bd10      	pop	{r4, pc}
 80095b2:	098c      	lsrs	r4, r1, #6
 80095b4:	2201      	movs	r2, #1
 80095b6:	5823      	ldr	r3, [r4, r0]
 80095b8:	f001 011f 	and.w	r1, r1, #31
 80095bc:	408a      	lsls	r2, r1
 80095be:	ea23 0302 	bic.w	r3, r3, r2
 80095c2:	5023      	str	r3, [r4, r0]
 80095c4:	e7f4      	b.n	80095b0 <i2c_flag_clear+0xe>

080095c6 <i2s_init>:
 80095c6:	b510      	push	{r4, lr}
 80095c8:	69c4      	ldr	r4, [r0, #28]
 80095ca:	f424 647b 	bic.w	r4, r4, #4016	; 0xfb0
 80095ce:	f024 0408 	bic.w	r4, r4, #8
 80095d2:	0424      	lsls	r4, r4, #16
 80095d4:	0c24      	lsrs	r4, r4, #16
 80095d6:	4323      	orrs	r3, r4
 80095d8:	431a      	orrs	r2, r3
 80095da:	4311      	orrs	r1, r2
 80095dc:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
 80095e0:	61c1      	str	r1, [r0, #28]
 80095e2:	bd10      	pop	{r4, pc}

080095e4 <i2s_psc_config>:
 80095e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80095e6:	4605      	mov	r5, r0
 80095e8:	4616      	mov	r6, r2
 80095ea:	461f      	mov	r7, r3
 80095ec:	460c      	mov	r4, r1
 80095ee:	b901      	cbnz	r1, 80095f2 <i2s_psc_config+0xe>
 80095f0:	e7fe      	b.n	80095f0 <i2s_psc_config+0xc>
 80095f2:	2302      	movs	r3, #2
 80095f4:	6203      	str	r3, [r0, #32]
 80095f6:	2000      	movs	r0, #0
 80095f8:	f7ff f818 	bl	800862c <rcu_clock_freq_get>
 80095fc:	f5b7 7f00 	cmp.w	r7, #512	; 0x200
 8009600:	f04f 030a 	mov.w	r3, #10
 8009604:	d11b      	bne.n	800963e <i2s_psc_config+0x5a>
 8009606:	0a00      	lsrs	r0, r0, #8
 8009608:	4358      	muls	r0, r3
 800960a:	230a      	movs	r3, #10
 800960c:	fbb0 f4f4 	udiv	r4, r0, r4
 8009610:	3405      	adds	r4, #5
 8009612:	fbb4 f4f3 	udiv	r4, r4, r3
 8009616:	f004 0301 	and.w	r3, r4, #1
 800961a:	0864      	lsrs	r4, r4, #1
 800961c:	1ea2      	subs	r2, r4, #2
 800961e:	2afd      	cmp	r2, #253	; 0xfd
 8009620:	bf92      	itee	ls
 8009622:	021b      	lslls	r3, r3, #8
 8009624:	2300      	movhi	r3, #0
 8009626:	2402      	movhi	r4, #2
 8009628:	431c      	orrs	r4, r3
 800962a:	433c      	orrs	r4, r7
 800962c:	622c      	str	r4, [r5, #32]
 800962e:	69eb      	ldr	r3, [r5, #28]
 8009630:	f023 0307 	bic.w	r3, r3, #7
 8009634:	61eb      	str	r3, [r5, #28]
 8009636:	69eb      	ldr	r3, [r5, #28]
 8009638:	4333      	orrs	r3, r6
 800963a:	61eb      	str	r3, [r5, #28]
 800963c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800963e:	b90e      	cbnz	r6, 8009644 <i2s_psc_config+0x60>
 8009640:	0940      	lsrs	r0, r0, #5
 8009642:	e7e1      	b.n	8009608 <i2s_psc_config+0x24>
 8009644:	0980      	lsrs	r0, r0, #6
 8009646:	e7df      	b.n	8009608 <i2s_psc_config+0x24>

08009648 <i2s_enable>:
 8009648:	69c3      	ldr	r3, [r0, #28]
 800964a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800964e:	61c3      	str	r3, [r0, #28]
 8009650:	4770      	bx	lr

08009652 <i2s_disable>:
 8009652:	69c3      	ldr	r3, [r0, #28]
 8009654:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009658:	61c3      	str	r3, [r0, #28]
 800965a:	4770      	bx	lr

0800965c <spi_dma_enable>:
 800965c:	6843      	ldr	r3, [r0, #4]
 800965e:	b919      	cbnz	r1, 8009668 <spi_dma_enable+0xc>
 8009660:	f043 0302 	orr.w	r3, r3, #2
 8009664:	6043      	str	r3, [r0, #4]
 8009666:	4770      	bx	lr
 8009668:	f043 0301 	orr.w	r3, r3, #1
 800966c:	e7fa      	b.n	8009664 <spi_dma_enable+0x8>
	...

Disassembly of section .rodata:

08009670 <vtable for RDMResponder-0xe4>:
 8009670:	00000003 	andeq	r0, r0, r3
 8009674:	000000aa 	andeq	r0, r0, sl, lsr #1
 8009678:	00000006 	andeq	r0, r0, r6
 800967c:	00000000 	andeq	r0, r0, r0
 8009680:	01ff0000 	mvnseq	r0, r0
 8009684:	00000001 	andeq	r0, r0, r1
 8009688:	00000001 	andeq	r0, r0, r1
 800968c:	00000001 	andeq	r0, r0, r1
 8009690:	00000000 	andeq	r0, r0, r0
 8009694:	18002000 	stmdane	r0, {sp}
 8009698:	00180400 	andseq	r0, r8, r0, lsl #8
 800969c:	00000007 	andeq	r0, r0, r7
	...
 80096a8:	03020100 	movweq	r0, #8448	; 0x2100
 80096ac:	08070604 	stmdaeq	r7, {r2, r9, sl}
 80096b0:	00000009 	andeq	r0, r0, r9
 80096b4:	03020100 	movweq	r0, #8448	; 0x2100
 80096b8:	73696404 	cmnvc	r9, #4, 8	; 0x4000000
 80096bc:	656c6261 	strbvs	r6, [ip, #-609]!	; 0xfffffd9f
 80096c0:	6e650064 	cdpvs	0, 6, cr0, cr5, cr4, {3}
 80096c4:	656c6261 	strbvs	r6, [ip, #-609]!	; 0xfffffd9f
 80096c8:	6f430064 	svcvs	0x00430064
 80096cc:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
 80096d0:	646f4d20 	strbtvs	r4, [pc], #-3360	; 80096d8 <_etext+0x68>
 80096d4:	35310065 	ldrcc	r0, [r1, #-101]!	; 0xffffff9b
 80096d8:	3a35353a 	bcc	8d56bc8 <__exidx_end+0xd4be78>
 80096dc:	41003934 	tstmi	r0, r4, lsr r9
 80096e0:	20207270 	eorcs	r7, r0, r0, ror r2
 80096e4:	30322036 	eorscc	r2, r2, r6, lsr r0
 80096e8:	25003232 	strcs	r3, [r0, #-562]	; 0xfffffdce
 80096ec:	75253a73 	strvc	r3, [r5, #-2675]!	; 0xfffff58d
 80096f0:	75254720 	strvc	r4, [r5, #-1824]!	; 0xfffff8e0
 80096f4:	73255b20 			; <UNDEFINED> instruction: 0x73255b20
 80096f8:	6f43005d 	svcvs	0x0043005d
 80096fc:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
 8009700:	646f6d20 	strbtvs	r6, [pc], #-3360	; 8009708 <_etext+0x98>
 8009704:	4f200065 	svcmi	0x00200065
 8009708:	75707475 	ldrbvc	r7, [r0, #-1141]!	; 0xfffffb8b
 800970c:	73252074 			; <UNDEFINED> instruction: 0x73252074
 8009710:	6554000a 	ldrbvs	r0, [r4, #-10]
 8009714:	70207473 	eorvc	r7, r0, r3, ror r4
 8009718:	65747461 	ldrbvs	r7, [r4, #-1121]!	; 0xfffffb9f
 800971c:	3a206e72 	bcc	88250ec <__exidx_end+0x81a39c>
 8009720:	20732520 	rsbscs	r2, r3, r0, lsr #10
 8009724:	5d75255b 	cfldr64pl	mvdx2, [r5, #-364]!	; 0xfffffe94
 8009728:	4452000a 	ldrbmi	r0, [r2], #-10
 800972c:	6552204d 	ldrbvs	r2, [r2, #-77]	; 0xffffffb3
 8009730:	6e6f7073 	mcrvs	0, 3, r7, cr15, cr3, {3}
 8009734:	20726564 	rsbscs	r6, r2, r4, ror #10
 8009738:	65786950 	ldrbvs	r6, [r8, #-2384]!	; 0xfffff6b0
 800973c:	0031206c 	eorseq	r2, r1, ip, rrx
 8009740:	253a7325 	ldrcs	r7, [sl, #-805]!	; 0xfffffcdb
 8009744:	25472064 	strbcs	r2, [r7, #-100]	; 0xffffff9c
 8009748:	73252064 			; <UNDEFINED> instruction: 0x73252064
 800974c:	3a732500 	bcc	9cd2b54 <__exidx_end+0x1cc7e04>
 8009750:	00007525 	andeq	r7, r0, r5, lsr #10

08009754 <vtable for RDMResponder>:
	...
 800975c:	0800060d 	stmdaeq	r0, {r0, r2, r3, r9, sl}
 8009760:	08000655 	stmdaeq	r0, {r0, r2, r4, r6, r9, sl}
 8009764:	0800059d 	stmdaeq	r0, {r0, r2, r3, r4, r7, r8, sl}
 8009768:	080005ed 	stmdaeq	r0, {r0, r2, r3, r5, r6, r7, r8, sl}

0800976c <vtable for FactoryDefaults>:
	...
 8009774:	08000557 	stmdaeq	r0, {r0, r1, r2, r4, r6, r8, sl}
 8009778:	08000583 	stmdaeq	r0, {r0, r1, r7, r8, sl}
 800977c:	080005d1 	stmdaeq	r0, {r0, r4, r6, r7, r8, sl}

08009780 <vtable for PixelDmxStartStop>:
	...
 8009788:	08000559 	stmdaeq	r0, {r0, r3, r4, r6, r8, sl}
 800978c:	0800058f 	stmdaeq	r0, {r0, r1, r2, r3, r7, r8, sl}
 8009790:	0800055d 	stmdaeq	r0, {r0, r2, r3, r4, r6, r8, sl}
 8009794:	08000569 	stmdaeq	r0, {r0, r3, r5, r6, r8, sl}

08009798 <vtable for Reboot>:
	...
 80097a0:	08000575 	stmdaeq	r0, {r0, r2, r4, r5, r6, r8, sl}
 80097a4:	08000577 	stmdaeq	r0, {r0, r1, r2, r4, r5, r6, r8, sl}
 80097a8:	080005e1 	stmdaeq	r0, {r0, r5, r6, r7, r8, sl}

080097ac <SOFTWARE_VERSION>:
 80097ac:	00302e31 	eorseq	r2, r0, r1, lsr lr
 80097b0:	30322d25 	eorscc	r2, r2, r5, lsr #26
 80097b4:	2d250073 	stccs	0, cr0, [r5, #-460]!	; 0xfffffe34
 80097b8:	25207338 	strcs	r7, [r0, #-824]!	; 0xfffffcc8
 80097bc:	2064322d 	rsbcs	r3, r4, sp, lsr #4
 80097c0:	322d2547 	eorcc	r2, sp, #297795584	; 0x11c00000
 80097c4:	2d252064 	stccs	0, cr2, [r5, #-400]!	; 0xfffffe70
 80097c8:	50007335 	andpl	r7, r0, r5, lsr r3
 80097cc:	72676f72 	rsbvc	r6, r7, #456	; 0x1c8
 80097d0:	656d6d61 	strbvs	r6, [sp, #-3425]!	; 0xfffff29f
 80097d4:	79540064 	ldmdbvc	r4, {r2, r5, r6}^
 80097d8:	47006570 	smlsdxmi	r0, r0, r5, r6
 80097dc:	70756f72 	rsbsvc	r6, r5, r2, ror pc
 80097e0:	20676e69 	rsbcs	r6, r7, r9, ror #28
 80097e4:	6e756f43 	cdpvs	15, 7, cr6, cr5, cr3, {2}
 80097e8:	614d0074 	hvcvs	53252	; 0xd004
 80097ec:	65540070 	ldrbvs	r0, [r4, #-112]	; 0xffffff90
 80097f0:	50207473 	eorpl	r7, r0, r3, ror r4
 80097f4:	65747461 	ldrbvs	r7, [r4, #-1121]!	; 0xfffffb9f
 80097f8:	50006e72 	andpl	r6, r0, r2, ror lr
 80097fc:	72676f72 	rsbvc	r6, r7, #456	; 0x1c8
 8009800:	55006d61 	strpl	r6, [r0, #-3425]	; 0xfffff29f
 8009804:	6665646e 	strbtvs	r6, [r5], -lr, ror #8
 8009808:	64656e69 	strbtvs	r6, [r5], #-3689	; 0xfffff197
	...

0800980d <SOFTWARE_VERSION>:
 800980d:	00302e31 	eorseq	r2, r0, r1, lsr lr
 8009811:	00555043 	subseq	r5, r5, r3, asr #32
 8009815:	 	andeq	r0, r0, r0

08009818 <vtable for CpuTemperature>:
	...
 8009820:	08001a19 	stmdaeq	r0, {r0, r3, r4, r9, fp, ip}
 8009824:	08001a2d 	stmdaeq	r0, {r0, r2, r3, r5, r9, fp, ip}
 8009828:	08001a15 	stmdaeq	r0, {r0, r2, r4, r9, fp, ip}
 800982c:	08001a1b 	stmdaeq	r0, {r0, r1, r3, r4, r9, fp, ip}

08009830 <vtable for RDMSensorBH170>:
	...
 8009838:	08001cbf 	stmdaeq	r0, {r0, r1, r2, r3, r4, r5, r7, sl, fp, ip}
 800983c:	08001cc1 	stmdaeq	r0, {r0, r6, r7, sl, fp, ip}
 8009840:	08001b51 	stmdaeq	r0, {r0, r4, r6, r8, r9, fp, ip}
 8009844:	08001c41 	stmdaeq	r0, {r0, r6, sl, fp, ip}

08009848 <vtable for RDMSensorMCP9808>:
	...
 8009850:	08001cb1 	stmdaeq	r0, {r0, r4, r5, r7, sl, fp, ip}
 8009854:	08001cb3 	stmdaeq	r0, {r0, r1, r4, r5, r7, sl, fp, ip}
 8009858:	08001b57 	stmdaeq	r0, {r0, r1, r2, r4, r6, r8, r9, fp, ip}
 800985c:	08001c2d 	stmdaeq	r0, {r0, r2, r3, r5, sl, fp, ip}

08009860 <vtable for RDMSensorHTU21DHumidity>:
	...
 8009868:	08001ca3 	stmdaeq	r0, {r0, r1, r5, r7, sl, fp, ip}
 800986c:	08001ca5 	stmdaeq	r0, {r0, r2, r5, r7, sl, fp, ip}
 8009870:	08001b5d 	stmdaeq	r0, {r0, r2, r3, r4, r6, r8, r9, fp, ip}
 8009874:	08001c19 	stmdaeq	r0, {r0, r3, r4, sl, fp, ip}

08009878 <vtable for RDMSensorHTU21DTemperature>:
	...
 8009880:	08001c95 	stmdaeq	r0, {r0, r2, r4, r7, sl, fp, ip}
 8009884:	08001c97 	stmdaeq	r0, {r0, r1, r2, r4, r7, sl, fp, ip}
 8009888:	08001b63 	stmdaeq	r0, {r0, r1, r5, r6, r8, r9, fp, ip}
 800988c:	08001c05 	stmdaeq	r0, {r0, r2, sl, fp, ip}

08009890 <vtable for RDMSensorINA219Current>:
	...
 8009898:	08001c87 	stmdaeq	r0, {r0, r1, r2, r7, sl, fp, ip}
 800989c:	08001c89 	stmdaeq	r0, {r0, r3, r7, sl, fp, ip}
 80098a0:	08001b69 	stmdaeq	r0, {r0, r3, r5, r6, r8, r9, fp, ip}
 80098a4:	08001be5 	stmdaeq	r0, {r0, r2, r5, r6, r7, r8, r9, fp, ip}

080098a8 <vtable for RDMSensorINA219Power>:
	...
 80098b0:	08001c79 	stmdaeq	r0, {r0, r3, r4, r5, r6, sl, fp, ip}
 80098b4:	08001c7b 	stmdaeq	r0, {r0, r1, r3, r4, r5, r6, sl, fp, ip}
 80098b8:	08001b6f 	stmdaeq	r0, {r0, r1, r2, r3, r5, r6, r8, r9, fp, ip}
 80098bc:	08001bd1 	stmdaeq	r0, {r0, r4, r6, r7, r8, r9, fp, ip}

080098c0 <vtable for RDMSensorINA219Voltage>:
	...
 80098c8:	08001c6b 	stmdaeq	r0, {r0, r1, r3, r5, r6, sl, fp, ip}
 80098cc:	08001c6d 	stmdaeq	r0, {r0, r2, r3, r5, r6, sl, fp, ip}
 80098d0:	08001b75 	stmdaeq	r0, {r0, r2, r4, r5, r6, r8, r9, fp, ip}
 80098d4:	08001bb1 	stmdaeq	r0, {r0, r4, r5, r7, r8, r9, fp, ip}

080098d8 <vtable for RDMSensorSI7021Humidity>:
	...
 80098e0:	08001c5d 	stmdaeq	r0, {r0, r2, r3, r4, r6, sl, fp, ip}
 80098e4:	08001c5f 	stmdaeq	r0, {r0, r1, r2, r3, r4, r6, sl, fp, ip}
 80098e8:	08001b7b 	stmdaeq	r0, {r0, r1, r3, r4, r5, r6, r8, r9, fp, ip}
 80098ec:	08001b9b 	stmdaeq	r0, {r0, r1, r3, r4, r7, r8, r9, fp, ip}

080098f0 <vtable for RDMSensorSI7021Temperature>:
	...
 80098f8:	08001c4f 	stmdaeq	r0, {r0, r1, r2, r3, r6, sl, fp, ip}
 80098fc:	08001c51 	stmdaeq	r0, {r0, r4, r6, sl, fp, ip}
 8009900:	08001b81 	stmdaeq	r0, {r0, r7, r8, r9, fp, ip}
 8009904:	08001b87 	stmdaeq	r0, {r0, r1, r2, r7, r8, r9, fp, ip}

08009908 <sensor::bh1750::DESCRIPTION>:
 8009908:	69626d41 	stmdbvs	r2!, {r0, r6, r8, sl, fp, sp, lr}^
 800990c:	20746e65 	rsbscs	r6, r4, r5, ror #28
 8009910:	6867694c 	stmdavs	r7!, {r2, r3, r6, r8, fp, sp, lr}^
 8009914:	 	stclvs	0, cr0, [r1, #-464]	; 0xfffffe30

08009916 <sensor::htu21d::temperature::DESCRIPTION>:
 8009916:	69626d41 	stmdbvs	r2!, {r0, r6, r8, sl, fp, sp, lr}^
 800991a:	20746e65 	rsbscs	r6, r4, r5, ror #28
 800991e:	706d6554 	rsbvc	r6, sp, r4, asr r5
 8009922:	74617265 	strbtvc	r7, [r1], #-613	; 0xfffffd9b
 8009926:	00657275 	rsbeq	r7, r5, r5, ror r2

0800992a <sensor::htu21d::humidity::DESCRIPTION>:
 800992a:	616c6552 	cmnvs	ip, r2, asr r5
 800992e:	65766974 	ldrbvs	r6, [r6, #-2420]!	; 0xfffff68c
 8009932:	6d754820 	ldclvs	8, cr4, [r5, #-128]!	; 0xffffff80
 8009936:	74696469 	strbtvc	r6, [r9], #-1129	; 0xfffffb97
 800993a:	 	svcvs	0x00500079

0800993c <sensor::ina219::power::DESCRIPTION>:
 800993c:	65776f50 	ldrbvs	r6, [r7, #-3920]!	; 0xfffff0b0
 8009940:	 	strbvc	r0, [r3, #-114]	; 0xffffff8e

08009942 <sensor::ina219::current::DESCRIPTION>:
 8009942:	72727543 	rsbsvc	r7, r2, #281018368	; 0x10c00000
 8009946:	00746e65 	rsbseq	r6, r4, r5, ror #28

0800994a <sensor::ina219::voltage::DESCRIPTION>:
 800994a:	746c6f56 	strbtvc	r6, [ip], #-3926	; 0xfffff0aa
 800994e:	00656761 	rsbeq	r6, r5, r1, ror #14

08009952 <sensor::si7021::temperature::DESCRIPTION>:
 8009952:	69626d41 	stmdbvs	r2!, {r0, r6, r8, sl, fp, sp, lr}^
 8009956:	20746e65 	rsbscs	r6, r4, r5, ror #28
 800995a:	706d6554 	rsbvc	r6, sp, r4, asr r5
 800995e:	74617265 	strbtvc	r7, [r1], #-613	; 0xfffffd9b
 8009962:	00657275 	rsbeq	r7, r5, r5, ror r2

08009966 <sensor::si7021::humidity::DESCRIPTION>:
 8009966:	616c6552 	cmnvs	ip, r2, asr r5
 800996a:	65766974 	ldrbvs	r6, [r6, #-2420]!	; 0xfffff68c
 800996e:	6d754820 	ldclvs	8, cr4, [r5, #-128]!	; 0xffffff80
 8009972:	74696469 	strbtvc	r6, [r9], #-1129	; 0xfffffb97
 8009976:	 	stclvs	0, cr0, [r1, #-484]	; 0xfffffe1c

08009978 <sensor::mcp9808::DESCRIPTION>:
 8009978:	69626d41 	stmdbvs	r2!, {r0, r6, r8, sl, fp, sp, lr}^
 800997c:	20746e65 	rsbscs	r6, r4, r5, ror #28
 8009980:	706d6554 	rsbvc	r6, sp, r4, asr r5
 8009984:	74617265 	strbtvc	r7, [r1], #-613	; 0xfffffd9b
 8009988:	00657275 	rsbeq	r7, r5, r5, ror r2

0800998c <vtable for RDMSensor>:
	...
 80099a4:	204d4452 	subcs	r4, sp, r2, asr r4
 80099a8:	70736552 	rsbsvc	r6, r3, r2, asr r5
 80099ac:	65646e6f 	strbvs	r6, [r4, #-3695]!	; 0xfffff191
 80099b0:	6f632072 	svcvs	0x00632072
 80099b4:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
 80099b8:	74617275 	strbtvc	r7, [r1], #-629	; 0xfffffd8b
 80099bc:	0a6e6f69 	beq	9ba5768 <__exidx_end+0x1b9aa18>
 80099c0:	72502000 	subsvc	r2, r0, #0
 80099c4:	636f746f 	cmnvs	pc, #1862270976	; 0x6f000000
 80099c8:	56206c6f 	strtpl	r6, [r0], -pc, ror #24
 80099cc:	69737265 	ldmdbvs	r3!, {r0, r2, r5, r6, r9, ip, sp, lr}^
 80099d0:	25206e6f 	strcs	r6, [r0, #-3695]!	; 0xfffff191
 80099d4:	64252e64 	strtvs	r2, [r5], #-3684	; 0xfffff19c
 80099d8:	4420000a 	strtmi	r0, [r0], #-10
 80099dc:	4120584d 			; <UNDEFINED> instruction: 0x4120584d
 80099e0:	65726464 	ldrbvs	r6, [r2, #-1124]!	; 0xfffffb9c
 80099e4:	20207373 	eorcs	r7, r0, r3, ror r3
 80099e8:	20202020 	eorcs	r2, r0, r0, lsr #32
 80099ec:	6425203a 	strtvs	r2, [r5], #-58	; 0xffffffc6
 80099f0:	4420000a 	strtmi	r0, [r0], #-10
 80099f4:	4620584d 	strtmi	r5, [r0], -sp, asr #16
 80099f8:	70746f6f 	rsbsvc	r6, r4, pc, ror #30
 80099fc:	746e6972 	strbtvc	r6, [lr], #-2418	; 0xfffff68e
 8009a00:	20202020 	eorcs	r2, r0, r0, lsr #32
 8009a04:	6425203a 	strtvs	r2, [r5], #-58	; 0xffffffc6
 8009a08:	5020000a 	eorpl	r0, r0, sl
 8009a0c:	6f737265 	svcvs	0x00737265
 8009a10:	696c616e 	stmdbvs	ip!, {r1, r2, r3, r5, r6, r8, sp, lr}^
 8009a14:	25207974 	strcs	r7, [r0, #-2420]!	; 0xfffff68c
 8009a18:	666f2064 	strbtvs	r2, [pc], -r4, rrx
 8009a1c:	20642520 	rsbcs	r2, r4, r0, lsr #10
 8009a20:	2a2e255b 	bcs	8b92f94 <__exidx_end+0xb88244>
 8009a24:	000a5d73 	andeq	r5, sl, r3, ror sp
 8009a28:	62755320 	rsbsvs	r5, r5, #32, 6	; 0x80000000
 8009a2c:	76654420 	strbtvc	r4, [r5], -r0, lsr #8
 8009a30:	73656369 	cmnvc	r5, #-1543503871	; 0xa4000001
 8009a34:	20202020 	eorcs	r2, r0, r0, lsr #32
 8009a38:	203a2020 	eorscs	r2, sl, r0, lsr #32
 8009a3c:	000a6425 	andeq	r6, sl, r5, lsr #8
 8009a40:	6e655320 	cdpvs	3, 6, cr5, cr5, cr0, {1}
 8009a44:	73726f73 	cmnvc	r2, #460	; 0x1cc
 8009a48:	20202020 	eorcs	r2, r0, r0, lsr #32
 8009a4c:	20202020 	eorcs	r2, r0, r0, lsr #32
 8009a50:	203a2020 	eorscs	r2, sl, r0, lsr #32
 8009a54:	000a6425 	andeq	r6, sl, r5, lsr #8

08009a58 <DEVICE_LABEL>:
 8009a58:	32334447 	eorscc	r4, r3, #1191182336	; 0x47000000
 8009a5c:	33303346 	teqcc	r0, #402653185	; 0x18000001
 8009a60:	44522052 	ldrbmi	r2, [r2], #-82	; 0xffffffae
 8009a64:	6552204d 	ldrbvs	r2, [r2, #-77]	; 0xffffffb3
 8009a68:	6e6f7073 	mcrvs	0, 3, r7, cr15, cr3, {3}
 8009a6c:	00726564 	rsbseq	r6, r2, r4, ror #10

08009a70 <vtable for RDMDeviceResponder>:
	...
 8009a78:	080033f9 	stmdaeq	r0, {r0, r3, r4, r5, r6, r7, r8, r9, ip, sp}
 8009a7c:	08003419 	stmdaeq	r0, {r0, r3, r4, sl, ip, sp}
 8009a80:	080033f5 	stmdaeq	r0, {r0, r2, r4, r5, r6, r7, r8, r9, ip, sp}
 8009a84:	080033f7 	stmdaeq	r0, {r0, r1, r2, r4, r5, r6, r7, r8, r9, ip, sp}
 8009a88:	32334447 	eorscc	r4, r3, #1191182336	; 0x47000000
 8009a8c:	33303346 	teqcc	r0, #402653185	; 0x18000001
 8009a90:	6d450052 	stclvs	0, cr0, [r5, #-328]	; 0xfffffeb8
 8009a94:	64646562 	strbtvs	r6, [r4], #-1378	; 0xfffffa9e
 8009a98:	00006465 	andeq	r6, r0, r5, ror #8

08009a9c <UID_ALL>:
 8009a9c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 8009aa0:	0000ffff 	strdeq	pc, [r0], -pc	; <UNPREDICTABLE>

08009aa4 <RDMHandler::PID_DEFINITIONS>:
 8009aa4:	00000060 	andeq	r0, r0, r0, rrx
 8009aa8:	0800395d 	stmdaeq	r0, {r0, r2, r3, r4, r6, r8, fp, ip, sp}
	...
 8009ab8:	01010000 	mrseq	r0, (UNDEF: 1)
 8009abc:	00000080 	andeq	r0, r0, r0, lsl #1
 8009ac0:	08003a61 	stmdaeq	r0, {r0, r5, r6, r9, fp, ip, sp}
	...
 8009ad0:	01010100 	mrseq	r0, (UNDEF: 17)
 8009ad4:	00000081 	andeq	r0, r0, r1, lsl #1
 8009ad8:	08003a7d 	stmdaeq	r0, {r0, r2, r3, r4, r5, r6, r9, fp, ip, sp}
	...
 8009ae8:	01010100 	mrseq	r0, (UNDEF: 17)
 8009aec:	00000082 	andeq	r0, r0, r2, lsl #1
 8009af0:	08003a9d 	stmdaeq	r0, {r0, r2, r3, r4, r7, r9, fp, ip, sp}
 8009af4:	00000000 	andeq	r0, r0, r0
 8009af8:	080044a1 	stmdaeq	r0, {r0, r5, r7, sl, lr}
 8009afc:	00000000 	andeq	r0, r0, r0
 8009b00:	01010100 	mrseq	r0, (UNDEF: 17)
 8009b04:	00000090 	muleq	r0, r0, r0
 8009b08:	080039c5 	stmdaeq	r0, {r0, r2, r6, r7, r8, fp, ip, sp}
 8009b0c:	00000000 	andeq	r0, r0, r0
 8009b10:	080043e1 	stmdaeq	r0, {r0, r5, r6, r7, r8, r9, lr}
 8009b14:	00000000 	andeq	r0, r0, r0
 8009b18:	01010100 	mrseq	r0, (UNDEF: 17)
 8009b1c:	00001000 	andeq	r1, r0, r0
 8009b20:	08003afd 	stmdaeq	r0, {r0, r2, r3, r4, r5, r6, r7, r9, fp, ip, sp}
 8009b24:	00000000 	andeq	r0, r0, r0
 8009b28:	08003d7d 	stmdaeq	r0, {r0, r2, r3, r4, r5, r6, r8, sl, fp, ip, sp}
 8009b2c:	00000000 	andeq	r0, r0, r0
 8009b30:	01010000 	mrseq	r0, (UNDEF: 1)
 8009b34:	00001001 	andeq	r1, r0, r1
	...
 8009b40:	08003d35 	stmdaeq	r0, {r0, r2, r4, r5, r8, sl, fp, ip, sp}
 8009b44:	00000000 	andeq	r0, r0, r0
 8009b48:	01010100 	mrseq	r0, (UNDEF: 17)
 8009b4c:	00000050 	andeq	r0, r0, r0, asr r0
 8009b50:	080038f1 	stmdaeq	r0, {r0, r4, r5, r6, r7, fp, ip, sp}
	...
 8009b60:	00010000 	andeq	r0, r1, r0
 8009b64:	00000070 	andeq	r0, r0, r0, ror r0
 8009b68:	08003a45 	stmdaeq	r0, {r0, r2, r6, r9, fp, ip, sp}
	...
 8009b78:	00010100 	andeq	r0, r1, r0, lsl #2
 8009b7c:	000000a0 	andeq	r0, r0, r0, lsr #1
 8009b80:	08003b11 	stmdaeq	r0, {r0, r4, r8, r9, fp, ip, sp}
	...
 8009b90:	00010100 	andeq	r0, r1, r0, lsl #2
 8009b94:	000000b0 	strheq	r0, [r0], -r0	; <UNPREDICTABLE>
 8009b98:	08003b11 	stmdaeq	r0, {r0, r4, r8, r9, fp, ip, sp}
 8009b9c:	00000000 	andeq	r0, r0, r0
 8009ba0:	08003df9 	stmdaeq	r0, {r0, r3, r4, r5, r6, r7, r8, sl, fp, ip, sp}
 8009ba4:	00000000 	andeq	r0, r0, r0
 8009ba8:	00010100 	andeq	r0, r1, r0, lsl #2
 8009bac:	000000c0 	andeq	r0, r0, r0, asr #1
 8009bb0:	08003ad9 	stmdaeq	r0, {r0, r3, r4, r6, r7, r9, fp, ip, sp}
	...
 8009bc0:	00010000 	andeq	r0, r1, r0
 8009bc4:	000000c1 	andeq	r0, r0, r1, asr #1
 8009bc8:	08003e41 	stmdaeq	r0, {r0, r6, r9, sl, fp, ip, sp}
	...
 8009bd8:	00010100 	andeq	r0, r1, r0, lsl #2
 8009bdc:	000000c2 	andeq	r0, r0, r2, asr #1
 8009be0:	08003c81 	stmdaeq	r0, {r0, r7, sl, fp, ip, sp}
	...
 8009bf0:	00010100 	andeq	r0, r1, r0, lsl #2
 8009bf4:	000000e0 	andeq	r0, r0, r0, ror #1
 8009bf8:	08003b31 	stmdaeq	r0, {r0, r4, r5, r8, r9, fp, ip, sp}
 8009bfc:	00000000 	andeq	r0, r0, r0
 8009c00:	08003e61 	stmdaeq	r0, {r0, r5, r6, r9, sl, fp, ip, sp}
 8009c04:	00000000 	andeq	r0, r0, r0
 8009c08:	00010100 	andeq	r0, r1, r0, lsl #2
 8009c0c:	000000e1 	andeq	r0, r0, r1, ror #1
 8009c10:	08003eb5 	stmdaeq	r0, {r0, r2, r4, r5, r7, r9, sl, fp, ip, sp}
	...
 8009c20:	00010101 	andeq	r0, r1, r1, lsl #2
 8009c24:	000000f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
 8009c28:	08003b6d 	stmdaeq	r0, {r0, r2, r3, r5, r6, r8, r9, fp, ip, sp}
 8009c2c:	00000000 	andeq	r0, r0, r0
 8009c30:	08003f39 	stmdaeq	r0, {r0, r3, r4, r5, r8, r9, sl, fp, ip, sp}
 8009c34:	00000000 	andeq	r0, r0, r0
 8009c38:	00010000 	andeq	r0, r1, r0
 8009c3c:	00000120 	andeq	r0, r0, r0, lsr #2
 8009c40:	08003c9d 	stmdaeq	r0, {r0, r2, r3, r4, r7, sl, fp, ip, sp}
	...
 8009c50:	00010100 	andeq	r0, r1, r0, lsl #2
 8009c54:	00000121 	andeq	r0, r0, r1, lsr #2
 8009c58:	08004369 	stmdaeq	r0, {r0, r3, r5, r6, r8, r9, lr}
	...
 8009c68:	00010102 	andeq	r0, r1, r2, lsl #2
 8009c6c:	00000200 	andeq	r0, r0, r0, lsl #4
 8009c70:	08003f89 	stmdaeq	r0, {r0, r3, r7, r8, r9, sl, fp, ip, sp}
	...
 8009c80:	00010101 	andeq	r0, r1, r1, lsl #2
 8009c84:	00000201 	andeq	r0, r0, r1, lsl #4
 8009c88:	08004035 	stmdaeq	r0, {r0, r2, r4, r5, lr}
 8009c8c:	00000000 	andeq	r0, r0, r0
 8009c90:	080040b5 	stmdaeq	r0, {r0, r2, r4, r5, r7, lr}
 8009c94:	00000000 	andeq	r0, r0, r0
 8009c98:	00010101 	andeq	r0, r1, r1, lsl #2
 8009c9c:	00000202 	andeq	r0, r0, r2, lsl #4
	...
 8009ca8:	08004169 	stmdaeq	r0, {r0, r3, r5, r6, r8, lr}
 8009cac:	00000000 	andeq	r0, r0, r0
 8009cb0:	00010100 	andeq	r0, r1, r0, lsl #2
 8009cb4:	00000400 	andeq	r0, r0, r0, lsl #8
 8009cb8:	08003ba9 	stmdaeq	r0, {r0, r3, r5, r7, r8, r9, fp, ip, sp}
 8009cbc:	00000000 	andeq	r0, r0, r0
 8009cc0:	080041b5 	stmdaeq	r0, {r0, r2, r4, r5, r7, r8, lr}
 8009cc4:	00000000 	andeq	r0, r0, r0
 8009cc8:	00010100 	andeq	r0, r1, r0, lsl #2
 8009ccc:	00000500 	andeq	r0, r0, r0, lsl #10
 8009cd0:	08003bd1 	stmdaeq	r0, {r0, r4, r6, r7, r8, r9, fp, ip, sp}
 8009cd4:	00000000 	andeq	r0, r0, r0
 8009cd8:	080041bd 	stmdaeq	r0, {r0, r2, r3, r4, r5, r7, r8, lr}
 8009cdc:	00000000 	andeq	r0, r0, r0
 8009ce0:	00010100 	andeq	r0, r1, r0, lsl #2
 8009ce4:	00000501 	andeq	r0, r0, r1, lsl #10
 8009ce8:	08003bed 	stmdaeq	r0, {r0, r2, r3, r5, r6, r7, r8, r9, fp, ip, sp}
 8009cec:	00000000 	andeq	r0, r0, r0
 8009cf0:	08004209 	stmdaeq	r0, {r0, r3, r9, lr}
 8009cf4:	00000000 	andeq	r0, r0, r0
 8009cf8:	00010100 	andeq	r0, r1, r0, lsl #2
 8009cfc:	00000603 	andeq	r0, r0, r3, lsl #12
 8009d00:	08003c09 	stmdaeq	r0, {r0, r3, sl, fp, ip, sp}
 8009d04:	00000000 	andeq	r0, r0, r0
 8009d08:	08004251 	stmdaeq	r0, {r0, r4, r6, r9, lr}
 8009d0c:	00000000 	andeq	r0, r0, r0
 8009d10:	00010100 	andeq	r0, r1, r0, lsl #2
 8009d14:	00001010 	andeq	r1, r0, r0, lsl r0
 8009d18:	08003c51 	stmdaeq	r0, {r0, r4, r6, sl, fp, ip, sp}
 8009d1c:	00000000 	andeq	r0, r0, r0
 8009d20:	080042b9 	stmdaeq	r0, {r0, r3, r4, r5, r7, r9, lr}
 8009d24:	00000000 	andeq	r0, r0, r0
 8009d28:	00010100 	andeq	r0, r1, r0, lsl #2
 8009d2c:	00001020 	andeq	r1, r0, r0, lsr #32
 8009d30:	08003c5f 	stmdaeq	r0, {r0, r1, r2, r3, r4, r6, sl, fp, ip, sp}
 8009d34:	00000000 	andeq	r0, r0, r0
 8009d38:	080042e7 	stmdaeq	r0, {r0, r1, r2, r5, r6, r7, r9, lr}
 8009d3c:	00000000 	andeq	r0, r0, r0
 8009d40:	00010100 	andeq	r0, r1, r0, lsl #2
 8009d44:	00001021 	andeq	r1, r0, r1, lsr #32
 8009d48:	0800431b 	stmdaeq	r0, {r0, r1, r3, r4, r8, r9, lr}
	...
 8009d58:	00010101 	andeq	r0, r1, r1, lsl #2
 8009d5c:	00001040 	andeq	r1, r0, r0, asr #32
 8009d60:	0800477d 	stmdaeq	r0, {r0, r2, r3, r4, r5, r6, r8, r9, sl, lr}
 8009d64:	00000000 	andeq	r0, r0, r0
 8009d68:	08004791 	stmdaeq	r0, {r0, r4, r7, r8, r9, sl, lr}
 8009d6c:	00000000 	andeq	r0, r0, r0
 8009d70:	00010100 	andeq	r0, r1, r0, lsl #2

08009d74 <RDMHandler::PID_DEFINITIONS_SUB_DEVICES>:
 8009d74:	00000060 	andeq	r0, r0, r0, rrx
 8009d78:	0800395d 	stmdaeq	r0, {r0, r2, r3, r4, r6, r8, fp, ip, sp}
	...
 8009d88:	00010100 	andeq	r0, r1, r0, lsl #2
 8009d8c:	000000c0 	andeq	r0, r0, r0, asr #1
 8009d90:	08003ad9 	stmdaeq	r0, {r0, r3, r4, r6, r7, r9, fp, ip, sp}
	...
 8009da0:	00010100 	andeq	r0, r1, r0, lsl #2
 8009da4:	00001000 	andeq	r1, r0, r0
 8009da8:	08003afd 	stmdaeq	r0, {r0, r2, r3, r4, r5, r6, r7, r9, fp, ip, sp}
 8009dac:	00000000 	andeq	r0, r0, r0
 8009db0:	08003d7d 	stmdaeq	r0, {r0, r2, r3, r4, r5, r6, r8, sl, fp, ip, sp}
 8009db4:	00000000 	andeq	r0, r0, r0
 8009db8:	00010100 	andeq	r0, r1, r0, lsl #2
 8009dbc:	00000050 	andeq	r0, r0, r0, asr r0
 8009dc0:	080038f1 	stmdaeq	r0, {r0, r4, r5, r6, r7, fp, ip, sp}
	...
 8009dd0:	00010100 	andeq	r0, r1, r0, lsl #2
 8009dd4:	00000070 	andeq	r0, r0, r0, ror r0
 8009dd8:	08003a45 	stmdaeq	r0, {r0, r2, r6, r9, fp, ip, sp}
	...
 8009de8:	00010100 	andeq	r0, r1, r0, lsl #2
 8009dec:	000000e0 	andeq	r0, r0, r0, ror #1
 8009df0:	08003b31 	stmdaeq	r0, {r0, r4, r5, r8, r9, fp, ip, sp}
 8009df4:	00000000 	andeq	r0, r0, r0
 8009df8:	08003e61 	stmdaeq	r0, {r0, r5, r6, r9, sl, fp, ip, sp}
 8009dfc:	00000000 	andeq	r0, r0, r0
 8009e00:	00010100 	andeq	r0, r1, r0, lsl #2
 8009e04:	000000e1 	andeq	r0, r0, r1, ror #1
 8009e08:	08003eb5 	stmdaeq	r0, {r0, r2, r4, r5, r7, r9, sl, fp, ip, sp}
	...
 8009e18:	00010101 	andeq	r0, r1, r1, lsl #2
 8009e1c:	000000f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
 8009e20:	08003b6d 	stmdaeq	r0, {r0, r2, r3, r5, r6, r8, r9, fp, ip, sp}
 8009e24:	00000000 	andeq	r0, r0, r0
 8009e28:	08003f39 	stmdaeq	r0, {r0, r3, r4, r5, r8, r9, sl, fp, ip, sp}
 8009e2c:	00000000 	andeq	r0, r0, r0
 8009e30:	00010100 	andeq	r0, r1, r0, lsl #2
 8009e34:	64206f4e 	strtvs	r6, [r0], #-3918	; 0xfffff0b2
 8009e38:	6e696665 	cdpvs	6, 6, cr6, cr9, cr5, {3}
 8009e3c:	6f697469 	svcvs	0x00697469
 8009e40:	6e49006e 	cdpvs	0, 4, cr0, cr9, cr14, {3}
 8009e44:	736e6574 	cmnvc	lr, #116, 10	; 0x1d000000
 8009e48:	00797469 	rsbseq	r7, r9, r9, ror #8
 8009e4c:	65746e49 	ldrbvs	r6, [r4, #-3657]!	; 0xfffff1b7
 8009e50:	7469736e 	strbtvc	r7, [r9], #-878	; 0xfffffc92
 8009e54:	614d2079 	hvcvs	53769	; 0xd209
 8009e58:	72657473 	rsbvc	r7, r5, #1929379840	; 0x73000000
 8009e5c:	6e615000 	cdpvs	0, 6, cr5, cr1, cr0, {0}
 8009e60:	6c695400 	cfstrdvs	mvd5, [r9], #-0
 8009e64:	6f430074 	svcvs	0x00430074
 8009e68:	20726f6c 	rsbscs	r6, r2, ip, ror #30
 8009e6c:	65656857 	strbvs	r6, [r5, #-2135]!	; 0xfffff7a9
 8009e70:	7553006c 	ldrbvc	r0, [r3, #-108]	; 0xffffff94
 8009e74:	61727462 	cmnvs	r2, r2, ror #8
 8009e78:	76697463 	strbtvc	r7, [r9], -r3, ror #8
 8009e7c:	6f432065 	svcvs	0x00432065
 8009e80:	20726f6c 	rsbscs	r6, r2, ip, ror #30
 8009e84:	6578694d 	ldrbvs	r6, [r8, #-2381]!	; 0xfffff6b3
 8009e88:	80e22072 	rschi	r2, r2, r2, ror r0
 8009e8c:	79432093 	stmdbvc	r3, {r0, r1, r4, r7, sp}^
 8009e90:	422f6e61 	eormi	r6, pc, #1552	; 0x610
 8009e94:	0065756c 	rsbeq	r7, r5, ip, ror #10
 8009e98:	74627553 	strbtvc	r7, [r2], #-1363	; 0xfffffaad
 8009e9c:	74636172 	strbtvc	r6, [r3], #-370	; 0xfffffe8e
 8009ea0:	20657669 	rsbcs	r7, r5, r9, ror #12
 8009ea4:	6f6c6f43 	svcvs	0x006c6f43
 8009ea8:	694d2072 	stmdbvs	sp, {r1, r4, r5, r6, sp}^
 8009eac:	20726578 	rsbscs	r6, r2, r8, ror r5
 8009eb0:	209380e2 	addscs	r8, r3, r2, ror #1
 8009eb4:	6c6c6559 	cfstr64vs	mvdx6, [ip], #-356	; 0xfffffe9c
 8009eb8:	412f776f 			; <UNDEFINED> instruction: 0x412f776f
 8009ebc:	7265626d 	rsbvc	r6, r5, #-805306362	; 0xd0000006
 8009ec0:	62755300 	rsbsvs	r5, r5, #0, 6
 8009ec4:	63617274 	cmnvs	r1, #116, 4	; 0x40000007
 8009ec8:	65766974 	ldrbvs	r6, [r6, #-2420]!	; 0xfffff68c
 8009ecc:	6c6f4320 	stclvs	3, cr4, [pc], #-128	; 8009e54 <RDMHandler::PID_DEFINITIONS_SUB_DEVICES+0xe0>
 8009ed0:	4d20726f 	sfmmi	f7, 4, [r0, #-444]!	; 0xfffffe44
 8009ed4:	72657869 	rsbvc	r7, r5, #6881280	; 0x690000
 8009ed8:	4d202d20 	stcmi	13, cr2, [r0, #-128]!	; 0xffffff80
 8009edc:	6e656761 	cdpvs	7, 6, cr6, cr5, cr1, {3}
 8009ee0:	41006174 	tstmi	r0, r4, ror r1
 8009ee4:	74696464 	strbtvc	r6, [r9], #-1124	; 0xfffffb9c
 8009ee8:	20657669 	rsbcs	r7, r5, r9, ror #12
 8009eec:	6f6c6f43 	svcvs	0x006c6f43
 8009ef0:	694d2072 	stmdbvs	sp, {r1, r4, r5, r6, sp}^
 8009ef4:	20726578 	rsbscs	r6, r2, r8, ror r5
 8009ef8:	6552202d 	ldrbvs	r2, [r2, #-45]	; 0xffffffd3
 8009efc:	64410064 	strbvs	r0, [r1], #-100	; 0xffffff9c
 8009f00:	69746964 	ldmdbvs	r4!, {r2, r5, r6, r8, fp, sp, lr}^
 8009f04:	43206576 			; <UNDEFINED> instruction: 0x43206576
 8009f08:	726f6c6f 	rsbvc	r6, pc, #28416	; 0x6f00
 8009f0c:	78694d20 	stmdavc	r9!, {r5, r8, sl, fp, lr}^
 8009f10:	2d207265 	sfmcs	f7, 4, [r0, #-404]!	; 0xfffffe6c
 8009f14:	65724720 	ldrbvs	r4, [r2, #-1824]!	; 0xfffff8e0
 8009f18:	41006e65 	tstmi	r0, r5, ror #28
 8009f1c:	74696464 	strbtvc	r6, [r9], #-1124	; 0xfffffb9c
 8009f20:	20657669 	rsbcs	r7, r5, r9, ror #12
 8009f24:	6f6c6f43 	svcvs	0x006c6f43
 8009f28:	694d2072 	stmdbvs	sp, {r1, r4, r5, r6, sp}^
 8009f2c:	20726578 	rsbscs	r6, r2, r8, ror r5
 8009f30:	6c42202d 	mcrrvs	0, 2, r2, r2, cr13
 8009f34:	43006575 	movwmi	r6, #1397	; 0x575
 8009f38:	726f6c6f 	rsbvc	r6, pc, #28416	; 0x6f00
 8009f3c:	6d655420 	cfstrdvs	mvd5, [r5, #-128]!	; 0xffffff80
 8009f40:	61726570 	cmnvs	r2, r0, ror r5
 8009f44:	65727574 	ldrbvs	r7, [r2, #-1396]!	; 0xfffffa8c
 8009f48:	726f4320 	rsbvc	r4, pc, #32, 6	; 0x80000000
 8009f4c:	74636572 	strbtvc	r6, [r3], #-1394	; 0xfffffa8e
 8009f50:	006e6f69 	rsbeq	r6, lr, r9, ror #30
 8009f54:	69646441 	stmdbvs	r4!, {r0, r6, sl, sp, lr}^
 8009f58:	65766974 	ldrbvs	r6, [r6, #-2420]!	; 0xfffff68c
 8009f5c:	6c6f4320 	stclvs	3, cr4, [pc], #-128	; 8009ee4 <RDMHandler::PID_DEFINITIONS_SUB_DEVICES+0x170>
 8009f60:	4d20726f 	sfmmi	f7, 4, [r0, #-444]!	; 0xfffffe44
 8009f64:	72657869 	rsbvc	r7, r5, #6881280	; 0x690000
 8009f68:	41202d20 			; <UNDEFINED> instruction: 0x41202d20
 8009f6c:	7265626d 	rsbvc	r6, r5, #-805306362	; 0xd0000006
 8009f70:	64644100 	strbtvs	r4, [r4], #-256	; 0xffffff00
 8009f74:	76697469 	strbtvc	r7, [r9], -r9, ror #8
 8009f78:	6f432065 	svcvs	0x00432065
 8009f7c:	20726f6c 	rsbscs	r6, r2, ip, ror #30
 8009f80:	6578694d 	ldrbvs	r6, [r8, #-2381]!	; 0xfffff6b3
 8009f84:	202d2072 	eorcs	r2, sp, r2, ror r0
 8009f88:	74696857 	strbtvc	r6, [r9], #-2135	; 0xfffff7a9
 8009f8c:	64410065 	strbvs	r0, [r1], #-101	; 0xffffff9b
 8009f90:	69746964 	ldmdbvs	r4!, {r2, r5, r6, r8, fp, sp, lr}^
 8009f94:	43206576 			; <UNDEFINED> instruction: 0x43206576
 8009f98:	726f6c6f 	rsbvc	r6, pc, #28416	; 0x6f00
 8009f9c:	78694d20 	stmdavc	r9!, {r5, r8, sl, fp, lr}^
 8009fa0:	2d207265 	sfmcs	f7, 4, [r0, #-404]!	; 0xfffffe6c
 8009fa4:	72615720 	rsbvc	r5, r1, #32, 14	; 0x800000
 8009fa8:	6857206d 	ldmdavs	r7, {r0, r2, r3, r5, r6, sp}^
 8009fac:	00657469 	rsbeq	r7, r5, r9, ror #8
 8009fb0:	69646441 	stmdbvs	r4!, {r0, r6, sl, sp, lr}^
 8009fb4:	65766974 	ldrbvs	r6, [r6, #-2420]!	; 0xfffff68c
 8009fb8:	6c6f4320 	stclvs	3, cr4, [pc], #-128	; 8009f40 <RDMHandler::PID_DEFINITIONS_SUB_DEVICES+0x1cc>
 8009fbc:	4d20726f 	sfmmi	f7, 4, [r0, #-444]!	; 0xfffffe44
 8009fc0:	72657869 	rsbvc	r7, r5, #6881280	; 0x690000
 8009fc4:	43202d20 			; <UNDEFINED> instruction: 0x43202d20
 8009fc8:	206c6f6f 	rsbcs	r6, ip, pc, ror #30
 8009fcc:	74696857 	strbtvc	r6, [r9], #-2135	; 0xfffff7a9
 8009fd0:	75530065 	ldrbvc	r0, [r3, #-101]	; 0xffffff9b
 8009fd4:	61727462 	cmnvs	r2, r2, ror #8
 8009fd8:	76697463 	strbtvc	r7, [r9], -r3, ror #8
 8009fdc:	6f432065 	svcvs	0x00432065
 8009fe0:	20726f6c 	rsbscs	r6, r2, ip, ror #30
 8009fe4:	6578694d 	ldrbvs	r6, [r8, #-2381]!	; 0xfffff6b3
 8009fe8:	202d2072 	eorcs	r2, sp, r2, ror r0
 8009fec:	48005655 	stmdami	r0, {r0, r2, r4, r6, r9, sl, ip, lr}
 8009ff0:	53006575 	movwpl	r6, #1397	; 0x575
 8009ff4:	72757461 	rsbsvc	r7, r5, #1627389952	; 0x61000000
 8009ff8:	6f697461 	svcvs	0x00697461
 8009ffc:	7453006e 	ldrbvc	r0, [r3], #-110	; 0xffffff92
 800a000:	63697461 	cmnvs	r9, #1627389952	; 0x61000000
 800a004:	626f6720 	rsbvs	r6, pc, #32, 14	; 0x800000
 800a008:	6877206f 	ldmdavs	r7!, {r0, r1, r2, r3, r5, r6, sp}^
 800a00c:	006c6565 	rsbeq	r6, ip, r5, ror #10
 800a010:	61746f52 	cmnvs	r4, r2, asr pc
 800a014:	676e6974 			; <UNDEFINED> instruction: 0x676e6974
 800a018:	626f6720 	rsbvs	r6, pc, #32, 14	; 0x800000
 800a01c:	6877206f 	ldmdavs	r7!, {r0, r1, r2, r3, r5, r6, sp}^
 800a020:	006c6565 	rsbeq	r6, ip, r5, ror #10
 800a024:	73697250 	cmnvc	r9, #80, 4
 800a028:	6877206d 	ldmdavs	r7!, {r0, r2, r3, r5, r6, sp}^
 800a02c:	006c6565 	rsbeq	r6, ip, r5, ror #10
 800a030:	65666645 	strbvs	r6, [r6, #-1605]!	; 0xfffff9bb
 800a034:	20737463 	rsbscs	r7, r3, r3, ror #8
 800a038:	65656877 	strbvs	r6, [r5, #-2167]!	; 0xfffff789
 800a03c:	6542006c 	strbvs	r0, [r2, #-108]	; 0xffffff94
 800a040:	73206d61 			; <UNDEFINED> instruction: 0x73206d61
 800a044:	20657a69 	rsbcs	r7, r5, r9, ror #20
 800a048:	73697269 	cmnvc	r9, #-1879048186	; 0x90000006
 800a04c:	67644500 	strbvs	r4, [r4, -r0, lsl #10]!
 800a050:	654c2f65 	strbvs	r2, [ip, #-3941]	; 0xfffff09b
 800a054:	6620736e 	strtvs	r7, [r0], -lr, ror #6
 800a058:	7375636f 	cmnvc	r5, #-1140850687	; 0xbc000001
 800a05c:	6f724600 	svcvs	0x00724600
 800a060:	442f7473 	strtmi	r7, [pc], #-1139	; 800a068 <RDMHandler::PID_DEFINITIONS_SUB_DEVICES+0x2f4>
 800a064:	75666669 	strbvc	r6, [r6, #-1641]!	; 0xfffff997
 800a068:	6e6f6973 			; <UNDEFINED> instruction: 0x6e6f6973
 800a06c:	72745300 	rsbsvc	r5, r4, #0, 6
 800a070:	2f65626f 	svccs	0x0065626f
 800a074:	74756853 	ldrbtvc	r6, [r5], #-2131	; 0xfffff7ad
 800a078:	00726574 	rsbseq	r6, r2, r4, ror r5
 800a07c:	6d6f6f5a 	stclvs	15, cr6, [pc, #-360]!	; 8009f1c <RDMHandler::PID_DEFINITIONS_SUB_DEVICES+0x1a8>
 800a080:	6e656c20 	cdpvs	12, 6, cr6, cr5, cr0, {1}
 800a084:	72460073 	subvc	r0, r6, #115	; 0x73
 800a088:	6e696d61 	cdpvs	13, 6, cr6, cr9, cr1, {3}
 800a08c:	68732067 	ldmdavs	r3!, {r0, r1, r2, r5, r6, sp}^
 800a090:	65747475 	ldrbvs	r7, [r4, #-1141]!	; 0xfffffb8b
 800a094:	72460072 	subvc	r0, r6, #114	; 0x72
 800a098:	6e696d61 	cdpvs	13, 6, cr6, cr9, cr1, {3}
 800a09c:	68732067 	ldmdavs	r3!, {r0, r1, r2, r5, r6, sp}^
 800a0a0:	65747475 	ldrbvs	r7, [r4, #-1141]!	; 0xfffffb8b
 800a0a4:	6f722072 	svcvs	0x00722072
 800a0a8:	69746174 	ldmdbvs	r4!, {r2, r4, r5, r6, r8, sp, lr}^
 800a0ac:	44006e6f 	strmi	r6, [r0], #-3695	; 0xfffff191
 800a0b0:	6573756f 	ldrbvs	r7, [r3, #-1391]!	; 0xfffffa91
 800a0b4:	61420072 	hvcvs	8194	; 0x2002
 800a0b8:	44206e72 	strtmi	r6, [r0], #-3698	; 0xfffff18e
 800a0bc:	00726f6f 	rsbseq	r6, r2, pc, ror #30
 800a0c0:	706d614c 	rsbvc	r6, sp, ip, asr #2
 800a0c4:	6e6f6320 	cdpvs	3, 6, cr6, cr15, cr0, {1}
 800a0c8:	6c6f7274 	sfmvs	f7, 2, [pc], #-464	; 8009f00 <RDMHandler::PID_DEFINITIONS_SUB_DEVICES+0x18c>
 800a0cc:	6e756620 	cdpvs	6, 7, cr6, cr5, cr0, {1}
 800a0d0:	6f697463 	svcvs	0x00697463
 800a0d4:	4600736e 	strmi	r7, [r0], -lr, ror #6
 800a0d8:	75747869 	ldrbvc	r7, [r4, #-2153]!	; 0xfffff797
 800a0dc:	63206572 			; <UNDEFINED> instruction: 0x63206572
 800a0e0:	72746e6f 	rsbsvc	r6, r4, #1776	; 0x6f0
 800a0e4:	63206c6f 			; <UNDEFINED> instruction: 0x63206c6f
 800a0e8:	6e6e6168 	powvsez	f6, f6, #0.0
 800a0ec:	4d006c65 	stcmi	12, cr6, [r0, #-404]	; 0xfffffe6c
 800a0f0:	6f726361 	svcvs	0x00726361
 800a0f4:	6e6f6320 	cdpvs	3, 6, cr6, cr15, cr0, {1}
 800a0f8:	6c6f7274 	sfmvs	f7, 2, [pc], #-464	; 8009f30 <RDMHandler::PID_DEFINITIONS_SUB_DEVICES+0x1bc>
 800a0fc:	6c655200 	sfmvs	f5, 2, [r5], #-0
 800a100:	6f207961 	svcvs	0x00207961
 800a104:	6f702072 	svcvs	0x00702072
 800a108:	20726577 	rsbscs	r6, r2, r7, ror r5
 800a10c:	746e6f63 	strbtvc	r6, [lr], #-3939	; 0xfffff09d
 800a110:	006c6f72 	rsbeq	r6, ip, r2, ror pc
 800a114:	206e6146 	rsbcs	r6, lr, r6, asr #2
 800a118:	746e6f63 	strbtvc	r6, [lr], #-3939	; 0xfffff09d
 800a11c:	006c6f72 	rsbeq	r6, ip, r2, ror pc
 800a120:	74616548 	strbtvc	r6, [r1], #-1352	; 0xfffffab8
 800a124:	63207265 			; <UNDEFINED> instruction: 0x63207265
 800a128:	72746e6f 	rsbsvc	r6, r4, #1776	; 0x6f0
 800a12c:	46006c6f 	strmi	r6, [r0], -pc, ror #24
 800a130:	746e756f 	strbtvc	r7, [lr], #-1391	; 0xfffffa91
 800a134:	206e6961 	rsbcs	r6, lr, r1, ror #18
 800a138:	65746177 	ldrbvs	r6, [r4, #-375]!	; 0xfffffe89
 800a13c:	75702072 	ldrbvc	r2, [r0, #-114]!	; 0xffffff8e
 800a140:	6320706d 			; <UNDEFINED> instruction: 0x6320706d
 800a144:	72746e6f 	rsbsvc	r6, r4, #1776	; 0x6f0
 800a148:	00206c6f 	eoreq	r6, r0, pc, ror #24
 800a14c:	746f6c53 	strbtvc	r6, [pc], #-3155	; 800a154 <RDMHandler::PID_DEFINITIONS_SUB_DEVICES+0x3e0>
 800a150:	72696420 	rsbvc	r6, r9, #32, 8	; 0x20000000
 800a154:	6c746365 	ldclvs	3, cr6, [r4], #-404	; 0xfffffe6c
 800a158:	6f632079 	svcvs	0x00632079
 800a15c:	6f72746e 	svcvs	0x0072746e
 800a160:	7020736c 	eorvc	r7, r0, ip, ror #6
 800a164:	6d617261 	sfmvs	f7, 2, [r1, #-388]!	; 0xfffffe7c
 800a168:	72657465 	rsbvc	r7, r5, #1694498816	; 0x65000000
 800a16c:	65722820 	ldrbvs	r2, [r2, #-2080]!	; 0xfffff7e0
 800a170:	73657270 	cmnvc	r5, #112, 4
 800a174:	73746e65 	cmnvc	r4, #1616	; 0x650
 800a178:	616f4320 	cmnvs	pc, r0, lsr #6
 800a17c:	20657372 	rsbcs	r7, r5, r2, ror r3
 800a180:	20726f66 	rsbscs	r6, r2, r6, ror #30
 800a184:	622d3631 	eorvs	r3, sp, #51380224	; 0x3100000
 800a188:	70207469 	eorvc	r7, r0, r9, ror #8
 800a18c:	6d617261 	sfmvs	f7, 2, [r1, #-388]!	; 0xfffffe7c
 800a190:	72657465 	rsbvc	r7, r5, #1694498816	; 0x65000000
 800a194:	46002973 			; <UNDEFINED> instruction: 0x46002973
 800a198:	2c656e69 	stclcs	14, cr6, [r5], #-420	; 0xfffffe5c
 800a19c:	726f6620 	rsbvc	r6, pc, #32, 12	; 0x2000000
 800a1a0:	2d363120 	ldfcss	f3, [r6, #-128]!	; 0xffffff80
 800a1a4:	20746962 	rsbscs	r6, r4, r2, ror #18
 800a1a8:	61726170 	cmnvs	r2, r0, ror r1
 800a1ac:	6574656d 	ldrbvs	r6, [r4, #-1389]!	; 0xfffffa93
 800a1b0:	53007372 	movwpl	r7, #882	; 0x372
 800a1b4:	20746f6c 	rsbscs	r6, r4, ip, ror #30
 800a1b8:	73746573 	cmnvc	r4, #482344960	; 0x1cc00000
 800a1bc:	6d697420 	cfstrdvs	mvd7, [r9, #-128]!	; 0xffffff80
 800a1c0:	20676e69 	rsbcs	r6, r7, r9, ror #28
 800a1c4:	756c6176 	strbvc	r6, [ip, #-374]!	; 0xfffffe8a
 800a1c8:	6f662065 	svcvs	0x00662065
 800a1cc:	73612072 	cmnvc	r1, #114	; 0x72
 800a1d0:	69636f73 	stmdbvs	r3!, {r0, r1, r4, r5, r6, r8, r9, sl, fp, sp, lr}^
 800a1d4:	64657461 	strbtvs	r7, [r5], #-1121	; 0xfffffb9f
 800a1d8:	72617020 	rsbvc	r7, r1, #32
 800a1dc:	74656d61 	strbtvc	r6, [r5], #-3425	; 0xfffff29f
 800a1e0:	53007265 	movwpl	r7, #613	; 0x265
 800a1e4:	20746f6c 	rsbscs	r6, r4, ip, ror #30
 800a1e8:	73746573 	cmnvc	r4, #482344960	; 0x1cc00000
 800a1ec:	65707320 	ldrbvs	r7, [r0, #-800]!	; 0xfffffce0
 800a1f0:	762f6465 	strtvc	r6, [pc], -r5, ror #8
 800a1f4:	636f6c65 	cmnvs	pc, #25856	; 0x6500
 800a1f8:	20797469 	rsbscs	r7, r9, r9, ror #8
 800a1fc:	20726f66 	rsbscs	r6, r2, r6, ror #30
 800a200:	6f737361 	svcvs	0x00737361
 800a204:	74616963 	strbtvc	r6, [r1], #-2403	; 0xfffff69d
 800a208:	70206465 	eorvc	r6, r0, r5, ror #8
 800a20c:	6d617261 	sfmvs	f7, 2, [r1, #-388]!	; 0xfffffe7c
 800a210:	72657465 	rsbvc	r7, r5, #1694498816	; 0x65000000
 800a214:	6f6c5300 	svcvs	0x006c5300
 800a218:	72702074 	rsbsvc	r2, r0, #116	; 0x74
 800a21c:	6469766f 	strbtvs	r7, [r9], #-1647	; 0xfffff991
 800a220:	63207365 			; <UNDEFINED> instruction: 0x63207365
 800a224:	72746e6f 	rsbsvc	r6, r4, #1776	; 0x6f0
 800a228:	6d2f6c6f 	stcvs	12, cr6, [pc, #-444]!	; 800a074 <RDMHandler::PID_DEFINITIONS_SUB_DEVICES+0x300>
 800a22c:	2065646f 	rsbcs	r6, r5, pc, ror #8
 800a230:	6f666e69 	svcvs	0x00666e69
 800a234:	726f6620 	rsbvc	r6, pc, #32, 12	; 0x2000000
 800a238:	72617020 	rsbvc	r7, r1, #32
 800a23c:	74656d61 	strbtvc	r6, [r5], #-3425	; 0xfffff29f
 800a240:	53007265 	movwpl	r7, #613	; 0x265
 800a244:	20746f6c 	rsbscs	r6, r4, ip, ror #30
 800a248:	73746573 	cmnvc	r4, #482344960	; 0x1cc00000
 800a24c:	646e6920 	strbtvs	r6, [lr], #-2336	; 0xfffff6e0
 800a250:	70207865 	eorvc	r7, r0, r5, ror #16
 800a254:	7469736f 	strbtvc	r7, [r9], #-879	; 0xfffffc91
 800a258:	206e6f69 	rsbcs	r6, lr, r9, ror #30
 800a25c:	20726f66 	rsbscs	r6, r2, r6, ror #30
 800a260:	6f737361 	svcvs	0x00737361
 800a264:	74616963 	strbtvc	r6, [r1], #-2403	; 0xfffff69d
 800a268:	70206465 	eorvc	r6, r0, r5, ror #8
 800a26c:	6d617261 	sfmvs	f7, 2, [r1, #-388]!	; 0xfffffe7c
 800a270:	72657465 	rsbvc	r7, r5, #1694498816	; 0x65000000
 800a274:	6f6c5300 	svcvs	0x006c5300
 800a278:	65732074 	ldrbvs	r2, [r3, #-116]!	; 0xffffff8c
 800a27c:	72207374 	eorvc	r7, r0, #116, 6	; 0xd0000001
 800a280:	7461746f 	strbtvc	r7, [r1], #-1135	; 0xfffffb91
 800a284:	206e6f69 	rsbcs	r6, lr, r9, ror #30
 800a288:	65657073 	strbvs	r7, [r5, #-115]!	; 0xffffff8d
 800a28c:	6f662064 	svcvs	0x00662064
 800a290:	73612072 	cmnvc	r1, #114	; 0x72
 800a294:	69636f73 	stmdbvs	r3!, {r0, r1, r4, r5, r6, r8, r9, sl, fp, sp, lr}^
 800a298:	64657461 	strbtvs	r7, [r5], #-1121	; 0xfffffb9f
 800a29c:	72617020 	rsbvc	r7, r1, #32
 800a2a0:	74656d61 	strbtvc	r6, [r5], #-3425	; 0xfffff29f
 800a2a4:	43007265 	movwmi	r7, #613	; 0x265
 800a2a8:	69626d6f 	stmdbvs	r2!, {r0, r1, r2, r3, r5, r6, r8, sl, fp, sp, lr}^
 800a2ac:	2064656e 	rsbcs	r6, r4, lr, ror #10
 800a2b0:	65646e69 	strbvs	r6, [r4, #-3689]!	; 0xfffff197
 800a2b4:	6f722f78 	svcvs	0x00722f78
 800a2b8:	69746174 	ldmdbvs	r4!, {r2, r4, r5, r6, r8, sp, lr}^
 800a2bc:	63206e6f 			; <UNDEFINED> instruction: 0x63206e6f
 800a2c0:	72746e6f 	rsbsvc	r6, r4, #1776	; 0x6f0
 800a2c4:	00006c6f 	andeq	r6, r0, pc, ror #24

0800a2c8 <s_tTableC2>:
 800a2c8:	00000001 	andeq	r0, r0, r1
 800a2cc:	08009e42 	stmdaeq	r0, {r1, r6, r9, sl, fp, ip, pc}
 800a2d0:	00000002 	andeq	r0, r0, r2
 800a2d4:	08009e4c 	stmdaeq	r0, {r2, r3, r6, r9, sl, fp, ip, pc}
 800a2d8:	00000101 	andeq	r0, r0, r1, lsl #2
 800a2dc:	08009e5d 	stmdaeq	r0, {r0, r2, r3, r4, r6, r9, sl, fp, ip, pc}
 800a2e0:	00000102 	andeq	r0, r0, r2, lsl #2
 800a2e4:	08009e61 	stmdaeq	r0, {r0, r5, r6, r9, sl, fp, ip, pc}
 800a2e8:	00000201 	andeq	r0, r0, r1, lsl #4
 800a2ec:	08009e66 	stmdaeq	r0, {r1, r2, r5, r6, r9, sl, fp, ip, pc}
 800a2f0:	00000202 	andeq	r0, r0, r2, lsl #4
 800a2f4:	08009e72 	stmdaeq	r0, {r1, r4, r5, r6, r9, sl, fp, ip, pc}
 800a2f8:	00000203 	andeq	r0, r0, r3, lsl #4
 800a2fc:	08009e98 	stmdaeq	r0, {r3, r4, r7, r9, sl, fp, ip, pc}
 800a300:	00000204 	andeq	r0, r0, r4, lsl #4
 800a304:	08009ec1 	stmdaeq	r0, {r0, r6, r7, r9, sl, fp, ip, pc}
 800a308:	00000205 	andeq	r0, r0, r5, lsl #4
 800a30c:	08009ee3 	stmdaeq	r0, {r0, r1, r5, r6, r7, r9, sl, fp, ip, pc}
 800a310:	00000206 	andeq	r0, r0, r6, lsl #4
 800a314:	08009efe 	stmdaeq	r0, {r1, r2, r3, r4, r5, r6, r7, r9, sl, fp, ip, pc}
 800a318:	00000207 	andeq	r0, r0, r7, lsl #4
 800a31c:	08009f1b 	stmdaeq	r0, {r0, r1, r3, r4, r8, r9, sl, fp, ip, pc}
 800a320:	00000208 	andeq	r0, r0, r8, lsl #4
 800a324:	08009f37 	stmdaeq	r0, {r0, r1, r2, r4, r5, r8, r9, sl, fp, ip, pc}
 800a328:	00000211 	andeq	r0, r0, r1, lsl r2
 800a32c:	08009f54 	stmdaeq	r0, {r2, r4, r6, r8, r9, sl, fp, ip, pc}
 800a330:	00000212 	andeq	r0, r0, r2, lsl r2
 800a334:	08009f71 	stmdaeq	r0, {r0, r4, r5, r6, r8, r9, sl, fp, ip, pc}
 800a338:	00000213 	andeq	r0, r0, r3, lsl r2
 800a33c:	08009f8e 	stmdaeq	r0, {r1, r2, r3, r7, r8, r9, sl, fp, ip, pc}
 800a340:	00000214 	andeq	r0, r0, r4, lsl r2
 800a344:	08009fb0 	stmdaeq	r0, {r4, r5, r7, r8, r9, sl, fp, ip, pc}
 800a348:	00000215 	andeq	r0, r0, r5, lsl r2
 800a34c:	08009fd2 	stmdaeq	r0, {r1, r4, r6, r7, r8, r9, sl, fp, ip, pc}
 800a350:	00000216 	andeq	r0, r0, r6, lsl r2
 800a354:	08009fef 	stmdaeq	r0, {r0, r1, r2, r3, r5, r6, r7, r8, r9, sl, fp, ip, pc}
 800a358:	00000217 	andeq	r0, r0, r7, lsl r2
 800a35c:	08009ff3 	stmdaeq	r0, {r0, r1, r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
 800a360:	00000301 	andeq	r0, r0, r1, lsl #6
 800a364:	08009ffe 	stmdaeq	r0, {r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
 800a368:	00000302 	andeq	r0, r0, r2, lsl #6
 800a36c:	0800a010 	stmdaeq	r0, {r4, sp, pc}
 800a370:	00000303 	andeq	r0, r0, r3, lsl #6
 800a374:	0800a024 	stmdaeq	r0, {r2, r5, sp, pc}
 800a378:	00000304 	andeq	r0, r0, r4, lsl #6
 800a37c:	0800a030 	stmdaeq	r0, {r4, r5, sp, pc}
 800a380:	00000401 	andeq	r0, r0, r1, lsl #8
 800a384:	0800a03e 	stmdaeq	r0, {r1, r2, r3, r4, r5, sp, pc}
 800a388:	00000402 	andeq	r0, r0, r2, lsl #8
 800a38c:	0800a04d 	stmdaeq	r0, {r0, r2, r3, r6, sp, pc}
 800a390:	00000403 	andeq	r0, r0, r3, lsl #8
 800a394:	0800a05d 	stmdaeq	r0, {r0, r2, r3, r4, r6, sp, pc}
 800a398:	00000404 	andeq	r0, r0, r4, lsl #8
 800a39c:	0800a06d 	stmdaeq	r0, {r0, r2, r3, r5, r6, sp, pc}
 800a3a0:	00000405 	andeq	r0, r0, r5, lsl #8
 800a3a4:	0800a07c 	stmdaeq	r0, {r2, r3, r4, r5, r6, sp, pc}
 800a3a8:	00000406 	andeq	r0, r0, r6, lsl #8
 800a3ac:	0800a086 	stmdaeq	r0, {r1, r2, r7, sp, pc}
 800a3b0:	00000407 	andeq	r0, r0, r7, lsl #8
 800a3b4:	0800a096 	stmdaeq	r0, {r1, r2, r4, r7, sp, pc}
 800a3b8:	00000408 	andeq	r0, r0, r8, lsl #8
 800a3bc:	0800a0af 	stmdaeq	r0, {r0, r1, r2, r3, r5, r7, sp, pc}
 800a3c0:	00000409 	andeq	r0, r0, r9, lsl #8
 800a3c4:	0800a0b6 	stmdaeq	r0, {r1, r2, r4, r5, r7, sp, pc}
 800a3c8:	00000501 	andeq	r0, r0, r1, lsl #10
 800a3cc:	0800a0c0 	stmdaeq	r0, {r6, r7, sp, pc}
 800a3d0:	00000502 	andeq	r0, r0, r2, lsl #10
 800a3d4:	0800a0d7 	stmdaeq	r0, {r0, r1, r2, r4, r6, r7, sp, pc}
 800a3d8:	00000504 	andeq	r0, r0, r4, lsl #10
 800a3dc:	0800a0ef 	stmdaeq	r0, {r0, r1, r2, r3, r5, r6, r7, sp, pc}
 800a3e0:	00000505 	andeq	r0, r0, r5, lsl #10
 800a3e4:	0800a0fd 	stmdaeq	r0, {r0, r2, r3, r4, r5, r6, r7, sp, pc}
 800a3e8:	00000506 	andeq	r0, r0, r6, lsl #10
 800a3ec:	0800a114 	stmdaeq	r0, {r2, r4, r8, sp, pc}
 800a3f0:	00000507 	andeq	r0, r0, r7, lsl #10
 800a3f4:	0800a120 	stmdaeq	r0, {r5, r8, sp, pc}
 800a3f8:	00000508 	andeq	r0, r0, r8, lsl #10
 800a3fc:	0800a12f 	stmdaeq	r0, {r0, r1, r2, r3, r5, r8, sp, pc}
 800a400:	0000ffff 	strdeq	pc, [r0], -pc	; <UNPREDICTABLE>
 800a404:	08009e34 	stmdaeq	r0, {r2, r4, r5, r9, sl, fp, ip, pc}
 800a408:	70747468 	rsbsvc	r7, r4, r8, ror #8
 800a40c:	672f2f3a 			; <UNDEFINED> instruction: 0x672f2f3a
 800a410:	2d323364 	ldccs	3, cr3, [r2, #-400]!	; 0xfffffe70
 800a414:	2e786d64 	cdpcs	13, 7, cr6, cr8, cr4, {3}
 800a418:	0067726f 	rsbeq	r7, r7, pc, ror #4
 800a41c:	204d4452 	subcs	r4, sp, r2, asr r4
 800a420:	69766544 	ldmdbvs	r6!, {r2, r6, r8, sl, sp, lr}^
 800a424:	63206563 			; <UNDEFINED> instruction: 0x63206563
 800a428:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
 800a42c:	61727567 	cmnvs	r2, r7, ror #10
 800a430:	6e6f6974 			; <UNDEFINED> instruction: 0x6e6f6974
 800a434:	4d20000a 	stcmi	0, cr0, [r0, #-40]!	; 0xffffffd8
 800a438:	66756e61 	ldrbtvs	r6, [r5], -r1, ror #28
 800a43c:	75746361 	ldrbvc	r6, [r4, #-865]!	; 0xfffffc9f
 800a440:	20726572 	rsbscs	r6, r2, r2, ror r5
 800a444:	656d614e 	strbvs	r6, [sp, #-334]!	; 0xfffffeb2
 800a448:	25203a20 	strcs	r3, [r0, #-2592]!	; 0xfffff5e0
 800a44c:	0a732a2e 	beq	9cd4d0c <__exidx_end+0x1cc9fbc>
 800a450:	614d2000 	mrsvs	r2, (UNDEF: 77)
 800a454:	6166756e 	cmnvs	r6, lr, ror #10
 800a458:	72757463 	rsbsvc	r7, r5, #1660944384	; 0x63000000
 800a45c:	49207265 	stmdbmi	r0!, {r0, r2, r5, r6, r9, ip, sp, lr}
 800a460:	20202044 	eorcs	r2, r0, r4, asr #32
 800a464:	2e25203a 	mcrcs	0, 1, r2, cr5, cr10, {1}
 800a468:	2e255832 	mcrcs	8, 1, r5, cr5, cr2, {1}
 800a46c:	000a5832 	andeq	r5, sl, r2, lsr r8
 800a470:	72655320 	rsbvc	r5, r5, #32, 6	; 0x80000000
 800a474:	206c6169 	rsbcs	r6, ip, r9, ror #2
 800a478:	626d754e 	rsbvs	r7, sp, #327155712	; 0x13800000
 800a47c:	20207265 	eorcs	r7, r0, r5, ror #4
 800a480:	3a202020 	bcc	8812508 <__exidx_end+0x8077b8>
 800a484:	322e2520 	eorcc	r2, lr, #32, 10	; 0x8000000
 800a488:	322e2558 	eorcc	r2, lr, #88, 10	; 0x16000000
 800a48c:	322e2558 	eorcc	r2, lr, #88, 10	; 0x16000000
 800a490:	322e2558 	eorcc	r2, lr, #88, 10	; 0x16000000
 800a494:	20000a58 	andcs	r0, r0, r8, asr sl
 800a498:	746f6f52 	strbtvc	r6, [pc], #-3922	; 800a4a0 <s_tTableC2+0x1d8>
 800a49c:	62616c20 	rsbvs	r6, r1, #32, 24	; 0x2000
 800a4a0:	20206c65 	eorcs	r6, r0, r5, ror #24
 800a4a4:	20202020 	eorcs	r2, r0, r0, lsr #32
 800a4a8:	203a2020 	eorscs	r2, sl, r0, lsr #32
 800a4ac:	732a2e25 			; <UNDEFINED> instruction: 0x732a2e25
 800a4b0:	5020000a 	eorpl	r0, r0, sl
 800a4b4:	75646f72 	strbvc	r6, [r4, #-3954]!	; 0xfffff08e
 800a4b8:	43207463 			; <UNDEFINED> instruction: 0x43207463
 800a4bc:	67657461 	strbvs	r7, [r5, -r1, ror #8]!
 800a4c0:	2079726f 	rsbscs	r7, r9, pc, ror #4
 800a4c4:	25203a20 	strcs	r3, [r0, #-2592]!	; 0xfffff5e0
 800a4c8:	2558322e 	ldrbcs	r3, [r8, #-558]	; 0xfffffdd2
 800a4cc:	0a58322e 	beq	9616d8c <__exidx_end+0x160c03c>
 800a4d0:	72502000 	subsvc	r2, r0, #0
 800a4d4:	6375646f 	cmnvs	r5, #1862270976	; 0x6f000000
 800a4d8:	65442074 	strbvs	r2, [r4, #-116]	; 0xffffff8c
 800a4dc:	6c696174 	stfvse	f6, [r9], #-464	; 0xfffffe30
 800a4e0:	20202020 	eorcs	r2, r0, r0, lsr #32
 800a4e4:	2e25203a 	mcrcs	0, 1, r2, cr5, cr10, {1}
 800a4e8:	2e255832 	mcrcs	8, 1, r5, cr5, cr2, {1}
 800a4ec:	000a5832 	andeq	r5, sl, r2, lsr r8

0800a4f0 <DEVICE_LABEL>:
 800a4f0:	32334447 	eorscc	r4, r3, #1191182336	; 0x47000000
 800a4f4:	33303346 	teqcc	r0, #402653185	; 0x18000001
 800a4f8:	44522052 	ldrbmi	r2, [r2], #-82	; 0xffffffae
 800a4fc:	6544204d 	strbvs	r2, [r4, #-77]	; 0xffffffb3
 800a500:	65636976 	strbvs	r6, [r3, #-2422]!	; 0xfffff68a
	...

0800a505 <RDMConst::MANUFACTURER_ID>:
 800a505:	 	strbtvc	r0, [r8], #-80	; 0xffffffb0

0800a507 <RDMConst::MANUFACTURER_NAME>:
 800a507:	70747468 	rsbsvc	r7, r4, r8, ror #8
 800a50b:	772f2f3a 			; <UNDEFINED> instruction: 0x772f2f3a
 800a50f:	6f2e7777 	svcvs	0x002e7777
 800a513:	676e6172 			; <UNDEFINED> instruction: 0x676e6172
 800a517:	2d697065 	stclcs	0, cr7, [r9, #-404]!	; 0xfffffe6c
 800a51b:	2e786d64 	cdpcs	13, 7, cr6, cr8, cr4, {3}
 800a51f:	0067726f 	rsbeq	r7, r7, pc, ror #4
	...

0800a524 <vtable for PixelDmxParamsRdm>:
	...
 800a52c:	08004aa9 	stmdaeq	r0, {r0, r3, r5, r7, r9, fp, lr}
 800a530:	08004aab 	stmdaeq	r0, {r0, r1, r3, r5, r7, r9, fp, lr}
 800a534:	08004a93 	stmdaeq	r0, {r0, r1, r4, r7, r9, fp, lr}
 800a538:	08004a93 	stmdaeq	r0, {r0, r1, r4, r7, r9, fp, lr}
 800a53c:	08004acd 	stmdaeq	r0, {r0, r2, r3, r6, r7, r9, fp, lr}
 800a540:	08004a83 	stmdaeq	r0, {r0, r1, r7, r9, fp, lr}
 800a544:	08004a85 	stmdaeq	r0, {r0, r2, r7, r9, fp, lr}
 800a548:	08004a87 	stmdaeq	r0, {r0, r1, r2, r7, r9, fp, lr}
 800a54c:	08004a8b 	stmdaeq	r0, {r0, r1, r3, r7, r9, fp, lr}
 800a550:	08004a8f 	stmdaeq	r0, {r0, r1, r2, r3, r7, r9, fp, lr}
 800a554:	08004a95 	stmdaeq	r0, {r0, r2, r4, r7, r9, fp, lr}

0800a558 <vtable for WS28xxDmx>:
	...
 800a560:	08004b55 	stmdaeq	r0, {r0, r2, r4, r6, r8, r9, fp, lr}
 800a564:	08004b75 	stmdaeq	r0, {r0, r2, r4, r5, r6, r8, r9, fp, lr}
 800a568:	08004bad 	stmdaeq	r0, {r0, r2, r3, r5, r7, r8, r9, fp, lr}
 800a56c:	08004bf7 	stmdaeq	r0, {r0, r1, r2, r4, r5, r6, r7, r8, r9, fp, lr}
 800a570:	08004c61 	stmdaeq	r0, {r0, r5, r6, sl, fp, lr}
 800a574:	08004b87 	stmdaeq	r0, {r0, r1, r2, r7, r8, r9, fp, lr}
 800a578:	08004ec1 	stmdaeq	r0, {r0, r6, r7, r9, sl, fp, lr}
 800a57c:	08004bc5 	stmdaeq	r0, {r0, r2, r6, r7, r8, r9, fp, lr}
 800a580:	08004b4d 	stmdaeq	r0, {r0, r2, r3, r6, r8, r9, fp, lr}
 800a584:	08004b51 	stmdaeq	r0, {r0, r4, r6, r8, r9, fp, lr}
 800a588:	08004c1f 	stmdaeq	r0, {r0, r1, r2, r3, r4, sl, fp, lr}
 800a58c:	65786950 	ldrbvs	r6, [r8, #-2384]!	; 0xfffff6b0
 800a590:	4d44206c 	stclmi	0, cr2, [r4, #-432]	; 0xfffffe50
 800a594:	61702058 	cmnvs	r0, r8, asr r0
 800a598:	656d6172 	strbvs	r6, [sp, #-370]!	; 0xfffffe8e
 800a59c:	73726574 	cmnvc	r2, #116, 10	; 0x1d000000
 800a5a0:	4720000a 	strmi	r0, [r0, -sl]!
 800a5a4:	70756f72 	rsbsvc	r6, r5, r2, ror pc
 800a5a8:	20676e69 	rsbcs	r6, r7, r9, ror #28
 800a5ac:	6e756f63 	cdpvs	15, 7, cr6, cr5, cr3, {3}
 800a5b0:	203a2074 	eorscs	r2, sl, r4, ror r0
 800a5b4:	5b206425 	blpl	8823650 <__exidx_end+0x818900>
 800a5b8:	756f7247 	strbvc	r7, [pc, #-583]!	; 800a379 <s_tTableC2+0xb1>
 800a5bc:	3a207370 	bcc	8827384 <__exidx_end+0x81c634>
 800a5c0:	5d642520 	cfstr64pl	mvdx2, [r4, #-128]!	; 0xffffff80
 800a5c4:	 	andeq	r0, r0, #10

0800a5c6 <CSWTCH.6>:
 800a5c6:	02020200 	andeq	r0, r2, #0, 4
 800a5ca:	04020202 	streq	r0, [r2], #-514	; 0xfffffdfe
 800a5ce:	6e550500 	cdpvs	5, 5, cr0, cr5, cr0, {0}
 800a5d2:	776f6e6b 	strbvc	r6, [pc, -fp, ror #28]!
 800a5d6:	 	svcvs	0x004e006e

0800a5d8 <s_patternName>:
 800a5d8:	656e6f4e 	strbvs	r6, [lr, #-3918]!	; 0xfffff0b2
	...
 800a5e4:	61520000 	cmpvs	r2, r0
 800a5e8:	6f626e69 	svcvs	0x00626e69
 800a5ec:	79632077 	stmdbvc	r3!, {r0, r1, r2, r4, r5, r6, sp}^
 800a5f0:	00656c63 	rsbeq	r6, r5, r3, ror #24
 800a5f4:	61656854 	cmnvs	r5, r4, asr r8
 800a5f8:	20726574 	rsbscs	r6, r2, r4, ror r5
 800a5fc:	73616863 	cmnvc	r1, #6488064	; 0x630000
 800a600:	6f430065 	svcvs	0x00430065
 800a604:	72756f6c 	rsbsvc	r6, r5, #108, 30	; 0x1b0
 800a608:	70697720 	rsbvc	r7, r9, r0, lsr #14
 800a60c:	00000065 	andeq	r0, r0, r5, rrx
 800a610:	6e616353 	mcrvs	3, 3, r6, cr1, cr3, {2}
 800a614:	0072656e 	rsbseq	r6, r2, lr, ror #10
 800a618:	00000000 	andeq	r0, r0, r0
 800a61c:	61460000 	mrsvs	r0, (UNDEF: 70)
 800a620:	00006564 	andeq	r6, r0, r4, ror #10
	...

0800a62c <PixelType::MAPS>:
 800a62c:	00424752 	subeq	r4, r2, r2, asr r7
 800a630:	00474252 	subeq	r4, r7, r2, asr r2
 800a634:	00425247 	subeq	r5, r2, r7, asr #4
 800a638:	00524247 	subseq	r4, r2, r7, asr #4
 800a63c:	00475242 	subeq	r5, r7, r2, asr #4
 800a640:	00524742 	subseq	r4, r2, r2, asr #14

0800a644 <PixelType::TYPES>:
 800a644:	38325357 	ldmdacc	r2!, {r0, r1, r2, r4, r6, r8, r9, ip, lr}
 800a648:	00003130 	andeq	r3, r0, r0, lsr r1
 800a64c:	38325357 	ldmdacc	r2!, {r0, r1, r2, r4, r6, r8, r9, ip, lr}
 800a650:	00003131 	andeq	r3, r0, r1, lsr r1
 800a654:	38325357 	ldmdacc	r2!, {r0, r1, r2, r4, r6, r8, r9, ip, lr}
 800a658:	00003231 	andeq	r3, r0, r1, lsr r2
 800a65c:	38325357 	ldmdacc	r2!, {r0, r1, r2, r4, r6, r8, r9, ip, lr}
 800a660:	00423231 	subeq	r3, r2, r1, lsr r2
 800a664:	38325357 	ldmdacc	r2!, {r0, r1, r2, r4, r6, r8, r9, ip, lr}
 800a668:	00003331 	andeq	r3, r0, r1, lsr r3
 800a66c:	38325357 	ldmdacc	r2!, {r0, r1, r2, r4, r6, r8, r9, ip, lr}
 800a670:	00003531 	andeq	r3, r0, r1, lsr r5
 800a674:	38364b53 	ldmdacc	r6!, {r0, r1, r4, r6, r8, r9, fp, lr}
 800a678:	00003231 	andeq	r3, r0, r1, lsr r2
 800a67c:	38364b53 	ldmdacc	r6!, {r0, r1, r4, r6, r8, r9, fp, lr}
 800a680:	00573231 	subseq	r3, r7, r1, lsr r2
 800a684:	31534355 	cmpcc	r3, r5, asr r3
 800a688:	00333039 	eorseq	r3, r3, r9, lsr r0
 800a68c:	32534355 	subscc	r4, r3, #1409286145	; 0x54000001
 800a690:	00333039 	eorseq	r3, r3, r9, lsr r0
 800a694:	38385343 	ldmdacc	r8!, {r0, r1, r6, r8, r9, ip, lr}
 800a698:	00003231 	andeq	r3, r0, r1, lsr r2
 800a69c:	31415041 	cmpcc	r1, r1, asr #32
 800a6a0:	00003230 	andeq	r3, r0, r0, lsr r2
 800a6a4:	38394b53 	ldmdacc	r9!, {r0, r1, r4, r6, r8, r9, fp, lr}
 800a6a8:	00003232 	andeq	r3, r0, r2, lsr r2
 800a6ac:	31383950 	teqcc	r8, r0, asr r9
 800a6b0:	00000033 	andeq	r0, r0, r3, lsr r0
 800a6b4:	65786950 	ldrbvs	r6, [r8, #-2384]!	; 0xfffff6b0
 800a6b8:	6170206c 	cmnvs	r0, ip, rrx
 800a6bc:	656d6172 	strbvs	r6, [sp, #-370]!	; 0xfffffe8e
 800a6c0:	73726574 	cmnvc	r2, #116, 10	; 0x1d000000
 800a6c4:	5420000a 	strtpl	r0, [r0], #-10
 800a6c8:	20657079 	rsbcs	r7, r5, r9, ror r0
 800a6cc:	3a202020 	bcc	8812754 <__exidx_end+0x807a04>
 800a6d0:	20732520 	rsbscs	r2, r3, r0, lsr #10
 800a6d4:	5d64255b 	cfstr64pl	mvdx2, [r4, #-364]!	; 0xfffffe94
 800a6d8:	4320000a 			; <UNDEFINED> instruction: 0x4320000a
 800a6dc:	746e756f 	strbtvc	r7, [lr], #-1391	; 0xfffffa91
 800a6e0:	3a202020 	bcc	8812768 <__exidx_end+0x807a18>
 800a6e4:	0a642520 	beq	9913b6c <__exidx_end+0x1908e1c>
 800a6e8:	614d2000 	mrsvs	r2, (UNDEF: 77)
 800a6ec:	6e697070 	mcrvs	0, 3, r7, cr9, cr0, {3}
 800a6f0:	203a2067 	eorscs	r2, sl, r7, rrx
 800a6f4:	5b207325 	blpl	8827390 <__exidx_end+0x81c640>
 800a6f8:	0a5d6425 	beq	9763794 <__exidx_end+0x1758a44>
 800a6fc:	30542000 	subscc	r2, r4, r0
 800a700:	20202048 	eorcs	r2, r0, r8, asr #32
 800a704:	203a2020 	eorscs	r2, sl, r0, lsr #32
 800a708:	66322e25 	ldrtvs	r2, [r2], -r5, lsr #28
 800a70c:	78305b20 	ldmdavc	r0!, {r5, r8, r9, fp, ip, lr}
 800a710:	0a5d5825 	beq	97607ac <__exidx_end+0x1755a5c>
 800a714:	31542000 	cmpcc	r4, r0
 800a718:	20202048 	eorcs	r2, r0, r8, asr #32
 800a71c:	203a2020 	eorscs	r2, sl, r0, lsr #32
 800a720:	66322e25 	ldrtvs	r2, [r2], -r5, lsr #28
 800a724:	78305b20 	ldmdavc	r0!, {r5, r8, r9, fp, ip, lr}
 800a728:	0a5d5825 	beq	97607c4 <__exidx_end+0x1755a74>
 800a72c:	00000000 	andeq	r0, r0, r0

0800a730 <s_aStorSize>:
 800a730:	00000060 	andeq	r0, r0, r0, rrx
 800a734:	00000090 	muleq	r0, r0, r0
 800a738:	00000020 	andeq	r0, r0, r0, lsr #32
 800a73c:	00000040 	andeq	r0, r0, r0, asr #32
 800a740:	00000060 	andeq	r0, r0, r0, rrx
 800a744:	00000040 	andeq	r0, r0, r0, asr #32
 800a748:	00000020 	andeq	r0, r0, r0, lsr #32
 800a74c:	00000020 	andeq	r0, r0, r0, lsr #32
 800a750:	000001e0 	andeq	r0, r0, r0, ror #3
 800a754:	00000040 	andeq	r0, r0, r0, asr #32
 800a758:	00000020 	andeq	r0, r0, r0, lsr #32
 800a75c:	00000060 	andeq	r0, r0, r0, rrx
 800a760:	00000030 	andeq	r0, r0, r0, lsr r0
 800a764:	00000020 	andeq	r0, r0, r0, lsr #32
 800a768:	000003b0 			; <UNDEFINED> instruction: 0x000003b0
 800a76c:	00000030 	andeq	r0, r0, r0, lsr r0
 800a770:	00000040 	andeq	r0, r0, r0, asr #32
 800a774:	00000020 	andeq	r0, r0, r0, lsr #32
 800a778:	00000060 	andeq	r0, r0, r0, rrx
 800a77c:	00000020 	andeq	r0, r0, r0, lsr #32
 800a780:	00000400 	andeq	r0, r0, r0, lsl #8
 800a784:	00000020 	andeq	r0, r0, r0, lsr #32
 800a788:	00000020 	andeq	r0, r0, r0, lsr #32
 800a78c:	00000040 	andeq	r0, r0, r0, asr #32
 800a790:	00000060 	andeq	r0, r0, r0, rrx
 800a794:	00000020 	andeq	r0, r0, r0, lsr #32
 800a798:	00000020 	andeq	r0, r0, r0, lsr #32
 800a79c:	00000020 	andeq	r0, r0, r0, lsr #32

0800a7a0 <vtable for StoreDisplayUdf>:
	...
 800a7a8:	0800682d 	stmdaeq	r0, {r0, r2, r3, r5, fp, sp, lr}
 800a7ac:	08006875 	stmdaeq	r0, {r0, r2, r4, r5, r6, fp, sp, lr}
 800a7b0:	08006851 	stmdaeq	r0, {r0, r4, r6, fp, sp, lr}
 800a7b4:	08006831 	stmdaeq	r0, {r0, r4, r5, fp, sp, lr}

0800a7b8 <vtable for StoreRDMDevice>:
	...
 800a7c0:	08006895 	stmdaeq	r0, {r0, r2, r4, r7, fp, sp, lr}
 800a7c4:	08006905 	stmdaeq	r0, {r0, r2, r8, fp, sp, lr}
 800a7c8:	0800689d 	stmdaeq	r0, {r0, r2, r3, r4, r7, fp, sp, lr}
 800a7cc:	08006919 	stmdaeq	r0, {r0, r3, r4, r8, fp, sp, lr}
 800a7d0:	080068c1 	stmdaeq	r0, {r0, r6, r7, fp, sp, lr}
 800a7d4:	fffffffc 			; <UNDEFINED> instruction: 0xfffffffc
 800a7d8:	00000000 	andeq	r0, r0, r0
 800a7dc:	08006897 	stmdaeq	r0, {r0, r1, r2, r4, r7, fp, sp, lr}
 800a7e0:	08006911 	stmdaeq	r0, {r0, r4, r8, fp, sp, lr}
 800a7e4:	080068fd 	stmdaeq	r0, {r0, r2, r3, r4, r5, r6, r7, fp, sp, lr}

0800a7e8 <vtable for StoreRDMSensors>:
	...
 800a7f0:	08006951 	stmdaeq	r0, {r0, r4, r6, r8, fp, sp, lr}
 800a7f4:	08006999 	stmdaeq	r0, {r0, r3, r4, r7, r8, fp, sp, lr}
 800a7f8:	08006975 	stmdaeq	r0, {r0, r2, r4, r5, r6, r8, fp, sp, lr}
 800a7fc:	08006955 	stmdaeq	r0, {r0, r2, r4, r6, r8, fp, sp, lr}

0800a800 <vtable for StoreRDMSubDevices>:
	...
 800a808:	080069b9 	stmdaeq	r0, {r0, r3, r4, r5, r7, r8, fp, sp, lr}
 800a80c:	08006a01 	stmdaeq	r0, {r0, r9, fp, sp, lr}
 800a810:	080069dd 	stmdaeq	r0, {r0, r2, r3, r4, r6, r7, r8, fp, sp, lr}
 800a814:	080069bd 	stmdaeq	r0, {r0, r2, r3, r4, r5, r7, r8, fp, sp, lr}

0800a818 <vtable for StoreWS28xxDmx>:
	...
 800a820:	08006a21 	stmdaeq	r0, {r0, r5, r9, fp, sp, lr}
 800a824:	08006b91 	stmdaeq	r0, {r0, r4, r7, r8, r9, fp, sp, lr}
 800a828:	08006a29 	stmdaeq	r0, {r0, r3, r5, r9, fp, sp, lr}
 800a82c:	08006ba5 	stmdaeq	r0, {r0, r2, r5, r7, r8, r9, fp, sp, lr}
 800a830:	08006b5d 	stmdaeq	r0, {r0, r2, r3, r4, r6, r8, r9, fp, sp, lr}
 800a834:	08006b29 	stmdaeq	r0, {r0, r3, r5, r8, r9, fp, sp, lr}
 800a838:	08006af1 	stmdaeq	r0, {r0, r4, r5, r6, r7, r9, fp, sp, lr}
 800a83c:	08006ab9 	stmdaeq	r0, {r0, r3, r4, r5, r7, r9, fp, sp, lr}
 800a840:	08006a81 	stmdaeq	r0, {r0, r7, r9, fp, sp, lr}
 800a844:	08006a4d 	stmdaeq	r0, {r0, r2, r3, r6, r9, fp, sp, lr}
 800a848:	fffffffc 			; <UNDEFINED> instruction: 0xfffffffc
 800a84c:	00000000 	andeq	r0, r0, r0
 800a850:	08006a23 	stmdaeq	r0, {r0, r1, r5, r9, fp, sp, lr}
 800a854:	08006b9d 	stmdaeq	r0, {r0, r2, r3, r4, r7, r8, r9, fp, sp, lr}
 800a858:	08006b89 	stmdaeq	r0, {r0, r3, r7, r8, r9, fp, sp, lr}
 800a85c:	08006b55 	stmdaeq	r0, {r0, r2, r4, r6, r8, r9, fp, sp, lr}
 800a860:	08006b21 	stmdaeq	r0, {r0, r5, r8, r9, fp, sp, lr}
 800a864:	08006ae9 	stmdaeq	r0, {r0, r3, r5, r6, r7, r9, fp, sp, lr}
 800a868:	08006ab1 	stmdaeq	r0, {r0, r4, r5, r7, r9, fp, sp, lr}
 800a86c:	08006a79 	stmdaeq	r0, {r0, r3, r4, r5, r6, r9, fp, sp, lr}
 800a870:	3a434d46 	bcc	90ddd90 <__exidx_end+0x10d3040>
 800a874:	74654420 	strbtvc	r4, [r5], #-1056	; 0xfffffbe0
 800a878:	65746365 	ldrbvs	r6, [r4, #-869]!	; 0xfffffc9b
 800a87c:	73252064 			; <UNDEFINED> instruction: 0x73252064
 800a880:	74697720 	strbtvc	r7, [r9], #-1824	; 0xfffff8e0
 800a884:	6f742068 	svcvs	0x00742068
 800a888:	206c6174 	rsbcs	r6, ip, r4, ror r1
 800a88c:	62206425 	eorvs	r6, r0, #620756992	; 0x25000000
 800a890:	73657479 	cmnvc	r5, #2030043136	; 0x79000000
 800a894:	64255b20 	strtvs	r5, [r5], #-2848	; 0xfffff4e0
 800a898:	5d426b20 	vstrpl	d22, [r2, #-128]	; 0xffffff80
 800a89c:	6f6c000a 	svcvs	0x006c000a
 800a8a0:	72694600 	rsbvc	r4, r9, #0, 12
 800a8a4:	7261776d 	rsbvc	r7, r1, #28573696	; 0x1b40000
 800a8a8:	25562065 	ldrbcs	r2, [r6, #-101]	; 0xffffff9b
 800a8ac:	00732a2e 	rsbseq	r2, r3, lr, lsr #20
 800a8b0:	20584d44 	subscs	r4, r8, r4, asr #26
 800a8b4:	33253a53 			; <UNDEFINED> instruction: 0x33253a53
 800a8b8:	3a462075 	bcc	9192a94 <__exidx_end+0x1187d44>
 800a8bc:	00753325 	rsbseq	r3, r5, r5, lsr #6
 800a8c0:	64206f4e 	strtvs	r6, [r0], #-3918	; 0xfffff0b2
 800a8c4:	6c707369 	ldclvs	3, cr7, [r0], #-420	; 0xfffffe5c
 800a8c8:	66207961 	strtvs	r7, [r0], -r1, ror #18
 800a8cc:	646e756f 	strbtvs	r7, [lr], #-1391	; 0xfffffa91
 800a8d0:	31485300 	mrscc	r5, (UNDEF: 120)
 800a8d4:	00363031 	eorseq	r3, r6, r1, lsr r0
 800a8d8:	31445353 	cmpcc	r4, r3, asr r3
 800a8dc:	00363033 	eorseq	r3, r6, r3, lsr r0
 800a8e0:	28207325 	stmdacs	r0!, {r0, r2, r5, r8, r9, ip, sp, lr}
 800a8e4:	252c6425 	strcs	r6, [ip, #-1061]!	; 0xfffffbdb
 800a8e8:	000a2964 	andeq	r2, sl, r4, ror #18
 800a8ec:	aaeeaa40 	bge	7bb51f4 <__heap_size+0x7bb41f4>
 800a8f0:	000000ee 	andeq	r0, r0, lr, ror #1

0800a8f4 <_OledFont8x6>:
 800a8f4:	00000040 	andeq	r0, r0, r0, asr #32
 800a8f8:	40000000 	andmi	r0, r0, r0
 800a8fc:	005f0000 	subseq	r0, pc, r0
 800a900:	00400000 	subeq	r0, r0, r0
 800a904:	00070007 	andeq	r0, r7, r7
 800a908:	7f144000 	svcvc	0x00144000
 800a90c:	00147f14 	andseq	r7, r4, r4, lsl pc
 800a910:	7f2a2440 	svcvc	0x002a2440
 800a914:	4000122a 	andmi	r1, r0, sl, lsr #4
 800a918:	64081323 	strvs	r1, [r8], #-803	; 0xfffffcdd
 800a91c:	36400062 	strbcc	r0, [r0], -r2, rrx
 800a920:	50205649 	eorpl	r5, r0, r9, asr #12
 800a924:	08004000 	stmdaeq	r0, {lr}
 800a928:	00000307 	andeq	r0, r0, r7, lsl #6
 800a92c:	221c0040 	andscs	r0, ip, #64	; 0x40
 800a930:	40000041 	andmi	r0, r0, r1, asr #32
 800a934:	1c224100 	stfnes	f4, [r2], #-0
 800a938:	2a400000 	bcs	900a940 <__exidx_end+0xfffbf0>
 800a93c:	2a1c7f1c 	bcs	872a5b4 <__exidx_end+0x71f864>
 800a940:	08084000 	stmdaeq	r8, {lr}
 800a944:	0008083e 	andeq	r0, r8, lr, lsr r8
 800a948:	70800040 	addvc	r0, r0, r0, asr #32
 800a94c:	40000030 	andmi	r0, r0, r0, lsr r0
 800a950:	08080808 	stmdaeq	r8, {r3, fp}
 800a954:	00400008 	subeq	r0, r0, r8
 800a958:	00606000 	rsbeq	r6, r0, r0
 800a95c:	10204000 	eorne	r4, r0, r0
 800a960:	00020408 	andeq	r0, r2, r8, lsl #8
 800a964:	49513e40 	ldmdbmi	r1, {r6, r9, sl, fp, ip, sp}^
 800a968:	40003e45 	andmi	r3, r0, r5, asr #28
 800a96c:	407f4200 	rsbsmi	r4, pc, r0, lsl #4
 800a970:	72400000 	subvc	r0, r0, #0
 800a974:	46494949 	strbmi	r4, [r9], -r9, asr #18
 800a978:	41214000 			; <UNDEFINED> instruction: 0x41214000
 800a97c:	00334d49 	eorseq	r4, r3, r9, asr #26
 800a980:	12141840 	andsne	r1, r4, #64, 16	; 0x400000
 800a984:	4000107f 	andmi	r1, r0, pc, ror r0
 800a988:	45454527 	strbmi	r4, [r5, #-1319]	; 0xfffffad9
 800a98c:	3c400039 	mcrrcc	0, 3, r0, r0, cr9
 800a990:	3149494a 	cmpcc	r9, sl, asr #18
 800a994:	21414000 	mrscs	r4, (UNDEF: 65)
 800a998:	00070911 	andeq	r0, r7, r1, lsl r9
 800a99c:	49493640 	stmdbmi	r9, {r6, r9, sl, ip, sp}^
 800a9a0:	40003649 	andmi	r3, r0, r9, asr #12
 800a9a4:	29494946 	stmdbcs	r9, {r1, r2, r6, r8, fp, lr}^
 800a9a8:	0040001e 	subeq	r0, r0, lr, lsl r0
 800a9ac:	00001400 	andeq	r1, r0, r0, lsl #8
 800a9b0:	40004000 	andmi	r4, r0, r0
 800a9b4:	00000034 	andeq	r0, r0, r4, lsr r0
 800a9b8:	14080040 	strne	r0, [r8], #-64	; 0xffffffc0
 800a9bc:	40004122 	andmi	r4, r0, r2, lsr #2
 800a9c0:	14141414 	ldrne	r1, [r4], #-1044	; 0xfffffbec
 800a9c4:	00400014 	subeq	r0, r0, r4, lsl r0
 800a9c8:	08142241 	ldmdaeq	r4, {r0, r6, r9, sp}
 800a9cc:	01024000 	mrseq	r4, (UNDEF: 2)
 800a9d0:	00060959 	andeq	r0, r6, r9, asr r9
 800a9d4:	5d413e40 	stclpl	14, cr3, [r1, #-256]	; 0xffffff00
 800a9d8:	40004e59 	andmi	r4, r0, r9, asr lr
 800a9dc:	1211127c 	andsne	r1, r1, #124, 4	; 0xc0000007
 800a9e0:	7f40007c 	svcvc	0x0040007c
 800a9e4:	36494949 	strbcc	r4, [r9], -r9, asr #18
 800a9e8:	413e4000 	teqmi	lr, r0
 800a9ec:	00224141 	eoreq	r4, r2, r1, asr #2
 800a9f0:	41417f40 	cmpmi	r1, r0, asr #30
 800a9f4:	40003e41 	andmi	r3, r0, r1, asr #28
 800a9f8:	4949497f 	stmdbmi	r9, {r0, r1, r2, r3, r4, r5, r6, r8, fp, lr}^
 800a9fc:	7f400041 	svcvc	0x00400041
 800aa00:	01090909 	tsteq	r9, r9, lsl #18
 800aa04:	413e4000 	teqmi	lr, r0
 800aa08:	00735141 	rsbseq	r5, r3, r1, asr #2
 800aa0c:	08087f40 	stmdaeq	r8, {r6, r8, r9, sl, fp, ip, sp, lr}
 800aa10:	40007f08 	andmi	r7, r0, r8, lsl #30
 800aa14:	417f4100 	cmnmi	pc, r0, lsl #2
 800aa18:	20400000 	subcs	r0, r0, r0
 800aa1c:	013f4140 	teqeq	pc, r0, asr #2
 800aa20:	087f4000 	ldmdaeq	pc!, {lr}^	; <UNPREDICTABLE>
 800aa24:	00412214 	subeq	r2, r1, r4, lsl r2
 800aa28:	40407f40 	submi	r7, r0, r0, asr #30
 800aa2c:	40004040 	andmi	r4, r0, r0, asr #32
 800aa30:	021c027f 	andseq	r0, ip, #-268435449	; 0xf0000007
 800aa34:	7f40007f 	svcvc	0x0040007f
 800aa38:	7f100804 	svcvc	0x00100804
 800aa3c:	413e4000 	teqmi	lr, r0
 800aa40:	003e4141 	eorseq	r4, lr, r1, asr #2
 800aa44:	09097f40 	stmdbeq	r9, {r6, r8, r9, sl, fp, ip, sp, lr}
 800aa48:	40000609 	andmi	r0, r0, r9, lsl #12
 800aa4c:	2151413e 	cmpcs	r1, lr, lsr r1
 800aa50:	7f40005e 	svcvc	0x0040005e
 800aa54:	46291909 	strtmi	r1, [r9], -r9, lsl #18
 800aa58:	49264000 	stmdbmi	r6!, {lr}
 800aa5c:	00324949 	eorseq	r4, r2, r9, asr #18
 800aa60:	7f010340 	svcvc	0x00010340
 800aa64:	40000301 	andmi	r0, r0, r1, lsl #6
 800aa68:	4040403f 	submi	r4, r0, pc, lsr r0
 800aa6c:	1f40003f 	svcne	0x0040003f
 800aa70:	1f204020 	svcne	0x00204020
 800aa74:	403f4000 	eorsmi	r4, pc, r0
 800aa78:	003f4038 	eorseq	r4, pc, r8, lsr r0	; <UNPREDICTABLE>
 800aa7c:	08146340 	ldmdaeq	r4, {r6, r8, r9, sp, lr}
 800aa80:	40006314 	andmi	r6, r0, r4, lsl r3
 800aa84:	04780403 	ldrbteq	r0, [r8], #-1027	; 0xfffffbfd
 800aa88:	61400003 	cmpvs	r0, r3
 800aa8c:	434d4959 	movtmi	r4, #55641	; 0xd959
 800aa90:	7f004000 	svcvc	0x00004000
 800aa94:	00414141 	subeq	r4, r1, r1, asr #2
 800aa98:	08040240 	stmdaeq	r4, {r6, r9}
 800aa9c:	40002010 	andmi	r2, r0, r0, lsl r0
 800aaa0:	41414100 	mrsmi	r4, (UNDEF: 81)
 800aaa4:	0440007f 	strbeq	r0, [r0], #-127	; 0xffffff81
 800aaa8:	04020102 	streq	r0, [r2], #-258	; 0xfffffefe
 800aaac:	40404000 	submi	r4, r0, r0
 800aab0:	00404040 	subeq	r4, r0, r0, asr #32
 800aab4:	07030040 	streq	r0, [r3, -r0, asr #32]
 800aab8:	40000008 	andmi	r0, r0, r8
 800aabc:	78545420 	ldmdavc	r4, {r5, sl, ip, lr}^
 800aac0:	7f400040 	svcvc	0x00400040
 800aac4:	38444428 	stmdacc	r4, {r3, r5, sl, lr}^
 800aac8:	44384000 	ldrtmi	r4, [r8], #-0
 800aacc:	00284444 	eoreq	r4, r8, r4, asr #8
 800aad0:	44443840 	strbmi	r3, [r4], #-2112	; 0xfffff7c0
 800aad4:	40007f28 	andmi	r7, r0, r8, lsr #30
 800aad8:	54545438 	ldrbpl	r5, [r4], #-1080	; 0xfffffbc8
 800aadc:	00400018 	subeq	r0, r0, r8, lsl r0
 800aae0:	02097e08 	andeq	r7, r9, #8, 28	; 0x80
 800aae4:	a4184000 	ldrge	r4, [r8], #-0
 800aae8:	00789ca4 	rsbseq	r9, r8, r4, lsr #25
 800aaec:	04087f40 	streq	r7, [r8], #-3904	; 0xfffff0c0
 800aaf0:	40007804 	andmi	r7, r0, r4, lsl #16
 800aaf4:	407d4400 	rsbsmi	r4, sp, r0, lsl #8
 800aaf8:	20400000 	subcs	r0, r0, r0
 800aafc:	003d4040 	eorseq	r4, sp, r0, asr #32
 800ab00:	107f4000 	rsbsne	r4, pc, r0
 800ab04:	00004428 	andeq	r4, r0, r8, lsr #8
 800ab08:	7f410040 	svcvc	0x00410040
 800ab0c:	40000040 	andmi	r0, r0, r0, asr #32
 800ab10:	0478047c 	ldrbteq	r0, [r8], #-1148	; 0xfffffb84
 800ab14:	7c400078 	mcrrvc	0, 7, r0, r0, cr8
 800ab18:	78040408 	stmdavc	r4, {r3, sl}
 800ab1c:	44384000 	ldrtmi	r4, [r8], #-0
 800ab20:	00384444 	eorseq	r4, r8, r4, asr #8
 800ab24:	2418fc40 	ldrcs	pc, [r8], #-3136	; 0xfffff3c0
 800ab28:	40001824 	andmi	r1, r0, r4, lsr #16
 800ab2c:	18242418 	stmdane	r4!, {r3, r4, sl, sp}
 800ab30:	7c4000fc 	mcrrvc	0, 15, r0, r0, cr12
 800ab34:	08040408 	stmdaeq	r4, {r3, sl}
 800ab38:	54484000 	strbpl	r4, [r8], #-0
 800ab3c:	00245454 	eoreq	r5, r4, r4, asr r4
 800ab40:	3f040440 	svccc	0x00040440
 800ab44:	40002444 	andmi	r2, r0, r4, asr #8
 800ab48:	2040403c 	subcs	r4, r0, ip, lsr r0
 800ab4c:	1c40007c 	mcrrne	0, 7, r0, r0, cr12
 800ab50:	1c204020 	stcne	0, cr4, [r0], #-128	; 0xffffff80
 800ab54:	403c4000 	eorsmi	r4, ip, r0
 800ab58:	003c4030 	eorseq	r4, ip, r0, lsr r0
 800ab5c:	10284440 	eorne	r4, r8, r0, asr #8
 800ab60:	40004428 	andmi	r4, r0, r8, lsr #8
 800ab64:	9090904c 	addsls	r9, r0, ip, asr #32
 800ab68:	4440007c 	strbmi	r0, [r0], #-124	; 0xffffff84
 800ab6c:	444c5464 	strbmi	r5, [ip], #-1124	; 0xfffffb9c
 800ab70:	08004000 	stmdaeq	r0, {lr}
 800ab74:	00004136 	andeq	r4, r0, r6, lsr r1
 800ab78:	77000040 	strvc	r0, [r0, -r0, asr #32]
 800ab7c:	40000000 	andmi	r0, r0, r0
 800ab80:	08364100 	ldmdaeq	r6!, {r8, lr}
 800ab84:	02400000 	subeq	r0, r0, #0
 800ab88:	02040201 	andeq	r0, r4, #268435456	; 0x10000000
 800ab8c:	263c4000 	ldrtcs	r4, [ip], -r0
 800ab90:	003c2623 	eorseq	r2, ip, r3, lsr #12

0800ab94 <oled_128x32_init>:
 800ab94:	a880d5ae 	stmge	r0, {r1, r2, r3, r5, r7, r8, sl, ip, lr, pc}
 800ab98:	4000d31f 	andmi	sp, r0, pc, lsl r3
 800ab9c:	0020148d 	eoreq	r1, r0, sp, lsl #9
 800aba0:	02dac8a1 	sbcseq	ip, sl, #10551296	; 0xa10000
 800aba4:	f1d97f81 			; <UNDEFINED> instruction: 0xf1d97f81
 800aba8:	a6a440db 	ssatge	r4, #5, fp, asr #1

0800abac <oled_128x64_init>:
 800abac:	a880d5ae 	stmge	r0, {r1, r2, r3, r5, r7, r8, sl, ip, lr, pc}
 800abb0:	4000d33f 	andmi	sp, r0, pc, lsr r3
 800abb4:	0020148d 	eoreq	r1, r0, sp, lsl #9
 800abb8:	12dac8a1 	sbcsne	ip, sl, #10551296	; 0xa10000
 800abbc:	f1d97f81 			; <UNDEFINED> instruction: 0xf1d97f81
 800abc0:	a6a440db 	ssatge	r4, #5, fp, asr #1

0800abc4 <vtable for Ssd1306>:
	...
 800abcc:	08007209 	stmdaeq	r0, {r0, r3, r9, ip, sp, lr}
 800abd0:	08007235 	stmdaeq	r0, {r0, r2, r4, r5, r9, ip, sp, lr}
 800abd4:	08007551 	stmdaeq	r0, {r0, r4, r6, r8, sl, ip, sp, lr}
 800abd8:	080074d9 	stmdaeq	r0, {r0, r3, r4, r6, r7, sl, ip, sp, lr}
 800abdc:	080073a1 	stmdaeq	r0, {r0, r5, r7, r8, r9, ip, sp, lr}
 800abe0:	08007255 	stmdaeq	r0, {r0, r2, r4, r6, r9, ip, sp, lr}
 800abe4:	08007281 	stmdaeq	r0, {r0, r7, r9, ip, sp, lr}
 800abe8:	08007375 	stmdaeq	r0, {r0, r2, r4, r5, r6, r8, r9, ip, sp, lr}
 800abec:	0800732d 	stmdaeq	r0, {r0, r2, r3, r5, r8, r9, ip, sp, lr}
 800abf0:	0800720b 	stmdaeq	r0, {r0, r1, r3, r9, ip, sp, lr}
 800abf4:	080073e1 	stmdaeq	r0, {r0, r5, r6, r7, r8, r9, ip, sp, lr}
 800abf8:	080073ed 	stmdaeq	r0, {r0, r2, r3, r5, r6, r7, r8, r9, ip, sp, lr}
 800abfc:	08007407 	stmdaeq	r0, {r0, r1, r2, sl, ip, sp, lr}
 800ac00:	0800720d 	stmdaeq	r0, {r0, r2, r3, r9, ip, sp, lr}
 800ac04:	37335b1b 			; <UNDEFINED> instruction: 0x37335b1b
 800ac08:	5b1b006d 	blpl	86cadc4 <__exidx_end+0x6c0074>
 800ac0c:	006d3034 	rsbeq	r3, sp, r4, lsr r0
 800ac10:	2e25565b 	mcrcs	6, 1, r5, cr5, cr11, {2}
 800ac14:	205d732a 	subscs	r7, sp, sl, lsr #6
 800ac18:	43207325 			; <UNDEFINED> instruction: 0x43207325
 800ac1c:	69706d6f 	ldmdbvs	r0!, {r0, r1, r2, r3, r5, r6, r8, sl, fp, sp, lr}^
 800ac20:	2064656c 	rsbcs	r6, r4, ip, ror #10
 800ac24:	25206e6f 	strcs	r6, [r0, #-3695]!	; 0xfffff191
 800ac28:	20732a2e 	rsbscs	r2, r3, lr, lsr #20
 800ac2c:	25207461 	strcs	r7, [r0, #-1121]!	; 0xfffffb9f
 800ac30:	00732a2e 	rsbseq	r2, r3, lr, lsr #20
 800ac34:	52206f4e 	eorpl	r6, r0, #312	; 0x138
 800ac38:	63204354 			; <UNDEFINED> instruction: 0x63204354
 800ac3c:	656e6e6f 	strbvs	r6, [lr, #-3695]!	; 0xfffff191
 800ac40:	64657463 	strbtvs	r7, [r5], #-1123	; 0xfffffb9d
 800ac44:	342e2500 	strtcc	r2, [lr], #-1280	; 0xfffffb00
 800ac48:	2e252f64 	cdpcs	15, 2, cr2, cr5, cr4, {3}
 800ac4c:	252f6432 	strcs	r6, [pc, #-1074]!	; 800a822 <vtable for StoreWS28xxDmx+0xa>
 800ac50:	2064322e 	rsbcs	r3, r4, lr, lsr #4
 800ac54:	64322e25 	ldrtvs	r2, [r2], #-3621	; 0xfffff1db
 800ac58:	322e253a 	eorcc	r2, lr, #243269632	; 0xe800000
 800ac5c:	2e253a64 	vnmulcs.f32	s6, s10, s9
 800ac60:	000a6432 	andeq	r6, sl, r2, lsr r4
 800ac64:	3750434d 	ldrbcc	r4, [r0, -sp, asr #6]
 800ac68:	58313439 	ldmdapl	r1!, {r0, r3, r4, r5, sl, ip, sp}
 800ac6c:	33534400 	cmpcc	r3, #0, 8
 800ac70:	00313332 	eorseq	r3, r1, r2, lsr r3
 800ac74:	38464350 	stmdacc	r6, {r4, r6, r8, r9, lr}^
 800ac78:	00333635 	eorseq	r3, r3, r5, lsr r6
 800ac7c:	5f434f53 	svcpl	0x00434f53
 800ac80:	45544e49 	ldrbmi	r4, [r4, #-3657]	; 0xfffff1b7
 800ac84:	4c414e52 	mcrrmi	14, 5, r4, r1, cr2
 800ac88:	00000000 	andeq	r0, r0, r0

0800ac8c <CSWTCH.7>:
 800ac8c:	0800ac64 	stmdaeq	r0, {r2, r5, r6, sl, fp, sp, pc}
 800ac90:	0800ac6d 	stmdaeq	r0, {r0, r2, r3, r5, r6, sl, fp, sp, pc}
 800ac94:	0800ac74 	stmdaeq	r0, {r2, r4, r5, r6, sl, fp, sp, pc}
 800ac98:	0800ac7c 	stmdaeq	r0, {r2, r3, r4, r5, r6, sl, fp, sp, pc}
 800ac9c:	6c6c616d 	stfvse	f6, [ip], #-436	; 0xfffffe4c
 800aca0:	203a636f 	eorscs	r6, sl, pc, ror #6
 800aca4:	000a7525 	andeq	r7, sl, r5, lsr #10
 800aca8:	6c6c616d 	stfvse	f6, [ip], #-436	; 0xfffffe4c
 800acac:	203a636f 	eorscs	r6, sl, pc, ror #6
 800acb0:	7478656e 	ldrbtvc	r6, [r8], #-1390	; 0xfffffa92
 800acb4:	62203e20 	eorvs	r3, r0, #32, 28	; 0x200
 800acb8:	6b636f6c 	blvs	98e6a70 <__exidx_end+0x18dbd20>
 800acbc:	6d696c5f 	stclvs	12, cr6, [r9, #-380]!	; 0xfffffe84
 800acc0:	000a7469 	andeq	r7, sl, r9, ror #8
 800acc4:	6c6c616d 	stfvse	f6, [ip], #-436	; 0xfffffe4c
 800acc8:	203a636f 	eorscs	r6, sl, pc, ror #6
 800accc:	6f6c4270 	svcvs	0x006c4270
 800acd0:	65486b63 	strbvs	r6, [r8, #-2915]	; 0xfffff49d
 800acd4:	72656461 	rsbvc	r6, r5, #1627389952	; 0x61000000
 800acd8:	2c70253d 	cfldr64cs	mvdx2, [r0], #-244	; 0xffffff0c
 800acdc:	7a697320 	bvc	9a67964 <__exidx_end+0x1a5cc14>
 800ace0:	64253d65 	strtvs	r3, [r5], #-3429	; 0xfffff29b
 800ace4:	6164202c 	cmnvs	r4, ip, lsr #32
 800ace8:	253d6174 	ldrcs	r6, [sp, #-372]!	; 0xfffffe8c
 800acec:	66000a70 			; <UNDEFINED> instruction: 0x66000a70
 800acf0:	3a656572 	bcc	99642c0 <__exidx_end+0x1959570>
 800acf4:	6c427020 	mcrrvs	0, 2, r7, r2, cr0
 800acf8:	486b636f 	stmdami	fp!, {r0, r1, r2, r3, r5, r6, r8, r9, sp, lr}^
 800acfc:	65646165 	strbvs	r6, [r4, #-357]!	; 0xfffffe9b
 800ad00:	203d2072 	eorscs	r2, sp, r2, ror r0
 800ad04:	202c7025 	eorcs	r7, ip, r5, lsr #32
 800ad08:	6f6c4270 	svcvs	0x006c4270
 800ad0c:	3d206b63 	fstmdbxcc	r0!, {d6-d54}	;@ Deprecated
 800ad10:	0a702520 	beq	9c14198 <__exidx_end+0x1c09448>
 800ad14:	00000000 	andeq	r0, r0, r0

0800ad18 <days_of_month>:
 800ad18:	0000001f 	andeq	r0, r0, pc, lsl r0
 800ad1c:	0000001c 	andeq	r0, r0, ip, lsl r0
 800ad20:	0000001f 	andeq	r0, r0, pc, lsl r0
 800ad24:	0000001e 	andeq	r0, r0, lr, lsl r0
 800ad28:	0000001f 	andeq	r0, r0, pc, lsl r0
 800ad2c:	0000001e 	andeq	r0, r0, lr, lsl r0
 800ad30:	0000001f 	andeq	r0, r0, pc, lsl r0
 800ad34:	0000001f 	andeq	r0, r0, pc, lsl r0
 800ad38:	0000001e 	andeq	r0, r0, lr, lsl r0
 800ad3c:	0000001f 	andeq	r0, r0, pc, lsl r0
 800ad40:	0000001e 	andeq	r0, r0, lr, lsl r0
 800ad44:	0000001f 	andeq	r0, r0, pc, lsl r0

Disassembly of section .ARM:

0800ad48 <__exidx_start>:
 800ad48:	7fff689c 	svcvc	0x00ff689c
 800ad4c:	00000001 	andeq	r0, r0, r1

Disassembly of section .ARM.attributes:

0800ad50 <.ARM.attributes>:
 800ad50:	00003441 	andeq	r3, r0, r1, asr #8
 800ad54:	61656100 	cmnvs	r5, r0, lsl #2
 800ad58:	01006962 	tsteq	r0, r2, ror #18
 800ad5c:	0000002a 	andeq	r0, r0, sl, lsr #32
 800ad60:	726f4305 	rsbvc	r4, pc, #335544320	; 0x14000000
 800ad64:	2d786574 	cfldr64cs	mvdx6, [r8, #-464]!	; 0xfffffe30
 800ad68:	0600344d 	streq	r3, [r0], -sp, asr #8
 800ad6c:	094d070d 	stmdbeq	sp, {r0, r2, r3, r8, r9, sl}^
 800ad70:	12060a02 	andne	r0, r6, #8192	; 0x2000
 800ad74:	15011404 	strne	r1, [r1, #-1028]	; 0xfffffbfc
 800ad78:	18031701 	stmdane	r3, {r0, r8, r9, sl, ip}
 800ad7c:	1b011a01 	blne	8051588 <__exidx_end+0x46838>
 800ad80:	22011c01 	andcs	r1, r1, #256	; 0x100
 800ad84:	Address 0x000000000800ad84 is out of bounds.


Disassembly of section .data:

20000000 <s_nDmxTransmitPeriod>:
20000000:	000061a8 	andeq	r6, r0, r8, lsr #3

20000004 <s_nDmxTransmitMabTime>:
20000004:	0000000c 	andeq	r0, r0, ip

20000008 <s_nDmxTransmitBreakTime>:
20000008:	0000005c 	andeq	r0, r0, ip, asr r0

2000000c <next_block>:
2000000c:	2000a000 	andcs	sl, r0, r0

20000010 <s_block_bucket>:
20000010:	00000010 	andeq	r0, r0, r0, lsl r0
	...
20000020:	00000020 	andeq	r0, r0, r0, lsr #32
	...
20000030:	00000040 	andeq	r0, r0, r0, asr #32
	...
20000040:	00000060 	andeq	r0, r0, r0, rrx
	...
20000050:	00000080 	andeq	r0, r0, r0, lsl #1
	...
20000060:	00000100 	andeq	r0, r0, r0, lsl #2
	...
20000070:	00000140 	andeq	r0, r0, r0, asr #2
	...
20000080:	00000180 	andeq	r0, r0, r0, lsl #3
	...
20000090:	00000200 	andeq	r0, r0, r0, lsl #4
	...
200000a0:	00000300 	andeq	r0, r0, r0, lsl #6
	...
200000b0:	00000400 	andeq	r0, r0, r0, lsl #8
	...
200000c0:	00000500 	andeq	r0, r0, r0, lsl #10
	...

200000e0 <SystemCoreClock>:
200000e0:	07270e00 	streq	r0, [r7, -r0, lsl #28]!

Disassembly of section .bss:

200000e8 <s_IsProgrammed>:
	...

200000e9 <s_isOn>:
200000e9:	 	andeq	r0, r0, r0

200000ec <s_Pattern>:
200000ec:	00000000 	andeq	r0, r0, r0

200000f0 <outptr>:
200000f0:	00000000 	andeq	r0, r0, r0

200000f4 <RDMResponder::s_RdmCommand>:
	...

200001f3 <RDMResponder::m_IsSubDeviceActive>:
	...

200001f4 <RDMResponder::s_pThis>:
200001f4:	00000000 	andeq	r0, r0, r0

200001f8 <RDMSensors::s_pThis>:
200001f8:	00000000 	andeq	r0, r0, r0

200001fc <RDMSubDevices::s_pThis>:
200001fc:	00000000 	andeq	r0, r0, r0

20000200 <DMXReceiver::s_IsActive>:
20000200:	00000000 	andeq	r0, r0, r0

20000204 <DMXReceiver::s_pLightSet>:
20000204:	00000000 	andeq	r0, r0, r0

20000208 <DMXReceiver::s_bDisableOutput>:
20000208:	00000000 	andeq	r0, r0, r0

2000020c <s_RxBuffer>:
	...

2000041c <s_TxBuffer>:
	...

20000620 <sv_PortState>:
20000620:	00000000 	andeq	r0, r0, r0

20000624 <sv_nRxDmxPackets>:
	...

20000634 <sv_nUartsSending>:
20000634:	00000000 	andeq	r0, r0, r0

20000638 <Dmx::s_pThis>:
20000638:	00000000 	andeq	r0, r0, r0

2000063c <gv_RdmDataReceiveEnd>:
2000063c:	00000000 	andeq	r0, r0, r0

20000640 <RDMDeviceResponder::s_pThis>:
20000640:	00000000 	andeq	r0, r0, r0

20000644 <RDMIdentify::m_bIsEnabled>:
	...

20000645 <RDMIdentify::m_nMode>:
20000645:	 	andeq	r0, r0, r0

20000648 <RDMIdentify::s_pThis>:
20000648:	00000000 	andeq	r0, r0, r0

2000064c <PixelDmxParamsRdm::s_pWS28xxDmxStore>:
2000064c:	00000000 	andeq	r0, r0, r0

20000650 <PixelDmxParamsRdm::s_Data>:
20000650:	00000000 	andeq	r0, r0, r0

20000654 <WS28xxDmx::s_pThis>:
20000654:	00000000 	andeq	r0, r0, r0

20000658 <PixelPatterns::m_PortConfig>:
	...

20000678 <PixelPatterns::m_nActivePorts>:
20000678:	00000000 	andeq	r0, r0, r0

2000067c <PixelPatterns::m_pScannerColours>:
2000067c:	00000000 	andeq	r0, r0, r0

20000680 <PixelPatterns::m_nCount>:
20000680:	00000000 	andeq	r0, r0, r0

20000684 <PixelPatterns::m_pOutput>:
20000684:	00000000 	andeq	r0, r0, r0

20000688 <PixelTestPattern::s_pThis>:
20000688:	00000000 	andeq	r0, r0, r0

2000068c <PixelTestPattern::s_Pattern>:
2000068c:	00000000 	andeq	r0, r0, r0

20000690 <s_tmp>:
20000690:	00000000 	andeq	r0, r0, r0

20000694 <WS28xx::s_pThis>:
20000694:	00000000 	andeq	r0, r0, r0

20000698 <SpiFlashStore::s_nWaitMillis>:
20000698:	00000000 	andeq	r0, r0, r0

2000069c <SpiFlashStore::s_SpiFlashData>:
	...

2000169c <SpiFlashStore::s_nStartAddress>:
2000169c:	00000000 	andeq	r0, r0, r0

200016a0 <SpiFlashStore::s_bHaveFlashChip>:
200016a0:	00000000 	andeq	r0, r0, r0

200016a4 <SpiFlashStore::s_nSpiFlashStoreSize>:
200016a4:	00000000 	andeq	r0, r0, r0

200016a8 <SpiFlashStore::s_State>:
200016a8:	00000000 	andeq	r0, r0, r0

200016ac <SpiFlashStore::s_pThis>:
200016ac:	00000000 	andeq	r0, r0, r0

200016b0 <SpiFlashStore::s_bIsNew>:
200016b0:	00000000 	andeq	r0, r0, r0

200016b4 <StoreDisplayUdf::s_pThis>:
200016b4:	00000000 	andeq	r0, r0, r0

200016b8 <StoreRDMDevice::s_pThis>:
200016b8:	00000000 	andeq	r0, r0, r0

200016bc <StoreRDMSensors::s_pThis>:
200016bc:	00000000 	andeq	r0, r0, r0

200016c0 <StoreRDMSubDevices::s_pThis>:
200016c0:	00000000 	andeq	r0, r0, r0

200016c4 <StoreWS28xxDmx::s_pThis>:
200016c4:	00000000 	andeq	r0, r0, r0

200016c8 <FlashRom::s_pThis>:
200016c8:	00000000 	andeq	r0, r0, r0

200016cc <flashrom::s_nAddress>:
200016cc:	00000000 	andeq	r0, r0, r0

200016d0 <flashrom::s_State>:
200016d0:	00000000 	andeq	r0, r0, r0

200016d4 <flashrom::s_nPage>:
200016d4:	00000000 	andeq	r0, r0, r0

200016d8 <flashrom::s_pData>:
200016d8:	00000000 	andeq	r0, r0, r0

200016dc <flashrom::s_isBank0>:
200016dc:	00000000 	andeq	r0, r0, r0

200016e0 <flashrom::s_nLength>:
200016e0:	00000000 	andeq	r0, r0, r0

200016e4 <Network::s_pThis>:
200016e4:	00000000 	andeq	r0, r0, r0

200016e8 <DisplayUdf::s_pThis>:
200016e8:	00000000 	andeq	r0, r0, r0

200016ec <Display::s_pThis>:
200016ec:	00000000 	andeq	r0, r0, r0

200016f0 <_ClearBuffer>:
	...

20001778 <Ssd1306::s_pThis>:
20001778:	00000000 	andeq	r0, r0, r0

2000177c <FirmwareVersion::s_FirmwareVersion>:
	...

20001792 <FirmwareVersion::s_Print>:
	...

200017d4 <FirmwareVersion::s_pThis>:
200017d4:	00000000 	andeq	r0, r0, r0

200017d8 <LedBlink::s_pThis>:
200017d8:	00000000 	andeq	r0, r0, r0

200017dc <Hardware::s_pThis>:
200017dc:	00000000 	andeq	r0, r0, r0

200017e0 <HwClock::s_pThis>:
200017e0:	00000000 	andeq	r0, r0, r0

200017e4 <Tm>:
	...

20001808 <s_micros>:
	...

20001810 <set_timer>:
20001810:	00000000 	andeq	r0, r0, r0

20001814 <s_nSysTickMillis>:
20001814:	00000000 	andeq	r0, r0, r0

20001818 <s_nAddress>:
20001818:	00000000 	andeq	r0, r0, r0

2000181c <s_TxBuffer>:
	...

Disassembly of section .heap:

2000a000 <heap_low>:
	...

Disassembly of section .stack:

2000b000 <_sp-0x1000>:
	...
