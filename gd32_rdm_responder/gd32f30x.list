
build_gd32/main.elf:     file format elf32-littlearm


Disassembly of section .vectors:

08000000 <__gVectors>:
 8000000:	20001000 	andcs	r1, r0, r0
 8000004:	08000a11 	stmdaeq	r0, {r0, r4, r9, fp}
 8000008:	08000a55 	stmdaeq	r0, {r0, r2, r4, r6, r9, fp}
 800000c:	08000a55 	stmdaeq	r0, {r0, r2, r4, r6, r9, fp}
 8000010:	08000a55 	stmdaeq	r0, {r0, r2, r4, r6, r9, fp}
 8000014:	08000a55 	stmdaeq	r0, {r0, r2, r4, r6, r9, fp}
 8000018:	08000a55 	stmdaeq	r0, {r0, r2, r4, r6, r9, fp}
	...
 800002c:	08000a55 	stmdaeq	r0, {r0, r2, r4, r6, r9, fp}
 8000030:	08000a55 	stmdaeq	r0, {r0, r2, r4, r6, r9, fp}
 8000034:	00000000 	andeq	r0, r0, r0
 8000038:	08000a55 	stmdaeq	r0, {r0, r2, r4, r6, r9, fp}
 800003c:	08008905 	stmdaeq	r0, {r0, r2, r8, fp, pc}
 8000040:	08000a55 	stmdaeq	r0, {r0, r2, r4, r6, r9, fp}
 8000044:	08000a55 	stmdaeq	r0, {r0, r2, r4, r6, r9, fp}
 8000048:	08000a55 	stmdaeq	r0, {r0, r2, r4, r6, r9, fp}
 800004c:	08000a55 	stmdaeq	r0, {r0, r2, r4, r6, r9, fp}
 8000050:	08000a55 	stmdaeq	r0, {r0, r2, r4, r6, r9, fp}
 8000054:	08000a55 	stmdaeq	r0, {r0, r2, r4, r6, r9, fp}
 8000058:	08000a55 	stmdaeq	r0, {r0, r2, r4, r6, r9, fp}
 800005c:	08000a55 	stmdaeq	r0, {r0, r2, r4, r6, r9, fp}
 8000060:	08000a55 	stmdaeq	r0, {r0, r2, r4, r6, r9, fp}
 8000064:	08000a55 	stmdaeq	r0, {r0, r2, r4, r6, r9, fp}
 8000068:	08000a55 	stmdaeq	r0, {r0, r2, r4, r6, r9, fp}
 800006c:	08000a55 	stmdaeq	r0, {r0, r2, r4, r6, r9, fp}
 8000070:	080037d5 	stmdaeq	r0, {r0, r2, r4, r6, r7, r8, r9, sl, ip, sp}
 8000074:	08000a55 	stmdaeq	r0, {r0, r2, r4, r6, r9, fp}
 8000078:	08000a55 	stmdaeq	r0, {r0, r2, r4, r6, r9, fp}
 800007c:	08000a55 	stmdaeq	r0, {r0, r2, r4, r6, r9, fp}
 8000080:	08000a55 	stmdaeq	r0, {r0, r2, r4, r6, r9, fp}
 8000084:	08000a55 	stmdaeq	r0, {r0, r2, r4, r6, r9, fp}
 8000088:	08000a55 	stmdaeq	r0, {r0, r2, r4, r6, r9, fp}
 800008c:	08000a55 	stmdaeq	r0, {r0, r2, r4, r6, r9, fp}
 8000090:	08000a55 	stmdaeq	r0, {r0, r2, r4, r6, r9, fp}
 8000094:	08000a55 	stmdaeq	r0, {r0, r2, r4, r6, r9, fp}
 8000098:	08000a55 	stmdaeq	r0, {r0, r2, r4, r6, r9, fp}
 800009c:	08000a55 	stmdaeq	r0, {r0, r2, r4, r6, r9, fp}
 80000a0:	08000a55 	stmdaeq	r0, {r0, r2, r4, r6, r9, fp}
 80000a4:	08000a55 	stmdaeq	r0, {r0, r2, r4, r6, r9, fp}
 80000a8:	08000a55 	stmdaeq	r0, {r0, r2, r4, r6, r9, fp}
 80000ac:	08000a55 	stmdaeq	r0, {r0, r2, r4, r6, r9, fp}
 80000b0:	08003679 	stmdaeq	r0, {r0, r3, r4, r5, r6, r9, sl, ip, sp}
 80000b4:	08003749 	stmdaeq	r0, {r0, r3, r6, r8, r9, sl, ip, sp}
 80000b8:	0800379d 	stmdaeq	r0, {r0, r2, r3, r4, r7, r8, r9, sl, ip, sp}
 80000bc:	08000a55 	stmdaeq	r0, {r0, r2, r4, r6, r9, fp}
 80000c0:	08000a55 	stmdaeq	r0, {r0, r2, r4, r6, r9, fp}
 80000c4:	08000a55 	stmdaeq	r0, {r0, r2, r4, r6, r9, fp}
 80000c8:	08000a55 	stmdaeq	r0, {r0, r2, r4, r6, r9, fp}
 80000cc:	08000a55 	stmdaeq	r0, {r0, r2, r4, r6, r9, fp}
 80000d0:	08000a55 	stmdaeq	r0, {r0, r2, r4, r6, r9, fp}
 80000d4:	00000000 	andeq	r0, r0, r0
 80000d8:	08000a55 	stmdaeq	r0, {r0, r2, r4, r6, r9, fp}
 80000dc:	0800348d 	stmdaeq	r0, {r0, r2, r3, r7, sl, ip, sp}
 80000e0:	08000a55 	stmdaeq	r0, {r0, r2, r4, r6, r9, fp}
 80000e4:	08000a55 	stmdaeq	r0, {r0, r2, r4, r6, r9, fp}
 80000e8:	08000a55 	stmdaeq	r0, {r0, r2, r4, r6, r9, fp}
 80000ec:	08000a55 	stmdaeq	r0, {r0, r2, r4, r6, r9, fp}
 80000f0:	08000a55 	stmdaeq	r0, {r0, r2, r4, r6, r9, fp}
 80000f4:	08000a55 	stmdaeq	r0, {r0, r2, r4, r6, r9, fp}
 80000f8:	08000a55 	stmdaeq	r0, {r0, r2, r4, r6, r9, fp}
 80000fc:	08000a55 	stmdaeq	r0, {r0, r2, r4, r6, r9, fp}
 8000100:	08000a55 	stmdaeq	r0, {r0, r2, r4, r6, r9, fp}
 8000104:	08000a55 	stmdaeq	r0, {r0, r2, r4, r6, r9, fp}
 8000108:	08003745 	stmdaeq	r0, {r0, r2, r6, r8, r9, sl, ip, sp}
 800010c:	08000a55 	stmdaeq	r0, {r0, r2, r4, r6, r9, fp}
 8000110:	08000a55 	stmdaeq	r0, {r0, r2, r4, r6, r9, fp}
 8000114:	08000a55 	stmdaeq	r0, {r0, r2, r4, r6, r9, fp}
 8000118:	08000a55 	stmdaeq	r0, {r0, r2, r4, r6, r9, fp}
 800011c:	080037b1 	stmdaeq	r0, {r0, r4, r5, r7, r8, r9, sl, ip, sp}
 8000120:	08000a55 	stmdaeq	r0, {r0, r2, r4, r6, r9, fp}
 8000124:	08000a55 	stmdaeq	r0, {r0, r2, r4, r6, r9, fp}
 8000128:	08000a55 	stmdaeq	r0, {r0, r2, r4, r6, r9, fp}
 800012c:	08000a55 	stmdaeq	r0, {r0, r2, r4, r6, r9, fp}

Disassembly of section .text:

08000130 <console_init>:
 8000130:	b508      	push	{r3, lr}
 8000132:	f009 f9c7 	bl	80094c4 <uart0_init>
 8000136:	4804      	ldr	r0, [pc, #16]	; (8000148 <console_init+0x18>)
 8000138:	f008 fbb7 	bl	80088aa <uart0_puts>
 800013c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8000140:	4802      	ldr	r0, [pc, #8]	; (800014c <console_init+0x1c>)
 8000142:	f008 bbb2 	b.w	80088aa <uart0_puts>
 8000146:	bf00      	nop
 8000148:	0800c07c 	stmdaeq	r0, {r2, r3, r4, r5, r6, lr, pc}
 800014c:	0800c082 	stmdaeq	r0, {r1, r7, lr, pc}

08000150 <__aeabi_d2f>:
 8000150:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000154:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000158:	bf24      	itt	cs
 800015a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 800015e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000162:	d90d      	bls.n	8000180 <__aeabi_d2f+0x30>
 8000164:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000168:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 800016c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000170:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000174:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000178:	bf08      	it	eq
 800017a:	f020 0001 	biceq.w	r0, r0, #1
 800017e:	4770      	bx	lr
 8000180:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000184:	d121      	bne.n	80001ca <__aeabi_d2f+0x7a>
 8000186:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 800018a:	bfbc      	itt	lt
 800018c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000190:	4770      	bxlt	lr
 8000192:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000196:	ea4f 5252 	mov.w	r2, r2, lsr #21
 800019a:	f1c2 0218 	rsb	r2, r2, #24
 800019e:	f1c2 0c20 	rsb	ip, r2, #32
 80001a2:	fa10 f30c 	lsls.w	r3, r0, ip
 80001a6:	fa20 f002 	lsr.w	r0, r0, r2
 80001aa:	bf18      	it	ne
 80001ac:	f040 0001 	orrne.w	r0, r0, #1
 80001b0:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80001b4:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80001b8:	fa03 fc0c 	lsl.w	ip, r3, ip
 80001bc:	ea40 000c 	orr.w	r0, r0, ip
 80001c0:	fa23 f302 	lsr.w	r3, r3, r2
 80001c4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80001c8:	e7cc      	b.n	8000164 <__aeabi_d2f+0x14>
 80001ca:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80001ce:	d107      	bne.n	80001e0 <__aeabi_d2f+0x90>
 80001d0:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80001d4:	bf1e      	ittt	ne
 80001d6:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80001da:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80001de:	4770      	bxne	lr
 80001e0:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 80001e4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80001e8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80001ec:	4770      	bx	lr
 80001ee:	bf00      	nop

080001f0 <__aeabi_uldivmod>:
 80001f0:	b953      	cbnz	r3, 8000208 <__aeabi_uldivmod+0x18>
 80001f2:	b94a      	cbnz	r2, 8000208 <__aeabi_uldivmod+0x18>
 80001f4:	2900      	cmp	r1, #0
 80001f6:	bf08      	it	eq
 80001f8:	2800      	cmpeq	r0, #0
 80001fa:	bf1c      	itt	ne
 80001fc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000200:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000204:	f000 b80c 	b.w	8000220 <__aeabi_idiv0>
 8000208:	f1ad 0c08 	sub.w	ip, sp, #8
 800020c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000210:	f001 fd6c 	bl	8001cec <__udivmoddi4>
 8000214:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000218:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800021c:	b004      	add	sp, #16
 800021e:	4770      	bx	lr

08000220 <__aeabi_idiv0>:
 8000220:	4770      	bx	lr
 8000222:	bf00      	nop

08000224 <__aeabi_drsub>:
 8000224:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000228:	e002      	b.n	8000230 <__adddf3>
 800022a:	bf00      	nop

0800022c <__aeabi_dsub>:
 800022c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000230 <__adddf3>:
 8000230:	b530      	push	{r4, r5, lr}
 8000232:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000236:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800023a:	ea94 0f05 	teq	r4, r5
 800023e:	bf08      	it	eq
 8000240:	ea90 0f02 	teqeq	r0, r2
 8000244:	bf1f      	itttt	ne
 8000246:	ea54 0c00 	orrsne.w	ip, r4, r0
 800024a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800024e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000252:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000256:	f000 80e2 	beq.w	800041e <__adddf3+0x1ee>
 800025a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800025e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000262:	bfb8      	it	lt
 8000264:	426d      	neglt	r5, r5
 8000266:	dd0c      	ble.n	8000282 <__adddf3+0x52>
 8000268:	442c      	add	r4, r5
 800026a:	ea80 0202 	eor.w	r2, r0, r2
 800026e:	ea81 0303 	eor.w	r3, r1, r3
 8000272:	ea82 0000 	eor.w	r0, r2, r0
 8000276:	ea83 0101 	eor.w	r1, r3, r1
 800027a:	ea80 0202 	eor.w	r2, r0, r2
 800027e:	ea81 0303 	eor.w	r3, r1, r3
 8000282:	2d36      	cmp	r5, #54	; 0x36
 8000284:	bf88      	it	hi
 8000286:	bd30      	pophi	{r4, r5, pc}
 8000288:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800028c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000290:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000294:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000298:	d002      	beq.n	80002a0 <__adddf3+0x70>
 800029a:	4240      	negs	r0, r0
 800029c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002a0:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002a4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002a8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002ac:	d002      	beq.n	80002b4 <__adddf3+0x84>
 80002ae:	4252      	negs	r2, r2
 80002b0:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002b4:	ea94 0f05 	teq	r4, r5
 80002b8:	f000 80a7 	beq.w	800040a <__adddf3+0x1da>
 80002bc:	f1a4 0401 	sub.w	r4, r4, #1
 80002c0:	f1d5 0e20 	rsbs	lr, r5, #32
 80002c4:	db0d      	blt.n	80002e2 <__adddf3+0xb2>
 80002c6:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002ca:	fa22 f205 	lsr.w	r2, r2, r5
 80002ce:	1880      	adds	r0, r0, r2
 80002d0:	f141 0100 	adc.w	r1, r1, #0
 80002d4:	fa03 f20e 	lsl.w	r2, r3, lr
 80002d8:	1880      	adds	r0, r0, r2
 80002da:	fa43 f305 	asr.w	r3, r3, r5
 80002de:	4159      	adcs	r1, r3
 80002e0:	e00e      	b.n	8000300 <__adddf3+0xd0>
 80002e2:	f1a5 0520 	sub.w	r5, r5, #32
 80002e6:	f10e 0e20 	add.w	lr, lr, #32
 80002ea:	2a01      	cmp	r2, #1
 80002ec:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002f0:	bf28      	it	cs
 80002f2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002f6:	fa43 f305 	asr.w	r3, r3, r5
 80002fa:	18c0      	adds	r0, r0, r3
 80002fc:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000300:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000304:	d507      	bpl.n	8000316 <__adddf3+0xe6>
 8000306:	f04f 0e00 	mov.w	lr, #0
 800030a:	f1dc 0c00 	rsbs	ip, ip, #0
 800030e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000312:	eb6e 0101 	sbc.w	r1, lr, r1
 8000316:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800031a:	d31b      	bcc.n	8000354 <__adddf3+0x124>
 800031c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000320:	d30c      	bcc.n	800033c <__adddf3+0x10c>
 8000322:	0849      	lsrs	r1, r1, #1
 8000324:	ea5f 0030 	movs.w	r0, r0, rrx
 8000328:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800032c:	f104 0401 	add.w	r4, r4, #1
 8000330:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000334:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000338:	f080 809a 	bcs.w	8000470 <__adddf3+0x240>
 800033c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000340:	bf08      	it	eq
 8000342:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000346:	f150 0000 	adcs.w	r0, r0, #0
 800034a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800034e:	ea41 0105 	orr.w	r1, r1, r5
 8000352:	bd30      	pop	{r4, r5, pc}
 8000354:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000358:	4140      	adcs	r0, r0
 800035a:	eb41 0101 	adc.w	r1, r1, r1
 800035e:	3c01      	subs	r4, #1
 8000360:	bf28      	it	cs
 8000362:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000366:	d2e9      	bcs.n	800033c <__adddf3+0x10c>
 8000368:	f091 0f00 	teq	r1, #0
 800036c:	bf04      	itt	eq
 800036e:	4601      	moveq	r1, r0
 8000370:	2000      	moveq	r0, #0
 8000372:	fab1 f381 	clz	r3, r1
 8000376:	bf08      	it	eq
 8000378:	3320      	addeq	r3, #32
 800037a:	f1a3 030b 	sub.w	r3, r3, #11
 800037e:	f1b3 0220 	subs.w	r2, r3, #32
 8000382:	da0c      	bge.n	800039e <__adddf3+0x16e>
 8000384:	320c      	adds	r2, #12
 8000386:	dd08      	ble.n	800039a <__adddf3+0x16a>
 8000388:	f102 0c14 	add.w	ip, r2, #20
 800038c:	f1c2 020c 	rsb	r2, r2, #12
 8000390:	fa01 f00c 	lsl.w	r0, r1, ip
 8000394:	fa21 f102 	lsr.w	r1, r1, r2
 8000398:	e00c      	b.n	80003b4 <__adddf3+0x184>
 800039a:	f102 0214 	add.w	r2, r2, #20
 800039e:	bfd8      	it	le
 80003a0:	f1c2 0c20 	rsble	ip, r2, #32
 80003a4:	fa01 f102 	lsl.w	r1, r1, r2
 80003a8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003ac:	bfdc      	itt	le
 80003ae:	ea41 010c 	orrle.w	r1, r1, ip
 80003b2:	4090      	lslle	r0, r2
 80003b4:	1ae4      	subs	r4, r4, r3
 80003b6:	bfa2      	ittt	ge
 80003b8:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003bc:	4329      	orrge	r1, r5
 80003be:	bd30      	popge	{r4, r5, pc}
 80003c0:	ea6f 0404 	mvn.w	r4, r4
 80003c4:	3c1f      	subs	r4, #31
 80003c6:	da1c      	bge.n	8000402 <__adddf3+0x1d2>
 80003c8:	340c      	adds	r4, #12
 80003ca:	dc0e      	bgt.n	80003ea <__adddf3+0x1ba>
 80003cc:	f104 0414 	add.w	r4, r4, #20
 80003d0:	f1c4 0220 	rsb	r2, r4, #32
 80003d4:	fa20 f004 	lsr.w	r0, r0, r4
 80003d8:	fa01 f302 	lsl.w	r3, r1, r2
 80003dc:	ea40 0003 	orr.w	r0, r0, r3
 80003e0:	fa21 f304 	lsr.w	r3, r1, r4
 80003e4:	ea45 0103 	orr.w	r1, r5, r3
 80003e8:	bd30      	pop	{r4, r5, pc}
 80003ea:	f1c4 040c 	rsb	r4, r4, #12
 80003ee:	f1c4 0220 	rsb	r2, r4, #32
 80003f2:	fa20 f002 	lsr.w	r0, r0, r2
 80003f6:	fa01 f304 	lsl.w	r3, r1, r4
 80003fa:	ea40 0003 	orr.w	r0, r0, r3
 80003fe:	4629      	mov	r1, r5
 8000400:	bd30      	pop	{r4, r5, pc}
 8000402:	fa21 f004 	lsr.w	r0, r1, r4
 8000406:	4629      	mov	r1, r5
 8000408:	bd30      	pop	{r4, r5, pc}
 800040a:	f094 0f00 	teq	r4, #0
 800040e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000412:	bf06      	itte	eq
 8000414:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000418:	3401      	addeq	r4, #1
 800041a:	3d01      	subne	r5, #1
 800041c:	e74e      	b.n	80002bc <__adddf3+0x8c>
 800041e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000422:	bf18      	it	ne
 8000424:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000428:	d029      	beq.n	800047e <__adddf3+0x24e>
 800042a:	ea94 0f05 	teq	r4, r5
 800042e:	bf08      	it	eq
 8000430:	ea90 0f02 	teqeq	r0, r2
 8000434:	d005      	beq.n	8000442 <__adddf3+0x212>
 8000436:	ea54 0c00 	orrs.w	ip, r4, r0
 800043a:	bf04      	itt	eq
 800043c:	4619      	moveq	r1, r3
 800043e:	4610      	moveq	r0, r2
 8000440:	bd30      	pop	{r4, r5, pc}
 8000442:	ea91 0f03 	teq	r1, r3
 8000446:	bf1e      	ittt	ne
 8000448:	2100      	movne	r1, #0
 800044a:	2000      	movne	r0, #0
 800044c:	bd30      	popne	{r4, r5, pc}
 800044e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000452:	d105      	bne.n	8000460 <__adddf3+0x230>
 8000454:	0040      	lsls	r0, r0, #1
 8000456:	4149      	adcs	r1, r1
 8000458:	bf28      	it	cs
 800045a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800045e:	bd30      	pop	{r4, r5, pc}
 8000460:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000464:	bf3c      	itt	cc
 8000466:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800046a:	bd30      	popcc	{r4, r5, pc}
 800046c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000470:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000474:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000478:	f04f 0000 	mov.w	r0, #0
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000482:	bf1a      	itte	ne
 8000484:	4619      	movne	r1, r3
 8000486:	4610      	movne	r0, r2
 8000488:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800048c:	bf1c      	itt	ne
 800048e:	460b      	movne	r3, r1
 8000490:	4602      	movne	r2, r0
 8000492:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000496:	bf06      	itte	eq
 8000498:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800049c:	ea91 0f03 	teqeq	r1, r3
 80004a0:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	bf00      	nop

080004a8 <__aeabi_ui2d>:
 80004a8:	f090 0f00 	teq	r0, #0
 80004ac:	bf04      	itt	eq
 80004ae:	2100      	moveq	r1, #0
 80004b0:	4770      	bxeq	lr
 80004b2:	b530      	push	{r4, r5, lr}
 80004b4:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004b8:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004bc:	f04f 0500 	mov.w	r5, #0
 80004c0:	f04f 0100 	mov.w	r1, #0
 80004c4:	e750      	b.n	8000368 <__adddf3+0x138>
 80004c6:	bf00      	nop

080004c8 <__aeabi_i2d>:
 80004c8:	f090 0f00 	teq	r0, #0
 80004cc:	bf04      	itt	eq
 80004ce:	2100      	moveq	r1, #0
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004d8:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004dc:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004e0:	bf48      	it	mi
 80004e2:	4240      	negmi	r0, r0
 80004e4:	f04f 0100 	mov.w	r1, #0
 80004e8:	e73e      	b.n	8000368 <__adddf3+0x138>
 80004ea:	bf00      	nop

080004ec <__aeabi_f2d>:
 80004ec:	0042      	lsls	r2, r0, #1
 80004ee:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004f2:	ea4f 0131 	mov.w	r1, r1, rrx
 80004f6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004fa:	bf1f      	itttt	ne
 80004fc:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000500:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000504:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000508:	4770      	bxne	lr
 800050a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800050e:	bf08      	it	eq
 8000510:	4770      	bxeq	lr
 8000512:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000516:	bf04      	itt	eq
 8000518:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000524:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000528:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800052c:	e71c      	b.n	8000368 <__adddf3+0x138>
 800052e:	bf00      	nop

08000530 <__aeabi_ul2d>:
 8000530:	ea50 0201 	orrs.w	r2, r0, r1
 8000534:	bf08      	it	eq
 8000536:	4770      	bxeq	lr
 8000538:	b530      	push	{r4, r5, lr}
 800053a:	f04f 0500 	mov.w	r5, #0
 800053e:	e00a      	b.n	8000556 <__aeabi_l2d+0x16>

08000540 <__aeabi_l2d>:
 8000540:	ea50 0201 	orrs.w	r2, r0, r1
 8000544:	bf08      	it	eq
 8000546:	4770      	bxeq	lr
 8000548:	b530      	push	{r4, r5, lr}
 800054a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800054e:	d502      	bpl.n	8000556 <__aeabi_l2d+0x16>
 8000550:	4240      	negs	r0, r0
 8000552:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000556:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800055a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800055e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000562:	f43f aed8 	beq.w	8000316 <__adddf3+0xe6>
 8000566:	f04f 0203 	mov.w	r2, #3
 800056a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056e:	bf18      	it	ne
 8000570:	3203      	addne	r2, #3
 8000572:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000576:	bf18      	it	ne
 8000578:	3203      	addne	r2, #3
 800057a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800057e:	f1c2 0320 	rsb	r3, r2, #32
 8000582:	fa00 fc03 	lsl.w	ip, r0, r3
 8000586:	fa20 f002 	lsr.w	r0, r0, r2
 800058a:	fa01 fe03 	lsl.w	lr, r1, r3
 800058e:	ea40 000e 	orr.w	r0, r0, lr
 8000592:	fa21 f102 	lsr.w	r1, r1, r2
 8000596:	4414      	add	r4, r2
 8000598:	e6bd      	b.n	8000316 <__adddf3+0xe6>
 800059a:	bf00      	nop

0800059c <__aeabi_dmul>:
 800059c:	b570      	push	{r4, r5, r6, lr}
 800059e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005aa:	bf1d      	ittte	ne
 80005ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005b0:	ea94 0f0c 	teqne	r4, ip
 80005b4:	ea95 0f0c 	teqne	r5, ip
 80005b8:	f000 f8de 	bleq	8000778 <__aeabi_dmul+0x1dc>
 80005bc:	442c      	add	r4, r5
 80005be:	ea81 0603 	eor.w	r6, r1, r3
 80005c2:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005c6:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005ca:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005ce:	bf18      	it	ne
 80005d0:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005d4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005d8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005dc:	d038      	beq.n	8000650 <__aeabi_dmul+0xb4>
 80005de:	fba0 ce02 	umull	ip, lr, r0, r2
 80005e2:	f04f 0500 	mov.w	r5, #0
 80005e6:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005ea:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005ee:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005f2:	f04f 0600 	mov.w	r6, #0
 80005f6:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005fa:	f09c 0f00 	teq	ip, #0
 80005fe:	bf18      	it	ne
 8000600:	f04e 0e01 	orrne.w	lr, lr, #1
 8000604:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000608:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 800060c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000610:	d204      	bcs.n	800061c <__aeabi_dmul+0x80>
 8000612:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000616:	416d      	adcs	r5, r5
 8000618:	eb46 0606 	adc.w	r6, r6, r6
 800061c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000620:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000624:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000628:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 800062c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000630:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000634:	bf88      	it	hi
 8000636:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800063a:	d81e      	bhi.n	800067a <__aeabi_dmul+0xde>
 800063c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000640:	bf08      	it	eq
 8000642:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000646:	f150 0000 	adcs.w	r0, r0, #0
 800064a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800064e:	bd70      	pop	{r4, r5, r6, pc}
 8000650:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000654:	ea46 0101 	orr.w	r1, r6, r1
 8000658:	ea40 0002 	orr.w	r0, r0, r2
 800065c:	ea81 0103 	eor.w	r1, r1, r3
 8000660:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000664:	bfc2      	ittt	gt
 8000666:	ebd4 050c 	rsbsgt	r5, r4, ip
 800066a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800066e:	bd70      	popgt	{r4, r5, r6, pc}
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f04f 0e00 	mov.w	lr, #0
 8000678:	3c01      	subs	r4, #1
 800067a:	f300 80ab 	bgt.w	80007d4 <__aeabi_dmul+0x238>
 800067e:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000682:	bfde      	ittt	le
 8000684:	2000      	movle	r0, #0
 8000686:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800068a:	bd70      	pople	{r4, r5, r6, pc}
 800068c:	f1c4 0400 	rsb	r4, r4, #0
 8000690:	3c20      	subs	r4, #32
 8000692:	da35      	bge.n	8000700 <__aeabi_dmul+0x164>
 8000694:	340c      	adds	r4, #12
 8000696:	dc1b      	bgt.n	80006d0 <__aeabi_dmul+0x134>
 8000698:	f104 0414 	add.w	r4, r4, #20
 800069c:	f1c4 0520 	rsb	r5, r4, #32
 80006a0:	fa00 f305 	lsl.w	r3, r0, r5
 80006a4:	fa20 f004 	lsr.w	r0, r0, r4
 80006a8:	fa01 f205 	lsl.w	r2, r1, r5
 80006ac:	ea40 0002 	orr.w	r0, r0, r2
 80006b0:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006b8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006bc:	fa21 f604 	lsr.w	r6, r1, r4
 80006c0:	eb42 0106 	adc.w	r1, r2, r6
 80006c4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006c8:	bf08      	it	eq
 80006ca:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ce:	bd70      	pop	{r4, r5, r6, pc}
 80006d0:	f1c4 040c 	rsb	r4, r4, #12
 80006d4:	f1c4 0520 	rsb	r5, r4, #32
 80006d8:	fa00 f304 	lsl.w	r3, r0, r4
 80006dc:	fa20 f005 	lsr.w	r0, r0, r5
 80006e0:	fa01 f204 	lsl.w	r2, r1, r4
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006ec:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006f0:	f141 0100 	adc.w	r1, r1, #0
 80006f4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006f8:	bf08      	it	eq
 80006fa:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006fe:	bd70      	pop	{r4, r5, r6, pc}
 8000700:	f1c4 0520 	rsb	r5, r4, #32
 8000704:	fa00 f205 	lsl.w	r2, r0, r5
 8000708:	ea4e 0e02 	orr.w	lr, lr, r2
 800070c:	fa20 f304 	lsr.w	r3, r0, r4
 8000710:	fa01 f205 	lsl.w	r2, r1, r5
 8000714:	ea43 0302 	orr.w	r3, r3, r2
 8000718:	fa21 f004 	lsr.w	r0, r1, r4
 800071c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000720:	fa21 f204 	lsr.w	r2, r1, r4
 8000724:	ea20 0002 	bic.w	r0, r0, r2
 8000728:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 800072c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000730:	bf08      	it	eq
 8000732:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000736:	bd70      	pop	{r4, r5, r6, pc}
 8000738:	f094 0f00 	teq	r4, #0
 800073c:	d10f      	bne.n	800075e <__aeabi_dmul+0x1c2>
 800073e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000742:	0040      	lsls	r0, r0, #1
 8000744:	eb41 0101 	adc.w	r1, r1, r1
 8000748:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800074c:	bf08      	it	eq
 800074e:	3c01      	subeq	r4, #1
 8000750:	d0f7      	beq.n	8000742 <__aeabi_dmul+0x1a6>
 8000752:	ea41 0106 	orr.w	r1, r1, r6
 8000756:	f095 0f00 	teq	r5, #0
 800075a:	bf18      	it	ne
 800075c:	4770      	bxne	lr
 800075e:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000762:	0052      	lsls	r2, r2, #1
 8000764:	eb43 0303 	adc.w	r3, r3, r3
 8000768:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 800076c:	bf08      	it	eq
 800076e:	3d01      	subeq	r5, #1
 8000770:	d0f7      	beq.n	8000762 <__aeabi_dmul+0x1c6>
 8000772:	ea43 0306 	orr.w	r3, r3, r6
 8000776:	4770      	bx	lr
 8000778:	ea94 0f0c 	teq	r4, ip
 800077c:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000780:	bf18      	it	ne
 8000782:	ea95 0f0c 	teqne	r5, ip
 8000786:	d00c      	beq.n	80007a2 <__aeabi_dmul+0x206>
 8000788:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800078c:	bf18      	it	ne
 800078e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000792:	d1d1      	bne.n	8000738 <__aeabi_dmul+0x19c>
 8000794:	ea81 0103 	eor.w	r1, r1, r3
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	f04f 0000 	mov.w	r0, #0
 80007a0:	bd70      	pop	{r4, r5, r6, pc}
 80007a2:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007a6:	bf06      	itte	eq
 80007a8:	4610      	moveq	r0, r2
 80007aa:	4619      	moveq	r1, r3
 80007ac:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007b0:	d019      	beq.n	80007e6 <__aeabi_dmul+0x24a>
 80007b2:	ea94 0f0c 	teq	r4, ip
 80007b6:	d102      	bne.n	80007be <__aeabi_dmul+0x222>
 80007b8:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007bc:	d113      	bne.n	80007e6 <__aeabi_dmul+0x24a>
 80007be:	ea95 0f0c 	teq	r5, ip
 80007c2:	d105      	bne.n	80007d0 <__aeabi_dmul+0x234>
 80007c4:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007c8:	bf1c      	itt	ne
 80007ca:	4610      	movne	r0, r2
 80007cc:	4619      	movne	r1, r3
 80007ce:	d10a      	bne.n	80007e6 <__aeabi_dmul+0x24a>
 80007d0:	ea81 0103 	eor.w	r1, r1, r3
 80007d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007d8:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007dc:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007e0:	f04f 0000 	mov.w	r0, #0
 80007e4:	bd70      	pop	{r4, r5, r6, pc}
 80007e6:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007ea:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007ee:	bd70      	pop	{r4, r5, r6, pc}

080007f0 <__aeabi_ddiv>:
 80007f0:	b570      	push	{r4, r5, r6, lr}
 80007f2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007f6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007fa:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007fe:	bf1d      	ittte	ne
 8000800:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000804:	ea94 0f0c 	teqne	r4, ip
 8000808:	ea95 0f0c 	teqne	r5, ip
 800080c:	f000 f8a7 	bleq	800095e <__aeabi_ddiv+0x16e>
 8000810:	eba4 0405 	sub.w	r4, r4, r5
 8000814:	ea81 0e03 	eor.w	lr, r1, r3
 8000818:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800081c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000820:	f000 8088 	beq.w	8000934 <__aeabi_ddiv+0x144>
 8000824:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000828:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 800082c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000830:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000834:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000838:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 800083c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000840:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000844:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000848:	429d      	cmp	r5, r3
 800084a:	bf08      	it	eq
 800084c:	4296      	cmpeq	r6, r2
 800084e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000852:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000856:	d202      	bcs.n	800085e <__aeabi_ddiv+0x6e>
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	1ab6      	subs	r6, r6, r2
 8000860:	eb65 0503 	sbc.w	r5, r5, r3
 8000864:	085b      	lsrs	r3, r3, #1
 8000866:	ea4f 0232 	mov.w	r2, r2, rrx
 800086a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800086e:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000872:	ebb6 0e02 	subs.w	lr, r6, r2
 8000876:	eb75 0e03 	sbcs.w	lr, r5, r3
 800087a:	bf22      	ittt	cs
 800087c:	1ab6      	subcs	r6, r6, r2
 800087e:	4675      	movcs	r5, lr
 8000880:	ea40 000c 	orrcs.w	r0, r0, ip
 8000884:	085b      	lsrs	r3, r3, #1
 8000886:	ea4f 0232 	mov.w	r2, r2, rrx
 800088a:	ebb6 0e02 	subs.w	lr, r6, r2
 800088e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000892:	bf22      	ittt	cs
 8000894:	1ab6      	subcs	r6, r6, r2
 8000896:	4675      	movcs	r5, lr
 8000898:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800089c:	085b      	lsrs	r3, r3, #1
 800089e:	ea4f 0232 	mov.w	r2, r2, rrx
 80008a2:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008aa:	bf22      	ittt	cs
 80008ac:	1ab6      	subcs	r6, r6, r2
 80008ae:	4675      	movcs	r5, lr
 80008b0:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	ebb6 0e02 	subs.w	lr, r6, r2
 80008be:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c2:	bf22      	ittt	cs
 80008c4:	1ab6      	subcs	r6, r6, r2
 80008c6:	4675      	movcs	r5, lr
 80008c8:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008cc:	ea55 0e06 	orrs.w	lr, r5, r6
 80008d0:	d018      	beq.n	8000904 <__aeabi_ddiv+0x114>
 80008d2:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008d6:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008da:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008de:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008e2:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008e6:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008ea:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008ee:	d1c0      	bne.n	8000872 <__aeabi_ddiv+0x82>
 80008f0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008f4:	d10b      	bne.n	800090e <__aeabi_ddiv+0x11e>
 80008f6:	ea41 0100 	orr.w	r1, r1, r0
 80008fa:	f04f 0000 	mov.w	r0, #0
 80008fe:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000902:	e7b6      	b.n	8000872 <__aeabi_ddiv+0x82>
 8000904:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000908:	bf04      	itt	eq
 800090a:	4301      	orreq	r1, r0
 800090c:	2000      	moveq	r0, #0
 800090e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000912:	bf88      	it	hi
 8000914:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000918:	f63f aeaf 	bhi.w	800067a <__aeabi_dmul+0xde>
 800091c:	ebb5 0c03 	subs.w	ip, r5, r3
 8000920:	bf04      	itt	eq
 8000922:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000926:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800092a:	f150 0000 	adcs.w	r0, r0, #0
 800092e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000932:	bd70      	pop	{r4, r5, r6, pc}
 8000934:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000938:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 800093c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000940:	bfc2      	ittt	gt
 8000942:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000946:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800094a:	bd70      	popgt	{r4, r5, r6, pc}
 800094c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000950:	f04f 0e00 	mov.w	lr, #0
 8000954:	3c01      	subs	r4, #1
 8000956:	e690      	b.n	800067a <__aeabi_dmul+0xde>
 8000958:	ea45 0e06 	orr.w	lr, r5, r6
 800095c:	e68d      	b.n	800067a <__aeabi_dmul+0xde>
 800095e:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000962:	ea94 0f0c 	teq	r4, ip
 8000966:	bf08      	it	eq
 8000968:	ea95 0f0c 	teqeq	r5, ip
 800096c:	f43f af3b 	beq.w	80007e6 <__aeabi_dmul+0x24a>
 8000970:	ea94 0f0c 	teq	r4, ip
 8000974:	d10a      	bne.n	800098c <__aeabi_ddiv+0x19c>
 8000976:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800097a:	f47f af34 	bne.w	80007e6 <__aeabi_dmul+0x24a>
 800097e:	ea95 0f0c 	teq	r5, ip
 8000982:	f47f af25 	bne.w	80007d0 <__aeabi_dmul+0x234>
 8000986:	4610      	mov	r0, r2
 8000988:	4619      	mov	r1, r3
 800098a:	e72c      	b.n	80007e6 <__aeabi_dmul+0x24a>
 800098c:	ea95 0f0c 	teq	r5, ip
 8000990:	d106      	bne.n	80009a0 <__aeabi_ddiv+0x1b0>
 8000992:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000996:	f43f aefd 	beq.w	8000794 <__aeabi_dmul+0x1f8>
 800099a:	4610      	mov	r0, r2
 800099c:	4619      	mov	r1, r3
 800099e:	e722      	b.n	80007e6 <__aeabi_dmul+0x24a>
 80009a0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009a4:	bf18      	it	ne
 80009a6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009aa:	f47f aec5 	bne.w	8000738 <__aeabi_dmul+0x19c>
 80009ae:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009b2:	f47f af0d 	bne.w	80007d0 <__aeabi_dmul+0x234>
 80009b6:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ba:	f47f aeeb 	bne.w	8000794 <__aeabi_dmul+0x1f8>
 80009be:	e712      	b.n	80007e6 <__aeabi_dmul+0x24a>

080009c0 <__aeabi_d2iz>:
 80009c0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009c4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80009c8:	d215      	bcs.n	80009f6 <__aeabi_d2iz+0x36>
 80009ca:	d511      	bpl.n	80009f0 <__aeabi_d2iz+0x30>
 80009cc:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80009d0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80009d4:	d912      	bls.n	80009fc <__aeabi_d2iz+0x3c>
 80009d6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009da:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80009de:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80009e2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80009e6:	fa23 f002 	lsr.w	r0, r3, r2
 80009ea:	bf18      	it	ne
 80009ec:	4240      	negne	r0, r0
 80009ee:	4770      	bx	lr
 80009f0:	f04f 0000 	mov.w	r0, #0
 80009f4:	4770      	bx	lr
 80009f6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009fa:	d105      	bne.n	8000a08 <__aeabi_d2iz+0x48>
 80009fc:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a00:	bf08      	it	eq
 8000a02:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a06:	4770      	bx	lr
 8000a08:	f04f 0000 	mov.w	r0, #0
 8000a0c:	4770      	bx	lr
 8000a0e:	bf00      	nop

08000a10 <Reset_Handler>:
 8000a10:	2100      	movs	r1, #0
 8000a12:	e003      	b.n	8000a1c <DataInit>

08000a14 <CopyData>:
 8000a14:	4b0a      	ldr	r3, [pc, #40]	; (8000a40 <Zerobss+0x10>)
 8000a16:	585b      	ldr	r3, [r3, r1]
 8000a18:	5043      	str	r3, [r0, r1]
 8000a1a:	3104      	adds	r1, #4

08000a1c <DataInit>:
 8000a1c:	4809      	ldr	r0, [pc, #36]	; (8000a44 <Zerobss+0x14>)
 8000a1e:	4b0a      	ldr	r3, [pc, #40]	; (8000a48 <Zerobss+0x18>)
 8000a20:	1842      	adds	r2, r0, r1
 8000a22:	429a      	cmp	r2, r3
 8000a24:	d3f6      	bcc.n	8000a14 <CopyData>
 8000a26:	4a09      	ldr	r2, [pc, #36]	; (8000a4c <Zerobss+0x1c>)
 8000a28:	e002      	b.n	8000a30 <Zerobss>

08000a2a <FillZerobss>:
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	f842 3b04 	str.w	r3, [r2], #4

08000a30 <Zerobss>:
 8000a30:	4b07      	ldr	r3, [pc, #28]	; (8000a50 <Zerobss+0x20>)
 8000a32:	429a      	cmp	r2, r3
 8000a34:	d3f9      	bcc.n	8000a2a <FillZerobss>
 8000a36:	f007 ff6d 	bl	8008914 <SystemInit>
 8000a3a:	f000 f8fd 	bl	8000c38 <main>
 8000a3e:	4770      	bx	lr
 8000a40:	0800c170 	stmdaeq	r0, {r4, r5, r6, r8, lr, pc}
 8000a44:	20001000 	andcs	r1, r0, r0
 8000a48:	2000107c 	andcs	r1, r0, ip, ror r0
 8000a4c:	20001080 	andcs	r1, r0, r0, lsl #1
 8000a50:	200087b4 			; <UNDEFINED> instruction: 0x200087b4

08000a54 <ADC0_1_IRQHandler>:
 8000a54:	e7fe      	b.n	8000a54 <ADC0_1_IRQHandler>

08000a56 <PixelDmxStartStop::~PixelDmxStartStop()>:
 8000a56:	4770      	bx	lr

08000a58 <PixelDmxStartStop::Start()>:
 8000a58:	4b01      	ldr	r3, [pc, #4]	; (8000a60 <PixelDmxStartStop::Start()+0x8>)
 8000a5a:	2204      	movs	r2, #4
 8000a5c:	611a      	str	r2, [r3, #16]
 8000a5e:	4770      	bx	lr
 8000a60:	40011000 	andmi	r1, r1, r0

08000a64 <PixelDmxStartStop::Stop()>:
 8000a64:	4b01      	ldr	r3, [pc, #4]	; (8000a6c <PixelDmxStartStop::Stop()+0x8>)
 8000a66:	2204      	movs	r2, #4
 8000a68:	615a      	str	r2, [r3, #20]
 8000a6a:	4770      	bx	lr
 8000a6c:	40011000 	andmi	r1, r1, r0

08000a70 <PixelDmxStartStop::~PixelDmxStartStop()>:
 8000a70:	b510      	push	{r4, lr}
 8000a72:	4604      	mov	r4, r0
 8000a74:	f007 fd1f 	bl	80084b6 <operator delete(void*)>
 8000a78:	4620      	mov	r0, r4
 8000a7a:	bd10      	pop	{r4, pc}

08000a7c <RDMResponder::PersonalityUpdate(LightSet*)>:
 8000a7c:	b570      	push	{r4, r5, r6, lr}
 8000a7e:	4e0a      	ldr	r6, [pc, #40]	; (8000aa8 <RDMResponder::PersonalityUpdate(LightSet*)+0x2c>)
 8000a80:	4604      	mov	r4, r0
 8000a82:	6830      	ldr	r0, [r6, #0]
 8000a84:	4281      	cmp	r1, r0
 8000a86:	460d      	mov	r5, r1
 8000a88:	d007      	beq.n	8000a9a <RDMResponder::PersonalityUpdate(LightSet*)+0x1e>
 8000a8a:	6803      	ldr	r3, [r0, #0]
 8000a8c:	2100      	movs	r1, #0
 8000a8e:	68db      	ldr	r3, [r3, #12]
 8000a90:	4798      	blx	r3
 8000a92:	4b06      	ldr	r3, [pc, #24]	; (8000aac <RDMResponder::PersonalityUpdate(LightSet*)+0x30>)
 8000a94:	6035      	str	r5, [r6, #0]
 8000a96:	2200      	movs	r2, #0
 8000a98:	701a      	strb	r2, [r3, #0]
 8000a9a:	f894 1081 	ldrb.w	r1, [r4, #129]	; 0x81
 8000a9e:	4620      	mov	r0, r4
 8000aa0:	f000 fbee 	bl	8001280 <RDMResponder::PersonalityUpdate(unsigned long)>
 8000aa4:	bd70      	pop	{r4, r5, r6, pc}
 8000aa6:	bf00      	nop
 8000aa8:	200011a0 	andcs	r1, r0, r0, lsr #3
 8000aac:	2000119c 	mulcs	r0, ip, r1

08000ab0 <RDMResponder::DmxStartAddressUpdate()>:
 8000ab0:	b508      	push	{r3, lr}
 8000ab2:	f890 2083 	ldrb.w	r2, [r0, #131]	; 0x83
 8000ab6:	f890 1084 	ldrb.w	r1, [r0, #132]	; 0x84
 8000aba:	eb01 2102 	add.w	r1, r1, r2, lsl #8
 8000abe:	b289      	uxth	r1, r1
 8000ac0:	f000 fbca 	bl	8001258 <RDMResponder::DmxStartAddressUpdate(unsigned short)>
 8000ac4:	bd08      	pop	{r3, pc}

08000ac6 <Display::ClearLine(unsigned long) [clone .isra.0]>:
 8000ac6:	b110      	cbz	r0, 8000ace <Display::ClearLine(unsigned long) [clone .isra.0]+0x8>
 8000ac8:	6803      	ldr	r3, [r0, #0]
 8000aca:	691b      	ldr	r3, [r3, #16]
 8000acc:	4718      	bx	r3
 8000ace:	4770      	bx	lr

08000ad0 <RDMResponder::~RDMResponder()>:
 8000ad0:	4b0e      	ldr	r3, [pc, #56]	; (8000b0c <RDMResponder::~RDMResponder()+0x3c>)
 8000ad2:	b510      	push	{r4, lr}
 8000ad4:	4604      	mov	r4, r0
 8000ad6:	f840 3b64 	str.w	r3, [r0], #100
 8000ada:	f002 fb7b 	bl	80031d4 <RDMSubDevices::~RDMSubDevices()>
 8000ade:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8000ae2:	f001 fb31 	bl	8002148 <RDMSensors::~RDMSensors()>
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	2201      	movs	r2, #1
 8000aea:	4619      	mov	r1, r3
 8000aec:	f104 00a4 	add.w	r0, r4, #164	; 0xa4
 8000af0:	f002 fff8 	bl	8003ae4 <Dmx::SetPortDirection(unsigned long, dmx::PortDirection, bool)>
 8000af4:	4b06      	ldr	r3, [pc, #24]	; (8000b10 <RDMResponder::~RDMResponder()+0x40>)
 8000af6:	6818      	ldr	r0, [r3, #0]
 8000af8:	6803      	ldr	r3, [r0, #0]
 8000afa:	2100      	movs	r1, #0
 8000afc:	68db      	ldr	r3, [r3, #12]
 8000afe:	4798      	blx	r3
 8000b00:	4b04      	ldr	r3, [pc, #16]	; (8000b14 <RDMResponder::~RDMResponder()+0x44>)
 8000b02:	2200      	movs	r2, #0
 8000b04:	701a      	strb	r2, [r3, #0]
 8000b06:	4620      	mov	r0, r4
 8000b08:	bd10      	pop	{r4, pc}
 8000b0a:	bf00      	nop
 8000b0c:	0800a588 	stmdaeq	r0, {r3, r7, r8, sl, sp, pc}
 8000b10:	200011a0 	andcs	r1, r0, r0, lsr #3
 8000b14:	2000119c 	mulcs	r0, ip, r1

08000b18 <RDMResponder::~RDMResponder()>:
 8000b18:	b510      	push	{r4, lr}
 8000b1a:	4604      	mov	r4, r0
 8000b1c:	f7ff ffd8 	bl	8000ad0 <RDMResponder::~RDMResponder()>
 8000b20:	4620      	mov	r0, r4
 8000b22:	f007 fcc8 	bl	80084b6 <operator delete(void*)>
 8000b26:	4620      	mov	r0, r4
 8000b28:	bd10      	pop	{r4, pc}

08000b2a <Display::Printf(unsigned long, char const*, ...)>:
 8000b2a:	b40c      	push	{r2, r3}
 8000b2c:	b570      	push	{r4, r5, r6, lr}
 8000b2e:	69c4      	ldr	r4, [r0, #28]
 8000b30:	b08a      	sub	sp, #40	; 0x28
 8000b32:	4605      	mov	r5, r0
 8000b34:	460e      	mov	r6, r1
 8000b36:	b174      	cbz	r4, 8000b56 <Display::Printf(unsigned long, char const*, ...)+0x2c>
 8000b38:	ab0f      	add	r3, sp, #60	; 0x3c
 8000b3a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8000b3c:	9301      	str	r3, [sp, #4]
 8000b3e:	2120      	movs	r1, #32
 8000b40:	a802      	add	r0, sp, #8
 8000b42:	f001 f8bb 	bl	8001cbc <vsnprintf>
 8000b46:	4604      	mov	r4, r0
 8000b48:	69e8      	ldr	r0, [r5, #28]
 8000b4a:	6803      	ldr	r3, [r0, #0]
 8000b4c:	aa02      	add	r2, sp, #8
 8000b4e:	69dd      	ldr	r5, [r3, #28]
 8000b50:	4631      	mov	r1, r6
 8000b52:	4623      	mov	r3, r4
 8000b54:	47a8      	blx	r5
 8000b56:	4620      	mov	r0, r4
 8000b58:	b00a      	add	sp, #40	; 0x28
 8000b5a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8000b5e:	b002      	add	sp, #8
 8000b60:	4770      	bx	lr
	...

08000b64 <Display::SetSleep(bool)>:
 8000b64:	b538      	push	{r3, r4, r5, lr}
 8000b66:	4604      	mov	r4, r0
 8000b68:	69c0      	ldr	r0, [r0, #28]
 8000b6a:	460d      	mov	r5, r1
 8000b6c:	b138      	cbz	r0, 8000b7e <Display::SetSleep(bool)+0x1a>
 8000b6e:	6803      	ldr	r3, [r0, #0]
 8000b70:	7421      	strb	r1, [r4, #16]
 8000b72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b74:	4798      	blx	r3
 8000b76:	b915      	cbnz	r5, 8000b7e <Display::SetSleep(bool)+0x1a>
 8000b78:	4b01      	ldr	r3, [pc, #4]	; (8000b80 <Display::SetSleep(bool)+0x1c>)
 8000b7a:	681b      	ldr	r3, [r3, #0]
 8000b7c:	6063      	str	r3, [r4, #4]
 8000b7e:	bd38      	pop	{r3, r4, r5, pc}
 8000b80:	200027ac 	andcs	r2, r0, ip, lsr #15

08000b84 <RDMPersonality::RDMPersonality(char const*, LightSet*)>:
 8000b84:	2300      	movs	r3, #0
 8000b86:	b570      	push	{r4, r5, r6, lr}
 8000b88:	4604      	mov	r4, r0
 8000b8a:	460e      	mov	r6, r1
 8000b8c:	6043      	str	r3, [r0, #4]
 8000b8e:	6283      	str	r3, [r0, #40]	; 0x28
 8000b90:	4615      	mov	r5, r2
 8000b92:	b972      	cbnz	r2, 8000bb2 <RDMPersonality::RDMPersonality(char const*, LightSet*)+0x2e>
 8000b94:	8002      	strh	r2, [r0, #0]
 8000b96:	f104 0208 	add.w	r2, r4, #8
 8000b9a:	1e71      	subs	r1, r6, #1
 8000b9c:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	62a3      	str	r3, [r4, #40]	; 0x28
 8000ba4:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8000ba8:	b10b      	cbz	r3, 8000bae <RDMPersonality::RDMPersonality(char const*, LightSet*)+0x2a>
 8000baa:	4290      	cmp	r0, r2
 8000bac:	d108      	bne.n	8000bc0 <RDMPersonality::RDMPersonality(char const*, LightSet*)+0x3c>
 8000bae:	4620      	mov	r0, r4
 8000bb0:	bd70      	pop	{r4, r5, r6, pc}
 8000bb2:	6813      	ldr	r3, [r2, #0]
 8000bb4:	4610      	mov	r0, r2
 8000bb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bb8:	4798      	blx	r3
 8000bba:	6065      	str	r5, [r4, #4]
 8000bbc:	8020      	strh	r0, [r4, #0]
 8000bbe:	e7ea      	b.n	8000b96 <RDMPersonality::RDMPersonality(char const*, LightSet*)+0x12>
 8000bc0:	f802 3b01 	strb.w	r3, [r2], #1
 8000bc4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000bc6:	3301      	adds	r3, #1
 8000bc8:	e7eb      	b.n	8000ba2 <RDMPersonality::RDMPersonality(char const*, LightSet*)+0x1e>
	...

08000bcc <display::timeout::gpio_init()>:
 8000bcc:	b510      	push	{r4, lr}
 8000bce:	f240 6003 	movw	r0, #1539	; 0x603
 8000bd2:	f008 f93d 	bl	8008e50 <rcu_periph_clock_enable>
 8000bd6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000bda:	4803      	ldr	r0, [pc, #12]	; (8000be8 <display::timeout::gpio_init()+0x1c>)
 8000bdc:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000be0:	2203      	movs	r2, #3
 8000be2:	2148      	movs	r1, #72	; 0x48
 8000be4:	f008 b8a6 	b.w	8008d34 <gpio_init>
 8000be8:	40010c00 	andmi	r0, r1, r0, lsl #24

08000bec <display::timeout::gpio_renew()>:
 8000bec:	4b03      	ldr	r3, [pc, #12]	; (8000bfc <display::timeout::gpio_renew()+0x10>)
 8000bee:	f8d3 0c08 	ldr.w	r0, [r3, #3080]	; 0xc08
 8000bf2:	f480 4080 	eor.w	r0, r0, #16384	; 0x4000
 8000bf6:	f3c0 3080 	ubfx	r0, r0, #14, #1
 8000bfa:	4770      	bx	lr
 8000bfc:	40010000 	andmi	r0, r1, r0

08000c00 <is_config_mode()>:
 8000c00:	b508      	push	{r3, lr}
 8000c02:	f240 6002 	movw	r0, #1538	; 0x602
 8000c06:	f008 f923 	bl	8008e50 <rcu_periph_clock_enable>
 8000c0a:	2340      	movs	r3, #64	; 0x40
 8000c0c:	2203      	movs	r2, #3
 8000c0e:	4806      	ldr	r0, [pc, #24]	; (8000c28 <is_config_mode()+0x28>)
 8000c10:	2148      	movs	r1, #72	; 0x48
 8000c12:	f008 f88f 	bl	8008d34 <gpio_init>
 8000c16:	2140      	movs	r1, #64	; 0x40
 8000c18:	4803      	ldr	r0, [pc, #12]	; (8000c28 <is_config_mode()+0x28>)
 8000c1a:	f008 f8da 	bl	8008dd2 <gpio_input_bit_get>
 8000c1e:	fab0 f080 	clz	r0, r0
 8000c22:	0940      	lsrs	r0, r0, #5
 8000c24:	bd08      	pop	{r3, pc}
 8000c26:	bf00      	nop
 8000c28:	40010800 	andmi	r0, r1, r0, lsl #16

08000c2c <Hardware::RebootHandler()>:
 8000c2c:	4b01      	ldr	r3, [pc, #4]	; (8000c34 <Hardware::RebootHandler()+0x8>)
 8000c2e:	6818      	ldr	r0, [r3, #0]
 8000c30:	f006 b852 	b.w	8006cd8 <WS28xx::Blackout()>
 8000c34:	20001634 	andcs	r1, r0, r4, lsr r6

08000c38 <main>:
 8000c38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000c3c:	f5ad 7d49 	sub.w	sp, sp, #804	; 0x324
 8000c40:	a82d      	add	r0, sp, #180	; 0xb4
 8000c42:	f007 fa0d 	bl	8008060 <Hardware::Hardware()>
 8000c46:	a868      	add	r0, sp, #416	; 0x1a0
 8000c48:	f006 f8fc 	bl	8006e44 <DisplayUdf::DisplayUdf()>
 8000c4c:	a808      	add	r0, sp, #32
 8000c4e:	f006 f9e1 	bl	8007014 <ConfigStore::ConfigStore()>
 8000c52:	a815      	add	r0, sp, #84	; 0x54
 8000c54:	f006 f8d2 	bl	8006dfc <Network::Network()>
 8000c58:	4bb1      	ldr	r3, [pc, #708]	; (8000f20 <main+0x2e8>)
 8000c5a:	4ab2      	ldr	r2, [pc, #712]	; (8000f24 <main+0x2ec>)
 8000c5c:	49b2      	ldr	r1, [pc, #712]	; (8000f28 <main+0x2f0>)
 8000c5e:	a806      	add	r0, sp, #24
 8000c60:	f007 f98e 	bl	8007f80 <FirmwareVersion::FirmwareVersion(char const*, char const*, char const*)>
 8000c64:	f7ff ffcc 	bl	8000c00 <is_config_mode()>
 8000c68:	4606      	mov	r6, r0
 8000c6a:	48b0      	ldr	r0, [pc, #704]	; (8000f2c <main+0x2f4>)
 8000c6c:	f001 f836 	bl	8001cdc <puts>
 8000c70:	49af      	ldr	r1, [pc, #700]	; (8000f30 <main+0x2f8>)
 8000c72:	48b0      	ldr	r0, [pc, #704]	; (8000f34 <main+0x2fc>)
 8000c74:	f000 fffa 	bl	8001c6c <printf>
 8000c78:	22aa      	movs	r2, #170	; 0xaa
 8000c7a:	2303      	movs	r3, #3
 8000c7c:	e9cd 3240 	strd	r3, r2, [sp, #256]	; 0x100
 8000c80:	2106      	movs	r1, #6
 8000c82:	2300      	movs	r3, #0
 8000c84:	e9cd 1342 	strd	r1, r3, [sp, #264]	; 0x108
 8000c88:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
 8000c8c:	9344      	str	r3, [sp, #272]	; 0x110
 8000c8e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000c92:	f8ad 3114 	strh.w	r3, [sp, #276]	; 0x114
 8000c96:	4ba8      	ldr	r3, [pc, #672]	; (8000f38 <main+0x300>)
 8000c98:	9346      	str	r3, [sp, #280]	; 0x118
 8000c9a:	a80d      	add	r0, sp, #52	; 0x34
 8000c9c:	2301      	movs	r3, #1
 8000c9e:	e9cd 3347 	strd	r3, r3, [sp, #284]	; 0x11c
 8000ca2:	9249      	str	r2, [sp, #292]	; 0x124
 8000ca4:	f8ad 312c 	strh.w	r3, [sp, #300]	; 0x12c
 8000ca8:	f006 fc10 	bl	80074cc <StorePixelDmx::StorePixelDmx()>
 8000cac:	a90d      	add	r1, sp, #52	; 0x34
 8000cae:	a81e      	add	r0, sp, #120	; 0x78
 8000cb0:	f005 f8ba 	bl	8005e28 <PixelDmxParams::PixelDmxParams(PixelDmxParamsStore*)>
 8000cb4:	a81e      	add	r0, sp, #120	; 0x78
 8000cb6:	f005 f8cd 	bl	8005e54 <PixelDmxParams::Load()>
 8000cba:	b130      	cbz	r0, 8000cca <main+0x92>
 8000cbc:	a81e      	add	r0, sp, #120	; 0x78
 8000cbe:	f005 f912 	bl	8005ee6 <PixelDmxParams::Dump()>
 8000cc2:	a940      	add	r1, sp, #256	; 0x100
 8000cc4:	a81e      	add	r0, sp, #120	; 0x78
 8000cc6:	f005 f8d1 	bl	8005e6c <PixelDmxParams::Set(PixelDmxConfiguration*)>
 8000cca:	ab19      	add	r3, sp, #100	; 0x64
 8000ccc:	aa09      	add	r2, sp, #36	; 0x24
 8000cce:	2101      	movs	r1, #1
 8000cd0:	a840      	add	r0, sp, #256	; 0x100
 8000cd2:	f004 fbdf 	bl	8005494 <PixelDmxConfiguration::Validate(unsigned long, unsigned long&, pixeldmxconfiguration::PortInfo&)>
 8000cd6:	9b4a      	ldr	r3, [sp, #296]	; 0x128
 8000cd8:	2b01      	cmp	r3, #1
 8000cda:	d90a      	bls.n	8000cf2 <main+0xba>
 8000cdc:	9948      	ldr	r1, [sp, #288]	; 0x120
 8000cde:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8000ce0:	ebb2 2f41 	cmp.w	r2, r1, lsl #9
 8000ce4:	ea4f 2341 	mov.w	r3, r1, lsl #9
 8000ce8:	bf8c      	ite	hi
 8000cea:	23aa      	movhi	r3, #170	; 0xaa
 8000cec:	fbb3 f3f2 	udivls	r3, r3, r2
 8000cf0:	9341      	str	r3, [sp, #260]	; 0x104
 8000cf2:	a940      	add	r1, sp, #256	; 0x100
 8000cf4:	4f91      	ldr	r7, [pc, #580]	; (8000f3c <main+0x304>)
 8000cf6:	a87d      	add	r0, sp, #500	; 0x1f4
 8000cf8:	f005 f858 	bl	8005dac <WS28xxDmx::WS28xxDmx(PixelDmxConfiguration&)>
 8000cfc:	f10d 0938 	add.w	r9, sp, #56	; 0x38
 8000d00:	4b8f      	ldr	r3, [pc, #572]	; (8000f40 <main+0x308>)
 8000d02:	930a      	str	r3, [sp, #40]	; 0x28
 8000d04:	f240 6004 	movw	r0, #1540	; 0x604
 8000d08:	f8cd 9248 	str.w	r9, [sp, #584]	; 0x248
 8000d0c:	f008 f8a0 	bl	8008e50 <rcu_periph_clock_enable>
 8000d10:	2304      	movs	r3, #4
 8000d12:	2203      	movs	r2, #3
 8000d14:	2110      	movs	r1, #16
 8000d16:	4638      	mov	r0, r7
 8000d18:	f008 f80c 	bl	8008d34 <gpio_init>
 8000d1c:	2304      	movs	r3, #4
 8000d1e:	617b      	str	r3, [r7, #20]
 8000d20:	ac0a      	add	r4, sp, #40	; 0x28
 8000d22:	9493      	str	r4, [sp, #588]	; 0x24c
 8000d24:	2101      	movs	r1, #1
 8000d26:	f89d 408c 	ldrb.w	r4, [sp, #140]	; 0x8c
 8000d2a:	a807      	add	r0, sp, #28
 8000d2c:	f005 fad6 	bl	80062dc <PixelPatterns::PixelPatterns(unsigned long)>
 8000d30:	4b84      	ldr	r3, [pc, #528]	; (8000f44 <main+0x30c>)
 8000d32:	2c05      	cmp	r4, #5
 8000d34:	601c      	str	r4, [r3, #0]
 8000d36:	f340 81e0 	ble.w	80010fa <main+0x4c2>
 8000d3a:	4649      	mov	r1, r9
 8000d3c:	a80b      	add	r0, sp, #44	; 0x2c
 8000d3e:	f005 f8f1 	bl	8005f24 <PixelDmxParamsRdm::PixelDmxParamsRdm(PixelDmxStore*)>
 8000d42:	9840      	ldr	r0, [sp, #256]	; 0x100
 8000d44:	f005 fa44 	bl	80061d0 <PixelType::GetType(pixel::Type)>
 8000d48:	9005      	str	r0, [sp, #20]
 8000d4a:	9842      	ldr	r0, [sp, #264]	; 0x108
 8000d4c:	9d41      	ldr	r5, [sp, #260]	; 0x104
 8000d4e:	f8dd 8120 	ldr.w	r8, [sp, #288]	; 0x120
 8000d52:	f005 fa49 	bl	80061e8 <PixelType::GetMap(pixel::Map)>
 8000d56:	9b05      	ldr	r3, [sp, #20]
 8000d58:	4a7b      	ldr	r2, [pc, #492]	; (8000f48 <main+0x310>)
 8000d5a:	9500      	str	r5, [sp, #0]
 8000d5c:	e9cd 8001 	strd	r8, r0, [sp, #4]
 8000d60:	211f      	movs	r1, #31
 8000d62:	a825      	add	r0, sp, #148	; 0x94
 8000d64:	f000 ff92 	bl	8001c8c <snprintf>
 8000d68:	202c      	movs	r0, #44	; 0x2c
 8000d6a:	f007 fba8 	bl	80084be <operator new(unsigned int)>
 8000d6e:	aa7d      	add	r2, sp, #500	; 0x1f4
 8000d70:	a925      	add	r1, sp, #148	; 0x94
 8000d72:	4605      	mov	r5, r0
 8000d74:	f7ff ff06 	bl	8000b84 <RDMPersonality::RDMPersonality(char const*, LightSet*)>
 8000d78:	202c      	movs	r0, #44	; 0x2c
 8000d7a:	950f      	str	r5, [sp, #60]	; 0x3c
 8000d7c:	f007 fb9f 	bl	80084be <operator new(unsigned int)>
 8000d80:	4972      	ldr	r1, [pc, #456]	; (8000f4c <main+0x314>)
 8000d82:	aa0b      	add	r2, sp, #44	; 0x2c
 8000d84:	4605      	mov	r5, r0
 8000d86:	f7ff fefd 	bl	8000b84 <RDMPersonality::RDMPersonality(char const*, LightSet*)>
 8000d8a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8000d8c:	9510      	str	r5, [sp, #64]	; 0x40
 8000d8e:	a8be      	add	r0, sp, #760	; 0x2f8
 8000d90:	f8d3 8004 	ldr.w	r8, [r3, #4]
 8000d94:	ad95      	add	r5, sp, #596	; 0x254
 8000d96:	f002 fd4f 	bl	8003838 <Dmx::Dmx()>
 8000d9a:	4b6d      	ldr	r3, [pc, #436]	; (8000f50 <main+0x318>)
 8000d9c:	2202      	movs	r2, #2
 8000d9e:	a90f      	add	r1, sp, #60	; 0x3c
 8000da0:	4628      	mov	r0, r5
 8000da2:	f8c3 8000 	str.w	r8, [r3]
 8000da6:	f003 f8d3 	bl	8003f50 <RDMDeviceResponder::RDMDeviceResponder(RDMPersonality**, unsigned long)>
 8000daa:	2101      	movs	r1, #1
 8000dac:	a8c5      	add	r0, sp, #788	; 0x314
 8000dae:	f003 fab4 	bl	800431a <RDMHandler::RDMHandler(bool)>
 8000db2:	4b68      	ldr	r3, [pc, #416]	; (8000f54 <main+0x31c>)
 8000db4:	9395      	str	r3, [sp, #596]	; 0x254
 8000db6:	4b68      	ldr	r3, [pc, #416]	; (8000f58 <main+0x320>)
 8000db8:	a811      	add	r0, sp, #68	; 0x44
 8000dba:	601d      	str	r5, [r3, #0]
 8000dbc:	4b67      	ldr	r3, [pc, #412]	; (8000f5c <main+0x324>)
 8000dbe:	93a7      	str	r3, [sp, #668]	; 0x29c
 8000dc0:	f006 fc3a 	bl	8007638 <StoreRDMSensors::StoreRDMSensors()>
 8000dc4:	a911      	add	r1, sp, #68	; 0x44
 8000dc6:	a858      	add	r0, sp, #352	; 0x160
 8000dc8:	f001 fb96 	bl	80024f8 <RDMSensorsParams::RDMSensorsParams(RDMSensorsParamsStore*)>
 8000dcc:	a858      	add	r0, sp, #352	; 0x160
 8000dce:	f001 fb9d 	bl	800250c <RDMSensorsParams::Load()>
 8000dd2:	b130      	cbz	r0, 8000de2 <main+0x1aa>
 8000dd4:	a858      	add	r0, sp, #352	; 0x160
 8000dd6:	f001 fbaf 	bl	8002538 <RDMSensorsParams::Dump()>
 8000dda:	2100      	movs	r1, #0
 8000ddc:	a858      	add	r0, sp, #352	; 0x160
 8000dde:	f001 fbc3 	bl	8002568 <RDMSensorsParams::Set(RDMSensorStore*)>
 8000de2:	4628      	mov	r0, r5
 8000de4:	f003 f900 	bl	8003fe8 <RDMDeviceResponder::Init()>
 8000de8:	a813      	add	r0, sp, #76	; 0x4c
 8000dea:	f006 fbcd 	bl	8007588 <StoreRDMDevice::StoreRDMDevice()>
 8000dee:	a913      	add	r1, sp, #76	; 0x4c
 8000df0:	a84c      	add	r0, sp, #304	; 0x130
 8000df2:	f003 f83b 	bl	8003e6c <RDMDeviceParams::RDMDeviceParams(RDMDeviceParamsStore*)>
 8000df6:	a84c      	add	r0, sp, #304	; 0x130
 8000df8:	f003 f84d 	bl	8003e96 <RDMDeviceParams::Load()>
 8000dfc:	b130      	cbz	r0, 8000e0c <main+0x1d4>
 8000dfe:	a84c      	add	r0, sp, #304	; 0x130
 8000e00:	f003 f889 	bl	8003f16 <RDMDeviceParams::Dump()>
 8000e04:	a996      	add	r1, sp, #600	; 0x258
 8000e06:	a84c      	add	r0, sp, #304	; 0x130
 8000e08:	f003 f850 	bl	8003eac <RDMDeviceParams::Set(RDMDevice*)>
 8000e0c:	ab14      	add	r3, sp, #80	; 0x50
 8000e0e:	93a6      	str	r3, [sp, #664]	; 0x298
 8000e10:	2301      	movs	r3, #1
 8000e12:	461a      	mov	r2, r3
 8000e14:	2100      	movs	r1, #0
 8000e16:	a8be      	add	r0, sp, #760	; 0x2f8
 8000e18:	f002 fe64 	bl	8003ae4 <Dmx::SetPortDirection(unsigned long, dmx::PortDirection, bool)>
 8000e1c:	2e00      	cmp	r6, #0
 8000e1e:	f040 814d 	bne.w	80010bc <main+0x484>
 8000e22:	1e23      	subs	r3, r4, #0
 8000e24:	bf18      	it	ne
 8000e26:	2301      	movne	r3, #1
 8000e28:	f8df 8150 	ldr.w	r8, [pc, #336]	; 8000f7c <main+0x344>
 8000e2c:	4628      	mov	r0, r5
 8000e2e:	f888 3000 	strb.w	r3, [r8]
 8000e32:	f003 f96d 	bl	8004110 <RDMDeviceResponder::Print()>
 8000e36:	f898 1000 	ldrb.w	r1, [r8]
 8000e3a:	4a49      	ldr	r2, [pc, #292]	; (8000f60 <main+0x328>)
 8000e3c:	4b49      	ldr	r3, [pc, #292]	; (8000f64 <main+0x32c>)
 8000e3e:	484a      	ldr	r0, [pc, #296]	; (8000f68 <main+0x330>)
 8000e40:	2900      	cmp	r1, #0
 8000e42:	bf14      	ite	ne
 8000e44:	4611      	movne	r1, r2
 8000e46:	4619      	moveq	r1, r3
 8000e48:	f000 ff10 	bl	8001c6c <printf>
 8000e4c:	2e00      	cmp	r6, #0
 8000e4e:	f040 8150 	bne.w	80010f2 <main+0x4ba>
 8000e52:	a87e      	add	r0, sp, #504	; 0x1f8
 8000e54:	f004 fb64 	bl	8005520 <PixelDmxConfiguration::Print()>
 8000e58:	b13c      	cbz	r4, 8000e6a <main+0x232>
 8000e5a:	4620      	mov	r0, r4
 8000e5c:	f005 fa5e 	bl	800631c <PixelPatterns::GetName(pixelpatterns::Pattern)>
 8000e60:	4622      	mov	r2, r4
 8000e62:	4601      	mov	r1, r0
 8000e64:	4841      	ldr	r0, [pc, #260]	; (8000f6c <main+0x334>)
 8000e66:	f000 ff01 	bl	8001c6c <printf>
 8000e6a:	4941      	ldr	r1, [pc, #260]	; (8000f70 <main+0x338>)
 8000e6c:	a868      	add	r0, sp, #416	; 0x1a0
 8000e6e:	f005 fffb 	bl	8006e68 <DisplayUdf::SetTitle(char const*, ...)>
 8000e72:	2203      	movs	r2, #3
 8000e74:	2102      	movs	r1, #2
 8000e76:	a868      	add	r0, sp, #416	; 0x1a0
 8000e78:	f006 f80a 	bl	8006e90 <DisplayUdf::Set(unsigned long, displayudf::Labels)>
 8000e7c:	220d      	movs	r2, #13
 8000e7e:	2106      	movs	r1, #6
 8000e80:	a868      	add	r0, sp, #416	; 0x1a0
 8000e82:	f006 f805 	bl	8006e90 <DisplayUdf::Set(unsigned long, displayudf::Labels)>
 8000e86:	a80c      	add	r0, sp, #48	; 0x30
 8000e88:	f006 fa22 	bl	80072d0 <StoreDisplayUdf::StoreDisplayUdf()>
 8000e8c:	a90c      	add	r1, sp, #48	; 0x30
 8000e8e:	a836      	add	r0, sp, #216	; 0xd8
 8000e90:	f006 f86a 	bl	8006f68 <DisplayUdfParams::DisplayUdfParams(DisplayUdfParamsStore*)>
 8000e94:	a836      	add	r0, sp, #216	; 0xd8
 8000e96:	f006 f874 	bl	8006f82 <DisplayUdfParams::Load()>
 8000e9a:	b130      	cbz	r0, 8000eaa <main+0x272>
 8000e9c:	a836      	add	r0, sp, #216	; 0xd8
 8000e9e:	f006 f8b1 	bl	8007004 <DisplayUdfParams::Dump()>
 8000ea2:	a968      	add	r1, sp, #416	; 0x1a0
 8000ea4:	a836      	add	r0, sp, #216	; 0xd8
 8000ea6:	f006 f878 	bl	8006f9a <DisplayUdfParams::Set(DisplayUdf*)>
 8000eaa:	a868      	add	r0, sp, #416	; 0x1a0
 8000eac:	f006 f80a 	bl	8006ec4 <DisplayUdf::Show()>
 8000eb0:	9840      	ldr	r0, [sp, #256]	; 0x100
 8000eb2:	f005 f98d 	bl	80061d0 <PixelType::GetType(pixel::Type)>
 8000eb6:	9005      	str	r0, [sp, #20]
 8000eb8:	9842      	ldr	r0, [sp, #264]	; 0x108
 8000eba:	f8dd 8104 	ldr.w	r8, [sp, #260]	; 0x104
 8000ebe:	f8dd 9120 	ldr.w	r9, [sp, #288]	; 0x120
 8000ec2:	f005 f991 	bl	80061e8 <PixelType::GetMap(pixel::Map)>
 8000ec6:	9b05      	ldr	r3, [sp, #20]
 8000ec8:	4a2a      	ldr	r2, [pc, #168]	; (8000f74 <main+0x33c>)
 8000eca:	f8cd 8000 	str.w	r8, [sp]
 8000ece:	e9cd 9001 	strd	r9, r0, [sp, #4]
 8000ed2:	2107      	movs	r1, #7
 8000ed4:	a868      	add	r0, sp, #416	; 0x1a0
 8000ed6:	f7ff fe28 	bl	8000b2a <Display::Printf(unsigned long, char const*, ...)>
 8000eda:	2e00      	cmp	r6, #0
 8000edc:	f000 80f0 	beq.w	80010c0 <main+0x488>
 8000ee0:	986f      	ldr	r0, [sp, #444]	; 0x1bc
 8000ee2:	2103      	movs	r1, #3
 8000ee4:	f7ff fdef 	bl	8000ac6 <Display::ClearLine(unsigned long) [clone .isra.0]>
 8000ee8:	986f      	ldr	r0, [sp, #444]	; 0x1bc
 8000eea:	2104      	movs	r1, #4
 8000eec:	f7ff fdeb 	bl	8000ac6 <Display::ClearLine(unsigned long) [clone .isra.0]>
 8000ef0:	986f      	ldr	r0, [sp, #444]	; 0x1bc
 8000ef2:	b178      	cbz	r0, 8000f14 <main+0x2dc>
 8000ef4:	6844      	ldr	r4, [r0, #4]
 8000ef6:	4920      	ldr	r1, [pc, #128]	; (8000f78 <main+0x340>)
 8000ef8:	2300      	movs	r3, #0
 8000efa:	429c      	cmp	r4, r3
 8000efc:	f103 0301 	add.w	r3, r3, #1
 8000f00:	d903      	bls.n	8000f0a <main+0x2d2>
 8000f02:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8000f06:	2a00      	cmp	r2, #0
 8000f08:	d1f7      	bne.n	8000efa <main+0x2c2>
 8000f0a:	6802      	ldr	r2, [r0, #0]
 8000f0c:	2104      	movs	r1, #4
 8000f0e:	69d4      	ldr	r4, [r2, #28]
 8000f10:	4a19      	ldr	r2, [pc, #100]	; (8000f78 <main+0x340>)
 8000f12:	47a0      	blx	r4
 8000f14:	986f      	ldr	r0, [sp, #444]	; 0x1bc
 8000f16:	2105      	movs	r1, #5
 8000f18:	f7ff fdd5 	bl	8000ac6 <Display::ClearLine(unsigned long) [clone .isra.0]>
 8000f1c:	e030      	b.n	8000f80 <main+0x348>
 8000f1e:	bf00      	nop
 8000f20:	0800a0ce 	stmdaeq	r0, {r1, r2, r3, r6, r7, sp, pc}
 8000f24:	0800a0d7 	stmdaeq	r0, {r0, r1, r2, r4, r6, r7, sp, pc}
 8000f28:	0800a198 	stmdaeq	r0, {r3, r4, r7, r8, sp, pc}
 8000f2c:	2000272a 	andcs	r2, r0, sl, lsr #14
 8000f30:	0800a0e3 	stmdaeq	r0, {r0, r1, r5, r6, r7, sp, pc}
 8000f34:	0800a0f1 	stmdaeq	r0, {r0, r4, r5, r6, r7, sp, pc}
 8000f38:	0800a19c 	stmdaeq	r0, {r2, r3, r4, r7, r8, sp, pc}
 8000f3c:	40011000 	andmi	r1, r1, r0
 8000f40:	0800a188 	stmdaeq	r0, {r3, r7, r8, sp, pc}
 8000f44:	2000162c 	andcs	r1, r0, ip, lsr #12
 8000f48:	0800a0fe 	stmdaeq	r0, {r1, r2, r3, r4, r5, r6, r7, sp, pc}
 8000f4c:	0800a10d 	stmdaeq	r0, {r0, r2, r3, r8, sp, pc}
 8000f50:	200011a0 	andcs	r1, r0, r0, lsr #3
 8000f54:	0800a170 	stmdaeq	r0, {r4, r5, r6, r8, sp, pc}
 8000f58:	20001190 	mulcs	r0, r0, r1
 8000f5c:	00040100 	andeq	r0, r4, r0, lsl #2
 8000f60:	0800a0b1 	stmdaeq	r0, {r0, r4, r5, r7, sp, pc}
 8000f64:	0800a0ba 	stmdaeq	r0, {r1, r3, r4, r5, r7, sp, pc}
 8000f68:	0800a119 	stmdaeq	r0, {r0, r3, r4, r8, sp, pc}
 8000f6c:	0800a125 	stmdaeq	r0, {r0, r2, r5, r8, sp, pc}
 8000f70:	0800a13d 	stmdaeq	r0, {r0, r2, r3, r4, r5, r8, sp, pc}
 8000f74:	0800a153 	stmdaeq	r0, {r0, r1, r4, r6, r8, sp, pc}
 8000f78:	0800a0c2 	stmdaeq	r0, {r1, r6, r7, sp, pc}
 8000f7c:	200011a4 	andcs	r1, r0, r4, lsr #3
 8000f80:	2102      	movs	r1, #2
 8000f82:	a82d      	add	r0, sp, #180	; 0xb4
 8000f84:	f007 f835 	bl	8007ff2 <Hardware::SetMode(hardware::ledblink::Mode)>
 8000f88:	2102      	movs	r1, #2
 8000f8a:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8000f8e:	f007 fea7 	bl	8008ce0 <fwdgt_config>
 8000f92:	2801      	cmp	r0, #1
 8000f94:	bf0c      	ite	eq
 8000f96:	2301      	moveq	r3, #1
 8000f98:	2300      	movne	r3, #0
 8000f9a:	f88d 30c0 	strb.w	r3, [sp, #192]	; 0xc0
 8000f9e:	d101      	bne.n	8000fa4 <main+0x36c>
 8000fa0:	f007 fe8e 	bl	8008cc0 <fwdgt_enable>
 8000fa4:	4e5e      	ldr	r6, [pc, #376]	; (8001120 <main+0x4e8>)
 8000fa6:	4c5f      	ldr	r4, [pc, #380]	; (8001124 <main+0x4ec>)
 8000fa8:	f007 fe92 	bl	8008cd0 <fwdgt_counter_reload>
 8000fac:	4628      	mov	r0, r5
 8000fae:	f001 f86d 	bl	800208c <RDMResponder::Run()>
 8000fb2:	a808      	add	r0, sp, #32
 8000fb4:	f006 f90c 	bl	80071d0 <ConfigStore::Flash()>
 8000fb8:	6833      	ldr	r3, [r6, #0]
 8000fba:	b113      	cbz	r3, 8000fc2 <main+0x38a>
 8000fbc:	a807      	add	r0, sp, #28
 8000fbe:	f005 fbbf 	bl	8006740 <PixelPatterns::Run()>
 8000fc2:	9a6d      	ldr	r2, [sp, #436]	; 0x1b4
 8000fc4:	b16a      	cbz	r2, 8000fe2 <main+0x3aa>
 8000fc6:	f89d 31b0 	ldrb.w	r3, [sp, #432]	; 0x1b0
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	f040 808a 	bne.w	80010e4 <main+0x4ac>
 8000fd0:	6823      	ldr	r3, [r4, #0]
 8000fd2:	9969      	ldr	r1, [sp, #420]	; 0x1a4
 8000fd4:	1a5b      	subs	r3, r3, r1
 8000fd6:	429a      	cmp	r2, r3
 8000fd8:	d203      	bcs.n	8000fe2 <main+0x3aa>
 8000fda:	2101      	movs	r1, #1
 8000fdc:	a868      	add	r0, sp, #416	; 0x1a0
 8000fde:	f7ff fdc1 	bl	8000b64 <Display::SetSleep(bool)>
 8000fe2:	9a33      	ldr	r2, [sp, #204]	; 0xcc
 8000fe4:	2a00      	cmp	r2, #0
 8000fe6:	d0df      	beq.n	8000fa8 <main+0x370>
 8000fe8:	6823      	ldr	r3, [r4, #0]
 8000fea:	9935      	ldr	r1, [sp, #212]	; 0xd4
 8000fec:	1a5b      	subs	r3, r3, r1
 8000fee:	429a      	cmp	r2, r3
 8000ff0:	d8da      	bhi.n	8000fa8 <main+0x370>
 8000ff2:	6823      	ldr	r3, [r4, #0]
 8000ff4:	9335      	str	r3, [sp, #212]	; 0xd4
 8000ff6:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 8000ff8:	2b01      	cmp	r3, #1
 8000ffa:	f083 0201 	eor.w	r2, r3, #1
 8000ffe:	bf18      	it	ne
 8001000:	2301      	movne	r3, #1
 8001002:	9234      	str	r2, [sp, #208]	; 0xd0
 8001004:	bf14      	ite	ne
 8001006:	613b      	strne	r3, [r7, #16]
 8001008:	617b      	streq	r3, [r7, #20]
 800100a:	e7cd      	b.n	8000fa8 <main+0x370>
 800100c:	2300      	movs	r3, #0
 800100e:	2264      	movs	r2, #100	; 0x64
 8001010:	4619      	mov	r1, r3
 8001012:	a807      	add	r0, sp, #28
 8001014:	f005 f98e 	bl	8006334 <PixelPatterns::RainbowCycle(unsigned long, unsigned long, pixelpatterns::Direction)>
 8001018:	e68f      	b.n	8000d3a <main+0x102>
 800101a:	2200      	movs	r2, #0
 800101c:	2364      	movs	r3, #100	; 0x64
 800101e:	e9cd 3200 	strd	r3, r2, [sp]
 8001022:	4611      	mov	r1, r2
 8001024:	4b40      	ldr	r3, [pc, #256]	; (8001128 <main+0x4f0>)
 8001026:	a807      	add	r0, sp, #28
 8001028:	f005 f998 	bl	800635c <PixelPatterns::TheaterChase(unsigned long, unsigned long, unsigned long, unsigned long, pixelpatterns::Direction)>
 800102c:	e685      	b.n	8000d3a <main+0x102>
 800102e:	2100      	movs	r1, #0
 8001030:	4a3d      	ldr	r2, [pc, #244]	; (8001128 <main+0x4f0>)
 8001032:	9100      	str	r1, [sp, #0]
 8001034:	2364      	movs	r3, #100	; 0x64
 8001036:	a807      	add	r0, sp, #28
 8001038:	f005 f9ac 	bl	8006394 <PixelPatterns::ColourWipe(unsigned long, unsigned long, unsigned long, pixelpatterns::Direction)>
 800103c:	e67d      	b.n	8000d3a <main+0x102>
 800103e:	2364      	movs	r3, #100	; 0x64
 8001040:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 8001044:	2100      	movs	r1, #0
 8001046:	a807      	add	r0, sp, #28
 8001048:	f005 f9be 	bl	80063c8 <PixelPatterns::Scanner(unsigned long, unsigned long, unsigned long)>
 800104c:	e675      	b.n	8000d3a <main+0x102>
 800104e:	2200      	movs	r2, #0
 8001050:	2364      	movs	r3, #100	; 0x64
 8001052:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8001056:	230a      	movs	r3, #10
 8001058:	9300      	str	r3, [sp, #0]
 800105a:	4611      	mov	r1, r2
 800105c:	4b32      	ldr	r3, [pc, #200]	; (8001128 <main+0x4f0>)
 800105e:	a807      	add	r0, sp, #28
 8001060:	f005 f9e4 	bl	800642c <PixelPatterns::Fade(unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, pixelpatterns::Direction)>
 8001064:	e669      	b.n	8000d3a <main+0x102>
 8001066:	4b31      	ldr	r3, [pc, #196]	; (800112c <main+0x4f4>)
 8001068:	f8df a0d0 	ldr.w	sl, [pc, #208]	; 800113c <main+0x504>
 800106c:	f8df b0c0 	ldr.w	fp, [pc, #192]	; 8001130 <main+0x4f8>
 8001070:	2500      	movs	r5, #0
 8001072:	61dd      	str	r5, [r3, #28]
 8001074:	46a8      	mov	r8, r5
 8001076:	f8da 3000 	ldr.w	r3, [sl]
 800107a:	429d      	cmp	r5, r3
 800107c:	d308      	bcc.n	8001090 <main+0x458>
 800107e:	f008 fcd9 	bl	8009a34 <gd32_spi_dma_tx_is_active()>
 8001082:	2800      	cmp	r0, #0
 8001084:	d1fb      	bne.n	800107e <main+0x446>
 8001086:	4b2a      	ldr	r3, [pc, #168]	; (8001130 <main+0x4f8>)
 8001088:	6818      	ldr	r0, [r3, #0]
 800108a:	f005 fe09 	bl	8006ca0 <WS28xx::Update()>
 800108e:	e654      	b.n	8000d3a <main+0x102>
 8001090:	f8db 0000 	ldr.w	r0, [fp]
 8001094:	6803      	ldr	r3, [r0, #0]
 8001096:	2b07      	cmp	r3, #7
 8001098:	d008      	beq.n	80010ac <main+0x474>
 800109a:	2300      	movs	r3, #0
 800109c:	f8cd 8000 	str.w	r8, [sp]
 80010a0:	461a      	mov	r2, r3
 80010a2:	4629      	mov	r1, r5
 80010a4:	f005 fb74 	bl	8006790 <WS28xx::SetPixel(unsigned long, unsigned char, unsigned char, unsigned char)>
 80010a8:	3501      	adds	r5, #1
 80010aa:	e7e4      	b.n	8001076 <main+0x43e>
 80010ac:	2300      	movs	r3, #0
 80010ae:	e9cd 8800 	strd	r8, r8, [sp]
 80010b2:	461a      	mov	r2, r3
 80010b4:	4629      	mov	r1, r5
 80010b6:	f005 fc85 	bl	80069c4 <WS28xx::SetPixel(unsigned long, unsigned char, unsigned char, unsigned char, unsigned char)>
 80010ba:	e7f5      	b.n	80010a8 <main+0x470>
 80010bc:	2300      	movs	r3, #0
 80010be:	e6b3      	b.n	8000e28 <main+0x1f0>
 80010c0:	2c00      	cmp	r4, #0
 80010c2:	f43f af5d 	beq.w	8000f80 <main+0x348>
 80010c6:	986f      	ldr	r0, [sp, #444]	; 0x1bc
 80010c8:	2106      	movs	r1, #6
 80010ca:	f7ff fcfc 	bl	8000ac6 <Display::ClearLine(unsigned long) [clone .isra.0]>
 80010ce:	4620      	mov	r0, r4
 80010d0:	f005 f924 	bl	800631c <PixelPatterns::GetName(pixelpatterns::Pattern)>
 80010d4:	4a17      	ldr	r2, [pc, #92]	; (8001134 <main+0x4fc>)
 80010d6:	9400      	str	r4, [sp, #0]
 80010d8:	4603      	mov	r3, r0
 80010da:	2106      	movs	r1, #6
 80010dc:	a868      	add	r0, sp, #416	; 0x1a0
 80010de:	f7ff fd24 	bl	8000b2a <Display::Printf(unsigned long, char const*, ...)>
 80010e2:	e74d      	b.n	8000f80 <main+0x348>
 80010e4:	f7ff fd82 	bl	8000bec <display::timeout::gpio_renew()>
 80010e8:	2800      	cmp	r0, #0
 80010ea:	f43f af7a 	beq.w	8000fe2 <main+0x3aa>
 80010ee:	2100      	movs	r1, #0
 80010f0:	e774      	b.n	8000fdc <main+0x3a4>
 80010f2:	4811      	ldr	r0, [pc, #68]	; (8001138 <main+0x500>)
 80010f4:	f000 fdf2 	bl	8001cdc <puts>
 80010f8:	e6b7      	b.n	8000e6a <main+0x232>
 80010fa:	2c05      	cmp	r4, #5
 80010fc:	f63f ae1d 	bhi.w	8000d3a <main+0x102>
 8001100:	a301      	add	r3, pc, #4	; (adr r3, 8001108 <main+0x4d0>)
 8001102:	f853 f024 	ldr.w	pc, [r3, r4, lsl #2]
 8001106:	bf00      	nop
 8001108:	08001067 	stmdaeq	r0, {r0, r1, r2, r5, r6, ip}
 800110c:	0800100d 	stmdaeq	r0, {r0, r2, r3, ip}
 8001110:	0800101b 	stmdaeq	r0, {r0, r1, r3, r4, ip}
 8001114:	0800102f 	stmdaeq	r0, {r0, r1, r2, r3, r5, ip}
 8001118:	0800103f 	stmdaeq	r0, {r0, r1, r2, r3, r4, r5, ip}
 800111c:	0800104f 	stmdaeq	r0, {r0, r1, r2, r3, r6, ip}
 8001120:	2000162c 	andcs	r1, r0, ip, lsr #12
 8001124:	200027ac 	andcs	r2, r0, ip, lsr #15
 8001128:	00646464 	rsbeq	r6, r4, r4, ror #8
 800112c:	200015f8 	strdcs	r1, [r0], -r8
 8001130:	20001624 	andcs	r1, r0, r4, lsr #12
 8001134:	0800a160 	stmdaeq	r0, {r5, r6, r8, sp, pc}
 8001138:	0800a10d 	stmdaeq	r0, {r0, r2, r3, r8, sp, pc}
 800113c:	20001620 	andcs	r1, r0, r0, lsr #12

08001140 <Display::ClearLine(unsigned long) [clone .isra.0]>:
 8001140:	b110      	cbz	r0, 8001148 <Display::ClearLine(unsigned long) [clone .isra.0]+0x8>
 8001142:	6803      	ldr	r3, [r0, #0]
 8001144:	691b      	ldr	r3, [r3, #16]
 8001146:	4718      	bx	r3
 8001148:	4770      	bx	lr

0800114a <Display::TextStatus(char const*)>:
 800114a:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800114e:	4604      	mov	r4, r0
 8001150:	69c0      	ldr	r0, [r0, #28]
 8001152:	460d      	mov	r5, r1
 8001154:	2800      	cmp	r0, #0
 8001156:	d02f      	beq.n	80011b8 <Display::TextStatus(char const*)+0x6e>
 8001158:	e9d0 8701 	ldrd	r8, r7, [r0, #4]
 800115c:	6803      	ldr	r3, [r0, #0]
 800115e:	1e7a      	subs	r2, r7, #1
 8001160:	9201      	str	r2, [sp, #4]
 8001162:	6a1b      	ldr	r3, [r3, #32]
 8001164:	2100      	movs	r1, #0
 8001166:	4798      	blx	r3
 8001168:	9a01      	ldr	r2, [sp, #4]
 800116a:	2600      	movs	r6, #0
 800116c:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 8001170:	45b0      	cmp	r8, r6
 8001172:	69e0      	ldr	r0, [r4, #28]
 8001174:	d817      	bhi.n	80011a6 <Display::TextStatus(char const*)+0x5c>
 8001176:	b118      	cbz	r0, 8001180 <Display::TextStatus(char const*)+0x36>
 8001178:	6803      	ldr	r3, [r0, #0]
 800117a:	2100      	movs	r1, #0
 800117c:	6a1b      	ldr	r3, [r3, #32]
 800117e:	4798      	blx	r3
 8001180:	69e0      	ldr	r0, [r4, #28]
 8001182:	b1c8      	cbz	r0, 80011b8 <Display::TextStatus(char const*)+0x6e>
 8001184:	6841      	ldr	r1, [r0, #4]
 8001186:	2300      	movs	r3, #0
 8001188:	5cea      	ldrb	r2, [r5, r3]
 800118a:	b11a      	cbz	r2, 8001194 <Display::TextStatus(char const*)+0x4a>
 800118c:	1c5a      	adds	r2, r3, #1
 800118e:	4299      	cmp	r1, r3
 8001190:	4613      	mov	r3, r2
 8001192:	d8f9      	bhi.n	8001188 <Display::TextStatus(char const*)+0x3e>
 8001194:	6802      	ldr	r2, [r0, #0]
 8001196:	69d4      	ldr	r4, [r2, #28]
 8001198:	4639      	mov	r1, r7
 800119a:	462a      	mov	r2, r5
 800119c:	46a4      	mov	ip, r4
 800119e:	b002      	add	sp, #8
 80011a0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80011a4:	4760      	bx	ip
 80011a6:	b128      	cbz	r0, 80011b4 <Display::TextStatus(char const*)+0x6a>
 80011a8:	6803      	ldr	r3, [r0, #0]
 80011aa:	9201      	str	r2, [sp, #4]
 80011ac:	695b      	ldr	r3, [r3, #20]
 80011ae:	2120      	movs	r1, #32
 80011b0:	4798      	blx	r3
 80011b2:	9a01      	ldr	r2, [sp, #4]
 80011b4:	3601      	adds	r6, #1
 80011b6:	e7db      	b.n	8001170 <Display::TextStatus(char const*)+0x26>
 80011b8:	b002      	add	sp, #8
 80011ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

080011c0 <PixelDmxParamsRdm::Display(unsigned char const*)>:
 80011c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80011c4:	4d1f      	ldr	r5, [pc, #124]	; (8001244 <PixelDmxParamsRdm::Display(unsigned char const*)+0x84>)
 80011c6:	7908      	ldrb	r0, [r1, #4]
 80011c8:	682e      	ldr	r6, [r5, #0]
 80011ca:	b086      	sub	sp, #24
 80011cc:	460c      	mov	r4, r1
 80011ce:	bb30      	cbnz	r0, 800121e <PixelDmxParamsRdm::Display(unsigned char const*)+0x5e>
 80011d0:	69f0      	ldr	r0, [r6, #28]
 80011d2:	2106      	movs	r1, #6
 80011d4:	f7ff ffb4 	bl	8001140 <Display::ClearLine(unsigned long) [clone .isra.0]>
 80011d8:	7820      	ldrb	r0, [r4, #0]
 80011da:	682e      	ldr	r6, [r5, #0]
 80011dc:	f004 fff8 	bl	80061d0 <PixelType::GetType(pixel::Type)>
 80011e0:	9005      	str	r0, [sp, #20]
 80011e2:	78e0      	ldrb	r0, [r4, #3]
 80011e4:	7867      	ldrb	r7, [r4, #1]
 80011e6:	f894 8002 	ldrb.w	r8, [r4, #2]
 80011ea:	f004 fffd 	bl	80061e8 <PixelType::GetMap(pixel::Map)>
 80011ee:	9b05      	ldr	r3, [sp, #20]
 80011f0:	4a15      	ldr	r2, [pc, #84]	; (8001248 <PixelDmxParamsRdm::Display(unsigned char const*)+0x88>)
 80011f2:	9700      	str	r7, [sp, #0]
 80011f4:	e9cd 8001 	strd	r8, r0, [sp, #4]
 80011f8:	2107      	movs	r1, #7
 80011fa:	4630      	mov	r0, r6
 80011fc:	f7ff fc95 	bl	8000b2a <Display::Printf(unsigned long, char const*, ...)>
 8001200:	7963      	ldrb	r3, [r4, #5]
 8001202:	2bff      	cmp	r3, #255	; 0xff
 8001204:	4b11      	ldr	r3, [pc, #68]	; (800124c <PixelDmxParamsRdm::Display(unsigned char const*)+0x8c>)
 8001206:	d113      	bne.n	8001230 <PixelDmxParamsRdm::Display(unsigned char const*)+0x70>
 8001208:	781a      	ldrb	r2, [r3, #0]
 800120a:	b92a      	cbnz	r2, 8001218 <PixelDmxParamsRdm::Display(unsigned char const*)+0x58>
 800120c:	2201      	movs	r2, #1
 800120e:	4910      	ldr	r1, [pc, #64]	; (8001250 <PixelDmxParamsRdm::Display(unsigned char const*)+0x90>)
 8001210:	6828      	ldr	r0, [r5, #0]
 8001212:	701a      	strb	r2, [r3, #0]
 8001214:	f7ff ff99 	bl	800114a <Display::TextStatus(char const*)>
 8001218:	b006      	add	sp, #24
 800121a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800121e:	f005 f87d 	bl	800631c <PixelPatterns::GetName(pixelpatterns::Pattern)>
 8001222:	4a0c      	ldr	r2, [pc, #48]	; (8001254 <PixelDmxParamsRdm::Display(unsigned char const*)+0x94>)
 8001224:	4603      	mov	r3, r0
 8001226:	2106      	movs	r1, #6
 8001228:	4630      	mov	r0, r6
 800122a:	f7ff fc7e 	bl	8000b2a <Display::Printf(unsigned long, char const*, ...)>
 800122e:	e7d3      	b.n	80011d8 <PixelDmxParamsRdm::Display(unsigned char const*)+0x18>
 8001230:	2200      	movs	r2, #0
 8001232:	701a      	strb	r2, [r3, #0]
 8001234:	682b      	ldr	r3, [r5, #0]
 8001236:	69d8      	ldr	r0, [r3, #28]
 8001238:	2108      	movs	r1, #8
 800123a:	b006      	add	sp, #24
 800123c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001240:	f7ff bf7e 	b.w	8001140 <Display::ClearLine(unsigned long) [clone .isra.0]>
 8001244:	2000163c 	andcs	r1, r0, ip, lsr r6
 8001248:	0800a2a2 	stmdaeq	r0, {r1, r5, r7, r9, sp, pc}
 800124c:	20001080 	andcs	r1, r0, r0, lsl #1
 8001250:	0800a2b7 	stmdaeq	r0, {r0, r1, r2, r4, r5, r7, r9, sp, pc}
 8001254:	0800a29c 	stmdaeq	r0, {r2, r3, r4, r7, r9, sp, pc}

08001258 <RDMResponder::DmxStartAddressUpdate(unsigned short)>:
 8001258:	4b01      	ldr	r3, [pc, #4]	; (8001260 <RDMResponder::DmxStartAddressUpdate(unsigned short)+0x8>)
 800125a:	6818      	ldr	r0, [r3, #0]
 800125c:	f005 be32 	b.w	8006ec4 <DisplayUdf::Show()>
 8001260:	2000163c 	andcs	r1, r0, ip, lsr r6

08001264 <rdm::device::responder::factorydefaults()>:
 8001264:	4b02      	ldr	r3, [pc, #8]	; (8001270 <rdm::device::responder::factorydefaults()+0xc>)
 8001266:	2109      	movs	r1, #9
 8001268:	6818      	ldr	r0, [r3, #0]
 800126a:	f005 bf3d 	b.w	80070e8 <ConfigStore::ResetSetList(configstore::Store)>
 800126e:	bf00      	nop
 8001270:	20002654 	andcs	r2, r0, r4, asr r6

08001274 <Display::ClearLine(unsigned long) [clone .isra.0]>:
 8001274:	b110      	cbz	r0, 800127c <Display::ClearLine(unsigned long) [clone .isra.0]+0x8>
 8001276:	6803      	ldr	r3, [r0, #0]
 8001278:	691b      	ldr	r3, [r3, #16]
 800127a:	4718      	bx	r3
 800127c:	4770      	bx	lr
	...

08001280 <RDMResponder::PersonalityUpdate(unsigned long)>:
 8001280:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001284:	4c30      	ldr	r4, [pc, #192]	; (8001348 <RDMResponder::PersonalityUpdate(unsigned long)+0xc8>)
 8001286:	4e31      	ldr	r6, [pc, #196]	; (800134c <RDMResponder::PersonalityUpdate(unsigned long)+0xcc>)
 8001288:	6823      	ldr	r3, [r4, #0]
 800128a:	b086      	sub	sp, #24
 800128c:	69d8      	ldr	r0, [r3, #28]
 800128e:	460d      	mov	r5, r1
 8001290:	2107      	movs	r1, #7
 8001292:	f7ff ffef 	bl	8001274 <Display::ClearLine(unsigned long) [clone .isra.0]>
 8001296:	6833      	ldr	r3, [r6, #0]
 8001298:	6827      	ldr	r7, [r4, #0]
 800129a:	6858      	ldr	r0, [r3, #4]
 800129c:	f004 ff98 	bl	80061d0 <PixelType::GetType(pixel::Type)>
 80012a0:	6832      	ldr	r2, [r6, #0]
 80012a2:	9005      	str	r0, [sp, #20]
 80012a4:	68d0      	ldr	r0, [r2, #12]
 80012a6:	6896      	ldr	r6, [r2, #8]
 80012a8:	f8d2 8024 	ldr.w	r8, [r2, #36]	; 0x24
 80012ac:	f004 ff9c 	bl	80061e8 <PixelType::GetMap(pixel::Map)>
 80012b0:	9b05      	ldr	r3, [sp, #20]
 80012b2:	4a27      	ldr	r2, [pc, #156]	; (8001350 <RDMResponder::PersonalityUpdate(unsigned long)+0xd0>)
 80012b4:	9600      	str	r6, [sp, #0]
 80012b6:	e9cd 8001 	strd	r8, r0, [sp, #4]
 80012ba:	2107      	movs	r1, #7
 80012bc:	4638      	mov	r0, r7
 80012be:	f7ff fc34 	bl	8000b2a <Display::Printf(unsigned long, char const*, ...)>
 80012c2:	6820      	ldr	r0, [r4, #0]
 80012c4:	f005 fdfe 	bl	8006ec4 <DisplayUdf::Show()>
 80012c8:	2d01      	cmp	r5, #1
 80012ca:	d115      	bne.n	80012f8 <RDMResponder::PersonalityUpdate(unsigned long)+0x78>
 80012cc:	4b21      	ldr	r3, [pc, #132]	; (8001354 <RDMResponder::PersonalityUpdate(unsigned long)+0xd4>)
 80012ce:	681d      	ldr	r5, [r3, #0]
 80012d0:	b17d      	cbz	r5, 80012f2 <RDMResponder::PersonalityUpdate(unsigned long)+0x72>
 80012d2:	6823      	ldr	r3, [r4, #0]
 80012d4:	2106      	movs	r1, #6
 80012d6:	69d8      	ldr	r0, [r3, #28]
 80012d8:	f7ff ffcc 	bl	8001274 <Display::ClearLine(unsigned long) [clone .isra.0]>
 80012dc:	4628      	mov	r0, r5
 80012de:	6824      	ldr	r4, [r4, #0]
 80012e0:	f005 f81c 	bl	800631c <PixelPatterns::GetName(pixelpatterns::Pattern)>
 80012e4:	4a1c      	ldr	r2, [pc, #112]	; (8001358 <RDMResponder::PersonalityUpdate(unsigned long)+0xd8>)
 80012e6:	9500      	str	r5, [sp, #0]
 80012e8:	4603      	mov	r3, r0
 80012ea:	2106      	movs	r1, #6
 80012ec:	4620      	mov	r0, r4
 80012ee:	f7ff fc1c 	bl	8000b2a <Display::Printf(unsigned long, char const*, ...)>
 80012f2:	b006      	add	sp, #24
 80012f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80012f8:	2d02      	cmp	r5, #2
 80012fa:	d1fa      	bne.n	80012f2 <RDMResponder::PersonalityUpdate(unsigned long)+0x72>
 80012fc:	6823      	ldr	r3, [r4, #0]
 80012fe:	2103      	movs	r1, #3
 8001300:	69d8      	ldr	r0, [r3, #28]
 8001302:	f7ff ffb7 	bl	8001274 <Display::ClearLine(unsigned long) [clone .isra.0]>
 8001306:	6823      	ldr	r3, [r4, #0]
 8001308:	2104      	movs	r1, #4
 800130a:	69d8      	ldr	r0, [r3, #28]
 800130c:	f7ff ffb2 	bl	8001274 <Display::ClearLine(unsigned long) [clone .isra.0]>
 8001310:	6823      	ldr	r3, [r4, #0]
 8001312:	69d8      	ldr	r0, [r3, #28]
 8001314:	b178      	cbz	r0, 8001336 <RDMResponder::PersonalityUpdate(unsigned long)+0xb6>
 8001316:	6845      	ldr	r5, [r0, #4]
 8001318:	4910      	ldr	r1, [pc, #64]	; (800135c <RDMResponder::PersonalityUpdate(unsigned long)+0xdc>)
 800131a:	2300      	movs	r3, #0
 800131c:	42ab      	cmp	r3, r5
 800131e:	f103 0301 	add.w	r3, r3, #1
 8001322:	d203      	bcs.n	800132c <RDMResponder::PersonalityUpdate(unsigned long)+0xac>
 8001324:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8001328:	2a00      	cmp	r2, #0
 800132a:	d1f7      	bne.n	800131c <RDMResponder::PersonalityUpdate(unsigned long)+0x9c>
 800132c:	6802      	ldr	r2, [r0, #0]
 800132e:	2104      	movs	r1, #4
 8001330:	69d5      	ldr	r5, [r2, #28]
 8001332:	4a0a      	ldr	r2, [pc, #40]	; (800135c <RDMResponder::PersonalityUpdate(unsigned long)+0xdc>)
 8001334:	47a8      	blx	r5
 8001336:	6823      	ldr	r3, [r4, #0]
 8001338:	69d8      	ldr	r0, [r3, #28]
 800133a:	2105      	movs	r1, #5
 800133c:	b006      	add	sp, #24
 800133e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001342:	f7ff bf97 	b.w	8001274 <Display::ClearLine(unsigned long) [clone .isra.0]>
 8001346:	bf00      	nop
 8001348:	2000163c 	andcs	r1, r0, ip, lsr r6
 800134c:	200015ec 	andcs	r1, r0, ip, ror #11
 8001350:	0800a153 	stmdaeq	r0, {r0, r1, r4, r6, r8, sp, pc}
 8001354:	2000162c 	andcs	r1, r0, ip, lsr #12
 8001358:	0800a160 	stmdaeq	r0, {r5, r6, r8, sp, pc}
 800135c:	0800a0c2 	stmdaeq	r0, {r1, r6, r7, sp, pc}

08001360 <PixelTestPattern::SetPattern(pixelpatterns::Pattern)>:
 8001360:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001362:	2905      	cmp	r1, #5
 8001364:	b085      	sub	sp, #20
 8001366:	dc57      	bgt.n	8001418 <PixelTestPattern::SetPattern(pixelpatterns::Pattern)+0xb8>
 8001368:	4b2d      	ldr	r3, [pc, #180]	; (8001420 <PixelTestPattern::SetPattern(pixelpatterns::Pattern)+0xc0>)
 800136a:	6019      	str	r1, [r3, #0]
 800136c:	2905      	cmp	r1, #5
 800136e:	d809      	bhi.n	8001384 <PixelTestPattern::SetPattern(pixelpatterns::Pattern)+0x24>
 8001370:	e8df f001 	tbb	[pc, r1]
 8001374:	130a032c 	movwne	r0, #41772	; 0xa32c
 8001378:	2300211a 	movwcs	r2, #282	; 0x11a
 800137c:	2264      	movs	r2, #100	; 0x64
 800137e:	4619      	mov	r1, r3
 8001380:	f004 ffd8 	bl	8006334 <PixelPatterns::RainbowCycle(unsigned long, unsigned long, pixelpatterns::Direction)>
 8001384:	2001      	movs	r0, #1
 8001386:	e048      	b.n	800141a <PixelTestPattern::SetPattern(pixelpatterns::Pattern)+0xba>
 8001388:	2200      	movs	r2, #0
 800138a:	2364      	movs	r3, #100	; 0x64
 800138c:	e9cd 3200 	strd	r3, r2, [sp]
 8001390:	4611      	mov	r1, r2
 8001392:	4b24      	ldr	r3, [pc, #144]	; (8001424 <PixelTestPattern::SetPattern(pixelpatterns::Pattern)+0xc4>)
 8001394:	f004 ffe2 	bl	800635c <PixelPatterns::TheaterChase(unsigned long, unsigned long, unsigned long, unsigned long, pixelpatterns::Direction)>
 8001398:	e7f4      	b.n	8001384 <PixelTestPattern::SetPattern(pixelpatterns::Pattern)+0x24>
 800139a:	2100      	movs	r1, #0
 800139c:	4a21      	ldr	r2, [pc, #132]	; (8001424 <PixelTestPattern::SetPattern(pixelpatterns::Pattern)+0xc4>)
 800139e:	9100      	str	r1, [sp, #0]
 80013a0:	2364      	movs	r3, #100	; 0x64
 80013a2:	f004 fff7 	bl	8006394 <PixelPatterns::ColourWipe(unsigned long, unsigned long, unsigned long, pixelpatterns::Direction)>
 80013a6:	e7ed      	b.n	8001384 <PixelTestPattern::SetPattern(pixelpatterns::Pattern)+0x24>
 80013a8:	2364      	movs	r3, #100	; 0x64
 80013aa:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 80013ae:	2100      	movs	r1, #0
 80013b0:	f005 f80a 	bl	80063c8 <PixelPatterns::Scanner(unsigned long, unsigned long, unsigned long)>
 80013b4:	e7e6      	b.n	8001384 <PixelTestPattern::SetPattern(pixelpatterns::Pattern)+0x24>
 80013b6:	2200      	movs	r2, #0
 80013b8:	2364      	movs	r3, #100	; 0x64
 80013ba:	e9cd 3201 	strd	r3, r2, [sp, #4]
 80013be:	230a      	movs	r3, #10
 80013c0:	9300      	str	r3, [sp, #0]
 80013c2:	4611      	mov	r1, r2
 80013c4:	4b17      	ldr	r3, [pc, #92]	; (8001424 <PixelTestPattern::SetPattern(pixelpatterns::Pattern)+0xc4>)
 80013c6:	f005 f831 	bl	800642c <PixelPatterns::Fade(unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, pixelpatterns::Direction)>
 80013ca:	e7db      	b.n	8001384 <PixelTestPattern::SetPattern(pixelpatterns::Pattern)+0x24>
 80013cc:	4b16      	ldr	r3, [pc, #88]	; (8001428 <PixelTestPattern::SetPattern(pixelpatterns::Pattern)+0xc8>)
 80013ce:	4e17      	ldr	r6, [pc, #92]	; (800142c <PixelTestPattern::SetPattern(pixelpatterns::Pattern)+0xcc>)
 80013d0:	4f17      	ldr	r7, [pc, #92]	; (8001430 <PixelTestPattern::SetPattern(pixelpatterns::Pattern)+0xd0>)
 80013d2:	2400      	movs	r4, #0
 80013d4:	61dc      	str	r4, [r3, #28]
 80013d6:	4625      	mov	r5, r4
 80013d8:	6833      	ldr	r3, [r6, #0]
 80013da:	429c      	cmp	r4, r3
 80013dc:	d308      	bcc.n	80013f0 <PixelTestPattern::SetPattern(pixelpatterns::Pattern)+0x90>
 80013de:	f008 fb29 	bl	8009a34 <gd32_spi_dma_tx_is_active()>
 80013e2:	2800      	cmp	r0, #0
 80013e4:	d1fb      	bne.n	80013de <PixelTestPattern::SetPattern(pixelpatterns::Pattern)+0x7e>
 80013e6:	4b12      	ldr	r3, [pc, #72]	; (8001430 <PixelTestPattern::SetPattern(pixelpatterns::Pattern)+0xd0>)
 80013e8:	6818      	ldr	r0, [r3, #0]
 80013ea:	f005 fc59 	bl	8006ca0 <WS28xx::Update()>
 80013ee:	e7c9      	b.n	8001384 <PixelTestPattern::SetPattern(pixelpatterns::Pattern)+0x24>
 80013f0:	6838      	ldr	r0, [r7, #0]
 80013f2:	6803      	ldr	r3, [r0, #0]
 80013f4:	2b07      	cmp	r3, #7
 80013f6:	d007      	beq.n	8001408 <PixelTestPattern::SetPattern(pixelpatterns::Pattern)+0xa8>
 80013f8:	2300      	movs	r3, #0
 80013fa:	9500      	str	r5, [sp, #0]
 80013fc:	461a      	mov	r2, r3
 80013fe:	4621      	mov	r1, r4
 8001400:	f005 f9c6 	bl	8006790 <WS28xx::SetPixel(unsigned long, unsigned char, unsigned char, unsigned char)>
 8001404:	3401      	adds	r4, #1
 8001406:	e7e7      	b.n	80013d8 <PixelTestPattern::SetPattern(pixelpatterns::Pattern)+0x78>
 8001408:	2300      	movs	r3, #0
 800140a:	e9cd 5500 	strd	r5, r5, [sp]
 800140e:	461a      	mov	r2, r3
 8001410:	4621      	mov	r1, r4
 8001412:	f005 fad7 	bl	80069c4 <WS28xx::SetPixel(unsigned long, unsigned char, unsigned char, unsigned char, unsigned char)>
 8001416:	e7f5      	b.n	8001404 <PixelTestPattern::SetPattern(pixelpatterns::Pattern)+0xa4>
 8001418:	2000      	movs	r0, #0
 800141a:	b005      	add	sp, #20
 800141c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800141e:	bf00      	nop
 8001420:	2000162c 	andcs	r1, r0, ip, lsr #12
 8001424:	00646464 	rsbeq	r6, r4, r4, ror #8
 8001428:	200015f8 	strdcs	r1, [r0], -r8
 800142c:	20001620 	andcs	r1, r0, r0, lsr #12
 8001430:	20001624 	andcs	r1, r0, r4, lsr #12

08001434 <rdm::selftest::Get()>:
 8001434:	4b01      	ldr	r3, [pc, #4]	; (800143c <rdm::selftest::Get()+0x8>)
 8001436:	7818      	ldrb	r0, [r3, #0]
 8001438:	4770      	bx	lr
 800143a:	bf00      	nop
 800143c:	2000162c 	andcs	r1, r0, ip, lsr #12

08001440 <rdm::selftest::Set(unsigned char)>:
 8001440:	4b14      	ldr	r3, [pc, #80]	; (8001494 <rdm::selftest::Set(unsigned char)+0x54>)
 8001442:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8001444:	4601      	mov	r1, r0
 8001446:	4604      	mov	r4, r0
 8001448:	6818      	ldr	r0, [r3, #0]
 800144a:	f7ff ff89 	bl	8001360 <PixelTestPattern::SetPattern(pixelpatterns::Pattern)>
 800144e:	4605      	mov	r5, r0
 8001450:	b1b0      	cbz	r0, 8001480 <rdm::selftest::Set(unsigned char)+0x40>
 8001452:	4b11      	ldr	r3, [pc, #68]	; (8001498 <rdm::selftest::Set(unsigned char)+0x58>)
 8001454:	b1bc      	cbz	r4, 8001486 <rdm::selftest::Set(unsigned char)+0x46>
 8001456:	4e11      	ldr	r6, [pc, #68]	; (800149c <rdm::selftest::Set(unsigned char)+0x5c>)
 8001458:	2201      	movs	r2, #1
 800145a:	701a      	strb	r2, [r3, #0]
 800145c:	6833      	ldr	r3, [r6, #0]
 800145e:	69d8      	ldr	r0, [r3, #28]
 8001460:	b118      	cbz	r0, 800146a <rdm::selftest::Set(unsigned char)+0x2a>
 8001462:	6803      	ldr	r3, [r0, #0]
 8001464:	2106      	movs	r1, #6
 8001466:	691b      	ldr	r3, [r3, #16]
 8001468:	4798      	blx	r3
 800146a:	4620      	mov	r0, r4
 800146c:	6836      	ldr	r6, [r6, #0]
 800146e:	f004 ff55 	bl	800631c <PixelPatterns::GetName(pixelpatterns::Pattern)>
 8001472:	4a0b      	ldr	r2, [pc, #44]	; (80014a0 <rdm::selftest::Set(unsigned char)+0x60>)
 8001474:	9400      	str	r4, [sp, #0]
 8001476:	4603      	mov	r3, r0
 8001478:	2106      	movs	r1, #6
 800147a:	4630      	mov	r0, r6
 800147c:	f7ff fb55 	bl	8000b2a <Display::Printf(unsigned long, char const*, ...)>
 8001480:	4628      	mov	r0, r5
 8001482:	b002      	add	sp, #8
 8001484:	bd70      	pop	{r4, r5, r6, pc}
 8001486:	701c      	strb	r4, [r3, #0]
 8001488:	4b06      	ldr	r3, [pc, #24]	; (80014a4 <rdm::selftest::Set(unsigned char)+0x64>)
 800148a:	6818      	ldr	r0, [r3, #0]
 800148c:	f005 fd1a 	bl	8006ec4 <DisplayUdf::Show()>
 8001490:	e7f6      	b.n	8001480 <rdm::selftest::Set(unsigned char)+0x40>
 8001492:	bf00      	nop
 8001494:	20001628 	andcs	r1, r0, r8, lsr #12
 8001498:	200011a4 	andcs	r1, r0, r4, lsr #3
 800149c:	20002684 	andcs	r2, r0, r4, lsl #13
 80014a0:	0800a160 	stmdaeq	r0, {r5, r6, r8, sp, pc}
 80014a4:	2000163c 	andcs	r1, r0, ip, lsr r6

080014a8 <rdm::selftest::GetDescription(unsigned char, unsigned long&)>:
 80014a8:	b510      	push	{r4, lr}
 80014aa:	460c      	mov	r4, r1
 80014ac:	f004 ff36 	bl	800631c <PixelPatterns::GetName(pixelpatterns::Pattern)>
 80014b0:	b140      	cbz	r0, 80014c4 <rdm::selftest::GetDescription(unsigned char, unsigned long&)+0x1c>
 80014b2:	4602      	mov	r2, r0
 80014b4:	4613      	mov	r3, r2
 80014b6:	3201      	adds	r2, #1
 80014b8:	7819      	ldrb	r1, [r3, #0]
 80014ba:	2900      	cmp	r1, #0
 80014bc:	d1fa      	bne.n	80014b4 <rdm::selftest::GetDescription(unsigned char, unsigned long&)+0xc>
 80014be:	1a1b      	subs	r3, r3, r0
 80014c0:	6023      	str	r3, [r4, #0]
 80014c2:	bd10      	pop	{r4, pc}
 80014c4:	4603      	mov	r3, r0
 80014c6:	e7fb      	b.n	80014c0 <rdm::selftest::GetDescription(unsigned char, unsigned long&)+0x18>

080014c8 <PixelTestPattern::SetPattern(pixelpatterns::Pattern) [clone .isra.0]>:
 80014c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80014ca:	2905      	cmp	r1, #5
 80014cc:	b085      	sub	sp, #20
 80014ce:	dc18      	bgt.n	8001502 <PixelTestPattern::SetPattern(pixelpatterns::Pattern) [clone .isra.0]+0x3a>
 80014d0:	4b2e      	ldr	r3, [pc, #184]	; (800158c <PixelTestPattern::SetPattern(pixelpatterns::Pattern) [clone .isra.0]+0xc4>)
 80014d2:	6019      	str	r1, [r3, #0]
 80014d4:	2905      	cmp	r1, #5
 80014d6:	d814      	bhi.n	8001502 <PixelTestPattern::SetPattern(pixelpatterns::Pattern) [clone .isra.0]+0x3a>
 80014d8:	e8df f001 	tbb	[pc, r1]
 80014dc:	150b0330 	strne	r0, [fp, #-816]	; 0xfffffcd0
 80014e0:	2300251c 	movwcs	r2, #1308	; 0x51c
 80014e4:	2264      	movs	r2, #100	; 0x64
 80014e6:	4619      	mov	r1, r3
 80014e8:	b005      	add	sp, #20
 80014ea:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 80014ee:	f004 bf21 	b.w	8006334 <PixelPatterns::RainbowCycle(unsigned long, unsigned long, pixelpatterns::Direction)>
 80014f2:	2364      	movs	r3, #100	; 0x64
 80014f4:	2200      	movs	r2, #0
 80014f6:	e9cd 3200 	strd	r3, r2, [sp]
 80014fa:	4611      	mov	r1, r2
 80014fc:	4b24      	ldr	r3, [pc, #144]	; (8001590 <PixelTestPattern::SetPattern(pixelpatterns::Pattern) [clone .isra.0]+0xc8>)
 80014fe:	f004 ff2d 	bl	800635c <PixelPatterns::TheaterChase(unsigned long, unsigned long, unsigned long, unsigned long, pixelpatterns::Direction)>
 8001502:	b005      	add	sp, #20
 8001504:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001506:	2100      	movs	r1, #0
 8001508:	4a21      	ldr	r2, [pc, #132]	; (8001590 <PixelTestPattern::SetPattern(pixelpatterns::Pattern) [clone .isra.0]+0xc8>)
 800150a:	9100      	str	r1, [sp, #0]
 800150c:	2364      	movs	r3, #100	; 0x64
 800150e:	f004 ff41 	bl	8006394 <PixelPatterns::ColourWipe(unsigned long, unsigned long, unsigned long, pixelpatterns::Direction)>
 8001512:	e7f6      	b.n	8001502 <PixelTestPattern::SetPattern(pixelpatterns::Pattern) [clone .isra.0]+0x3a>
 8001514:	2364      	movs	r3, #100	; 0x64
 8001516:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 800151a:	2100      	movs	r1, #0
 800151c:	b005      	add	sp, #20
 800151e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8001522:	f004 bf51 	b.w	80063c8 <PixelPatterns::Scanner(unsigned long, unsigned long, unsigned long)>
 8001526:	2200      	movs	r2, #0
 8001528:	2364      	movs	r3, #100	; 0x64
 800152a:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800152e:	230a      	movs	r3, #10
 8001530:	9300      	str	r3, [sp, #0]
 8001532:	4611      	mov	r1, r2
 8001534:	4b16      	ldr	r3, [pc, #88]	; (8001590 <PixelTestPattern::SetPattern(pixelpatterns::Pattern) [clone .isra.0]+0xc8>)
 8001536:	f004 ff79 	bl	800642c <PixelPatterns::Fade(unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, pixelpatterns::Direction)>
 800153a:	e7e2      	b.n	8001502 <PixelTestPattern::SetPattern(pixelpatterns::Pattern) [clone .isra.0]+0x3a>
 800153c:	4b15      	ldr	r3, [pc, #84]	; (8001594 <PixelTestPattern::SetPattern(pixelpatterns::Pattern) [clone .isra.0]+0xcc>)
 800153e:	4e16      	ldr	r6, [pc, #88]	; (8001598 <PixelTestPattern::SetPattern(pixelpatterns::Pattern) [clone .isra.0]+0xd0>)
 8001540:	4f16      	ldr	r7, [pc, #88]	; (800159c <PixelTestPattern::SetPattern(pixelpatterns::Pattern) [clone .isra.0]+0xd4>)
 8001542:	2400      	movs	r4, #0
 8001544:	61dc      	str	r4, [r3, #28]
 8001546:	4625      	mov	r5, r4
 8001548:	6833      	ldr	r3, [r6, #0]
 800154a:	429c      	cmp	r4, r3
 800154c:	d30a      	bcc.n	8001564 <PixelTestPattern::SetPattern(pixelpatterns::Pattern) [clone .isra.0]+0x9c>
 800154e:	f008 fa71 	bl	8009a34 <gd32_spi_dma_tx_is_active()>
 8001552:	2800      	cmp	r0, #0
 8001554:	d1fb      	bne.n	800154e <PixelTestPattern::SetPattern(pixelpatterns::Pattern) [clone .isra.0]+0x86>
 8001556:	4b11      	ldr	r3, [pc, #68]	; (800159c <PixelTestPattern::SetPattern(pixelpatterns::Pattern) [clone .isra.0]+0xd4>)
 8001558:	6818      	ldr	r0, [r3, #0]
 800155a:	b005      	add	sp, #20
 800155c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8001560:	f005 bb9e 	b.w	8006ca0 <WS28xx::Update()>
 8001564:	6838      	ldr	r0, [r7, #0]
 8001566:	6803      	ldr	r3, [r0, #0]
 8001568:	2b07      	cmp	r3, #7
 800156a:	d007      	beq.n	800157c <PixelTestPattern::SetPattern(pixelpatterns::Pattern) [clone .isra.0]+0xb4>
 800156c:	2300      	movs	r3, #0
 800156e:	9500      	str	r5, [sp, #0]
 8001570:	461a      	mov	r2, r3
 8001572:	4621      	mov	r1, r4
 8001574:	f005 f90c 	bl	8006790 <WS28xx::SetPixel(unsigned long, unsigned char, unsigned char, unsigned char)>
 8001578:	3401      	adds	r4, #1
 800157a:	e7e5      	b.n	8001548 <PixelTestPattern::SetPattern(pixelpatterns::Pattern) [clone .isra.0]+0x80>
 800157c:	2300      	movs	r3, #0
 800157e:	e9cd 5500 	strd	r5, r5, [sp]
 8001582:	461a      	mov	r2, r3
 8001584:	4621      	mov	r1, r4
 8001586:	f005 fa1d 	bl	80069c4 <WS28xx::SetPixel(unsigned long, unsigned char, unsigned char, unsigned char, unsigned char)>
 800158a:	e7f5      	b.n	8001578 <PixelTestPattern::SetPattern(pixelpatterns::Pattern) [clone .isra.0]+0xb0>
 800158c:	2000162c 	andcs	r1, r0, ip, lsr #12
 8001590:	00646464 	rsbeq	r6, r4, r4, ror #8
 8001594:	200015f8 	strdcs	r1, [r0], -r8
 8001598:	20001620 	andcs	r1, r0, r0, lsr #12
 800159c:	20001624 	andcs	r1, r0, r4, lsr #12

080015a0 <RDMIdentify::On(rdm::identify::Mode)>:
 80015a0:	29ff      	cmp	r1, #255	; 0xff
 80015a2:	b510      	push	{r4, lr}
 80015a4:	d10f      	bne.n	80015c6 <RDMIdentify::On(rdm::identify::Mode)+0x26>
 80015a6:	4b08      	ldr	r3, [pc, #32]	; (80015c8 <RDMIdentify::On(rdm::identify::Mode)+0x28>)
 80015a8:	781a      	ldrb	r2, [r3, #0]
 80015aa:	b962      	cbnz	r2, 80015c6 <RDMIdentify::On(rdm::identify::Mode)+0x26>
 80015ac:	2401      	movs	r4, #1
 80015ae:	701c      	strb	r4, [r3, #0]
 80015b0:	4b06      	ldr	r3, [pc, #24]	; (80015cc <RDMIdentify::On(rdm::identify::Mode)+0x2c>)
 80015b2:	681a      	ldr	r2, [r3, #0]
 80015b4:	4b06      	ldr	r3, [pc, #24]	; (80015d0 <RDMIdentify::On(rdm::identify::Mode)+0x30>)
 80015b6:	601a      	str	r2, [r3, #0]
 80015b8:	4b06      	ldr	r3, [pc, #24]	; (80015d4 <RDMIdentify::On(rdm::identify::Mode)+0x34>)
 80015ba:	2105      	movs	r1, #5
 80015bc:	6818      	ldr	r0, [r3, #0]
 80015be:	f7ff ff83 	bl	80014c8 <PixelTestPattern::SetPattern(pixelpatterns::Pattern) [clone .isra.0]>
 80015c2:	4b05      	ldr	r3, [pc, #20]	; (80015d8 <RDMIdentify::On(rdm::identify::Mode)+0x38>)
 80015c4:	701c      	strb	r4, [r3, #0]
 80015c6:	bd10      	pop	{r4, pc}
 80015c8:	20001081 	andcs	r1, r0, r1, lsl #1
 80015cc:	2000162c 	andcs	r1, r0, ip, lsr #12
 80015d0:	20001084 	andcs	r1, r0, r4, lsl #1
 80015d4:	20001628 	andcs	r1, r0, r8, lsr #12
 80015d8:	200011a4 	andcs	r1, r0, r4, lsr #3

080015dc <RDMIdentify::Off(rdm::identify::Mode)>:
 80015dc:	4b09      	ldr	r3, [pc, #36]	; (8001604 <RDMIdentify::Off(rdm::identify::Mode)+0x28>)
 80015de:	781a      	ldrb	r2, [r3, #0]
 80015e0:	b510      	push	{r4, lr}
 80015e2:	b16a      	cbz	r2, 8001600 <RDMIdentify::Off(rdm::identify::Mode)+0x24>
 80015e4:	2200      	movs	r2, #0
 80015e6:	701a      	strb	r2, [r3, #0]
 80015e8:	4c07      	ldr	r4, [pc, #28]	; (8001608 <RDMIdentify::Off(rdm::identify::Mode)+0x2c>)
 80015ea:	4b08      	ldr	r3, [pc, #32]	; (800160c <RDMIdentify::Off(rdm::identify::Mode)+0x30>)
 80015ec:	6821      	ldr	r1, [r4, #0]
 80015ee:	6818      	ldr	r0, [r3, #0]
 80015f0:	f7ff ff6a 	bl	80014c8 <PixelTestPattern::SetPattern(pixelpatterns::Pattern) [clone .isra.0]>
 80015f4:	6823      	ldr	r3, [r4, #0]
 80015f6:	4a06      	ldr	r2, [pc, #24]	; (8001610 <RDMIdentify::Off(rdm::identify::Mode)+0x34>)
 80015f8:	3b00      	subs	r3, #0
 80015fa:	bf18      	it	ne
 80015fc:	2301      	movne	r3, #1
 80015fe:	7013      	strb	r3, [r2, #0]
 8001600:	bd10      	pop	{r4, pc}
 8001602:	bf00      	nop
 8001604:	20001081 	andcs	r1, r0, r1, lsl #1
 8001608:	20001084 	andcs	r1, r0, r4, lsl #1
 800160c:	20001628 	andcs	r1, r0, r8, lsr #12
 8001610:	200011a4 	andcs	r1, r0, r4, lsr #3

08001614 <RDMSlotInfo::GetCategoryTextUndefined(unsigned short, unsigned long&)>:
 8001614:	2805      	cmp	r0, #5
 8001616:	d814      	bhi.n	8001642 <RDMSlotInfo::GetCategoryTextUndefined(unsigned short, unsigned long&)+0x2e>
 8001618:	e8df f000 	tbb	[pc, r0]
 800161c:	0a071603 	beq	81c6e30 <_sidata+0x1bacc0>
 8001620:	480b100d 	stmdami	fp, {r0, r2, r3, ip}
 8001624:	2304      	movs	r3, #4
 8001626:	600b      	str	r3, [r1, #0]
 8001628:	4770      	bx	lr
 800162a:	480a      	ldr	r0, [pc, #40]	; (8001654 <RDMSlotInfo::GetCategoryTextUndefined(unsigned short, unsigned long&)+0x40>)
 800162c:	230e      	movs	r3, #14
 800162e:	e7fa      	b.n	8001626 <RDMSlotInfo::GetCategoryTextUndefined(unsigned short, unsigned long&)+0x12>
 8001630:	4809      	ldr	r0, [pc, #36]	; (8001658 <RDMSlotInfo::GetCategoryTextUndefined(unsigned short, unsigned long&)+0x44>)
 8001632:	2303      	movs	r3, #3
 8001634:	e7f7      	b.n	8001626 <RDMSlotInfo::GetCategoryTextUndefined(unsigned short, unsigned long&)+0x12>
 8001636:	4809      	ldr	r0, [pc, #36]	; (800165c <RDMSlotInfo::GetCategoryTextUndefined(unsigned short, unsigned long&)+0x48>)
 8001638:	230c      	movs	r3, #12
 800163a:	e7f4      	b.n	8001626 <RDMSlotInfo::GetCategoryTextUndefined(unsigned short, unsigned long&)+0x12>
 800163c:	4808      	ldr	r0, [pc, #32]	; (8001660 <RDMSlotInfo::GetCategoryTextUndefined(unsigned short, unsigned long&)+0x4c>)
 800163e:	2307      	movs	r3, #7
 8001640:	e7f1      	b.n	8001626 <RDMSlotInfo::GetCategoryTextUndefined(unsigned short, unsigned long&)+0x12>
 8001642:	4808      	ldr	r0, [pc, #32]	; (8001664 <RDMSlotInfo::GetCategoryTextUndefined(unsigned short, unsigned long&)+0x50>)
 8001644:	2309      	movs	r3, #9
 8001646:	e7ee      	b.n	8001626 <RDMSlotInfo::GetCategoryTextUndefined(unsigned short, unsigned long&)+0x12>
 8001648:	4807      	ldr	r0, [pc, #28]	; (8001668 <RDMSlotInfo::GetCategoryTextUndefined(unsigned short, unsigned long&)+0x54>)
 800164a:	2305      	movs	r3, #5
 800164c:	e7eb      	b.n	8001626 <RDMSlotInfo::GetCategoryTextUndefined(unsigned short, unsigned long&)+0x12>
 800164e:	bf00      	nop
 8001650:	0800a2c2 	stmdaeq	r0, {r1, r6, r7, r9, sp, pc}
 8001654:	0800a2c7 	stmdaeq	r0, {r0, r1, r2, r6, r7, r9, sp, pc}
 8001658:	0800a2d6 	stmdaeq	r0, {r1, r2, r4, r6, r7, r9, sp, pc}
 800165c:	0800a2da 	stmdaeq	r0, {r1, r3, r4, r6, r7, r9, sp, pc}
 8001660:	0800a2e7 	stmdaeq	r0, {r0, r1, r2, r5, r6, r7, r9, sp, pc}
 8001664:	0800a2ef 	stmdaeq	r0, {r0, r1, r2, r3, r5, r6, r7, r9, sp, pc}
 8001668:	0800a2d0 	stmdaeq	r0, {r4, r6, r7, r9, sp, pc}

0800166c <RDMSoftwareVersion::GetVersion()>:
 800166c:	4800      	ldr	r0, [pc, #0]	; (8001670 <RDMSoftwareVersion::GetVersion()+0x4>)
 800166e:	4770      	bx	lr
 8001670:	0800a2f9 	stmdaeq	r0, {r0, r3, r4, r5, r6, r7, r9, sp, pc}

08001674 <RDMSoftwareVersion::GetVersionLength()>:
 8001674:	2003      	movs	r0, #3
 8001676:	4770      	bx	lr

08001678 <RDMSoftwareVersion::GetVersionId()>:
 8001678:	4800      	ldr	r0, [pc, #0]	; (800167c <RDMSoftwareVersion::GetVersionId()+0x4>)
 800167a:	4770      	bx	lr
 800167c:	6522759d 	strvs	r7, [r2, #-1437]!	; 0xfffffa63

08001680 <_itostr>:
 8001680:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001682:	0fc7      	lsrs	r7, r0, #31
 8001684:	b091      	sub	sp, #68	; 0x44
 8001686:	bf18      	it	ne
 8001688:	4240      	negne	r0, r0
 800168a:	f10d 043f 	add.w	r4, sp, #63	; 0x3f
 800168e:	b9c8      	cbnz	r0, 80016c4 <_itostr+0x44>
 8001690:	2330      	movs	r3, #48	; 0x30
 8001692:	f88d 303f 	strb.w	r3, [sp, #63]	; 0x3f
 8001696:	f10d 033e 	add.w	r3, sp, #62	; 0x3e
 800169a:	b132      	cbz	r2, 80016aa <_itostr+0x2a>
 800169c:	4668      	mov	r0, sp
 800169e:	2530      	movs	r5, #48	; 0x30
 80016a0:	1ae6      	subs	r6, r4, r3
 80016a2:	4296      	cmp	r6, r2
 80016a4:	da01      	bge.n	80016aa <_itostr+0x2a>
 80016a6:	4283      	cmp	r3, r0
 80016a8:	d81c      	bhi.n	80016e4 <_itostr+0x64>
 80016aa:	b117      	cbz	r7, 80016b2 <_itostr+0x32>
 80016ac:	222d      	movs	r2, #45	; 0x2d
 80016ae:	f803 2901 	strb.w	r2, [r3], #-1
 80016b2:	3301      	adds	r3, #1
 80016b4:	1ae0      	subs	r0, r4, r3
 80016b6:	3901      	subs	r1, #1
 80016b8:	aa10      	add	r2, sp, #64	; 0x40
 80016ba:	4293      	cmp	r3, r2
 80016bc:	d315      	bcc.n	80016ea <_itostr+0x6a>
 80016be:	3001      	adds	r0, #1
 80016c0:	b011      	add	sp, #68	; 0x44
 80016c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80016c4:	4623      	mov	r3, r4
 80016c6:	250a      	movs	r5, #10
 80016c8:	46ec      	mov	ip, sp
 80016ca:	fb90 f6f5 	sdiv	r6, r0, r5
 80016ce:	fb05 0016 	mls	r0, r5, r6, r0
 80016d2:	3030      	adds	r0, #48	; 0x30
 80016d4:	f803 0901 	strb.w	r0, [r3], #-1
 80016d8:	4630      	mov	r0, r6
 80016da:	2e00      	cmp	r6, #0
 80016dc:	d0dd      	beq.n	800169a <_itostr+0x1a>
 80016de:	4563      	cmp	r3, ip
 80016e0:	d1f3      	bne.n	80016ca <_itostr+0x4a>
 80016e2:	e7da      	b.n	800169a <_itostr+0x1a>
 80016e4:	f803 5901 	strb.w	r5, [r3], #-1
 80016e8:	e7da      	b.n	80016a0 <_itostr+0x20>
 80016ea:	f813 2b01 	ldrb.w	r2, [r3], #1
 80016ee:	f801 2f01 	strb.w	r2, [r1, #1]!
 80016f2:	e7e1      	b.n	80016b8 <_itostr+0x38>

080016f4 <_xputch>:
 80016f4:	4603      	mov	r3, r0
 80016f6:	b410      	push	{r4}
 80016f8:	4c09      	ldr	r4, [pc, #36]	; (8001720 <_xputch+0x2c>)
 80016fa:	68da      	ldr	r2, [r3, #12]
 80016fc:	4608      	mov	r0, r1
 80016fe:	6821      	ldr	r1, [r4, #0]
 8001700:	3201      	adds	r2, #1
 8001702:	60da      	str	r2, [r3, #12]
 8001704:	b141      	cbz	r1, 8001718 <_xputch+0x24>
 8001706:	691b      	ldr	r3, [r3, #16]
 8001708:	429a      	cmp	r2, r3
 800170a:	da02      	bge.n	8001712 <_xputch+0x1e>
 800170c:	1c4b      	adds	r3, r1, #1
 800170e:	6023      	str	r3, [r4, #0]
 8001710:	7008      	strb	r0, [r1, #0]
 8001712:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001716:	4770      	bx	lr
 8001718:	f85d 4b04 	ldr.w	r4, [sp], #4
 800171c:	f006 bc1a 	b.w	8007f54 <console_putc>
 8001720:	20001088 	andcs	r1, r0, r8, lsl #1

08001724 <_format_int>:
 8001724:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001728:	4698      	mov	r8, r3
 800172a:	b091      	sub	sp, #68	; 0x44
 800172c:	ea52 0308 	orrs.w	r3, r2, r8
 8001730:	4606      	mov	r6, r0
 8001732:	4617      	mov	r7, r2
 8001734:	f10d 053f 	add.w	r5, sp, #63	; 0x3f
 8001738:	d133      	bne.n	80017a2 <_format_int+0x7e>
 800173a:	2330      	movs	r3, #48	; 0x30
 800173c:	f88d 303f 	strb.w	r3, [sp, #63]	; 0x3f
 8001740:	f10d 043e 	add.w	r4, sp, #62	; 0x3e
 8001744:	6833      	ldr	r3, [r6, #0]
 8001746:	07d8      	lsls	r0, r3, #31
 8001748:	d507      	bpl.n	800175a <_format_int+0x36>
 800174a:	6871      	ldr	r1, [r6, #4]
 800174c:	466a      	mov	r2, sp
 800174e:	2030      	movs	r0, #48	; 0x30
 8001750:	1b2f      	subs	r7, r5, r4
 8001752:	428f      	cmp	r7, r1
 8001754:	da01      	bge.n	800175a <_format_int+0x36>
 8001756:	4294      	cmp	r4, r2
 8001758:	d839      	bhi.n	80017ce <_format_int+0xaa>
 800175a:	0699      	lsls	r1, r3, #26
 800175c:	d507      	bpl.n	800176e <_format_int+0x4a>
 800175e:	68b1      	ldr	r1, [r6, #8]
 8001760:	466a      	mov	r2, sp
 8001762:	2030      	movs	r0, #48	; 0x30
 8001764:	1b2f      	subs	r7, r5, r4
 8001766:	428f      	cmp	r7, r1
 8001768:	da01      	bge.n	800176e <_format_int+0x4a>
 800176a:	4294      	cmp	r4, r2
 800176c:	d832      	bhi.n	80017d4 <_format_int+0xb0>
 800176e:	071a      	lsls	r2, r3, #28
 8001770:	bf44      	itt	mi
 8001772:	222d      	movmi	r2, #45	; 0x2d
 8001774:	f804 2901 	strbmi.w	r2, [r4], #-1
 8001778:	065b      	lsls	r3, r3, #25
 800177a:	d407      	bmi.n	800178c <_format_int+0x68>
 800177c:	68b2      	ldr	r2, [r6, #8]
 800177e:	466b      	mov	r3, sp
 8001780:	2120      	movs	r1, #32
 8001782:	1b28      	subs	r0, r5, r4
 8001784:	4290      	cmp	r0, r2
 8001786:	da01      	bge.n	800178c <_format_int+0x68>
 8001788:	429c      	cmp	r4, r3
 800178a:	d826      	bhi.n	80017da <_format_int+0xb6>
 800178c:	1b2d      	subs	r5, r5, r4
 800178e:	3401      	adds	r4, #1
 8001790:	ab10      	add	r3, sp, #64	; 0x40
 8001792:	429c      	cmp	r4, r3
 8001794:	d324      	bcc.n	80017e0 <_format_int+0xbc>
 8001796:	68b3      	ldr	r3, [r6, #8]
 8001798:	42ab      	cmp	r3, r5
 800179a:	dc27      	bgt.n	80017ec <_format_int+0xc8>
 800179c:	b011      	add	sp, #68	; 0x44
 800179e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80017a2:	462c      	mov	r4, r5
 80017a4:	46e9      	mov	r9, sp
 80017a6:	4638      	mov	r0, r7
 80017a8:	4641      	mov	r1, r8
 80017aa:	220a      	movs	r2, #10
 80017ac:	2300      	movs	r3, #0
 80017ae:	f7fe fd1f 	bl	80001f0 <__aeabi_uldivmod>
 80017b2:	3230      	adds	r2, #48	; 0x30
 80017b4:	f804 2901 	strb.w	r2, [r4], #-1
 80017b8:	463a      	mov	r2, r7
 80017ba:	4643      	mov	r3, r8
 80017bc:	2a0a      	cmp	r2, #10
 80017be:	f173 0300 	sbcs.w	r3, r3, #0
 80017c2:	4607      	mov	r7, r0
 80017c4:	4688      	mov	r8, r1
 80017c6:	d3bd      	bcc.n	8001744 <_format_int+0x20>
 80017c8:	454c      	cmp	r4, r9
 80017ca:	d1ec      	bne.n	80017a6 <_format_int+0x82>
 80017cc:	e7ba      	b.n	8001744 <_format_int+0x20>
 80017ce:	f804 0901 	strb.w	r0, [r4], #-1
 80017d2:	e7bd      	b.n	8001750 <_format_int+0x2c>
 80017d4:	f804 0901 	strb.w	r0, [r4], #-1
 80017d8:	e7c4      	b.n	8001764 <_format_int+0x40>
 80017da:	f804 1901 	strb.w	r1, [r4], #-1
 80017de:	e7d0      	b.n	8001782 <_format_int+0x5e>
 80017e0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80017e4:	4630      	mov	r0, r6
 80017e6:	f7ff ff85 	bl	80016f4 <_xputch>
 80017ea:	e7d1      	b.n	8001790 <_format_int+0x6c>
 80017ec:	2120      	movs	r1, #32
 80017ee:	4630      	mov	r0, r6
 80017f0:	f7ff ff80 	bl	80016f4 <_xputch>
 80017f4:	3501      	adds	r5, #1
 80017f6:	e7ce      	b.n	8001796 <_format_int+0x72>

080017f8 <_format_hex>:
 80017f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80017fa:	b091      	sub	sp, #68	; 0x44
 80017fc:	6804      	ldr	r4, [r0, #0]
 80017fe:	4606      	mov	r6, r0
 8001800:	f10d 023f 	add.w	r2, sp, #63	; 0x3f
 8001804:	bb61      	cbnz	r1, 8001860 <_format_hex+0x68>
 8001806:	2330      	movs	r3, #48	; 0x30
 8001808:	f88d 303f 	strb.w	r3, [sp, #63]	; 0x3f
 800180c:	f10d 033e 	add.w	r3, sp, #62	; 0x3e
 8001810:	07e5      	lsls	r5, r4, #31
 8001812:	d507      	bpl.n	8001824 <_format_hex+0x2c>
 8001814:	6870      	ldr	r0, [r6, #4]
 8001816:	4669      	mov	r1, sp
 8001818:	2530      	movs	r5, #48	; 0x30
 800181a:	1ad7      	subs	r7, r2, r3
 800181c:	4287      	cmp	r7, r0
 800181e:	da01      	bge.n	8001824 <_format_hex+0x2c>
 8001820:	428b      	cmp	r3, r1
 8001822:	d831      	bhi.n	8001888 <_format_hex+0x90>
 8001824:	06a0      	lsls	r0, r4, #26
 8001826:	d507      	bpl.n	8001838 <_format_hex+0x40>
 8001828:	68b0      	ldr	r0, [r6, #8]
 800182a:	4669      	mov	r1, sp
 800182c:	2530      	movs	r5, #48	; 0x30
 800182e:	1ad7      	subs	r7, r2, r3
 8001830:	4287      	cmp	r7, r0
 8001832:	da01      	bge.n	8001838 <_format_hex+0x40>
 8001834:	428b      	cmp	r3, r1
 8001836:	d82a      	bhi.n	800188e <_format_hex+0x96>
 8001838:	0661      	lsls	r1, r4, #25
 800183a:	d407      	bmi.n	800184c <_format_hex+0x54>
 800183c:	68b0      	ldr	r0, [r6, #8]
 800183e:	4669      	mov	r1, sp
 8001840:	2420      	movs	r4, #32
 8001842:	1ad5      	subs	r5, r2, r3
 8001844:	4285      	cmp	r5, r0
 8001846:	da01      	bge.n	800184c <_format_hex+0x54>
 8001848:	428b      	cmp	r3, r1
 800184a:	d823      	bhi.n	8001894 <_format_hex+0x9c>
 800184c:	1ad5      	subs	r5, r2, r3
 800184e:	1c5c      	adds	r4, r3, #1
 8001850:	ab10      	add	r3, sp, #64	; 0x40
 8001852:	429c      	cmp	r4, r3
 8001854:	d321      	bcc.n	800189a <_format_hex+0xa2>
 8001856:	68b3      	ldr	r3, [r6, #8]
 8001858:	429d      	cmp	r5, r3
 800185a:	db24      	blt.n	80018a6 <_format_hex+0xae>
 800185c:	b011      	add	sp, #68	; 0x44
 800185e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001860:	f014 0f02 	tst.w	r4, #2
 8001864:	bf0c      	ite	eq
 8001866:	2757      	moveq	r7, #87	; 0x57
 8001868:	2737      	movne	r7, #55	; 0x37
 800186a:	4613      	mov	r3, r2
 800186c:	466d      	mov	r5, sp
 800186e:	f001 000f 	and.w	r0, r1, #15
 8001872:	2809      	cmp	r0, #9
 8001874:	bf94      	ite	ls
 8001876:	3030      	addls	r0, #48	; 0x30
 8001878:	19c0      	addhi	r0, r0, r7
 800187a:	0909      	lsrs	r1, r1, #4
 800187c:	f803 0901 	strb.w	r0, [r3], #-1
 8001880:	d0c6      	beq.n	8001810 <_format_hex+0x18>
 8001882:	42ab      	cmp	r3, r5
 8001884:	d1f3      	bne.n	800186e <_format_hex+0x76>
 8001886:	e7c3      	b.n	8001810 <_format_hex+0x18>
 8001888:	f803 5901 	strb.w	r5, [r3], #-1
 800188c:	e7c5      	b.n	800181a <_format_hex+0x22>
 800188e:	f803 5901 	strb.w	r5, [r3], #-1
 8001892:	e7cc      	b.n	800182e <_format_hex+0x36>
 8001894:	f803 4901 	strb.w	r4, [r3], #-1
 8001898:	e7d3      	b.n	8001842 <_format_hex+0x4a>
 800189a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800189e:	4630      	mov	r0, r6
 80018a0:	f7ff ff28 	bl	80016f4 <_xputch>
 80018a4:	e7d4      	b.n	8001850 <_format_hex+0x58>
 80018a6:	2120      	movs	r1, #32
 80018a8:	4630      	mov	r0, r6
 80018aa:	f7ff ff23 	bl	80016f4 <_xputch>
 80018ae:	3501      	adds	r5, #1
 80018b0:	e7d1      	b.n	8001856 <_format_hex+0x5e>
	...

080018b4 <_vprintf>:
 80018b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80018b8:	f04f 0800 	mov.w	r8, #0
 80018bc:	b096      	sub	sp, #88	; 0x58
 80018be:	e9cd 8004 	strd	r8, r0, [sp, #16]
 80018c2:	4614      	mov	r4, r2
 80018c4:	af06      	add	r7, sp, #24
 80018c6:	780b      	ldrb	r3, [r1, #0]
 80018c8:	b91b      	cbnz	r3, 80018d2 <_vprintf+0x1e>
 80018ca:	9804      	ldr	r0, [sp, #16]
 80018cc:	b016      	add	sp, #88	; 0x58
 80018ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80018d2:	2b25      	cmp	r3, #37	; 0x25
 80018d4:	f101 0601 	add.w	r6, r1, #1
 80018d8:	d005      	beq.n	80018e6 <_vprintf+0x32>
 80018da:	4619      	mov	r1, r3
 80018dc:	a801      	add	r0, sp, #4
 80018de:	f7ff ff09 	bl	80016f4 <_xputch>
 80018e2:	4631      	mov	r1, r6
 80018e4:	e7ef      	b.n	80018c6 <_vprintf+0x12>
 80018e6:	784b      	ldrb	r3, [r1, #1]
 80018e8:	f8cd 800c 	str.w	r8, [sp, #12]
 80018ec:	2b30      	cmp	r3, #48	; 0x30
 80018ee:	e9cd 8801 	strd	r8, r8, [sp, #4]
 80018f2:	d129      	bne.n	8001948 <_vprintf+0x94>
 80018f4:	2320      	movs	r3, #32
 80018f6:	9301      	str	r3, [sp, #4]
 80018f8:	1c8e      	adds	r6, r1, #2
 80018fa:	2200      	movs	r2, #0
 80018fc:	4635      	mov	r5, r6
 80018fe:	4613      	mov	r3, r2
 8001900:	f04f 0c0a 	mov.w	ip, #10
 8001904:	7829      	ldrb	r1, [r5, #0]
 8001906:	f1a1 0030 	sub.w	r0, r1, #48	; 0x30
 800190a:	2809      	cmp	r0, #9
 800190c:	462e      	mov	r6, r5
 800190e:	f105 0501 	add.w	r5, r5, #1
 8001912:	d91d      	bls.n	8001950 <_vprintf+0x9c>
 8001914:	b12a      	cbz	r2, 8001922 <_vprintf+0x6e>
 8001916:	9303      	str	r3, [sp, #12]
 8001918:	b11b      	cbz	r3, 8001922 <_vprintf+0x6e>
 800191a:	9b01      	ldr	r3, [sp, #4]
 800191c:	f043 0310 	orr.w	r3, r3, #16
 8001920:	9301      	str	r3, [sp, #4]
 8001922:	292e      	cmp	r1, #46	; 0x2e
 8001924:	d123      	bne.n	800196e <_vprintf+0xba>
 8001926:	7873      	ldrb	r3, [r6, #1]
 8001928:	2b2a      	cmp	r3, #42	; 0x2a
 800192a:	d015      	beq.n	8001958 <_vprintf+0xa4>
 800192c:	2100      	movs	r1, #0
 800192e:	1c70      	adds	r0, r6, #1
 8001930:	460a      	mov	r2, r1
 8001932:	250a      	movs	r5, #10
 8001934:	7803      	ldrb	r3, [r0, #0]
 8001936:	3b30      	subs	r3, #48	; 0x30
 8001938:	2b09      	cmp	r3, #9
 800193a:	4606      	mov	r6, r0
 800193c:	f100 0001 	add.w	r0, r0, #1
 8001940:	d958      	bls.n	80019f4 <_vprintf+0x140>
 8001942:	b181      	cbz	r1, 8001966 <_vprintf+0xb2>
 8001944:	9202      	str	r2, [sp, #8]
 8001946:	e00e      	b.n	8001966 <_vprintf+0xb2>
 8001948:	2b2d      	cmp	r3, #45	; 0x2d
 800194a:	d1d6      	bne.n	80018fa <_vprintf+0x46>
 800194c:	2340      	movs	r3, #64	; 0x40
 800194e:	e7d2      	b.n	80018f6 <_vprintf+0x42>
 8001950:	fb0c 0303 	mla	r3, ip, r3, r0
 8001954:	2201      	movs	r2, #1
 8001956:	e7d5      	b.n	8001904 <_vprintf+0x50>
 8001958:	f854 3b04 	ldr.w	r3, [r4], #4
 800195c:	2b00      	cmp	r3, #0
 800195e:	bfb8      	it	lt
 8001960:	425b      	neglt	r3, r3
 8001962:	3602      	adds	r6, #2
 8001964:	9302      	str	r3, [sp, #8]
 8001966:	9b01      	ldr	r3, [sp, #4]
 8001968:	f043 0301 	orr.w	r3, r3, #1
 800196c:	9301      	str	r3, [sp, #4]
 800196e:	7833      	ldrb	r3, [r6, #0]
 8001970:	2b6c      	cmp	r3, #108	; 0x6c
 8001972:	bf04      	itt	eq
 8001974:	3601      	addeq	r6, #1
 8001976:	9b01      	ldreq	r3, [sp, #4]
 8001978:	7831      	ldrb	r1, [r6, #0]
 800197a:	bf04      	itt	eq
 800197c:	f043 0304 	orreq.w	r3, r3, #4
 8001980:	9301      	streq	r3, [sp, #4]
 8001982:	2958      	cmp	r1, #88	; 0x58
 8001984:	f000 8169 	beq.w	8001c5a <_vprintf+0x3a6>
 8001988:	f1a1 0363 	sub.w	r3, r1, #99	; 0x63
 800198c:	b2da      	uxtb	r2, r3
 800198e:	2a15      	cmp	r2, #21
 8001990:	d8a4      	bhi.n	80018dc <_vprintf+0x28>
 8001992:	2b15      	cmp	r3, #21
 8001994:	d8a2      	bhi.n	80018dc <_vprintf+0x28>
 8001996:	a201      	add	r2, pc, #4	; (adr r2, 800199c <_vprintf+0xe8>)
 8001998:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800199c:	080019fd 	stmdaeq	r0, {r0, r2, r3, r4, r5, r6, r7, r8, fp, ip}
 80019a0:	08001a0f 	stmdaeq	r0, {r0, r1, r2, r3, r9, fp, ip}
 80019a4:	080018dd 	stmdaeq	r0, {r0, r2, r3, r4, r6, r7, fp, ip}
 80019a8:	08001a45 	stmdaeq	r0, {r0, r2, r6, r9, fp, ip}
 80019ac:	080018dd 	stmdaeq	r0, {r0, r2, r3, r4, r6, r7, fp, ip}
 80019b0:	080018dd 	stmdaeq	r0, {r0, r2, r3, r4, r6, r7, fp, ip}
 80019b4:	08001a0f 	stmdaeq	r0, {r0, r1, r2, r3, r9, fp, ip}
 80019b8:	080018dd 	stmdaeq	r0, {r0, r2, r3, r4, r6, r7, fp, ip}
 80019bc:	080018dd 	stmdaeq	r0, {r0, r2, r3, r4, r6, r7, fp, ip}
 80019c0:	080018dd 	stmdaeq	r0, {r0, r2, r3, r4, r6, r7, fp, ip}
 80019c4:	080018dd 	stmdaeq	r0, {r0, r2, r3, r4, r6, r7, fp, ip}
 80019c8:	080018dd 	stmdaeq	r0, {r0, r2, r3, r4, r6, r7, fp, ip}
 80019cc:	080018dd 	stmdaeq	r0, {r0, r2, r3, r4, r6, r7, fp, ip}
 80019d0:	08001b9d 	stmdaeq	r0, {r0, r2, r3, r4, r7, r8, r9, fp, ip}
 80019d4:	080018dd 	stmdaeq	r0, {r0, r2, r3, r4, r6, r7, fp, ip}
 80019d8:	080018dd 	stmdaeq	r0, {r0, r2, r3, r4, r6, r7, fp, ip}
 80019dc:	08001bc5 	stmdaeq	r0, {r0, r2, r6, r7, r8, r9, fp, ip}
 80019e0:	080018dd 	stmdaeq	r0, {r0, r2, r3, r4, r6, r7, fp, ip}
 80019e4:	08001c3b 	stmdaeq	r0, {r0, r1, r3, r4, r5, sl, fp, ip}
 80019e8:	080018dd 	stmdaeq	r0, {r0, r2, r3, r4, r6, r7, fp, ip}
 80019ec:	080018dd 	stmdaeq	r0, {r0, r2, r3, r4, r6, r7, fp, ip}
 80019f0:	08001c63 	stmdaeq	r0, {r0, r1, r5, r6, sl, fp, ip}
 80019f4:	fb05 3202 	mla	r2, r5, r2, r3
 80019f8:	2101      	movs	r1, #1
 80019fa:	e79b      	b.n	8001934 <_vprintf+0x80>
 80019fc:	4625      	mov	r5, r4
 80019fe:	a801      	add	r0, sp, #4
 8001a00:	f855 1b04 	ldr.w	r1, [r5], #4
 8001a04:	f7ff fe76 	bl	80016f4 <_xputch>
 8001a08:	3601      	adds	r6, #1
 8001a0a:	462c      	mov	r4, r5
 8001a0c:	e769      	b.n	80018e2 <_vprintf+0x2e>
 8001a0e:	9901      	ldr	r1, [sp, #4]
 8001a10:	074d      	lsls	r5, r1, #29
 8001a12:	bf4b      	itete	mi
 8001a14:	3407      	addmi	r4, #7
 8001a16:	4625      	movpl	r5, r4
 8001a18:	f024 0407 	bicmi.w	r4, r4, #7
 8001a1c:	f855 2b04 	ldrpl.w	r2, [r5], #4
 8001a20:	bf45      	ittet	mi
 8001a22:	6863      	ldrmi	r3, [r4, #4]
 8001a24:	4625      	movmi	r5, r4
 8001a26:	17d3      	asrpl	r3, r2, #31
 8001a28:	f855 2b08 	ldrmi.w	r2, [r5], #8
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	da05      	bge.n	8001a3c <_vprintf+0x188>
 8001a30:	f041 0108 	orr.w	r1, r1, #8
 8001a34:	4252      	negs	r2, r2
 8001a36:	9101      	str	r1, [sp, #4]
 8001a38:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8001a3c:	a801      	add	r0, sp, #4
 8001a3e:	f7ff fe71 	bl	8001724 <_format_int>
 8001a42:	e7e1      	b.n	8001a08 <_vprintf+0x154>
 8001a44:	3407      	adds	r4, #7
 8001a46:	f024 0507 	bic.w	r5, r4, #7
 8001a4a:	e8f5 0102 	ldrd	r0, r1, [r5], #8
 8001a4e:	f7fe fb7f 	bl	8000150 <__aeabi_d2f>
 8001a52:	9b01      	ldr	r3, [sp, #4]
 8001a54:	ee07 0a90 	vmov	s15, r0
 8001a58:	07dc      	lsls	r4, r3, #31
 8001a5a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001a5e:	bf4c      	ite	mi
 8001a60:	9c02      	ldrmi	r4, [sp, #8]
 8001a62:	2406      	movpl	r4, #6
 8001a64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a68:	bf48      	it	mi
 8001a6a:	eef1 7a67 	vnegmi.f32	s15, s15
 8001a6e:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8001a72:	bf4a      	itet	mi
 8001a74:	f10d 0a19 	addmi.w	sl, sp, #25
 8001a78:	46ba      	movpl	sl, r7
 8001a7a:	232d      	movmi	r3, #45	; 0x2d
 8001a7c:	ee17 0a10 	vmov	r0, s14
 8001a80:	f04f 0200 	mov.w	r2, #0
 8001a84:	4651      	mov	r1, sl
 8001a86:	bf48      	it	mi
 8001a88:	f88d 3018 	strbmi.w	r3, [sp, #24]
 8001a8c:	f7ff fdf8 	bl	8001680 <_itostr>
 8001a90:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8001a94:	232e      	movs	r3, #46	; 0x2e
 8001a96:	f80a 3000 	strb.w	r3, [sl, r0]
 8001a9a:	eb0a 0900 	add.w	r9, sl, r0
 8001a9e:	230a      	movs	r3, #10
 8001aa0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001aa4:	1c62      	adds	r2, r4, #1
 8001aa6:	f109 0901 	add.w	r9, r9, #1
 8001aaa:	4619      	mov	r1, r3
 8001aac:	2c00      	cmp	r4, #0
 8001aae:	dc3d      	bgt.n	8001b2c <_vprintf+0x278>
 8001ab0:	ee07 3a10 	vmov	s14, r3
 8001ab4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8001ab8:	4649      	mov	r1, r9
 8001aba:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001abe:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001ac2:	ee17 0a90 	vmov	r0, s15
 8001ac6:	f7ff fddb 	bl	8001680 <_itostr>
 8001aca:	4448      	add	r0, r9
 8001acc:	1bc0      	subs	r0, r0, r7
 8001ace:	1e44      	subs	r4, r0, #1
 8001ad0:	193a      	adds	r2, r7, r4
 8001ad2:	5d3b      	ldrb	r3, [r7, r4]
 8001ad4:	2b34      	cmp	r3, #52	; 0x34
 8001ad6:	d911      	bls.n	8001afc <_vprintf+0x248>
 8001ad8:	f812 1c01 	ldrb.w	r1, [r2, #-1]
 8001adc:	292e      	cmp	r1, #46	; 0x2e
 8001ade:	f102 33ff 	add.w	r3, r2, #4294967295	; 0xffffffff
 8001ae2:	d029      	beq.n	8001b38 <_vprintf+0x284>
 8001ae4:	469c      	mov	ip, r3
 8001ae6:	f04f 0e30 	mov.w	lr, #48	; 0x30
 8001aea:	4663      	mov	r3, ip
 8001aec:	f81c 1901 	ldrb.w	r1, [ip], #-1
 8001af0:	2939      	cmp	r1, #57	; 0x39
 8001af2:	d01e      	beq.n	8001b32 <_vprintf+0x27e>
 8001af4:	292e      	cmp	r1, #46	; 0x2e
 8001af6:	d01f      	beq.n	8001b38 <_vprintf+0x284>
 8001af8:	3101      	adds	r1, #1
 8001afa:	7019      	strb	r1, [r3, #0]
 8001afc:	f104 0358 	add.w	r3, r4, #88	; 0x58
 8001b00:	446b      	add	r3, sp
 8001b02:	f813 3c41 	ldrb.w	r3, [r3, #-65]
 8001b06:	2b2e      	cmp	r3, #46	; 0x2e
 8001b08:	bf08      	it	eq
 8001b0a:	f104 34ff 	addeq.w	r4, r4, #4294967295	; 0xffffffff
 8001b0e:	46a1      	mov	r9, r4
 8001b10:	9b03      	ldr	r3, [sp, #12]
 8001b12:	4599      	cmp	r9, r3
 8001b14:	db3b      	blt.n	8001b8e <_vprintf+0x2da>
 8001b16:	46b9      	mov	r9, r7
 8001b18:	2c00      	cmp	r4, #0
 8001b1a:	f77f af75 	ble.w	8001a08 <_vprintf+0x154>
 8001b1e:	f819 1b01 	ldrb.w	r1, [r9], #1
 8001b22:	a801      	add	r0, sp, #4
 8001b24:	f7ff fde6 	bl	80016f4 <_xputch>
 8001b28:	3c01      	subs	r4, #1
 8001b2a:	e7f5      	b.n	8001b18 <_vprintf+0x264>
 8001b2c:	434b      	muls	r3, r1
 8001b2e:	3c01      	subs	r4, #1
 8001b30:	e7bc      	b.n	8001aac <_vprintf+0x1f8>
 8001b32:	f88c e001 	strb.w	lr, [ip, #1]
 8001b36:	e7d8      	b.n	8001aea <_vprintf+0x236>
 8001b38:	3b01      	subs	r3, #1
 8001b3a:	f04f 0c30 	mov.w	ip, #48	; 0x30
 8001b3e:	7819      	ldrb	r1, [r3, #0]
 8001b40:	2939      	cmp	r1, #57	; 0x39
 8001b42:	d112      	bne.n	8001b6a <_vprintf+0x2b6>
 8001b44:	42bb      	cmp	r3, r7
 8001b46:	d20d      	bcs.n	8001b64 <_vprintf+0x2b0>
 8001b48:	1c5c      	adds	r4, r3, #1
 8001b4a:	1c99      	adds	r1, r3, #2
 8001b4c:	428c      	cmp	r4, r1
 8001b4e:	eba2 0203 	sub.w	r2, r2, r3
 8001b52:	d913      	bls.n	8001b7c <_vprintf+0x2c8>
 8001b54:	4619      	mov	r1, r3
 8001b56:	441a      	add	r2, r3
 8001b58:	428a      	cmp	r2, r1
 8001b5a:	d10b      	bne.n	8001b74 <_vprintf+0x2c0>
 8001b5c:	2231      	movs	r2, #49	; 0x31
 8001b5e:	705a      	strb	r2, [r3, #1]
 8001b60:	4604      	mov	r4, r0
 8001b62:	e7cb      	b.n	8001afc <_vprintf+0x248>
 8001b64:	f803 c901 	strb.w	ip, [r3], #-1
 8001b68:	e7e9      	b.n	8001b3e <_vprintf+0x28a>
 8001b6a:	42bb      	cmp	r3, r7
 8001b6c:	d3ec      	bcc.n	8001b48 <_vprintf+0x294>
 8001b6e:	292d      	cmp	r1, #45	; 0x2d
 8001b70:	d0ea      	beq.n	8001b48 <_vprintf+0x294>
 8001b72:	e7c1      	b.n	8001af8 <_vprintf+0x244>
 8001b74:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8001b78:	704c      	strb	r4, [r1, #1]
 8001b7a:	e7ed      	b.n	8001b58 <_vprintf+0x2a4>
 8001b7c:	4414      	add	r4, r2
 8001b7e:	440a      	add	r2, r1
 8001b80:	428a      	cmp	r2, r1
 8001b82:	d0eb      	beq.n	8001b5c <_vprintf+0x2a8>
 8001b84:	f814 cd01 	ldrb.w	ip, [r4, #-1]!
 8001b88:	f802 cd01 	strb.w	ip, [r2, #-1]!
 8001b8c:	e7f8      	b.n	8001b80 <_vprintf+0x2cc>
 8001b8e:	2120      	movs	r1, #32
 8001b90:	a801      	add	r0, sp, #4
 8001b92:	f7ff fdaf 	bl	80016f4 <_xputch>
 8001b96:	f109 0901 	add.w	r9, r9, #1
 8001b9a:	e7b9      	b.n	8001b10 <_vprintf+0x25c>
 8001b9c:	4625      	mov	r5, r4
 8001b9e:	2308      	movs	r3, #8
 8001ba0:	f855 4b04 	ldr.w	r4, [r5], #4
 8001ba4:	9303      	str	r3, [sp, #12]
 8001ba6:	2130      	movs	r1, #48	; 0x30
 8001ba8:	2320      	movs	r3, #32
 8001baa:	a801      	add	r0, sp, #4
 8001bac:	9301      	str	r3, [sp, #4]
 8001bae:	f7ff fda1 	bl	80016f4 <_xputch>
 8001bb2:	2178      	movs	r1, #120	; 0x78
 8001bb4:	a801      	add	r0, sp, #4
 8001bb6:	f7ff fd9d 	bl	80016f4 <_xputch>
 8001bba:	4621      	mov	r1, r4
 8001bbc:	a801      	add	r0, sp, #4
 8001bbe:	f7ff fe1b 	bl	80017f8 <_format_hex>
 8001bc2:	e721      	b.n	8001a08 <_vprintf+0x154>
 8001bc4:	4625      	mov	r5, r4
 8001bc6:	2400      	movs	r4, #0
 8001bc8:	f855 9b04 	ldr.w	r9, [r5], #4
 8001bcc:	f819 3004 	ldrb.w	r3, [r9, r4]
 8001bd0:	b993      	cbnz	r3, 8001bf8 <_vprintf+0x344>
 8001bd2:	9b01      	ldr	r3, [sp, #4]
 8001bd4:	07d9      	lsls	r1, r3, #31
 8001bd6:	d503      	bpl.n	8001be0 <_vprintf+0x32c>
 8001bd8:	9b02      	ldr	r3, [sp, #8]
 8001bda:	429c      	cmp	r4, r3
 8001bdc:	bfa8      	it	ge
 8001bde:	461c      	movge	r4, r3
 8001be0:	9b01      	ldr	r3, [sp, #4]
 8001be2:	065a      	lsls	r2, r3, #25
 8001be4:	f104 0a01 	add.w	sl, r4, #1
 8001be8:	d403      	bmi.n	8001bf2 <_vprintf+0x33e>
 8001bea:	9b03      	ldr	r3, [sp, #12]
 8001bec:	429c      	cmp	r4, r3
 8001bee:	db05      	blt.n	8001bfc <_vprintf+0x348>
 8001bf0:	4654      	mov	r4, sl
 8001bf2:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 8001bf6:	e00d      	b.n	8001c14 <_vprintf+0x360>
 8001bf8:	3401      	adds	r4, #1
 8001bfa:	e7e7      	b.n	8001bcc <_vprintf+0x318>
 8001bfc:	2120      	movs	r1, #32
 8001bfe:	a801      	add	r0, sp, #4
 8001c00:	f7ff fd78 	bl	80016f4 <_xputch>
 8001c04:	4654      	mov	r4, sl
 8001c06:	e7eb      	b.n	8001be0 <_vprintf+0x32c>
 8001c08:	a801      	add	r0, sp, #4
 8001c0a:	f7ff fd73 	bl	80016f4 <_xputch>
 8001c0e:	9b02      	ldr	r3, [sp, #8]
 8001c10:	3b01      	subs	r3, #1
 8001c12:	9302      	str	r3, [sp, #8]
 8001c14:	9b01      	ldr	r3, [sp, #4]
 8001c16:	07db      	lsls	r3, r3, #31
 8001c18:	d501      	bpl.n	8001c1e <_vprintf+0x36a>
 8001c1a:	9b02      	ldr	r3, [sp, #8]
 8001c1c:	b11b      	cbz	r3, 8001c26 <_vprintf+0x372>
 8001c1e:	f819 1f01 	ldrb.w	r1, [r9, #1]!
 8001c22:	2900      	cmp	r1, #0
 8001c24:	d1f0      	bne.n	8001c08 <_vprintf+0x354>
 8001c26:	9b03      	ldr	r3, [sp, #12]
 8001c28:	429c      	cmp	r4, r3
 8001c2a:	f6bf aeed 	bge.w	8001a08 <_vprintf+0x154>
 8001c2e:	2120      	movs	r1, #32
 8001c30:	a801      	add	r0, sp, #4
 8001c32:	f7ff fd5f 	bl	80016f4 <_xputch>
 8001c36:	3401      	adds	r4, #1
 8001c38:	e7f5      	b.n	8001c26 <_vprintf+0x372>
 8001c3a:	9b01      	ldr	r3, [sp, #4]
 8001c3c:	f013 0304 	ands.w	r3, r3, #4
 8001c40:	bf1d      	ittte	ne
 8001c42:	3407      	addne	r4, #7
 8001c44:	f024 0407 	bicne.w	r4, r4, #7
 8001c48:	4625      	movne	r5, r4
 8001c4a:	4625      	moveq	r5, r4
 8001c4c:	bf1a      	itte	ne
 8001c4e:	f855 2b08 	ldrne.w	r2, [r5], #8
 8001c52:	6863      	ldrne	r3, [r4, #4]
 8001c54:	f855 2b04 	ldreq.w	r2, [r5], #4
 8001c58:	e6f0      	b.n	8001a3c <_vprintf+0x188>
 8001c5a:	9b01      	ldr	r3, [sp, #4]
 8001c5c:	f043 0302 	orr.w	r3, r3, #2
 8001c60:	9301      	str	r3, [sp, #4]
 8001c62:	4625      	mov	r5, r4
 8001c64:	f855 1b04 	ldr.w	r1, [r5], #4
 8001c68:	e7a8      	b.n	8001bbc <_vprintf+0x308>
 8001c6a:	bf00      	nop

08001c6c <printf>:
 8001c6c:	b40f      	push	{r0, r1, r2, r3}
 8001c6e:	b507      	push	{r0, r1, r2, lr}
 8001c70:	aa04      	add	r2, sp, #16
 8001c72:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 8001c76:	f852 1b04 	ldr.w	r1, [r2], #4
 8001c7a:	9201      	str	r2, [sp, #4]
 8001c7c:	f7ff fe1a 	bl	80018b4 <_vprintf>
 8001c80:	b003      	add	sp, #12
 8001c82:	f85d eb04 	ldr.w	lr, [sp], #4
 8001c86:	b004      	add	sp, #16
 8001c88:	4770      	bx	lr
	...

08001c8c <snprintf>:
 8001c8c:	b40c      	push	{r2, r3}
 8001c8e:	b513      	push	{r0, r1, r4, lr}
 8001c90:	4c09      	ldr	r4, [pc, #36]	; (8001cb8 <snprintf+0x2c>)
 8001c92:	aa04      	add	r2, sp, #16
 8001c94:	460b      	mov	r3, r1
 8001c96:	6020      	str	r0, [r4, #0]
 8001c98:	f852 1b04 	ldr.w	r1, [r2], #4
 8001c9c:	9201      	str	r2, [sp, #4]
 8001c9e:	4618      	mov	r0, r3
 8001ca0:	f7ff fe08 	bl	80018b4 <_vprintf>
 8001ca4:	6822      	ldr	r2, [r4, #0]
 8001ca6:	2300      	movs	r3, #0
 8001ca8:	7013      	strb	r3, [r2, #0]
 8001caa:	6023      	str	r3, [r4, #0]
 8001cac:	b002      	add	sp, #8
 8001cae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001cb2:	b002      	add	sp, #8
 8001cb4:	4770      	bx	lr
 8001cb6:	bf00      	nop
 8001cb8:	20001088 	andcs	r1, r0, r8, lsl #1

08001cbc <vsnprintf>:
 8001cbc:	b538      	push	{r3, r4, r5, lr}
 8001cbe:	4c06      	ldr	r4, [pc, #24]	; (8001cd8 <vsnprintf+0x1c>)
 8001cc0:	4605      	mov	r5, r0
 8001cc2:	4608      	mov	r0, r1
 8001cc4:	4611      	mov	r1, r2
 8001cc6:	461a      	mov	r2, r3
 8001cc8:	6025      	str	r5, [r4, #0]
 8001cca:	f7ff fdf3 	bl	80018b4 <_vprintf>
 8001cce:	6822      	ldr	r2, [r4, #0]
 8001cd0:	2300      	movs	r3, #0
 8001cd2:	7013      	strb	r3, [r2, #0]
 8001cd4:	6023      	str	r3, [r4, #0]
 8001cd6:	bd38      	pop	{r3, r4, r5, pc}
 8001cd8:	20001088 	andcs	r1, r0, r8, lsl #1

08001cdc <puts>:
 8001cdc:	b508      	push	{r3, lr}
 8001cde:	f006 f93b 	bl	8007f58 <console_puts>
 8001ce2:	200a      	movs	r0, #10
 8001ce4:	f006 f936 	bl	8007f54 <console_putc>
 8001ce8:	2001      	movs	r0, #1
 8001cea:	bd08      	pop	{r3, pc}

08001cec <__udivmoddi4>:
 8001cec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001cf0:	9e08      	ldr	r6, [sp, #32]
 8001cf2:	460d      	mov	r5, r1
 8001cf4:	4604      	mov	r4, r0
 8001cf6:	460f      	mov	r7, r1
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d14a      	bne.n	8001d92 <__udivmoddi4+0xa6>
 8001cfc:	428a      	cmp	r2, r1
 8001cfe:	4694      	mov	ip, r2
 8001d00:	d965      	bls.n	8001dce <__udivmoddi4+0xe2>
 8001d02:	fab2 f382 	clz	r3, r2
 8001d06:	b143      	cbz	r3, 8001d1a <__udivmoddi4+0x2e>
 8001d08:	fa02 fc03 	lsl.w	ip, r2, r3
 8001d0c:	f1c3 0220 	rsb	r2, r3, #32
 8001d10:	409f      	lsls	r7, r3
 8001d12:	fa20 f202 	lsr.w	r2, r0, r2
 8001d16:	4317      	orrs	r7, r2
 8001d18:	409c      	lsls	r4, r3
 8001d1a:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8001d1e:	fa1f f58c 	uxth.w	r5, ip
 8001d22:	fbb7 f1fe 	udiv	r1, r7, lr
 8001d26:	0c22      	lsrs	r2, r4, #16
 8001d28:	fb0e 7711 	mls	r7, lr, r1, r7
 8001d2c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8001d30:	fb01 f005 	mul.w	r0, r1, r5
 8001d34:	4290      	cmp	r0, r2
 8001d36:	d90a      	bls.n	8001d4e <__udivmoddi4+0x62>
 8001d38:	eb1c 0202 	adds.w	r2, ip, r2
 8001d3c:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8001d40:	f080 811c 	bcs.w	8001f7c <__udivmoddi4+0x290>
 8001d44:	4290      	cmp	r0, r2
 8001d46:	f240 8119 	bls.w	8001f7c <__udivmoddi4+0x290>
 8001d4a:	3902      	subs	r1, #2
 8001d4c:	4462      	add	r2, ip
 8001d4e:	1a12      	subs	r2, r2, r0
 8001d50:	b2a4      	uxth	r4, r4
 8001d52:	fbb2 f0fe 	udiv	r0, r2, lr
 8001d56:	fb0e 2210 	mls	r2, lr, r0, r2
 8001d5a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8001d5e:	fb00 f505 	mul.w	r5, r0, r5
 8001d62:	42a5      	cmp	r5, r4
 8001d64:	d90a      	bls.n	8001d7c <__udivmoddi4+0x90>
 8001d66:	eb1c 0404 	adds.w	r4, ip, r4
 8001d6a:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8001d6e:	f080 8107 	bcs.w	8001f80 <__udivmoddi4+0x294>
 8001d72:	42a5      	cmp	r5, r4
 8001d74:	f240 8104 	bls.w	8001f80 <__udivmoddi4+0x294>
 8001d78:	4464      	add	r4, ip
 8001d7a:	3802      	subs	r0, #2
 8001d7c:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8001d80:	1b64      	subs	r4, r4, r5
 8001d82:	2100      	movs	r1, #0
 8001d84:	b11e      	cbz	r6, 8001d8e <__udivmoddi4+0xa2>
 8001d86:	40dc      	lsrs	r4, r3
 8001d88:	2300      	movs	r3, #0
 8001d8a:	e9c6 4300 	strd	r4, r3, [r6]
 8001d8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001d92:	428b      	cmp	r3, r1
 8001d94:	d908      	bls.n	8001da8 <__udivmoddi4+0xbc>
 8001d96:	2e00      	cmp	r6, #0
 8001d98:	f000 80ed 	beq.w	8001f76 <__udivmoddi4+0x28a>
 8001d9c:	2100      	movs	r1, #0
 8001d9e:	e9c6 0500 	strd	r0, r5, [r6]
 8001da2:	4608      	mov	r0, r1
 8001da4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001da8:	fab3 f183 	clz	r1, r3
 8001dac:	2900      	cmp	r1, #0
 8001dae:	d149      	bne.n	8001e44 <__udivmoddi4+0x158>
 8001db0:	42ab      	cmp	r3, r5
 8001db2:	d302      	bcc.n	8001dba <__udivmoddi4+0xce>
 8001db4:	4282      	cmp	r2, r0
 8001db6:	f200 80f8 	bhi.w	8001faa <__udivmoddi4+0x2be>
 8001dba:	1a84      	subs	r4, r0, r2
 8001dbc:	eb65 0203 	sbc.w	r2, r5, r3
 8001dc0:	2001      	movs	r0, #1
 8001dc2:	4617      	mov	r7, r2
 8001dc4:	2e00      	cmp	r6, #0
 8001dc6:	d0e2      	beq.n	8001d8e <__udivmoddi4+0xa2>
 8001dc8:	e9c6 4700 	strd	r4, r7, [r6]
 8001dcc:	e7df      	b.n	8001d8e <__udivmoddi4+0xa2>
 8001dce:	b902      	cbnz	r2, 8001dd2 <__udivmoddi4+0xe6>
 8001dd0:	deff      	udf	#255	; 0xff
 8001dd2:	fab2 f382 	clz	r3, r2
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	f040 8090 	bne.w	8001efc <__udivmoddi4+0x210>
 8001ddc:	1a8a      	subs	r2, r1, r2
 8001dde:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8001de2:	fa1f fe8c 	uxth.w	lr, ip
 8001de6:	2101      	movs	r1, #1
 8001de8:	fbb2 f5f7 	udiv	r5, r2, r7
 8001dec:	fb07 2015 	mls	r0, r7, r5, r2
 8001df0:	0c22      	lsrs	r2, r4, #16
 8001df2:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8001df6:	fb0e f005 	mul.w	r0, lr, r5
 8001dfa:	4290      	cmp	r0, r2
 8001dfc:	d908      	bls.n	8001e10 <__udivmoddi4+0x124>
 8001dfe:	eb1c 0202 	adds.w	r2, ip, r2
 8001e02:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8001e06:	d202      	bcs.n	8001e0e <__udivmoddi4+0x122>
 8001e08:	4290      	cmp	r0, r2
 8001e0a:	f200 80cb 	bhi.w	8001fa4 <__udivmoddi4+0x2b8>
 8001e0e:	4645      	mov	r5, r8
 8001e10:	1a12      	subs	r2, r2, r0
 8001e12:	b2a4      	uxth	r4, r4
 8001e14:	fbb2 f0f7 	udiv	r0, r2, r7
 8001e18:	fb07 2210 	mls	r2, r7, r0, r2
 8001e1c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8001e20:	fb0e fe00 	mul.w	lr, lr, r0
 8001e24:	45a6      	cmp	lr, r4
 8001e26:	d908      	bls.n	8001e3a <__udivmoddi4+0x14e>
 8001e28:	eb1c 0404 	adds.w	r4, ip, r4
 8001e2c:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8001e30:	d202      	bcs.n	8001e38 <__udivmoddi4+0x14c>
 8001e32:	45a6      	cmp	lr, r4
 8001e34:	f200 80bb 	bhi.w	8001fae <__udivmoddi4+0x2c2>
 8001e38:	4610      	mov	r0, r2
 8001e3a:	eba4 040e 	sub.w	r4, r4, lr
 8001e3e:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8001e42:	e79f      	b.n	8001d84 <__udivmoddi4+0x98>
 8001e44:	f1c1 0720 	rsb	r7, r1, #32
 8001e48:	408b      	lsls	r3, r1
 8001e4a:	fa22 fc07 	lsr.w	ip, r2, r7
 8001e4e:	ea4c 0c03 	orr.w	ip, ip, r3
 8001e52:	fa05 f401 	lsl.w	r4, r5, r1
 8001e56:	fa20 f307 	lsr.w	r3, r0, r7
 8001e5a:	40fd      	lsrs	r5, r7
 8001e5c:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8001e60:	4323      	orrs	r3, r4
 8001e62:	fbb5 f8f9 	udiv	r8, r5, r9
 8001e66:	fa1f fe8c 	uxth.w	lr, ip
 8001e6a:	fb09 5518 	mls	r5, r9, r8, r5
 8001e6e:	0c1c      	lsrs	r4, r3, #16
 8001e70:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8001e74:	fb08 f50e 	mul.w	r5, r8, lr
 8001e78:	42a5      	cmp	r5, r4
 8001e7a:	fa02 f201 	lsl.w	r2, r2, r1
 8001e7e:	fa00 f001 	lsl.w	r0, r0, r1
 8001e82:	d90b      	bls.n	8001e9c <__udivmoddi4+0x1b0>
 8001e84:	eb1c 0404 	adds.w	r4, ip, r4
 8001e88:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8001e8c:	f080 8088 	bcs.w	8001fa0 <__udivmoddi4+0x2b4>
 8001e90:	42a5      	cmp	r5, r4
 8001e92:	f240 8085 	bls.w	8001fa0 <__udivmoddi4+0x2b4>
 8001e96:	f1a8 0802 	sub.w	r8, r8, #2
 8001e9a:	4464      	add	r4, ip
 8001e9c:	1b64      	subs	r4, r4, r5
 8001e9e:	b29d      	uxth	r5, r3
 8001ea0:	fbb4 f3f9 	udiv	r3, r4, r9
 8001ea4:	fb09 4413 	mls	r4, r9, r3, r4
 8001ea8:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8001eac:	fb03 fe0e 	mul.w	lr, r3, lr
 8001eb0:	45a6      	cmp	lr, r4
 8001eb2:	d908      	bls.n	8001ec6 <__udivmoddi4+0x1da>
 8001eb4:	eb1c 0404 	adds.w	r4, ip, r4
 8001eb8:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8001ebc:	d26c      	bcs.n	8001f98 <__udivmoddi4+0x2ac>
 8001ebe:	45a6      	cmp	lr, r4
 8001ec0:	d96a      	bls.n	8001f98 <__udivmoddi4+0x2ac>
 8001ec2:	3b02      	subs	r3, #2
 8001ec4:	4464      	add	r4, ip
 8001ec6:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8001eca:	fba3 9502 	umull	r9, r5, r3, r2
 8001ece:	eba4 040e 	sub.w	r4, r4, lr
 8001ed2:	42ac      	cmp	r4, r5
 8001ed4:	46c8      	mov	r8, r9
 8001ed6:	46ae      	mov	lr, r5
 8001ed8:	d356      	bcc.n	8001f88 <__udivmoddi4+0x29c>
 8001eda:	d053      	beq.n	8001f84 <__udivmoddi4+0x298>
 8001edc:	b156      	cbz	r6, 8001ef4 <__udivmoddi4+0x208>
 8001ede:	ebb0 0208 	subs.w	r2, r0, r8
 8001ee2:	eb64 040e 	sbc.w	r4, r4, lr
 8001ee6:	fa04 f707 	lsl.w	r7, r4, r7
 8001eea:	40ca      	lsrs	r2, r1
 8001eec:	40cc      	lsrs	r4, r1
 8001eee:	4317      	orrs	r7, r2
 8001ef0:	e9c6 7400 	strd	r7, r4, [r6]
 8001ef4:	4618      	mov	r0, r3
 8001ef6:	2100      	movs	r1, #0
 8001ef8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001efc:	f1c3 0120 	rsb	r1, r3, #32
 8001f00:	fa02 fc03 	lsl.w	ip, r2, r3
 8001f04:	fa20 f201 	lsr.w	r2, r0, r1
 8001f08:	fa25 f101 	lsr.w	r1, r5, r1
 8001f0c:	409d      	lsls	r5, r3
 8001f0e:	432a      	orrs	r2, r5
 8001f10:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8001f14:	fa1f fe8c 	uxth.w	lr, ip
 8001f18:	fbb1 f0f7 	udiv	r0, r1, r7
 8001f1c:	fb07 1510 	mls	r5, r7, r0, r1
 8001f20:	0c11      	lsrs	r1, r2, #16
 8001f22:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8001f26:	fb00 f50e 	mul.w	r5, r0, lr
 8001f2a:	428d      	cmp	r5, r1
 8001f2c:	fa04 f403 	lsl.w	r4, r4, r3
 8001f30:	d908      	bls.n	8001f44 <__udivmoddi4+0x258>
 8001f32:	eb1c 0101 	adds.w	r1, ip, r1
 8001f36:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8001f3a:	d22f      	bcs.n	8001f9c <__udivmoddi4+0x2b0>
 8001f3c:	428d      	cmp	r5, r1
 8001f3e:	d92d      	bls.n	8001f9c <__udivmoddi4+0x2b0>
 8001f40:	3802      	subs	r0, #2
 8001f42:	4461      	add	r1, ip
 8001f44:	1b49      	subs	r1, r1, r5
 8001f46:	b292      	uxth	r2, r2
 8001f48:	fbb1 f5f7 	udiv	r5, r1, r7
 8001f4c:	fb07 1115 	mls	r1, r7, r5, r1
 8001f50:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8001f54:	fb05 f10e 	mul.w	r1, r5, lr
 8001f58:	4291      	cmp	r1, r2
 8001f5a:	d908      	bls.n	8001f6e <__udivmoddi4+0x282>
 8001f5c:	eb1c 0202 	adds.w	r2, ip, r2
 8001f60:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8001f64:	d216      	bcs.n	8001f94 <__udivmoddi4+0x2a8>
 8001f66:	4291      	cmp	r1, r2
 8001f68:	d914      	bls.n	8001f94 <__udivmoddi4+0x2a8>
 8001f6a:	3d02      	subs	r5, #2
 8001f6c:	4462      	add	r2, ip
 8001f6e:	1a52      	subs	r2, r2, r1
 8001f70:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8001f74:	e738      	b.n	8001de8 <__udivmoddi4+0xfc>
 8001f76:	4631      	mov	r1, r6
 8001f78:	4630      	mov	r0, r6
 8001f7a:	e708      	b.n	8001d8e <__udivmoddi4+0xa2>
 8001f7c:	4639      	mov	r1, r7
 8001f7e:	e6e6      	b.n	8001d4e <__udivmoddi4+0x62>
 8001f80:	4610      	mov	r0, r2
 8001f82:	e6fb      	b.n	8001d7c <__udivmoddi4+0x90>
 8001f84:	4548      	cmp	r0, r9
 8001f86:	d2a9      	bcs.n	8001edc <__udivmoddi4+0x1f0>
 8001f88:	ebb9 0802 	subs.w	r8, r9, r2
 8001f8c:	eb65 0e0c 	sbc.w	lr, r5, ip
 8001f90:	3b01      	subs	r3, #1
 8001f92:	e7a3      	b.n	8001edc <__udivmoddi4+0x1f0>
 8001f94:	4645      	mov	r5, r8
 8001f96:	e7ea      	b.n	8001f6e <__udivmoddi4+0x282>
 8001f98:	462b      	mov	r3, r5
 8001f9a:	e794      	b.n	8001ec6 <__udivmoddi4+0x1da>
 8001f9c:	4640      	mov	r0, r8
 8001f9e:	e7d1      	b.n	8001f44 <__udivmoddi4+0x258>
 8001fa0:	46d0      	mov	r8, sl
 8001fa2:	e77b      	b.n	8001e9c <__udivmoddi4+0x1b0>
 8001fa4:	3d02      	subs	r5, #2
 8001fa6:	4462      	add	r2, ip
 8001fa8:	e732      	b.n	8001e10 <__udivmoddi4+0x124>
 8001faa:	4608      	mov	r0, r1
 8001fac:	e70a      	b.n	8001dc4 <__udivmoddi4+0xd8>
 8001fae:	4464      	add	r4, ip
 8001fb0:	3802      	subs	r0, #2
 8001fb2:	e742      	b.n	8001e3a <__udivmoddi4+0x14e>

08001fb4 <DMXReceiver::Run(short&)>:
 8001fb4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001fb6:	4b24      	ldr	r3, [pc, #144]	; (8002048 <DMXReceiver::Run(short&)+0x94>)
 8001fb8:	460d      	mov	r5, r1
 8001fba:	7819      	ldrb	r1, [r3, #0]
 8001fbc:	b085      	sub	sp, #20
 8001fbe:	4606      	mov	r6, r0
 8001fc0:	b121      	cbz	r1, 8001fcc <DMXReceiver::Run(short&)+0x18>
 8001fc2:	2400      	movs	r4, #0
 8001fc4:	802c      	strh	r4, [r5, #0]
 8001fc6:	4620      	mov	r0, r4
 8001fc8:	b005      	add	sp, #20
 8001fca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001fcc:	9103      	str	r1, [sp, #12]
 8001fce:	f001 fe97 	bl	8003d00 <Dmx::GetDmxUpdatesPerSecond(unsigned long)>
 8001fd2:	9903      	ldr	r1, [sp, #12]
 8001fd4:	4604      	mov	r4, r0
 8001fd6:	b998      	cbnz	r0, 8002000 <DMXReceiver::Run(short&)+0x4c>
 8001fd8:	4e1c      	ldr	r6, [pc, #112]	; (800204c <DMXReceiver::Run(short&)+0x98>)
 8001fda:	7833      	ldrb	r3, [r6, #0]
 8001fdc:	b15b      	cbz	r3, 8001ff6 <DMXReceiver::Run(short&)+0x42>
 8001fde:	4b1c      	ldr	r3, [pc, #112]	; (8002050 <DMXReceiver::Run(short&)+0x9c>)
 8001fe0:	6818      	ldr	r0, [r3, #0]
 8001fe2:	6803      	ldr	r3, [r0, #0]
 8001fe4:	4621      	mov	r1, r4
 8001fe6:	68db      	ldr	r3, [r3, #12]
 8001fe8:	4798      	blx	r3
 8001fea:	4b1a      	ldr	r3, [pc, #104]	; (8002054 <DMXReceiver::Run(short&)+0xa0>)
 8001fec:	7034      	strb	r4, [r6, #0]
 8001fee:	6818      	ldr	r0, [r3, #0]
 8001ff0:	2102      	movs	r1, #2
 8001ff2:	f005 fffe 	bl	8007ff2 <Hardware::SetMode(hardware::ledblink::Mode)>
 8001ff6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001ffa:	802b      	strh	r3, [r5, #0]
 8001ffc:	2400      	movs	r4, #0
 8001ffe:	e7e2      	b.n	8001fc6 <DMXReceiver::Run(short&)+0x12>
 8002000:	4630      	mov	r0, r6
 8002002:	9103      	str	r1, [sp, #12]
 8002004:	f001 fe62 	bl	8003ccc <Dmx::GetDmxAvailable(unsigned long)>
 8002008:	2800      	cmp	r0, #0
 800200a:	d0da      	beq.n	8001fc2 <DMXReceiver::Run(short&)+0xe>
 800200c:	4f10      	ldr	r7, [pc, #64]	; (8002050 <DMXReceiver::Run(short&)+0x9c>)
 800200e:	f8d0 3204 	ldr.w	r3, [r0, #516]	; 0x204
 8002012:	802b      	strh	r3, [r5, #0]
 8002014:	1c44      	adds	r4, r0, #1
 8002016:	6838      	ldr	r0, [r7, #0]
 8002018:	9903      	ldr	r1, [sp, #12]
 800201a:	6802      	ldr	r2, [r0, #0]
 800201c:	2601      	movs	r6, #1
 800201e:	9600      	str	r6, [sp, #0]
 8002020:	6915      	ldr	r5, [r2, #16]
 8002022:	b29b      	uxth	r3, r3
 8002024:	4622      	mov	r2, r4
 8002026:	47a8      	blx	r5
 8002028:	4d08      	ldr	r5, [pc, #32]	; (800204c <DMXReceiver::Run(short&)+0x98>)
 800202a:	7829      	ldrb	r1, [r5, #0]
 800202c:	2900      	cmp	r1, #0
 800202e:	d1ca      	bne.n	8001fc6 <DMXReceiver::Run(short&)+0x12>
 8002030:	6838      	ldr	r0, [r7, #0]
 8002032:	6803      	ldr	r3, [r0, #0]
 8002034:	689b      	ldr	r3, [r3, #8]
 8002036:	4798      	blx	r3
 8002038:	4b06      	ldr	r3, [pc, #24]	; (8002054 <DMXReceiver::Run(short&)+0xa0>)
 800203a:	702e      	strb	r6, [r5, #0]
 800203c:	6818      	ldr	r0, [r3, #0]
 800203e:	2103      	movs	r1, #3
 8002040:	f005 ffd7 	bl	8007ff2 <Hardware::SetMode(hardware::ledblink::Mode)>
 8002044:	e7bf      	b.n	8001fc6 <DMXReceiver::Run(short&)+0x12>
 8002046:	bf00      	nop
 8002048:	200011a4 	andcs	r1, r0, r4, lsr #3
 800204c:	2000119c 	mulcs	r0, ip, r1
 8002050:	200011a0 	andcs	r1, r0, r0, lsr #3
 8002054:	20002770 	andcs	r2, r0, r0, ror r7

08002058 <RDMResponder::HandleResponse(unsigned char*)>:
 8002058:	780a      	ldrb	r2, [r1, #0]
 800205a:	2acc      	cmp	r2, #204	; 0xcc
 800205c:	b510      	push	{r4, lr}
 800205e:	d109      	bne.n	8002074 <RDMResponder::HandleResponse(unsigned char*)+0x1c>
 8002060:	788c      	ldrb	r4, [r1, #2]
 8002062:	3402      	adds	r4, #2
 8002064:	4622      	mov	r2, r4
 8002066:	2000      	movs	r0, #0
 8002068:	f001 feaa 	bl	8003dc0 <Rdm::SendRawRespondMessage(unsigned long, unsigned char const*, unsigned long)>
 800206c:	f004 ffcc 	bl	8007008 <configstore::delay()>
 8002070:	4620      	mov	r0, r4
 8002072:	bd10      	pop	{r4, pc}
 8002074:	2afe      	cmp	r2, #254	; 0xfe
 8002076:	d105      	bne.n	8002084 <RDMResponder::HandleResponse(unsigned char*)+0x2c>
 8002078:	2218      	movs	r2, #24
 800207a:	2000      	movs	r0, #0
 800207c:	f001 feb4 	bl	8003de8 <Rdm::SendDiscoveryRespondMessage(unsigned long, unsigned char const*, unsigned long)>
 8002080:	2418      	movs	r4, #24
 8002082:	e7f3      	b.n	800206c <RDMResponder::HandleResponse(unsigned char*)+0x14>
 8002084:	f06f 0402 	mvn.w	r4, #2
 8002088:	e7f0      	b.n	800206c <RDMResponder::HandleResponse(unsigned char*)+0x14>
	...

0800208c <RDMResponder::Run()>:
 800208c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800208e:	4604      	mov	r4, r0
 8002090:	f10d 0106 	add.w	r1, sp, #6
 8002094:	30a4      	adds	r0, #164	; 0xa4
 8002096:	f7ff ff8d 	bl	8001fb4 <DMXReceiver::Run(short&)>
 800209a:	4e1f      	ldr	r6, [pc, #124]	; (8002118 <RDMResponder::Run()+0x8c>)
 800209c:	4601      	mov	r1, r0
 800209e:	6830      	ldr	r0, [r6, #0]
 80020a0:	8883      	ldrh	r3, [r0, #4]
 80020a2:	b153      	cbz	r3, 80020ba <RDMResponder::Run()+0x2e>
 80020a4:	f9bd 2006 	ldrsh.w	r2, [sp, #6]
 80020a8:	1c53      	adds	r3, r2, #1
 80020aa:	d120      	bne.n	80020ee <RDMResponder::Run()+0x62>
 80020ac:	4d1b      	ldr	r5, [pc, #108]	; (800211c <RDMResponder::Run()+0x90>)
 80020ae:	782b      	ldrb	r3, [r5, #0]
 80020b0:	b11b      	cbz	r3, 80020ba <RDMResponder::Run()+0x2e>
 80020b2:	f001 f911 	bl	80032d8 <RDMSubDevices::Stop()>
 80020b6:	2300      	movs	r3, #0
 80020b8:	702b      	strb	r3, [r5, #0]
 80020ba:	2000      	movs	r0, #0
 80020bc:	f001 f9be 	bl	800343c <Rdm::Receive(unsigned long)>
 80020c0:	b198      	cbz	r0, 80020ea <RDMResponder::Run()+0x5e>
 80020c2:	7803      	ldrb	r3, [r0, #0]
 80020c4:	2bcc      	cmp	r3, #204	; 0xcc
 80020c6:	d120      	bne.n	800210a <RDMResponder::Run()+0x7e>
 80020c8:	7d03      	ldrb	r3, [r0, #20]
 80020ca:	2b20      	cmp	r3, #32
 80020cc:	d003      	beq.n	80020d6 <RDMResponder::Run()+0x4a>
 80020ce:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80020d2:	2b10      	cmp	r3, #16
 80020d4:	d11c      	bne.n	8002110 <RDMResponder::Run()+0x84>
 80020d6:	1c41      	adds	r1, r0, #1
 80020d8:	4a11      	ldr	r2, [pc, #68]	; (8002120 <RDMResponder::Run()+0x94>)
 80020da:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
 80020de:	f002 ffe1 	bl	80050a4 <RDMHandler::HandleData(unsigned char const*, unsigned char*)>
 80020e2:	490f      	ldr	r1, [pc, #60]	; (8002120 <RDMResponder::Run()+0x94>)
 80020e4:	4620      	mov	r0, r4
 80020e6:	f7ff ffb7 	bl	8002058 <RDMResponder::HandleResponse(unsigned char*)>
 80020ea:	b002      	add	sp, #8
 80020ec:	bd70      	pop	{r4, r5, r6, pc}
 80020ee:	2900      	cmp	r1, #0
 80020f0:	d0e3      	beq.n	80020ba <RDMResponder::Run()+0x2e>
 80020f2:	4d0a      	ldr	r5, [pc, #40]	; (800211c <RDMResponder::Run()+0x90>)
 80020f4:	b292      	uxth	r2, r2
 80020f6:	f001 f8ff 	bl	80032f8 <RDMSubDevices::SetData(unsigned char const*, unsigned long)>
 80020fa:	782b      	ldrb	r3, [r5, #0]
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d1dc      	bne.n	80020ba <RDMResponder::Run()+0x2e>
 8002100:	6830      	ldr	r0, [r6, #0]
 8002102:	f001 f8d9 	bl	80032b8 <RDMSubDevices::Start()>
 8002106:	2301      	movs	r3, #1
 8002108:	e7d6      	b.n	80020b8 <RDMResponder::Run()+0x2c>
 800210a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800210e:	e7ec      	b.n	80020ea <RDMResponder::Run()+0x5e>
 8002110:	f06f 0001 	mvn.w	r0, #1
 8002114:	e7e9      	b.n	80020ea <RDMResponder::Run()+0x5e>
 8002116:	bf00      	nop
 8002118:	20001198 	mulcs	r0, r8, r1
 800211c:	2000118d 	andcs	r1, r0, sp, lsl #3
 8002120:	2000108c 	andcs	r1, r0, ip, lsl #1

08002124 <CpuTemperature::Initialize()>:
 8002124:	2001      	movs	r0, #1
 8002126:	4770      	bx	lr

08002128 <CpuTemperature::~CpuTemperature()>:
 8002128:	4770      	bx	lr

0800212a <CpuTemperature::GetValue()>:
 800212a:	b508      	push	{r3, lr}
 800212c:	f007 fa42 	bl	80095b4 <gd32_adc_gettemp()>
 8002130:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8002134:	ee10 3a10 	vmov	r3, s0
 8002138:	b218      	sxth	r0, r3
 800213a:	bd08      	pop	{r3, pc}

0800213c <CpuTemperature::~CpuTemperature()>:
 800213c:	b510      	push	{r4, lr}
 800213e:	4604      	mov	r4, r0
 8002140:	f006 f9b9 	bl	80084b6 <operator delete(void*)>
 8002144:	4620      	mov	r0, r4
 8002146:	bd10      	pop	{r4, pc}

08002148 <RDMSensors::~RDMSensors()>:
 8002148:	b570      	push	{r4, r5, r6, lr}
 800214a:	2500      	movs	r5, #0
 800214c:	4604      	mov	r4, r0
 800214e:	462e      	mov	r6, r5
 8002150:	7923      	ldrb	r3, [r4, #4]
 8002152:	6820      	ldr	r0, [r4, #0]
 8002154:	42ab      	cmp	r3, r5
 8002156:	d804      	bhi.n	8002162 <RDMSensors::~RDMSensors()+0x1a>
 8002158:	b108      	cbz	r0, 800215e <RDMSensors::~RDMSensors()+0x16>
 800215a:	f006 f9ae 	bl	80084ba <operator delete[](void*)>
 800215e:	4620      	mov	r0, r4
 8002160:	bd70      	pop	{r4, r5, r6, pc}
 8002162:	f850 0025 	ldr.w	r0, [r0, r5, lsl #2]
 8002166:	b128      	cbz	r0, 8002174 <RDMSensors::~RDMSensors()+0x2c>
 8002168:	6803      	ldr	r3, [r0, #0]
 800216a:	685b      	ldr	r3, [r3, #4]
 800216c:	4798      	blx	r3
 800216e:	6823      	ldr	r3, [r4, #0]
 8002170:	f843 6025 	str.w	r6, [r3, r5, lsl #2]
 8002174:	3501      	adds	r5, #1
 8002176:	e7eb      	b.n	8002150 <RDMSensors::~RDMSensors()+0x8>

08002178 <RDMSensors::GetDefintion(unsigned char)>:
 8002178:	6803      	ldr	r3, [r0, #0]
 800217a:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
 800217e:	3006      	adds	r0, #6
 8002180:	4770      	bx	lr

08002182 <RDMSensors::GetValues(unsigned char)>:
 8002182:	6803      	ldr	r3, [r0, #0]
 8002184:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
 8002188:	f000 bbec 	b.w	8002964 <RDMSensor::GetValues()>

0800218c <RDMSensors::SetValues(unsigned char)>:
 800218c:	29ff      	cmp	r1, #255	; 0xff
 800218e:	b538      	push	{r3, r4, r5, lr}
 8002190:	4604      	mov	r4, r0
 8002192:	d010      	beq.n	80021b6 <RDMSensors::SetValues(unsigned char)+0x2a>
 8002194:	6803      	ldr	r3, [r0, #0]
 8002196:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
 800219a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800219e:	f000 bbf6 	b.w	800298e <RDMSensor::SetValues()>
 80021a2:	6823      	ldr	r3, [r4, #0]
 80021a4:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80021a8:	f000 fbf1 	bl	800298e <RDMSensor::SetValues()>
 80021ac:	3501      	adds	r5, #1
 80021ae:	7923      	ldrb	r3, [r4, #4]
 80021b0:	42ab      	cmp	r3, r5
 80021b2:	d8f6      	bhi.n	80021a2 <RDMSensors::SetValues(unsigned char)+0x16>
 80021b4:	bd38      	pop	{r3, r4, r5, pc}
 80021b6:	2500      	movs	r5, #0
 80021b8:	e7f9      	b.n	80021ae <RDMSensors::SetValues(unsigned char)+0x22>

080021ba <RDMSensors::SetRecord(unsigned char)>:
 80021ba:	29ff      	cmp	r1, #255	; 0xff
 80021bc:	b538      	push	{r3, r4, r5, lr}
 80021be:	4604      	mov	r4, r0
 80021c0:	d010      	beq.n	80021e4 <RDMSensors::SetRecord(unsigned char)+0x2a>
 80021c2:	6803      	ldr	r3, [r0, #0]
 80021c4:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
 80021c8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80021cc:	f000 bbe9 	b.w	80029a2 <RDMSensor::Record()>
 80021d0:	6823      	ldr	r3, [r4, #0]
 80021d2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80021d6:	f000 fbe4 	bl	80029a2 <RDMSensor::Record()>
 80021da:	3501      	adds	r5, #1
 80021dc:	7923      	ldrb	r3, [r4, #4]
 80021de:	42ab      	cmp	r3, r5
 80021e0:	d8f6      	bhi.n	80021d0 <RDMSensors::SetRecord(unsigned char)+0x16>
 80021e2:	bd38      	pop	{r3, r4, r5, pc}
 80021e4:	2500      	movs	r5, #0
 80021e6:	e7f9      	b.n	80021dc <RDMSensors::SetRecord(unsigned char)+0x22>

080021e8 <RDMSensors::Add(RDMSensor*)>:
 80021e8:	6803      	ldr	r3, [r0, #0]
 80021ea:	b510      	push	{r4, lr}
 80021ec:	b143      	cbz	r3, 8002200 <RDMSensors::Add(RDMSensor*)+0x18>
 80021ee:	7902      	ldrb	r2, [r0, #4]
 80021f0:	2a10      	cmp	r2, #16
 80021f2:	d005      	beq.n	8002200 <RDMSensors::Add(RDMSensor*)+0x18>
 80021f4:	1c54      	adds	r4, r2, #1
 80021f6:	7104      	strb	r4, [r0, #4]
 80021f8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 80021fc:	2001      	movs	r0, #1
 80021fe:	bd10      	pop	{r4, pc}
 8002200:	2000      	movs	r0, #0
 8002202:	e7fc      	b.n	80021fe <RDMSensors::Add(RDMSensor*)+0x16>

08002204 <RDMSensors::RDMSensors()>:
 8002204:	4b12      	ldr	r3, [pc, #72]	; (8002250 <RDMSensors::RDMSensors()+0x4c>)
 8002206:	b570      	push	{r4, r5, r6, lr}
 8002208:	2600      	movs	r6, #0
 800220a:	4604      	mov	r4, r0
 800220c:	6018      	str	r0, [r3, #0]
 800220e:	6006      	str	r6, [r0, #0]
 8002210:	7106      	strb	r6, [r0, #4]
 8002212:	2040      	movs	r0, #64	; 0x40
 8002214:	f006 f955 	bl	80084c2 <operator new[](unsigned int)>
 8002218:	6020      	str	r0, [r4, #0]
 800221a:	2040      	movs	r0, #64	; 0x40
 800221c:	f006 f94f 	bl	80084be <operator new(unsigned int)>
 8002220:	7921      	ldrb	r1, [r4, #4]
 8002222:	4605      	mov	r5, r0
 8002224:	f000 fb7e 	bl	8002924 <RDMSensor::RDMSensor(unsigned char)>
 8002228:	4b0a      	ldr	r3, [pc, #40]	; (8002254 <RDMSensors::RDMSensors()+0x50>)
 800222a:	602b      	str	r3, [r5, #0]
 800222c:	4b0a      	ldr	r3, [pc, #40]	; (8002258 <RDMSensors::RDMSensors()+0x54>)
 800222e:	60ab      	str	r3, [r5, #8]
 8002230:	3354      	adds	r3, #84	; 0x54
 8002232:	60eb      	str	r3, [r5, #12]
 8002234:	4628      	mov	r0, r5
 8002236:	2355      	movs	r3, #85	; 0x55
 8002238:	4908      	ldr	r1, [pc, #32]	; (800225c <RDMSensors::RDMSensors()+0x58>)
 800223a:	822b      	strh	r3, [r5, #16]
 800223c:	71ee      	strb	r6, [r5, #7]
 800223e:	f000 fb83 	bl	8002948 <RDMSensor::SetDescription(char const*)>
 8002242:	4629      	mov	r1, r5
 8002244:	4620      	mov	r0, r4
 8002246:	f7ff ffcf 	bl	80021e8 <RDMSensors::Add(RDMSensor*)>
 800224a:	4620      	mov	r0, r4
 800224c:	bd70      	pop	{r4, r5, r6, pc}
 800224e:	bf00      	nop
 8002250:	20001194 	mulcs	r0, r4, r1
 8002254:	0800a30c 	stmdaeq	r0, {r2, r3, r8, r9, sp, pc}
 8002258:	ffd80001 			; <UNDEFINED> instruction: 0xffd80001
 800225c:	0800a2fd 	stmdaeq	r0, {r0, r2, r3, r4, r5, r6, r7, r9, sp, pc}

08002260 <RDMSensorBH170::Initialize()>:
 8002260:	f890 0048 	ldrb.w	r0, [r0, #72]	; 0x48
 8002264:	4770      	bx	lr

08002266 <RDMSensorMCP9808::Initialize()>:
 8002266:	f890 0048 	ldrb.w	r0, [r0, #72]	; 0x48
 800226a:	4770      	bx	lr

0800226c <RDMSensorHTU21DHumidity::Initialize()>:
 800226c:	f890 0048 	ldrb.w	r0, [r0, #72]	; 0x48
 8002270:	4770      	bx	lr

08002272 <RDMSensorHTU21DTemperature::Initialize()>:
 8002272:	f890 0048 	ldrb.w	r0, [r0, #72]	; 0x48
 8002276:	4770      	bx	lr

08002278 <RDMSensorINA219Current::Initialize()>:
 8002278:	f890 0048 	ldrb.w	r0, [r0, #72]	; 0x48
 800227c:	4770      	bx	lr

0800227e <RDMSensorINA219Power::Initialize()>:
 800227e:	f890 0048 	ldrb.w	r0, [r0, #72]	; 0x48
 8002282:	4770      	bx	lr

08002284 <RDMSensorINA219Voltage::Initialize()>:
 8002284:	f890 0048 	ldrb.w	r0, [r0, #72]	; 0x48
 8002288:	4770      	bx	lr

0800228a <RDMSensorSI7021Humidity::Initialize()>:
 800228a:	f890 0048 	ldrb.w	r0, [r0, #72]	; 0x48
 800228e:	4770      	bx	lr

08002290 <RDMSensorSI7021Temperature::Initialize()>:
 8002290:	f890 0048 	ldrb.w	r0, [r0, #72]	; 0x48
 8002294:	4770      	bx	lr

08002296 <RDMSensorThermistor::Initialize()>:
 8002296:	f890 0048 	ldrb.w	r0, [r0, #72]	; 0x48
 800229a:	4770      	bx	lr
 800229c:	0000      	movs	r0, r0
	...

080022a0 <RDMSensorThermistor::GetValue()>:
 80022a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80022a4:	4604      	mov	r4, r0
 80022a6:	2504      	movs	r5, #4
 80022a8:	2600      	movs	r6, #0
 80022aa:	2700      	movs	r7, #0
 80022ac:	f100 0840 	add.w	r8, r0, #64	; 0x40
 80022b0:	f894 1060 	ldrb.w	r1, [r4, #96]	; 0x60
 80022b4:	4640      	mov	r0, r8
 80022b6:	f000 fe79 	bl	8002fac <MCP3424::GetVoltage(unsigned long)>
 80022ba:	4630      	mov	r0, r6
 80022bc:	4639      	mov	r1, r7
 80022be:	ec53 2b10 	vmov	r2, r3, d0
 80022c2:	f7fd ffb5 	bl	8000230 <__adddf3>
 80022c6:	3d01      	subs	r5, #1
 80022c8:	4606      	mov	r6, r0
 80022ca:	460f      	mov	r7, r1
 80022cc:	d1f0      	bne.n	80022b0 <RDMSensorThermistor::GetValue()+0x10>
 80022ce:	4b1c      	ldr	r3, [pc, #112]	; (8002340 <RDMSensorThermistor::GetValue()+0xa0>)
 80022d0:	2200      	movs	r2, #0
 80022d2:	f7fe f963 	bl	800059c <__aeabi_dmul>
 80022d6:	4602      	mov	r2, r0
 80022d8:	460b      	mov	r3, r1
 80022da:	a117      	add	r1, pc, #92	; (adr r1, 8002338 <RDMSensorThermistor::GetValue()+0x98>)
 80022dc:	e9d1 0100 	ldrd	r0, r1, [r1]
 80022e0:	f7fe fa86 	bl	80007f0 <__aeabi_ddiv>
 80022e4:	f7fe fb6c 	bl	80009c0 <__aeabi_d2iz>
 80022e8:	6da2      	ldr	r2, [r4, #88]	; 0x58
 80022ea:	eddf 7a16 	vldr	s15, [pc, #88]	; 8002344 <RDMSensorThermistor::GetValue()+0xa4>
 80022ee:	f5a0 4383 	sub.w	r3, r0, #16768	; 0x4180
 80022f2:	3b20      	subs	r3, #32
 80022f4:	4413      	add	r3, r2
 80022f6:	ee00 3a10 	vmov	s0, r3
 80022fa:	eeb8 0a40 	vcvt.f32.u32	s0, s0
 80022fe:	ee80 0a27 	vdiv.f32	s0, s0, s15
 8002302:	f006 f945 	bl	8008590 <logf>
 8002306:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8002348 <RDMSensorThermistor::GetValue()+0xa8>
 800230a:	eec0 7a07 	vdiv.f32	s15, s0, s14
 800230e:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 800234c <RDMSensorThermistor::GetValue()+0xac>
 8002312:	ee37 7a87 	vadd.f32	s14, s15, s14
 8002316:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800231a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800231e:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8002350 <RDMSensorThermistor::GetValue()+0xb0>
 8002322:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002326:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800232a:	ee17 3a90 	vmov	r3, s15
 800232e:	b218      	sxth	r0, r3
 8002330:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002334:	f3af 8000 	nop.w
 8002338:	00000000 	andeq	r0, r0, r0
 800233c:	40e09a00 	rscmi	r9, r0, r0, lsl #20
 8002340:	3fd00000 	svccc	0x00d00000
 8002344:	461c4000 	ldrmi	r4, [ip], -r0
 8002348:	4576e000 	ldrbmi	lr, [r6, #-0]!
 800234c:	3b5bcf0f 	blcc	96f5f90 <_sidata+0x16e9e20>
 8002350:	43889333 	orrmi	r9, r8, #-872415232	; 0xcc000000

08002354 <RDMSensorSI7021Temperature::GetValue()>:
 8002354:	b508      	push	{r3, lr}
 8002356:	3040      	adds	r0, #64	; 0x40
 8002358:	f000 ff0e 	bl	8003178 <sensor::SI7021::GetTemperature()>
 800235c:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8002360:	ee10 3a10 	vmov	r3, s0
 8002364:	b218      	sxth	r0, r3
 8002366:	bd08      	pop	{r3, pc}

08002368 <RDMSensorSI7021Humidity::GetValue()>:
 8002368:	b508      	push	{r3, lr}
 800236a:	3040      	adds	r0, #64	; 0x40
 800236c:	f000 ff18 	bl	80031a0 <sensor::SI7021::GetHumidity()>
 8002370:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8002374:	ee10 3a10 	vmov	r3, s0
 8002378:	b218      	sxth	r0, r3
 800237a:	bd08      	pop	{r3, pc}

0800237c <RDMSensorINA219Voltage::GetValue()>:
 800237c:	b508      	push	{r3, lr}
 800237e:	3040      	adds	r0, #64	; 0x40
 8002380:	f000 fd2a 	bl	8002dd8 <sensor::INA219::GetBusVoltage()>
 8002384:	eddf 7a04 	vldr	s15, [pc, #16]	; 8002398 <RDMSensorINA219Voltage::GetValue()+0x1c>
 8002388:	ee20 0a27 	vmul.f32	s0, s0, s15
 800238c:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8002390:	ee10 3a10 	vmov	r3, s0
 8002394:	b218      	sxth	r0, r3
 8002396:	bd08      	pop	{r3, pc}
 8002398:	447a0000 	ldrbtmi	r0, [sl], #-0

0800239c <RDMSensorINA219Power::GetValue()>:
 800239c:	b508      	push	{r3, lr}
 800239e:	3040      	adds	r0, #64	; 0x40
 80023a0:	f000 fd28 	bl	8002df4 <sensor::INA219::GetBusPower()>
 80023a4:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 80023a8:	ee10 3a10 	vmov	r3, s0
 80023ac:	b218      	sxth	r0, r3
 80023ae:	bd08      	pop	{r3, pc}

080023b0 <RDMSensorINA219Current::GetValue()>:
 80023b0:	b508      	push	{r3, lr}
 80023b2:	3040      	adds	r0, #64	; 0x40
 80023b4:	f000 fcf4 	bl	8002da0 <sensor::INA219::GetShuntCurrent()>
 80023b8:	eddf 7a04 	vldr	s15, [pc, #16]	; 80023cc <RDMSensorINA219Current::GetValue()+0x1c>
 80023bc:	ee20 0a27 	vmul.f32	s0, s0, s15
 80023c0:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 80023c4:	ee10 3a10 	vmov	r3, s0
 80023c8:	b218      	sxth	r0, r3
 80023ca:	bd08      	pop	{r3, pc}
 80023cc:	447a0000 	ldrbtmi	r0, [sl], #-0

080023d0 <RDMSensorHTU21DTemperature::GetValue()>:
 80023d0:	b508      	push	{r3, lr}
 80023d2:	3040      	adds	r0, #64	; 0x40
 80023d4:	f000 fbc4 	bl	8002b60 <sensor::HTU21D::GetTemperature()>
 80023d8:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 80023dc:	ee10 3a10 	vmov	r3, s0
 80023e0:	b218      	sxth	r0, r3
 80023e2:	bd08      	pop	{r3, pc}

080023e4 <RDMSensorHTU21DHumidity::GetValue()>:
 80023e4:	b508      	push	{r3, lr}
 80023e6:	3040      	adds	r0, #64	; 0x40
 80023e8:	f000 fbce 	bl	8002b88 <sensor::HTU21D::GetHumidity()>
 80023ec:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 80023f0:	ee10 3a10 	vmov	r3, s0
 80023f4:	b218      	sxth	r0, r3
 80023f6:	bd08      	pop	{r3, pc}

080023f8 <RDMSensorMCP9808::GetValue()>:
 80023f8:	b508      	push	{r3, lr}
 80023fa:	3040      	adds	r0, #64	; 0x40
 80023fc:	f000 fe46 	bl	800308c <sensor::MCP9808::Get()>
 8002400:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8002404:	ee10 3a10 	vmov	r3, s0
 8002408:	b218      	sxth	r0, r3
 800240a:	bd08      	pop	{r3, pc}

0800240c <RDMSensorBH170::GetValue()>:
 800240c:	b508      	push	{r3, lr}
 800240e:	3040      	adds	r0, #64	; 0x40
 8002410:	f000 fb20 	bl	8002a54 <sensor::BH170::Get()>
 8002414:	f3c0 000e 	ubfx	r0, r0, #0, #15
 8002418:	bd08      	pop	{r3, pc}

0800241a <RDMSensorThermistor::~RDMSensorThermistor()>:
 800241a:	4770      	bx	lr

0800241c <RDMSensorThermistor::~RDMSensorThermistor()>:
 800241c:	b510      	push	{r4, lr}
 800241e:	4604      	mov	r4, r0
 8002420:	f006 f849 	bl	80084b6 <operator delete(void*)>
 8002424:	4620      	mov	r0, r4
 8002426:	bd10      	pop	{r4, pc}

08002428 <RDMSensorSI7021Temperature::~RDMSensorSI7021Temperature()>:
 8002428:	4770      	bx	lr

0800242a <RDMSensorSI7021Temperature::~RDMSensorSI7021Temperature()>:
 800242a:	b510      	push	{r4, lr}
 800242c:	4604      	mov	r4, r0
 800242e:	f006 f842 	bl	80084b6 <operator delete(void*)>
 8002432:	4620      	mov	r0, r4
 8002434:	bd10      	pop	{r4, pc}

08002436 <RDMSensorSI7021Humidity::~RDMSensorSI7021Humidity()>:
 8002436:	4770      	bx	lr

08002438 <RDMSensorSI7021Humidity::~RDMSensorSI7021Humidity()>:
 8002438:	b510      	push	{r4, lr}
 800243a:	4604      	mov	r4, r0
 800243c:	f006 f83b 	bl	80084b6 <operator delete(void*)>
 8002440:	4620      	mov	r0, r4
 8002442:	bd10      	pop	{r4, pc}

08002444 <RDMSensorINA219Voltage::~RDMSensorINA219Voltage()>:
 8002444:	4770      	bx	lr

08002446 <RDMSensorINA219Voltage::~RDMSensorINA219Voltage()>:
 8002446:	b510      	push	{r4, lr}
 8002448:	4604      	mov	r4, r0
 800244a:	f006 f834 	bl	80084b6 <operator delete(void*)>
 800244e:	4620      	mov	r0, r4
 8002450:	bd10      	pop	{r4, pc}

08002452 <RDMSensorINA219Power::~RDMSensorINA219Power()>:
 8002452:	4770      	bx	lr

08002454 <RDMSensorINA219Power::~RDMSensorINA219Power()>:
 8002454:	b510      	push	{r4, lr}
 8002456:	4604      	mov	r4, r0
 8002458:	f006 f82d 	bl	80084b6 <operator delete(void*)>
 800245c:	4620      	mov	r0, r4
 800245e:	bd10      	pop	{r4, pc}

08002460 <RDMSensorINA219Current::~RDMSensorINA219Current()>:
 8002460:	4770      	bx	lr

08002462 <RDMSensorINA219Current::~RDMSensorINA219Current()>:
 8002462:	b510      	push	{r4, lr}
 8002464:	4604      	mov	r4, r0
 8002466:	f006 f826 	bl	80084b6 <operator delete(void*)>
 800246a:	4620      	mov	r0, r4
 800246c:	bd10      	pop	{r4, pc}

0800246e <RDMSensorHTU21DTemperature::~RDMSensorHTU21DTemperature()>:
 800246e:	4770      	bx	lr

08002470 <RDMSensorHTU21DTemperature::~RDMSensorHTU21DTemperature()>:
 8002470:	b510      	push	{r4, lr}
 8002472:	4604      	mov	r4, r0
 8002474:	f006 f81f 	bl	80084b6 <operator delete(void*)>
 8002478:	4620      	mov	r0, r4
 800247a:	bd10      	pop	{r4, pc}

0800247c <RDMSensorHTU21DHumidity::~RDMSensorHTU21DHumidity()>:
 800247c:	4770      	bx	lr

0800247e <RDMSensorHTU21DHumidity::~RDMSensorHTU21DHumidity()>:
 800247e:	b510      	push	{r4, lr}
 8002480:	4604      	mov	r4, r0
 8002482:	f006 f818 	bl	80084b6 <operator delete(void*)>
 8002486:	4620      	mov	r0, r4
 8002488:	bd10      	pop	{r4, pc}

0800248a <RDMSensorMCP9808::~RDMSensorMCP9808()>:
 800248a:	4770      	bx	lr

0800248c <RDMSensorMCP9808::~RDMSensorMCP9808()>:
 800248c:	b510      	push	{r4, lr}
 800248e:	4604      	mov	r4, r0
 8002490:	f006 f811 	bl	80084b6 <operator delete(void*)>
 8002494:	4620      	mov	r0, r4
 8002496:	bd10      	pop	{r4, pc}

08002498 <RDMSensorBH170::~RDMSensorBH170()>:
 8002498:	4770      	bx	lr

0800249a <RDMSensorBH170::~RDMSensorBH170()>:
 800249a:	b510      	push	{r4, lr}
 800249c:	4604      	mov	r4, r0
 800249e:	f006 f80a 	bl	80084b6 <operator delete(void*)>
 80024a2:	4620      	mov	r0, r4
 80024a4:	bd10      	pop	{r4, pc}
	...

080024a8 <RDMSensorThermistor::RDMSensorThermistor(unsigned char, unsigned char, unsigned char, long, RDMSensorStore*)>:
 80024a8:	b570      	push	{r4, r5, r6, lr}
 80024aa:	4604      	mov	r4, r0
 80024ac:	4616      	mov	r6, r2
 80024ae:	461d      	mov	r5, r3
 80024b0:	f000 fa38 	bl	8002924 <RDMSensor::RDMSensor(unsigned char)>
 80024b4:	4631      	mov	r1, r6
 80024b6:	f104 0040 	add.w	r0, r4, #64	; 0x40
 80024ba:	f000 fce1 	bl	8002e80 <MCP3424::MCP3424(unsigned char)>
 80024be:	4b0b      	ldr	r3, [pc, #44]	; (80024ec <RDMSensorThermistor::RDMSensorThermistor(unsigned char, unsigned char, unsigned char, long, RDMSensorStore*)+0x44>)
 80024c0:	6023      	str	r3, [r4, #0]
 80024c2:	9b04      	ldr	r3, [sp, #16]
 80024c4:	65a3      	str	r3, [r4, #88]	; 0x58
 80024c6:	9b05      	ldr	r3, [sp, #20]
 80024c8:	65e3      	str	r3, [r4, #92]	; 0x5c
 80024ca:	2300      	movs	r3, #0
 80024cc:	71e3      	strb	r3, [r4, #7]
 80024ce:	4b08      	ldr	r3, [pc, #32]	; (80024f0 <RDMSensorThermistor::RDMSensorThermistor(unsigned char, unsigned char, unsigned char, long, RDMSensorStore*)+0x48>)
 80024d0:	60a3      	str	r3, [r4, #8]
 80024d2:	337c      	adds	r3, #124	; 0x7c
 80024d4:	60e3      	str	r3, [r4, #12]
 80024d6:	237d      	movs	r3, #125	; 0x7d
 80024d8:	4620      	mov	r0, r4
 80024da:	4906      	ldr	r1, [pc, #24]	; (80024f4 <RDMSensorThermistor::RDMSensorThermistor(unsigned char, unsigned char, unsigned char, long, RDMSensorStore*)+0x4c>)
 80024dc:	f884 5060 	strb.w	r5, [r4, #96]	; 0x60
 80024e0:	8223      	strh	r3, [r4, #16]
 80024e2:	f000 fa31 	bl	8002948 <RDMSensor::SetDescription(char const*)>
 80024e6:	4620      	mov	r0, r4
 80024e8:	bd70      	pop	{r4, r5, r6, pc}
 80024ea:	bf00      	nop
 80024ec:	0800a3fc 	stmdaeq	r0, {r2, r3, r4, r5, r6, r7, r8, r9, sp, pc}
 80024f0:	ffc90001 			; <UNDEFINED> instruction: 0xffc90001
 80024f4:	0800a40c 	stmdaeq	r0, {r2, r3, sl, sp, pc}

080024f8 <RDMSensorsParams::RDMSensorsParams(RDMSensorsParamsStore*)>:
 80024f8:	b510      	push	{r4, lr}
 80024fa:	223c      	movs	r2, #60	; 0x3c
 80024fc:	4604      	mov	r4, r0
 80024fe:	f840 1b04 	str.w	r1, [r0], #4
 8002502:	2100      	movs	r1, #0
 8002504:	f006 f8ad 	bl	8008662 <memset>
 8002508:	4620      	mov	r0, r4
 800250a:	bd10      	pop	{r4, pc}

0800250c <RDMSensorsParams::Load()>:
 800250c:	b570      	push	{r4, r5, r6, lr}
 800250e:	2600      	movs	r6, #0
 8002510:	4604      	mov	r4, r0
 8002512:	6046      	str	r6, [r0, #4]
 8002514:	6800      	ldr	r0, [r0, #0]
 8002516:	b140      	cbz	r0, 800252a <RDMSensorsParams::Load()+0x1e>
 8002518:	6803      	ldr	r3, [r0, #0]
 800251a:	1d25      	adds	r5, r4, #4
 800251c:	68db      	ldr	r3, [r3, #12]
 800251e:	4629      	mov	r1, r5
 8002520:	4798      	blx	r3
 8002522:	6863      	ldr	r3, [r4, #4]
 8002524:	2b07      	cmp	r3, #7
 8002526:	d801      	bhi.n	800252c <RDMSensorsParams::Load()+0x20>
 8002528:	2001      	movs	r0, #1
 800252a:	bd70      	pop	{r4, r5, r6, pc}
 800252c:	223c      	movs	r2, #60	; 0x3c
 800252e:	4631      	mov	r1, r6
 8002530:	4628      	mov	r0, r5
 8002532:	f006 f896 	bl	8008662 <memset>
 8002536:	e7f7      	b.n	8002528 <RDMSensorsParams::Load()+0x1c>

08002538 <RDMSensorsParams::Dump()>:
 8002538:	4770      	bx	lr
	...

0800253c <RDMSensorsParams::Add(RDMSensor*)>:
 800253c:	b538      	push	{r3, r4, r5, lr}
 800253e:	680b      	ldr	r3, [r1, #0]
 8002540:	4608      	mov	r0, r1
 8002542:	689b      	ldr	r3, [r3, #8]
 8002544:	460c      	mov	r4, r1
 8002546:	4798      	blx	r3
 8002548:	4605      	mov	r5, r0
 800254a:	b130      	cbz	r0, 800255a <RDMSensorsParams::Add(RDMSensor*)+0x1e>
 800254c:	4b05      	ldr	r3, [pc, #20]	; (8002564 <RDMSensorsParams::Add(RDMSensor*)+0x28>)
 800254e:	4621      	mov	r1, r4
 8002550:	6818      	ldr	r0, [r3, #0]
 8002552:	f7ff fe49 	bl	80021e8 <RDMSensors::Add(RDMSensor*)>
 8002556:	4628      	mov	r0, r5
 8002558:	bd38      	pop	{r3, r4, r5, pc}
 800255a:	6823      	ldr	r3, [r4, #0]
 800255c:	4620      	mov	r0, r4
 800255e:	685b      	ldr	r3, [r3, #4]
 8002560:	4798      	blx	r3
 8002562:	e7f8      	b.n	8002556 <RDMSensorsParams::Add(RDMSensor*)+0x1a>
 8002564:	20001194 	mulcs	r0, r4, r1

08002568 <RDMSensorsParams::Set(RDMSensorStore*)>:
 8002568:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800256c:	4605      	mov	r5, r0
 800256e:	b085      	sub	sp, #20
 8002570:	460f      	mov	r7, r1
 8002572:	4680      	mov	r8, r0
 8002574:	f04f 0900 	mov.w	r9, #0
 8002578:	686b      	ldr	r3, [r5, #4]
 800257a:	454b      	cmp	r3, r9
 800257c:	d802      	bhi.n	8002584 <RDMSensorsParams::Set(RDMSensorStore*)+0x1c>
 800257e:	b005      	add	sp, #20
 8002580:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002584:	4bcd      	ldr	r3, [pc, #820]	; (80028bc <RDMSensorsParams::Set(RDMSensorStore*)+0x354>)
 8002586:	f898 6009 	ldrb.w	r6, [r8, #9]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	791c      	ldrb	r4, [r3, #4]
 800258e:	f898 3008 	ldrb.w	r3, [r8, #8]
 8002592:	2b05      	cmp	r3, #5
 8002594:	d86b      	bhi.n	800266e <RDMSensorsParams::Set(RDMSensorStore*)+0x106>
 8002596:	e8df f013 	tbh	[pc, r3, lsl #1]
 800259a:	00250006 	eoreq	r0, r5, r6
 800259e:	00db006f 	sbcseq	r0, fp, pc, rrx
 80025a2:	013700f6 	ldrsheq	r0, [r7, -r6]!
 80025a6:	204c      	movs	r0, #76	; 0x4c
 80025a8:	f005 ff89 	bl	80084be <operator new(unsigned int)>
 80025ac:	4621      	mov	r1, r4
 80025ae:	4682      	mov	sl, r0
 80025b0:	f000 f9b8 	bl	8002924 <RDMSensor::RDMSensor(unsigned char)>
 80025b4:	4631      	mov	r1, r6
 80025b6:	f10a 0040 	add.w	r0, sl, #64	; 0x40
 80025ba:	f000 fa17 	bl	80029ec <sensor::BH170::BH170(unsigned char)>
 80025be:	4bc0      	ldr	r3, [pc, #768]	; (80028c0 <RDMSensorsParams::Set(RDMSensorStore*)+0x358>)
 80025c0:	f8ca 3000 	str.w	r3, [sl]
 80025c4:	2318      	movs	r3, #24
 80025c6:	f88a 3007 	strb.w	r3, [sl, #7]
 80025ca:	241a      	movs	r4, #26
 80025cc:	f647 73ff 	movw	r3, #32767	; 0x7fff
 80025d0:	e9ca 4302 	strd	r4, r3, [sl, #8]
 80025d4:	49bb      	ldr	r1, [pc, #748]	; (80028c4 <RDMSensorsParams::Set(RDMSensorStore*)+0x35c>)
 80025d6:	f8aa 3010 	strh.w	r3, [sl, #16]
 80025da:	4650      	mov	r0, sl
 80025dc:	f000 f9b4 	bl	8002948 <RDMSensor::SetDescription(char const*)>
 80025e0:	4651      	mov	r1, sl
 80025e2:	e041      	b.n	8002668 <RDMSensorsParams::Set(RDMSensorStore*)+0x100>
 80025e4:	204c      	movs	r0, #76	; 0x4c
 80025e6:	f005 ff6a 	bl	80084be <operator new(unsigned int)>
 80025ea:	4621      	mov	r1, r4
 80025ec:	4683      	mov	fp, r0
 80025ee:	f000 f999 	bl	8002924 <RDMSensor::RDMSensor(unsigned char)>
 80025f2:	4631      	mov	r1, r6
 80025f4:	f10b 0040 	add.w	r0, fp, #64	; 0x40
 80025f8:	f000 fa50 	bl	8002a9c <sensor::HTU21D::HTU21D(unsigned char)>
 80025fc:	4ab2      	ldr	r2, [pc, #712]	; (80028c8 <RDMSensorsParams::Set(RDMSensorStore*)+0x360>)
 80025fe:	f8cb 2000 	str.w	r2, [fp]
 8002602:	221f      	movs	r2, #31
 8002604:	f88b 2007 	strb.w	r2, [fp, #7]
 8002608:	f04f 0a00 	mov.w	sl, #0
 800260c:	2264      	movs	r2, #100	; 0x64
 800260e:	49af      	ldr	r1, [pc, #700]	; (80028cc <RDMSensorsParams::Set(RDMSensorStore*)+0x364>)
 8002610:	f8ab 2010 	strh.w	r2, [fp, #16]
 8002614:	4658      	mov	r0, fp
 8002616:	e9cb a202 	strd	sl, r2, [fp, #8]
 800261a:	f000 f995 	bl	8002948 <RDMSensor::SetDescription(char const*)>
 800261e:	4659      	mov	r1, fp
 8002620:	4628      	mov	r0, r5
 8002622:	f7ff ff8b 	bl	800253c <RDMSensorsParams::Add(RDMSensor*)>
 8002626:	b310      	cbz	r0, 800266e <RDMSensorsParams::Set(RDMSensorStore*)+0x106>
 8002628:	204c      	movs	r0, #76	; 0x4c
 800262a:	f005 ff48 	bl	80084be <operator new(unsigned int)>
 800262e:	1c61      	adds	r1, r4, #1
 8002630:	4683      	mov	fp, r0
 8002632:	b2c9      	uxtb	r1, r1
 8002634:	f000 f976 	bl	8002924 <RDMSensor::RDMSensor(unsigned char)>
 8002638:	4631      	mov	r1, r6
 800263a:	f10b 0040 	add.w	r0, fp, #64	; 0x40
 800263e:	f000 fa2d 	bl	8002a9c <sensor::HTU21D::HTU21D(unsigned char)>
 8002642:	4ba3      	ldr	r3, [pc, #652]	; (80028d0 <RDMSensorsParams::Set(RDMSensorStore*)+0x368>)
 8002644:	4aa3      	ldr	r2, [pc, #652]	; (80028d4 <RDMSensorsParams::Set(RDMSensorStore*)+0x36c>)
 8002646:	f8cb 2000 	str.w	r2, [fp]
 800264a:	f8cb 3008 	str.w	r3, [fp, #8]
 800264e:	227d      	movs	r2, #125	; 0x7d
 8002650:	337c      	adds	r3, #124	; 0x7c
 8002652:	49a1      	ldr	r1, [pc, #644]	; (80028d8 <RDMSensorsParams::Set(RDMSensorStore*)+0x370>)
 8002654:	f88b a007 	strb.w	sl, [fp, #7]
 8002658:	f8cb 300c 	str.w	r3, [fp, #12]
 800265c:	f8ab 2010 	strh.w	r2, [fp, #16]
 8002660:	4658      	mov	r0, fp
 8002662:	f000 f971 	bl	8002948 <RDMSensor::SetDescription(char const*)>
 8002666:	4659      	mov	r1, fp
 8002668:	4628      	mov	r0, r5
 800266a:	f7ff ff67 	bl	800253c <RDMSensorsParams::Add(RDMSensor*)>
 800266e:	f109 0901 	add.w	r9, r9, #1
 8002672:	f108 0803 	add.w	r8, r8, #3
 8002676:	e77f      	b.n	8002578 <RDMSensorsParams::Set(RDMSensorStore*)+0x10>
 8002678:	2060      	movs	r0, #96	; 0x60
 800267a:	f005 ff20 	bl	80084be <operator new(unsigned int)>
 800267e:	4621      	mov	r1, r4
 8002680:	4683      	mov	fp, r0
 8002682:	f000 f94f 	bl	8002924 <RDMSensor::RDMSensor(unsigned char)>
 8002686:	4631      	mov	r1, r6
 8002688:	f10b 0040 	add.w	r0, fp, #64	; 0x40
 800268c:	f000 fb46 	bl	8002d1c <sensor::INA219::INA219(unsigned char)>
 8002690:	4a92      	ldr	r2, [pc, #584]	; (80028dc <RDMSensorsParams::Set(RDMSensorStore*)+0x374>)
 8002692:	f8cb 2000 	str.w	r2, [fp]
 8002696:	4a92      	ldr	r2, [pc, #584]	; (80028e0 <RDMSensorsParams::Set(RDMSensorStore*)+0x378>)
 8002698:	f8cb 2008 	str.w	r2, [fp, #8]
 800269c:	f202 42cb 	addw	r2, r2, #1227	; 0x4cb
 80026a0:	f8cb 200c 	str.w	r2, [fp, #12]
 80026a4:	f04f 0a02 	mov.w	sl, #2
 80026a8:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80026ac:	498d      	ldr	r1, [pc, #564]	; (80028e4 <RDMSensorsParams::Set(RDMSensorStore*)+0x37c>)
 80026ae:	f88b a007 	strb.w	sl, [fp, #7]
 80026b2:	4658      	mov	r0, fp
 80026b4:	f8ab 2010 	strh.w	r2, [fp, #16]
 80026b8:	f000 f946 	bl	8002948 <RDMSensor::SetDescription(char const*)>
 80026bc:	4659      	mov	r1, fp
 80026be:	4628      	mov	r0, r5
 80026c0:	f7ff ff3c 	bl	800253c <RDMSensorsParams::Add(RDMSensor*)>
 80026c4:	2800      	cmp	r0, #0
 80026c6:	d0d2      	beq.n	800266e <RDMSensorsParams::Set(RDMSensorStore*)+0x106>
 80026c8:	2060      	movs	r0, #96	; 0x60
 80026ca:	f005 fef8 	bl	80084be <operator new(unsigned int)>
 80026ce:	1c61      	adds	r1, r4, #1
 80026d0:	4683      	mov	fp, r0
 80026d2:	b2c9      	uxtb	r1, r1
 80026d4:	f000 f926 	bl	8002924 <RDMSensor::RDMSensor(unsigned char)>
 80026d8:	4631      	mov	r1, r6
 80026da:	f10b 0040 	add.w	r0, fp, #64	; 0x40
 80026de:	f000 fb1d 	bl	8002d1c <sensor::INA219::INA219(unsigned char)>
 80026e2:	4a81      	ldr	r2, [pc, #516]	; (80028e8 <RDMSensorsParams::Set(RDMSensorStore*)+0x380>)
 80026e4:	f8cb 2000 	str.w	r2, [fp]
 80026e8:	4a80      	ldr	r2, [pc, #512]	; (80028ec <RDMSensorsParams::Set(RDMSensorStore*)+0x384>)
 80026ea:	f8cb 2008 	str.w	r2, [fp, #8]
 80026ee:	f46f 7031 	mvn.w	r0, #708	; 0x2c4
 80026f2:	4402      	add	r2, r0
 80026f4:	f8cb 200c 	str.w	r2, [fp, #12]
 80026f8:	2240      	movs	r2, #64	; 0x40
 80026fa:	497d      	ldr	r1, [pc, #500]	; (80028f0 <RDMSensorsParams::Set(RDMSensorStore*)+0x388>)
 80026fc:	f88b a007 	strb.w	sl, [fp, #7]
 8002700:	4658      	mov	r0, fp
 8002702:	f8ab 2010 	strh.w	r2, [fp, #16]
 8002706:	f000 f91f 	bl	8002948 <RDMSensor::SetDescription(char const*)>
 800270a:	4659      	mov	r1, fp
 800270c:	4628      	mov	r0, r5
 800270e:	f7ff ff15 	bl	800253c <RDMSensorsParams::Add(RDMSensor*)>
 8002712:	2800      	cmp	r0, #0
 8002714:	d0ab      	beq.n	800266e <RDMSensorsParams::Set(RDMSensorStore*)+0x106>
 8002716:	2060      	movs	r0, #96	; 0x60
 8002718:	f005 fed1 	bl	80084be <operator new(unsigned int)>
 800271c:	eb04 010a 	add.w	r1, r4, sl
 8002720:	4683      	mov	fp, r0
 8002722:	b2c9      	uxtb	r1, r1
 8002724:	f000 f8fe 	bl	8002924 <RDMSensor::RDMSensor(unsigned char)>
 8002728:	4631      	mov	r1, r6
 800272a:	f10b 0040 	add.w	r0, fp, #64	; 0x40
 800272e:	f000 faf5 	bl	8002d1c <sensor::INA219::INA219(unsigned char)>
 8002732:	4a70      	ldr	r2, [pc, #448]	; (80028f4 <RDMSensorsParams::Set(RDMSensorStore*)+0x38c>)
 8002734:	4970      	ldr	r1, [pc, #448]	; (80028f8 <RDMSensorsParams::Set(RDMSensorStore*)+0x390>)
 8002736:	f8cb 2000 	str.w	r2, [fp]
 800273a:	4a70      	ldr	r2, [pc, #448]	; (80028fc <RDMSensorsParams::Set(RDMSensorStore*)+0x394>)
 800273c:	f88b a007 	strb.w	sl, [fp, #7]
 8002740:	e9cb 1202 	strd	r1, r2, [fp, #8]
 8002744:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
 8002748:	496d      	ldr	r1, [pc, #436]	; (8002900 <RDMSensorsParams::Set(RDMSensorStore*)+0x398>)
 800274a:	f8ab 2010 	strh.w	r2, [fp, #16]
 800274e:	e787      	b.n	8002660 <RDMSensorsParams::Set(RDMSensorStore*)+0xf8>
 8002750:	204c      	movs	r0, #76	; 0x4c
 8002752:	f005 feb4 	bl	80084be <operator new(unsigned int)>
 8002756:	4621      	mov	r1, r4
 8002758:	4682      	mov	sl, r0
 800275a:	f000 f8e3 	bl	8002924 <RDMSensor::RDMSensor(unsigned char)>
 800275e:	4631      	mov	r1, r6
 8002760:	f10a 0040 	add.w	r0, sl, #64	; 0x40
 8002764:	f000 fc54 	bl	8003010 <sensor::MCP9808::MCP9808(unsigned char)>
 8002768:	4b66      	ldr	r3, [pc, #408]	; (8002904 <RDMSensorsParams::Set(RDMSensorStore*)+0x39c>)
 800276a:	f8ca 3000 	str.w	r3, [sl]
 800276e:	2300      	movs	r3, #0
 8002770:	4a65      	ldr	r2, [pc, #404]	; (8002908 <RDMSensorsParams::Set(RDMSensorStore*)+0x3a0>)
 8002772:	f88a 3007 	strb.w	r3, [sl, #7]
 8002776:	4b65      	ldr	r3, [pc, #404]	; (800290c <RDMSensorsParams::Set(RDMSensorStore*)+0x3a4>)
 8002778:	4965      	ldr	r1, [pc, #404]	; (8002910 <RDMSensorsParams::Set(RDMSensorStore*)+0x3a8>)
 800277a:	e9ca 2302 	strd	r2, r3, [sl, #8]
 800277e:	2328      	movs	r3, #40	; 0x28
 8002780:	f8aa 3010 	strh.w	r3, [sl, #16]
 8002784:	e729      	b.n	80025da <RDMSensorsParams::Set(RDMSensorStore*)+0x72>
 8002786:	204c      	movs	r0, #76	; 0x4c
 8002788:	f005 fe99 	bl	80084be <operator new(unsigned int)>
 800278c:	4621      	mov	r1, r4
 800278e:	4683      	mov	fp, r0
 8002790:	f000 f8c8 	bl	8002924 <RDMSensor::RDMSensor(unsigned char)>
 8002794:	4631      	mov	r1, r6
 8002796:	f10b 0040 	add.w	r0, fp, #64	; 0x40
 800279a:	f000 fc8b 	bl	80030b4 <sensor::SI7021::SI7021(unsigned char)>
 800279e:	4a5d      	ldr	r2, [pc, #372]	; (8002914 <RDMSensorsParams::Set(RDMSensorStore*)+0x3ac>)
 80027a0:	f8cb 2000 	str.w	r2, [fp]
 80027a4:	221f      	movs	r2, #31
 80027a6:	f88b 2007 	strb.w	r2, [fp, #7]
 80027aa:	f04f 0a00 	mov.w	sl, #0
 80027ae:	2264      	movs	r2, #100	; 0x64
 80027b0:	4959      	ldr	r1, [pc, #356]	; (8002918 <RDMSensorsParams::Set(RDMSensorStore*)+0x3b0>)
 80027b2:	f8ab 2010 	strh.w	r2, [fp, #16]
 80027b6:	4658      	mov	r0, fp
 80027b8:	e9cb a202 	strd	sl, r2, [fp, #8]
 80027bc:	f000 f8c4 	bl	8002948 <RDMSensor::SetDescription(char const*)>
 80027c0:	4659      	mov	r1, fp
 80027c2:	4628      	mov	r0, r5
 80027c4:	f7ff feba 	bl	800253c <RDMSensorsParams::Add(RDMSensor*)>
 80027c8:	2800      	cmp	r0, #0
 80027ca:	f43f af50 	beq.w	800266e <RDMSensorsParams::Set(RDMSensorStore*)+0x106>
 80027ce:	204c      	movs	r0, #76	; 0x4c
 80027d0:	f005 fe75 	bl	80084be <operator new(unsigned int)>
 80027d4:	1c61      	adds	r1, r4, #1
 80027d6:	4683      	mov	fp, r0
 80027d8:	b2c9      	uxtb	r1, r1
 80027da:	f000 f8a3 	bl	8002924 <RDMSensor::RDMSensor(unsigned char)>
 80027de:	4631      	mov	r1, r6
 80027e0:	f10b 0040 	add.w	r0, fp, #64	; 0x40
 80027e4:	f000 fc66 	bl	80030b4 <sensor::SI7021::SI7021(unsigned char)>
 80027e8:	4b39      	ldr	r3, [pc, #228]	; (80028d0 <RDMSensorsParams::Set(RDMSensorStore*)+0x368>)
 80027ea:	4a4c      	ldr	r2, [pc, #304]	; (800291c <RDMSensorsParams::Set(RDMSensorStore*)+0x3b4>)
 80027ec:	f8cb 2000 	str.w	r2, [fp]
 80027f0:	f8cb 3008 	str.w	r3, [fp, #8]
 80027f4:	227d      	movs	r2, #125	; 0x7d
 80027f6:	337c      	adds	r3, #124	; 0x7c
 80027f8:	4949      	ldr	r1, [pc, #292]	; (8002920 <RDMSensorsParams::Set(RDMSensorStore*)+0x3b8>)
 80027fa:	f88b a007 	strb.w	sl, [fp, #7]
 80027fe:	f8cb 300c 	str.w	r3, [fp, #12]
 8002802:	f8ab 2010 	strh.w	r2, [fp, #16]
 8002806:	e72b      	b.n	8002660 <RDMSensorsParams::Set(RDMSensorStore*)+0xf8>
 8002808:	2068      	movs	r0, #104	; 0x68
 800280a:	f005 fe58 	bl	80084be <operator new(unsigned int)>
 800280e:	eb05 0344 	add.w	r3, r5, r4, lsl #1
 8002812:	9701      	str	r7, [sp, #4]
 8002814:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8002818:	9300      	str	r3, [sp, #0]
 800281a:	4682      	mov	sl, r0
 800281c:	4621      	mov	r1, r4
 800281e:	2300      	movs	r3, #0
 8002820:	4632      	mov	r2, r6
 8002822:	f7ff fe41 	bl	80024a8 <RDMSensorThermistor::RDMSensorThermistor(unsigned char, unsigned char, unsigned char, long, RDMSensorStore*)>
 8002826:	4651      	mov	r1, sl
 8002828:	4628      	mov	r0, r5
 800282a:	f7ff fe87 	bl	800253c <RDMSensorsParams::Add(RDMSensor*)>
 800282e:	2800      	cmp	r0, #0
 8002830:	f43f af1d 	beq.w	800266e <RDMSensorsParams::Set(RDMSensorStore*)+0x106>
 8002834:	1c61      	adds	r1, r4, #1
 8002836:	b2c9      	uxtb	r1, r1
 8002838:	2068      	movs	r0, #104	; 0x68
 800283a:	9103      	str	r1, [sp, #12]
 800283c:	f005 fe3f 	bl	80084be <operator new(unsigned int)>
 8002840:	9903      	ldr	r1, [sp, #12]
 8002842:	9701      	str	r7, [sp, #4]
 8002844:	eb05 0341 	add.w	r3, r5, r1, lsl #1
 8002848:	4682      	mov	sl, r0
 800284a:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 800284e:	9300      	str	r3, [sp, #0]
 8002850:	4632      	mov	r2, r6
 8002852:	2301      	movs	r3, #1
 8002854:	f7ff fe28 	bl	80024a8 <RDMSensorThermistor::RDMSensorThermistor(unsigned char, unsigned char, unsigned char, long, RDMSensorStore*)>
 8002858:	4651      	mov	r1, sl
 800285a:	4628      	mov	r0, r5
 800285c:	f7ff fe6e 	bl	800253c <RDMSensorsParams::Add(RDMSensor*)>
 8002860:	2800      	cmp	r0, #0
 8002862:	f43f af04 	beq.w	800266e <RDMSensorsParams::Set(RDMSensorStore*)+0x106>
 8002866:	1ca1      	adds	r1, r4, #2
 8002868:	b2c9      	uxtb	r1, r1
 800286a:	2068      	movs	r0, #104	; 0x68
 800286c:	9103      	str	r1, [sp, #12]
 800286e:	f005 fe26 	bl	80084be <operator new(unsigned int)>
 8002872:	9903      	ldr	r1, [sp, #12]
 8002874:	9701      	str	r7, [sp, #4]
 8002876:	eb05 0341 	add.w	r3, r5, r1, lsl #1
 800287a:	4682      	mov	sl, r0
 800287c:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8002880:	9300      	str	r3, [sp, #0]
 8002882:	4632      	mov	r2, r6
 8002884:	2302      	movs	r3, #2
 8002886:	f7ff fe0f 	bl	80024a8 <RDMSensorThermistor::RDMSensorThermistor(unsigned char, unsigned char, unsigned char, long, RDMSensorStore*)>
 800288a:	4651      	mov	r1, sl
 800288c:	4628      	mov	r0, r5
 800288e:	f7ff fe55 	bl	800253c <RDMSensorsParams::Add(RDMSensor*)>
 8002892:	2800      	cmp	r0, #0
 8002894:	f43f aeeb 	beq.w	800266e <RDMSensorsParams::Set(RDMSensorStore*)+0x106>
 8002898:	3403      	adds	r4, #3
 800289a:	b2e4      	uxtb	r4, r4
 800289c:	2068      	movs	r0, #104	; 0x68
 800289e:	f005 fe0e 	bl	80084be <operator new(unsigned int)>
 80028a2:	eb05 0344 	add.w	r3, r5, r4, lsl #1
 80028a6:	9701      	str	r7, [sp, #4]
 80028a8:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 80028ac:	9300      	str	r3, [sp, #0]
 80028ae:	4632      	mov	r2, r6
 80028b0:	2303      	movs	r3, #3
 80028b2:	4621      	mov	r1, r4
 80028b4:	4682      	mov	sl, r0
 80028b6:	f7ff fdf7 	bl	80024a8 <RDMSensorThermistor::RDMSensorThermistor(unsigned char, unsigned char, unsigned char, long, RDMSensorStore*)>
 80028ba:	e691      	b.n	80025e0 <RDMSensorsParams::Set(RDMSensorStore*)+0x78>
 80028bc:	20001194 	mulcs	r0, r4, r1
 80028c0:	0800a324 	stmdaeq	r0, {r2, r5, r8, r9, sp, pc}
 80028c4:	0800a420 	stmdaeq	r0, {r5, sl, sp, pc}
 80028c8:	0800a354 	stmdaeq	r0, {r2, r4, r6, r8, r9, sp, pc}
 80028cc:	0800a442 	stmdaeq	r0, {r1, r6, sl, sp, pc}
 80028d0:	ffd80001 			; <UNDEFINED> instruction: 0xffd80001
 80028d4:	0800a36c 	stmdaeq	r0, {r2, r3, r5, r6, r8, r9, sp, pc}
 80028d8:	0800a42e 	stmdaeq	r0, {r1, r2, r3, r5, sl, sp, pc}
 80028dc:	0800a384 	stmdaeq	r0, {r2, r7, r8, r9, sp, pc}
 80028e0:	f8300305 			; <UNDEFINED> instruction: 0xf8300305
 80028e4:	0800a45a 	stmdaeq	r0, {r1, r3, r4, r6, sl, sp, pc}
 80028e8:	0800a39c 	stmdaeq	r0, {r2, r3, r4, r7, r8, r9, sp, pc}
 80028ec:	ffc00305 			; <UNDEFINED> instruction: 0xffc00305
 80028f0:	0800a454 	stmdaeq	r0, {r2, r4, r6, sl, sp, pc}
 80028f4:	0800a3b4 	stmdaeq	r0, {r2, r4, r5, r7, r8, r9, sp, pc}
 80028f8:	83000305 	movwhi	r0, #773	; 0x305
 80028fc:	83007d00 	movwhi	r7, #3328	; 0xd00
 8002900:	0800a462 	stmdaeq	r0, {r1, r5, r6, sl, sp, pc}
 8002904:	0800a33c 	stmdaeq	r0, {r2, r3, r4, r5, r8, r9, sp, pc}
 8002908:	ffec0001 			; <UNDEFINED> instruction: 0xffec0001
 800290c:	00120064 	andseq	r0, r2, r4, rrx
 8002910:	0800a490 	stmdaeq	r0, {r4, r7, sl, sp, pc}
 8002914:	0800a3cc 	stmdaeq	r0, {r2, r3, r6, r7, r8, r9, sp, pc}
 8002918:	0800a47e 	stmdaeq	r0, {r1, r2, r3, r4, r5, r6, sl, sp, pc}
 800291c:	0800a3e4 	stmdaeq	r0, {r2, r5, r6, r7, r8, r9, sp, pc}
 8002920:	0800a46a 	stmdaeq	r0, {r1, r3, r5, r6, sl, sp, pc}

08002924 <RDMSensor::RDMSensor(unsigned char)>:
 8002924:	4a07      	ldr	r2, [pc, #28]	; (8002944 <RDMSensor::RDMSensor(unsigned char)+0x20>)
 8002926:	6002      	str	r2, [r0, #0]
 8002928:	2203      	movs	r2, #3
 800292a:	f880 2033 	strb.w	r2, [r0, #51]	; 0x33
 800292e:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8002932:	86c2      	strh	r2, [r0, #54]	; 0x36
 8002934:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002938:	7101      	strb	r1, [r0, #4]
 800293a:	7181      	strb	r1, [r0, #6]
 800293c:	f880 103c 	strb.w	r1, [r0, #60]	; 0x3c
 8002940:	8702      	strh	r2, [r0, #56]	; 0x38
 8002942:	4770      	bx	lr
 8002944:	0800a4ac 	stmdaeq	r0, {r2, r3, r5, r7, sl, sp, pc}

08002948 <RDMSensor::SetDescription(char const*)>:
 8002948:	b510      	push	{r4, lr}
 800294a:	2300      	movs	r3, #0
 800294c:	f100 0411 	add.w	r4, r0, #17
 8002950:	5cca      	ldrb	r2, [r1, r3]
 8002952:	b122      	cbz	r2, 800295e <RDMSensor::SetDescription(char const*)+0x16>
 8002954:	3301      	adds	r3, #1
 8002956:	2b20      	cmp	r3, #32
 8002958:	f804 2f01 	strb.w	r2, [r4, #1]!
 800295c:	d1f8      	bne.n	8002950 <RDMSensor::SetDescription(char const*)+0x8>
 800295e:	f880 3032 	strb.w	r3, [r0, #50]	; 0x32
 8002962:	bd10      	pop	{r4, pc}

08002964 <RDMSensor::GetValues()>:
 8002964:	6803      	ldr	r3, [r0, #0]
 8002966:	b510      	push	{r4, lr}
 8002968:	68db      	ldr	r3, [r3, #12]
 800296a:	4604      	mov	r4, r0
 800296c:	4798      	blx	r3
 800296e:	f9b4 3036 	ldrsh.w	r3, [r4, #54]	; 0x36
 8002972:	86a0      	strh	r0, [r4, #52]	; 0x34
 8002974:	4283      	cmp	r3, r0
 8002976:	bfa8      	it	ge
 8002978:	4603      	movge	r3, r0
 800297a:	86e3      	strh	r3, [r4, #54]	; 0x36
 800297c:	f9b4 3038 	ldrsh.w	r3, [r4, #56]	; 0x38
 8002980:	4283      	cmp	r3, r0
 8002982:	bfb8      	it	lt
 8002984:	4603      	movlt	r3, r0
 8002986:	8723      	strh	r3, [r4, #56]	; 0x38
 8002988:	f104 0034 	add.w	r0, r4, #52	; 0x34
 800298c:	bd10      	pop	{r4, pc}

0800298e <RDMSensor::SetValues()>:
 800298e:	6803      	ldr	r3, [r0, #0]
 8002990:	b510      	push	{r4, lr}
 8002992:	68db      	ldr	r3, [r3, #12]
 8002994:	4604      	mov	r4, r0
 8002996:	4798      	blx	r3
 8002998:	86a0      	strh	r0, [r4, #52]	; 0x34
 800299a:	86e0      	strh	r0, [r4, #54]	; 0x36
 800299c:	8720      	strh	r0, [r4, #56]	; 0x38
 800299e:	8760      	strh	r0, [r4, #58]	; 0x3a
 80029a0:	bd10      	pop	{r4, pc}

080029a2 <RDMSensor::Record()>:
 80029a2:	6803      	ldr	r3, [r0, #0]
 80029a4:	b510      	push	{r4, lr}
 80029a6:	68db      	ldr	r3, [r3, #12]
 80029a8:	4604      	mov	r4, r0
 80029aa:	4798      	blx	r3
 80029ac:	f9b4 3036 	ldrsh.w	r3, [r4, #54]	; 0x36
 80029b0:	86a0      	strh	r0, [r4, #52]	; 0x34
 80029b2:	4283      	cmp	r3, r0
 80029b4:	bfa8      	it	ge
 80029b6:	4603      	movge	r3, r0
 80029b8:	86e3      	strh	r3, [r4, #54]	; 0x36
 80029ba:	f9b4 3038 	ldrsh.w	r3, [r4, #56]	; 0x38
 80029be:	8760      	strh	r0, [r4, #58]	; 0x3a
 80029c0:	4283      	cmp	r3, r0
 80029c2:	bfb8      	it	lt
 80029c4:	4603      	movlt	r3, r0
 80029c6:	8723      	strh	r3, [r4, #56]	; 0x38
 80029c8:	bd10      	pop	{r4, pc}

080029ca <HAL_I2C::Write(unsigned char)>:
 80029ca:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80029cc:	4604      	mov	r4, r0
 80029ce:	7800      	ldrb	r0, [r0, #0]
 80029d0:	460d      	mov	r5, r1
 80029d2:	f006 fe75 	bl	80096c0 <gd32_i2c_set_address>
 80029d6:	6860      	ldr	r0, [r4, #4]
 80029d8:	f006 fe6a 	bl	80096b0 <gd32_i2c_set_baudrate>
 80029dc:	2101      	movs	r1, #1
 80029de:	a801      	add	r0, sp, #4
 80029e0:	f88d 5004 	strb.w	r5, [sp, #4]
 80029e4:	f006 fe72 	bl	80096cc <gd32_i2c_write>
 80029e8:	b003      	add	sp, #12
 80029ea:	bd30      	pop	{r4, r5, pc}

080029ec <sensor::BH170::BH170(unsigned char)>:
 80029ec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80029ee:	1e0c      	subs	r4, r1, #0
 80029f0:	bf08      	it	eq
 80029f2:	2423      	moveq	r4, #35	; 0x23
 80029f4:	4f16      	ldr	r7, [pc, #88]	; (8002a50 <sensor::BH170::BH170(unsigned char)+0x64>)
 80029f6:	7004      	strb	r4, [r0, #0]
 80029f8:	2600      	movs	r6, #0
 80029fa:	6047      	str	r7, [r0, #4]
 80029fc:	7206      	strb	r6, [r0, #8]
 80029fe:	4605      	mov	r5, r0
 8002a00:	4620      	mov	r0, r4
 8002a02:	f006 fe5d 	bl	80096c0 <gd32_i2c_set_address>
 8002a06:	4638      	mov	r0, r7
 8002a08:	f006 fe52 	bl	80096b0 <gd32_i2c_set_baudrate>
 8002a0c:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8002a10:	2b07      	cmp	r3, #7
 8002a12:	d902      	bls.n	8002a1a <sensor::BH170::BH170(unsigned char)+0x2e>
 8002a14:	3c50      	subs	r4, #80	; 0x50
 8002a16:	2c0f      	cmp	r4, #15
 8002a18:	d814      	bhi.n	8002a44 <sensor::BH170::BH170(unsigned char)+0x58>
 8002a1a:	2101      	movs	r1, #1
 8002a1c:	f10d 0007 	add.w	r0, sp, #7
 8002a20:	f006 feba 	bl	8009798 <gd32_i2c_read>
 8002a24:	fab0 f080 	clz	r0, r0
 8002a28:	0940      	lsrs	r0, r0, #5
 8002a2a:	7228      	strb	r0, [r5, #8]
 8002a2c:	b138      	cbz	r0, 8002a3e <sensor::BH170::BH170(unsigned char)+0x52>
 8002a2e:	2101      	movs	r1, #1
 8002a30:	4628      	mov	r0, r5
 8002a32:	f7ff ffca 	bl	80029ca <HAL_I2C::Write(unsigned char)>
 8002a36:	2110      	movs	r1, #16
 8002a38:	4628      	mov	r0, r5
 8002a3a:	f7ff ffc6 	bl	80029ca <HAL_I2C::Write(unsigned char)>
 8002a3e:	4628      	mov	r0, r5
 8002a40:	b003      	add	sp, #12
 8002a42:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002a44:	4631      	mov	r1, r6
 8002a46:	4630      	mov	r0, r6
 8002a48:	f006 fe40 	bl	80096cc <gd32_i2c_write>
 8002a4c:	e7ea      	b.n	8002a24 <sensor::BH170::BH170(unsigned char)+0x38>
 8002a4e:	bf00      	nop
 8002a50:	00061a80 	andeq	r1, r6, r0, lsl #21

08002a54 <sensor::BH170::Get()>:
 8002a54:	b513      	push	{r0, r1, r4, lr}
 8002a56:	4604      	mov	r4, r0
 8002a58:	2300      	movs	r3, #0
 8002a5a:	7800      	ldrb	r0, [r0, #0]
 8002a5c:	f8ad 3004 	strh.w	r3, [sp, #4]
 8002a60:	f006 fe2e 	bl	80096c0 <gd32_i2c_set_address>
 8002a64:	6860      	ldr	r0, [r4, #4]
 8002a66:	f006 fe23 	bl	80096b0 <gd32_i2c_set_baudrate>
 8002a6a:	2102      	movs	r1, #2
 8002a6c:	a801      	add	r0, sp, #4
 8002a6e:	f006 fe93 	bl	8009798 <gd32_i2c_read>
 8002a72:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8002a76:	eddf 6a08 	vldr	s13, [pc, #32]	; 8002a98 <sensor::BH170::Get()+0x44>
 8002a7a:	ba5b      	rev16	r3, r3
 8002a7c:	b29b      	uxth	r3, r3
 8002a7e:	ee07 3a90 	vmov	s15, r3
 8002a82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002a86:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8002a8a:	eefc 7ac7 	vcvt.u32.f32	s15, s14
 8002a8e:	ee17 3a90 	vmov	r3, s15
 8002a92:	b298      	uxth	r0, r3
 8002a94:	b002      	add	sp, #8
 8002a96:	bd10      	pop	{r4, pc}
 8002a98:	3f99999a 	svccc	0x0099999a

08002a9c <sensor::HTU21D::HTU21D(unsigned char)>:
 8002a9c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002a9e:	1e0c      	subs	r4, r1, #0
 8002aa0:	bf08      	it	eq
 8002aa2:	2440      	moveq	r4, #64	; 0x40
 8002aa4:	4f11      	ldr	r7, [pc, #68]	; (8002aec <sensor::HTU21D::HTU21D(unsigned char)+0x50>)
 8002aa6:	7004      	strb	r4, [r0, #0]
 8002aa8:	2600      	movs	r6, #0
 8002aaa:	6047      	str	r7, [r0, #4]
 8002aac:	7206      	strb	r6, [r0, #8]
 8002aae:	4605      	mov	r5, r0
 8002ab0:	4620      	mov	r0, r4
 8002ab2:	f006 fe05 	bl	80096c0 <gd32_i2c_set_address>
 8002ab6:	4638      	mov	r0, r7
 8002ab8:	f006 fdfa 	bl	80096b0 <gd32_i2c_set_baudrate>
 8002abc:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8002ac0:	2b07      	cmp	r3, #7
 8002ac2:	d902      	bls.n	8002aca <sensor::HTU21D::HTU21D(unsigned char)+0x2e>
 8002ac4:	3c50      	subs	r4, #80	; 0x50
 8002ac6:	2c0f      	cmp	r4, #15
 8002ac8:	d80b      	bhi.n	8002ae2 <sensor::HTU21D::HTU21D(unsigned char)+0x46>
 8002aca:	2101      	movs	r1, #1
 8002acc:	f10d 0007 	add.w	r0, sp, #7
 8002ad0:	f006 fe62 	bl	8009798 <gd32_i2c_read>
 8002ad4:	fab0 f380 	clz	r3, r0
 8002ad8:	095b      	lsrs	r3, r3, #5
 8002ada:	4628      	mov	r0, r5
 8002adc:	722b      	strb	r3, [r5, #8]
 8002ade:	b003      	add	sp, #12
 8002ae0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002ae2:	4631      	mov	r1, r6
 8002ae4:	4630      	mov	r0, r6
 8002ae6:	f006 fdf1 	bl	80096cc <gd32_i2c_write>
 8002aea:	e7f3      	b.n	8002ad4 <sensor::HTU21D::HTU21D(unsigned char)+0x38>
 8002aec:	00061a80 	andeq	r1, r6, r0, lsl #21

08002af0 <sensor::HTU21D::ReadRaw(unsigned char)>:
 8002af0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8002af2:	4604      	mov	r4, r0
 8002af4:	7800      	ldrb	r0, [r0, #0]
 8002af6:	460d      	mov	r5, r1
 8002af8:	f006 fde2 	bl	80096c0 <gd32_i2c_set_address>
 8002afc:	6860      	ldr	r0, [r4, #4]
 8002afe:	f006 fdd7 	bl	80096b0 <gd32_i2c_set_baudrate>
 8002b02:	2101      	movs	r1, #1
 8002b04:	a801      	add	r0, sp, #4
 8002b06:	f88d 5004 	strb.w	r5, [sp, #4]
 8002b0a:	f006 fddf 	bl	80096cc <gd32_i2c_write>
 8002b0e:	4b13      	ldr	r3, [pc, #76]	; (8002b5c <sensor::HTU21D::ReadRaw(unsigned char)+0x6c>)
 8002b10:	881b      	ldrh	r3, [r3, #0]
 8002b12:	f8ad 3004 	strh.w	r3, [sp, #4]
 8002b16:	2300      	movs	r3, #0
 8002b18:	f88d 3006 	strb.w	r3, [sp, #6]
 8002b1c:	2508      	movs	r5, #8
 8002b1e:	2100      	movs	r1, #0
 8002b20:	f242 7010 	movw	r0, #10000	; 0x2710
 8002b24:	f007 f88e 	bl	8009c44 <udelay(unsigned long, unsigned long)>
 8002b28:	7820      	ldrb	r0, [r4, #0]
 8002b2a:	f006 fdc9 	bl	80096c0 <gd32_i2c_set_address>
 8002b2e:	6860      	ldr	r0, [r4, #4]
 8002b30:	f006 fdbe 	bl	80096b0 <gd32_i2c_set_baudrate>
 8002b34:	2103      	movs	r1, #3
 8002b36:	a801      	add	r0, sp, #4
 8002b38:	f006 fe2e 	bl	8009798 <gd32_i2c_read>
 8002b3c:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8002b40:	f003 0303 	and.w	r3, r3, #3
 8002b44:	2b02      	cmp	r3, #2
 8002b46:	d001      	beq.n	8002b4c <sensor::HTU21D::ReadRaw(unsigned char)+0x5c>
 8002b48:	3d01      	subs	r5, #1
 8002b4a:	d1e8      	bne.n	8002b1e <sensor::HTU21D::ReadRaw(unsigned char)+0x2e>
 8002b4c:	f8bd 0004 	ldrh.w	r0, [sp, #4]
 8002b50:	ba40      	rev16	r0, r0
 8002b52:	f020 0003 	bic.w	r0, r0, #3
 8002b56:	b280      	uxth	r0, r0
 8002b58:	b003      	add	sp, #12
 8002b5a:	bd30      	pop	{r4, r5, pc}
 8002b5c:	0800a088 	stmdaeq	r0, {r3, r7, sp, pc}

08002b60 <sensor::HTU21D::GetTemperature()>:
 8002b60:	b508      	push	{r3, lr}
 8002b62:	21f3      	movs	r1, #243	; 0xf3
 8002b64:	f7ff ffc4 	bl	8002af0 <sensor::HTU21D::ReadRaw(unsigned char)>
 8002b68:	ee07 0a90 	vmov	s15, r0
 8002b6c:	ed9f 7a04 	vldr	s14, [pc, #16]	; 8002b80 <sensor::HTU21D::GetTemperature()+0x20>
 8002b70:	ed9f 0a04 	vldr	s0, [pc, #16]	; 8002b84 <sensor::HTU21D::GetTemperature()+0x24>
 8002b74:	eefb 7ac8 	vcvt.f32.u32	s15, s15, #16
 8002b78:	eea7 0a87 	vfma.f32	s0, s15, s14
 8002b7c:	bd08      	pop	{r3, pc}
 8002b7e:	bf00      	nop
 8002b80:	432fb852 			; <UNDEFINED> instruction: 0x432fb852
 8002b84:	c23b6666 	eorsgt	r6, fp, #106954752	; 0x6600000

08002b88 <sensor::HTU21D::GetHumidity()>:
 8002b88:	b508      	push	{r3, lr}
 8002b8a:	21f5      	movs	r1, #245	; 0xf5
 8002b8c:	f7ff ffb0 	bl	8002af0 <sensor::HTU21D::ReadRaw(unsigned char)>
 8002b90:	ee07 0a90 	vmov	s15, r0
 8002b94:	ed9f 7a04 	vldr	s14, [pc, #16]	; 8002ba8 <sensor::HTU21D::GetHumidity()+0x20>
 8002b98:	eefb 7ac8 	vcvt.f32.u32	s15, s15, #16
 8002b9c:	eeb9 0a08 	vmov.f32	s0, #152	; 0xc0c00000 -6.0
 8002ba0:	eea7 0a87 	vfma.f32	s0, s15, s14
 8002ba4:	bd08      	pop	{r3, pc}
 8002ba6:	bf00      	nop
 8002ba8:	42fa0000 	rscsmi	r0, sl, #0

08002bac <HAL_I2C::WriteRegister(unsigned char, unsigned short)>:
 8002bac:	b513      	push	{r0, r1, r4, lr}
 8002bae:	4604      	mov	r4, r0
 8002bb0:	0a13      	lsrs	r3, r2, #8
 8002bb2:	7800      	ldrb	r0, [r0, #0]
 8002bb4:	f88d 1004 	strb.w	r1, [sp, #4]
 8002bb8:	f88d 3005 	strb.w	r3, [sp, #5]
 8002bbc:	f88d 2006 	strb.w	r2, [sp, #6]
 8002bc0:	f006 fd7e 	bl	80096c0 <gd32_i2c_set_address>
 8002bc4:	6860      	ldr	r0, [r4, #4]
 8002bc6:	f006 fd73 	bl	80096b0 <gd32_i2c_set_baudrate>
 8002bca:	2103      	movs	r1, #3
 8002bcc:	a801      	add	r0, sp, #4
 8002bce:	f006 fd7d 	bl	80096cc <gd32_i2c_write>
 8002bd2:	b002      	add	sp, #8
 8002bd4:	bd10      	pop	{r4, pc}

08002bd6 <HAL_I2C::ReadRegister16DelayUs(unsigned char, unsigned long)>:
 8002bd6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8002bd8:	4604      	mov	r4, r0
 8002bda:	2600      	movs	r6, #0
 8002bdc:	7800      	ldrb	r0, [r0, #0]
 8002bde:	f8ad 6004 	strh.w	r6, [sp, #4]
 8002be2:	4615      	mov	r5, r2
 8002be4:	f88d 1004 	strb.w	r1, [sp, #4]
 8002be8:	f006 fd6a 	bl	80096c0 <gd32_i2c_set_address>
 8002bec:	6860      	ldr	r0, [r4, #4]
 8002bee:	f006 fd5f 	bl	80096b0 <gd32_i2c_set_baudrate>
 8002bf2:	2101      	movs	r1, #1
 8002bf4:	a801      	add	r0, sp, #4
 8002bf6:	f006 fd69 	bl	80096cc <gd32_i2c_write>
 8002bfa:	4631      	mov	r1, r6
 8002bfc:	4628      	mov	r0, r5
 8002bfe:	f007 f821 	bl	8009c44 <udelay(unsigned long, unsigned long)>
 8002c02:	2102      	movs	r1, #2
 8002c04:	a801      	add	r0, sp, #4
 8002c06:	f006 fdc7 	bl	8009798 <gd32_i2c_read>
 8002c0a:	f8bd 0004 	ldrh.w	r0, [sp, #4]
 8002c0e:	ba40      	rev16	r0, r0
 8002c10:	b280      	uxth	r0, r0
 8002c12:	b002      	add	sp, #8
 8002c14:	bd70      	pop	{r4, r5, r6, pc}
	...

08002c18 <sensor::INA219::Configure(sensor::ina219::Config&)>:
 8002c18:	880b      	ldrh	r3, [r1, #0]
 8002c1a:	b510      	push	{r4, lr}
 8002c1c:	b1d3      	cbz	r3, 8002c54 <sensor::INA219::Configure(sensor::ina219::Config&)+0x3c>
 8002c1e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002c22:	d102      	bne.n	8002c2a <sensor::INA219::Configure(sensor::ina219::Config&)+0x12>
 8002c24:	f04f 4284 	mov.w	r2, #1107296256	; 0x42000000
 8002c28:	6182      	str	r2, [r0, #24]
 8002c2a:	884a      	ldrh	r2, [r1, #2]
 8002c2c:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 8002c30:	d019      	beq.n	8002c66 <sensor::INA219::Configure(sensor::ina219::Config&)+0x4e>
 8002c32:	d812      	bhi.n	8002c5a <sensor::INA219::Configure(sensor::ina219::Config&)+0x42>
 8002c34:	b1da      	cbz	r2, 8002c6e <sensor::INA219::Configure(sensor::ina219::Config&)+0x56>
 8002c36:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 8002c3a:	d016      	beq.n	8002c6a <sensor::INA219::Configure(sensor::ina219::Config&)+0x52>
 8002c3c:	431a      	orrs	r2, r3
 8002c3e:	888b      	ldrh	r3, [r1, #4]
 8002c40:	431a      	orrs	r2, r3
 8002c42:	88cb      	ldrh	r3, [r1, #6]
 8002c44:	431a      	orrs	r2, r3
 8002c46:	890b      	ldrh	r3, [r1, #8]
 8002c48:	431a      	orrs	r2, r3
 8002c4a:	b292      	uxth	r2, r2
 8002c4c:	2100      	movs	r1, #0
 8002c4e:	f7ff ffad 	bl	8002bac <HAL_I2C::WriteRegister(unsigned char, unsigned short)>
 8002c52:	bd10      	pop	{r4, pc}
 8002c54:	f04f 4283 	mov.w	r2, #1098907648	; 0x41800000
 8002c58:	e7e6      	b.n	8002c28 <sensor::INA219::Configure(sensor::ina219::Config&)+0x10>
 8002c5a:	f5b2 5fc0 	cmp.w	r2, #6144	; 0x1800
 8002c5e:	d1ed      	bne.n	8002c3c <sensor::INA219::Configure(sensor::ina219::Config&)+0x24>
 8002c60:	4c04      	ldr	r4, [pc, #16]	; (8002c74 <sensor::INA219::Configure(sensor::ina219::Config&)+0x5c>)
 8002c62:	6144      	str	r4, [r0, #20]
 8002c64:	e7ea      	b.n	8002c3c <sensor::INA219::Configure(sensor::ina219::Config&)+0x24>
 8002c66:	4c04      	ldr	r4, [pc, #16]	; (8002c78 <sensor::INA219::Configure(sensor::ina219::Config&)+0x60>)
 8002c68:	e7fb      	b.n	8002c62 <sensor::INA219::Configure(sensor::ina219::Config&)+0x4a>
 8002c6a:	4c04      	ldr	r4, [pc, #16]	; (8002c7c <sensor::INA219::Configure(sensor::ina219::Config&)+0x64>)
 8002c6c:	e7f9      	b.n	8002c62 <sensor::INA219::Configure(sensor::ina219::Config&)+0x4a>
 8002c6e:	4c04      	ldr	r4, [pc, #16]	; (8002c80 <sensor::INA219::Configure(sensor::ina219::Config&)+0x68>)
 8002c70:	e7f7      	b.n	8002c62 <sensor::INA219::Configure(sensor::ina219::Config&)+0x4a>
 8002c72:	bf00      	nop
 8002c74:	3ea3d70a 	cdpcc	7, 10, cr13, cr3, cr10, {0}
 8002c78:	3e23d70a 	cdpcc	7, 2, cr13, cr3, cr10, {0}
 8002c7c:	3da3d70a 	stccc	7, cr13, [r3, #40]!	; 0x28
 8002c80:	3d23d70a 	stccc	7, cr13, [r3, #-40]!	; 0xffffffd8

08002c84 <sensor::INA219::Calibrate(float, float)>:
 8002c84:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8002d0c <sensor::INA219::Calibrate(float, float)+0x88>
 8002c88:	eddf 6a21 	vldr	s13, [pc, #132]	; 8002d10 <sensor::INA219::Calibrate(float, float)+0x8c>
 8002c8c:	ed80 0a07 	vstr	s0, [r0, #28]
 8002c90:	eec0 7a87 	vdiv.f32	s15, s1, s14
 8002c94:	b508      	push	{r3, lr}
 8002c96:	2105      	movs	r1, #5
 8002c98:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 8002d14 <sensor::INA219::Calibrate(float, float)+0x90>
 8002c9c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002ca0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002ca4:	ee17 3a90 	vmov	r3, s15
 8002ca8:	b29b      	uxth	r3, r3
 8002caa:	ee07 3a90 	vmov	s15, r3
 8002cae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002cb2:	eec7 5a87 	vdiv.f32	s11, s15, s14
 8002cb6:	ee85 6aa6 	vdiv.f32	s12, s11, s13
 8002cba:	eebd 7ac6 	vcvt.s32.f32	s14, s12
 8002cbe:	eef8 7ac7 	vcvt.f32.s32	s15, s14
 8002cc2:	eeb4 6a67 	vcmp.f32	s12, s15
 8002cc6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002cca:	bf1f      	itttt	ne
 8002ccc:	ee17 3a10 	vmovne	r3, s14
 8002cd0:	3301      	addne	r3, #1
 8002cd2:	ee07 3a10 	vmovne	s14, r3
 8002cd6:	eef8 7ac7 	vcvtne.f32.s32	s15, s14
 8002cda:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8002cde:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002ce2:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002ce6:	ee27 0a80 	vmul.f32	s0, s15, s0
 8002cea:	ed80 7a04 	vstr	s14, [r0, #16]
 8002cee:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 8002d18 <sensor::INA219::Calibrate(float, float)+0x94>
 8002cf2:	edc0 7a03 	vstr	s15, [r0, #12]
 8002cf6:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8002cfa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002cfe:	ee17 3a90 	vmov	r3, s15
 8002d02:	b29a      	uxth	r2, r3
 8002d04:	f7ff ff52 	bl	8002bac <HAL_I2C::WriteRegister(unsigned char, unsigned short)>
 8002d08:	bd08      	pop	{r3, pc}
 8002d0a:	bf00      	nop
 8002d0c:	46fffe00 	ldrbtmi	pc, [pc], r0, lsl #28	; <UNPREDICTABLE>
 8002d10:	38d1b717 	ldmcc	r1, {r0, r1, r2, r4, r8, r9, sl, ip, sp, pc}^
 8002d14:	4cbebc20 	ldcmi	12, cr11, [lr], #128	; 0x80
 8002d18:	3d27c5ac 	cfstr32cc	mvfx12, [r7, #-688]!	; 0xfffffd50

08002d1c <sensor::INA219::INA219(unsigned char)>:
 8002d1c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002d1e:	1e0c      	subs	r4, r1, #0
 8002d20:	bf08      	it	eq
 8002d22:	2440      	moveq	r4, #64	; 0x40
 8002d24:	4f1b      	ldr	r7, [pc, #108]	; (8002d94 <sensor::INA219::INA219(unsigned char)+0x78>)
 8002d26:	7004      	strb	r4, [r0, #0]
 8002d28:	2600      	movs	r6, #0
 8002d2a:	b085      	sub	sp, #20
 8002d2c:	6047      	str	r7, [r0, #4]
 8002d2e:	7206      	strb	r6, [r0, #8]
 8002d30:	4605      	mov	r5, r0
 8002d32:	4620      	mov	r0, r4
 8002d34:	f006 fcc4 	bl	80096c0 <gd32_i2c_set_address>
 8002d38:	4638      	mov	r0, r7
 8002d3a:	f006 fcb9 	bl	80096b0 <gd32_i2c_set_baudrate>
 8002d3e:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8002d42:	2b07      	cmp	r3, #7
 8002d44:	d902      	bls.n	8002d4c <sensor::INA219::INA219(unsigned char)+0x30>
 8002d46:	3c50      	subs	r4, #80	; 0x50
 8002d48:	2c0f      	cmp	r4, #15
 8002d4a:	d81d      	bhi.n	8002d88 <sensor::INA219::INA219(unsigned char)+0x6c>
 8002d4c:	2101      	movs	r1, #1
 8002d4e:	a801      	add	r0, sp, #4
 8002d50:	f006 fd22 	bl	8009798 <gd32_i2c_read>
 8002d54:	fab0 f080 	clz	r0, r0
 8002d58:	0940      	lsrs	r0, r0, #5
 8002d5a:	7228      	strb	r0, [r5, #8]
 8002d5c:	b188      	cbz	r0, 8002d82 <sensor::INA219::INA219(unsigned char)+0x66>
 8002d5e:	4a0e      	ldr	r2, [pc, #56]	; (8002d98 <sensor::INA219::INA219(unsigned char)+0x7c>)
 8002d60:	6810      	ldr	r0, [r2, #0]
 8002d62:	6851      	ldr	r1, [r2, #4]
 8002d64:	8912      	ldrh	r2, [r2, #8]
 8002d66:	ab01      	add	r3, sp, #4
 8002d68:	c303      	stmia	r3!, {r0, r1}
 8002d6a:	4628      	mov	r0, r5
 8002d6c:	801a      	strh	r2, [r3, #0]
 8002d6e:	a901      	add	r1, sp, #4
 8002d70:	f7ff ff52 	bl	8002c18 <sensor::INA219::Configure(sensor::ina219::Config&)>
 8002d74:	ed9f 0a09 	vldr	s0, [pc, #36]	; 8002d9c <sensor::INA219::INA219(unsigned char)+0x80>
 8002d78:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 8002d7c:	4628      	mov	r0, r5
 8002d7e:	f7ff ff81 	bl	8002c84 <sensor::INA219::Calibrate(float, float)>
 8002d82:	4628      	mov	r0, r5
 8002d84:	b005      	add	sp, #20
 8002d86:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002d88:	4631      	mov	r1, r6
 8002d8a:	4630      	mov	r0, r6
 8002d8c:	f006 fc9e 	bl	80096cc <gd32_i2c_write>
 8002d90:	e7e0      	b.n	8002d54 <sensor::INA219::INA219(unsigned char)+0x38>
 8002d92:	bf00      	nop
 8002d94:	00061a80 	andeq	r1, r6, r0, lsl #21
 8002d98:	0800a08c 	stmdaeq	r0, {r2, r3, r7, sp, pc}
 8002d9c:	3dcccccd 	stclcc	12, cr12, [ip, #820]	; 0x334

08002da0 <sensor::INA219::GetShuntCurrent()>:
 8002da0:	b510      	push	{r4, lr}
 8002da2:	f44f 7248 	mov.w	r2, #800	; 0x320
 8002da6:	2104      	movs	r1, #4
 8002da8:	4604      	mov	r4, r0
 8002daa:	f7ff ff14 	bl	8002bd6 <HAL_I2C::ReadRegister16DelayUs(unsigned char, unsigned long)>
 8002dae:	ee07 0a90 	vmov	s15, r0
 8002db2:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 8002db6:	edd4 7a03 	vldr	s15, [r4, #12]
 8002dba:	ee20 0a27 	vmul.f32	s0, s0, s15
 8002dbe:	bd10      	pop	{r4, pc}

08002dc0 <sensor::INA219::GetBusVoltageRaw()>:
 8002dc0:	b508      	push	{r3, lr}
 8002dc2:	f44f 7248 	mov.w	r2, #800	; 0x320
 8002dc6:	2102      	movs	r1, #2
 8002dc8:	f7ff ff05 	bl	8002bd6 <HAL_I2C::ReadRegister16DelayUs(unsigned char, unsigned long)>
 8002dcc:	f340 004f 	sbfx	r0, r0, #1, #16
 8002dd0:	f020 0003 	bic.w	r0, r0, #3
 8002dd4:	bd08      	pop	{r3, pc}
	...

08002dd8 <sensor::INA219::GetBusVoltage()>:
 8002dd8:	b508      	push	{r3, lr}
 8002dda:	f7ff fff1 	bl	8002dc0 <sensor::INA219::GetBusVoltageRaw()>
 8002dde:	ee07 0a90 	vmov	s15, r0
 8002de2:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 8002de6:	eddf 7a02 	vldr	s15, [pc, #8]	; 8002df0 <sensor::INA219::GetBusVoltage()+0x18>
 8002dea:	ee20 0a27 	vmul.f32	s0, s0, s15
 8002dee:	bd08      	pop	{r3, pc}
 8002df0:	3a83126f 	bcc	60c77b4 <__heap_size+0x60c67b4>

08002df4 <sensor::INA219::GetBusPower()>:
 8002df4:	b510      	push	{r4, lr}
 8002df6:	f44f 7248 	mov.w	r2, #800	; 0x320
 8002dfa:	2103      	movs	r1, #3
 8002dfc:	4604      	mov	r4, r0
 8002dfe:	f7ff feea 	bl	8002bd6 <HAL_I2C::ReadRegister16DelayUs(unsigned char, unsigned long)>
 8002e02:	ee07 0a90 	vmov	s15, r0
 8002e06:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 8002e0a:	edd4 7a04 	vldr	s15, [r4, #16]
 8002e0e:	ee20 0a27 	vmul.f32	s0, s0, s15
 8002e12:	bd10      	pop	{r4, pc}
 8002e14:	0000      	movs	r0, r0
	...

08002e18 <MCP3424::SetResolution(adc::mcp3424::Resolution)>:
 8002e18:	7a42      	ldrb	r2, [r0, #9]
 8002e1a:	008b      	lsls	r3, r1, #2
 8002e1c:	f003 030c 	and.w	r3, r3, #12
 8002e20:	f022 020c 	bic.w	r2, r2, #12
 8002e24:	b530      	push	{r4, r5, lr}
 8002e26:	4313      	orrs	r3, r2
 8002e28:	2903      	cmp	r1, #3
 8002e2a:	d80a      	bhi.n	8002e42 <MCP3424::SetResolution(adc::mcp3424::Resolution)+0x2a>
 8002e2c:	e8df f001 	tbb	[pc, r1]
 8002e30:	0902110d 	stmdbeq	r2, {r0, r2, r3, r8, ip}
 8002e34:	a50a      	add	r5, pc, #40	; (adr r5, 8002e60 <MCP3424::SetResolution(adc::mcp3424::Resolution)+0x48>)
 8002e36:	e9d5 4500 	ldrd	r4, r5, [r5]
 8002e3a:	e9c0 4504 	strd	r4, r5, [r0, #16]
 8002e3e:	7243      	strb	r3, [r0, #9]
 8002e40:	bd30      	pop	{r4, r5, pc}
 8002e42:	a509      	add	r5, pc, #36	; (adr r5, 8002e68 <MCP3424::SetResolution(adc::mcp3424::Resolution)+0x50>)
 8002e44:	e9d5 4500 	ldrd	r4, r5, [r5]
 8002e48:	e7f7      	b.n	8002e3a <MCP3424::SetResolution(adc::mcp3424::Resolution)+0x22>
 8002e4a:	a509      	add	r5, pc, #36	; (adr r5, 8002e70 <MCP3424::SetResolution(adc::mcp3424::Resolution)+0x58>)
 8002e4c:	e9d5 4500 	ldrd	r4, r5, [r5]
 8002e50:	e7f3      	b.n	8002e3a <MCP3424::SetResolution(adc::mcp3424::Resolution)+0x22>
 8002e52:	a509      	add	r5, pc, #36	; (adr r5, 8002e78 <MCP3424::SetResolution(adc::mcp3424::Resolution)+0x60>)
 8002e54:	e9d5 4500 	ldrd	r4, r5, [r5]
 8002e58:	e7ef      	b.n	8002e3a <MCP3424::SetResolution(adc::mcp3424::Resolution)+0x22>
 8002e5a:	bf00      	nop
 8002e5c:	f3af 8000 	nop.w
 8002e60:	e0000000 	and	r0, r0, r0
 8002e64:	3f00624d 	svccc	0x0000624d
 8002e68:	e0000000 	and	r0, r0, r0
 8002e6c:	3ee0624d 	cdpcc	2, 14, cr6, cr0, cr13, {2}
 8002e70:	e0000000 	and	r0, r0, r0
 8002e74:	3f40624d 	svccc	0x0040624d
 8002e78:	e0000000 	and	r0, r0, r0
 8002e7c:	3f20624d 	svccc	0x0020624d

08002e80 <MCP3424::MCP3424(unsigned char)>:
 8002e80:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002e82:	1e0d      	subs	r5, r1, #0
 8002e84:	bf08      	it	eq
 8002e86:	2568      	moveq	r5, #104	; 0x68
 8002e88:	4f19      	ldr	r7, [pc, #100]	; (8002ef0 <MCP3424::MCP3424(unsigned char)+0x70>)
 8002e8a:	7005      	strb	r5, [r0, #0]
 8002e8c:	2600      	movs	r6, #0
 8002e8e:	6047      	str	r7, [r0, #4]
 8002e90:	7206      	strb	r6, [r0, #8]
 8002e92:	4604      	mov	r4, r0
 8002e94:	4628      	mov	r0, r5
 8002e96:	f006 fc13 	bl	80096c0 <gd32_i2c_set_address>
 8002e9a:	4638      	mov	r0, r7
 8002e9c:	f006 fc08 	bl	80096b0 <gd32_i2c_set_baudrate>
 8002ea0:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
 8002ea4:	2b07      	cmp	r3, #7
 8002ea6:	d902      	bls.n	8002eae <MCP3424::MCP3424(unsigned char)+0x2e>
 8002ea8:	3d50      	subs	r5, #80	; 0x50
 8002eaa:	2d0f      	cmp	r5, #15
 8002eac:	d81a      	bhi.n	8002ee4 <MCP3424::MCP3424(unsigned char)+0x64>
 8002eae:	2101      	movs	r1, #1
 8002eb0:	f10d 0007 	add.w	r0, sp, #7
 8002eb4:	f006 fc70 	bl	8009798 <gd32_i2c_read>
 8002eb8:	fab0 f080 	clz	r0, r0
 8002ebc:	0940      	lsrs	r0, r0, #5
 8002ebe:	7220      	strb	r0, [r4, #8]
 8002ec0:	b168      	cbz	r0, 8002ede <MCP3424::MCP3424(unsigned char)+0x5e>
 8002ec2:	7a63      	ldrb	r3, [r4, #9]
 8002ec4:	f023 0303 	bic.w	r3, r3, #3
 8002ec8:	7263      	strb	r3, [r4, #9]
 8002eca:	2100      	movs	r1, #0
 8002ecc:	4620      	mov	r0, r4
 8002ece:	f7ff ffa3 	bl	8002e18 <MCP3424::SetResolution(adc::mcp3424::Resolution)>
 8002ed2:	7a63      	ldrb	r3, [r4, #9]
 8002ed4:	f023 0310 	bic.w	r3, r3, #16
 8002ed8:	f043 0310 	orr.w	r3, r3, #16
 8002edc:	7263      	strb	r3, [r4, #9]
 8002ede:	4620      	mov	r0, r4
 8002ee0:	b003      	add	sp, #12
 8002ee2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002ee4:	4631      	mov	r1, r6
 8002ee6:	4630      	mov	r0, r6
 8002ee8:	f006 fbf0 	bl	80096cc <gd32_i2c_write>
 8002eec:	e7e4      	b.n	8002eb8 <MCP3424::MCP3424(unsigned char)+0x38>
 8002eee:	bf00      	nop
 8002ef0:	00061a80 	andeq	r1, r6, r0, lsl #21

08002ef4 <MCP3424::GetRaw(unsigned long)>:
 8002ef4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002ef6:	7a43      	ldrb	r3, [r0, #9]
 8002ef8:	0149      	lsls	r1, r1, #5
 8002efa:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 8002efe:	f001 0160 	and.w	r1, r1, #96	; 0x60
 8002f02:	430b      	orrs	r3, r1
 8002f04:	7243      	strb	r3, [r0, #9]
 8002f06:	f003 030c 	and.w	r3, r3, #12
 8002f0a:	2b0c      	cmp	r3, #12
 8002f0c:	f04f 0300 	mov.w	r3, #0
 8002f10:	4604      	mov	r4, r0
 8002f12:	bf14      	ite	ne
 8002f14:	2603      	movne	r6, #3
 8002f16:	2604      	moveq	r6, #4
 8002f18:	9301      	str	r3, [sp, #4]
 8002f1a:	f641 7541 	movw	r5, #8001	; 0x1f41
 8002f1e:	7820      	ldrb	r0, [r4, #0]
 8002f20:	7a67      	ldrb	r7, [r4, #9]
 8002f22:	f006 fbcd 	bl	80096c0 <gd32_i2c_set_address>
 8002f26:	6860      	ldr	r0, [r4, #4]
 8002f28:	f006 fbc2 	bl	80096b0 <gd32_i2c_set_baudrate>
 8002f2c:	2101      	movs	r1, #1
 8002f2e:	4668      	mov	r0, sp
 8002f30:	f88d 7000 	strb.w	r7, [sp]
 8002f34:	f006 fbca 	bl	80096cc <gd32_i2c_write>
 8002f38:	7820      	ldrb	r0, [r4, #0]
 8002f3a:	f006 fbc1 	bl	80096c0 <gd32_i2c_set_address>
 8002f3e:	6860      	ldr	r0, [r4, #4]
 8002f40:	f006 fbb6 	bl	80096b0 <gd32_i2c_set_baudrate>
 8002f44:	4631      	mov	r1, r6
 8002f46:	a801      	add	r0, sp, #4
 8002f48:	f006 fc26 	bl	8009798 <gd32_i2c_read>
 8002f4c:	2e04      	cmp	r6, #4
 8002f4e:	bf0c      	ite	eq
 8002f50:	f99d 3007 	ldrsbeq.w	r3, [sp, #7]
 8002f54:	f99d 3006 	ldrsbne.w	r3, [sp, #6]
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	da04      	bge.n	8002f66 <MCP3424::GetRaw(unsigned long)+0x72>
 8002f5c:	3d01      	subs	r5, #1
 8002f5e:	d1de      	bne.n	8002f1e <MCP3424::GetRaw(unsigned long)+0x2a>
 8002f60:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002f64:	e013      	b.n	8002f8e <MCP3424::GetRaw(unsigned long)+0x9a>
 8002f66:	7a62      	ldrb	r2, [r4, #9]
 8002f68:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8002f6c:	f89d 0005 	ldrb.w	r0, [sp, #5]
 8002f70:	f3c2 0281 	ubfx	r2, r2, #2, #2
 8002f74:	2a02      	cmp	r2, #2
 8002f76:	d00c      	beq.n	8002f92 <MCP3424::GetRaw(unsigned long)+0x9e>
 8002f78:	2a03      	cmp	r2, #3
 8002f7a:	d00f      	beq.n	8002f9c <MCP3424::GetRaw(unsigned long)+0xa8>
 8002f7c:	2a01      	cmp	r2, #1
 8002f7e:	ea4f 2303 	mov.w	r3, r3, lsl #8
 8002f82:	bf14      	ite	ne
 8002f84:	f403 6370 	andne.w	r3, r3, #3840	; 0xf00
 8002f88:	f403 537c 	andeq.w	r3, r3, #16128	; 0x3f00
 8002f8c:	4318      	orrs	r0, r3
 8002f8e:	b003      	add	sp, #12
 8002f90:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002f92:	f8bd 0004 	ldrh.w	r0, [sp, #4]
 8002f96:	ba40      	rev16	r0, r0
 8002f98:	b280      	uxth	r0, r0
 8002f9a:	e7f8      	b.n	8002f8e <MCP3424::GetRaw(unsigned long)+0x9a>
 8002f9c:	f8bd 0005 	ldrh.w	r0, [sp, #5]
 8002fa0:	041b      	lsls	r3, r3, #16
 8002fa2:	ba40      	rev16	r0, r0
 8002fa4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002fa8:	b280      	uxth	r0, r0
 8002faa:	e7ef      	b.n	8002f8c <MCP3424::GetRaw(unsigned long)+0x98>

08002fac <MCP3424::GetVoltage(unsigned long)>:
 8002fac:	b510      	push	{r4, lr}
 8002fae:	4604      	mov	r4, r0
 8002fb0:	f7ff ffa0 	bl	8002ef4 <MCP3424::GetRaw(unsigned long)>
 8002fb4:	f7fd fa78 	bl	80004a8 <__aeabi_ui2d>
 8002fb8:	4602      	mov	r2, r0
 8002fba:	460b      	mov	r3, r1
 8002fbc:	f7fd f938 	bl	8000230 <__adddf3>
 8002fc0:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
 8002fc4:	f7fd faea 	bl	800059c <__aeabi_dmul>
 8002fc8:	ec41 0b10 	vmov	d0, r0, r1
 8002fcc:	bd10      	pop	{r4, pc}

08002fce <HAL_I2C::ReadRegister16(unsigned char)>:
 8002fce:	b513      	push	{r0, r1, r4, lr}
 8002fd0:	4604      	mov	r4, r0
 8002fd2:	7800      	ldrb	r0, [r0, #0]
 8002fd4:	f88d 1000 	strb.w	r1, [sp]
 8002fd8:	f006 fb72 	bl	80096c0 <gd32_i2c_set_address>
 8002fdc:	6860      	ldr	r0, [r4, #4]
 8002fde:	f006 fb67 	bl	80096b0 <gd32_i2c_set_baudrate>
 8002fe2:	2101      	movs	r1, #1
 8002fe4:	4668      	mov	r0, sp
 8002fe6:	f006 fb71 	bl	80096cc <gd32_i2c_write>
 8002fea:	2300      	movs	r3, #0
 8002fec:	7820      	ldrb	r0, [r4, #0]
 8002fee:	f8ad 3004 	strh.w	r3, [sp, #4]
 8002ff2:	f006 fb65 	bl	80096c0 <gd32_i2c_set_address>
 8002ff6:	6860      	ldr	r0, [r4, #4]
 8002ff8:	f006 fb5a 	bl	80096b0 <gd32_i2c_set_baudrate>
 8002ffc:	2102      	movs	r1, #2
 8002ffe:	a801      	add	r0, sp, #4
 8003000:	f006 fbca 	bl	8009798 <gd32_i2c_read>
 8003004:	f8bd 0004 	ldrh.w	r0, [sp, #4]
 8003008:	ba40      	rev16	r0, r0
 800300a:	b280      	uxth	r0, r0
 800300c:	b002      	add	sp, #8
 800300e:	bd10      	pop	{r4, pc}

08003010 <sensor::MCP9808::MCP9808(unsigned char)>:
 8003010:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003012:	1e0d      	subs	r5, r1, #0
 8003014:	bf08      	it	eq
 8003016:	2518      	moveq	r5, #24
 8003018:	4f1b      	ldr	r7, [pc, #108]	; (8003088 <sensor::MCP9808::MCP9808(unsigned char)+0x78>)
 800301a:	7005      	strb	r5, [r0, #0]
 800301c:	2600      	movs	r6, #0
 800301e:	6047      	str	r7, [r0, #4]
 8003020:	7206      	strb	r6, [r0, #8]
 8003022:	4604      	mov	r4, r0
 8003024:	4628      	mov	r0, r5
 8003026:	f006 fb4b 	bl	80096c0 <gd32_i2c_set_address>
 800302a:	4638      	mov	r0, r7
 800302c:	f006 fb40 	bl	80096b0 <gd32_i2c_set_baudrate>
 8003030:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
 8003034:	2b07      	cmp	r3, #7
 8003036:	d902      	bls.n	800303e <sensor::MCP9808::MCP9808(unsigned char)+0x2e>
 8003038:	3d50      	subs	r5, #80	; 0x50
 800303a:	2d0f      	cmp	r5, #15
 800303c:	d81f      	bhi.n	800307e <sensor::MCP9808::MCP9808(unsigned char)+0x6e>
 800303e:	2101      	movs	r1, #1
 8003040:	f10d 0007 	add.w	r0, sp, #7
 8003044:	f006 fba8 	bl	8009798 <gd32_i2c_read>
 8003048:	fab0 f080 	clz	r0, r0
 800304c:	0940      	lsrs	r0, r0, #5
 800304e:	7220      	strb	r0, [r4, #8]
 8003050:	b190      	cbz	r0, 8003078 <sensor::MCP9808::MCP9808(unsigned char)+0x68>
 8003052:	2106      	movs	r1, #6
 8003054:	4620      	mov	r0, r4
 8003056:	f7ff ffba 	bl	8002fce <HAL_I2C::ReadRegister16(unsigned char)>
 800305a:	2854      	cmp	r0, #84	; 0x54
 800305c:	bf0c      	ite	eq
 800305e:	2301      	moveq	r3, #1
 8003060:	2300      	movne	r3, #0
 8003062:	7223      	strb	r3, [r4, #8]
 8003064:	d108      	bne.n	8003078 <sensor::MCP9808::MCP9808(unsigned char)+0x68>
 8003066:	2107      	movs	r1, #7
 8003068:	4620      	mov	r0, r4
 800306a:	f7ff ffb0 	bl	8002fce <HAL_I2C::ReadRegister16(unsigned char)>
 800306e:	f5a0 6380 	sub.w	r3, r0, #1024	; 0x400
 8003072:	4258      	negs	r0, r3
 8003074:	4158      	adcs	r0, r3
 8003076:	7220      	strb	r0, [r4, #8]
 8003078:	4620      	mov	r0, r4
 800307a:	b003      	add	sp, #12
 800307c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800307e:	4631      	mov	r1, r6
 8003080:	4630      	mov	r0, r6
 8003082:	f006 fb23 	bl	80096cc <gd32_i2c_write>
 8003086:	e7df      	b.n	8003048 <sensor::MCP9808::MCP9808(unsigned char)+0x38>
 8003088:	00061a80 	andeq	r1, r6, r0, lsl #21

0800308c <sensor::MCP9808::Get()>:
 800308c:	b508      	push	{r3, lr}
 800308e:	2105      	movs	r1, #5
 8003090:	f7ff ff9d 	bl	8002fce <HAL_I2C::ReadRegister16(unsigned char)>
 8003094:	f3c0 030b 	ubfx	r3, r0, #0, #12
 8003098:	ee00 3a10 	vmov	s0, r3
 800309c:	04c3      	lsls	r3, r0, #19
 800309e:	eeba 0ace 	vcvt.f32.s32	s0, s0, #4
 80030a2:	bf44      	itt	mi
 80030a4:	eddf 7a02 	vldrmi	s15, [pc, #8]	; 80030b0 <sensor::MCP9808::Get()+0x24>
 80030a8:	ee30 0a67 	vsubmi.f32	s0, s0, s15
 80030ac:	bd08      	pop	{r3, pc}
 80030ae:	bf00      	nop
 80030b0:	43800000 	orrmi	r0, r0, #0

080030b4 <sensor::SI7021::SI7021(unsigned char)>:
 80030b4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80030b6:	1e0c      	subs	r4, r1, #0
 80030b8:	bf08      	it	eq
 80030ba:	2440      	moveq	r4, #64	; 0x40
 80030bc:	4f11      	ldr	r7, [pc, #68]	; (8003104 <sensor::SI7021::SI7021(unsigned char)+0x50>)
 80030be:	7004      	strb	r4, [r0, #0]
 80030c0:	2600      	movs	r6, #0
 80030c2:	6047      	str	r7, [r0, #4]
 80030c4:	7206      	strb	r6, [r0, #8]
 80030c6:	4605      	mov	r5, r0
 80030c8:	4620      	mov	r0, r4
 80030ca:	f006 faf9 	bl	80096c0 <gd32_i2c_set_address>
 80030ce:	4638      	mov	r0, r7
 80030d0:	f006 faee 	bl	80096b0 <gd32_i2c_set_baudrate>
 80030d4:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 80030d8:	2b07      	cmp	r3, #7
 80030da:	d902      	bls.n	80030e2 <sensor::SI7021::SI7021(unsigned char)+0x2e>
 80030dc:	3c50      	subs	r4, #80	; 0x50
 80030de:	2c0f      	cmp	r4, #15
 80030e0:	d80b      	bhi.n	80030fa <sensor::SI7021::SI7021(unsigned char)+0x46>
 80030e2:	2101      	movs	r1, #1
 80030e4:	f10d 0007 	add.w	r0, sp, #7
 80030e8:	f006 fb56 	bl	8009798 <gd32_i2c_read>
 80030ec:	fab0 f380 	clz	r3, r0
 80030f0:	095b      	lsrs	r3, r3, #5
 80030f2:	4628      	mov	r0, r5
 80030f4:	722b      	strb	r3, [r5, #8]
 80030f6:	b003      	add	sp, #12
 80030f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80030fa:	4631      	mov	r1, r6
 80030fc:	4630      	mov	r0, r6
 80030fe:	f006 fae5 	bl	80096cc <gd32_i2c_write>
 8003102:	e7f3      	b.n	80030ec <sensor::SI7021::SI7021(unsigned char)+0x38>
 8003104:	00061a80 	andeq	r1, r6, r0, lsl #21

08003108 <sensor::SI7021::ReadRaw(unsigned char)>:
 8003108:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800310a:	4604      	mov	r4, r0
 800310c:	7800      	ldrb	r0, [r0, #0]
 800310e:	460d      	mov	r5, r1
 8003110:	f006 fad6 	bl	80096c0 <gd32_i2c_set_address>
 8003114:	6860      	ldr	r0, [r4, #4]
 8003116:	f006 facb 	bl	80096b0 <gd32_i2c_set_baudrate>
 800311a:	2101      	movs	r1, #1
 800311c:	a801      	add	r0, sp, #4
 800311e:	f88d 5004 	strb.w	r5, [sp, #4]
 8003122:	f006 fad3 	bl	80096cc <gd32_i2c_write>
 8003126:	4b13      	ldr	r3, [pc, #76]	; (8003174 <sensor::SI7021::ReadRaw(unsigned char)+0x6c>)
 8003128:	881b      	ldrh	r3, [r3, #0]
 800312a:	f8ad 3004 	strh.w	r3, [sp, #4]
 800312e:	2300      	movs	r3, #0
 8003130:	f88d 3006 	strb.w	r3, [sp, #6]
 8003134:	2508      	movs	r5, #8
 8003136:	2100      	movs	r1, #0
 8003138:	f242 7010 	movw	r0, #10000	; 0x2710
 800313c:	f006 fd82 	bl	8009c44 <udelay(unsigned long, unsigned long)>
 8003140:	7820      	ldrb	r0, [r4, #0]
 8003142:	f006 fabd 	bl	80096c0 <gd32_i2c_set_address>
 8003146:	6860      	ldr	r0, [r4, #4]
 8003148:	f006 fab2 	bl	80096b0 <gd32_i2c_set_baudrate>
 800314c:	2103      	movs	r1, #3
 800314e:	a801      	add	r0, sp, #4
 8003150:	f006 fb22 	bl	8009798 <gd32_i2c_read>
 8003154:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8003158:	f003 0303 	and.w	r3, r3, #3
 800315c:	2b02      	cmp	r3, #2
 800315e:	d001      	beq.n	8003164 <sensor::SI7021::ReadRaw(unsigned char)+0x5c>
 8003160:	3d01      	subs	r5, #1
 8003162:	d1e8      	bne.n	8003136 <sensor::SI7021::ReadRaw(unsigned char)+0x2e>
 8003164:	f8bd 0004 	ldrh.w	r0, [sp, #4]
 8003168:	ba40      	rev16	r0, r0
 800316a:	f020 0003 	bic.w	r0, r0, #3
 800316e:	b280      	uxth	r0, r0
 8003170:	b003      	add	sp, #12
 8003172:	bd30      	pop	{r4, r5, pc}
 8003174:	0800a096 	stmdaeq	r0, {r1, r2, r4, r7, sp, pc}

08003178 <sensor::SI7021::GetTemperature()>:
 8003178:	b508      	push	{r3, lr}
 800317a:	21f3      	movs	r1, #243	; 0xf3
 800317c:	f7ff ffc4 	bl	8003108 <sensor::SI7021::ReadRaw(unsigned char)>
 8003180:	ee07 0a90 	vmov	s15, r0
 8003184:	ed9f 7a04 	vldr	s14, [pc, #16]	; 8003198 <sensor::SI7021::GetTemperature()+0x20>
 8003188:	ed9f 0a04 	vldr	s0, [pc, #16]	; 800319c <sensor::SI7021::GetTemperature()+0x24>
 800318c:	eefb 7ac8 	vcvt.f32.u32	s15, s15, #16
 8003190:	eea7 0a87 	vfma.f32	s0, s15, s14
 8003194:	bd08      	pop	{r3, pc}
 8003196:	bf00      	nop
 8003198:	432fb852 			; <UNDEFINED> instruction: 0x432fb852
 800319c:	c23b6666 	eorsgt	r6, fp, #106954752	; 0x6600000

080031a0 <sensor::SI7021::GetHumidity()>:
 80031a0:	b508      	push	{r3, lr}
 80031a2:	21f5      	movs	r1, #245	; 0xf5
 80031a4:	f7ff ffb0 	bl	8003108 <sensor::SI7021::ReadRaw(unsigned char)>
 80031a8:	ee07 0a90 	vmov	s15, r0
 80031ac:	ed9f 7a04 	vldr	s14, [pc, #16]	; 80031c0 <sensor::SI7021::GetHumidity()+0x20>
 80031b0:	eefb 7ac8 	vcvt.f32.u32	s15, s15, #16
 80031b4:	eeb9 0a08 	vmov.f32	s0, #152	; 0xc0c00000 -6.0
 80031b8:	eea7 0a87 	vfma.f32	s0, s15, s14
 80031bc:	bd08      	pop	{r3, pc}
 80031be:	bf00      	nop
 80031c0:	42fa0000 	rscsmi	r0, sl, #0

080031c4 <RDMSubDevices::RDMSubDevices()>:
 80031c4:	2200      	movs	r2, #0
 80031c6:	6002      	str	r2, [r0, #0]
 80031c8:	8082      	strh	r2, [r0, #4]
 80031ca:	4a01      	ldr	r2, [pc, #4]	; (80031d0 <RDMSubDevices::RDMSubDevices()+0xc>)
 80031cc:	6010      	str	r0, [r2, #0]
 80031ce:	4770      	bx	lr
 80031d0:	20001198 	mulcs	r0, r8, r1

080031d4 <RDMSubDevices::~RDMSubDevices()>:
 80031d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80031d6:	2500      	movs	r5, #0
 80031d8:	4604      	mov	r4, r0
 80031da:	462e      	mov	r6, r5
 80031dc:	88a3      	ldrh	r3, [r4, #4]
 80031de:	6820      	ldr	r0, [r4, #0]
 80031e0:	42ab      	cmp	r3, r5
 80031e2:	d804      	bhi.n	80031ee <RDMSubDevices::~RDMSubDevices()+0x1a>
 80031e4:	b108      	cbz	r0, 80031ea <RDMSubDevices::~RDMSubDevices()+0x16>
 80031e6:	f005 f968 	bl	80084ba <operator delete[](void*)>
 80031ea:	4620      	mov	r0, r4
 80031ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80031ee:	f850 0025 	ldr.w	r0, [r0, r5, lsl #2]
 80031f2:	00af      	lsls	r7, r5, #2
 80031f4:	b110      	cbz	r0, 80031fc <RDMSubDevices::~RDMSubDevices()+0x28>
 80031f6:	6803      	ldr	r3, [r0, #0]
 80031f8:	685b      	ldr	r3, [r3, #4]
 80031fa:	4798      	blx	r3
 80031fc:	6823      	ldr	r3, [r4, #0]
 80031fe:	3501      	adds	r5, #1
 8003200:	51de      	str	r6, [r3, r7]
 8003202:	e7eb      	b.n	80031dc <RDMSubDevices::~RDMSubDevices()+0x8>

08003204 <RDMSubDevices::GetInfo(unsigned short)>:
 8003204:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 8003208:	6803      	ldr	r3, [r0, #0]
 800320a:	3901      	subs	r1, #1
 800320c:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
 8003210:	3010      	adds	r0, #16
 8003212:	4770      	bx	lr

08003214 <RDMSubDevices::GetLabel(unsigned short, TRDMDeviceInfoData*)>:
 8003214:	f101 4380 	add.w	r3, r1, #1073741824	; 0x40000000
 8003218:	6800      	ldr	r0, [r0, #0]
 800321a:	3b01      	subs	r3, #1
 800321c:	4611      	mov	r1, r2
 800321e:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 8003222:	f000 b8b2 	b.w	800338a <RDMSubDevice::GetLabel(TRDMDeviceInfoData*)>

08003226 <RDMSubDevices::SetLabel(unsigned short, char const*, unsigned char)>:
 8003226:	b410      	push	{r4}
 8003228:	460c      	mov	r4, r1
 800322a:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
 800322e:	3c01      	subs	r4, #1
 8003230:	6800      	ldr	r0, [r0, #0]
 8003232:	4611      	mov	r1, r2
 8003234:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 8003238:	f85d 4b04 	ldr.w	r4, [sp], #4
 800323c:	461a      	mov	r2, r3
 800323e:	f000 b8b9 	b.w	80033b4 <RDMSubDevice::SetLabel(char const*, unsigned char)>

08003242 <RDMSubDevices::GetDmxStartAddress(unsigned short)>:
 8003242:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 8003246:	6803      	ldr	r3, [r0, #0]
 8003248:	3901      	subs	r1, #1
 800324a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800324e:	8a58      	ldrh	r0, [r3, #18]
 8003250:	4770      	bx	lr

08003252 <RDMSubDevices::SetDmxStartAddress(unsigned short, unsigned short)>:
 8003252:	f101 4380 	add.w	r3, r1, #1073741824	; 0x40000000
 8003256:	6800      	ldr	r0, [r0, #0]
 8003258:	3b01      	subs	r3, #1
 800325a:	4611      	mov	r1, r2
 800325c:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 8003260:	f000 b887 	b.w	8003372 <RDMSubDevice::SetDmxStartAddress(unsigned short)>

08003264 <RDMSubDevices::GetDmxFootPrint(unsigned short)>:
 8003264:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 8003268:	6803      	ldr	r3, [r0, #0]
 800326a:	3901      	subs	r1, #1
 800326c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8003270:	8a18      	ldrh	r0, [r3, #16]
 8003272:	4770      	bx	lr

08003274 <RDMSubDevices::GetPersonalityCurrent(unsigned short)>:
 8003274:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 8003278:	6803      	ldr	r3, [r0, #0]
 800327a:	3901      	subs	r1, #1
 800327c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8003280:	7d18      	ldrb	r0, [r3, #20]
 8003282:	4770      	bx	lr

08003284 <RDMSubDevices::SetPersonalityCurrent(unsigned short, unsigned char)>:
 8003284:	f101 4380 	add.w	r3, r1, #1073741824	; 0x40000000
 8003288:	6800      	ldr	r0, [r0, #0]
 800328a:	3b01      	subs	r3, #1
 800328c:	4611      	mov	r1, r2
 800328e:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 8003292:	f000 b89e 	b.w	80033d2 <RDMSubDevice::SetPersonalityCurrent(unsigned char)>

08003296 <RDMSubDevices::GetPersonalityCount(unsigned short)>:
 8003296:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 800329a:	6803      	ldr	r3, [r0, #0]
 800329c:	3901      	subs	r1, #1
 800329e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80032a2:	7d58      	ldrb	r0, [r3, #21]
 80032a4:	4770      	bx	lr

080032a6 <RDMSubDevices::GetPersonality(unsigned short, unsigned char)>:
 80032a6:	f101 4380 	add.w	r3, r1, #1073741824	; 0x40000000
 80032aa:	6800      	ldr	r0, [r0, #0]
 80032ac:	3b01      	subs	r3, #1
 80032ae:	4611      	mov	r1, r2
 80032b0:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 80032b4:	f000 b862 	b.w	800337c <RDMSubDevice::GetPersonality(unsigned char)>

080032b8 <RDMSubDevices::Start()>:
 80032b8:	b538      	push	{r3, r4, r5, lr}
 80032ba:	4605      	mov	r5, r0
 80032bc:	2400      	movs	r4, #0
 80032be:	88ab      	ldrh	r3, [r5, #4]
 80032c0:	42a3      	cmp	r3, r4
 80032c2:	d800      	bhi.n	80032c6 <RDMSubDevices::Start()+0xe>
 80032c4:	bd38      	pop	{r3, r4, r5, pc}
 80032c6:	682b      	ldr	r3, [r5, #0]
 80032c8:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 80032cc:	b110      	cbz	r0, 80032d4 <RDMSubDevices::Start()+0x1c>
 80032ce:	6803      	ldr	r3, [r0, #0]
 80032d0:	68db      	ldr	r3, [r3, #12]
 80032d2:	4798      	blx	r3
 80032d4:	3401      	adds	r4, #1
 80032d6:	e7f2      	b.n	80032be <RDMSubDevices::Start()+0x6>

080032d8 <RDMSubDevices::Stop()>:
 80032d8:	b538      	push	{r3, r4, r5, lr}
 80032da:	4605      	mov	r5, r0
 80032dc:	2400      	movs	r4, #0
 80032de:	88ab      	ldrh	r3, [r5, #4]
 80032e0:	42a3      	cmp	r3, r4
 80032e2:	d800      	bhi.n	80032e6 <RDMSubDevices::Stop()+0xe>
 80032e4:	bd38      	pop	{r3, r4, r5, pc}
 80032e6:	682b      	ldr	r3, [r5, #0]
 80032e8:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 80032ec:	b110      	cbz	r0, 80032f4 <RDMSubDevices::Stop()+0x1c>
 80032ee:	6803      	ldr	r3, [r0, #0]
 80032f0:	691b      	ldr	r3, [r3, #16]
 80032f2:	4798      	blx	r3
 80032f4:	3401      	adds	r4, #1
 80032f6:	e7f2      	b.n	80032de <RDMSubDevices::Stop()+0x6>

080032f8 <RDMSubDevices::SetData(unsigned char const*, unsigned long)>:
 80032f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80032fa:	4605      	mov	r5, r0
 80032fc:	460f      	mov	r7, r1
 80032fe:	4616      	mov	r6, r2
 8003300:	2400      	movs	r4, #0
 8003302:	88ab      	ldrh	r3, [r5, #4]
 8003304:	42a3      	cmp	r3, r4
 8003306:	d800      	bhi.n	800330a <RDMSubDevices::SetData(unsigned char const*, unsigned long)+0x12>
 8003308:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800330a:	682b      	ldr	r3, [r5, #0]
 800330c:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8003310:	b158      	cbz	r0, 800332a <RDMSubDevices::SetData(unsigned char const*, unsigned long)+0x32>
 8003312:	8a43      	ldrh	r3, [r0, #18]
 8003314:	8a02      	ldrh	r2, [r0, #16]
 8003316:	4413      	add	r3, r2
 8003318:	b29b      	uxth	r3, r3
 800331a:	3b01      	subs	r3, #1
 800331c:	42b3      	cmp	r3, r6
 800331e:	d804      	bhi.n	800332a <RDMSubDevices::SetData(unsigned char const*, unsigned long)+0x32>
 8003320:	6803      	ldr	r3, [r0, #0]
 8003322:	4632      	mov	r2, r6
 8003324:	695b      	ldr	r3, [r3, #20]
 8003326:	4639      	mov	r1, r7
 8003328:	4798      	blx	r3
 800332a:	3401      	adds	r4, #1
 800332c:	e7e9      	b.n	8003302 <RDMSubDevices::SetData(unsigned char const*, unsigned long)+0xa>

0800332e <RDMSubDevices::GetFactoryDefaults()>:
 800332e:	b538      	push	{r3, r4, r5, lr}
 8003330:	4605      	mov	r5, r0
 8003332:	2400      	movs	r4, #0
 8003334:	88ab      	ldrh	r3, [r5, #4]
 8003336:	42a3      	cmp	r3, r4
 8003338:	d801      	bhi.n	800333e <RDMSubDevices::GetFactoryDefaults()+0x10>
 800333a:	2001      	movs	r0, #1
 800333c:	e009      	b.n	8003352 <RDMSubDevices::GetFactoryDefaults()+0x24>
 800333e:	682b      	ldr	r3, [r5, #0]
 8003340:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8003344:	b908      	cbnz	r0, 800334a <RDMSubDevices::GetFactoryDefaults()+0x1c>
 8003346:	3401      	adds	r4, #1
 8003348:	e7f4      	b.n	8003334 <RDMSubDevices::GetFactoryDefaults()+0x6>
 800334a:	f000 f86a 	bl	8003422 <RDMSubDevice::GetFactoryDefaults()>
 800334e:	2800      	cmp	r0, #0
 8003350:	d1f9      	bne.n	8003346 <RDMSubDevices::GetFactoryDefaults()+0x18>
 8003352:	bd38      	pop	{r3, r4, r5, pc}

08003354 <RDMSubDevices::SetFactoryDefaults()>:
 8003354:	b538      	push	{r3, r4, r5, lr}
 8003356:	4605      	mov	r5, r0
 8003358:	2400      	movs	r4, #0
 800335a:	88ab      	ldrh	r3, [r5, #4]
 800335c:	42a3      	cmp	r3, r4
 800335e:	d800      	bhi.n	8003362 <RDMSubDevices::SetFactoryDefaults()+0xe>
 8003360:	bd38      	pop	{r3, r4, r5, pc}
 8003362:	682b      	ldr	r3, [r5, #0]
 8003364:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8003368:	b108      	cbz	r0, 800336e <RDMSubDevices::SetFactoryDefaults()+0x1a>
 800336a:	f000 f834 	bl	80033d6 <RDMSubDevice::SetFactoryDefaults()>
 800336e:	3401      	adds	r4, #1
 8003370:	e7f3      	b.n	800335a <RDMSubDevices::SetFactoryDefaults()+0x6>

08003372 <RDMSubDevice::SetDmxStartAddress(unsigned short)>:
 8003372:	6803      	ldr	r3, [r0, #0]
 8003374:	8241      	strh	r1, [r0, #18]
 8003376:	699b      	ldr	r3, [r3, #24]
 8003378:	2100      	movs	r1, #0
 800337a:	4718      	bx	r3

0800337c <RDMSubDevice::GetPersonality(unsigned char)>:
 800337c:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 8003380:	6843      	ldr	r3, [r0, #4]
 8003382:	3901      	subs	r1, #1
 8003384:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
 8003388:	4770      	bx	lr

0800338a <RDMSubDevice::GetLabel(TRDMDeviceInfoData*)>:
 800338a:	f100 0316 	add.w	r3, r0, #22
 800338e:	600b      	str	r3, [r1, #0]
 8003390:	f890 3036 	ldrb.w	r3, [r0, #54]	; 0x36
 8003394:	710b      	strb	r3, [r1, #4]
 8003396:	4770      	bx	lr

08003398 <RDMSubDevice::SetLabel(char const*)>:
 8003398:	b510      	push	{r4, lr}
 800339a:	2300      	movs	r3, #0
 800339c:	f100 0415 	add.w	r4, r0, #21
 80033a0:	5cca      	ldrb	r2, [r1, r3]
 80033a2:	b122      	cbz	r2, 80033ae <RDMSubDevice::SetLabel(char const*)+0x16>
 80033a4:	3301      	adds	r3, #1
 80033a6:	2b20      	cmp	r3, #32
 80033a8:	f804 2f01 	strb.w	r2, [r4, #1]!
 80033ac:	d1f8      	bne.n	80033a0 <RDMSubDevice::SetLabel(char const*)+0x8>
 80033ae:	f880 3036 	strb.w	r3, [r0, #54]	; 0x36
 80033b2:	bd10      	pop	{r4, pc}

080033b4 <RDMSubDevice::SetLabel(char const*, unsigned char)>:
 80033b4:	b530      	push	{r4, r5, lr}
 80033b6:	2300      	movs	r3, #0
 80033b8:	f100 0415 	add.w	r4, r0, #21
 80033bc:	429a      	cmp	r2, r3
 80033be:	d905      	bls.n	80033cc <RDMSubDevice::SetLabel(char const*, unsigned char)+0x18>
 80033c0:	5ccd      	ldrb	r5, [r1, r3]
 80033c2:	f804 5f01 	strb.w	r5, [r4, #1]!
 80033c6:	3301      	adds	r3, #1
 80033c8:	2b20      	cmp	r3, #32
 80033ca:	d1f7      	bne.n	80033bc <RDMSubDevice::SetLabel(char const*, unsigned char)+0x8>
 80033cc:	f880 3036 	strb.w	r3, [r0, #54]	; 0x36
 80033d0:	bd30      	pop	{r4, r5, pc}

080033d2 <RDMSubDevice::SetPersonalityCurrent(unsigned char)>:
 80033d2:	7501      	strb	r1, [r0, #20]
 80033d4:	4770      	bx	lr

080033d6 <RDMSubDevice::SetFactoryDefaults()>:
 80033d6:	7a03      	ldrb	r3, [r0, #8]
 80033d8:	b510      	push	{r4, lr}
 80033da:	b94b      	cbnz	r3, 80033f0 <RDMSubDevice::SetFactoryDefaults()+0x1a>
 80033dc:	f100 0138 	add.w	r1, r0, #56	; 0x38
 80033e0:	f7ff ffda 	bl	8003398 <RDMSubDevice::SetLabel(char const*)>
 80033e4:	8983      	ldrh	r3, [r0, #12]
 80033e6:	8243      	strh	r3, [r0, #18]
 80033e8:	7b83      	ldrb	r3, [r0, #14]
 80033ea:	7503      	strb	r3, [r0, #20]
 80033ec:	2301      	movs	r3, #1
 80033ee:	7203      	strb	r3, [r0, #8]
 80033f0:	bd10      	pop	{r4, pc}

080033f2 <RDMSubDevice::CalculateChecksum()>:
 80033f2:	b510      	push	{r4, lr}
 80033f4:	8a43      	ldrh	r3, [r0, #18]
 80033f6:	7d02      	ldrb	r2, [r0, #20]
 80033f8:	f890 4036 	ldrb.w	r4, [r0, #54]	; 0x36
 80033fc:	4413      	add	r3, r2
 80033fe:	f100 0215 	add.w	r2, r0, #21
 8003402:	f1c0 20ff 	rsb	r0, r0, #4278255360	; 0xff00ff00
 8003406:	f500 007f 	add.w	r0, r0, #16711680	; 0xff0000
 800340a:	b29b      	uxth	r3, r3
 800340c:	30eb      	adds	r0, #235	; 0xeb
 800340e:	1881      	adds	r1, r0, r2
 8003410:	428c      	cmp	r4, r1
 8003412:	d801      	bhi.n	8003418 <RDMSubDevice::CalculateChecksum()+0x26>
 8003414:	4618      	mov	r0, r3
 8003416:	bd10      	pop	{r4, pc}
 8003418:	f812 1f01 	ldrb.w	r1, [r2, #1]!
 800341c:	440b      	add	r3, r1
 800341e:	b29b      	uxth	r3, r3
 8003420:	e7f5      	b.n	800340e <RDMSubDevice::CalculateChecksum()+0x1c>

08003422 <RDMSubDevice::GetFactoryDefaults()>:
 8003422:	7a03      	ldrb	r3, [r0, #8]
 8003424:	b510      	push	{r4, lr}
 8003426:	4604      	mov	r4, r0
 8003428:	b133      	cbz	r3, 8003438 <RDMSubDevice::GetFactoryDefaults()+0x16>
 800342a:	f7ff ffe2 	bl	80033f2 <RDMSubDevice::CalculateChecksum()>
 800342e:	8963      	ldrh	r3, [r4, #10]
 8003430:	4283      	cmp	r3, r0
 8003432:	bf1c      	itt	ne
 8003434:	2300      	movne	r3, #0
 8003436:	7223      	strbne	r3, [r4, #8]
 8003438:	7a20      	ldrb	r0, [r4, #8]
 800343a:	bd10      	pop	{r4, pc}

0800343c <Rdm::Receive(unsigned long)>:
 800343c:	4b02      	ldr	r3, [pc, #8]	; (8003448 <Rdm::Receive(unsigned long)+0xc>)
 800343e:	4601      	mov	r1, r0
 8003440:	6818      	ldr	r0, [r3, #0]
 8003442:	f000 bcab 	b.w	8003d9c <Dmx::RdmReceive(unsigned long)>
 8003446:	bf00      	nop
 8003448:	200015d8 	ldrdcs	r1, [r0], -r8

0800344c <Rdm::SendRaw(unsigned long, unsigned char const*, unsigned long)>:
 800344c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003450:	4d0d      	ldr	r5, [pc, #52]	; (8003488 <Rdm::SendRaw(unsigned long, unsigned char const*, unsigned long)+0x3c>)
 8003452:	2300      	movs	r3, #0
 8003454:	4604      	mov	r4, r0
 8003456:	460e      	mov	r6, r1
 8003458:	4617      	mov	r7, r2
 800345a:	4601      	mov	r1, r0
 800345c:	461a      	mov	r2, r3
 800345e:	6828      	ldr	r0, [r5, #0]
 8003460:	f000 fb40 	bl	8003ae4 <Dmx::SetPortDirection(unsigned long, dmx::PortDirection, bool)>
 8003464:	463b      	mov	r3, r7
 8003466:	4632      	mov	r2, r6
 8003468:	6828      	ldr	r0, [r5, #0]
 800346a:	4621      	mov	r1, r4
 800346c:	f000 fc4e 	bl	8003d0c <Dmx::RdmSendRaw(unsigned long, unsigned char const*, unsigned long)>
 8003470:	2100      	movs	r1, #0
 8003472:	2004      	movs	r0, #4
 8003474:	f006 fbe6 	bl	8009c44 <udelay(unsigned long, unsigned long)>
 8003478:	2301      	movs	r3, #1
 800347a:	6828      	ldr	r0, [r5, #0]
 800347c:	4621      	mov	r1, r4
 800347e:	461a      	mov	r2, r3
 8003480:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003484:	f000 bb2e 	b.w	8003ae4 <Dmx::SetPortDirection(unsigned long, dmx::PortDirection, bool)>
 8003488:	200015d8 	ldrdcs	r1, [r0], -r8

0800348c <USART2_IRQHandler>:
 800348c:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8003490:	f8d2 3800 	ldr.w	r3, [r2, #2048]	; 0x800
 8003494:	079b      	lsls	r3, r3, #30
 8003496:	d40f      	bmi.n	80034b8 <USART2_IRQHandler+0x2c>
 8003498:	4b73      	ldr	r3, [pc, #460]	; (8003668 <USART2_IRQHandler+0x1dc>)
 800349a:	f8d2 2804 	ldr.w	r2, [r2, #2052]	; 0x804
 800349e:	f8d3 120c 	ldr.w	r1, [r3, #524]	; 0x20c
 80034a2:	b410      	push	{r4}
 80034a4:	b2d2      	uxtb	r2, r2
 80034a6:	2908      	cmp	r1, #8
 80034a8:	d819      	bhi.n	80034de <USART2_IRQHandler+0x52>
 80034aa:	e8df f001 	tbb	[pc, r1]
 80034ae:	37182f20 	ldrcc	r2, [r8, -r0, lsr #30]
 80034b2:	68a64e18 	stmiavs	r6!, {r3, r4, r9, sl, fp, lr}
 80034b6:	f8d20089 			; <UNDEFINED> instruction: 0xf8d20089
 80034ba:	3800      	subs	r0, #0
 80034bc:	496a      	ldr	r1, [pc, #424]	; (8003668 <USART2_IRQHandler+0x1dc>)
 80034be:	f023 0302 	bic.w	r3, r3, #2
 80034c2:	f8c2 3800 	str.w	r3, [r2, #2048]	; 0x800
 80034c6:	f8d2 3804 	ldr.w	r3, [r2, #2052]	; 0x804
 80034ca:	f8d1 320c 	ldr.w	r3, [r1, #524]	; 0x20c
 80034ce:	b92b      	cbnz	r3, 80034dc <USART2_IRQHandler+0x50>
 80034d0:	2201      	movs	r2, #1
 80034d2:	f8c1 3204 	str.w	r3, [r1, #516]	; 0x204
 80034d6:	f8c1 220c 	str.w	r2, [r1, #524]	; 0x20c
 80034da:	4770      	bx	lr
 80034dc:	4770      	bx	lr
 80034de:	2200      	movs	r2, #0
 80034e0:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 80034e4:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
 80034e8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80034ec:	4770      	bx	lr
 80034ee:	2408      	movs	r4, #8
 80034f0:	2001      	movs	r0, #1
 80034f2:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80034f6:	f8c3 420c 	str.w	r4, [r3, #524]	; 0x20c
 80034fa:	701a      	strb	r2, [r3, #0]
 80034fc:	f8c3 0204 	str.w	r0, [r3, #516]	; 0x204
 8003500:	f8d1 3424 	ldr.w	r3, [r1, #1060]	; 0x424
 8003504:	4a59      	ldr	r2, [pc, #356]	; (800366c <USART2_IRQHandler+0x1e0>)
 8003506:	b29b      	uxth	r3, r3
 8003508:	8193      	strh	r3, [r2, #12]
 800350a:	e7ed      	b.n	80034e8 <USART2_IRQHandler+0x5c>
 800350c:	2a00      	cmp	r2, #0
 800350e:	f000 8099 	beq.w	8003644 <USART2_IRQHandler+0x1b8>
 8003512:	2acc      	cmp	r2, #204	; 0xcc
 8003514:	f000 808e 	beq.w	8003634 <USART2_IRQHandler+0x1a8>
 8003518:	2200      	movs	r2, #0
 800351a:	e7e3      	b.n	80034e4 <USART2_IRQHandler+0x58>
 800351c:	f8d3 0204 	ldr.w	r0, [r3, #516]	; 0x204
 8003520:	f8d3 1204 	ldr.w	r1, [r3, #516]	; 0x204
 8003524:	541a      	strb	r2, [r3, r0]
 8003526:	3101      	adds	r1, #1
 8003528:	f8c3 1204 	str.w	r1, [r3, #516]	; 0x204
 800352c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8003530:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 8003534:	d94e      	bls.n	80035d4 <USART2_IRQHandler+0x148>
 8003536:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800353a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800353e:	2100      	movs	r1, #0
 8003540:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8003544:	f8c3 120c 	str.w	r1, [r3, #524]	; 0x20c
 8003548:	e7ce      	b.n	80034e8 <USART2_IRQHandler+0x5c>
 800354a:	f8d3 0204 	ldr.w	r0, [r3, #516]	; 0x204
 800354e:	f8d3 1204 	ldr.w	r1, [r3, #516]	; 0x204
 8003552:	541a      	strb	r2, [r3, r0]
 8003554:	3101      	adds	r1, #1
 8003556:	f8c3 1204 	str.w	r1, [r3, #516]	; 0x204
 800355a:	f8b3 1208 	ldrh.w	r1, [r3, #520]	; 0x208
 800355e:	fa12 f281 	uxtah	r2, r2, r1
 8003562:	b292      	uxth	r2, r2
 8003564:	f8a3 2208 	strh.w	r2, [r3, #520]	; 0x208
 8003568:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800356c:	f1a2 0118 	sub.w	r1, r2, #24
 8003570:	29e9      	cmp	r1, #233	; 0xe9
 8003572:	d85a      	bhi.n	800362a <USART2_IRQHandler+0x19e>
 8003574:	7899      	ldrb	r1, [r3, #2]
 8003576:	428a      	cmp	r2, r1
 8003578:	d1b6      	bne.n	80034e8 <USART2_IRQHandler+0x5c>
 800357a:	2206      	movs	r2, #6
 800357c:	e7b2      	b.n	80034e4 <USART2_IRQHandler+0x58>
 800357e:	f8d3 0204 	ldr.w	r0, [r3, #516]	; 0x204
 8003582:	f8d3 1204 	ldr.w	r1, [r3, #516]	; 0x204
 8003586:	541a      	strb	r2, [r3, r0]
 8003588:	3101      	adds	r1, #1
 800358a:	f8c3 1204 	str.w	r1, [r3, #516]	; 0x204
 800358e:	f8b3 1208 	ldrh.w	r1, [r3, #520]	; 0x208
 8003592:	1a8a      	subs	r2, r1, r2
 8003594:	b292      	uxth	r2, r2
 8003596:	f8a3 2208 	strh.w	r2, [r3, #520]	; 0x208
 800359a:	f8b3 2208 	ldrh.w	r2, [r3, #520]	; 0x208
 800359e:	b292      	uxth	r2, r2
 80035a0:	2a00      	cmp	r2, #0
 80035a2:	d13e      	bne.n	8003622 <USART2_IRQHandler+0x196>
 80035a4:	785a      	ldrb	r2, [r3, #1]
 80035a6:	2a01      	cmp	r2, #1
 80035a8:	d13b      	bne.n	8003622 <USART2_IRQHandler+0x196>
 80035aa:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80035ae:	4930      	ldr	r1, [pc, #192]	; (8003670 <USART2_IRQHandler+0x1e4>)
 80035b0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80035b4:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 80035b8:	4a2e      	ldr	r2, [pc, #184]	; (8003674 <USART2_IRQHandler+0x1e8>)
 80035ba:	6849      	ldr	r1, [r1, #4]
 80035bc:	6011      	str	r1, [r2, #0]
 80035be:	e7ab      	b.n	8003518 <USART2_IRQHandler+0x8c>
 80035c0:	f8d3 1204 	ldr.w	r1, [r3, #516]	; 0x204
 80035c4:	2917      	cmp	r1, #23
 80035c6:	bf9f      	itttt	ls
 80035c8:	f8d3 0204 	ldrls.w	r0, [r3, #516]	; 0x204
 80035cc:	545a      	strbls	r2, [r3, r1]
 80035ce:	3001      	addls	r0, #1
 80035d0:	f8c3 0204 	strls.w	r0, [r3, #516]	; 0x204
 80035d4:	4825      	ldr	r0, [pc, #148]	; (800366c <USART2_IRQHandler+0x1e0>)
 80035d6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80035da:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80035de:	f8d1 2424 	ldr.w	r2, [r1, #1060]	; 0x424
 80035e2:	8983      	ldrh	r3, [r0, #12]
 80035e4:	b29b      	uxth	r3, r3
 80035e6:	b292      	uxth	r2, r2
 80035e8:	f1c3 0304 	rsb	r3, r3, #4
 80035ec:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 80035f0:	b29b      	uxth	r3, r3
 80035f2:	8182      	strh	r2, [r0, #12]
 80035f4:	f8c1 3434 	str.w	r3, [r1, #1076]	; 0x434
 80035f8:	4770      	bx	lr
 80035fa:	f8d3 4204 	ldr.w	r4, [r3, #516]	; 0x204
 80035fe:	f8d3 1204 	ldr.w	r1, [r3, #516]	; 0x204
 8003602:	551a      	strb	r2, [r3, r4]
 8003604:	3101      	adds	r1, #1
 8003606:	f8c3 1204 	str.w	r1, [r3, #516]	; 0x204
 800360a:	f8b3 1208 	ldrh.w	r1, [r3, #520]	; 0x208
 800360e:	b289      	uxth	r1, r1
 8003610:	eba1 2202 	sub.w	r2, r1, r2, lsl #8
 8003614:	2007      	movs	r0, #7
 8003616:	b292      	uxth	r2, r2
 8003618:	f8a3 2208 	strh.w	r2, [r3, #520]	; 0x208
 800361c:	f8c3 020c 	str.w	r0, [r3, #524]	; 0x20c
 8003620:	e762      	b.n	80034e8 <USART2_IRQHandler+0x5c>
 8003622:	2200      	movs	r2, #0
 8003624:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8003628:	e776      	b.n	8003518 <USART2_IRQHandler+0x8c>
 800362a:	f5b2 7f81 	cmp.w	r2, #258	; 0x102
 800362e:	f4bf af73 	bcs.w	8003518 <USART2_IRQHandler+0x8c>
 8003632:	e759      	b.n	80034e8 <USART2_IRQHandler+0x5c>
 8003634:	2001      	movs	r0, #1
 8003636:	f8a3 2208 	strh.w	r2, [r3, #520]	; 0x208
 800363a:	2105      	movs	r1, #5
 800363c:	701a      	strb	r2, [r3, #0]
 800363e:	f8c3 0204 	str.w	r0, [r3, #516]	; 0x204
 8003642:	e77f      	b.n	8003544 <USART2_IRQHandler+0xb8>
 8003644:	4909      	ldr	r1, [pc, #36]	; (800366c <USART2_IRQHandler+0x1e0>)
 8003646:	701a      	strb	r2, [r3, #0]
 8003648:	2001      	movs	r0, #1
 800364a:	f8c3 0204 	str.w	r0, [r3, #516]	; 0x204
 800364e:	6848      	ldr	r0, [r1, #4]
 8003650:	2403      	movs	r4, #3
 8003652:	3001      	adds	r0, #1
 8003654:	6048      	str	r0, [r1, #4]
 8003656:	f8c3 420c 	str.w	r4, [r3, #524]	; 0x20c
 800365a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800365e:	f8d3 3424 	ldr.w	r3, [r3, #1060]	; 0x424
 8003662:	b29b      	uxth	r3, r3
 8003664:	818b      	strh	r3, [r1, #12]
 8003666:	e73f      	b.n	80034e8 <USART2_IRQHandler+0x5c>
 8003668:	200011a8 	andcs	r1, r0, r8, lsr #3
 800366c:	200015c8 	andcs	r1, r0, r8, asr #11
 8003670:	e0001000 	and	r1, r0, r0
 8003674:	200015dc 	ldrdcs	r1, [r0], -ip

08003678 <TIMER1_IRQHandler>:
 8003678:	b538      	push	{r3, r4, r5, lr}
 800367a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800367e:	691b      	ldr	r3, [r3, #16]
 8003680:	071b      	lsls	r3, r3, #28
 8003682:	d400      	bmi.n	8003686 <TIMER1_IRQHandler+0xe>
 8003684:	bd38      	pop	{r3, r4, r5, pc}
 8003686:	4c28      	ldr	r4, [pc, #160]	; (8003728 <TIMER1_IRQHandler+0xb0>)
 8003688:	f8d4 3208 	ldr.w	r3, [r4, #520]	; 0x208
 800368c:	3b01      	subs	r3, #1
 800368e:	2b03      	cmp	r3, #3
 8003690:	d81a      	bhi.n	80036c8 <TIMER1_IRQHandler+0x50>
 8003692:	e8df f003 	tbb	[pc, r3]
 8003696:	02202436 	eoreq	r2, r0, #905969664	; 0x36000000
 800369a:	4d24      	ldr	r5, [pc, #144]	; (800372c <TIMER1_IRQHandler+0xb4>)
 800369c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80036a0:	2203      	movs	r2, #3
 80036a2:	2110      	movs	r1, #16
 80036a4:	4628      	mov	r0, r5
 80036a6:	f005 fb45 	bl	8008d34 <gpio_init>
 80036aa:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80036ae:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80036b2:	4b1f      	ldr	r3, [pc, #124]	; (8003730 <TIMER1_IRQHandler+0xb8>)
 80036b4:	616a      	str	r2, [r5, #20]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	6a42      	ldr	r2, [r0, #36]	; 0x24
 80036ba:	2102      	movs	r1, #2
 80036bc:	441a      	add	r2, r3
 80036be:	f005 fe2a 	bl	8009316 <timer_channel_output_pulse_value_config>
 80036c2:	2301      	movs	r3, #1
 80036c4:	f8c4 3208 	str.w	r3, [r4, #520]	; 0x208
 80036c8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80036cc:	2108      	movs	r1, #8
 80036ce:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80036d2:	f005 bdf4 	b.w	80092be <timer_interrupt_flag_clear>
 80036d6:	4817      	ldr	r0, [pc, #92]	; (8003734 <TIMER1_IRQHandler+0xbc>)
 80036d8:	f004 fc40 	bl	8007f5c <console_error>
 80036dc:	e7f4      	b.n	80036c8 <TIMER1_IRQHandler+0x50>
 80036de:	4b16      	ldr	r3, [pc, #88]	; (8003738 <TIMER1_IRQHandler+0xc0>)
 80036e0:	f8b4 1202 	ldrh.w	r1, [r4, #514]	; 0x202
 80036e4:	69da      	ldr	r2, [r3, #28]
 80036e6:	4815      	ldr	r0, [pc, #84]	; (800373c <TIMER1_IRQHandler+0xc4>)
 80036e8:	f022 0201 	bic.w	r2, r2, #1
 80036ec:	f042 0503 	orr.w	r5, r2, #3
 80036f0:	61da      	str	r2, [r3, #28]
 80036f2:	629c      	str	r4, [r3, #40]	; 0x28
 80036f4:	6219      	str	r1, [r3, #32]
 80036f6:	61dd      	str	r5, [r3, #28]
 80036f8:	2180      	movs	r1, #128	; 0x80
 80036fa:	f005 feb3 	bl	8009464 <usart_dma_transmit_config>
 80036fe:	2303      	movs	r3, #3
 8003700:	e7e0      	b.n	80036c4 <TIMER1_IRQHandler+0x4c>
 8003702:	480a      	ldr	r0, [pc, #40]	; (800372c <TIMER1_IRQHandler+0xb4>)
 8003704:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003708:	2203      	movs	r2, #3
 800370a:	2118      	movs	r1, #24
 800370c:	f005 fb12 	bl	8008d34 <gpio_init>
 8003710:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8003714:	4b0a      	ldr	r3, [pc, #40]	; (8003740 <TIMER1_IRQHandler+0xc8>)
 8003716:	6a42      	ldr	r2, [r0, #36]	; 0x24
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	2102      	movs	r1, #2
 800371c:	441a      	add	r2, r3
 800371e:	f005 fdfa 	bl	8009316 <timer_channel_output_pulse_value_config>
 8003722:	2302      	movs	r3, #2
 8003724:	e7ce      	b.n	80036c4 <TIMER1_IRQHandler+0x4c>
 8003726:	bf00      	nop
 8003728:	200013b8 			; <UNDEFINED> instruction: 0x200013b8
 800372c:	40011000 	andmi	r1, r1, r0
 8003730:	20001004 	andcs	r1, r0, r4
 8003734:	0800a4bc 	stmdaeq	r0, {r2, r3, r4, r5, r7, sl, sp, pc}
 8003738:	40020000 	andmi	r0, r2, r0
 800373c:	40004800 	andmi	r4, r0, r0, lsl #16
 8003740:	20001000 	andcs	r1, r0, r0

08003744 <TIMER4_IRQHandler>:
 8003744:	4770      	bx	lr
 8003746:	bf00      	nop

08003748 <TIMER2_IRQHandler>:
 8003748:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800374c:	f8d3 1410 	ldr.w	r1, [r3, #1040]	; 0x410
 8003750:	078b      	lsls	r3, r1, #30
 8003752:	d508      	bpl.n	8003766 <TIMER2_IRQHandler+0x1e>
 8003754:	4b0f      	ldr	r3, [pc, #60]	; (8003794 <TIMER2_IRQHandler+0x4c>)
 8003756:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800375a:	2a03      	cmp	r2, #3
 800375c:	d006      	beq.n	800376c <TIMER2_IRQHandler+0x24>
 800375e:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8003762:	2a08      	cmp	r2, #8
 8003764:	d00e      	beq.n	8003784 <TIMER2_IRQHandler+0x3c>
 8003766:	480c      	ldr	r0, [pc, #48]	; (8003798 <TIMER2_IRQHandler+0x50>)
 8003768:	f005 bda9 	b.w	80092be <timer_interrupt_flag_clear>
 800376c:	2200      	movs	r2, #0
 800376e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
 8003772:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8003776:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800377a:	4807      	ldr	r0, [pc, #28]	; (8003798 <TIMER2_IRQHandler+0x50>)
 800377c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8003780:	f005 bd9d 	b.w	80092be <timer_interrupt_flag_clear>
 8003784:	2200      	movs	r2, #0
 8003786:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
 800378a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800378e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003792:	e7f2      	b.n	800377a <TIMER2_IRQHandler+0x32>
 8003794:	200011a8 	andcs	r1, r0, r8, lsr #3
 8003798:	40000400 	andmi	r0, r0, r0, lsl #8

0800379c <TIMER3_IRQHandler>:
 800379c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80037a0:	4802      	ldr	r0, [pc, #8]	; (80037ac <TIMER3_IRQHandler+0x10>)
 80037a2:	f8d3 1810 	ldr.w	r1, [r3, #2064]	; 0x810
 80037a6:	f005 bd8a 	b.w	80092be <timer_interrupt_flag_clear>
 80037aa:	bf00      	nop
 80037ac:	40000800 	andmi	r0, r0, r0, lsl #16

080037b0 <TIMER6_IRQHandler>:
 80037b0:	4b06      	ldr	r3, [pc, #24]	; (80037cc <TIMER6_IRQHandler+0x1c>)
 80037b2:	4807      	ldr	r0, [pc, #28]	; (80037d0 <TIMER6_IRQHandler+0x20>)
 80037b4:	685a      	ldr	r2, [r3, #4]
 80037b6:	b410      	push	{r4}
 80037b8:	689c      	ldr	r4, [r3, #8]
 80037ba:	1b12      	subs	r2, r2, r4
 80037bc:	601a      	str	r2, [r3, #0]
 80037be:	685a      	ldr	r2, [r3, #4]
 80037c0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80037c4:	609a      	str	r2, [r3, #8]
 80037c6:	2101      	movs	r1, #1
 80037c8:	f005 bd79 	b.w	80092be <timer_interrupt_flag_clear>
 80037cc:	200015c8 	andcs	r1, r0, r8, asr #11
 80037d0:	40001400 	andmi	r1, r0, r0, lsl #8

080037d4 <DMA0_Channel1_IRQHandler>:
 80037d4:	b510      	push	{r4, lr}
 80037d6:	4814      	ldr	r0, [pc, #80]	; (8003828 <DMA0_Channel1_IRQHandler+0x54>)
 80037d8:	2202      	movs	r2, #2
 80037da:	2101      	movs	r1, #1
 80037dc:	f005 f9de 	bl	8008b9c <dma_interrupt_flag_get>
 80037e0:	2801      	cmp	r0, #1
 80037e2:	d006      	beq.n	80037f2 <DMA0_Channel1_IRQHandler+0x1e>
 80037e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80037e8:	480f      	ldr	r0, [pc, #60]	; (8003828 <DMA0_Channel1_IRQHandler+0x54>)
 80037ea:	2203      	movs	r2, #3
 80037ec:	2101      	movs	r1, #1
 80037ee:	f005 ba04 	b.w	8008bfa <dma_interrupt_flag_clear>
 80037f2:	4601      	mov	r1, r0
 80037f4:	220e      	movs	r2, #14
 80037f6:	480c      	ldr	r0, [pc, #48]	; (8003828 <DMA0_Channel1_IRQHandler+0x54>)
 80037f8:	4c0c      	ldr	r4, [pc, #48]	; (800382c <DMA0_Channel1_IRQHandler+0x58>)
 80037fa:	f005 fa01 	bl	8008c00 <dma_interrupt_disable>
 80037fe:	480c      	ldr	r0, [pc, #48]	; (8003830 <DMA0_Channel1_IRQHandler+0x5c>)
 8003800:	2106      	movs	r1, #6
 8003802:	f005 fe3d 	bl	8009480 <usart_flag_clear>
 8003806:	f8d4 3204 	ldr.w	r3, [r4, #516]	; 0x204
 800380a:	b913      	cbnz	r3, 8003812 <DMA0_Channel1_IRQHandler+0x3e>
 800380c:	f8c4 3208 	str.w	r3, [r4, #520]	; 0x208
 8003810:	e7e8      	b.n	80037e4 <DMA0_Channel1_IRQHandler+0x10>
 8003812:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8003816:	4b07      	ldr	r3, [pc, #28]	; (8003834 <DMA0_Channel1_IRQHandler+0x60>)
 8003818:	6a42      	ldr	r2, [r0, #36]	; 0x24
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	2102      	movs	r1, #2
 800381e:	441a      	add	r2, r3
 8003820:	f005 fd79 	bl	8009316 <timer_channel_output_pulse_value_config>
 8003824:	2304      	movs	r3, #4
 8003826:	e7f1      	b.n	800380c <DMA0_Channel1_IRQHandler+0x38>
 8003828:	40020000 	andmi	r0, r2, r0
 800382c:	200013b8 			; <UNDEFINED> instruction: 0x200013b8
 8003830:	40004800 	andmi	r4, r0, r0, lsl #16
 8003834:	20001008 	andcs	r1, r0, r8

08003838 <Dmx::Dmx()>:
 8003838:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800383c:	499c      	ldr	r1, [pc, #624]	; (8003ab0 <Dmx::Dmx()+0x278>)
 800383e:	4605      	mov	r5, r0
 8003840:	f44f 7400 	mov.w	r4, #512	; 0x200
 8003844:	f246 13a8 	movw	r3, #25000	; 0x61a8
 8003848:	220c      	movs	r2, #12
 800384a:	265c      	movs	r6, #92	; 0x5c
 800384c:	e9c0 6200 	strd	r6, r2, [r0]
 8003850:	e9c0 3302 	strd	r3, r3, [r0, #8]
 8003854:	8284      	strh	r4, [r0, #20]
 8003856:	6008      	str	r0, [r1, #0]
 8003858:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800385c:	4895      	ldr	r0, [pc, #596]	; (8003ab4 <Dmx::Dmx()+0x27c>)
 800385e:	b08a      	sub	sp, #40	; 0x28
 8003860:	2203      	movs	r2, #3
 8003862:	2110      	movs	r1, #16
 8003864:	f005 fa66 	bl	8008d34 <gpio_init>
 8003868:	69ab      	ldr	r3, [r5, #24]
 800386a:	612c      	str	r4, [r5, #16]
 800386c:	2b01      	cmp	r3, #1
 800386e:	4c92      	ldr	r4, [pc, #584]	; (8003ab8 <Dmx::Dmx()+0x280>)
 8003870:	f000 8106 	beq.w	8003a80 <Dmx::Dmx()+0x248>
 8003874:	6823      	ldr	r3, [r4, #0]
 8003876:	2201      	movs	r2, #1
 8003878:	61aa      	str	r2, [r5, #24]
 800387a:	2b00      	cmp	r3, #0
 800387c:	f000 80fe 	beq.w	8003a7c <Dmx::Dmx()+0x244>
 8003880:	488e      	ldr	r0, [pc, #568]	; (8003abc <Dmx::Dmx()+0x284>)
 8003882:	f240 3105 	movw	r1, #773	; 0x305
 8003886:	f005 fe10 	bl	80094aa <usart_interrupt_disable>
 800388a:	498d      	ldr	r1, [pc, #564]	; (8003ac0 <Dmx::Dmx()+0x288>)
 800388c:	2200      	movs	r2, #0
 800388e:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8003892:	f8c1 220c 	str.w	r2, [r1, #524]	; 0x20c
 8003896:	f8d0 340c 	ldr.w	r3, [r0, #1036]	; 0x40c
 800389a:	f023 0302 	bic.w	r3, r3, #2
 800389e:	f8c0 340c 	str.w	r3, [r0, #1036]	; 0x40c
 80038a2:	6022      	str	r2, [r4, #0]
 80038a4:	4b87      	ldr	r3, [pc, #540]	; (8003ac4 <Dmx::Dmx()+0x28c>)
 80038a6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80038aa:	f8c3 2c14 	str.w	r2, [r3, #3092]	; 0xc14
 80038ae:	4b86      	ldr	r3, [pc, #536]	; (8003ac8 <Dmx::Dmx()+0x290>)
 80038b0:	4e86      	ldr	r6, [pc, #536]	; (8003acc <Dmx::Dmx()+0x294>)
 80038b2:	2400      	movs	r4, #0
 80038b4:	f8c1 420c 	str.w	r4, [r1, #524]	; 0x20c
 80038b8:	f8c3 4204 	str.w	r4, [r3, #516]	; 0x204
 80038bc:	4621      	mov	r1, r4
 80038be:	f8c3 4208 	str.w	r4, [r3, #520]	; 0x208
 80038c2:	f240 2202 	movw	r2, #514	; 0x202
 80038c6:	4618      	mov	r0, r3
 80038c8:	f004 fecb 	bl	8008662 <memset>
 80038cc:	4603      	mov	r3, r0
 80038ce:	f240 2201 	movw	r2, #513	; 0x201
 80038d2:	f8a3 2202 	strh.w	r2, [r3, #514]	; 0x202
 80038d6:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 80038da:	f04f 0801 	mov.w	r8, #1
 80038de:	f005 fab7 	bl	8008e50 <rcu_periph_clock_enable>
 80038e2:	f240 5001 	movw	r0, #1281	; 0x501
 80038e6:	f005 fab3 	bl	8008e50 <rcu_periph_clock_enable>
 80038ea:	4641      	mov	r1, r8
 80038ec:	4878      	ldr	r0, [pc, #480]	; (8003ad0 <Dmx::Dmx()+0x298>)
 80038ee:	f005 f8cd 	bl	8008a8c <dma_deinit>
 80038f2:	4b78      	ldr	r3, [pc, #480]	; (8003ad4 <Dmx::Dmx()+0x29c>)
 80038f4:	9303      	str	r3, [sp, #12]
 80038f6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80038fa:	aa03      	add	r2, sp, #12
 80038fc:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
 8003900:	4641      	mov	r1, r8
 8003902:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003906:	4872      	ldr	r0, [pc, #456]	; (8003ad0 <Dmx::Dmx()+0x298>)
 8003908:	9308      	str	r3, [sp, #32]
 800390a:	f88d 8026 	strb.w	r8, [sp, #38]	; 0x26
 800390e:	9406      	str	r4, [sp, #24]
 8003910:	9404      	str	r4, [sp, #16]
 8003912:	f005 f8e3 	bl	8008adc <dma_init>
 8003916:	4641      	mov	r1, r8
 8003918:	486d      	ldr	r0, [pc, #436]	; (8003ad0 <Dmx::Dmx()+0x298>)
 800391a:	f005 f919 	bl	8008b50 <dma_circulation_disable>
 800391e:	4641      	mov	r1, r8
 8003920:	486b      	ldr	r0, [pc, #428]	; (8003ad0 <Dmx::Dmx()+0x298>)
 8003922:	f005 f925 	bl	8008b70 <dma_memory_to_memory_disable>
 8003926:	220e      	movs	r2, #14
 8003928:	4641      	mov	r1, r8
 800392a:	4869      	ldr	r0, [pc, #420]	; (8003ad0 <Dmx::Dmx()+0x298>)
 800392c:	f005 f968 	bl	8008c00 <dma_interrupt_disable>
 8003930:	f04f 0910 	mov.w	r9, #16
 8003934:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003938:	f886 930c 	strb.w	r9, [r6, #780]	; 0x30c
 800393c:	f44f 60e0 	mov.w	r0, #1792	; 0x700
 8003940:	6033      	str	r3, [r6, #0]
 8003942:	f005 fa85 	bl	8008e50 <rcu_periph_clock_enable>
 8003946:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800394a:	f005 fc0f 	bl	800916c <timer_deinit>
 800394e:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8003952:	f04f 0a77 	mov.w	sl, #119	; 0x77
 8003956:	a903      	add	r1, sp, #12
 8003958:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800395c:	9404      	str	r4, [sp, #16]
 800395e:	f88d 4018 	strb.w	r4, [sp, #24]
 8003962:	9705      	str	r7, [sp, #20]
 8003964:	f8cd a00c 	str.w	sl, [sp, #12]
 8003968:	f005 fc62 	bl	8009230 <timer_init>
 800396c:	4639      	mov	r1, r7
 800396e:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8003972:	f005 fca7 	bl	80092c4 <timer_flag_clear>
 8003976:	4639      	mov	r1, r7
 8003978:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800397c:	f005 fc9f 	bl	80092be <timer_interrupt_flag_clear>
 8003980:	464a      	mov	r2, r9
 8003982:	2102      	movs	r1, #2
 8003984:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8003988:	f005 fc9f 	bl	80092ca <timer_channel_output_mode_config>
 800398c:	463a      	mov	r2, r7
 800398e:	2102      	movs	r1, #2
 8003990:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8003994:	f005 fcbf 	bl	8009316 <timer_channel_output_pulse_value_config>
 8003998:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800399c:	f886 431c 	strb.w	r4, [r6, #796]	; 0x31c
 80039a0:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80039a4:	6033      	str	r3, [r6, #0]
 80039a6:	f005 fc81 	bl	80092ac <timer_enable>
 80039aa:	f240 7001 	movw	r0, #1793	; 0x701
 80039ae:	f005 fa4f 	bl	8008e50 <rcu_periph_clock_enable>
 80039b2:	4849      	ldr	r0, [pc, #292]	; (8003ad8 <Dmx::Dmx()+0x2a0>)
 80039b4:	f005 fbda 	bl	800916c <timer_deinit>
 80039b8:	a903      	add	r1, sp, #12
 80039ba:	4847      	ldr	r0, [pc, #284]	; (8003ad8 <Dmx::Dmx()+0x2a0>)
 80039bc:	f8cd a00c 	str.w	sl, [sp, #12]
 80039c0:	e9cd 4704 	strd	r4, r7, [sp, #16]
 80039c4:	f88d 4018 	strb.w	r4, [sp, #24]
 80039c8:	f005 fc32 	bl	8009230 <timer_init>
 80039cc:	4639      	mov	r1, r7
 80039ce:	4842      	ldr	r0, [pc, #264]	; (8003ad8 <Dmx::Dmx()+0x2a0>)
 80039d0:	f005 fc78 	bl	80092c4 <timer_flag_clear>
 80039d4:	4639      	mov	r1, r7
 80039d6:	4840      	ldr	r0, [pc, #256]	; (8003ad8 <Dmx::Dmx()+0x2a0>)
 80039d8:	f005 fc71 	bl	80092be <timer_interrupt_flag_clear>
 80039dc:	464a      	mov	r2, r9
 80039de:	4621      	mov	r1, r4
 80039e0:	483d      	ldr	r0, [pc, #244]	; (8003ad8 <Dmx::Dmx()+0x2a0>)
 80039e2:	f005 fc72 	bl	80092ca <timer_channel_output_mode_config>
 80039e6:	464a      	mov	r2, r9
 80039e8:	4641      	mov	r1, r8
 80039ea:	483b      	ldr	r0, [pc, #236]	; (8003ad8 <Dmx::Dmx()+0x2a0>)
 80039ec:	f005 fc6d 	bl	80092ca <timer_channel_output_mode_config>
 80039f0:	464a      	mov	r2, r9
 80039f2:	4839      	ldr	r0, [pc, #228]	; (8003ad8 <Dmx::Dmx()+0x2a0>)
 80039f4:	2102      	movs	r1, #2
 80039f6:	f005 fc68 	bl	80092ca <timer_channel_output_mode_config>
 80039fa:	464a      	mov	r2, r9
 80039fc:	2103      	movs	r1, #3
 80039fe:	4836      	ldr	r0, [pc, #216]	; (8003ad8 <Dmx::Dmx()+0x2a0>)
 8003a00:	f005 fc63 	bl	80092ca <timer_channel_output_mode_config>
 8003a04:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8003a08:	f886 931d 	strb.w	r9, [r6, #797]	; 0x31d
 8003a0c:	4832      	ldr	r0, [pc, #200]	; (8003ad8 <Dmx::Dmx()+0x2a0>)
 8003a0e:	6033      	str	r3, [r6, #0]
 8003a10:	f005 fc4c 	bl	80092ac <timer_enable>
 8003a14:	f240 7005 	movw	r0, #1797	; 0x705
 8003a18:	f005 fa1a 	bl	8008e50 <rcu_periph_clock_enable>
 8003a1c:	482f      	ldr	r0, [pc, #188]	; (8003adc <Dmx::Dmx()+0x2a4>)
 8003a1e:	f005 fba5 	bl	800916c <timer_deinit>
 8003a22:	f642 63df 	movw	r3, #11999	; 0x2edf
 8003a26:	a903      	add	r1, sp, #12
 8003a28:	f8ad 300c 	strh.w	r3, [sp, #12]
 8003a2c:	482b      	ldr	r0, [pc, #172]	; (8003adc <Dmx::Dmx()+0x2a4>)
 8003a2e:	f242 7310 	movw	r3, #10000	; 0x2710
 8003a32:	9305      	str	r3, [sp, #20]
 8003a34:	f005 fbfc 	bl	8009230 <timer_init>
 8003a38:	4639      	mov	r1, r7
 8003a3a:	4828      	ldr	r0, [pc, #160]	; (8003adc <Dmx::Dmx()+0x2a4>)
 8003a3c:	f005 fc42 	bl	80092c4 <timer_flag_clear>
 8003a40:	4639      	mov	r1, r7
 8003a42:	4826      	ldr	r0, [pc, #152]	; (8003adc <Dmx::Dmx()+0x2a4>)
 8003a44:	f005 fc3b 	bl	80092be <timer_interrupt_flag_clear>
 8003a48:	4641      	mov	r1, r8
 8003a4a:	4824      	ldr	r0, [pc, #144]	; (8003adc <Dmx::Dmx()+0x2a4>)
 8003a4c:	f005 fc33 	bl	80092b6 <timer_interrupt_enable>
 8003a50:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8003a54:	f886 4337 	strb.w	r4, [r6, #823]	; 0x337
 8003a58:	4820      	ldr	r0, [pc, #128]	; (8003adc <Dmx::Dmx()+0x2a4>)
 8003a5a:	6073      	str	r3, [r6, #4]
 8003a5c:	f005 fc26 	bl	80092ac <timer_enable>
 8003a60:	2302      	movs	r3, #2
 8003a62:	9300      	str	r3, [sp, #0]
 8003a64:	491e      	ldr	r1, [pc, #120]	; (8003ae0 <Dmx::Dmx()+0x2a8>)
 8003a66:	4815      	ldr	r0, [pc, #84]	; (8003abc <Dmx::Dmx()+0x284>)
 8003a68:	4623      	mov	r3, r4
 8003a6a:	2208      	movs	r2, #8
 8003a6c:	f005 ffec 	bl	8009a48 <gd32_uart_begin>
 8003a70:	2380      	movs	r3, #128	; 0x80
 8003a72:	4628      	mov	r0, r5
 8003a74:	6073      	str	r3, [r6, #4]
 8003a76:	b00a      	add	sp, #40	; 0x28
 8003a78:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003a7c:	4910      	ldr	r1, [pc, #64]	; (8003ac0 <Dmx::Dmx()+0x288>)
 8003a7e:	e711      	b.n	80038a4 <Dmx::Dmx()+0x6c>
 8003a80:	6823      	ldr	r3, [r4, #0]
 8003a82:	b193      	cbz	r3, 8003aaa <Dmx::Dmx()+0x272>
 8003a84:	480d      	ldr	r0, [pc, #52]	; (8003abc <Dmx::Dmx()+0x284>)
 8003a86:	f240 3105 	movw	r1, #773	; 0x305
 8003a8a:	f005 fd0e 	bl	80094aa <usart_interrupt_disable>
 8003a8e:	490c      	ldr	r1, [pc, #48]	; (8003ac0 <Dmx::Dmx()+0x288>)
 8003a90:	2200      	movs	r2, #0
 8003a92:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8003a96:	f8c1 220c 	str.w	r2, [r1, #524]	; 0x20c
 8003a9a:	f8d0 340c 	ldr.w	r3, [r0, #1036]	; 0x40c
 8003a9e:	f023 0302 	bic.w	r3, r3, #2
 8003aa2:	f8c0 340c 	str.w	r3, [r0, #1036]	; 0x40c
 8003aa6:	6022      	str	r2, [r4, #0]
 8003aa8:	e701      	b.n	80038ae <Dmx::Dmx()+0x76>
 8003aaa:	4905      	ldr	r1, [pc, #20]	; (8003ac0 <Dmx::Dmx()+0x288>)
 8003aac:	e6ff      	b.n	80038ae <Dmx::Dmx()+0x76>
 8003aae:	bf00      	nop
 8003ab0:	200015d8 	ldrdcs	r1, [r0], -r8
 8003ab4:	40010c00 	andmi	r0, r1, r0, lsl #24
 8003ab8:	200015c4 	andcs	r1, r0, r4, asr #11
 8003abc:	40004800 	andmi	r4, r0, r0, lsl #16
 8003ac0:	200011a8 	andcs	r1, r0, r8, lsr #3
 8003ac4:	40010000 	andmi	r0, r1, r0
 8003ac8:	200013b8 			; <UNDEFINED> instruction: 0x200013b8
 8003acc:	e000e100 	and	lr, r0, r0, lsl #2
 8003ad0:	40020000 	andmi	r0, r2, r0
 8003ad4:	40004804 	andmi	r4, r0, r4, lsl #16
 8003ad8:	40000400 	andmi	r0, r0, r0, lsl #8
 8003adc:	40001400 	andmi	r1, r0, r0, lsl #8
 8003ae0:	0003d090 	muleq	r3, r0, r0

08003ae4 <Dmx::SetPortDirection(unsigned long, dmx::PortDirection, bool)>:
 8003ae4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003ae8:	f8d0 9018 	ldr.w	r9, [r0, #24]
 8003aec:	4591      	cmp	r9, r2
 8003aee:	4614      	mov	r4, r2
 8003af0:	461f      	mov	r7, r3
 8003af2:	d04e      	beq.n	8003b92 <Dmx::SetPortDirection(unsigned long, dmx::PortDirection, bool)+0xae>
 8003af4:	f8df 81d0 	ldr.w	r8, [pc, #464]	; 8003cc8 <Dmx::SetPortDirection(unsigned long, dmx::PortDirection, bool)+0x1e4>
 8003af8:	6182      	str	r2, [r0, #24]
 8003afa:	f8d8 3000 	ldr.w	r3, [r8]
 8003afe:	4606      	mov	r6, r0
 8003b00:	b18b      	cbz	r3, 8003b26 <Dmx::SetPortDirection(unsigned long, dmx::PortDirection, bool)+0x42>
 8003b02:	2a00      	cmp	r2, #0
 8003b04:	d15f      	bne.n	8003bc6 <Dmx::SetPortDirection(unsigned long, dmx::PortDirection, bool)+0xe2>
 8003b06:	4d69      	ldr	r5, [pc, #420]	; (8003cac <Dmx::SetPortDirection(unsigned long, dmx::PortDirection, bool)+0x1c8>)
 8003b08:	f8df 91ac 	ldr.w	r9, [pc, #428]	; 8003cb8 <Dmx::SetPortDirection(unsigned long, dmx::PortDirection, bool)+0x1d4>
 8003b0c:	4692      	mov	sl, r2
 8003b0e:	f8d5 3208 	ldr.w	r3, [r5, #520]	; 0x208
 8003b12:	2b04      	cmp	r3, #4
 8003b14:	f000 809f 	beq.w	8003c56 <Dmx::SetPortDirection(unsigned long, dmx::PortDirection, bool)+0x172>
 8003b18:	f8d5 3208 	ldr.w	r3, [r5, #520]	; 0x208
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d1f6      	bne.n	8003b0e <Dmx::SetPortDirection(unsigned long, dmx::PortDirection, bool)+0x2a>
 8003b20:	2300      	movs	r3, #0
 8003b22:	f8c8 3000 	str.w	r3, [r8]
 8003b26:	b93c      	cbnz	r4, 8003b38 <Dmx::SetPortDirection(unsigned long, dmx::PortDirection, bool)+0x54>
 8003b28:	4b61      	ldr	r3, [pc, #388]	; (8003cb0 <Dmx::SetPortDirection(unsigned long, dmx::PortDirection, bool)+0x1cc>)
 8003b2a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003b2e:	f8c3 2c10 	str.w	r2, [r3, #3088]	; 0xc10
 8003b32:	b957      	cbnz	r7, 8003b4a <Dmx::SetPortDirection(unsigned long, dmx::PortDirection, bool)+0x66>
 8003b34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003b38:	2c01      	cmp	r4, #1
 8003b3a:	d1fa      	bne.n	8003b32 <Dmx::SetPortDirection(unsigned long, dmx::PortDirection, bool)+0x4e>
 8003b3c:	4b5c      	ldr	r3, [pc, #368]	; (8003cb0 <Dmx::SetPortDirection(unsigned long, dmx::PortDirection, bool)+0x1cc>)
 8003b3e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003b42:	f8c3 2c14 	str.w	r2, [r3, #3092]	; 0xc14
 8003b46:	2f00      	cmp	r7, #0
 8003b48:	d0f4      	beq.n	8003b34 <Dmx::SetPortDirection(unsigned long, dmx::PortDirection, bool)+0x50>
 8003b4a:	69b4      	ldr	r4, [r6, #24]
 8003b4c:	2c00      	cmp	r4, #0
 8003b4e:	d04f      	beq.n	8003bf0 <Dmx::SetPortDirection(unsigned long, dmx::PortDirection, bool)+0x10c>
 8003b50:	4b58      	ldr	r3, [pc, #352]	; (8003cb4 <Dmx::SetPortDirection(unsigned long, dmx::PortDirection, bool)+0x1d0>)
 8003b52:	4c59      	ldr	r4, [pc, #356]	; (8003cb8 <Dmx::SetPortDirection(unsigned long, dmx::PortDirection, bool)+0x1d4>)
 8003b54:	2200      	movs	r2, #0
 8003b56:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
 8003b5a:	2107      	movs	r1, #7
 8003b5c:	4620      	mov	r0, r4
 8003b5e:	f005 fc87 	bl	8009470 <usart_flag_get>
 8003b62:	2800      	cmp	r0, #0
 8003b64:	d0f9      	beq.n	8003b5a <Dmx::SetPortDirection(unsigned long, dmx::PortDirection, bool)+0x76>
 8003b66:	4955      	ldr	r1, [pc, #340]	; (8003cbc <Dmx::SetPortDirection(unsigned long, dmx::PortDirection, bool)+0x1d8>)
 8003b68:	4853      	ldr	r0, [pc, #332]	; (8003cb8 <Dmx::SetPortDirection(unsigned long, dmx::PortDirection, bool)+0x1d4>)
 8003b6a:	f005 fca0 	bl	80094ae <usart_interrupt_flag_clear>
 8003b6e:	4852      	ldr	r0, [pc, #328]	; (8003cb8 <Dmx::SetPortDirection(unsigned long, dmx::PortDirection, bool)+0x1d4>)
 8003b70:	f240 3105 	movw	r1, #773	; 0x305
 8003b74:	f005 fc8f 	bl	8009496 <usart_interrupt_enable>
 8003b78:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003b7c:	2302      	movs	r3, #2
 8003b7e:	f8c8 3000 	str.w	r3, [r8]
 8003b82:	f8d2 340c 	ldr.w	r3, [r2, #1036]	; 0x40c
 8003b86:	f043 0302 	orr.w	r3, r3, #2
 8003b8a:	f8c2 340c 	str.w	r3, [r2, #1036]	; 0x40c
 8003b8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003b92:	f8df 8134 	ldr.w	r8, [pc, #308]	; 8003cc8 <Dmx::SetPortDirection(unsigned long, dmx::PortDirection, bool)+0x1e4>
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d1d8      	bne.n	8003b4c <Dmx::SetPortDirection(unsigned long, dmx::PortDirection, bool)+0x68>
 8003b9a:	f8d8 3000 	ldr.w	r3, [r8]
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d0c8      	beq.n	8003b34 <Dmx::SetPortDirection(unsigned long, dmx::PortDirection, bool)+0x50>
 8003ba2:	f1b9 0f00 	cmp.w	r9, #0
 8003ba6:	d163      	bne.n	8003c70 <Dmx::SetPortDirection(unsigned long, dmx::PortDirection, bool)+0x18c>
 8003ba8:	4d40      	ldr	r5, [pc, #256]	; (8003cac <Dmx::SetPortDirection(unsigned long, dmx::PortDirection, bool)+0x1c8>)
 8003baa:	4c43      	ldr	r4, [pc, #268]	; (8003cb8 <Dmx::SetPortDirection(unsigned long, dmx::PortDirection, bool)+0x1d4>)
 8003bac:	f8d5 3208 	ldr.w	r3, [r5, #520]	; 0x208
 8003bb0:	2b04      	cmp	r3, #4
 8003bb2:	d06e      	beq.n	8003c92 <Dmx::SetPortDirection(unsigned long, dmx::PortDirection, bool)+0x1ae>
 8003bb4:	f8d5 3208 	ldr.w	r3, [r5, #520]	; 0x208
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d1f7      	bne.n	8003bac <Dmx::SetPortDirection(unsigned long, dmx::PortDirection, bool)+0xc8>
 8003bbc:	2300      	movs	r3, #0
 8003bbe:	f8c8 3000 	str.w	r3, [r8]
 8003bc2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003bc6:	f240 3105 	movw	r1, #773	; 0x305
 8003bca:	483b      	ldr	r0, [pc, #236]	; (8003cb8 <Dmx::SetPortDirection(unsigned long, dmx::PortDirection, bool)+0x1d4>)
 8003bcc:	f005 fc6d 	bl	80094aa <usart_interrupt_disable>
 8003bd0:	4b38      	ldr	r3, [pc, #224]	; (8003cb4 <Dmx::SetPortDirection(unsigned long, dmx::PortDirection, bool)+0x1d0>)
 8003bd2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003bd6:	2100      	movs	r1, #0
 8003bd8:	f8c3 120c 	str.w	r1, [r3, #524]	; 0x20c
 8003bdc:	f8d2 340c 	ldr.w	r3, [r2, #1036]	; 0x40c
 8003be0:	f023 0302 	bic.w	r3, r3, #2
 8003be4:	f8c2 340c 	str.w	r3, [r2, #1036]	; 0x40c
 8003be8:	2300      	movs	r3, #0
 8003bea:	f8c8 3000 	str.w	r3, [r8]
 8003bee:	e79a      	b.n	8003b26 <Dmx::SetPortDirection(unsigned long, dmx::PortDirection, bool)+0x42>
 8003bf0:	4d2e      	ldr	r5, [pc, #184]	; (8003cac <Dmx::SetPortDirection(unsigned long, dmx::PortDirection, bool)+0x1c8>)
 8003bf2:	f8d5 3204 	ldr.w	r3, [r5, #516]	; 0x204
 8003bf6:	2201      	movs	r2, #1
 8003bf8:	4293      	cmp	r3, r2
 8003bfa:	f8c8 2000 	str.w	r2, [r8]
 8003bfe:	d199      	bne.n	8003b34 <Dmx::SetPortDirection(unsigned long, dmx::PortDirection, bool)+0x50>
 8003c00:	4b2f      	ldr	r3, [pc, #188]	; (8003cc0 <Dmx::SetPortDirection(unsigned long, dmx::PortDirection, bool)+0x1dc>)
 8003c02:	4e2d      	ldr	r6, [pc, #180]	; (8003cb8 <Dmx::SetPortDirection(unsigned long, dmx::PortDirection, bool)+0x1d4>)
 8003c04:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003c08:	611a      	str	r2, [r3, #16]
 8003c0a:	2106      	movs	r1, #6
 8003c0c:	4630      	mov	r0, r6
 8003c0e:	f005 fc2f 	bl	8009470 <usart_flag_get>
 8003c12:	2801      	cmp	r0, #1
 8003c14:	4604      	mov	r4, r0
 8003c16:	d1f8      	bne.n	8003c0a <Dmx::SetPortDirection(unsigned long, dmx::PortDirection, bool)+0x126>
 8003c18:	4e29      	ldr	r6, [pc, #164]	; (8003cc0 <Dmx::SetPortDirection(unsigned long, dmx::PortDirection, bool)+0x1dc>)
 8003c1a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003c1e:	2203      	movs	r2, #3
 8003c20:	2110      	movs	r1, #16
 8003c22:	4630      	mov	r0, r6
 8003c24:	f005 f886 	bl	8008d34 <gpio_init>
 8003c28:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003c2c:	6173      	str	r3, [r6, #20]
 8003c2e:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8003c32:	4b24      	ldr	r3, [pc, #144]	; (8003cc4 <Dmx::SetPortDirection(unsigned long, dmx::PortDirection, bool)+0x1e0>)
 8003c34:	6a42      	ldr	r2, [r0, #36]	; 0x24
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	2102      	movs	r1, #2
 8003c3a:	441a      	add	r2, r3
 8003c3c:	f005 fb6b 	bl	8009316 <timer_channel_output_pulse_value_config>
 8003c40:	2108      	movs	r1, #8
 8003c42:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8003c46:	f005 fb36 	bl	80092b6 <timer_interrupt_enable>
 8003c4a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003c4e:	f8c5 4208 	str.w	r4, [r5, #520]	; 0x208
 8003c52:	6173      	str	r3, [r6, #20]
 8003c54:	e76e      	b.n	8003b34 <Dmx::SetPortDirection(unsigned long, dmx::PortDirection, bool)+0x50>
 8003c56:	2106      	movs	r1, #6
 8003c58:	4648      	mov	r0, r9
 8003c5a:	f005 fc11 	bl	8009480 <usart_flag_clear>
 8003c5e:	2106      	movs	r1, #6
 8003c60:	4648      	mov	r0, r9
 8003c62:	f005 fc05 	bl	8009470 <usart_flag_get>
 8003c66:	2801      	cmp	r0, #1
 8003c68:	d1f9      	bne.n	8003c5e <Dmx::SetPortDirection(unsigned long, dmx::PortDirection, bool)+0x17a>
 8003c6a:	f8c5 a208 	str.w	sl, [r5, #520]	; 0x208
 8003c6e:	e753      	b.n	8003b18 <Dmx::SetPortDirection(unsigned long, dmx::PortDirection, bool)+0x34>
 8003c70:	4811      	ldr	r0, [pc, #68]	; (8003cb8 <Dmx::SetPortDirection(unsigned long, dmx::PortDirection, bool)+0x1d4>)
 8003c72:	f240 3105 	movw	r1, #773	; 0x305
 8003c76:	f005 fc18 	bl	80094aa <usart_interrupt_disable>
 8003c7a:	4b0e      	ldr	r3, [pc, #56]	; (8003cb4 <Dmx::SetPortDirection(unsigned long, dmx::PortDirection, bool)+0x1d0>)
 8003c7c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003c80:	f8c3 720c 	str.w	r7, [r3, #524]	; 0x20c
 8003c84:	f8d2 340c 	ldr.w	r3, [r2, #1036]	; 0x40c
 8003c88:	f023 0302 	bic.w	r3, r3, #2
 8003c8c:	f8c2 340c 	str.w	r3, [r2, #1036]	; 0x40c
 8003c90:	e794      	b.n	8003bbc <Dmx::SetPortDirection(unsigned long, dmx::PortDirection, bool)+0xd8>
 8003c92:	2106      	movs	r1, #6
 8003c94:	4620      	mov	r0, r4
 8003c96:	f005 fbf3 	bl	8009480 <usart_flag_clear>
 8003c9a:	2106      	movs	r1, #6
 8003c9c:	4620      	mov	r0, r4
 8003c9e:	f005 fbe7 	bl	8009470 <usart_flag_get>
 8003ca2:	2801      	cmp	r0, #1
 8003ca4:	d1f9      	bne.n	8003c9a <Dmx::SetPortDirection(unsigned long, dmx::PortDirection, bool)+0x1b6>
 8003ca6:	f8c5 9208 	str.w	r9, [r5, #520]	; 0x208
 8003caa:	e783      	b.n	8003bb4 <Dmx::SetPortDirection(unsigned long, dmx::PortDirection, bool)+0xd0>
 8003cac:	200013b8 			; <UNDEFINED> instruction: 0x200013b8
 8003cb0:	40010000 	andmi	r0, r1, r0
 8003cb4:	200011a8 	andcs	r1, r0, r8, lsr #3
 8003cb8:	40004800 	andmi	r4, r0, r0, lsl #16
 8003cbc:	00050305 	andeq	r0, r5, r5, lsl #6
 8003cc0:	40011000 	andmi	r1, r1, r0
 8003cc4:	20001004 	andcs	r1, r0, r4
 8003cc8:	200015c4 	andcs	r1, r0, r4, asr #11

08003ccc <Dmx::GetDmxAvailable(unsigned long)>:
 8003ccc:	4b0b      	ldr	r3, [pc, #44]	; (8003cfc <Dmx::GetDmxAvailable(unsigned long)+0x30>)
 8003cce:	eb01 1141 	add.w	r1, r1, r1, lsl #5
 8003cd2:	eb03 1101 	add.w	r1, r3, r1, lsl #4
 8003cd6:	f8d1 0204 	ldr.w	r0, [r1, #516]	; 0x204
 8003cda:	f410 4000 	ands.w	r0, r0, #32768	; 0x8000
 8003cde:	d00b      	beq.n	8003cf8 <Dmx::GetDmxAvailable(unsigned long)+0x2c>
 8003ce0:	f8d1 3204 	ldr.w	r3, [r1, #516]	; 0x204
 8003ce4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003ce8:	f8c1 3204 	str.w	r3, [r1, #516]	; 0x204
 8003cec:	f8d1 3204 	ldr.w	r3, [r1, #516]	; 0x204
 8003cf0:	3b01      	subs	r3, #1
 8003cf2:	4608      	mov	r0, r1
 8003cf4:	f8c1 3204 	str.w	r3, [r1, #516]	; 0x204
 8003cf8:	4770      	bx	lr
 8003cfa:	bf00      	nop
 8003cfc:	200011a8 	andcs	r1, r0, r8, lsr #3

08003d00 <Dmx::GetDmxUpdatesPerSecond(unsigned long)>:
 8003d00:	4b01      	ldr	r3, [pc, #4]	; (8003d08 <Dmx::GetDmxUpdatesPerSecond(unsigned long)+0x8>)
 8003d02:	0109      	lsls	r1, r1, #4
 8003d04:	5858      	ldr	r0, [r3, r1]
 8003d06:	4770      	bx	lr
 8003d08:	200015c8 	andcs	r1, r0, r8, asr #11

08003d0c <Dmx::RdmSendRaw(unsigned long, unsigned char const*, unsigned long)>:
 8003d0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d0e:	4e21      	ldr	r6, [pc, #132]	; (8003d94 <Dmx::RdmSendRaw(unsigned long, unsigned char const*, unsigned long)+0x88>)
 8003d10:	4615      	mov	r5, r2
 8003d12:	461c      	mov	r4, r3
 8003d14:	2106      	movs	r1, #6
 8003d16:	4630      	mov	r0, r6
 8003d18:	f005 fbaa 	bl	8009470 <usart_flag_get>
 8003d1c:	2801      	cmp	r0, #1
 8003d1e:	d1f9      	bne.n	8003d14 <Dmx::RdmSendRaw(unsigned long, unsigned char const*, unsigned long)+0x8>
 8003d20:	4e1d      	ldr	r6, [pc, #116]	; (8003d98 <Dmx::RdmSendRaw(unsigned long, unsigned char const*, unsigned long)+0x8c>)
 8003d22:	2203      	movs	r2, #3
 8003d24:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003d28:	2110      	movs	r1, #16
 8003d2a:	4630      	mov	r0, r6
 8003d2c:	f44f 6780 	mov.w	r7, #1024	; 0x400
 8003d30:	f005 f800 	bl	8008d34 <gpio_init>
 8003d34:	2100      	movs	r1, #0
 8003d36:	20b0      	movs	r0, #176	; 0xb0
 8003d38:	6177      	str	r7, [r6, #20]
 8003d3a:	f005 ff83 	bl	8009c44 <udelay(unsigned long, unsigned long)>
 8003d3e:	4630      	mov	r0, r6
 8003d40:	2118      	movs	r1, #24
 8003d42:	463b      	mov	r3, r7
 8003d44:	2203      	movs	r2, #3
 8003d46:	f004 fff5 	bl	8008d34 <gpio_init>
 8003d4a:	2100      	movs	r1, #0
 8003d4c:	200c      	movs	r0, #12
 8003d4e:	f005 ff79 	bl	8009c44 <udelay(unsigned long, unsigned long)>
 8003d52:	b18c      	cbz	r4, 8003d78 <Dmx::RdmSendRaw(unsigned long, unsigned char const*, unsigned long)+0x6c>
 8003d54:	192e      	adds	r6, r5, r4
 8003d56:	4c0f      	ldr	r4, [pc, #60]	; (8003d94 <Dmx::RdmSendRaw(unsigned long, unsigned char const*, unsigned long)+0x88>)
 8003d58:	3d01      	subs	r5, #1
 8003d5a:	3e01      	subs	r6, #1
 8003d5c:	f04f 2740 	mov.w	r7, #1073758208	; 0x40004000
 8003d60:	2107      	movs	r1, #7
 8003d62:	4620      	mov	r0, r4
 8003d64:	f005 fb84 	bl	8009470 <usart_flag_get>
 8003d68:	2800      	cmp	r0, #0
 8003d6a:	d0f9      	beq.n	8003d60 <Dmx::RdmSendRaw(unsigned long, unsigned char const*, unsigned long)+0x54>
 8003d6c:	f815 3f01 	ldrb.w	r3, [r5, #1]!
 8003d70:	f8c7 3804 	str.w	r3, [r7, #2052]	; 0x804
 8003d74:	42b5      	cmp	r5, r6
 8003d76:	d1f3      	bne.n	8003d60 <Dmx::RdmSendRaw(unsigned long, unsigned char const*, unsigned long)+0x54>
 8003d78:	4c06      	ldr	r4, [pc, #24]	; (8003d94 <Dmx::RdmSendRaw(unsigned long, unsigned char const*, unsigned long)+0x88>)
 8003d7a:	f04f 2540 	mov.w	r5, #1073758208	; 0x40004000
 8003d7e:	e001      	b.n	8003d84 <Dmx::RdmSendRaw(unsigned long, unsigned char const*, unsigned long)+0x78>
 8003d80:	f8d5 3804 	ldr.w	r3, [r5, #2052]	; 0x804
 8003d84:	2106      	movs	r1, #6
 8003d86:	4620      	mov	r0, r4
 8003d88:	f005 fb72 	bl	8009470 <usart_flag_get>
 8003d8c:	2801      	cmp	r0, #1
 8003d8e:	d1f7      	bne.n	8003d80 <Dmx::RdmSendRaw(unsigned long, unsigned char const*, unsigned long)+0x74>
 8003d90:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003d92:	bf00      	nop
 8003d94:	40004800 	andmi	r4, r0, r0, lsl #16
 8003d98:	40011000 	andmi	r1, r1, r0

08003d9c <Dmx::RdmReceive(unsigned long)>:
 8003d9c:	4807      	ldr	r0, [pc, #28]	; (8003dbc <Dmx::RdmReceive(unsigned long)+0x20>)
 8003d9e:	eb01 1141 	add.w	r1, r1, r1, lsl #5
 8003da2:	eb00 1001 	add.w	r0, r0, r1, lsl #4
 8003da6:	f8d0 3204 	ldr.w	r3, [r0, #516]	; 0x204
 8003daa:	f413 4380 	ands.w	r3, r3, #16384	; 0x4000
 8003dae:	bf1a      	itte	ne
 8003db0:	2300      	movne	r3, #0
 8003db2:	f8c0 3204 	strne.w	r3, [r0, #516]	; 0x204
 8003db6:	4618      	moveq	r0, r3
 8003db8:	4770      	bx	lr
 8003dba:	bf00      	nop
 8003dbc:	200011a8 	andcs	r1, r0, r8, lsr #3

08003dc0 <Rdm::SendRawRespondMessage(unsigned long, unsigned char const*, unsigned long)>:
 8003dc0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003dc2:	4b08      	ldr	r3, [pc, #32]	; (8003de4 <Rdm::SendRawRespondMessage(unsigned long, unsigned char const*, unsigned long)+0x24>)
 8003dc4:	9201      	str	r2, [sp, #4]
 8003dc6:	4604      	mov	r4, r0
 8003dc8:	460d      	mov	r5, r1
 8003dca:	20c8      	movs	r0, #200	; 0xc8
 8003dcc:	6819      	ldr	r1, [r3, #0]
 8003dce:	f005 ff39 	bl	8009c44 <udelay(unsigned long, unsigned long)>
 8003dd2:	9a01      	ldr	r2, [sp, #4]
 8003dd4:	4629      	mov	r1, r5
 8003dd6:	4620      	mov	r0, r4
 8003dd8:	b003      	add	sp, #12
 8003dda:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003dde:	f7ff bb35 	b.w	800344c <Rdm::SendRaw(unsigned long, unsigned char const*, unsigned long)>
 8003de2:	bf00      	nop
 8003de4:	200015dc 	ldrdcs	r1, [r0], -ip

08003de8 <Rdm::SendDiscoveryRespondMessage(unsigned long, unsigned char const*, unsigned long)>:
 8003de8:	4b1d      	ldr	r3, [pc, #116]	; (8003e60 <Rdm::SendDiscoveryRespondMessage(unsigned long, unsigned char const*, unsigned long)+0x78>)
 8003dea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003dee:	4606      	mov	r6, r0
 8003df0:	460c      	mov	r4, r1
 8003df2:	20c8      	movs	r0, #200	; 0xc8
 8003df4:	6819      	ldr	r1, [r3, #0]
 8003df6:	4f1b      	ldr	r7, [pc, #108]	; (8003e64 <Rdm::SendDiscoveryRespondMessage(unsigned long, unsigned char const*, unsigned long)+0x7c>)
 8003df8:	4615      	mov	r5, r2
 8003dfa:	f005 ff23 	bl	8009c44 <udelay(unsigned long, unsigned long)>
 8003dfe:	2300      	movs	r3, #0
 8003e00:	4631      	mov	r1, r6
 8003e02:	6838      	ldr	r0, [r7, #0]
 8003e04:	4e18      	ldr	r6, [pc, #96]	; (8003e68 <Rdm::SendDiscoveryRespondMessage(unsigned long, unsigned char const*, unsigned long)+0x80>)
 8003e06:	461a      	mov	r2, r3
 8003e08:	f7ff fe6c 	bl	8003ae4 <Dmx::SetPortDirection(unsigned long, dmx::PortDirection, bool)>
 8003e0c:	4425      	add	r5, r4
 8003e0e:	f04f 2840 	mov.w	r8, #1073758208	; 0x40004000
 8003e12:	42ac      	cmp	r4, r5
 8003e14:	d115      	bne.n	8003e42 <Rdm::SendDiscoveryRespondMessage(unsigned long, unsigned char const*, unsigned long)+0x5a>
 8003e16:	4d14      	ldr	r5, [pc, #80]	; (8003e68 <Rdm::SendDiscoveryRespondMessage(unsigned long, unsigned char const*, unsigned long)+0x80>)
 8003e18:	f04f 2640 	mov.w	r6, #1073758208	; 0x40004000
 8003e1c:	2106      	movs	r1, #6
 8003e1e:	4628      	mov	r0, r5
 8003e20:	f005 fb26 	bl	8009470 <usart_flag_get>
 8003e24:	2801      	cmp	r0, #1
 8003e26:	4604      	mov	r4, r0
 8003e28:	d116      	bne.n	8003e58 <Rdm::SendDiscoveryRespondMessage(unsigned long, unsigned char const*, unsigned long)+0x70>
 8003e2a:	2100      	movs	r1, #0
 8003e2c:	2004      	movs	r0, #4
 8003e2e:	f005 ff09 	bl	8009c44 <udelay(unsigned long, unsigned long)>
 8003e32:	6838      	ldr	r0, [r7, #0]
 8003e34:	4623      	mov	r3, r4
 8003e36:	4622      	mov	r2, r4
 8003e38:	2100      	movs	r1, #0
 8003e3a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003e3e:	f7ff be51 	b.w	8003ae4 <Dmx::SetPortDirection(unsigned long, dmx::PortDirection, bool)>
 8003e42:	2107      	movs	r1, #7
 8003e44:	4630      	mov	r0, r6
 8003e46:	f005 fb13 	bl	8009470 <usart_flag_get>
 8003e4a:	2800      	cmp	r0, #0
 8003e4c:	d0f9      	beq.n	8003e42 <Rdm::SendDiscoveryRespondMessage(unsigned long, unsigned char const*, unsigned long)+0x5a>
 8003e4e:	f814 3b01 	ldrb.w	r3, [r4], #1
 8003e52:	f8c8 3804 	str.w	r3, [r8, #2052]	; 0x804
 8003e56:	e7dc      	b.n	8003e12 <Rdm::SendDiscoveryRespondMessage(unsigned long, unsigned char const*, unsigned long)+0x2a>
 8003e58:	f8d6 3804 	ldr.w	r3, [r6, #2052]	; 0x804
 8003e5c:	e7de      	b.n	8003e1c <Rdm::SendDiscoveryRespondMessage(unsigned long, unsigned char const*, unsigned long)+0x34>
 8003e5e:	bf00      	nop
 8003e60:	200015dc 	ldrdcs	r1, [r0], -ip
 8003e64:	200015d8 	ldrdcs	r1, [r0], -r8
 8003e68:	40004800 	andmi	r4, r0, r0, lsl #16

08003e6c <RDMDeviceParams::RDMDeviceParams(RDMDeviceParamsStore*)>:
 8003e6c:	b510      	push	{r4, lr}
 8003e6e:	2225      	movs	r2, #37	; 0x25
 8003e70:	4604      	mov	r4, r0
 8003e72:	f840 1b04 	str.w	r1, [r0], #4
 8003e76:	2100      	movs	r1, #0
 8003e78:	f004 fbf3 	bl	8008662 <memset>
 8003e7c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003e80:	237f      	movs	r3, #127	; 0x7f
 8003e82:	f884 2029 	strb.w	r2, [r4, #41]	; 0x29
 8003e86:	f884 302a 	strb.w	r3, [r4, #42]	; 0x2a
 8003e8a:	f884 202b 	strb.w	r2, [r4, #43]	; 0x2b
 8003e8e:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
 8003e92:	4620      	mov	r0, r4
 8003e94:	bd10      	pop	{r4, pc}

08003e96 <RDMDeviceParams::Load()>:
 8003e96:	4601      	mov	r1, r0
 8003e98:	6800      	ldr	r0, [r0, #0]
 8003e9a:	b130      	cbz	r0, 8003eaa <RDMDeviceParams::Load()+0x14>
 8003e9c:	b508      	push	{r3, lr}
 8003e9e:	6803      	ldr	r3, [r0, #0]
 8003ea0:	3104      	adds	r1, #4
 8003ea2:	68db      	ldr	r3, [r3, #12]
 8003ea4:	4798      	blx	r3
 8003ea6:	2001      	movs	r0, #1
 8003ea8:	bd08      	pop	{r3, pc}
 8003eaa:	4770      	bx	lr

08003eac <RDMDeviceParams::Set(RDMDevice*)>:
 8003eac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003eae:	6843      	ldr	r3, [r0, #4]
 8003eb0:	460c      	mov	r4, r1
 8003eb2:	07d9      	lsls	r1, r3, #31
 8003eb4:	4605      	mov	r5, r0
 8003eb6:	d519      	bpl.n	8003eec <RDMDeviceParams::Set(RDMDevice*)+0x40>
 8003eb8:	f890 6028 	ldrb.w	r6, [r0, #40]	; 0x28
 8003ebc:	f894 3056 	ldrb.w	r3, [r4, #86]	; 0x56
 8003ec0:	2e20      	cmp	r6, #32
 8003ec2:	f100 0108 	add.w	r1, r0, #8
 8003ec6:	bf28      	it	cs
 8003ec8:	2620      	movcs	r6, #32
 8003eca:	b1eb      	cbz	r3, 8003f08 <RDMDeviceParams::Set(RDMDevice*)+0x5c>
 8003ecc:	f104 0320 	add.w	r3, r4, #32
 8003ed0:	4618      	mov	r0, r3
 8003ed2:	4632      	mov	r2, r6
 8003ed4:	f004 fbae 	bl	8008634 <memmove>
 8003ed8:	4603      	mov	r3, r0
 8003eda:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8003edc:	f884 6054 	strb.w	r6, [r4, #84]	; 0x54
 8003ee0:	b120      	cbz	r0, 8003eec <RDMDeviceParams::Set(RDMDevice*)+0x40>
 8003ee2:	6802      	ldr	r2, [r0, #0]
 8003ee4:	4619      	mov	r1, r3
 8003ee6:	6897      	ldr	r7, [r2, #8]
 8003ee8:	4632      	mov	r2, r6
 8003eea:	47b8      	blx	r7
 8003eec:	686b      	ldr	r3, [r5, #4]
 8003eee:	079a      	lsls	r2, r3, #30
 8003ef0:	bf44      	itt	mi
 8003ef2:	f8b5 2029 	ldrhmi.w	r2, [r5, #41]	; 0x29
 8003ef6:	f8a4 2044 	strhmi.w	r2, [r4, #68]	; 0x44
 8003efa:	075b      	lsls	r3, r3, #29
 8003efc:	bf44      	itt	mi
 8003efe:	f8b5 302b 	ldrhmi.w	r3, [r5, #43]	; 0x2b
 8003f02:	f8a4 3046 	strhmi.w	r3, [r4, #70]	; 0x46
 8003f06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003f08:	4632      	mov	r2, r6
 8003f0a:	4620      	mov	r0, r4
 8003f0c:	f004 fb92 	bl	8008634 <memmove>
 8003f10:	f884 6055 	strb.w	r6, [r4, #85]	; 0x55
 8003f14:	e7ea      	b.n	8003eec <RDMDeviceParams::Set(RDMDevice*)+0x40>

08003f16 <RDMDeviceParams::Dump()>:
 8003f16:	4770      	bx	lr

08003f18 <RDMDeviceResponder::PersonalityUpdate(LightSet*)>:
 8003f18:	4770      	bx	lr

08003f1a <RDMDeviceResponder::DmxStartAddressUpdate()>:
 8003f1a:	4770      	bx	lr

08003f1c <RDMDeviceResponder::~RDMDeviceResponder()>:
 8003f1c:	b510      	push	{r4, lr}
 8003f1e:	4b06      	ldr	r3, [pc, #24]	; (8003f38 <RDMDeviceResponder::~RDMDeviceResponder()+0x1c>)
 8003f20:	4604      	mov	r4, r0
 8003f22:	f840 3b64 	str.w	r3, [r0], #100
 8003f26:	f7ff f955 	bl	80031d4 <RDMSubDevices::~RDMSubDevices()>
 8003f2a:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8003f2e:	f7fe f90b 	bl	8002148 <RDMSensors::~RDMSensors()>
 8003f32:	4620      	mov	r0, r4
 8003f34:	bd10      	pop	{r4, pc}
 8003f36:	bf00      	nop
 8003f38:	0800a588 	stmdaeq	r0, {r3, r7, r8, sl, sp, pc}

08003f3c <RDMDeviceResponder::~RDMDeviceResponder()>:
 8003f3c:	b510      	push	{r4, lr}
 8003f3e:	4604      	mov	r4, r0
 8003f40:	f7ff ffec 	bl	8003f1c <RDMDeviceResponder::~RDMDeviceResponder()>
 8003f44:	4620      	mov	r0, r4
 8003f46:	f004 fab6 	bl	80084b6 <operator delete(void*)>
 8003f4a:	4620      	mov	r0, r4
 8003f4c:	bd10      	pop	{r4, pc}
	...

08003f50 <RDMDeviceResponder::RDMDeviceResponder(RDMPersonality**, unsigned long)>:
 8003f50:	b570      	push	{r4, r5, r6, lr}
 8003f52:	4604      	mov	r4, r0
 8003f54:	3004      	adds	r0, #4
 8003f56:	460e      	mov	r6, r1
 8003f58:	4615      	mov	r5, r2
 8003f5a:	f001 fa01 	bl	8005360 <RDMDevice::RDMDevice()>
 8003f5e:	4620      	mov	r0, r4
 8003f60:	4b1f      	ldr	r3, [pc, #124]	; (8003fe0 <RDMDeviceResponder::RDMDeviceResponder(RDMPersonality**, unsigned long)+0x90>)
 8003f62:	f840 3b5b 	str.w	r3, [r0], #91
 8003f66:	f001 f9b5 	bl	80052d4 <RDMIdentify::RDMIdentify()>
 8003f6a:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8003f6e:	f7fe f949 	bl	8002204 <RDMSensors::RDMSensors()>
 8003f72:	f104 0064 	add.w	r0, r4, #100	; 0x64
 8003f76:	f7ff f925 	bl	80031c4 <RDMSubDevices::RDMSubDevices()>
 8003f7a:	4b1a      	ldr	r3, [pc, #104]	; (8003fe4 <RDMDeviceResponder::RDMDeviceResponder(RDMPersonality**, unsigned long)+0x94>)
 8003f7c:	66e6      	str	r6, [r4, #108]	; 0x6c
 8003f7e:	601c      	str	r4, [r3, #0]
 8003f80:	2365      	movs	r3, #101	; 0x65
 8003f82:	f884 309b 	strb.w	r3, [r4, #155]	; 0x9b
 8003f86:	f44f 73b7 	mov.w	r3, #366	; 0x16e
 8003f8a:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
 8003f8e:	2301      	movs	r3, #1
 8003f90:	f8a4 30a0 	strh.w	r3, [r4, #160]	; 0xa0
 8003f94:	f104 0288 	add.w	r2, r4, #136	; 0x88
 8003f98:	f104 0375 	add.w	r3, r4, #117	; 0x75
 8003f9c:	2100      	movs	r1, #0
 8003f9e:	4293      	cmp	r3, r2
 8003fa0:	d117      	bne.n	8003fd2 <RDMDeviceResponder::RDMDeviceResponder(RDMPersonality**, unsigned long)+0x82>
 8003fa2:	f104 029b 	add.w	r2, r4, #155	; 0x9b
 8003fa6:	2100      	movs	r1, #0
 8003fa8:	4293      	cmp	r3, r2
 8003faa:	d115      	bne.n	8003fd8 <RDMDeviceResponder::RDMDeviceResponder(RDMPersonality**, unsigned long)+0x88>
 8003fac:	f884 5082 	strb.w	r5, [r4, #130]	; 0x82
 8003fb0:	f7fd fb5c 	bl	800166c <RDMSoftwareVersion::GetVersion()>
 8003fb4:	6720      	str	r0, [r4, #112]	; 0x70
 8003fb6:	f7fd fb5d 	bl	8001674 <RDMSoftwareVersion::GetVersionLength()>
 8003fba:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8003fbc:	f884 0074 	strb.w	r0, [r4, #116]	; 0x74
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	685b      	ldr	r3, [r3, #4]
 8003fc4:	b91b      	cbnz	r3, 8003fce <RDMDeviceResponder::RDMDeviceResponder(RDMPersonality**, unsigned long)+0x7e>
 8003fc6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003fca:	f8a4 30a0 	strh.w	r3, [r4, #160]	; 0xa0
 8003fce:	4620      	mov	r0, r4
 8003fd0:	bd70      	pop	{r4, r5, r6, pc}
 8003fd2:	f803 1b01 	strb.w	r1, [r3], #1
 8003fd6:	e7e2      	b.n	8003f9e <RDMDeviceResponder::RDMDeviceResponder(RDMPersonality**, unsigned long)+0x4e>
 8003fd8:	f803 1b01 	strb.w	r1, [r3], #1
 8003fdc:	e7e4      	b.n	8003fa8 <RDMDeviceResponder::RDMDeviceResponder(RDMPersonality**, unsigned long)+0x58>
 8003fde:	bf00      	nop
 8003fe0:	0800a588 	stmdaeq	r0, {r3, r7, r8, sl, sp, pc}
 8003fe4:	200015e0 	andcs	r1, r0, r0, ror #11

08003fe8 <RDMDeviceResponder::Init()>:
 8003fe8:	b570      	push	{r4, r5, r6, lr}
 8003fea:	4604      	mov	r4, r0
 8003fec:	2301      	movs	r3, #1
 8003fee:	f894 2059 	ldrb.w	r2, [r4, #89]	; 0x59
 8003ff2:	f884 305a 	strb.w	r3, [r4, #90]	; 0x5a
 8003ff6:	2a20      	cmp	r2, #32
 8003ff8:	bf28      	it	cs
 8003ffa:	2220      	movcs	r2, #32
 8003ffc:	3004      	adds	r0, #4
 8003ffe:	f104 0124 	add.w	r1, r4, #36	; 0x24
 8004002:	4613      	mov	r3, r2
 8004004:	3b01      	subs	r3, #1
 8004006:	d25c      	bcs.n	80040c2 <RDMDeviceResponder::Init()+0xda>
 8004008:	6c60      	ldr	r0, [r4, #68]	; 0x44
 800400a:	f884 2058 	strb.w	r2, [r4, #88]	; 0x58
 800400e:	b110      	cbz	r0, 8004016 <RDMDeviceResponder::Init()+0x2e>
 8004010:	6803      	ldr	r3, [r0, #0]
 8004012:	689b      	ldr	r3, [r3, #8]
 8004014:	4798      	blx	r3
 8004016:	f06f 0522 	mvn.w	r5, #34	; 0x22
 800401a:	f894 3059 	ldrb.w	r3, [r4, #89]	; 0x59
 800401e:	f894 0058 	ldrb.w	r0, [r4, #88]	; 0x58
 8004022:	f104 0223 	add.w	r2, r4, #35	; 0x23
 8004026:	1b2d      	subs	r5, r5, r4
 8004028:	18a9      	adds	r1, r5, r2
 800402a:	4288      	cmp	r0, r1
 800402c:	d84d      	bhi.n	80040ca <RDMDeviceResponder::Init()+0xe2>
 800402e:	f8a4 304c 	strh.w	r3, [r4, #76]	; 0x4c
 8004032:	f7fd fb21 	bl	8001678 <RDMSoftwareVersion::GetVersionId()>
 8004036:	f8b4 3048 	ldrh.w	r3, [r4, #72]	; 0x48
 800403a:	f884 307a 	strb.w	r3, [r4, #122]	; 0x7a
 800403e:	2201      	movs	r2, #1
 8004040:	f884 2075 	strb.w	r2, [r4, #117]	; 0x75
 8004044:	2200      	movs	r2, #0
 8004046:	f8a4 2076 	strh.w	r2, [r4, #118]	; 0x76
 800404a:	f884 2078 	strb.w	r2, [r4, #120]	; 0x78
 800404e:	0a1a      	lsrs	r2, r3, #8
 8004050:	0e03      	lsrs	r3, r0, #24
 8004052:	f884 307b 	strb.w	r3, [r4, #123]	; 0x7b
 8004056:	0c03      	lsrs	r3, r0, #16
 8004058:	f884 307c 	strb.w	r3, [r4, #124]	; 0x7c
 800405c:	0a03      	lsrs	r3, r0, #8
 800405e:	f884 307d 	strb.w	r3, [r4, #125]	; 0x7d
 8004062:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8004064:	f884 2079 	strb.w	r2, [r4, #121]	; 0x79
 8004068:	f884 007e 	strb.w	r0, [r4, #126]	; 0x7e
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	f8b4 6068 	ldrh.w	r6, [r4, #104]	; 0x68
 8004072:	685d      	ldr	r5, [r3, #4]
 8004074:	bb75      	cbnz	r5, 80040d4 <RDMDeviceResponder::Init()+0xec>
 8004076:	f8b4 00a0 	ldrh.w	r0, [r4, #160]	; 0xa0
 800407a:	f884 507f 	strb.w	r5, [r4, #127]	; 0x7f
 800407e:	0a03      	lsrs	r3, r0, #8
 8004080:	f884 5080 	strb.w	r5, [r4, #128]	; 0x80
 8004084:	f884 3083 	strb.w	r3, [r4, #131]	; 0x83
 8004088:	2301      	movs	r3, #1
 800408a:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
 800408e:	0a33      	lsrs	r3, r6, #8
 8004090:	b2c0      	uxtb	r0, r0
 8004092:	f884 3085 	strb.w	r3, [r4, #133]	; 0x85
 8004096:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
 800409a:	f884 3087 	strb.w	r3, [r4, #135]	; 0x87
 800409e:	f884 0084 	strb.w	r0, [r4, #132]	; 0x84
 80040a2:	f884 6086 	strb.w	r6, [r4, #134]	; 0x86
 80040a6:	f104 0375 	add.w	r3, r4, #117	; 0x75
 80040aa:	f104 0288 	add.w	r2, r4, #136	; 0x88
 80040ae:	4293      	cmp	r3, r2
 80040b0:	d129      	bne.n	8004106 <RDMDeviceResponder::Init()+0x11e>
 80040b2:	f894 3084 	ldrb.w	r3, [r4, #132]	; 0x84
 80040b6:	f894 2081 	ldrb.w	r2, [r4, #129]	; 0x81
 80040ba:	4413      	add	r3, r2
 80040bc:	f8a4 309e 	strh.w	r3, [r4, #158]	; 0x9e
 80040c0:	bd70      	pop	{r4, r5, r6, pc}
 80040c2:	f810 5b01 	ldrb.w	r5, [r0], #1
 80040c6:	77c5      	strb	r5, [r0, #31]
 80040c8:	e79c      	b.n	8004004 <RDMDeviceResponder::Init()+0x1c>
 80040ca:	f812 1f01 	ldrb.w	r1, [r2, #1]!
 80040ce:	440b      	add	r3, r1
 80040d0:	b29b      	uxth	r3, r3
 80040d2:	e7a9      	b.n	8004028 <RDMDeviceResponder::Init()+0x40>
 80040d4:	682b      	ldr	r3, [r5, #0]
 80040d6:	4628      	mov	r0, r5
 80040d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040da:	4798      	blx	r3
 80040dc:	0a00      	lsrs	r0, r0, #8
 80040de:	f884 007f 	strb.w	r0, [r4, #127]	; 0x7f
 80040e2:	682b      	ldr	r3, [r5, #0]
 80040e4:	4628      	mov	r0, r5
 80040e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040e8:	4798      	blx	r3
 80040ea:	f884 0080 	strb.w	r0, [r4, #128]	; 0x80
 80040ee:	682b      	ldr	r3, [r5, #0]
 80040f0:	4628      	mov	r0, r5
 80040f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040f4:	4798      	blx	r3
 80040f6:	0a00      	lsrs	r0, r0, #8
 80040f8:	f884 0083 	strb.w	r0, [r4, #131]	; 0x83
 80040fc:	682b      	ldr	r3, [r5, #0]
 80040fe:	4628      	mov	r0, r5
 8004100:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004102:	4798      	blx	r3
 8004104:	e7c0      	b.n	8004088 <RDMDeviceResponder::Init()+0xa0>
 8004106:	f813 1b01 	ldrb.w	r1, [r3], #1
 800410a:	7499      	strb	r1, [r3, #18]
 800410c:	e7cf      	b.n	80040ae <RDMDeviceResponder::Init()+0xc6>
	...

08004110 <RDMDeviceResponder::Print()>:
 8004110:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004112:	4604      	mov	r4, r0
 8004114:	3004      	adds	r0, #4
 8004116:	f001 f96b 	bl	80053f0 <RDMDevice::Print()>
 800411a:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800411c:	481c      	ldr	r0, [pc, #112]	; (8004190 <RDMDeviceResponder::Print()+0x80>)
 800411e:	681d      	ldr	r5, [r3, #0]
 8004120:	6aae      	ldr	r6, [r5, #40]	; 0x28
 8004122:	f7fd fda3 	bl	8001c6c <printf>
 8004126:	f894 2076 	ldrb.w	r2, [r4, #118]	; 0x76
 800412a:	f894 1075 	ldrb.w	r1, [r4, #117]	; 0x75
 800412e:	4819      	ldr	r0, [pc, #100]	; (8004194 <RDMDeviceResponder::Print()+0x84>)
 8004130:	f7fd fd9c 	bl	8001c6c <printf>
 8004134:	f894 3084 	ldrb.w	r3, [r4, #132]	; 0x84
 8004138:	f894 1083 	ldrb.w	r1, [r4, #131]	; 0x83
 800413c:	4816      	ldr	r0, [pc, #88]	; (8004198 <RDMDeviceResponder::Print()+0x88>)
 800413e:	eb03 2101 	add.w	r1, r3, r1, lsl #8
 8004142:	f7fd fd93 	bl	8001c6c <printf>
 8004146:	f894 3080 	ldrb.w	r3, [r4, #128]	; 0x80
 800414a:	f894 107f 	ldrb.w	r1, [r4, #127]	; 0x7f
 800414e:	4813      	ldr	r0, [pc, #76]	; (800419c <RDMDeviceResponder::Print()+0x8c>)
 8004150:	eb03 2101 	add.w	r1, r3, r1, lsl #8
 8004154:	3508      	adds	r5, #8
 8004156:	f7fd fd89 	bl	8001c6c <printf>
 800415a:	f894 2082 	ldrb.w	r2, [r4, #130]	; 0x82
 800415e:	f894 1081 	ldrb.w	r1, [r4, #129]	; 0x81
 8004162:	9500      	str	r5, [sp, #0]
 8004164:	b2f3      	uxtb	r3, r6
 8004166:	480e      	ldr	r0, [pc, #56]	; (80041a0 <RDMDeviceResponder::Print()+0x90>)
 8004168:	f7fd fd80 	bl	8001c6c <printf>
 800416c:	f894 1085 	ldrb.w	r1, [r4, #133]	; 0x85
 8004170:	f894 3086 	ldrb.w	r3, [r4, #134]	; 0x86
 8004174:	480b      	ldr	r0, [pc, #44]	; (80041a4 <RDMDeviceResponder::Print()+0x94>)
 8004176:	eb03 2101 	add.w	r1, r3, r1, lsl #8
 800417a:	f7fd fd77 	bl	8001c6c <printf>
 800417e:	f894 1087 	ldrb.w	r1, [r4, #135]	; 0x87
 8004182:	4809      	ldr	r0, [pc, #36]	; (80041a8 <RDMDeviceResponder::Print()+0x98>)
 8004184:	b002      	add	sp, #8
 8004186:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800418a:	f7fd bd6f 	b.w	8001c6c <printf>
 800418e:	bf00      	nop
 8004190:	0800a4cb 	stmdaeq	r0, {r0, r1, r3, r6, r7, sl, sp, pc}
 8004194:	0800a4e8 	stmdaeq	r0, {r3, r5, r6, r7, sl, sp, pc}
 8004198:	0800a501 	stmdaeq	r0, {r0, r8, sl, sp, pc}
 800419c:	0800a519 	stmdaeq	r0, {r0, r3, r4, r8, sl, sp, pc}
 80041a0:	0800a531 	stmdaeq	r0, {r0, r4, r5, r8, sl, sp, pc}
 80041a4:	0800a54f 	stmdaeq	r0, {r0, r1, r2, r3, r6, r8, sl, sp, pc}
 80041a8:	0800a567 	stmdaeq	r0, {r0, r1, r2, r5, r6, r8, sl, sp, pc}

080041ac <RDMDeviceResponder::GetSlotInfo(unsigned short, unsigned short, lightset::SlotInfo&) [clone .part.0]>:
 80041ac:	f890 3081 	ldrb.w	r3, [r0, #129]	; 0x81
 80041b0:	6ec0      	ldr	r0, [r0, #108]	; 0x6c
 80041b2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80041b6:	3b01      	subs	r3, #1
 80041b8:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80041bc:	6858      	ldr	r0, [r3, #4]
 80041be:	6803      	ldr	r3, [r0, #0]
 80041c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80041c2:	4718      	bx	r3

080041c4 <memcpy.isra.0>:
 80041c4:	3801      	subs	r0, #1
 80041c6:	440a      	add	r2, r1
 80041c8:	4291      	cmp	r1, r2
 80041ca:	d100      	bne.n	80041ce <memcpy.isra.0+0xa>
 80041cc:	4770      	bx	lr
 80041ce:	f811 3b01 	ldrb.w	r3, [r1], #1
 80041d2:	f800 3f01 	strb.w	r3, [r0, #1]!
 80041d6:	e7f7      	b.n	80041c8 <memcpy.isra.0+0x4>

080041d8 <memcmp>:
 80041d8:	b510      	push	{r4, lr}
 80041da:	3901      	subs	r1, #1
 80041dc:	4402      	add	r2, r0
 80041de:	4290      	cmp	r0, r2
 80041e0:	d101      	bne.n	80041e6 <memcmp+0xe>
 80041e2:	2000      	movs	r0, #0
 80041e4:	e005      	b.n	80041f2 <memcmp+0x1a>
 80041e6:	7803      	ldrb	r3, [r0, #0]
 80041e8:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80041ec:	42a3      	cmp	r3, r4
 80041ee:	d001      	beq.n	80041f4 <memcmp+0x1c>
 80041f0:	1b18      	subs	r0, r3, r4
 80041f2:	bd10      	pop	{r4, pc}
 80041f4:	3001      	adds	r0, #1
 80041f6:	e7f2      	b.n	80041de <memcmp+0x6>

080041f8 <RDMDevice::SetLabel(TRDMDeviceInfoData const*)>:
 80041f8:	b570      	push	{r4, r5, r6, lr}
 80041fa:	790d      	ldrb	r5, [r1, #4]
 80041fc:	f890 3056 	ldrb.w	r3, [r0, #86]	; 0x56
 8004200:	6809      	ldr	r1, [r1, #0]
 8004202:	2d20      	cmp	r5, #32
 8004204:	4604      	mov	r4, r0
 8004206:	bf28      	it	cs
 8004208:	2520      	movcs	r5, #32
 800420a:	b18b      	cbz	r3, 8004230 <RDMDevice::SetLabel(TRDMDeviceInfoData const*)+0x38>
 800420c:	f100 0620 	add.w	r6, r0, #32
 8004210:	4630      	mov	r0, r6
 8004212:	462a      	mov	r2, r5
 8004214:	f7ff ffd6 	bl	80041c4 <memcpy.isra.0>
 8004218:	6c20      	ldr	r0, [r4, #64]	; 0x40
 800421a:	f884 5054 	strb.w	r5, [r4, #84]	; 0x54
 800421e:	b160      	cbz	r0, 800423a <RDMDevice::SetLabel(TRDMDeviceInfoData const*)+0x42>
 8004220:	6802      	ldr	r2, [r0, #0]
 8004222:	6894      	ldr	r4, [r2, #8]
 8004224:	4631      	mov	r1, r6
 8004226:	462a      	mov	r2, r5
 8004228:	4623      	mov	r3, r4
 800422a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800422e:	4718      	bx	r3
 8004230:	462a      	mov	r2, r5
 8004232:	f7ff ffc7 	bl	80041c4 <memcpy.isra.0>
 8004236:	f884 5055 	strb.w	r5, [r4, #85]	; 0x55
 800423a:	bd70      	pop	{r4, r5, r6, pc}

0800423c <RDMDeviceResponder::SetDmxStartAddress(unsigned short, unsigned short)>:
 800423c:	b570      	push	{r4, r5, r6, lr}
 800423e:	4604      	mov	r4, r0
 8004240:	1e50      	subs	r0, r2, #1
 8004242:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8004246:	4615      	mov	r5, r2
 8004248:	d220      	bcs.n	800428c <RDMDeviceResponder::SetDmxStartAddress(unsigned short, unsigned short)+0x50>
 800424a:	b129      	cbz	r1, 8004258 <RDMDeviceResponder::SetDmxStartAddress(unsigned short, unsigned short)+0x1c>
 800424c:	f104 0064 	add.w	r0, r4, #100	; 0x64
 8004250:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8004254:	f7fe bffd 	b.w	8003252 <RDMSubDevices::SetDmxStartAddress(unsigned short, unsigned short)>
 8004258:	f894 3081 	ldrb.w	r3, [r4, #129]	; 0x81
 800425c:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 800425e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004262:	3b01      	subs	r3, #1
 8004264:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004268:	6858      	ldr	r0, [r3, #4]
 800426a:	b178      	cbz	r0, 800428c <RDMDeviceResponder::SetDmxStartAddress(unsigned short, unsigned short)+0x50>
 800426c:	6803      	ldr	r3, [r0, #0]
 800426e:	4629      	mov	r1, r5
 8004270:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004272:	4798      	blx	r3
 8004274:	b120      	cbz	r0, 8004280 <RDMDeviceResponder::SetDmxStartAddress(unsigned short, unsigned short)+0x44>
 8004276:	0a2b      	lsrs	r3, r5, #8
 8004278:	f884 3083 	strb.w	r3, [r4, #131]	; 0x83
 800427c:	f884 5084 	strb.w	r5, [r4, #132]	; 0x84
 8004280:	6823      	ldr	r3, [r4, #0]
 8004282:	4620      	mov	r0, r4
 8004284:	68db      	ldr	r3, [r3, #12]
 8004286:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800428a:	4718      	bx	r3
 800428c:	bd70      	pop	{r4, r5, r6, pc}

0800428e <RDMDeviceResponder::GetPersonality(unsigned short, unsigned char)>:
 800428e:	b111      	cbz	r1, 8004296 <RDMDeviceResponder::GetPersonality(unsigned short, unsigned char)+0x8>
 8004290:	3064      	adds	r0, #100	; 0x64
 8004292:	f7ff b808 	b.w	80032a6 <RDMSubDevices::GetPersonality(unsigned short, unsigned char)>
 8004296:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 800429a:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 800429c:	3a01      	subs	r2, #1
 800429e:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 80042a2:	4770      	bx	lr

080042a4 <RDMDeviceResponder::GetPersonalityCount(unsigned short)>:
 80042a4:	b111      	cbz	r1, 80042ac <RDMDeviceResponder::GetPersonalityCount(unsigned short)+0x8>
 80042a6:	3064      	adds	r0, #100	; 0x64
 80042a8:	f7fe bff5 	b.w	8003296 <RDMSubDevices::GetPersonalityCount(unsigned short)>
 80042ac:	f890 0082 	ldrb.w	r0, [r0, #130]	; 0x82
 80042b0:	4770      	bx	lr

080042b2 <RDMDeviceResponder::SetPersonalityCurrent(unsigned short, unsigned char)>:
 80042b2:	b570      	push	{r4, r5, r6, lr}
 80042b4:	4604      	mov	r4, r0
 80042b6:	b121      	cbz	r1, 80042c2 <RDMDeviceResponder::SetPersonalityCurrent(unsigned short, unsigned char)+0x10>
 80042b8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80042bc:	3064      	adds	r0, #100	; 0x64
 80042be:	f7fe bfe1 	b.w	8003284 <RDMSubDevices::SetPersonalityCurrent(unsigned short, unsigned char)>
 80042c2:	f884 2081 	strb.w	r2, [r4, #129]	; 0x81
 80042c6:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 80042ca:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 80042cc:	3a01      	subs	r2, #1
 80042ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80042d2:	685d      	ldr	r5, [r3, #4]
 80042d4:	b305      	cbz	r5, 8004318 <RDMDeviceResponder::SetPersonalityCurrent(unsigned short, unsigned char)+0x66>
 80042d6:	682b      	ldr	r3, [r5, #0]
 80042d8:	4628      	mov	r0, r5
 80042da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042dc:	4798      	blx	r3
 80042de:	0a00      	lsrs	r0, r0, #8
 80042e0:	f884 007f 	strb.w	r0, [r4, #127]	; 0x7f
 80042e4:	682b      	ldr	r3, [r5, #0]
 80042e6:	4628      	mov	r0, r5
 80042e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042ea:	4798      	blx	r3
 80042ec:	f884 0080 	strb.w	r0, [r4, #128]	; 0x80
 80042f0:	682b      	ldr	r3, [r5, #0]
 80042f2:	4628      	mov	r0, r5
 80042f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042f6:	4798      	blx	r3
 80042f8:	0a00      	lsrs	r0, r0, #8
 80042fa:	f884 0083 	strb.w	r0, [r4, #131]	; 0x83
 80042fe:	682b      	ldr	r3, [r5, #0]
 8004300:	4628      	mov	r0, r5
 8004302:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004304:	4798      	blx	r3
 8004306:	6823      	ldr	r3, [r4, #0]
 8004308:	f884 0084 	strb.w	r0, [r4, #132]	; 0x84
 800430c:	4629      	mov	r1, r5
 800430e:	4620      	mov	r0, r4
 8004310:	689b      	ldr	r3, [r3, #8]
 8004312:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8004316:	4718      	bx	r3
 8004318:	bd70      	pop	{r4, r5, r6, pc}

0800431a <RDMHandler::RDMHandler(bool)>:
 800431a:	2200      	movs	r2, #0
 800431c:	e9c0 2201 	strd	r2, r2, [r0, #4]
 8004320:	7001      	strb	r1, [r0, #0]
 8004322:	7042      	strb	r2, [r0, #1]
 8004324:	4770      	bx	lr

08004326 <RDMHandler::HandleString(char const*, unsigned long)>:
 8004326:	6883      	ldr	r3, [r0, #8]
 8004328:	f803 2f17 	strb.w	r2, [r3, #23]!
 800432c:	440a      	add	r2, r1
 800432e:	4291      	cmp	r1, r2
 8004330:	d100      	bne.n	8004334 <RDMHandler::HandleString(char const*, unsigned long)+0xe>
 8004332:	4770      	bx	lr
 8004334:	f811 0b01 	ldrb.w	r0, [r1], #1
 8004338:	f803 0f01 	strb.w	r0, [r3, #1]!
 800433c:	e7f7      	b.n	800432e <RDMHandler::HandleString(char const*, unsigned long)+0x8>
	...

08004340 <RDMHandler::CreateRespondMessage(unsigned char, unsigned short)>:
 8004340:	b570      	push	{r4, r5, r6, lr}
 8004342:	e9d0 4301 	ldrd	r4, r3, [r0, #4]
 8004346:	25cc      	movs	r5, #204	; 0xcc
 8004348:	701d      	strb	r5, [r3, #0]
 800434a:	7825      	ldrb	r5, [r4, #0]
 800434c:	705d      	strb	r5, [r3, #1]
 800434e:	7ba5      	ldrb	r5, [r4, #14]
 8004350:	73dd      	strb	r5, [r3, #15]
 8004352:	2500      	movs	r5, #0
 8004354:	745d      	strb	r5, [r3, #17]
 8004356:	7c65      	ldrb	r5, [r4, #17]
 8004358:	749d      	strb	r5, [r3, #18]
 800435a:	7ca5      	ldrb	r5, [r4, #18]
 800435c:	74dd      	strb	r5, [r3, #19]
 800435e:	7ce5      	ldrb	r5, [r4, #19]
 8004360:	3501      	adds	r5, #1
 8004362:	751d      	strb	r5, [r3, #20]
 8004364:	7d25      	ldrb	r5, [r4, #20]
 8004366:	755d      	strb	r5, [r3, #21]
 8004368:	7d65      	ldrb	r5, [r4, #21]
 800436a:	759d      	strb	r5, [r3, #22]
 800436c:	b119      	cbz	r1, 8004376 <RDMHandler::CreateRespondMessage(unsigned char, unsigned short)+0x36>
 800436e:	1e4d      	subs	r5, r1, #1
 8004370:	2d01      	cmp	r5, #1
 8004372:	d921      	bls.n	80043b8 <RDMHandler::CreateRespondMessage(unsigned char, unsigned short)+0x78>
 8004374:	bd70      	pop	{r4, r5, r6, pc}
 8004376:	7dda      	ldrb	r2, [r3, #23]
 8004378:	7419      	strb	r1, [r3, #16]
 800437a:	3218      	adds	r2, #24
 800437c:	709a      	strb	r2, [r3, #2]
 800437e:	4a15      	ldr	r2, [pc, #84]	; (80043d4 <RDMHandler::CreateRespondMessage(unsigned char, unsigned short)+0x94>)
 8004380:	6812      	ldr	r2, [r2, #0]
 8004382:	1de1      	adds	r1, r4, #7
 8004384:	1c9d      	adds	r5, r3, #2
 8004386:	324d      	adds	r2, #77	; 0x4d
 8004388:	340d      	adds	r4, #13
 800438a:	f811 6f01 	ldrb.w	r6, [r1, #1]!
 800438e:	f805 6f01 	strb.w	r6, [r5, #1]!
 8004392:	42a1      	cmp	r1, r4
 8004394:	f812 6f01 	ldrb.w	r6, [r2, #1]!
 8004398:	71ae      	strb	r6, [r5, #6]
 800439a:	d1f6      	bne.n	800438a <RDMHandler::CreateRespondMessage(unsigned char, unsigned short)+0x4a>
 800439c:	2200      	movs	r2, #0
 800439e:	6884      	ldr	r4, [r0, #8]
 80043a0:	7899      	ldrb	r1, [r3, #2]
 80043a2:	4613      	mov	r3, r2
 80043a4:	428a      	cmp	r2, r1
 80043a6:	eb04 0502 	add.w	r5, r4, r2
 80043aa:	d30e      	bcc.n	80043ca <RDMHandler::CreateRespondMessage(unsigned char, unsigned short)+0x8a>
 80043ac:	0a1a      	lsrs	r2, r3, #8
 80043ae:	702a      	strb	r2, [r5, #0]
 80043b0:	6882      	ldr	r2, [r0, #8]
 80043b2:	440a      	add	r2, r1
 80043b4:	7053      	strb	r3, [r2, #1]
 80043b6:	e7dd      	b.n	8004374 <RDMHandler::CreateRespondMessage(unsigned char, unsigned short)+0x34>
 80043b8:	7419      	strb	r1, [r3, #16]
 80043ba:	2102      	movs	r1, #2
 80043bc:	251a      	movs	r5, #26
 80043be:	75d9      	strb	r1, [r3, #23]
 80043c0:	0a11      	lsrs	r1, r2, #8
 80043c2:	709d      	strb	r5, [r3, #2]
 80043c4:	7619      	strb	r1, [r3, #24]
 80043c6:	765a      	strb	r2, [r3, #25]
 80043c8:	e7d9      	b.n	800437e <RDMHandler::CreateRespondMessage(unsigned char, unsigned short)+0x3e>
 80043ca:	5ca5      	ldrb	r5, [r4, r2]
 80043cc:	442b      	add	r3, r5
 80043ce:	b29b      	uxth	r3, r3
 80043d0:	3201      	adds	r2, #1
 80043d2:	e7e7      	b.n	80043a4 <RDMHandler::CreateRespondMessage(unsigned char, unsigned short)+0x64>
 80043d4:	200015e0 	andcs	r1, r0, r0, ror #11

080043d8 <RDMHandler::RespondMessageAck()>:
 80043d8:	6843      	ldr	r3, [r0, #4]
 80043da:	7d9a      	ldrb	r2, [r3, #22]
 80043dc:	b90a      	cbnz	r2, 80043e2 <RDMHandler::RespondMessageAck()+0xa>
 80043de:	2218      	movs	r2, #24
 80043e0:	705a      	strb	r2, [r3, #1]
 80043e2:	2200      	movs	r2, #0
 80043e4:	4611      	mov	r1, r2
 80043e6:	f7ff bfab 	b.w	8004340 <RDMHandler::CreateRespondMessage(unsigned char, unsigned short)>
	...

080043ec <RDMHandler::GetSupportedParameters(unsigned short)>:
 80043ec:	4b15      	ldr	r3, [pc, #84]	; (8004444 <RDMHandler::GetSupportedParameters(unsigned short)+0x58>)
 80043ee:	2900      	cmp	r1, #0
 80043f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80043f2:	4915      	ldr	r1, [pc, #84]	; (8004448 <RDMHandler::GetSupportedParameters(unsigned short)+0x5c>)
 80043f4:	6887      	ldr	r7, [r0, #8]
 80043f6:	bf0c      	ite	eq
 80043f8:	4619      	moveq	r1, r3
 80043fa:	2408      	movne	r4, #8
 80043fc:	f04f 030c 	mov.w	r3, #12
 8004400:	bf08      	it	eq
 8004402:	241e      	moveq	r4, #30
 8004404:	435c      	muls	r4, r3
 8004406:	2300      	movs	r3, #0
 8004408:	461d      	mov	r5, r3
 800440a:	461a      	mov	r2, r3
 800440c:	f101 0e15 	add.w	lr, r1, #21
 8004410:	f81e 6013 	ldrb.w	r6, [lr, r3, lsl #1]
 8004414:	b16e      	cbz	r6, 8004432 <RDMHandler::GetSupportedParameters(unsigned short)+0x46>
 8004416:	f831 6013 	ldrh.w	r6, [r1, r3, lsl #1]
 800441a:	eb07 0c45 	add.w	ip, r7, r5, lsl #1
 800441e:	0a36      	lsrs	r6, r6, #8
 8004420:	f88c 6018 	strb.w	r6, [ip, #24]
 8004424:	f831 6013 	ldrh.w	r6, [r1, r3, lsl #1]
 8004428:	f88c 6019 	strb.w	r6, [ip, #25]
 800442c:	3201      	adds	r2, #1
 800442e:	b2d2      	uxtb	r2, r2
 8004430:	3501      	adds	r5, #1
 8004432:	330c      	adds	r3, #12
 8004434:	429c      	cmp	r4, r3
 8004436:	d1eb      	bne.n	8004410 <RDMHandler::GetSupportedParameters(unsigned short)+0x24>
 8004438:	0052      	lsls	r2, r2, #1
 800443a:	75fa      	strb	r2, [r7, #23]
 800443c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8004440:	f7ff bfca 	b.w	80043d8 <RDMHandler::RespondMessageAck()>
 8004444:	0800a5b4 	stmdaeq	r0, {r2, r4, r5, r7, r8, sl, sp, pc}
 8004448:	0800a884 	stmdaeq	r0, {r2, r7, fp, sp, pc}

0800444c <RDMHandler::GetDeviceInfo(unsigned short)>:
 800444c:	b538      	push	{r3, r4, r5, lr}
 800444e:	4b18      	ldr	r3, [pc, #96]	; (80044b0 <RDMHandler::GetDeviceInfo(unsigned short)+0x64>)
 8004450:	4605      	mov	r5, r0
 8004452:	681c      	ldr	r4, [r3, #0]
 8004454:	b349      	cbz	r1, 80044aa <RDMHandler::GetDeviceInfo(unsigned short)+0x5e>
 8004456:	f104 0064 	add.w	r0, r4, #100	; 0x64
 800445a:	f7fe fed3 	bl	8003204 <RDMSubDevices::GetInfo(unsigned short)>
 800445e:	b1b8      	cbz	r0, 8004490 <RDMHandler::GetDeviceInfo(unsigned short)+0x44>
 8004460:	8803      	ldrh	r3, [r0, #0]
 8004462:	0a1b      	lsrs	r3, r3, #8
 8004464:	f884 3092 	strb.w	r3, [r4, #146]	; 0x92
 8004468:	8803      	ldrh	r3, [r0, #0]
 800446a:	f884 3093 	strb.w	r3, [r4, #147]	; 0x93
 800446e:	7903      	ldrb	r3, [r0, #4]
 8004470:	f884 3094 	strb.w	r3, [r4, #148]	; 0x94
 8004474:	7943      	ldrb	r3, [r0, #5]
 8004476:	f884 3095 	strb.w	r3, [r4, #149]	; 0x95
 800447a:	8843      	ldrh	r3, [r0, #2]
 800447c:	0a1b      	lsrs	r3, r3, #8
 800447e:	f884 3096 	strb.w	r3, [r4, #150]	; 0x96
 8004482:	8843      	ldrh	r3, [r0, #2]
 8004484:	f884 3097 	strb.w	r3, [r4, #151]	; 0x97
 8004488:	f890 3027 	ldrb.w	r3, [r0, #39]	; 0x27
 800448c:	f884 309a 	strb.w	r3, [r4, #154]	; 0x9a
 8004490:	f104 0188 	add.w	r1, r4, #136	; 0x88
 8004494:	68a8      	ldr	r0, [r5, #8]
 8004496:	2213      	movs	r2, #19
 8004498:	75c2      	strb	r2, [r0, #23]
 800449a:	3018      	adds	r0, #24
 800449c:	f7ff fe92 	bl	80041c4 <memcpy.isra.0>
 80044a0:	4628      	mov	r0, r5
 80044a2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80044a6:	f7ff bf97 	b.w	80043d8 <RDMHandler::RespondMessageAck()>
 80044aa:	f104 0175 	add.w	r1, r4, #117	; 0x75
 80044ae:	e7f1      	b.n	8004494 <RDMHandler::GetDeviceInfo(unsigned short)+0x48>
 80044b0:	200015e0 	andcs	r1, r0, r0, ror #11

080044b4 <RDMHandler::GetFactoryDefaults(unsigned short)>:
 80044b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80044b6:	6886      	ldr	r6, [r0, #8]
 80044b8:	2301      	movs	r3, #1
 80044ba:	75f3      	strb	r3, [r6, #23]
 80044bc:	4b1c      	ldr	r3, [pc, #112]	; (8004530 <RDMHandler::GetFactoryDefaults(unsigned short)+0x7c>)
 80044be:	681c      	ldr	r4, [r3, #0]
 80044c0:	f894 309d 	ldrb.w	r3, [r4, #157]	; 0x9d
 80044c4:	4605      	mov	r5, r0
 80044c6:	b37b      	cbz	r3, 8004528 <RDMHandler::GetFactoryDefaults(unsigned short)+0x74>
 80044c8:	f06f 0c22 	mvn.w	ip, #34	; 0x22
 80044cc:	f8b4 104c 	ldrh.w	r1, [r4, #76]	; 0x4c
 80044d0:	f894 3059 	ldrb.w	r3, [r4, #89]	; 0x59
 80044d4:	f894 0058 	ldrb.w	r0, [r4, #88]	; 0x58
 80044d8:	f104 0223 	add.w	r2, r4, #35	; 0x23
 80044dc:	ebac 0c04 	sub.w	ip, ip, r4
 80044e0:	eb0c 0702 	add.w	r7, ip, r2
 80044e4:	4287      	cmp	r7, r0
 80044e6:	d30a      	bcc.n	80044fe <RDMHandler::GetFactoryDefaults(unsigned short)+0x4a>
 80044e8:	4299      	cmp	r1, r3
 80044ea:	d00d      	beq.n	8004508 <RDMHandler::GetFactoryDefaults(unsigned short)+0x54>
 80044ec:	2300      	movs	r3, #0
 80044ee:	f884 309d 	strb.w	r3, [r4, #157]	; 0x9d
 80044f2:	7633      	strb	r3, [r6, #24]
 80044f4:	4628      	mov	r0, r5
 80044f6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80044fa:	f7ff bf6d 	b.w	80043d8 <RDMHandler::RespondMessageAck()>
 80044fe:	f812 7f01 	ldrb.w	r7, [r2, #1]!
 8004502:	443b      	add	r3, r7
 8004504:	b29b      	uxth	r3, r3
 8004506:	e7eb      	b.n	80044e0 <RDMHandler::GetFactoryDefaults(unsigned short)+0x2c>
 8004508:	f894 3084 	ldrb.w	r3, [r4, #132]	; 0x84
 800450c:	f894 1081 	ldrb.w	r1, [r4, #129]	; 0x81
 8004510:	f8b4 209e 	ldrh.w	r2, [r4, #158]	; 0x9e
 8004514:	440b      	add	r3, r1
 8004516:	429a      	cmp	r2, r3
 8004518:	d1e8      	bne.n	80044ec <RDMHandler::GetFactoryDefaults(unsigned short)+0x38>
 800451a:	f104 0064 	add.w	r0, r4, #100	; 0x64
 800451e:	f7fe ff06 	bl	800332e <RDMSubDevices::GetFactoryDefaults()>
 8004522:	4603      	mov	r3, r0
 8004524:	2800      	cmp	r0, #0
 8004526:	d0e2      	beq.n	80044ee <RDMHandler::GetFactoryDefaults(unsigned short)+0x3a>
 8004528:	f894 309d 	ldrb.w	r3, [r4, #157]	; 0x9d
 800452c:	e7e1      	b.n	80044f2 <RDMHandler::GetFactoryDefaults(unsigned short)+0x3e>
 800452e:	bf00      	nop
 8004530:	200015e0 	andcs	r1, r0, r0, ror #11

08004534 <RDMHandler::GetProductDetailIdList(unsigned short)>:
 8004534:	4b05      	ldr	r3, [pc, #20]	; (800454c <RDMHandler::GetProductDetailIdList(unsigned short)+0x18>)
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800453c:	6883      	ldr	r3, [r0, #8]
 800453e:	2102      	movs	r1, #2
 8004540:	75d9      	strb	r1, [r3, #23]
 8004542:	0a11      	lsrs	r1, r2, #8
 8004544:	7619      	strb	r1, [r3, #24]
 8004546:	765a      	strb	r2, [r3, #25]
 8004548:	f7ff bf46 	b.w	80043d8 <RDMHandler::RespondMessageAck()>
 800454c:	200015e0 	andcs	r1, r0, r0, ror #11

08004550 <RDMHandler::GetDeviceModelDescription(unsigned short)>:
 8004550:	b510      	push	{r4, lr}
 8004552:	4905      	ldr	r1, [pc, #20]	; (8004568 <RDMHandler::GetDeviceModelDescription(unsigned short)+0x18>)
 8004554:	4604      	mov	r4, r0
 8004556:	220a      	movs	r2, #10
 8004558:	f7ff fee5 	bl	8004326 <RDMHandler::HandleString(char const*, unsigned long)>
 800455c:	4620      	mov	r0, r4
 800455e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004562:	f7ff bf39 	b.w	80043d8 <RDMHandler::RespondMessageAck()>
 8004566:	bf00      	nop
 8004568:	0800a598 	stmdaeq	r0, {r3, r4, r7, r8, sl, sp, pc}

0800456c <RDMHandler::GetDeviceLabel(unsigned short)>:
 800456c:	4b0d      	ldr	r3, [pc, #52]	; (80045a4 <RDMHandler::GetDeviceLabel(unsigned short)+0x38>)
 800456e:	b513      	push	{r0, r1, r4, lr}
 8004570:	4604      	mov	r4, r0
 8004572:	6818      	ldr	r0, [r3, #0]
 8004574:	b171      	cbz	r1, 8004594 <RDMHandler::GetDeviceLabel(unsigned short)+0x28>
 8004576:	466a      	mov	r2, sp
 8004578:	3064      	adds	r0, #100	; 0x64
 800457a:	f7fe fe4b 	bl	8003214 <RDMSubDevices::GetLabel(unsigned short, TRDMDeviceInfoData*)>
 800457e:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8004582:	9900      	ldr	r1, [sp, #0]
 8004584:	4620      	mov	r0, r4
 8004586:	f7ff fece 	bl	8004326 <RDMHandler::HandleString(char const*, unsigned long)>
 800458a:	4620      	mov	r0, r4
 800458c:	f7ff ff24 	bl	80043d8 <RDMHandler::RespondMessageAck()>
 8004590:	b002      	add	sp, #8
 8004592:	bd10      	pop	{r4, pc}
 8004594:	f100 0324 	add.w	r3, r0, #36	; 0x24
 8004598:	9300      	str	r3, [sp, #0]
 800459a:	f890 3058 	ldrb.w	r3, [r0, #88]	; 0x58
 800459e:	f88d 3004 	strb.w	r3, [sp, #4]
 80045a2:	e7ec      	b.n	800457e <RDMHandler::GetDeviceLabel(unsigned short)+0x12>
 80045a4:	200015e0 	andcs	r1, r0, r0, ror #11

080045a8 <RDMHandler::GetSoftwareVersionLabel(unsigned short)>:
 80045a8:	b510      	push	{r4, lr}
 80045aa:	4b06      	ldr	r3, [pc, #24]	; (80045c4 <RDMHandler::GetSoftwareVersionLabel(unsigned short)+0x1c>)
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	4604      	mov	r4, r0
 80045b0:	f893 2074 	ldrb.w	r2, [r3, #116]	; 0x74
 80045b4:	6f19      	ldr	r1, [r3, #112]	; 0x70
 80045b6:	f7ff feb6 	bl	8004326 <RDMHandler::HandleString(char const*, unsigned long)>
 80045ba:	4620      	mov	r0, r4
 80045bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80045c0:	f7ff bf0a 	b.w	80043d8 <RDMHandler::RespondMessageAck()>
 80045c4:	200015e0 	andcs	r1, r0, r0, ror #11

080045c8 <RDMHandler::GetIdentifyDevice(unsigned short)>:
 80045c8:	6883      	ldr	r3, [r0, #8]
 80045ca:	2201      	movs	r2, #1
 80045cc:	75da      	strb	r2, [r3, #23]
 80045ce:	4a02      	ldr	r2, [pc, #8]	; (80045d8 <RDMHandler::GetIdentifyDevice(unsigned short)+0x10>)
 80045d0:	7812      	ldrb	r2, [r2, #0]
 80045d2:	761a      	strb	r2, [r3, #24]
 80045d4:	f7ff bf00 	b.w	80043d8 <RDMHandler::RespondMessageAck()>
 80045d8:	200015e4 	andcs	r1, r0, r4, ror #11

080045dc <RDMHandler::GetLanguage(unsigned short)>:
 80045dc:	b510      	push	{r4, lr}
 80045de:	4b06      	ldr	r3, [pc, #24]	; (80045f8 <RDMHandler::GetLanguage(unsigned short)+0x1c>)
 80045e0:	6819      	ldr	r1, [r3, #0]
 80045e2:	4604      	mov	r4, r0
 80045e4:	2202      	movs	r2, #2
 80045e6:	319b      	adds	r1, #155	; 0x9b
 80045e8:	f7ff fe9d 	bl	8004326 <RDMHandler::HandleString(char const*, unsigned long)>
 80045ec:	4620      	mov	r0, r4
 80045ee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80045f2:	f7ff bef1 	b.w	80043d8 <RDMHandler::RespondMessageAck()>
 80045f6:	bf00      	nop
 80045f8:	200015e0 	andcs	r1, r0, r0, ror #11

080045fc <RDMHandler::GetPersonality(unsigned short)>:
 80045fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80045fe:	4f0d      	ldr	r7, [pc, #52]	; (8004634 <RDMHandler::GetPersonality(unsigned short)+0x38>)
 8004600:	4604      	mov	r4, r0
 8004602:	460e      	mov	r6, r1
 8004604:	6838      	ldr	r0, [r7, #0]
 8004606:	b189      	cbz	r1, 800462c <RDMHandler::GetPersonality(unsigned short)+0x30>
 8004608:	3064      	adds	r0, #100	; 0x64
 800460a:	f7fe fe33 	bl	8003274 <RDMSubDevices::GetPersonalityCurrent(unsigned short)>
 800460e:	4605      	mov	r5, r0
 8004610:	6838      	ldr	r0, [r7, #0]
 8004612:	4631      	mov	r1, r6
 8004614:	f7ff fe46 	bl	80042a4 <RDMDeviceResponder::GetPersonalityCount(unsigned short)>
 8004618:	68a3      	ldr	r3, [r4, #8]
 800461a:	2202      	movs	r2, #2
 800461c:	7658      	strb	r0, [r3, #25]
 800461e:	75da      	strb	r2, [r3, #23]
 8004620:	761d      	strb	r5, [r3, #24]
 8004622:	4620      	mov	r0, r4
 8004624:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8004628:	f7ff bed6 	b.w	80043d8 <RDMHandler::RespondMessageAck()>
 800462c:	f890 5081 	ldrb.w	r5, [r0, #129]	; 0x81
 8004630:	e7ee      	b.n	8004610 <RDMHandler::GetPersonality(unsigned short)+0x14>
 8004632:	bf00      	nop
 8004634:	200015e0 	andcs	r1, r0, r0, ror #11

08004638 <RDMHandler::GetDmxStartAddress(unsigned short)>:
 8004638:	4b0d      	ldr	r3, [pc, #52]	; (8004670 <RDMHandler::GetDmxStartAddress(unsigned short)+0x38>)
 800463a:	b510      	push	{r4, lr}
 800463c:	4604      	mov	r4, r0
 800463e:	6818      	ldr	r0, [r3, #0]
 8004640:	b169      	cbz	r1, 800465e <RDMHandler::GetDmxStartAddress(unsigned short)+0x26>
 8004642:	3064      	adds	r0, #100	; 0x64
 8004644:	f7fe fdfd 	bl	8003242 <RDMSubDevices::GetDmxStartAddress(unsigned short)>
 8004648:	68a3      	ldr	r3, [r4, #8]
 800464a:	2202      	movs	r2, #2
 800464c:	75da      	strb	r2, [r3, #23]
 800464e:	0a02      	lsrs	r2, r0, #8
 8004650:	7658      	strb	r0, [r3, #25]
 8004652:	761a      	strb	r2, [r3, #24]
 8004654:	4620      	mov	r0, r4
 8004656:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800465a:	f7ff bebd 	b.w	80043d8 <RDMHandler::RespondMessageAck()>
 800465e:	f890 2083 	ldrb.w	r2, [r0, #131]	; 0x83
 8004662:	f890 3084 	ldrb.w	r3, [r0, #132]	; 0x84
 8004666:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800466a:	b298      	uxth	r0, r3
 800466c:	e7ec      	b.n	8004648 <RDMHandler::GetDmxStartAddress(unsigned short)+0x10>
 800466e:	bf00      	nop
 8004670:	200015e0 	andcs	r1, r0, r0, ror #11

08004674 <RDMHandler::GetDeviceHours(unsigned short)>:
 8004674:	4b07      	ldr	r3, [pc, #28]	; (8004694 <RDMHandler::GetDeviceHours(unsigned short)+0x20>)
 8004676:	681a      	ldr	r2, [r3, #0]
 8004678:	4b07      	ldr	r3, [pc, #28]	; (8004698 <RDMHandler::GetDeviceHours(unsigned short)+0x24>)
 800467a:	fbb2 f2f3 	udiv	r2, r2, r3
 800467e:	6883      	ldr	r3, [r0, #8]
 8004680:	2104      	movs	r1, #4
 8004682:	75d9      	strb	r1, [r3, #23]
 8004684:	2100      	movs	r1, #0
 8004686:	7619      	strb	r1, [r3, #24]
 8004688:	7659      	strb	r1, [r3, #25]
 800468a:	0a11      	lsrs	r1, r2, #8
 800468c:	7699      	strb	r1, [r3, #26]
 800468e:	76da      	strb	r2, [r3, #27]
 8004690:	f7ff bea2 	b.w	80043d8 <RDMHandler::RespondMessageAck()>
 8004694:	200027ac 	andcs	r2, r0, ip, lsr #15
 8004698:	0036ee80 	eorseq	lr, r6, r0, lsl #29

0800469c <RDMHandler::GetDisplayInvert(unsigned short)>:
 800469c:	6883      	ldr	r3, [r0, #8]
 800469e:	2201      	movs	r2, #1
 80046a0:	75da      	strb	r2, [r3, #23]
 80046a2:	4a03      	ldr	r2, [pc, #12]	; (80046b0 <RDMHandler::GetDisplayInvert(unsigned short)+0x14>)
 80046a4:	6812      	ldr	r2, [r2, #0]
 80046a6:	7e52      	ldrb	r2, [r2, #25]
 80046a8:	761a      	strb	r2, [r3, #24]
 80046aa:	f7ff be95 	b.w	80043d8 <RDMHandler::RespondMessageAck()>
 80046ae:	bf00      	nop
 80046b0:	20002684 	andcs	r2, r0, r4, lsl #13

080046b4 <RDMHandler::GetDisplayLevel(unsigned short)>:
 80046b4:	6883      	ldr	r3, [r0, #8]
 80046b6:	2201      	movs	r2, #1
 80046b8:	75da      	strb	r2, [r3, #23]
 80046ba:	4a03      	ldr	r2, [pc, #12]	; (80046c8 <RDMHandler::GetDisplayLevel(unsigned short)+0x14>)
 80046bc:	6812      	ldr	r2, [r2, #0]
 80046be:	7e12      	ldrb	r2, [r2, #24]
 80046c0:	761a      	strb	r2, [r3, #24]
 80046c2:	f7ff be89 	b.w	80043d8 <RDMHandler::RespondMessageAck()>
 80046c6:	bf00      	nop
 80046c8:	20002684 	andcs	r2, r0, r4, lsl #13

080046cc <RDMHandler::GetRealTimeClock(unsigned short)>:
 80046cc:	b510      	push	{r4, lr}
 80046ce:	4b10      	ldr	r3, [pc, #64]	; (8004710 <RDMHandler::GetRealTimeClock(unsigned short)+0x44>)
 80046d0:	b08a      	sub	sp, #40	; 0x28
 80046d2:	4604      	mov	r4, r0
 80046d4:	a901      	add	r1, sp, #4
 80046d6:	6818      	ldr	r0, [r3, #0]
 80046d8:	f003 fd49 	bl	800816e <Hardware::GetTime(tm*)>
 80046dc:	9a06      	ldr	r2, [sp, #24]
 80046de:	68a3      	ldr	r3, [r4, #8]
 80046e0:	f202 726c 	addw	r2, r2, #1900	; 0x76c
 80046e4:	f3c2 2107 	ubfx	r1, r2, #8, #8
 80046e8:	765a      	strb	r2, [r3, #25]
 80046ea:	9a05      	ldr	r2, [sp, #20]
 80046ec:	7619      	strb	r1, [r3, #24]
 80046ee:	3201      	adds	r2, #1
 80046f0:	769a      	strb	r2, [r3, #26]
 80046f2:	9a04      	ldr	r2, [sp, #16]
 80046f4:	76da      	strb	r2, [r3, #27]
 80046f6:	9a03      	ldr	r2, [sp, #12]
 80046f8:	771a      	strb	r2, [r3, #28]
 80046fa:	9a02      	ldr	r2, [sp, #8]
 80046fc:	775a      	strb	r2, [r3, #29]
 80046fe:	9a01      	ldr	r2, [sp, #4]
 8004700:	779a      	strb	r2, [r3, #30]
 8004702:	2207      	movs	r2, #7
 8004704:	75da      	strb	r2, [r3, #23]
 8004706:	4620      	mov	r0, r4
 8004708:	f7ff fe66 	bl	80043d8 <RDMHandler::RespondMessageAck()>
 800470c:	b00a      	add	sp, #40	; 0x28
 800470e:	bd10      	pop	{r4, pc}
 8004710:	20002770 	andcs	r2, r0, r0, ror r7

08004714 <RDMHandler::GetPowerState(unsigned short)>:
 8004714:	6883      	ldr	r3, [r0, #8]
 8004716:	2201      	movs	r2, #1
 8004718:	75da      	strb	r2, [r3, #23]
 800471a:	22ff      	movs	r2, #255	; 0xff
 800471c:	761a      	strb	r2, [r3, #24]
 800471e:	f7ff be5b 	b.w	80043d8 <RDMHandler::RespondMessageAck()>

08004722 <RDMHandler::GetPerformSelfTest(unsigned short)>:
 8004722:	b538      	push	{r3, r4, r5, lr}
 8004724:	6885      	ldr	r5, [r0, #8]
 8004726:	2301      	movs	r3, #1
 8004728:	75eb      	strb	r3, [r5, #23]
 800472a:	4604      	mov	r4, r0
 800472c:	f7fc fe82 	bl	8001434 <rdm::selftest::Get()>
 8004730:	3800      	subs	r0, #0
 8004732:	bf18      	it	ne
 8004734:	2001      	movne	r0, #1
 8004736:	7628      	strb	r0, [r5, #24]
 8004738:	4620      	mov	r0, r4
 800473a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800473e:	f7ff be4b 	b.w	80043d8 <RDMHandler::RespondMessageAck()>
	...

08004744 <RDMHandler::GetManufacturerLabel(unsigned short)>:
 8004744:	4b0a      	ldr	r3, [pc, #40]	; (8004770 <RDMHandler::GetManufacturerLabel(unsigned short)+0x2c>)
 8004746:	b513      	push	{r0, r1, r4, lr}
 8004748:	4619      	mov	r1, r3
 800474a:	461a      	mov	r2, r3
 800474c:	3301      	adds	r3, #1
 800474e:	7814      	ldrb	r4, [r2, #0]
 8004750:	2c00      	cmp	r4, #0
 8004752:	d1fa      	bne.n	800474a <RDMHandler::GetManufacturerLabel(unsigned short)+0x6>
 8004754:	1a52      	subs	r2, r2, r1
 8004756:	2a20      	cmp	r2, #32
 8004758:	4905      	ldr	r1, [pc, #20]	; (8004770 <RDMHandler::GetManufacturerLabel(unsigned short)+0x2c>)
 800475a:	9001      	str	r0, [sp, #4]
 800475c:	bf28      	it	cs
 800475e:	2220      	movcs	r2, #32
 8004760:	f7ff fde1 	bl	8004326 <RDMHandler::HandleString(char const*, unsigned long)>
 8004764:	9801      	ldr	r0, [sp, #4]
 8004766:	b002      	add	sp, #8
 8004768:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800476c:	f7ff be34 	b.w	80043d8 <RDMHandler::RespondMessageAck()>
 8004770:	0800af1a 	stmdaeq	r0, {r1, r3, r4, r8, r9, sl, fp, sp, pc}

08004774 <RDMHandler::GetBootSoftwareVersionLabel(unsigned short)>:
 8004774:	b510      	push	{r4, lr}
 8004776:	4905      	ldr	r1, [pc, #20]	; (800478c <RDMHandler::GetBootSoftwareVersionLabel(unsigned short)+0x18>)
 8004778:	4604      	mov	r4, r0
 800477a:	2208      	movs	r2, #8
 800477c:	f7ff fdd3 	bl	8004326 <RDMHandler::HandleString(char const*, unsigned long)>
 8004780:	4620      	mov	r0, r4
 8004782:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004786:	f7ff be27 	b.w	80043d8 <RDMHandler::RespondMessageAck()>
 800478a:	bf00      	nop
 800478c:	0800a5a3 	stmdaeq	r0, {r0, r1, r5, r7, r8, sl, sp, pc}

08004790 <RDMHandler::GetSlotInfo(unsigned short)>:
 8004790:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8004794:	f8df 8084 	ldr.w	r8, [pc, #132]	; 800481c <RDMHandler::GetSlotInfo(unsigned short)+0x8c>
 8004798:	6887      	ldr	r7, [r0, #8]
 800479a:	4606      	mov	r6, r0
 800479c:	4689      	mov	r9, r1
 800479e:	f8d8 0000 	ldr.w	r0, [r8]
 80047a2:	b1a9      	cbz	r1, 80047d0 <RDMHandler::GetSlotInfo(unsigned short)+0x40>
 80047a4:	3064      	adds	r0, #100	; 0x64
 80047a6:	f7fe fd5d 	bl	8003264 <RDMSubDevices::GetDmxFootPrint(unsigned short)>
 80047aa:	282e      	cmp	r0, #46	; 0x2e
 80047ac:	bf28      	it	cs
 80047ae:	202e      	movcs	r0, #46	; 0x2e
 80047b0:	f04f 0a00 	mov.w	sl, #0
 80047b4:	4605      	mov	r5, r0
 80047b6:	4654      	mov	r4, sl
 80047b8:	45aa      	cmp	sl, r5
 80047ba:	d111      	bne.n	80047e0 <RDMHandler::GetSlotInfo(unsigned short)+0x50>
 80047bc:	b2e4      	uxtb	r4, r4
 80047be:	75fc      	strb	r4, [r7, #23]
 80047c0:	3418      	adds	r4, #24
 80047c2:	70bc      	strb	r4, [r7, #2]
 80047c4:	4630      	mov	r0, r6
 80047c6:	f7ff fe07 	bl	80043d8 <RDMHandler::RespondMessageAck()>
 80047ca:	b002      	add	sp, #8
 80047cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80047d0:	f890 207f 	ldrb.w	r2, [r0, #127]	; 0x7f
 80047d4:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 80047d8:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 80047dc:	b298      	uxth	r0, r3
 80047de:	e7e4      	b.n	80047aa <RDMHandler::GetSlotInfo(unsigned short)+0x1a>
 80047e0:	f1b9 0f00 	cmp.w	r9, #0
 80047e4:	d117      	bne.n	8004816 <RDMHandler::GetSlotInfo(unsigned short)+0x86>
 80047e6:	f8d8 0000 	ldr.w	r0, [r8]
 80047ea:	aa01      	add	r2, sp, #4
 80047ec:	fa1f f18a 	uxth.w	r1, sl
 80047f0:	f7ff fcdc 	bl	80041ac <RDMDeviceResponder::GetSlotInfo(unsigned short, unsigned short, lightset::SlotInfo&) [clone .part.0]>
 80047f4:	b178      	cbz	r0, 8004816 <RDMHandler::GetSlotInfo(unsigned short)+0x86>
 80047f6:	193a      	adds	r2, r7, r4
 80047f8:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80047fc:	f8bd 1004 	ldrh.w	r1, [sp, #4]
 8004800:	7693      	strb	r3, [r2, #26]
 8004802:	1d23      	adds	r3, r4, #4
 8004804:	443b      	add	r3, r7
 8004806:	0a08      	lsrs	r0, r1, #8
 8004808:	f882 9018 	strb.w	r9, [r2, #24]
 800480c:	f882 a019 	strb.w	sl, [r2, #25]
 8004810:	76d0      	strb	r0, [r2, #27]
 8004812:	3405      	adds	r4, #5
 8004814:	7619      	strb	r1, [r3, #24]
 8004816:	f10a 0a01 	add.w	sl, sl, #1
 800481a:	e7cd      	b.n	80047b8 <RDMHandler::GetSlotInfo(unsigned short)+0x28>
 800481c:	200015e0 	andcs	r1, r0, r0, ror #11

08004820 <RDMHandler::RespondMessageNack(unsigned short)>:
 8004820:	460a      	mov	r2, r1
 8004822:	2102      	movs	r1, #2
 8004824:	f7ff bd8c 	b.w	8004340 <RDMHandler::CreateRespondMessage(unsigned char, unsigned short)>

08004828 <RDMHandler::SetResetDevice(bool, unsigned short)>:
 8004828:	b510      	push	{r4, lr}
 800482a:	6843      	ldr	r3, [r0, #4]
 800482c:	7d9a      	ldrb	r2, [r3, #22]
 800482e:	2a01      	cmp	r2, #1
 8004830:	4604      	mov	r4, r0
 8004832:	d004      	beq.n	800483e <RDMHandler::SetResetDevice(bool, unsigned short)+0x16>
 8004834:	2101      	movs	r1, #1
 8004836:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800483a:	f7ff bff1 	b.w	8004820 <RDMHandler::RespondMessageNack(unsigned short)>
 800483e:	7ddb      	ldrb	r3, [r3, #23]
 8004840:	2b01      	cmp	r3, #1
 8004842:	d003      	beq.n	800484c <RDMHandler::SetResetDevice(bool, unsigned short)+0x24>
 8004844:	2bff      	cmp	r3, #255	; 0xff
 8004846:	d001      	beq.n	800484c <RDMHandler::SetResetDevice(bool, unsigned short)+0x24>
 8004848:	2106      	movs	r1, #6
 800484a:	e7f4      	b.n	8004836 <RDMHandler::SetResetDevice(bool, unsigned short)+0xe>
 800484c:	68a2      	ldr	r2, [r4, #8]
 800484e:	2100      	movs	r1, #0
 8004850:	2bff      	cmp	r3, #255	; 0xff
 8004852:	75d1      	strb	r1, [r2, #23]
 8004854:	d102      	bne.n	800485c <RDMHandler::SetResetDevice(bool, unsigned short)+0x34>
 8004856:	2104      	movs	r1, #4
 8004858:	4620      	mov	r0, r4
 800485a:	e7ec      	b.n	8004836 <RDMHandler::SetResetDevice(bool, unsigned short)+0xe>
 800485c:	4b03      	ldr	r3, [pc, #12]	; (800486c <RDMHandler::SetResetDevice(bool, unsigned short)+0x44>)
 800485e:	6818      	ldr	r0, [r3, #0]
 8004860:	f003 fc9c 	bl	800819c <Hardware::Reboot()>
 8004864:	2800      	cmp	r0, #0
 8004866:	d0f6      	beq.n	8004856 <RDMHandler::SetResetDevice(bool, unsigned short)+0x2e>
 8004868:	bd10      	pop	{r4, pc}
 800486a:	bf00      	nop
 800486c:	20002770 	andcs	r2, r0, r0, ror r7

08004870 <RDMHandler::SetIdentifyDevice(bool, unsigned short)>:
 8004870:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004872:	6843      	ldr	r3, [r0, #4]
 8004874:	7d9a      	ldrb	r2, [r3, #22]
 8004876:	2a01      	cmp	r2, #1
 8004878:	4604      	mov	r4, r0
 800487a:	460d      	mov	r5, r1
 800487c:	d004      	beq.n	8004888 <RDMHandler::SetIdentifyDevice(bool, unsigned short)+0x18>
 800487e:	2101      	movs	r1, #1
 8004880:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8004884:	f7ff bfcc 	b.w	8004820 <RDMHandler::RespondMessageNack(unsigned short)>
 8004888:	7ddb      	ldrb	r3, [r3, #23]
 800488a:	2b01      	cmp	r3, #1
 800488c:	d901      	bls.n	8004892 <RDMHandler::SetIdentifyDevice(bool, unsigned short)+0x22>
 800488e:	2106      	movs	r1, #6
 8004890:	e7f6      	b.n	8004880 <RDMHandler::SetIdentifyDevice(bool, unsigned short)+0x10>
 8004892:	4912      	ldr	r1, [pc, #72]	; (80048dc <RDMHandler::SetIdentifyDevice(bool, unsigned short)+0x6c>)
 8004894:	4f12      	ldr	r7, [pc, #72]	; (80048e0 <RDMHandler::SetIdentifyDevice(bool, unsigned short)+0x70>)
 8004896:	680e      	ldr	r6, [r1, #0]
 8004898:	4912      	ldr	r1, [pc, #72]	; (80048e4 <RDMHandler::SetIdentifyDevice(bool, unsigned short)+0x74>)
 800489a:	6808      	ldr	r0, [r1, #0]
 800489c:	4912      	ldr	r1, [pc, #72]	; (80048e8 <RDMHandler::SetIdentifyDevice(bool, unsigned short)+0x78>)
 800489e:	b98b      	cbnz	r3, 80048c4 <RDMHandler::SetIdentifyDevice(bool, unsigned short)+0x54>
 80048a0:	700b      	strb	r3, [r1, #0]
 80048a2:	461a      	mov	r2, r3
 80048a4:	2102      	movs	r1, #2
 80048a6:	f003 fbd2 	bl	800804e <Hardware::SetModeWithLock(hardware::ledblink::Mode, bool)>
 80048aa:	7839      	ldrb	r1, [r7, #0]
 80048ac:	b111      	cbz	r1, 80048b4 <RDMHandler::SetIdentifyDevice(bool, unsigned short)+0x44>
 80048ae:	4630      	mov	r0, r6
 80048b0:	f7fc fe94 	bl	80015dc <RDMIdentify::Off(rdm::identify::Mode)>
 80048b4:	b98d      	cbnz	r5, 80048da <RDMHandler::SetIdentifyDevice(bool, unsigned short)+0x6a>
 80048b6:	68a3      	ldr	r3, [r4, #8]
 80048b8:	75dd      	strb	r5, [r3, #23]
 80048ba:	4620      	mov	r0, r4
 80048bc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80048c0:	f7ff bd8a 	b.w	80043d8 <RDMHandler::RespondMessageAck()>
 80048c4:	700a      	strb	r2, [r1, #0]
 80048c6:	2104      	movs	r1, #4
 80048c8:	f003 fbc1 	bl	800804e <Hardware::SetModeWithLock(hardware::ledblink::Mode, bool)>
 80048cc:	7839      	ldrb	r1, [r7, #0]
 80048ce:	2900      	cmp	r1, #0
 80048d0:	d0f0      	beq.n	80048b4 <RDMHandler::SetIdentifyDevice(bool, unsigned short)+0x44>
 80048d2:	4630      	mov	r0, r6
 80048d4:	f7fc fe64 	bl	80015a0 <RDMIdentify::On(rdm::identify::Mode)>
 80048d8:	e7ec      	b.n	80048b4 <RDMHandler::SetIdentifyDevice(bool, unsigned short)+0x44>
 80048da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80048dc:	200015e8 	andcs	r1, r0, r8, ror #11
 80048e0:	200015e5 	andcs	r1, r0, r5, ror #11
 80048e4:	20002770 	andcs	r2, r0, r0, ror r7
 80048e8:	200015e4 	andcs	r1, r0, r4, ror #11

080048ec <RDMHandler::SetLanguage(bool, unsigned short)>:
 80048ec:	b470      	push	{r4, r5, r6}
 80048ee:	6842      	ldr	r2, [r0, #4]
 80048f0:	7d94      	ldrb	r4, [r2, #22]
 80048f2:	2c02      	cmp	r4, #2
 80048f4:	4603      	mov	r3, r0
 80048f6:	d003      	beq.n	8004900 <RDMHandler::SetLanguage(bool, unsigned short)+0x14>
 80048f8:	2101      	movs	r1, #1
 80048fa:	bc70      	pop	{r4, r5, r6}
 80048fc:	f7ff bf90 	b.w	8004820 <RDMHandler::RespondMessageNack(unsigned short)>
 8004900:	4c0b      	ldr	r4, [pc, #44]	; (8004930 <RDMHandler::SetLanguage(bool, unsigned short)+0x44>)
 8004902:	7dd6      	ldrb	r6, [r2, #23]
 8004904:	6824      	ldr	r4, [r4, #0]
 8004906:	f894 509b 	ldrb.w	r5, [r4, #155]	; 0x9b
 800490a:	42ae      	cmp	r6, r5
 800490c:	d104      	bne.n	8004918 <RDMHandler::SetLanguage(bool, unsigned short)+0x2c>
 800490e:	7e15      	ldrb	r5, [r2, #24]
 8004910:	f894 209c 	ldrb.w	r2, [r4, #156]	; 0x9c
 8004914:	4295      	cmp	r5, r2
 8004916:	d002      	beq.n	800491e <RDMHandler::SetLanguage(bool, unsigned short)+0x32>
 8004918:	2106      	movs	r1, #6
 800491a:	4618      	mov	r0, r3
 800491c:	e7ed      	b.n	80048fa <RDMHandler::SetLanguage(bool, unsigned short)+0xe>
 800491e:	b921      	cbnz	r1, 800492a <RDMHandler::SetLanguage(bool, unsigned short)+0x3e>
 8004920:	6883      	ldr	r3, [r0, #8]
 8004922:	75d9      	strb	r1, [r3, #23]
 8004924:	bc70      	pop	{r4, r5, r6}
 8004926:	f7ff bd57 	b.w	80043d8 <RDMHandler::RespondMessageAck()>
 800492a:	bc70      	pop	{r4, r5, r6}
 800492c:	4770      	bx	lr
 800492e:	bf00      	nop
 8004930:	200015e0 	andcs	r1, r0, r0, ror #11

08004934 <RDMHandler::GetBootSoftwareVersionId(unsigned short)>:
 8004934:	6842      	ldr	r2, [r0, #4]
 8004936:	7d92      	ldrb	r2, [r2, #22]
 8004938:	b112      	cbz	r2, 8004940 <RDMHandler::GetBootSoftwareVersionId(unsigned short)+0xc>
 800493a:	2101      	movs	r1, #1
 800493c:	f7ff bf70 	b.w	8004820 <RDMHandler::RespondMessageNack(unsigned short)>
 8004940:	6883      	ldr	r3, [r0, #8]
 8004942:	2104      	movs	r1, #4
 8004944:	75d9      	strb	r1, [r3, #23]
 8004946:	761a      	strb	r2, [r3, #24]
 8004948:	765a      	strb	r2, [r3, #25]
 800494a:	769a      	strb	r2, [r3, #26]
 800494c:	76da      	strb	r2, [r3, #27]
 800494e:	f7ff bd43 	b.w	80043d8 <RDMHandler::RespondMessageAck()>
	...

08004954 <RDMHandler::SetPersonality(bool, unsigned short)>:
 8004954:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004956:	6843      	ldr	r3, [r0, #4]
 8004958:	4611      	mov	r1, r2
 800495a:	7d9a      	ldrb	r2, [r3, #22]
 800495c:	2a01      	cmp	r2, #1
 800495e:	4604      	mov	r4, r0
 8004960:	d005      	beq.n	800496e <RDMHandler::SetPersonality(bool, unsigned short)+0x1a>
 8004962:	2101      	movs	r1, #1
 8004964:	b002      	add	sp, #8
 8004966:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800496a:	f7ff bf59 	b.w	8004820 <RDMHandler::RespondMessageNack(unsigned short)>
 800496e:	4e0d      	ldr	r6, [pc, #52]	; (80049a4 <RDMHandler::SetPersonality(bool, unsigned short)+0x50>)
 8004970:	7ddd      	ldrb	r5, [r3, #23]
 8004972:	6830      	ldr	r0, [r6, #0]
 8004974:	9101      	str	r1, [sp, #4]
 8004976:	f7ff fc95 	bl	80042a4 <RDMDeviceResponder::GetPersonalityCount(unsigned short)>
 800497a:	b115      	cbz	r5, 8004982 <RDMHandler::SetPersonality(bool, unsigned short)+0x2e>
 800497c:	4285      	cmp	r5, r0
 800497e:	9901      	ldr	r1, [sp, #4]
 8004980:	d902      	bls.n	8004988 <RDMHandler::SetPersonality(bool, unsigned short)+0x34>
 8004982:	2106      	movs	r1, #6
 8004984:	4620      	mov	r0, r4
 8004986:	e7ed      	b.n	8004964 <RDMHandler::SetPersonality(bool, unsigned short)+0x10>
 8004988:	6830      	ldr	r0, [r6, #0]
 800498a:	462a      	mov	r2, r5
 800498c:	f7ff fc91 	bl	80042b2 <RDMDeviceResponder::SetPersonalityCurrent(unsigned short, unsigned char)>
 8004990:	68a3      	ldr	r3, [r4, #8]
 8004992:	2200      	movs	r2, #0
 8004994:	4620      	mov	r0, r4
 8004996:	75da      	strb	r2, [r3, #23]
 8004998:	b002      	add	sp, #8
 800499a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800499e:	f7ff bd1b 	b.w	80043d8 <RDMHandler::RespondMessageAck()>
 80049a2:	bf00      	nop
 80049a4:	200015e0 	andcs	r1, r0, r0, ror #11

080049a8 <RDMHandler::GetPersonalityDescription(unsigned short)>:
 80049a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80049ac:	6843      	ldr	r3, [r0, #4]
 80049ae:	f8df 9078 	ldr.w	r9, [pc, #120]	; 8004a28 <RDMHandler::GetPersonalityDescription(unsigned short)+0x80>
 80049b2:	7dde      	ldrb	r6, [r3, #23]
 80049b4:	4604      	mov	r4, r0
 80049b6:	f8d9 0000 	ldr.w	r0, [r9]
 80049ba:	460f      	mov	r7, r1
 80049bc:	f7ff fc72 	bl	80042a4 <RDMDeviceResponder::GetPersonalityCount(unsigned short)>
 80049c0:	b10e      	cbz	r6, 80049c6 <RDMHandler::GetPersonalityDescription(unsigned short)+0x1e>
 80049c2:	4286      	cmp	r6, r0
 80049c4:	d905      	bls.n	80049d2 <RDMHandler::GetPersonalityDescription(unsigned short)+0x2a>
 80049c6:	4620      	mov	r0, r4
 80049c8:	2106      	movs	r1, #6
 80049ca:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80049ce:	f7ff bf27 	b.w	8004820 <RDMHandler::RespondMessageNack(unsigned short)>
 80049d2:	4632      	mov	r2, r6
 80049d4:	4639      	mov	r1, r7
 80049d6:	f8d9 0000 	ldr.w	r0, [r9]
 80049da:	f7ff fc58 	bl	800428e <RDMDeviceResponder::GetPersonality(unsigned short, unsigned char)>
 80049de:	8803      	ldrh	r3, [r0, #0]
 80049e0:	68a5      	ldr	r5, [r4, #8]
 80049e2:	f8d9 0000 	ldr.w	r0, [r9]
 80049e6:	76ab      	strb	r3, [r5, #26]
 80049e8:	0a1a      	lsrs	r2, r3, #8
 80049ea:	766a      	strb	r2, [r5, #25]
 80049ec:	4639      	mov	r1, r7
 80049ee:	762e      	strb	r6, [r5, #24]
 80049f0:	4632      	mov	r2, r6
 80049f2:	f7ff fc4c 	bl	800428e <RDMDeviceResponder::GetPersonality(unsigned short, unsigned char)>
 80049f6:	f105 081b 	add.w	r8, r5, #27
 80049fa:	1dc1      	adds	r1, r0, #7
 80049fc:	2300      	movs	r3, #0
 80049fe:	6a86      	ldr	r6, [r0, #40]	; 0x28
 8004a00:	42b3      	cmp	r3, r6
 8004a02:	b2da      	uxtb	r2, r3
 8004a04:	d203      	bcs.n	8004a0e <RDMHandler::GetPersonalityDescription(unsigned short)+0x66>
 8004a06:	3301      	adds	r3, #1
 8004a08:	2b21      	cmp	r3, #33	; 0x21
 8004a0a:	d107      	bne.n	8004a1c <RDMHandler::GetPersonalityDescription(unsigned short)+0x74>
 8004a0c:	2220      	movs	r2, #32
 8004a0e:	3203      	adds	r2, #3
 8004a10:	75ea      	strb	r2, [r5, #23]
 8004a12:	4620      	mov	r0, r4
 8004a14:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004a18:	f7ff bcde 	b.w	80043d8 <RDMHandler::RespondMessageAck()>
 8004a1c:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8004a20:	f808 2b01 	strb.w	r2, [r8], #1
 8004a24:	e7eb      	b.n	80049fe <RDMHandler::GetPersonalityDescription(unsigned short)+0x56>
 8004a26:	bf00      	nop
 8004a28:	200015e0 	andcs	r1, r0, r0, ror #11

08004a2c <RDMHandler::SetDmxStartAddress(bool, unsigned short)>:
 8004a2c:	b538      	push	{r3, r4, r5, lr}
 8004a2e:	6843      	ldr	r3, [r0, #4]
 8004a30:	460d      	mov	r5, r1
 8004a32:	4611      	mov	r1, r2
 8004a34:	7d9a      	ldrb	r2, [r3, #22]
 8004a36:	2a02      	cmp	r2, #2
 8004a38:	4604      	mov	r4, r0
 8004a3a:	d004      	beq.n	8004a46 <RDMHandler::SetDmxStartAddress(bool, unsigned short)+0x1a>
 8004a3c:	2101      	movs	r1, #1
 8004a3e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004a42:	f7ff beed 	b.w	8004820 <RDMHandler::RespondMessageNack(unsigned short)>
 8004a46:	7dda      	ldrb	r2, [r3, #23]
 8004a48:	7e1b      	ldrb	r3, [r3, #24]
 8004a4a:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8004a4e:	b29a      	uxth	r2, r3
 8004a50:	1e53      	subs	r3, r2, #1
 8004a52:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004a56:	d301      	bcc.n	8004a5c <RDMHandler::SetDmxStartAddress(bool, unsigned short)+0x30>
 8004a58:	2106      	movs	r1, #6
 8004a5a:	e7f0      	b.n	8004a3e <RDMHandler::SetDmxStartAddress(bool, unsigned short)+0x12>
 8004a5c:	4b06      	ldr	r3, [pc, #24]	; (8004a78 <RDMHandler::SetDmxStartAddress(bool, unsigned short)+0x4c>)
 8004a5e:	6818      	ldr	r0, [r3, #0]
 8004a60:	f7ff fbec 	bl	800423c <RDMDeviceResponder::SetDmxStartAddress(unsigned short, unsigned short)>
 8004a64:	b935      	cbnz	r5, 8004a74 <RDMHandler::SetDmxStartAddress(bool, unsigned short)+0x48>
 8004a66:	68a3      	ldr	r3, [r4, #8]
 8004a68:	75dd      	strb	r5, [r3, #23]
 8004a6a:	4620      	mov	r0, r4
 8004a6c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004a70:	f7ff bcb2 	b.w	80043d8 <RDMHandler::RespondMessageAck()>
 8004a74:	bd38      	pop	{r3, r4, r5, pc}
 8004a76:	bf00      	nop
 8004a78:	200015e0 	andcs	r1, r0, r0, ror #11

08004a7c <RDMHandler::GetSensorDefinition(unsigned short)>:
 8004a7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a7e:	6843      	ldr	r3, [r0, #4]
 8004a80:	7dde      	ldrb	r6, [r3, #23]
 8004a82:	2eff      	cmp	r6, #255	; 0xff
 8004a84:	4605      	mov	r5, r0
 8004a86:	d004      	beq.n	8004a92 <RDMHandler::GetSensorDefinition(unsigned short)+0x16>
 8004a88:	4b25      	ldr	r3, [pc, #148]	; (8004b20 <RDMHandler::GetSensorDefinition(unsigned short)+0xa4>)
 8004a8a:	6818      	ldr	r0, [r3, #0]
 8004a8c:	7903      	ldrb	r3, [r0, #4]
 8004a8e:	42b3      	cmp	r3, r6
 8004a90:	d805      	bhi.n	8004a9e <RDMHandler::GetSensorDefinition(unsigned short)+0x22>
 8004a92:	4628      	mov	r0, r5
 8004a94:	2106      	movs	r1, #6
 8004a96:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8004a9a:	f7ff bec1 	b.w	8004820 <RDMHandler::RespondMessageNack(unsigned short)>
 8004a9e:	4631      	mov	r1, r6
 8004aa0:	68ac      	ldr	r4, [r5, #8]
 8004aa2:	f7fd fb69 	bl	8002178 <RDMSensors::GetDefintion(unsigned char)>
 8004aa6:	7802      	ldrb	r2, [r0, #0]
 8004aa8:	42b2      	cmp	r2, r6
 8004aaa:	4603      	mov	r3, r0
 8004aac:	d1f1      	bne.n	8004a92 <RDMHandler::GetSensorDefinition(unsigned short)+0x16>
 8004aae:	7622      	strb	r2, [r4, #24]
 8004ab0:	7842      	ldrb	r2, [r0, #1]
 8004ab2:	7662      	strb	r2, [r4, #25]
 8004ab4:	7882      	ldrb	r2, [r0, #2]
 8004ab6:	76a2      	strb	r2, [r4, #26]
 8004ab8:	78c2      	ldrb	r2, [r0, #3]
 8004aba:	76e2      	strb	r2, [r4, #27]
 8004abc:	f990 2005 	ldrsb.w	r2, [r0, #5]
 8004ac0:	7722      	strb	r2, [r4, #28]
 8004ac2:	8882      	ldrh	r2, [r0, #4]
 8004ac4:	7762      	strb	r2, [r4, #29]
 8004ac6:	f990 2007 	ldrsb.w	r2, [r0, #7]
 8004aca:	77a2      	strb	r2, [r4, #30]
 8004acc:	88c2      	ldrh	r2, [r0, #6]
 8004ace:	77e2      	strb	r2, [r4, #31]
 8004ad0:	f990 2009 	ldrsb.w	r2, [r0, #9]
 8004ad4:	f884 2020 	strb.w	r2, [r4, #32]
 8004ad8:	8902      	ldrh	r2, [r0, #8]
 8004ada:	f884 2021 	strb.w	r2, [r4, #33]	; 0x21
 8004ade:	f990 200b 	ldrsb.w	r2, [r0, #11]
 8004ae2:	f884 2022 	strb.w	r2, [r4, #34]	; 0x22
 8004ae6:	8942      	ldrh	r2, [r0, #10]
 8004ae8:	f884 2023 	strb.w	r2, [r4, #35]	; 0x23
 8004aec:	4621      	mov	r1, r4
 8004aee:	f890 202d 	ldrb.w	r2, [r0, #45]	; 0x2d
 8004af2:	f801 2f24 	strb.w	r2, [r1, #36]!
 8004af6:	300b      	adds	r0, #11
 8004af8:	220d      	movs	r2, #13
 8004afa:	f893 702c 	ldrb.w	r7, [r3, #44]	; 0x2c
 8004afe:	f1a2 060d 	sub.w	r6, r2, #13
 8004b02:	42b7      	cmp	r7, r6
 8004b04:	dc05      	bgt.n	8004b12 <RDMHandler::GetSensorDefinition(unsigned short)+0x96>
 8004b06:	75e2      	strb	r2, [r4, #23]
 8004b08:	4628      	mov	r0, r5
 8004b0a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8004b0e:	f7ff bc63 	b.w	80043d8 <RDMHandler::RespondMessageAck()>
 8004b12:	f810 6f01 	ldrb.w	r6, [r0, #1]!
 8004b16:	f801 6f01 	strb.w	r6, [r1, #1]!
 8004b1a:	3201      	adds	r2, #1
 8004b1c:	e7ed      	b.n	8004afa <RDMHandler::GetSensorDefinition(unsigned short)+0x7e>
 8004b1e:	bf00      	nop
 8004b20:	20001194 	mulcs	r0, r4, r1

08004b24 <RDMHandler::GetSensorValue(unsigned short)>:
 8004b24:	b570      	push	{r4, r5, r6, lr}
 8004b26:	6843      	ldr	r3, [r0, #4]
 8004b28:	7d9a      	ldrb	r2, [r3, #22]
 8004b2a:	2a01      	cmp	r2, #1
 8004b2c:	4605      	mov	r5, r0
 8004b2e:	d004      	beq.n	8004b3a <RDMHandler::GetSensorValue(unsigned short)+0x16>
 8004b30:	2101      	movs	r1, #1
 8004b32:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8004b36:	f7ff be73 	b.w	8004820 <RDMHandler::RespondMessageNack(unsigned short)>
 8004b3a:	7dde      	ldrb	r6, [r3, #23]
 8004b3c:	2eff      	cmp	r6, #255	; 0xff
 8004b3e:	d004      	beq.n	8004b4a <RDMHandler::GetSensorValue(unsigned short)+0x26>
 8004b40:	4b17      	ldr	r3, [pc, #92]	; (8004ba0 <RDMHandler::GetSensorValue(unsigned short)+0x7c>)
 8004b42:	6818      	ldr	r0, [r3, #0]
 8004b44:	7903      	ldrb	r3, [r0, #4]
 8004b46:	42b3      	cmp	r3, r6
 8004b48:	d802      	bhi.n	8004b50 <RDMHandler::GetSensorValue(unsigned short)+0x2c>
 8004b4a:	2106      	movs	r1, #6
 8004b4c:	4628      	mov	r0, r5
 8004b4e:	e7f0      	b.n	8004b32 <RDMHandler::GetSensorValue(unsigned short)+0xe>
 8004b50:	4631      	mov	r1, r6
 8004b52:	68ac      	ldr	r4, [r5, #8]
 8004b54:	f7fd fb15 	bl	8002182 <RDMSensors::GetValues(unsigned char)>
 8004b58:	7a03      	ldrb	r3, [r0, #8]
 8004b5a:	42b3      	cmp	r3, r6
 8004b5c:	d1f5      	bne.n	8004b4a <RDMHandler::GetSensorValue(unsigned short)+0x26>
 8004b5e:	2309      	movs	r3, #9
 8004b60:	75e3      	strb	r3, [r4, #23]
 8004b62:	2321      	movs	r3, #33	; 0x21
 8004b64:	70a3      	strb	r3, [r4, #2]
 8004b66:	7a03      	ldrb	r3, [r0, #8]
 8004b68:	7623      	strb	r3, [r4, #24]
 8004b6a:	f990 3001 	ldrsb.w	r3, [r0, #1]
 8004b6e:	7663      	strb	r3, [r4, #25]
 8004b70:	8803      	ldrh	r3, [r0, #0]
 8004b72:	76a3      	strb	r3, [r4, #26]
 8004b74:	f990 3003 	ldrsb.w	r3, [r0, #3]
 8004b78:	76e3      	strb	r3, [r4, #27]
 8004b7a:	8843      	ldrh	r3, [r0, #2]
 8004b7c:	7723      	strb	r3, [r4, #28]
 8004b7e:	f990 3005 	ldrsb.w	r3, [r0, #5]
 8004b82:	7763      	strb	r3, [r4, #29]
 8004b84:	8883      	ldrh	r3, [r0, #4]
 8004b86:	77a3      	strb	r3, [r4, #30]
 8004b88:	f990 3007 	ldrsb.w	r3, [r0, #7]
 8004b8c:	77e3      	strb	r3, [r4, #31]
 8004b8e:	88c3      	ldrh	r3, [r0, #6]
 8004b90:	f884 3020 	strb.w	r3, [r4, #32]
 8004b94:	4628      	mov	r0, r5
 8004b96:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8004b9a:	f7ff bc1d 	b.w	80043d8 <RDMHandler::RespondMessageAck()>
 8004b9e:	bf00      	nop
 8004ba0:	20001194 	mulcs	r0, r4, r1

08004ba4 <RDMHandler::SetSensorValue(bool, unsigned short)>:
 8004ba4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004ba8:	6843      	ldr	r3, [r0, #4]
 8004baa:	7d9a      	ldrb	r2, [r3, #22]
 8004bac:	2a01      	cmp	r2, #1
 8004bae:	4606      	mov	r6, r0
 8004bb0:	460d      	mov	r5, r1
 8004bb2:	d004      	beq.n	8004bbe <RDMHandler::SetSensorValue(bool, unsigned short)+0x1a>
 8004bb4:	2101      	movs	r1, #1
 8004bb6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004bba:	f7ff be31 	b.w	8004820 <RDMHandler::RespondMessageNack(unsigned short)>
 8004bbe:	7ddf      	ldrb	r7, [r3, #23]
 8004bc0:	f8df 8090 	ldr.w	r8, [pc, #144]	; 8004c54 <RDMHandler::SetSensorValue(bool, unsigned short)+0xb0>
 8004bc4:	2fff      	cmp	r7, #255	; 0xff
 8004bc6:	f8d8 3000 	ldr.w	r3, [r8]
 8004bca:	d004      	beq.n	8004bd6 <RDMHandler::SetSensorValue(bool, unsigned short)+0x32>
 8004bcc:	791a      	ldrb	r2, [r3, #4]
 8004bce:	42ba      	cmp	r2, r7
 8004bd0:	d801      	bhi.n	8004bd6 <RDMHandler::SetSensorValue(bool, unsigned short)+0x32>
 8004bd2:	2106      	movs	r1, #6
 8004bd4:	e7ef      	b.n	8004bb6 <RDMHandler::SetSensorValue(bool, unsigned short)+0x12>
 8004bd6:	4639      	mov	r1, r7
 8004bd8:	4618      	mov	r0, r3
 8004bda:	f7fd fad7 	bl	800218c <RDMSensors::SetValues(unsigned char)>
 8004bde:	bbb5      	cbnz	r5, 8004c4e <RDMHandler::SetSensorValue(bool, unsigned short)+0xaa>
 8004be0:	2fff      	cmp	r7, #255	; 0xff
 8004be2:	68b4      	ldr	r4, [r6, #8]
 8004be4:	d112      	bne.n	8004c0c <RDMHandler::SetSensorValue(bool, unsigned short)+0x68>
 8004be6:	2309      	movs	r3, #9
 8004be8:	75e3      	strb	r3, [r4, #23]
 8004bea:	2321      	movs	r3, #33	; 0x21
 8004bec:	70a3      	strb	r3, [r4, #2]
 8004bee:	7625      	strb	r5, [r4, #24]
 8004bf0:	7665      	strb	r5, [r4, #25]
 8004bf2:	76a5      	strb	r5, [r4, #26]
 8004bf4:	76e5      	strb	r5, [r4, #27]
 8004bf6:	7725      	strb	r5, [r4, #28]
 8004bf8:	7765      	strb	r5, [r4, #29]
 8004bfa:	77a5      	strb	r5, [r4, #30]
 8004bfc:	77e5      	strb	r5, [r4, #31]
 8004bfe:	f884 5020 	strb.w	r5, [r4, #32]
 8004c02:	4630      	mov	r0, r6
 8004c04:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004c08:	f7ff bbe6 	b.w	80043d8 <RDMHandler::RespondMessageAck()>
 8004c0c:	f8d8 0000 	ldr.w	r0, [r8]
 8004c10:	4639      	mov	r1, r7
 8004c12:	f7fd fab6 	bl	8002182 <RDMSensors::GetValues(unsigned char)>
 8004c16:	2309      	movs	r3, #9
 8004c18:	75e3      	strb	r3, [r4, #23]
 8004c1a:	2321      	movs	r3, #33	; 0x21
 8004c1c:	70a3      	strb	r3, [r4, #2]
 8004c1e:	7a03      	ldrb	r3, [r0, #8]
 8004c20:	7623      	strb	r3, [r4, #24]
 8004c22:	f990 3001 	ldrsb.w	r3, [r0, #1]
 8004c26:	7663      	strb	r3, [r4, #25]
 8004c28:	8803      	ldrh	r3, [r0, #0]
 8004c2a:	76a3      	strb	r3, [r4, #26]
 8004c2c:	f990 3003 	ldrsb.w	r3, [r0, #3]
 8004c30:	76e3      	strb	r3, [r4, #27]
 8004c32:	8843      	ldrh	r3, [r0, #2]
 8004c34:	7723      	strb	r3, [r4, #28]
 8004c36:	f990 3005 	ldrsb.w	r3, [r0, #5]
 8004c3a:	7763      	strb	r3, [r4, #29]
 8004c3c:	8883      	ldrh	r3, [r0, #4]
 8004c3e:	77a3      	strb	r3, [r4, #30]
 8004c40:	f990 3007 	ldrsb.w	r3, [r0, #7]
 8004c44:	77e3      	strb	r3, [r4, #31]
 8004c46:	88c3      	ldrh	r3, [r0, #6]
 8004c48:	f884 3020 	strb.w	r3, [r4, #32]
 8004c4c:	e7d9      	b.n	8004c02 <RDMHandler::SetSensorValue(bool, unsigned short)+0x5e>
 8004c4e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004c52:	bf00      	nop
 8004c54:	20001194 	mulcs	r0, r4, r1

08004c58 <RDMHandler::SetRecordSensors(bool, unsigned short)>:
 8004c58:	b538      	push	{r3, r4, r5, lr}
 8004c5a:	6843      	ldr	r3, [r0, #4]
 8004c5c:	7d9a      	ldrb	r2, [r3, #22]
 8004c5e:	2a01      	cmp	r2, #1
 8004c60:	4604      	mov	r4, r0
 8004c62:	460d      	mov	r5, r1
 8004c64:	d004      	beq.n	8004c70 <RDMHandler::SetRecordSensors(bool, unsigned short)+0x18>
 8004c66:	2101      	movs	r1, #1
 8004c68:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004c6c:	f7ff bdd8 	b.w	8004820 <RDMHandler::RespondMessageNack(unsigned short)>
 8004c70:	7dd9      	ldrb	r1, [r3, #23]
 8004c72:	4b0b      	ldr	r3, [pc, #44]	; (8004ca0 <RDMHandler::SetRecordSensors(bool, unsigned short)+0x48>)
 8004c74:	6818      	ldr	r0, [r3, #0]
 8004c76:	29ff      	cmp	r1, #255	; 0xff
 8004c78:	7903      	ldrb	r3, [r0, #4]
 8004c7a:	d103      	bne.n	8004c84 <RDMHandler::SetRecordSensors(bool, unsigned short)+0x2c>
 8004c7c:	b923      	cbnz	r3, 8004c88 <RDMHandler::SetRecordSensors(bool, unsigned short)+0x30>
 8004c7e:	2106      	movs	r1, #6
 8004c80:	4620      	mov	r0, r4
 8004c82:	e7f1      	b.n	8004c68 <RDMHandler::SetRecordSensors(bool, unsigned short)+0x10>
 8004c84:	4299      	cmp	r1, r3
 8004c86:	d2fa      	bcs.n	8004c7e <RDMHandler::SetRecordSensors(bool, unsigned short)+0x26>
 8004c88:	f7fd fa97 	bl	80021ba <RDMSensors::SetRecord(unsigned char)>
 8004c8c:	b935      	cbnz	r5, 8004c9c <RDMHandler::SetRecordSensors(bool, unsigned short)+0x44>
 8004c8e:	68a3      	ldr	r3, [r4, #8]
 8004c90:	75dd      	strb	r5, [r3, #23]
 8004c92:	4620      	mov	r0, r4
 8004c94:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004c98:	f7ff bb9e 	b.w	80043d8 <RDMHandler::RespondMessageAck()>
 8004c9c:	bd38      	pop	{r3, r4, r5, pc}
 8004c9e:	bf00      	nop
 8004ca0:	20001194 	mulcs	r0, r4, r1

08004ca4 <RDMHandler::SetDeviceHours(bool, unsigned short)>:
 8004ca4:	2104      	movs	r1, #4
 8004ca6:	f7ff bdbb 	b.w	8004820 <RDMHandler::RespondMessageNack(unsigned short)>
	...

08004cac <RDMHandler::SetDisplayInvert(bool, unsigned short)>:
 8004cac:	b538      	push	{r3, r4, r5, lr}
 8004cae:	6843      	ldr	r3, [r0, #4]
 8004cb0:	7d9a      	ldrb	r2, [r3, #22]
 8004cb2:	2a01      	cmp	r2, #1
 8004cb4:	4604      	mov	r4, r0
 8004cb6:	d004      	beq.n	8004cc2 <RDMHandler::SetDisplayInvert(bool, unsigned short)+0x16>
 8004cb8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004cbc:	2101      	movs	r1, #1
 8004cbe:	f7ff bdaf 	b.w	8004820 <RDMHandler::RespondMessageNack(unsigned short)>
 8004cc2:	7ddd      	ldrb	r5, [r3, #23]
 8004cc4:	2d02      	cmp	r5, #2
 8004cc6:	d102      	bne.n	8004cce <RDMHandler::SetDisplayInvert(bool, unsigned short)+0x22>
 8004cc8:	2106      	movs	r1, #6
 8004cca:	f7ff fda9 	bl	8004820 <RDMHandler::RespondMessageNack(unsigned short)>
 8004cce:	4b09      	ldr	r3, [pc, #36]	; (8004cf4 <RDMHandler::SetDisplayInvert(bool, unsigned short)+0x48>)
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	1e6a      	subs	r2, r5, #1
 8004cd4:	4251      	negs	r1, r2
 8004cd6:	69d8      	ldr	r0, [r3, #28]
 8004cd8:	4151      	adcs	r1, r2
 8004cda:	7659      	strb	r1, [r3, #25]
 8004cdc:	b110      	cbz	r0, 8004ce4 <RDMHandler::SetDisplayInvert(bool, unsigned short)+0x38>
 8004cde:	6803      	ldr	r3, [r0, #0]
 8004ce0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ce2:	4798      	blx	r3
 8004ce4:	68a3      	ldr	r3, [r4, #8]
 8004ce6:	2200      	movs	r2, #0
 8004ce8:	75da      	strb	r2, [r3, #23]
 8004cea:	4620      	mov	r0, r4
 8004cec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004cf0:	f7ff bb72 	b.w	80043d8 <RDMHandler::RespondMessageAck()>
 8004cf4:	20002684 	andcs	r2, r0, r4, lsl #13

08004cf8 <RDMHandler::SetDisplayLevel(bool, unsigned short)>:
 8004cf8:	b570      	push	{r4, r5, r6, lr}
 8004cfa:	6843      	ldr	r3, [r0, #4]
 8004cfc:	7d99      	ldrb	r1, [r3, #22]
 8004cfe:	2901      	cmp	r1, #1
 8004d00:	4604      	mov	r4, r0
 8004d02:	d004      	beq.n	8004d0e <RDMHandler::SetDisplayLevel(bool, unsigned short)+0x16>
 8004d04:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8004d08:	2101      	movs	r1, #1
 8004d0a:	f7ff bd89 	b.w	8004820 <RDMHandler::RespondMessageNack(unsigned short)>
 8004d0e:	4e0b      	ldr	r6, [pc, #44]	; (8004d3c <RDMHandler::SetDisplayLevel(bool, unsigned short)+0x44>)
 8004d10:	7ddd      	ldrb	r5, [r3, #23]
 8004d12:	6830      	ldr	r0, [r6, #0]
 8004d14:	b105      	cbz	r5, 8004d18 <RDMHandler::SetDisplayLevel(bool, unsigned short)+0x20>
 8004d16:	2100      	movs	r1, #0
 8004d18:	f7fb ff24 	bl	8000b64 <Display::SetSleep(bool)>
 8004d1c:	6833      	ldr	r3, [r6, #0]
 8004d1e:	69d8      	ldr	r0, [r3, #28]
 8004d20:	761d      	strb	r5, [r3, #24]
 8004d22:	b118      	cbz	r0, 8004d2c <RDMHandler::SetDisplayLevel(bool, unsigned short)+0x34>
 8004d24:	6803      	ldr	r3, [r0, #0]
 8004d26:	4629      	mov	r1, r5
 8004d28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d2a:	4798      	blx	r3
 8004d2c:	68a3      	ldr	r3, [r4, #8]
 8004d2e:	2200      	movs	r2, #0
 8004d30:	75da      	strb	r2, [r3, #23]
 8004d32:	4620      	mov	r0, r4
 8004d34:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8004d38:	f7ff bb4e 	b.w	80043d8 <RDMHandler::RespondMessageAck()>
 8004d3c:	20002684 	andcs	r2, r0, r4, lsl #13

08004d40 <RDMHandler::SetRealTimeClock(bool, unsigned short)>:
 8004d40:	b510      	push	{r4, lr}
 8004d42:	6843      	ldr	r3, [r0, #4]
 8004d44:	7d9a      	ldrb	r2, [r3, #22]
 8004d46:	2a07      	cmp	r2, #7
 8004d48:	b08a      	sub	sp, #40	; 0x28
 8004d4a:	4604      	mov	r4, r0
 8004d4c:	d005      	beq.n	8004d5a <RDMHandler::SetRealTimeClock(bool, unsigned short)+0x1a>
 8004d4e:	2101      	movs	r1, #1
 8004d50:	b00a      	add	sp, #40	; 0x28
 8004d52:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004d56:	f7ff bd63 	b.w	8004820 <RDMHandler::RespondMessageNack(unsigned short)>
 8004d5a:	7dd8      	ldrb	r0, [r3, #23]
 8004d5c:	7e1a      	ldrb	r2, [r3, #24]
 8004d5e:	eb02 2200 	add.w	r2, r2, r0, lsl #8
 8004d62:	f2a2 726c 	subw	r2, r2, #1900	; 0x76c
 8004d66:	9206      	str	r2, [sp, #24]
 8004d68:	7e5a      	ldrb	r2, [r3, #25]
 8004d6a:	3a01      	subs	r2, #1
 8004d6c:	9205      	str	r2, [sp, #20]
 8004d6e:	7e9a      	ldrb	r2, [r3, #26]
 8004d70:	9204      	str	r2, [sp, #16]
 8004d72:	7eda      	ldrb	r2, [r3, #27]
 8004d74:	9203      	str	r2, [sp, #12]
 8004d76:	7f1a      	ldrb	r2, [r3, #28]
 8004d78:	7f5b      	ldrb	r3, [r3, #29]
 8004d7a:	9202      	str	r2, [sp, #8]
 8004d7c:	9301      	str	r3, [sp, #4]
 8004d7e:	b979      	cbnz	r1, 8004da0 <RDMHandler::SetRealTimeClock(bool, unsigned short)+0x60>
 8004d80:	4b08      	ldr	r3, [pc, #32]	; (8004da4 <RDMHandler::SetRealTimeClock(bool, unsigned short)+0x64>)
 8004d82:	a901      	add	r1, sp, #4
 8004d84:	6818      	ldr	r0, [r3, #0]
 8004d86:	f003 f9dd 	bl	8008144 <Hardware::SetTime(tm const*)>
 8004d8a:	b918      	cbnz	r0, 8004d94 <RDMHandler::SetRealTimeClock(bool, unsigned short)+0x54>
 8004d8c:	2104      	movs	r1, #4
 8004d8e:	4620      	mov	r0, r4
 8004d90:	f7ff fd46 	bl	8004820 <RDMHandler::RespondMessageNack(unsigned short)>
 8004d94:	68a3      	ldr	r3, [r4, #8]
 8004d96:	2200      	movs	r2, #0
 8004d98:	75da      	strb	r2, [r3, #23]
 8004d9a:	4620      	mov	r0, r4
 8004d9c:	f7ff fb1c 	bl	80043d8 <RDMHandler::RespondMessageAck()>
 8004da0:	b00a      	add	sp, #40	; 0x28
 8004da2:	bd10      	pop	{r4, pc}
 8004da4:	20002770 	andcs	r2, r0, r0, ror r7

08004da8 <RDMHandler::SetPowerState(bool, unsigned short)>:
 8004da8:	6842      	ldr	r2, [r0, #4]
 8004daa:	7d91      	ldrb	r1, [r2, #22]
 8004dac:	2901      	cmp	r1, #1
 8004dae:	d002      	beq.n	8004db6 <RDMHandler::SetPowerState(bool, unsigned short)+0xe>
 8004db0:	2101      	movs	r1, #1
 8004db2:	f7ff bd35 	b.w	8004820 <RDMHandler::RespondMessageNack(unsigned short)>
 8004db6:	7dd1      	ldrb	r1, [r2, #23]
 8004db8:	1eca      	subs	r2, r1, #3
 8004dba:	b2d2      	uxtb	r2, r2
 8004dbc:	2afb      	cmp	r2, #251	; 0xfb
 8004dbe:	d801      	bhi.n	8004dc4 <RDMHandler::SetPowerState(bool, unsigned short)+0x1c>
 8004dc0:	2106      	movs	r1, #6
 8004dc2:	e7f6      	b.n	8004db2 <RDMHandler::SetPowerState(bool, unsigned short)+0xa>
 8004dc4:	29ff      	cmp	r1, #255	; 0xff
 8004dc6:	6883      	ldr	r3, [r0, #8]
 8004dc8:	d103      	bne.n	8004dd2 <RDMHandler::SetPowerState(bool, unsigned short)+0x2a>
 8004dca:	2200      	movs	r2, #0
 8004dcc:	75da      	strb	r2, [r3, #23]
 8004dce:	f7ff bb03 	b.w	80043d8 <RDMHandler::RespondMessageAck()>
 8004dd2:	2104      	movs	r1, #4
 8004dd4:	e7ed      	b.n	8004db2 <RDMHandler::SetPowerState(bool, unsigned short)+0xa>

08004dd6 <RDMHandler::SetPerformSelfTest(bool, unsigned short)>:
 8004dd6:	b510      	push	{r4, lr}
 8004dd8:	6843      	ldr	r3, [r0, #4]
 8004dda:	7d9a      	ldrb	r2, [r3, #22]
 8004ddc:	2a01      	cmp	r2, #1
 8004dde:	4604      	mov	r4, r0
 8004de0:	d004      	beq.n	8004dec <RDMHandler::SetPerformSelfTest(bool, unsigned short)+0x16>
 8004de2:	2101      	movs	r1, #1
 8004de4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004de8:	f7ff bd1a 	b.w	8004820 <RDMHandler::RespondMessageNack(unsigned short)>
 8004dec:	7dd8      	ldrb	r0, [r3, #23]
 8004dee:	f7fc fb27 	bl	8001440 <rdm::selftest::Set(unsigned char)>
 8004df2:	b910      	cbnz	r0, 8004dfa <RDMHandler::SetPerformSelfTest(bool, unsigned short)+0x24>
 8004df4:	2106      	movs	r1, #6
 8004df6:	4620      	mov	r0, r4
 8004df8:	e7f4      	b.n	8004de4 <RDMHandler::SetPerformSelfTest(bool, unsigned short)+0xe>
 8004dfa:	68a3      	ldr	r3, [r4, #8]
 8004dfc:	2200      	movs	r2, #0
 8004dfe:	75da      	strb	r2, [r3, #23]
 8004e00:	4620      	mov	r0, r4
 8004e02:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004e06:	f7ff bae7 	b.w	80043d8 <RDMHandler::RespondMessageAck()>

08004e0a <RDMHandler::GetSelfTestDescription(unsigned short)>:
 8004e0a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004e0c:	6845      	ldr	r5, [r0, #4]
 8004e0e:	4604      	mov	r4, r0
 8004e10:	a901      	add	r1, sp, #4
 8004e12:	7de8      	ldrb	r0, [r5, #23]
 8004e14:	f7fc fb48 	bl	80014a8 <rdm::selftest::GetDescription(unsigned char, unsigned long&)>
 8004e18:	4603      	mov	r3, r0
 8004e1a:	b928      	cbnz	r0, 8004e28 <RDMHandler::GetSelfTestDescription(unsigned short)+0x1e>
 8004e1c:	2106      	movs	r1, #6
 8004e1e:	4620      	mov	r0, r4
 8004e20:	f7ff fcfe 	bl	8004820 <RDMHandler::RespondMessageNack(unsigned short)>
 8004e24:	b003      	add	sp, #12
 8004e26:	bd30      	pop	{r4, r5, pc}
 8004e28:	9a01      	ldr	r2, [sp, #4]
 8004e2a:	2a20      	cmp	r2, #32
 8004e2c:	bf84      	itt	hi
 8004e2e:	2220      	movhi	r2, #32
 8004e30:	9201      	strhi	r2, [sp, #4]
 8004e32:	9901      	ldr	r1, [sp, #4]
 8004e34:	68a2      	ldr	r2, [r4, #8]
 8004e36:	1c48      	adds	r0, r1, #1
 8004e38:	75d0      	strb	r0, [r2, #23]
 8004e3a:	7de8      	ldrb	r0, [r5, #23]
 8004e3c:	f802 0f18 	strb.w	r0, [r2, #24]!
 8004e40:	4419      	add	r1, r3
 8004e42:	428b      	cmp	r3, r1
 8004e44:	d103      	bne.n	8004e4e <RDMHandler::GetSelfTestDescription(unsigned short)+0x44>
 8004e46:	4620      	mov	r0, r4
 8004e48:	f7ff fac6 	bl	80043d8 <RDMHandler::RespondMessageAck()>
 8004e4c:	e7ea      	b.n	8004e24 <RDMHandler::GetSelfTestDescription(unsigned short)+0x1a>
 8004e4e:	f813 0b01 	ldrb.w	r0, [r3], #1
 8004e52:	f802 0f01 	strb.w	r0, [r2, #1]!
 8004e56:	e7f4      	b.n	8004e42 <RDMHandler::GetSelfTestDescription(unsigned short)+0x38>

08004e58 <RDMHandler::GetSlotDescription(unsigned short)>:
 8004e58:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004e5a:	4a1c      	ldr	r2, [pc, #112]	; (8004ecc <RDMHandler::GetSlotDescription(unsigned short)+0x74>)
 8004e5c:	6846      	ldr	r6, [r0, #4]
 8004e5e:	4604      	mov	r4, r0
 8004e60:	7df3      	ldrb	r3, [r6, #23]
 8004e62:	7e35      	ldrb	r5, [r6, #24]
 8004e64:	6810      	ldr	r0, [r2, #0]
 8004e66:	b939      	cbnz	r1, 8004e78 <RDMHandler::GetSlotDescription(unsigned short)+0x20>
 8004e68:	eb05 2503 	add.w	r5, r5, r3, lsl #8
 8004e6c:	b2ad      	uxth	r5, r5
 8004e6e:	466a      	mov	r2, sp
 8004e70:	4629      	mov	r1, r5
 8004e72:	f7ff f99b 	bl	80041ac <RDMDeviceResponder::GetSlotInfo(unsigned short, unsigned short, lightset::SlotInfo&) [clone .part.0]>
 8004e76:	b928      	cbnz	r0, 8004e84 <RDMHandler::GetSlotDescription(unsigned short)+0x2c>
 8004e78:	2106      	movs	r1, #6
 8004e7a:	4620      	mov	r0, r4
 8004e7c:	f7ff fcd0 	bl	8004820 <RDMHandler::RespondMessageNack(unsigned short)>
 8004e80:	b002      	add	sp, #8
 8004e82:	bd70      	pop	{r4, r5, r6, pc}
 8004e84:	f8bd 1000 	ldrh.w	r1, [sp]
 8004e88:	aa01      	add	r2, sp, #4
 8004e8a:	4628      	mov	r0, r5
 8004e8c:	f000 fa48 	bl	8005320 <RDMSlotInfo::GetCategoryText(unsigned short, unsigned short, unsigned long&)>
 8004e90:	4603      	mov	r3, r0
 8004e92:	2800      	cmp	r0, #0
 8004e94:	d0f0      	beq.n	8004e78 <RDMHandler::GetSlotDescription(unsigned short)+0x20>
 8004e96:	9a01      	ldr	r2, [sp, #4]
 8004e98:	2a20      	cmp	r2, #32
 8004e9a:	bf84      	itt	hi
 8004e9c:	2220      	movhi	r2, #32
 8004e9e:	9201      	strhi	r2, [sp, #4]
 8004ea0:	9901      	ldr	r1, [sp, #4]
 8004ea2:	68a2      	ldr	r2, [r4, #8]
 8004ea4:	1c88      	adds	r0, r1, #2
 8004ea6:	75d0      	strb	r0, [r2, #23]
 8004ea8:	7df0      	ldrb	r0, [r6, #23]
 8004eaa:	7610      	strb	r0, [r2, #24]
 8004eac:	7e30      	ldrb	r0, [r6, #24]
 8004eae:	f802 0f19 	strb.w	r0, [r2, #25]!
 8004eb2:	4419      	add	r1, r3
 8004eb4:	428b      	cmp	r3, r1
 8004eb6:	d103      	bne.n	8004ec0 <RDMHandler::GetSlotDescription(unsigned short)+0x68>
 8004eb8:	4620      	mov	r0, r4
 8004eba:	f7ff fa8d 	bl	80043d8 <RDMHandler::RespondMessageAck()>
 8004ebe:	e7df      	b.n	8004e80 <RDMHandler::GetSlotDescription(unsigned short)+0x28>
 8004ec0:	f813 0b01 	ldrb.w	r0, [r3], #1
 8004ec4:	f802 0f01 	strb.w	r0, [r2, #1]!
 8004ec8:	e7f4      	b.n	8004eb4 <RDMHandler::GetSlotDescription(unsigned short)+0x5c>
 8004eca:	bf00      	nop
 8004ecc:	200015e0 	andcs	r1, r0, r0, ror #11

08004ed0 <RDMHandler::SetFactoryDefaults(bool, unsigned short)>:
 8004ed0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004ed2:	6843      	ldr	r3, [r0, #4]
 8004ed4:	7d9b      	ldrb	r3, [r3, #22]
 8004ed6:	4605      	mov	r5, r0
 8004ed8:	460e      	mov	r6, r1
 8004eda:	b12b      	cbz	r3, 8004ee8 <RDMHandler::SetFactoryDefaults(bool, unsigned short)+0x18>
 8004edc:	2101      	movs	r1, #1
 8004ede:	b003      	add	sp, #12
 8004ee0:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8004ee4:	f7ff bc9c 	b.w	8004820 <RDMHandler::RespondMessageNack(unsigned short)>
 8004ee8:	4b25      	ldr	r3, [pc, #148]	; (8004f80 <RDMHandler::SetFactoryDefaults(bool, unsigned short)+0xb0>)
 8004eea:	681c      	ldr	r4, [r3, #0]
 8004eec:	4669      	mov	r1, sp
 8004eee:	f894 3059 	ldrb.w	r3, [r4, #89]	; 0x59
 8004ef2:	f88d 3004 	strb.w	r3, [sp, #4]
 8004ef6:	1d20      	adds	r0, r4, #4
 8004ef8:	9000      	str	r0, [sp, #0]
 8004efa:	f06f 0722 	mvn.w	r7, #34	; 0x22
 8004efe:	f7ff f97b 	bl	80041f8 <RDMDevice::SetLabel(TRDMDeviceInfoData const*)>
 8004f02:	f894 3059 	ldrb.w	r3, [r4, #89]	; 0x59
 8004f06:	f894 1058 	ldrb.w	r1, [r4, #88]	; 0x58
 8004f0a:	f104 0223 	add.w	r2, r4, #35	; 0x23
 8004f0e:	1b3f      	subs	r7, r7, r4
 8004f10:	18b8      	adds	r0, r7, r2
 8004f12:	4288      	cmp	r0, r1
 8004f14:	d32c      	bcc.n	8004f70 <RDMHandler::SetFactoryDefaults(bool, unsigned short)+0xa0>
 8004f16:	f8a4 304c 	strh.w	r3, [r4, #76]	; 0x4c
 8004f1a:	2201      	movs	r2, #1
 8004f1c:	2100      	movs	r1, #0
 8004f1e:	4620      	mov	r0, r4
 8004f20:	f7ff f9c7 	bl	80042b2 <RDMDeviceResponder::SetPersonalityCurrent(unsigned short, unsigned char)>
 8004f24:	f8b4 20a0 	ldrh.w	r2, [r4, #160]	; 0xa0
 8004f28:	2100      	movs	r1, #0
 8004f2a:	4620      	mov	r0, r4
 8004f2c:	f7ff f986 	bl	800423c <RDMDeviceResponder::SetDmxStartAddress(unsigned short, unsigned short)>
 8004f30:	2213      	movs	r2, #19
 8004f32:	f104 0175 	add.w	r1, r4, #117	; 0x75
 8004f36:	f104 0088 	add.w	r0, r4, #136	; 0x88
 8004f3a:	f7ff f943 	bl	80041c4 <memcpy.isra.0>
 8004f3e:	f104 0064 	add.w	r0, r4, #100	; 0x64
 8004f42:	f7fe fa07 	bl	8003354 <RDMSubDevices::SetFactoryDefaults()>
 8004f46:	f894 3084 	ldrb.w	r3, [r4, #132]	; 0x84
 8004f4a:	f894 2081 	ldrb.w	r2, [r4, #129]	; 0x81
 8004f4e:	4413      	add	r3, r2
 8004f50:	f8a4 309e 	strh.w	r3, [r4, #158]	; 0x9e
 8004f54:	2301      	movs	r3, #1
 8004f56:	f884 309d 	strb.w	r3, [r4, #157]	; 0x9d
 8004f5a:	f7fc f983 	bl	8001264 <rdm::device::responder::factorydefaults()>
 8004f5e:	b966      	cbnz	r6, 8004f7a <RDMHandler::SetFactoryDefaults(bool, unsigned short)+0xaa>
 8004f60:	68ab      	ldr	r3, [r5, #8]
 8004f62:	4628      	mov	r0, r5
 8004f64:	75de      	strb	r6, [r3, #23]
 8004f66:	b003      	add	sp, #12
 8004f68:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8004f6c:	f7ff ba34 	b.w	80043d8 <RDMHandler::RespondMessageAck()>
 8004f70:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 8004f74:	4403      	add	r3, r0
 8004f76:	b29b      	uxth	r3, r3
 8004f78:	e7ca      	b.n	8004f10 <RDMHandler::SetFactoryDefaults(bool, unsigned short)+0x40>
 8004f7a:	b003      	add	sp, #12
 8004f7c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004f7e:	bf00      	nop
 8004f80:	200015e0 	andcs	r1, r0, r0, ror #11

08004f84 <RDMHandler::SetDeviceLabel(bool, unsigned short)>:
 8004f84:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004f86:	6845      	ldr	r5, [r0, #4]
 8004f88:	7dab      	ldrb	r3, [r5, #22]
 8004f8a:	2b20      	cmp	r3, #32
 8004f8c:	460e      	mov	r6, r1
 8004f8e:	4604      	mov	r4, r0
 8004f90:	4611      	mov	r1, r2
 8004f92:	d905      	bls.n	8004fa0 <RDMHandler::SetDeviceLabel(bool, unsigned short)+0x1c>
 8004f94:	2101      	movs	r1, #1
 8004f96:	b002      	add	sp, #8
 8004f98:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8004f9c:	f7ff bc40 	b.w	8004820 <RDMHandler::RespondMessageNack(unsigned short)>
 8004fa0:	4a0d      	ldr	r2, [pc, #52]	; (8004fd8 <RDMHandler::SetDeviceLabel(bool, unsigned short)+0x54>)
 8004fa2:	6810      	ldr	r0, [r2, #0]
 8004fa4:	f105 0217 	add.w	r2, r5, #23
 8004fa8:	b159      	cbz	r1, 8004fc2 <RDMHandler::SetDeviceLabel(bool, unsigned short)+0x3e>
 8004faa:	3064      	adds	r0, #100	; 0x64
 8004fac:	f7fe f93b 	bl	8003226 <RDMSubDevices::SetLabel(unsigned short, char const*, unsigned char)>
 8004fb0:	b97e      	cbnz	r6, 8004fd2 <RDMHandler::SetDeviceLabel(bool, unsigned short)+0x4e>
 8004fb2:	68a3      	ldr	r3, [r4, #8]
 8004fb4:	4620      	mov	r0, r4
 8004fb6:	75de      	strb	r6, [r3, #23]
 8004fb8:	b002      	add	sp, #8
 8004fba:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8004fbe:	f7ff ba0b 	b.w	80043d8 <RDMHandler::RespondMessageAck()>
 8004fc2:	4669      	mov	r1, sp
 8004fc4:	3004      	adds	r0, #4
 8004fc6:	9200      	str	r2, [sp, #0]
 8004fc8:	f88d 3004 	strb.w	r3, [sp, #4]
 8004fcc:	f7ff f914 	bl	80041f8 <RDMDevice::SetLabel(TRDMDeviceInfoData const*)>
 8004fd0:	e7ee      	b.n	8004fb0 <RDMHandler::SetDeviceLabel(bool, unsigned short)+0x2c>
 8004fd2:	b002      	add	sp, #8
 8004fd4:	bd70      	pop	{r4, r5, r6, pc}
 8004fd6:	bf00      	nop
 8004fd8:	200015e0 	andcs	r1, r0, r0, ror #11

08004fdc <RDMHandler::Handlers(bool, unsigned char, unsigned short, unsigned char, unsigned short)>:
 8004fdc:	b4f0      	push	{r4, r5, r6, r7}
 8004fde:	4605      	mov	r5, r0
 8004fe0:	4610      	mov	r0, r2
 8004fe2:	f000 04ef 	and.w	r4, r0, #239	; 0xef
 8004fe6:	2c20      	cmp	r4, #32
 8004fe8:	f89d 6010 	ldrb.w	r6, [sp, #16]
 8004fec:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 8004ff0:	d004      	beq.n	8004ffc <RDMHandler::Handlers(bool, unsigned char, unsigned short, unsigned char, unsigned short)+0x20>
 8004ff2:	2105      	movs	r1, #5
 8004ff4:	4628      	mov	r0, r5
 8004ff6:	bcf0      	pop	{r4, r5, r6, r7}
 8004ff8:	f7ff bc12 	b.w	8004820 <RDMHandler::RespondMessageNack(unsigned short)>
 8004ffc:	4c27      	ldr	r4, [pc, #156]	; (800509c <RDMHandler::Handlers(bool, unsigned char, unsigned short, unsigned char, unsigned short)+0xc0>)
 8004ffe:	6824      	ldr	r4, [r4, #0]
 8005000:	88a4      	ldrh	r4, [r4, #4]
 8005002:	4294      	cmp	r4, r2
 8005004:	d205      	bcs.n	8005012 <RDMHandler::Handlers(bool, unsigned char, unsigned short, unsigned char, unsigned short)+0x36>
 8005006:	f64f 74ff 	movw	r4, #65535	; 0xffff
 800500a:	42a2      	cmp	r2, r4
 800500c:	d001      	beq.n	8005012 <RDMHandler::Handlers(bool, unsigned char, unsigned short, unsigned char, unsigned short)+0x36>
 800500e:	2109      	movs	r1, #9
 8005010:	e7f0      	b.n	8004ff4 <RDMHandler::Handlers(bool, unsigned char, unsigned short, unsigned char, unsigned short)+0x18>
 8005012:	4c23      	ldr	r4, [pc, #140]	; (80050a0 <RDMHandler::Handlers(bool, unsigned char, unsigned short, unsigned char, unsigned short)+0xc4>)
 8005014:	f504 7734 	add.w	r7, r4, #720	; 0x2d0
 8005018:	f8b4 c000 	ldrh.w	ip, [r4]
 800501c:	459c      	cmp	ip, r3
 800501e:	d108      	bne.n	8005032 <RDMHandler::Handlers(bool, unsigned char, unsigned short, unsigned char, unsigned short)+0x56>
 8005020:	f895 c000 	ldrb.w	ip, [r5]
 8005024:	7da7      	ldrb	r7, [r4, #22]
 8005026:	7de3      	ldrb	r3, [r4, #23]
 8005028:	f1bc 0f00 	cmp.w	ip, #0
 800502c:	d106      	bne.n	800503c <RDMHandler::Handlers(bool, unsigned char, unsigned short, unsigned char, unsigned short)+0x60>
 800502e:	b93b      	cbnz	r3, 8005040 <RDMHandler::Handlers(bool, unsigned char, unsigned short, unsigned char, unsigned short)+0x64>
 8005030:	e002      	b.n	8005038 <RDMHandler::Handlers(bool, unsigned char, unsigned short, unsigned char, unsigned short)+0x5c>
 8005032:	3418      	adds	r4, #24
 8005034:	42bc      	cmp	r4, r7
 8005036:	d1ef      	bne.n	8005018 <RDMHandler::Handlers(bool, unsigned char, unsigned short, unsigned char, unsigned short)+0x3c>
 8005038:	2100      	movs	r1, #0
 800503a:	e7db      	b.n	8004ff4 <RDMHandler::Handlers(bool, unsigned char, unsigned short, unsigned char, unsigned short)+0x18>
 800503c:	2f00      	cmp	r7, #0
 800503e:	d0fb      	beq.n	8005038 <RDMHandler::Handlers(bool, unsigned char, unsigned short, unsigned char, unsigned short)+0x5c>
 8005040:	2820      	cmp	r0, #32
 8005042:	d11a      	bne.n	800507a <RDMHandler::Handlers(bool, unsigned char, unsigned short, unsigned char, unsigned short)+0x9e>
 8005044:	bb41      	cbnz	r1, 8005098 <RDMHandler::Handlers(bool, unsigned char, unsigned short, unsigned char, unsigned short)+0xbc>
 8005046:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800504a:	429a      	cmp	r2, r3
 800504c:	d0df      	beq.n	800500e <RDMHandler::Handlers(bool, unsigned char, unsigned short, unsigned char, unsigned short)+0x32>
 800504e:	6863      	ldr	r3, [r4, #4]
 8005050:	b913      	cbnz	r3, 8005058 <RDMHandler::Handlers(bool, unsigned char, unsigned short, unsigned char, unsigned short)+0x7c>
 8005052:	68a1      	ldr	r1, [r4, #8]
 8005054:	07c8      	lsls	r0, r1, #31
 8005056:	d5cc      	bpl.n	8004ff2 <RDMHandler::Handlers(bool, unsigned char, unsigned short, unsigned char, unsigned short)+0x16>
 8005058:	7d21      	ldrb	r1, [r4, #20]
 800505a:	42b1      	cmp	r1, r6
 800505c:	d001      	beq.n	8005062 <RDMHandler::Handlers(bool, unsigned char, unsigned short, unsigned char, unsigned short)+0x86>
 800505e:	2101      	movs	r1, #1
 8005060:	e7c8      	b.n	8004ff4 <RDMHandler::Handlers(bool, unsigned char, unsigned short, unsigned char, unsigned short)+0x18>
 8005062:	68a1      	ldr	r1, [r4, #8]
 8005064:	104c      	asrs	r4, r1, #1
 8005066:	eb05 0061 	add.w	r0, r5, r1, asr #1
 800506a:	07c9      	lsls	r1, r1, #31
 800506c:	bf48      	it	mi
 800506e:	5929      	ldrmi	r1, [r5, r4]
 8005070:	bcf0      	pop	{r4, r5, r6, r7}
 8005072:	bf48      	it	mi
 8005074:	58cb      	ldrmi	r3, [r1, r3]
 8005076:	4611      	mov	r1, r2
 8005078:	4718      	bx	r3
 800507a:	e9d4 3003 	ldrd	r3, r0, [r4, #12]
 800507e:	f000 0401 	and.w	r4, r0, #1
 8005082:	b90b      	cbnz	r3, 8005088 <RDMHandler::Handlers(bool, unsigned char, unsigned short, unsigned char, unsigned short)+0xac>
 8005084:	2c00      	cmp	r4, #0
 8005086:	d0b4      	beq.n	8004ff2 <RDMHandler::Handlers(bool, unsigned char, unsigned short, unsigned char, unsigned short)+0x16>
 8005088:	1046      	asrs	r6, r0, #1
 800508a:	eb05 0060 	add.w	r0, r5, r0, asr #1
 800508e:	b10c      	cbz	r4, 8005094 <RDMHandler::Handlers(bool, unsigned char, unsigned short, unsigned char, unsigned short)+0xb8>
 8005090:	59ac      	ldr	r4, [r5, r6]
 8005092:	58e3      	ldr	r3, [r4, r3]
 8005094:	bcf0      	pop	{r4, r5, r6, r7}
 8005096:	4718      	bx	r3
 8005098:	bcf0      	pop	{r4, r5, r6, r7}
 800509a:	4770      	bx	lr
 800509c:	20001198 	mulcs	r0, r8, r1
 80050a0:	0800a5b4 	stmdaeq	r0, {r2, r4, r5, r7, r8, sl, sp, pc}

080050a4 <RDMHandler::HandleData(unsigned char const*, unsigned char*)>:
 80050a4:	23ff      	movs	r3, #255	; 0xff
 80050a6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80050aa:	7013      	strb	r3, [r2, #0]
 80050ac:	7bcb      	ldrb	r3, [r1, #15]
 80050ae:	e9c0 1201 	strd	r1, r2, [r0, #4]
 80050b2:	4607      	mov	r7, r0
 80050b4:	460e      	mov	r6, r1
 80050b6:	4614      	mov	r4, r2
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d07d      	beq.n	80051b8 <RDMHandler::HandleData(unsigned char const*, unsigned char*)+0x114>
 80050bc:	7c0b      	ldrb	r3, [r1, #16]
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d17a      	bne.n	80051b8 <RDMHandler::HandleData(unsigned char const*, unsigned char*)+0x114>
 80050c2:	4b64      	ldr	r3, [pc, #400]	; (8005254 <RDMHandler::HandleData(unsigned char const*, unsigned char*)+0x1b0>)
 80050c4:	1c8d      	adds	r5, r1, #2
 80050c6:	f8d3 9000 	ldr.w	r9, [r3]
 80050ca:	4963      	ldr	r1, [pc, #396]	; (8005258 <RDMHandler::HandleData(unsigned char const*, unsigned char*)+0x1b4>)
 80050cc:	2206      	movs	r2, #6
 80050ce:	4628      	mov	r0, r5
 80050d0:	f109 0a4e 	add.w	sl, r9, #78	; 0x4e
 80050d4:	f7ff f880 	bl	80041d8 <memcmp>
 80050d8:	2800      	cmp	r0, #0
 80050da:	d070      	beq.n	80051be <RDMHandler::HandleData(unsigned char const*, unsigned char*)+0x11a>
 80050dc:	2202      	movs	r2, #2
 80050de:	4651      	mov	r1, sl
 80050e0:	4628      	mov	r0, r5
 80050e2:	f7ff f879 	bl	80041d8 <memcmp>
 80050e6:	2800      	cmp	r0, #0
 80050e8:	d166      	bne.n	80051b8 <RDMHandler::HandleData(unsigned char const*, unsigned char*)+0x114>
 80050ea:	f106 0b04 	add.w	fp, r6, #4
 80050ee:	495a      	ldr	r1, [pc, #360]	; (8005258 <RDMHandler::HandleData(unsigned char const*, unsigned char*)+0x1b4>)
 80050f0:	2204      	movs	r2, #4
 80050f2:	4658      	mov	r0, fp
 80050f4:	f7ff f870 	bl	80041d8 <memcmp>
 80050f8:	1e05      	subs	r5, r0, #0
 80050fa:	bf0c      	ite	eq
 80050fc:	f04f 0801 	moveq.w	r8, #1
 8005100:	f04f 0800 	movne.w	r8, #0
 8005104:	d05e      	beq.n	80051c4 <RDMHandler::HandleData(unsigned char const*, unsigned char*)+0x120>
 8005106:	2204      	movs	r2, #4
 8005108:	f109 0150 	add.w	r1, r9, #80	; 0x50
 800510c:	4658      	mov	r0, fp
 800510e:	f7ff f863 	bl	80041d8 <memcmp>
 8005112:	fab0 f080 	clz	r0, r0
 8005116:	0940      	lsrs	r0, r0, #5
 8005118:	7d31      	ldrb	r1, [r6, #20]
 800511a:	7d73      	ldrb	r3, [r6, #21]
 800511c:	7cf2      	ldrb	r2, [r6, #19]
 800511e:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 8005122:	b29b      	uxth	r3, r3
 8005124:	b910      	cbnz	r0, 800512c <RDMHandler::HandleData(unsigned char const*, unsigned char*)+0x88>
 8005126:	f1b8 0f00 	cmp.w	r8, #0
 800512a:	d045      	beq.n	80051b8 <RDMHandler::HandleData(unsigned char const*, unsigned char*)+0x114>
 800512c:	2a10      	cmp	r2, #16
 800512e:	f040 8083 	bne.w	8005238 <RDMHandler::HandleData(unsigned char const*, unsigned char*)+0x194>
 8005132:	2b01      	cmp	r3, #1
 8005134:	d148      	bne.n	80051c8 <RDMHandler::HandleData(unsigned char const*, unsigned char*)+0x124>
 8005136:	787b      	ldrb	r3, [r7, #1]
 8005138:	2b00      	cmp	r3, #0
 800513a:	d13d      	bne.n	80051b8 <RDMHandler::HandleData(unsigned char const*, unsigned char*)+0x114>
 800513c:	2206      	movs	r2, #6
 800513e:	4651      	mov	r1, sl
 8005140:	f106 0017 	add.w	r0, r6, #23
 8005144:	f7ff f848 	bl	80041d8 <memcmp>
 8005148:	2800      	cmp	r0, #0
 800514a:	dc35      	bgt.n	80051b8 <RDMHandler::HandleData(unsigned char const*, unsigned char*)+0x114>
 800514c:	2206      	movs	r2, #6
 800514e:	f106 011d 	add.w	r1, r6, #29
 8005152:	4650      	mov	r0, sl
 8005154:	f7ff f840 	bl	80041d8 <memcmp>
 8005158:	2800      	cmp	r0, #0
 800515a:	dc2d      	bgt.n	80051b8 <RDMHandler::HandleData(unsigned char const*, unsigned char*)+0x114>
 800515c:	23fe      	movs	r3, #254	; 0xfe
 800515e:	7023      	strb	r3, [r4, #0]
 8005160:	7063      	strb	r3, [r4, #1]
 8005162:	70a3      	strb	r3, [r4, #2]
 8005164:	70e3      	strb	r3, [r4, #3]
 8005166:	7123      	strb	r3, [r4, #4]
 8005168:	7163      	strb	r3, [r4, #5]
 800516a:	71a3      	strb	r3, [r4, #6]
 800516c:	23aa      	movs	r3, #170	; 0xaa
 800516e:	71e3      	strb	r3, [r4, #7]
 8005170:	f109 024d 	add.w	r2, r9, #77	; 0x4d
 8005174:	4621      	mov	r1, r4
 8005176:	f109 0953 	add.w	r9, r9, #83	; 0x53
 800517a:	f240 53fa 	movw	r3, #1530	; 0x5fa
 800517e:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 8005182:	f060 0055 	orn	r0, r0, #85	; 0x55
 8005186:	7208      	strb	r0, [r1, #8]
 8005188:	7810      	ldrb	r0, [r2, #0]
 800518a:	f040 0055 	orr.w	r0, r0, #85	; 0x55
 800518e:	7248      	strb	r0, [r1, #9]
 8005190:	7810      	ldrb	r0, [r2, #0]
 8005192:	454a      	cmp	r2, r9
 8005194:	4403      	add	r3, r0
 8005196:	b29b      	uxth	r3, r3
 8005198:	f101 0102 	add.w	r1, r1, #2
 800519c:	d1ef      	bne.n	800517e <RDMHandler::HandleData(unsigned char const*, unsigned char*)+0xda>
 800519e:	0a1a      	lsrs	r2, r3, #8
 80051a0:	f062 0155 	orn	r1, r2, #85	; 0x55
 80051a4:	f042 0255 	orr.w	r2, r2, #85	; 0x55
 80051a8:	7562      	strb	r2, [r4, #21]
 80051aa:	f063 0255 	orn	r2, r3, #85	; 0x55
 80051ae:	f043 0355 	orr.w	r3, r3, #85	; 0x55
 80051b2:	7521      	strb	r1, [r4, #20]
 80051b4:	75a2      	strb	r2, [r4, #22]
 80051b6:	75e3      	strb	r3, [r4, #23]
 80051b8:	b003      	add	sp, #12
 80051ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80051be:	f04f 0801 	mov.w	r8, #1
 80051c2:	e7a9      	b.n	8005118 <RDMHandler::HandleData(unsigned char const*, unsigned char*)+0x74>
 80051c4:	4628      	mov	r0, r5
 80051c6:	e7a7      	b.n	8005118 <RDMHandler::HandleData(unsigned char const*, unsigned char*)+0x74>
 80051c8:	2b03      	cmp	r3, #3
 80051ca:	d11c      	bne.n	8005206 <RDMHandler::HandleData(unsigned char const*, unsigned char*)+0x162>
 80051cc:	7db3      	ldrb	r3, [r6, #22]
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d1f2      	bne.n	80051b8 <RDMHandler::HandleData(unsigned char const*, unsigned char*)+0x114>
 80051d2:	707b      	strb	r3, [r7, #1]
 80051d4:	f1b8 0f00 	cmp.w	r8, #0
 80051d8:	d1ee      	bne.n	80051b8 <RDMHandler::HandleData(unsigned char const*, unsigned char*)+0x114>
 80051da:	2800      	cmp	r0, #0
 80051dc:	d0ec      	beq.n	80051b8 <RDMHandler::HandleData(unsigned char const*, unsigned char*)+0x114>
 80051de:	2302      	movs	r3, #2
 80051e0:	75e3      	strb	r3, [r4, #23]
 80051e2:	4b1e      	ldr	r3, [pc, #120]	; (800525c <RDMHandler::HandleData(unsigned char const*, unsigned char*)+0x1b8>)
 80051e4:	f884 8018 	strb.w	r8, [r4, #24]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	f884 8019 	strb.w	r8, [r4, #25]
 80051ee:	889b      	ldrh	r3, [r3, #4]
 80051f0:	3b00      	subs	r3, #0
 80051f2:	bf18      	it	ne
 80051f4:	2301      	movne	r3, #1
 80051f6:	005b      	lsls	r3, r3, #1
 80051f8:	4638      	mov	r0, r7
 80051fa:	7663      	strb	r3, [r4, #25]
 80051fc:	b003      	add	sp, #12
 80051fe:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005202:	f7ff b8e9 	b.w	80043d8 <RDMHandler::RespondMessageAck()>
 8005206:	2b02      	cmp	r3, #2
 8005208:	d1d6      	bne.n	80051b8 <RDMHandler::HandleData(unsigned char const*, unsigned char*)+0x114>
 800520a:	7db2      	ldrb	r2, [r6, #22]
 800520c:	2a00      	cmp	r2, #0
 800520e:	d1d3      	bne.n	80051b8 <RDMHandler::HandleData(unsigned char const*, unsigned char*)+0x114>
 8005210:	2201      	movs	r2, #1
 8005212:	707a      	strb	r2, [r7, #1]
 8005214:	f1b8 0f00 	cmp.w	r8, #0
 8005218:	d1ce      	bne.n	80051b8 <RDMHandler::HandleData(unsigned char const*, unsigned char*)+0x114>
 800521a:	2800      	cmp	r0, #0
 800521c:	d0cc      	beq.n	80051b8 <RDMHandler::HandleData(unsigned char const*, unsigned char*)+0x114>
 800521e:	75e3      	strb	r3, [r4, #23]
 8005220:	4b0e      	ldr	r3, [pc, #56]	; (800525c <RDMHandler::HandleData(unsigned char const*, unsigned char*)+0x1b8>)
 8005222:	f884 8018 	strb.w	r8, [r4, #24]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	f884 8019 	strb.w	r8, [r4, #25]
 800522c:	889b      	ldrh	r3, [r3, #4]
 800522e:	3b00      	subs	r3, #0
 8005230:	bf18      	it	ne
 8005232:	2301      	movne	r3, #1
 8005234:	4093      	lsls	r3, r2
 8005236:	e7df      	b.n	80051f8 <RDMHandler::HandleData(unsigned char const*, unsigned char*)+0x154>
 8005238:	7c70      	ldrb	r0, [r6, #17]
 800523a:	7cb1      	ldrb	r1, [r6, #18]
 800523c:	eb01 2100 	add.w	r1, r1, r0, lsl #8
 8005240:	b289      	uxth	r1, r1
 8005242:	9101      	str	r1, [sp, #4]
 8005244:	7db1      	ldrb	r1, [r6, #22]
 8005246:	9100      	str	r1, [sp, #0]
 8005248:	4638      	mov	r0, r7
 800524a:	4641      	mov	r1, r8
 800524c:	f7ff fec6 	bl	8004fdc <RDMHandler::Handlers(bool, unsigned char, unsigned short, unsigned char, unsigned short)>
 8005250:	e7b2      	b.n	80051b8 <RDMHandler::HandleData(unsigned char const*, unsigned char*)+0x114>
 8005252:	bf00      	nop
 8005254:	200015e0 	andcs	r1, r0, r0, ror #11
 8005258:	0800a5ac 	stmdaeq	r0, {r2, r3, r5, r7, r8, sl, sp, pc}
 800525c:	20001198 	mulcs	r0, r8, r1

08005260 <RDMHandler::GetIdentifyMode(unsigned short)>:
 8005260:	6883      	ldr	r3, [r0, #8]
 8005262:	2201      	movs	r2, #1
 8005264:	75da      	strb	r2, [r3, #23]
 8005266:	4a02      	ldr	r2, [pc, #8]	; (8005270 <RDMHandler::GetIdentifyMode(unsigned short)+0x10>)
 8005268:	7812      	ldrb	r2, [r2, #0]
 800526a:	761a      	strb	r2, [r3, #24]
 800526c:	f7ff b8b4 	b.w	80043d8 <RDMHandler::RespondMessageAck()>
 8005270:	200015e5 	andcs	r1, r0, r5, ror #11

08005274 <RDMHandler::SetIdentifyMode(bool, unsigned short)>:
 8005274:	b538      	push	{r3, r4, r5, lr}
 8005276:	6843      	ldr	r3, [r0, #4]
 8005278:	7d9a      	ldrb	r2, [r3, #22]
 800527a:	2a01      	cmp	r2, #1
 800527c:	4604      	mov	r4, r0
 800527e:	460d      	mov	r5, r1
 8005280:	d004      	beq.n	800528c <RDMHandler::SetIdentifyMode(bool, unsigned short)+0x18>
 8005282:	2101      	movs	r1, #1
 8005284:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005288:	f7ff baca 	b.w	8004820 <RDMHandler::RespondMessageNack(unsigned short)>
 800528c:	7dd9      	ldrb	r1, [r3, #23]
 800528e:	1e4b      	subs	r3, r1, #1
 8005290:	b2db      	uxtb	r3, r3
 8005292:	2bfd      	cmp	r3, #253	; 0xfd
 8005294:	d801      	bhi.n	800529a <RDMHandler::SetIdentifyMode(bool, unsigned short)+0x26>
 8005296:	2106      	movs	r1, #6
 8005298:	e7f4      	b.n	8005284 <RDMHandler::SetIdentifyMode(bool, unsigned short)+0x10>
 800529a:	4b0b      	ldr	r3, [pc, #44]	; (80052c8 <RDMHandler::SetIdentifyMode(bool, unsigned short)+0x54>)
 800529c:	6818      	ldr	r0, [r3, #0]
 800529e:	4b0b      	ldr	r3, [pc, #44]	; (80052cc <RDMHandler::SetIdentifyMode(bool, unsigned short)+0x58>)
 80052a0:	7019      	strb	r1, [r3, #0]
 80052a2:	4b0b      	ldr	r3, [pc, #44]	; (80052d0 <RDMHandler::SetIdentifyMode(bool, unsigned short)+0x5c>)
 80052a4:	781b      	ldrb	r3, [r3, #0]
 80052a6:	b15b      	cbz	r3, 80052c0 <RDMHandler::SetIdentifyMode(bool, unsigned short)+0x4c>
 80052a8:	b151      	cbz	r1, 80052c0 <RDMHandler::SetIdentifyMode(bool, unsigned short)+0x4c>
 80052aa:	21ff      	movs	r1, #255	; 0xff
 80052ac:	f7fc f978 	bl	80015a0 <RDMIdentify::On(rdm::identify::Mode)>
 80052b0:	b94d      	cbnz	r5, 80052c6 <RDMHandler::SetIdentifyMode(bool, unsigned short)+0x52>
 80052b2:	68a3      	ldr	r3, [r4, #8]
 80052b4:	75dd      	strb	r5, [r3, #23]
 80052b6:	4620      	mov	r0, r4
 80052b8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80052bc:	f7ff b88c 	b.w	80043d8 <RDMHandler::RespondMessageAck()>
 80052c0:	f7fc f98c 	bl	80015dc <RDMIdentify::Off(rdm::identify::Mode)>
 80052c4:	e7f4      	b.n	80052b0 <RDMHandler::SetIdentifyMode(bool, unsigned short)+0x3c>
 80052c6:	bd38      	pop	{r3, r4, r5, pc}
 80052c8:	200015e8 	andcs	r1, r0, r8, ror #11
 80052cc:	200015e5 	andcs	r1, r0, r5, ror #11
 80052d0:	200015e4 	andcs	r1, r0, r4, ror #11

080052d4 <RDMIdentify::RDMIdentify()>:
 80052d4:	4b01      	ldr	r3, [pc, #4]	; (80052dc <RDMIdentify::RDMIdentify()+0x8>)
 80052d6:	6018      	str	r0, [r3, #0]
 80052d8:	4770      	bx	lr
 80052da:	bf00      	nop
 80052dc:	200015e8 	andcs	r1, r0, r8, ror #11

080052e0 <strlen>:
 80052e0:	4603      	mov	r3, r0
 80052e2:	461a      	mov	r2, r3
 80052e4:	3301      	adds	r3, #1
 80052e6:	7811      	ldrb	r1, [r2, #0]
 80052e8:	2900      	cmp	r1, #0
 80052ea:	d1fa      	bne.n	80052e2 <strlen+0x2>
 80052ec:	1a10      	subs	r0, r2, r0
 80052ee:	4770      	bx	lr

080052f0 <RDMSlotInfo::bsearch(unsigned short)>:
 80052f0:	b530      	push	{r4, r5, lr}
 80052f2:	4c0a      	ldr	r4, [pc, #40]	; (800531c <RDMSlotInfo::bsearch(unsigned short)+0x2c>)
 80052f4:	2128      	movs	r1, #40	; 0x28
 80052f6:	2200      	movs	r2, #0
 80052f8:	1a8b      	subs	r3, r1, r2
 80052fa:	eb02 0363 	add.w	r3, r2, r3, asr #1
 80052fe:	f834 5033 	ldrh.w	r5, [r4, r3, lsl #3]
 8005302:	4285      	cmp	r5, r0
 8005304:	d206      	bcs.n	8005314 <RDMSlotInfo::bsearch(unsigned short)+0x24>
 8005306:	1c5a      	adds	r2, r3, #1
 8005308:	428a      	cmp	r2, r1
 800530a:	ddf5      	ble.n	80052f8 <RDMSlotInfo::bsearch(unsigned short)+0x8>
 800530c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005310:	4618      	mov	r0, r3
 8005312:	bd30      	pop	{r4, r5, pc}
 8005314:	d9fc      	bls.n	8005310 <RDMSlotInfo::bsearch(unsigned short)+0x20>
 8005316:	1e59      	subs	r1, r3, #1
 8005318:	e7f6      	b.n	8005308 <RDMSlotInfo::bsearch(unsigned short)+0x18>
 800531a:	bf00      	nop
 800531c:	0800add8 	stmdaeq	r0, {r3, r4, r6, r7, r8, sl, fp, sp, pc}

08005320 <RDMSlotInfo::GetCategoryText(unsigned short, unsigned short, unsigned long&)>:
 8005320:	b538      	push	{r3, r4, r5, lr}
 8005322:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005326:	4299      	cmp	r1, r3
 8005328:	4615      	mov	r5, r2
 800532a:	d105      	bne.n	8005338 <RDMSlotInfo::GetCategoryText(unsigned short, unsigned short, unsigned long&)+0x18>
 800532c:	4611      	mov	r1, r2
 800532e:	f7fc f971 	bl	8001614 <RDMSlotInfo::GetCategoryTextUndefined(unsigned short, unsigned long&)>
 8005332:	4604      	mov	r4, r0
 8005334:	4620      	mov	r0, r4
 8005336:	bd38      	pop	{r3, r4, r5, pc}
 8005338:	4608      	mov	r0, r1
 800533a:	f7ff ffd9 	bl	80052f0 <RDMSlotInfo::bsearch(unsigned short)>
 800533e:	2800      	cmp	r0, #0
 8005340:	da02      	bge.n	8005348 <RDMSlotInfo::GetCategoryText(unsigned short, unsigned short, unsigned long&)+0x28>
 8005342:	2400      	movs	r4, #0
 8005344:	602c      	str	r4, [r5, #0]
 8005346:	e7f5      	b.n	8005334 <RDMSlotInfo::GetCategoryText(unsigned short, unsigned short, unsigned long&)+0x14>
 8005348:	4b04      	ldr	r3, [pc, #16]	; (800535c <RDMSlotInfo::GetCategoryText(unsigned short, unsigned short, unsigned long&)+0x3c>)
 800534a:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
 800534e:	685c      	ldr	r4, [r3, #4]
 8005350:	4620      	mov	r0, r4
 8005352:	f7ff ffc5 	bl	80052e0 <strlen>
 8005356:	b280      	uxth	r0, r0
 8005358:	6028      	str	r0, [r5, #0]
 800535a:	e7eb      	b.n	8005334 <RDMSlotInfo::GetCategoryText(unsigned short, unsigned short, unsigned long&)+0x14>
 800535c:	0800add8 	stmdaeq	r0, {r3, r4, r6, r7, r8, sl, fp, sp, pc}

08005360 <RDMDevice::RDMDevice()>:
 8005360:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005362:	2300      	movs	r3, #0
 8005364:	f06f 2280 	mvn.w	r2, #2147516416	; 0x80008000
 8005368:	e9c0 3210 	strd	r3, r2, [r0, #64]	; 0x40
 800536c:	f8a0 3048 	strh.w	r3, [r0, #72]	; 0x48
 8005370:	f8a0 3054 	strh.w	r3, [r0, #84]	; 0x54
 8005374:	f880 3056 	strb.w	r3, [r0, #86]	; 0x56
 8005378:	4b1a      	ldr	r3, [pc, #104]	; (80053e4 <RDMDevice::RDMDevice()+0x84>)
 800537a:	4d1b      	ldr	r5, [pc, #108]	; (80053e8 <RDMDevice::RDMDevice()+0x88>)
 800537c:	4604      	mov	r4, r0
 800537e:	4669      	mov	r1, sp
 8005380:	6818      	ldr	r0, [r3, #0]
 8005382:	f001 fd4b 	bl	8006e1c <Network::MacAddressCopyTo(unsigned char*)>
 8005386:	f89d 3002 	ldrb.w	r3, [sp, #2]
 800538a:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800538e:	f89d 1004 	ldrb.w	r1, [sp, #4]
 8005392:	f89d 0005 	ldrb.w	r0, [sp, #5]
 8005396:	f884 304c 	strb.w	r3, [r4, #76]	; 0x4c
 800539a:	f884 204d 	strb.w	r2, [r4, #77]	; 0x4d
 800539e:	f884 104e 	strb.w	r1, [r4, #78]	; 0x4e
 80053a2:	f884 004f 	strb.w	r0, [r4, #79]	; 0x4f
 80053a6:	782e      	ldrb	r6, [r5, #0]
 80053a8:	f884 604a 	strb.w	r6, [r4, #74]	; 0x4a
 80053ac:	786d      	ldrb	r5, [r5, #1]
 80053ae:	f884 2052 	strb.w	r2, [r4, #82]	; 0x52
 80053b2:	f884 3053 	strb.w	r3, [r4, #83]	; 0x53
 80053b6:	4a0d      	ldr	r2, [pc, #52]	; (80053ec <RDMDevice::RDMDevice()+0x8c>)
 80053b8:	f884 1051 	strb.w	r1, [r4, #81]	; 0x51
 80053bc:	2315      	movs	r3, #21
 80053be:	f884 3055 	strb.w	r3, [r4, #85]	; 0x55
 80053c2:	f884 504b 	strb.w	r5, [r4, #75]	; 0x4b
 80053c6:	f884 0050 	strb.w	r0, [r4, #80]	; 0x50
 80053ca:	1e63      	subs	r3, r4, #1
 80053cc:	f104 0114 	add.w	r1, r4, #20
 80053d0:	428b      	cmp	r3, r1
 80053d2:	d102      	bne.n	80053da <RDMDevice::RDMDevice()+0x7a>
 80053d4:	4620      	mov	r0, r4
 80053d6:	b002      	add	sp, #8
 80053d8:	bd70      	pop	{r4, r5, r6, pc}
 80053da:	f812 0b01 	ldrb.w	r0, [r2], #1
 80053de:	f803 0f01 	strb.w	r0, [r3, #1]!
 80053e2:	e7f5      	b.n	80053d0 <RDMDevice::RDMDevice()+0x70>
 80053e4:	20001638 	andcs	r1, r0, r8, lsr r6
 80053e8:	0800af18 	stmdaeq	r0, {r3, r4, r8, r9, sl, fp, sp, pc}
 80053ec:	0800b00a 	stmdaeq	r0, {r1, r3, ip, sp, pc}

080053f0 <RDMDevice::Print()>:
 80053f0:	b513      	push	{r0, r1, r4, lr}
 80053f2:	4604      	mov	r4, r0
 80053f4:	481f      	ldr	r0, [pc, #124]	; (8005474 <RDMDevice::Print()+0x84>)
 80053f6:	f7fc fc39 	bl	8001c6c <printf>
 80053fa:	4b1f      	ldr	r3, [pc, #124]	; (8005478 <RDMDevice::Print()+0x88>)
 80053fc:	461a      	mov	r2, r3
 80053fe:	4619      	mov	r1, r3
 8005400:	3301      	adds	r3, #1
 8005402:	7808      	ldrb	r0, [r1, #0]
 8005404:	2800      	cmp	r0, #0
 8005406:	d1fa      	bne.n	80053fe <RDMDevice::Print()+0xe>
 8005408:	1a89      	subs	r1, r1, r2
 800540a:	2920      	cmp	r1, #32
 800540c:	bf28      	it	cs
 800540e:	2120      	movcs	r1, #32
 8005410:	4a19      	ldr	r2, [pc, #100]	; (8005478 <RDMDevice::Print()+0x88>)
 8005412:	481a      	ldr	r0, [pc, #104]	; (800547c <RDMDevice::Print()+0x8c>)
 8005414:	f7fc fc2a 	bl	8001c6c <printf>
 8005418:	f894 204b 	ldrb.w	r2, [r4, #75]	; 0x4b
 800541c:	f894 104a 	ldrb.w	r1, [r4, #74]	; 0x4a
 8005420:	4817      	ldr	r0, [pc, #92]	; (8005480 <RDMDevice::Print()+0x90>)
 8005422:	f7fc fc23 	bl	8001c6c <printf>
 8005426:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
 800542a:	f894 2052 	ldrb.w	r2, [r4, #82]	; 0x52
 800542e:	f894 1053 	ldrb.w	r1, [r4, #83]	; 0x53
 8005432:	9300      	str	r3, [sp, #0]
 8005434:	4813      	ldr	r0, [pc, #76]	; (8005484 <RDMDevice::Print()+0x94>)
 8005436:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
 800543a:	f7fc fc17 	bl	8001c6c <printf>
 800543e:	f894 1054 	ldrb.w	r1, [r4, #84]	; 0x54
 8005442:	4811      	ldr	r0, [pc, #68]	; (8005488 <RDMDevice::Print()+0x98>)
 8005444:	f104 0220 	add.w	r2, r4, #32
 8005448:	f7fc fc10 	bl	8001c6c <printf>
 800544c:	f8b4 1044 	ldrh.w	r1, [r4, #68]	; 0x44
 8005450:	f894 2044 	ldrb.w	r2, [r4, #68]	; 0x44
 8005454:	480d      	ldr	r0, [pc, #52]	; (800548c <RDMDevice::Print()+0x9c>)
 8005456:	0a09      	lsrs	r1, r1, #8
 8005458:	f7fc fc08 	bl	8001c6c <printf>
 800545c:	f8b4 1046 	ldrh.w	r1, [r4, #70]	; 0x46
 8005460:	f894 2046 	ldrb.w	r2, [r4, #70]	; 0x46
 8005464:	480a      	ldr	r0, [pc, #40]	; (8005490 <RDMDevice::Print()+0xa0>)
 8005466:	0a09      	lsrs	r1, r1, #8
 8005468:	b002      	add	sp, #8
 800546a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800546e:	f7fc bbfd 	b.w	8001c6c <printf>
 8005472:	bf00      	nop
 8005474:	0800af36 	stmdaeq	r0, {r1, r2, r4, r5, r8, r9, sl, fp, sp, pc}
 8005478:	0800af1a 	stmdaeq	r0, {r1, r3, r4, r8, r9, sl, fp, sp, pc}
 800547c:	0800af50 	stmdaeq	r0, {r4, r6, r8, r9, sl, fp, sp, pc}
 8005480:	0800af6b 	stmdaeq	r0, {r0, r1, r3, r5, r6, r8, r9, sl, fp, sp, pc}
 8005484:	0800af8a 	stmdaeq	r0, {r1, r3, r7, r8, r9, sl, fp, sp, pc}
 8005488:	0800afb1 	stmdaeq	r0, {r0, r4, r5, r7, r8, r9, sl, fp, sp, pc}
 800548c:	0800afcc 	stmdaeq	r0, {r2, r3, r6, r7, r8, r9, sl, fp, sp, pc}
 8005490:	0800afeb 	stmdaeq	r0, {r0, r1, r3, r5, r6, r7, r8, r9, sl, fp, sp, pc}

08005494 <PixelDmxConfiguration::Validate(unsigned long, unsigned long&, pixeldmxconfiguration::PortInfo&)>:
 8005494:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005496:	4604      	mov	r4, r0
 8005498:	460e      	mov	r6, r1
 800549a:	4611      	mov	r1, r2
 800549c:	9201      	str	r2, [sp, #4]
 800549e:	461d      	mov	r5, r3
 80054a0:	f000 fd98 	bl	8005fd4 <PixelConfiguration::Validate(unsigned long&)>
 80054a4:	7d62      	ldrb	r2, [r4, #21]
 80054a6:	b94a      	cbnz	r2, 80054bc <PixelDmxConfiguration::Validate(unsigned long, unsigned long&, pixeldmxconfiguration::PortInfo&)+0x28>
 80054a8:	6823      	ldr	r3, [r4, #0]
 80054aa:	9901      	ldr	r1, [sp, #4]
 80054ac:	b11b      	cbz	r3, 80054b6 <PixelDmxConfiguration::Validate(unsigned long, unsigned long&, pixeldmxconfiguration::PortInfo&)+0x22>
 80054ae:	3b0b      	subs	r3, #11
 80054b0:	2b01      	cmp	r3, #1
 80054b2:	bf88      	it	hi
 80054b4:	6022      	strhi	r2, [r4, #0]
 80054b6:	4620      	mov	r0, r4
 80054b8:	f000 fd8c 	bl	8005fd4 <PixelConfiguration::Validate(unsigned long&)>
 80054bc:	2300      	movs	r3, #0
 80054be:	602b      	str	r3, [r5, #0]
 80054c0:	6823      	ldr	r3, [r4, #0]
 80054c2:	2b07      	cmp	r3, #7
 80054c4:	bf15      	itete	ne
 80054c6:	f44f 71aa 	movne.w	r1, #340	; 0x154
 80054ca:	f44f 7180 	moveq.w	r1, #256	; 0x100
 80054ce:	23aa      	movne	r3, #170	; 0xaa
 80054d0:	2380      	moveq	r3, #128	; 0x80
 80054d2:	e9c5 3101 	strd	r3, r1, [r5, #4]
 80054d6:	6a21      	ldr	r1, [r4, #32]
 80054d8:	bf14      	ite	ne
 80054da:	f44f 72ff 	movne.w	r2, #510	; 0x1fe
 80054de:	f44f 72c0 	moveq.w	r2, #384	; 0x180
 80054e2:	60ea      	str	r2, [r5, #12]
 80054e4:	6862      	ldr	r2, [r4, #4]
 80054e6:	b109      	cbz	r1, 80054ec <PixelDmxConfiguration::Validate(unsigned long, unsigned long&, pixeldmxconfiguration::PortInfo&)+0x58>
 80054e8:	4291      	cmp	r1, r2
 80054ea:	d900      	bls.n	80054ee <PixelDmxConfiguration::Validate(unsigned long, unsigned long&, pixeldmxconfiguration::PortInfo&)+0x5a>
 80054ec:	6222      	str	r2, [r4, #32]
 80054ee:	69e0      	ldr	r0, [r4, #28]
 80054f0:	6a21      	ldr	r1, [r4, #32]
 80054f2:	fbb2 f2f1 	udiv	r2, r2, r1
 80054f6:	42b0      	cmp	r0, r6
 80054f8:	bf28      	it	cs
 80054fa:	4630      	movcs	r0, r6
 80054fc:	6262      	str	r2, [r4, #36]	; 0x24
 80054fe:	2e01      	cmp	r6, #1
 8005500:	f103 0301 	add.w	r3, r3, #1
 8005504:	fbb2 f2f3 	udiv	r2, r2, r3
 8005508:	f102 0301 	add.w	r3, r2, #1
 800550c:	62a3      	str	r3, [r4, #40]	; 0x28
 800550e:	bf1c      	itt	ne
 8005510:	4343      	mulne	r3, r0
 8005512:	f103 32ff 	addne.w	r2, r3, #4294967295	; 0xffffffff
 8005516:	61e0      	str	r0, [r4, #28]
 8005518:	612a      	str	r2, [r5, #16]
 800551a:	b002      	add	sp, #8
 800551c:	bd70      	pop	{r4, r5, r6, pc}
	...

08005520 <PixelDmxConfiguration::Print()>:
 8005520:	b510      	push	{r4, lr}
 8005522:	4604      	mov	r4, r0
 8005524:	f000 fdec 	bl	8006100 <PixelConfiguration::Print()>
 8005528:	4806      	ldr	r0, [pc, #24]	; (8005544 <PixelDmxConfiguration::Print()+0x24>)
 800552a:	f7fc fb9f 	bl	8001c6c <printf>
 800552e:	69e1      	ldr	r1, [r4, #28]
 8005530:	4805      	ldr	r0, [pc, #20]	; (8005548 <PixelDmxConfiguration::Print()+0x28>)
 8005532:	f7fc fb9b 	bl	8001c6c <printf>
 8005536:	e9d4 1208 	ldrd	r1, r2, [r4, #32]
 800553a:	4804      	ldr	r0, [pc, #16]	; (800554c <PixelDmxConfiguration::Print()+0x2c>)
 800553c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005540:	f7fc bb94 	b.w	8001c6c <printf>
 8005544:	0800b020 	stmdaeq	r0, {r5, ip, sp, pc}
 8005548:	0800b039 	stmdaeq	r0, {r0, r3, r4, r5, ip, sp, pc}
 800554c:	0800b048 	stmdaeq	r0, {r3, r6, ip, sp, pc}

08005550 <WS28xxDmx::Sync(unsigned long)>:
 8005550:	4770      	bx	lr
 8005552:	bf00      	nop

08005554 <WS28xxDmx::GetDmxStartAddress()>:
 8005554:	f8b0 004c 	ldrh.w	r0, [r0, #76]	; 0x4c
 8005558:	4770      	bx	lr
 800555a:	bf00      	nop

0800555c <WS28xxDmx::GetDmxFootprint()>:
 800555c:	f8b0 004e 	ldrh.w	r0, [r0, #78]	; 0x4e
 8005560:	4770      	bx	lr
 8005562:	bf00      	nop

08005564 <WS28xxDmx::~WS28xxDmx()>:
 8005564:	b538      	push	{r3, r4, r5, lr}
 8005566:	6d05      	ldr	r5, [r0, #80]	; 0x50
 8005568:	4b05      	ldr	r3, [pc, #20]	; (8005580 <WS28xxDmx::~WS28xxDmx()+0x1c>)
 800556a:	6003      	str	r3, [r0, #0]
 800556c:	4604      	mov	r4, r0
 800556e:	b12d      	cbz	r5, 800557c <WS28xxDmx::~WS28xxDmx()+0x18>
 8005570:	4628      	mov	r0, r5
 8005572:	f001 fb33 	bl	8006bdc <WS28xx::~WS28xx()>
 8005576:	4628      	mov	r0, r5
 8005578:	f002 ff9d 	bl	80084b6 <operator delete(void*)>
 800557c:	4620      	mov	r0, r4
 800557e:	bd38      	pop	{r3, r4, r5, pc}
 8005580:	0800b074 	stmdaeq	r0, {r2, r4, r5, r6, ip, sp, pc}

08005584 <WS28xxDmx::Sync(bool)>:
 8005584:	b911      	cbnz	r1, 800558c <WS28xxDmx::Sync(bool)+0x8>
 8005586:	6d00      	ldr	r0, [r0, #80]	; 0x50
 8005588:	f001 bb8a 	b.w	8006ca0 <WS28xx::Update()>
 800558c:	4770      	bx	lr
 800558e:	bf00      	nop

08005590 <WS28xxDmx::Blackout(bool)>:
 8005590:	b538      	push	{r3, r4, r5, lr}
 8005592:	4604      	mov	r4, r0
 8005594:	460d      	mov	r5, r1
 8005596:	f880 105d 	strb.w	r1, [r0, #93]	; 0x5d
 800559a:	f004 fa4b 	bl	8009a34 <gd32_spi_dma_tx_is_active()>
 800559e:	2800      	cmp	r0, #0
 80055a0:	d1fb      	bne.n	800559a <WS28xxDmx::Blackout(bool)+0xa>
 80055a2:	6d20      	ldr	r0, [r4, #80]	; 0x50
 80055a4:	b11d      	cbz	r5, 80055ae <WS28xxDmx::Blackout(bool)+0x1e>
 80055a6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80055aa:	f001 bb95 	b.w	8006cd8 <WS28xx::Blackout()>
 80055ae:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80055b2:	f001 bb75 	b.w	8006ca0 <WS28xx::Update()>
 80055b6:	bf00      	nop

080055b8 <WS28xxDmx::SetData(unsigned long, unsigned char const*, unsigned long, bool)>:
 80055b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80055bc:	b087      	sub	sp, #28
 80055be:	4606      	mov	r6, r0
 80055c0:	f89d 4040 	ldrb.w	r4, [sp, #64]	; 0x40
 80055c4:	9404      	str	r4, [sp, #16]
 80055c6:	460f      	mov	r7, r1
 80055c8:	9105      	str	r1, [sp, #20]
 80055ca:	4614      	mov	r4, r2
 80055cc:	461d      	mov	r5, r3
 80055ce:	9302      	str	r3, [sp, #8]
 80055d0:	f004 fa30 	bl	8009a34 <gd32_spi_dma_tx_is_active()>
 80055d4:	2800      	cmp	r0, #0
 80055d6:	f040 8094 	bne.w	8005702 <WS28xxDmx::SetData(unsigned long, unsigned char const*, unsigned long, bool)+0x14a>
 80055da:	f007 0803 	and.w	r8, r7, #3
 80055de:	eb06 0388 	add.w	r3, r6, r8, lsl #2
 80055e2:	6ab2      	ldr	r2, [r6, #40]	; 0x28
 80055e4:	6b5f      	ldr	r7, [r3, #52]	; 0x34
 80055e6:	6cb3      	ldr	r3, [r6, #72]	; 0x48
 80055e8:	fbb5 fbf3 	udiv	fp, r5, r3
 80055ec:	44bb      	add	fp, r7
 80055ee:	4593      	cmp	fp, r2
 80055f0:	4659      	mov	r1, fp
 80055f2:	bf28      	it	cs
 80055f4:	4611      	movcs	r1, r2
 80055f6:	9103      	str	r1, [sp, #12]
 80055f8:	f1b8 0f00 	cmp.w	r8, #0
 80055fc:	f000 8084 	beq.w	8005708 <WS28xxDmx::SetData(unsigned long, unsigned char const*, unsigned long, bool)+0x150>
 8005600:	4680      	mov	r8, r0
 8005602:	2b03      	cmp	r3, #3
 8005604:	f8d6 b024 	ldr.w	fp, [r6, #36]	; 0x24
 8005608:	f000 808b 	beq.w	8005722 <WS28xxDmx::SetData(unsigned long, unsigned char const*, unsigned long, bool)+0x16a>
 800560c:	9b03      	ldr	r3, [sp, #12]
 800560e:	429f      	cmp	r7, r3
 8005610:	d271      	bcs.n	80056f6 <WS28xxDmx::SetData(unsigned long, unsigned char const*, unsigned long, bool)+0x13e>
 8005612:	9b02      	ldr	r3, [sp, #8]
 8005614:	4598      	cmp	r8, r3
 8005616:	d26e      	bcs.n	80056f6 <WS28xxDmx::SetData(unsigned long, unsigned char const*, unsigned long, bool)+0x13e>
 8005618:	fb0b fa07 	mul.w	sl, fp, r7
 800561c:	4444      	add	r4, r8
 800561e:	eb0b 090a 	add.w	r9, fp, sl
 8005622:	f1bb 0f00 	cmp.w	fp, #0
 8005626:	d059      	beq.n	80056dc <WS28xxDmx::SetData(unsigned long, unsigned char const*, unsigned long, bool)+0x124>
 8005628:	eba9 030a 	sub.w	r3, r9, sl
 800562c:	f013 0303 	ands.w	r3, r3, #3
 8005630:	4655      	mov	r5, sl
 8005632:	d027      	beq.n	8005684 <WS28xxDmx::SetData(unsigned long, unsigned char const*, unsigned long, bool)+0xcc>
 8005634:	2b01      	cmp	r3, #1
 8005636:	d018      	beq.n	800566a <WS28xxDmx::SetData(unsigned long, unsigned char const*, unsigned long, bool)+0xb2>
 8005638:	2b02      	cmp	r3, #2
 800563a:	d00b      	beq.n	8005654 <WS28xxDmx::SetData(unsigned long, unsigned char const*, unsigned long, bool)+0x9c>
 800563c:	78e2      	ldrb	r2, [r4, #3]
 800563e:	7863      	ldrb	r3, [r4, #1]
 8005640:	9201      	str	r2, [sp, #4]
 8005642:	78a2      	ldrb	r2, [r4, #2]
 8005644:	9200      	str	r2, [sp, #0]
 8005646:	7822      	ldrb	r2, [r4, #0]
 8005648:	6d30      	ldr	r0, [r6, #80]	; 0x50
 800564a:	4651      	mov	r1, sl
 800564c:	f001 f9ba 	bl	80069c4 <WS28xx::SetPixel(unsigned long, unsigned char, unsigned char, unsigned char, unsigned char)>
 8005650:	f10a 0501 	add.w	r5, sl, #1
 8005654:	78e2      	ldrb	r2, [r4, #3]
 8005656:	7863      	ldrb	r3, [r4, #1]
 8005658:	9201      	str	r2, [sp, #4]
 800565a:	78a2      	ldrb	r2, [r4, #2]
 800565c:	9200      	str	r2, [sp, #0]
 800565e:	4629      	mov	r1, r5
 8005660:	7822      	ldrb	r2, [r4, #0]
 8005662:	6d30      	ldr	r0, [r6, #80]	; 0x50
 8005664:	3501      	adds	r5, #1
 8005666:	f001 f9ad 	bl	80069c4 <WS28xx::SetPixel(unsigned long, unsigned char, unsigned char, unsigned char, unsigned char)>
 800566a:	78e2      	ldrb	r2, [r4, #3]
 800566c:	7863      	ldrb	r3, [r4, #1]
 800566e:	9201      	str	r2, [sp, #4]
 8005670:	78a2      	ldrb	r2, [r4, #2]
 8005672:	9200      	str	r2, [sp, #0]
 8005674:	4629      	mov	r1, r5
 8005676:	7822      	ldrb	r2, [r4, #0]
 8005678:	6d30      	ldr	r0, [r6, #80]	; 0x50
 800567a:	3501      	adds	r5, #1
 800567c:	f001 f9a2 	bl	80069c4 <WS28xx::SetPixel(unsigned long, unsigned char, unsigned char, unsigned char, unsigned char)>
 8005680:	454d      	cmp	r5, r9
 8005682:	d02b      	beq.n	80056dc <WS28xxDmx::SetData(unsigned long, unsigned char const*, unsigned long, bool)+0x124>
 8005684:	78e2      	ldrb	r2, [r4, #3]
 8005686:	7863      	ldrb	r3, [r4, #1]
 8005688:	9201      	str	r2, [sp, #4]
 800568a:	78a2      	ldrb	r2, [r4, #2]
 800568c:	9200      	str	r2, [sp, #0]
 800568e:	4629      	mov	r1, r5
 8005690:	7822      	ldrb	r2, [r4, #0]
 8005692:	6d30      	ldr	r0, [r6, #80]	; 0x50
 8005694:	f001 f996 	bl	80069c4 <WS28xx::SetPixel(unsigned long, unsigned char, unsigned char, unsigned char, unsigned char)>
 8005698:	78e2      	ldrb	r2, [r4, #3]
 800569a:	7863      	ldrb	r3, [r4, #1]
 800569c:	9201      	str	r2, [sp, #4]
 800569e:	78a2      	ldrb	r2, [r4, #2]
 80056a0:	9200      	str	r2, [sp, #0]
 80056a2:	3501      	adds	r5, #1
 80056a4:	4629      	mov	r1, r5
 80056a6:	7822      	ldrb	r2, [r4, #0]
 80056a8:	6d30      	ldr	r0, [r6, #80]	; 0x50
 80056aa:	f001 f98b 	bl	80069c4 <WS28xx::SetPixel(unsigned long, unsigned char, unsigned char, unsigned char, unsigned char)>
 80056ae:	78e2      	ldrb	r2, [r4, #3]
 80056b0:	7863      	ldrb	r3, [r4, #1]
 80056b2:	9201      	str	r2, [sp, #4]
 80056b4:	78a2      	ldrb	r2, [r4, #2]
 80056b6:	9200      	str	r2, [sp, #0]
 80056b8:	1c69      	adds	r1, r5, #1
 80056ba:	7822      	ldrb	r2, [r4, #0]
 80056bc:	6d30      	ldr	r0, [r6, #80]	; 0x50
 80056be:	f001 f981 	bl	80069c4 <WS28xx::SetPixel(unsigned long, unsigned char, unsigned char, unsigned char, unsigned char)>
 80056c2:	78e2      	ldrb	r2, [r4, #3]
 80056c4:	7863      	ldrb	r3, [r4, #1]
 80056c6:	9201      	str	r2, [sp, #4]
 80056c8:	78a2      	ldrb	r2, [r4, #2]
 80056ca:	9200      	str	r2, [sp, #0]
 80056cc:	1ca9      	adds	r1, r5, #2
 80056ce:	7822      	ldrb	r2, [r4, #0]
 80056d0:	6d30      	ldr	r0, [r6, #80]	; 0x50
 80056d2:	3503      	adds	r5, #3
 80056d4:	f001 f976 	bl	80069c4 <WS28xx::SetPixel(unsigned long, unsigned char, unsigned char, unsigned char, unsigned char)>
 80056d8:	454d      	cmp	r5, r9
 80056da:	d1d3      	bne.n	8005684 <WS28xxDmx::SetData(unsigned long, unsigned char const*, unsigned long, bool)+0xcc>
 80056dc:	9b03      	ldr	r3, [sp, #12]
 80056de:	3701      	adds	r7, #1
 80056e0:	42bb      	cmp	r3, r7
 80056e2:	f108 0804 	add.w	r8, r8, #4
 80056e6:	d906      	bls.n	80056f6 <WS28xxDmx::SetData(unsigned long, unsigned char const*, unsigned long, bool)+0x13e>
 80056e8:	9b02      	ldr	r3, [sp, #8]
 80056ea:	4543      	cmp	r3, r8
 80056ec:	44da      	add	sl, fp
 80056ee:	f104 0404 	add.w	r4, r4, #4
 80056f2:	44d9      	add	r9, fp
 80056f4:	d895      	bhi.n	8005622 <WS28xxDmx::SetData(unsigned long, unsigned char const*, unsigned long, bool)+0x6a>
 80056f6:	9b04      	ldr	r3, [sp, #16]
 80056f8:	b11b      	cbz	r3, 8005702 <WS28xxDmx::SetData(unsigned long, unsigned char const*, unsigned long, bool)+0x14a>
 80056fa:	6c73      	ldr	r3, [r6, #68]	; 0x44
 80056fc:	9a05      	ldr	r2, [sp, #20]
 80056fe:	4293      	cmp	r3, r2
 8005700:	d01b      	beq.n	800573a <WS28xxDmx::SetData(unsigned long, unsigned char const*, unsigned long, bool)+0x182>
 8005702:	b007      	add	sp, #28
 8005704:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005708:	6bb1      	ldr	r1, [r6, #56]	; 0x38
 800570a:	4291      	cmp	r1, r2
 800570c:	f67f af79 	bls.w	8005602 <WS28xxDmx::SetData(unsigned long, unsigned char const*, unsigned long, bool)+0x4a>
 8005710:	f8b6 8030 	ldrh.w	r8, [r6, #48]	; 0x30
 8005714:	f8d6 b024 	ldr.w	fp, [r6, #36]	; 0x24
 8005718:	2b03      	cmp	r3, #3
 800571a:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 800571e:	f47f af75 	bne.w	800560c <WS28xxDmx::SetData(unsigned long, unsigned char const*, unsigned long, bool)+0x54>
 8005722:	68f3      	ldr	r3, [r6, #12]
 8005724:	2b05      	cmp	r3, #5
 8005726:	f200 8165 	bhi.w	80059f4 <WS28xxDmx::SetData(unsigned long, unsigned char const*, unsigned long, bool)+0x43c>
 800572a:	e8df f013 	tbh	[pc, r3, lsl #1]
 800572e:	00f10080 	rscseq	r0, r1, r0, lsl #1
 8005732:	00100247 	andseq	r0, r0, r7, asr #4
 8005736:	016301d5 	ldrdeq	r0, [r3, #-21]!	; 0xffffffeb
 800573a:	f896 305d 	ldrb.w	r3, [r6, #93]	; 0x5d
 800573e:	2b00      	cmp	r3, #0
 8005740:	d1df      	bne.n	8005702 <WS28xxDmx::SetData(unsigned long, unsigned char const*, unsigned long, bool)+0x14a>
 8005742:	6d30      	ldr	r0, [r6, #80]	; 0x50
 8005744:	b007      	add	sp, #28
 8005746:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800574a:	f001 baa9 	b.w	8006ca0 <WS28xx::Update()>
 800574e:	9b03      	ldr	r3, [sp, #12]
 8005750:	429f      	cmp	r7, r3
 8005752:	d2d0      	bcs.n	80056f6 <WS28xxDmx::SetData(unsigned long, unsigned char const*, unsigned long, bool)+0x13e>
 8005754:	9b02      	ldr	r3, [sp, #8]
 8005756:	4598      	cmp	r8, r3
 8005758:	d2cd      	bcs.n	80056f6 <WS28xxDmx::SetData(unsigned long, unsigned char const*, unsigned long, bool)+0x13e>
 800575a:	9b03      	ldr	r3, [sp, #12]
 800575c:	eb07 0247 	add.w	r2, r7, r7, lsl #1
 8005760:	eb03 0143 	add.w	r1, r3, r3, lsl #1
 8005764:	1ee3      	subs	r3, r4, #3
 8005766:	1a9b      	subs	r3, r3, r2
 8005768:	440b      	add	r3, r1
 800576a:	fb0b f707 	mul.w	r7, fp, r7
 800576e:	4444      	add	r4, r8
 8005770:	eb03 0a08 	add.w	sl, r3, r8
 8005774:	eb07 090b 	add.w	r9, r7, fp
 8005778:	f1bb 0f00 	cmp.w	fp, #0
 800577c:	d04a      	beq.n	8005814 <WS28xxDmx::SetData(unsigned long, unsigned char const*, unsigned long, bool)+0x25c>
 800577e:	eba9 0307 	sub.w	r3, r9, r7
 8005782:	f013 0303 	ands.w	r3, r3, #3
 8005786:	463d      	mov	r5, r7
 8005788:	d020      	beq.n	80057cc <WS28xxDmx::SetData(unsigned long, unsigned char const*, unsigned long, bool)+0x214>
 800578a:	2b01      	cmp	r3, #1
 800578c:	d013      	beq.n	80057b6 <WS28xxDmx::SetData(unsigned long, unsigned char const*, unsigned long, bool)+0x1fe>
 800578e:	2b02      	cmp	r3, #2
 8005790:	d008      	beq.n	80057a4 <WS28xxDmx::SetData(unsigned long, unsigned char const*, unsigned long, bool)+0x1ec>
 8005792:	7863      	ldrb	r3, [r4, #1]
 8005794:	78a2      	ldrb	r2, [r4, #2]
 8005796:	9300      	str	r3, [sp, #0]
 8005798:	7823      	ldrb	r3, [r4, #0]
 800579a:	6d30      	ldr	r0, [r6, #80]	; 0x50
 800579c:	4639      	mov	r1, r7
 800579e:	f000 fff7 	bl	8006790 <WS28xx::SetPixel(unsigned long, unsigned char, unsigned char, unsigned char)>
 80057a2:	1c7d      	adds	r5, r7, #1
 80057a4:	7863      	ldrb	r3, [r4, #1]
 80057a6:	78a2      	ldrb	r2, [r4, #2]
 80057a8:	9300      	str	r3, [sp, #0]
 80057aa:	4629      	mov	r1, r5
 80057ac:	7823      	ldrb	r3, [r4, #0]
 80057ae:	6d30      	ldr	r0, [r6, #80]	; 0x50
 80057b0:	3501      	adds	r5, #1
 80057b2:	f000 ffed 	bl	8006790 <WS28xx::SetPixel(unsigned long, unsigned char, unsigned char, unsigned char)>
 80057b6:	7863      	ldrb	r3, [r4, #1]
 80057b8:	78a2      	ldrb	r2, [r4, #2]
 80057ba:	9300      	str	r3, [sp, #0]
 80057bc:	4629      	mov	r1, r5
 80057be:	7823      	ldrb	r3, [r4, #0]
 80057c0:	6d30      	ldr	r0, [r6, #80]	; 0x50
 80057c2:	3501      	adds	r5, #1
 80057c4:	f000 ffe4 	bl	8006790 <WS28xx::SetPixel(unsigned long, unsigned char, unsigned char, unsigned char)>
 80057c8:	45a9      	cmp	r9, r5
 80057ca:	d023      	beq.n	8005814 <WS28xxDmx::SetData(unsigned long, unsigned char const*, unsigned long, bool)+0x25c>
 80057cc:	7863      	ldrb	r3, [r4, #1]
 80057ce:	78a2      	ldrb	r2, [r4, #2]
 80057d0:	9300      	str	r3, [sp, #0]
 80057d2:	4629      	mov	r1, r5
 80057d4:	7823      	ldrb	r3, [r4, #0]
 80057d6:	6d30      	ldr	r0, [r6, #80]	; 0x50
 80057d8:	f000 ffda 	bl	8006790 <WS28xx::SetPixel(unsigned long, unsigned char, unsigned char, unsigned char)>
 80057dc:	7863      	ldrb	r3, [r4, #1]
 80057de:	78a2      	ldrb	r2, [r4, #2]
 80057e0:	9300      	str	r3, [sp, #0]
 80057e2:	3501      	adds	r5, #1
 80057e4:	4629      	mov	r1, r5
 80057e6:	7823      	ldrb	r3, [r4, #0]
 80057e8:	6d30      	ldr	r0, [r6, #80]	; 0x50
 80057ea:	f000 ffd1 	bl	8006790 <WS28xx::SetPixel(unsigned long, unsigned char, unsigned char, unsigned char)>
 80057ee:	7863      	ldrb	r3, [r4, #1]
 80057f0:	78a2      	ldrb	r2, [r4, #2]
 80057f2:	9300      	str	r3, [sp, #0]
 80057f4:	1c69      	adds	r1, r5, #1
 80057f6:	7823      	ldrb	r3, [r4, #0]
 80057f8:	6d30      	ldr	r0, [r6, #80]	; 0x50
 80057fa:	f000 ffc9 	bl	8006790 <WS28xx::SetPixel(unsigned long, unsigned char, unsigned char, unsigned char)>
 80057fe:	7863      	ldrb	r3, [r4, #1]
 8005800:	78a2      	ldrb	r2, [r4, #2]
 8005802:	9300      	str	r3, [sp, #0]
 8005804:	1ca9      	adds	r1, r5, #2
 8005806:	7823      	ldrb	r3, [r4, #0]
 8005808:	6d30      	ldr	r0, [r6, #80]	; 0x50
 800580a:	3503      	adds	r5, #3
 800580c:	f000 ffc0 	bl	8006790 <WS28xx::SetPixel(unsigned long, unsigned char, unsigned char, unsigned char)>
 8005810:	45a9      	cmp	r9, r5
 8005812:	d1db      	bne.n	80057cc <WS28xxDmx::SetData(unsigned long, unsigned char const*, unsigned long, bool)+0x214>
 8005814:	4554      	cmp	r4, sl
 8005816:	f108 0803 	add.w	r8, r8, #3
 800581a:	f43f af6c 	beq.w	80056f6 <WS28xxDmx::SetData(unsigned long, unsigned char const*, unsigned long, bool)+0x13e>
 800581e:	9b02      	ldr	r3, [sp, #8]
 8005820:	4543      	cmp	r3, r8
 8005822:	445f      	add	r7, fp
 8005824:	f104 0403 	add.w	r4, r4, #3
 8005828:	44d9      	add	r9, fp
 800582a:	d8a5      	bhi.n	8005778 <WS28xxDmx::SetData(unsigned long, unsigned char const*, unsigned long, bool)+0x1c0>
 800582c:	e763      	b.n	80056f6 <WS28xxDmx::SetData(unsigned long, unsigned char const*, unsigned long, bool)+0x13e>
 800582e:	9b03      	ldr	r3, [sp, #12]
 8005830:	429f      	cmp	r7, r3
 8005832:	f4bf af60 	bcs.w	80056f6 <WS28xxDmx::SetData(unsigned long, unsigned char const*, unsigned long, bool)+0x13e>
 8005836:	9a02      	ldr	r2, [sp, #8]
 8005838:	4590      	cmp	r8, r2
 800583a:	f4bf af5c 	bcs.w	80056f6 <WS28xxDmx::SetData(unsigned long, unsigned char const*, unsigned long, bool)+0x13e>
 800583e:	eb03 0143 	add.w	r1, r3, r3, lsl #1
 8005842:	eb07 0247 	add.w	r2, r7, r7, lsl #1
 8005846:	1ee3      	subs	r3, r4, #3
 8005848:	1a9b      	subs	r3, r3, r2
 800584a:	440b      	add	r3, r1
 800584c:	fb0b f707 	mul.w	r7, fp, r7
 8005850:	4444      	add	r4, r8
 8005852:	eb03 0a08 	add.w	sl, r3, r8
 8005856:	eb0b 0907 	add.w	r9, fp, r7
 800585a:	f1bb 0f00 	cmp.w	fp, #0
 800585e:	d04a      	beq.n	80058f6 <WS28xxDmx::SetData(unsigned long, unsigned char const*, unsigned long, bool)+0x33e>
 8005860:	eba9 0307 	sub.w	r3, r9, r7
 8005864:	f013 0303 	ands.w	r3, r3, #3
 8005868:	463d      	mov	r5, r7
 800586a:	d020      	beq.n	80058ae <WS28xxDmx::SetData(unsigned long, unsigned char const*, unsigned long, bool)+0x2f6>
 800586c:	2b01      	cmp	r3, #1
 800586e:	d013      	beq.n	8005898 <WS28xxDmx::SetData(unsigned long, unsigned char const*, unsigned long, bool)+0x2e0>
 8005870:	2b02      	cmp	r3, #2
 8005872:	d008      	beq.n	8005886 <WS28xxDmx::SetData(unsigned long, unsigned char const*, unsigned long, bool)+0x2ce>
 8005874:	78a2      	ldrb	r2, [r4, #2]
 8005876:	7863      	ldrb	r3, [r4, #1]
 8005878:	9200      	str	r2, [sp, #0]
 800587a:	7822      	ldrb	r2, [r4, #0]
 800587c:	6d30      	ldr	r0, [r6, #80]	; 0x50
 800587e:	4639      	mov	r1, r7
 8005880:	f000 ff86 	bl	8006790 <WS28xx::SetPixel(unsigned long, unsigned char, unsigned char, unsigned char)>
 8005884:	1c7d      	adds	r5, r7, #1
 8005886:	78a2      	ldrb	r2, [r4, #2]
 8005888:	7863      	ldrb	r3, [r4, #1]
 800588a:	9200      	str	r2, [sp, #0]
 800588c:	4629      	mov	r1, r5
 800588e:	7822      	ldrb	r2, [r4, #0]
 8005890:	6d30      	ldr	r0, [r6, #80]	; 0x50
 8005892:	3501      	adds	r5, #1
 8005894:	f000 ff7c 	bl	8006790 <WS28xx::SetPixel(unsigned long, unsigned char, unsigned char, unsigned char)>
 8005898:	78a2      	ldrb	r2, [r4, #2]
 800589a:	7863      	ldrb	r3, [r4, #1]
 800589c:	9200      	str	r2, [sp, #0]
 800589e:	4629      	mov	r1, r5
 80058a0:	7822      	ldrb	r2, [r4, #0]
 80058a2:	6d30      	ldr	r0, [r6, #80]	; 0x50
 80058a4:	3501      	adds	r5, #1
 80058a6:	f000 ff73 	bl	8006790 <WS28xx::SetPixel(unsigned long, unsigned char, unsigned char, unsigned char)>
 80058aa:	454d      	cmp	r5, r9
 80058ac:	d023      	beq.n	80058f6 <WS28xxDmx::SetData(unsigned long, unsigned char const*, unsigned long, bool)+0x33e>
 80058ae:	78a2      	ldrb	r2, [r4, #2]
 80058b0:	7863      	ldrb	r3, [r4, #1]
 80058b2:	9200      	str	r2, [sp, #0]
 80058b4:	4629      	mov	r1, r5
 80058b6:	7822      	ldrb	r2, [r4, #0]
 80058b8:	6d30      	ldr	r0, [r6, #80]	; 0x50
 80058ba:	f000 ff69 	bl	8006790 <WS28xx::SetPixel(unsigned long, unsigned char, unsigned char, unsigned char)>
 80058be:	78a2      	ldrb	r2, [r4, #2]
 80058c0:	7863      	ldrb	r3, [r4, #1]
 80058c2:	9200      	str	r2, [sp, #0]
 80058c4:	3501      	adds	r5, #1
 80058c6:	4629      	mov	r1, r5
 80058c8:	7822      	ldrb	r2, [r4, #0]
 80058ca:	6d30      	ldr	r0, [r6, #80]	; 0x50
 80058cc:	f000 ff60 	bl	8006790 <WS28xx::SetPixel(unsigned long, unsigned char, unsigned char, unsigned char)>
 80058d0:	78a2      	ldrb	r2, [r4, #2]
 80058d2:	7863      	ldrb	r3, [r4, #1]
 80058d4:	9200      	str	r2, [sp, #0]
 80058d6:	1c69      	adds	r1, r5, #1
 80058d8:	7822      	ldrb	r2, [r4, #0]
 80058da:	6d30      	ldr	r0, [r6, #80]	; 0x50
 80058dc:	f000 ff58 	bl	8006790 <WS28xx::SetPixel(unsigned long, unsigned char, unsigned char, unsigned char)>
 80058e0:	78a2      	ldrb	r2, [r4, #2]
 80058e2:	7863      	ldrb	r3, [r4, #1]
 80058e4:	9200      	str	r2, [sp, #0]
 80058e6:	1ca9      	adds	r1, r5, #2
 80058e8:	7822      	ldrb	r2, [r4, #0]
 80058ea:	6d30      	ldr	r0, [r6, #80]	; 0x50
 80058ec:	3503      	adds	r5, #3
 80058ee:	f000 ff4f 	bl	8006790 <WS28xx::SetPixel(unsigned long, unsigned char, unsigned char, unsigned char)>
 80058f2:	454d      	cmp	r5, r9
 80058f4:	d1db      	bne.n	80058ae <WS28xxDmx::SetData(unsigned long, unsigned char const*, unsigned long, bool)+0x2f6>
 80058f6:	45a2      	cmp	sl, r4
 80058f8:	f108 0803 	add.w	r8, r8, #3
 80058fc:	f43f aefb 	beq.w	80056f6 <WS28xxDmx::SetData(unsigned long, unsigned char const*, unsigned long, bool)+0x13e>
 8005900:	9b02      	ldr	r3, [sp, #8]
 8005902:	4543      	cmp	r3, r8
 8005904:	445f      	add	r7, fp
 8005906:	f104 0403 	add.w	r4, r4, #3
 800590a:	44d9      	add	r9, fp
 800590c:	d8a5      	bhi.n	800585a <WS28xxDmx::SetData(unsigned long, unsigned char const*, unsigned long, bool)+0x2a2>
 800590e:	e6f2      	b.n	80056f6 <WS28xxDmx::SetData(unsigned long, unsigned char const*, unsigned long, bool)+0x13e>
 8005910:	9b03      	ldr	r3, [sp, #12]
 8005912:	429f      	cmp	r7, r3
 8005914:	f4bf aeef 	bcs.w	80056f6 <WS28xxDmx::SetData(unsigned long, unsigned char const*, unsigned long, bool)+0x13e>
 8005918:	9b02      	ldr	r3, [sp, #8]
 800591a:	4598      	cmp	r8, r3
 800591c:	f4bf aeeb 	bcs.w	80056f6 <WS28xxDmx::SetData(unsigned long, unsigned char const*, unsigned long, bool)+0x13e>
 8005920:	9b03      	ldr	r3, [sp, #12]
 8005922:	eb07 0247 	add.w	r2, r7, r7, lsl #1
 8005926:	eb03 0143 	add.w	r1, r3, r3, lsl #1
 800592a:	1ee3      	subs	r3, r4, #3
 800592c:	1a9b      	subs	r3, r3, r2
 800592e:	440b      	add	r3, r1
 8005930:	fb0b f707 	mul.w	r7, fp, r7
 8005934:	4444      	add	r4, r8
 8005936:	eb03 0a08 	add.w	sl, r3, r8
 800593a:	eb07 090b 	add.w	r9, r7, fp
 800593e:	f1bb 0f00 	cmp.w	fp, #0
 8005942:	d04a      	beq.n	80059da <WS28xxDmx::SetData(unsigned long, unsigned char const*, unsigned long, bool)+0x422>
 8005944:	eba9 0307 	sub.w	r3, r9, r7
 8005948:	f013 0303 	ands.w	r3, r3, #3
 800594c:	463d      	mov	r5, r7
 800594e:	d020      	beq.n	8005992 <WS28xxDmx::SetData(unsigned long, unsigned char const*, unsigned long, bool)+0x3da>
 8005950:	2b01      	cmp	r3, #1
 8005952:	d013      	beq.n	800597c <WS28xxDmx::SetData(unsigned long, unsigned char const*, unsigned long, bool)+0x3c4>
 8005954:	2b02      	cmp	r3, #2
 8005956:	d008      	beq.n	800596a <WS28xxDmx::SetData(unsigned long, unsigned char const*, unsigned long, bool)+0x3b2>
 8005958:	7862      	ldrb	r2, [r4, #1]
 800595a:	78a3      	ldrb	r3, [r4, #2]
 800595c:	9200      	str	r2, [sp, #0]
 800595e:	7822      	ldrb	r2, [r4, #0]
 8005960:	6d30      	ldr	r0, [r6, #80]	; 0x50
 8005962:	4639      	mov	r1, r7
 8005964:	f000 ff14 	bl	8006790 <WS28xx::SetPixel(unsigned long, unsigned char, unsigned char, unsigned char)>
 8005968:	1c7d      	adds	r5, r7, #1
 800596a:	7862      	ldrb	r2, [r4, #1]
 800596c:	78a3      	ldrb	r3, [r4, #2]
 800596e:	9200      	str	r2, [sp, #0]
 8005970:	4629      	mov	r1, r5
 8005972:	7822      	ldrb	r2, [r4, #0]
 8005974:	6d30      	ldr	r0, [r6, #80]	; 0x50
 8005976:	3501      	adds	r5, #1
 8005978:	f000 ff0a 	bl	8006790 <WS28xx::SetPixel(unsigned long, unsigned char, unsigned char, unsigned char)>
 800597c:	7862      	ldrb	r2, [r4, #1]
 800597e:	78a3      	ldrb	r3, [r4, #2]
 8005980:	9200      	str	r2, [sp, #0]
 8005982:	4629      	mov	r1, r5
 8005984:	7822      	ldrb	r2, [r4, #0]
 8005986:	6d30      	ldr	r0, [r6, #80]	; 0x50
 8005988:	3501      	adds	r5, #1
 800598a:	f000 ff01 	bl	8006790 <WS28xx::SetPixel(unsigned long, unsigned char, unsigned char, unsigned char)>
 800598e:	45a9      	cmp	r9, r5
 8005990:	d023      	beq.n	80059da <WS28xxDmx::SetData(unsigned long, unsigned char const*, unsigned long, bool)+0x422>
 8005992:	7862      	ldrb	r2, [r4, #1]
 8005994:	78a3      	ldrb	r3, [r4, #2]
 8005996:	9200      	str	r2, [sp, #0]
 8005998:	4629      	mov	r1, r5
 800599a:	7822      	ldrb	r2, [r4, #0]
 800599c:	6d30      	ldr	r0, [r6, #80]	; 0x50
 800599e:	f000 fef7 	bl	8006790 <WS28xx::SetPixel(unsigned long, unsigned char, unsigned char, unsigned char)>
 80059a2:	7862      	ldrb	r2, [r4, #1]
 80059a4:	78a3      	ldrb	r3, [r4, #2]
 80059a6:	9200      	str	r2, [sp, #0]
 80059a8:	3501      	adds	r5, #1
 80059aa:	4629      	mov	r1, r5
 80059ac:	7822      	ldrb	r2, [r4, #0]
 80059ae:	6d30      	ldr	r0, [r6, #80]	; 0x50
 80059b0:	f000 feee 	bl	8006790 <WS28xx::SetPixel(unsigned long, unsigned char, unsigned char, unsigned char)>
 80059b4:	7862      	ldrb	r2, [r4, #1]
 80059b6:	78a3      	ldrb	r3, [r4, #2]
 80059b8:	9200      	str	r2, [sp, #0]
 80059ba:	1c69      	adds	r1, r5, #1
 80059bc:	7822      	ldrb	r2, [r4, #0]
 80059be:	6d30      	ldr	r0, [r6, #80]	; 0x50
 80059c0:	f000 fee6 	bl	8006790 <WS28xx::SetPixel(unsigned long, unsigned char, unsigned char, unsigned char)>
 80059c4:	7862      	ldrb	r2, [r4, #1]
 80059c6:	78a3      	ldrb	r3, [r4, #2]
 80059c8:	9200      	str	r2, [sp, #0]
 80059ca:	1ca9      	adds	r1, r5, #2
 80059cc:	7822      	ldrb	r2, [r4, #0]
 80059ce:	6d30      	ldr	r0, [r6, #80]	; 0x50
 80059d0:	3503      	adds	r5, #3
 80059d2:	f000 fedd 	bl	8006790 <WS28xx::SetPixel(unsigned long, unsigned char, unsigned char, unsigned char)>
 80059d6:	45a9      	cmp	r9, r5
 80059d8:	d1db      	bne.n	8005992 <WS28xxDmx::SetData(unsigned long, unsigned char const*, unsigned long, bool)+0x3da>
 80059da:	45a2      	cmp	sl, r4
 80059dc:	f108 0803 	add.w	r8, r8, #3
 80059e0:	f43f ae89 	beq.w	80056f6 <WS28xxDmx::SetData(unsigned long, unsigned char const*, unsigned long, bool)+0x13e>
 80059e4:	9b02      	ldr	r3, [sp, #8]
 80059e6:	4543      	cmp	r3, r8
 80059e8:	445f      	add	r7, fp
 80059ea:	f104 0403 	add.w	r4, r4, #3
 80059ee:	44d9      	add	r9, fp
 80059f0:	d8a5      	bhi.n	800593e <WS28xxDmx::SetData(unsigned long, unsigned char const*, unsigned long, bool)+0x386>
 80059f2:	e680      	b.n	80056f6 <WS28xxDmx::SetData(unsigned long, unsigned char const*, unsigned long, bool)+0x13e>
 80059f4:	9b03      	ldr	r3, [sp, #12]
 80059f6:	429f      	cmp	r7, r3
 80059f8:	f4bf ae7d 	bcs.w	80056f6 <WS28xxDmx::SetData(unsigned long, unsigned char const*, unsigned long, bool)+0x13e>
 80059fc:	9b02      	ldr	r3, [sp, #8]
 80059fe:	4598      	cmp	r8, r3
 8005a00:	f4bf ae79 	bcs.w	80056f6 <WS28xxDmx::SetData(unsigned long, unsigned char const*, unsigned long, bool)+0x13e>
 8005a04:	9b03      	ldr	r3, [sp, #12]
 8005a06:	eb07 0247 	add.w	r2, r7, r7, lsl #1
 8005a0a:	eb03 0143 	add.w	r1, r3, r3, lsl #1
 8005a0e:	1ee3      	subs	r3, r4, #3
 8005a10:	1a9b      	subs	r3, r3, r2
 8005a12:	440b      	add	r3, r1
 8005a14:	fb0b f707 	mul.w	r7, fp, r7
 8005a18:	4444      	add	r4, r8
 8005a1a:	eb03 0a08 	add.w	sl, r3, r8
 8005a1e:	eb0b 0907 	add.w	r9, fp, r7
 8005a22:	f1bb 0f00 	cmp.w	fp, #0
 8005a26:	d04a      	beq.n	8005abe <WS28xxDmx::SetData(unsigned long, unsigned char const*, unsigned long, bool)+0x506>
 8005a28:	eba9 0307 	sub.w	r3, r9, r7
 8005a2c:	f013 0303 	ands.w	r3, r3, #3
 8005a30:	463d      	mov	r5, r7
 8005a32:	d020      	beq.n	8005a76 <WS28xxDmx::SetData(unsigned long, unsigned char const*, unsigned long, bool)+0x4be>
 8005a34:	2b01      	cmp	r3, #1
 8005a36:	d013      	beq.n	8005a60 <WS28xxDmx::SetData(unsigned long, unsigned char const*, unsigned long, bool)+0x4a8>
 8005a38:	2b02      	cmp	r3, #2
 8005a3a:	d008      	beq.n	8005a4e <WS28xxDmx::SetData(unsigned long, unsigned char const*, unsigned long, bool)+0x496>
 8005a3c:	7821      	ldrb	r1, [r4, #0]
 8005a3e:	7863      	ldrb	r3, [r4, #1]
 8005a40:	78a2      	ldrb	r2, [r4, #2]
 8005a42:	9100      	str	r1, [sp, #0]
 8005a44:	6d30      	ldr	r0, [r6, #80]	; 0x50
 8005a46:	4639      	mov	r1, r7
 8005a48:	f000 fea2 	bl	8006790 <WS28xx::SetPixel(unsigned long, unsigned char, unsigned char, unsigned char)>
 8005a4c:	1c7d      	adds	r5, r7, #1
 8005a4e:	7821      	ldrb	r1, [r4, #0]
 8005a50:	7863      	ldrb	r3, [r4, #1]
 8005a52:	78a2      	ldrb	r2, [r4, #2]
 8005a54:	9100      	str	r1, [sp, #0]
 8005a56:	6d30      	ldr	r0, [r6, #80]	; 0x50
 8005a58:	4629      	mov	r1, r5
 8005a5a:	3501      	adds	r5, #1
 8005a5c:	f000 fe98 	bl	8006790 <WS28xx::SetPixel(unsigned long, unsigned char, unsigned char, unsigned char)>
 8005a60:	7821      	ldrb	r1, [r4, #0]
 8005a62:	7863      	ldrb	r3, [r4, #1]
 8005a64:	78a2      	ldrb	r2, [r4, #2]
 8005a66:	9100      	str	r1, [sp, #0]
 8005a68:	6d30      	ldr	r0, [r6, #80]	; 0x50
 8005a6a:	4629      	mov	r1, r5
 8005a6c:	3501      	adds	r5, #1
 8005a6e:	f000 fe8f 	bl	8006790 <WS28xx::SetPixel(unsigned long, unsigned char, unsigned char, unsigned char)>
 8005a72:	454d      	cmp	r5, r9
 8005a74:	d023      	beq.n	8005abe <WS28xxDmx::SetData(unsigned long, unsigned char const*, unsigned long, bool)+0x506>
 8005a76:	7821      	ldrb	r1, [r4, #0]
 8005a78:	7863      	ldrb	r3, [r4, #1]
 8005a7a:	78a2      	ldrb	r2, [r4, #2]
 8005a7c:	9100      	str	r1, [sp, #0]
 8005a7e:	6d30      	ldr	r0, [r6, #80]	; 0x50
 8005a80:	4629      	mov	r1, r5
 8005a82:	f000 fe85 	bl	8006790 <WS28xx::SetPixel(unsigned long, unsigned char, unsigned char, unsigned char)>
 8005a86:	7821      	ldrb	r1, [r4, #0]
 8005a88:	7863      	ldrb	r3, [r4, #1]
 8005a8a:	78a2      	ldrb	r2, [r4, #2]
 8005a8c:	9100      	str	r1, [sp, #0]
 8005a8e:	3501      	adds	r5, #1
 8005a90:	4629      	mov	r1, r5
 8005a92:	6d30      	ldr	r0, [r6, #80]	; 0x50
 8005a94:	f000 fe7c 	bl	8006790 <WS28xx::SetPixel(unsigned long, unsigned char, unsigned char, unsigned char)>
 8005a98:	7821      	ldrb	r1, [r4, #0]
 8005a9a:	7863      	ldrb	r3, [r4, #1]
 8005a9c:	78a2      	ldrb	r2, [r4, #2]
 8005a9e:	9100      	str	r1, [sp, #0]
 8005aa0:	6d30      	ldr	r0, [r6, #80]	; 0x50
 8005aa2:	1c69      	adds	r1, r5, #1
 8005aa4:	f000 fe74 	bl	8006790 <WS28xx::SetPixel(unsigned long, unsigned char, unsigned char, unsigned char)>
 8005aa8:	7821      	ldrb	r1, [r4, #0]
 8005aaa:	7863      	ldrb	r3, [r4, #1]
 8005aac:	78a2      	ldrb	r2, [r4, #2]
 8005aae:	9100      	str	r1, [sp, #0]
 8005ab0:	6d30      	ldr	r0, [r6, #80]	; 0x50
 8005ab2:	1ca9      	adds	r1, r5, #2
 8005ab4:	3503      	adds	r5, #3
 8005ab6:	f000 fe6b 	bl	8006790 <WS28xx::SetPixel(unsigned long, unsigned char, unsigned char, unsigned char)>
 8005aba:	454d      	cmp	r5, r9
 8005abc:	d1db      	bne.n	8005a76 <WS28xxDmx::SetData(unsigned long, unsigned char const*, unsigned long, bool)+0x4be>
 8005abe:	4554      	cmp	r4, sl
 8005ac0:	f108 0803 	add.w	r8, r8, #3
 8005ac4:	f43f ae17 	beq.w	80056f6 <WS28xxDmx::SetData(unsigned long, unsigned char const*, unsigned long, bool)+0x13e>
 8005ac8:	9b02      	ldr	r3, [sp, #8]
 8005aca:	4543      	cmp	r3, r8
 8005acc:	445f      	add	r7, fp
 8005ace:	f104 0403 	add.w	r4, r4, #3
 8005ad2:	44d9      	add	r9, fp
 8005ad4:	d8a5      	bhi.n	8005a22 <WS28xxDmx::SetData(unsigned long, unsigned char const*, unsigned long, bool)+0x46a>
 8005ad6:	e60e      	b.n	80056f6 <WS28xxDmx::SetData(unsigned long, unsigned char const*, unsigned long, bool)+0x13e>
 8005ad8:	9b03      	ldr	r3, [sp, #12]
 8005ada:	429f      	cmp	r7, r3
 8005adc:	f4bf ae0b 	bcs.w	80056f6 <WS28xxDmx::SetData(unsigned long, unsigned char const*, unsigned long, bool)+0x13e>
 8005ae0:	9b02      	ldr	r3, [sp, #8]
 8005ae2:	4598      	cmp	r8, r3
 8005ae4:	f4bf ae07 	bcs.w	80056f6 <WS28xxDmx::SetData(unsigned long, unsigned char const*, unsigned long, bool)+0x13e>
 8005ae8:	9b03      	ldr	r3, [sp, #12]
 8005aea:	eb07 0247 	add.w	r2, r7, r7, lsl #1
 8005aee:	eb03 0143 	add.w	r1, r3, r3, lsl #1
 8005af2:	1ee3      	subs	r3, r4, #3
 8005af4:	1a9b      	subs	r3, r3, r2
 8005af6:	440b      	add	r3, r1
 8005af8:	fb0b f707 	mul.w	r7, fp, r7
 8005afc:	4444      	add	r4, r8
 8005afe:	eb03 0a08 	add.w	sl, r3, r8
 8005b02:	eb0b 0907 	add.w	r9, fp, r7
 8005b06:	f1bb 0f00 	cmp.w	fp, #0
 8005b0a:	d04a      	beq.n	8005ba2 <WS28xxDmx::SetData(unsigned long, unsigned char const*, unsigned long, bool)+0x5ea>
 8005b0c:	eba9 0307 	sub.w	r3, r9, r7
 8005b10:	f013 0303 	ands.w	r3, r3, #3
 8005b14:	463d      	mov	r5, r7
 8005b16:	d020      	beq.n	8005b5a <WS28xxDmx::SetData(unsigned long, unsigned char const*, unsigned long, bool)+0x5a2>
 8005b18:	2b01      	cmp	r3, #1
 8005b1a:	d013      	beq.n	8005b44 <WS28xxDmx::SetData(unsigned long, unsigned char const*, unsigned long, bool)+0x58c>
 8005b1c:	2b02      	cmp	r3, #2
 8005b1e:	d008      	beq.n	8005b32 <WS28xxDmx::SetData(unsigned long, unsigned char const*, unsigned long, bool)+0x57a>
 8005b20:	7821      	ldrb	r1, [r4, #0]
 8005b22:	78a3      	ldrb	r3, [r4, #2]
 8005b24:	7862      	ldrb	r2, [r4, #1]
 8005b26:	9100      	str	r1, [sp, #0]
 8005b28:	6d30      	ldr	r0, [r6, #80]	; 0x50
 8005b2a:	4639      	mov	r1, r7
 8005b2c:	f000 fe30 	bl	8006790 <WS28xx::SetPixel(unsigned long, unsigned char, unsigned char, unsigned char)>
 8005b30:	1c7d      	adds	r5, r7, #1
 8005b32:	7821      	ldrb	r1, [r4, #0]
 8005b34:	78a3      	ldrb	r3, [r4, #2]
 8005b36:	7862      	ldrb	r2, [r4, #1]
 8005b38:	9100      	str	r1, [sp, #0]
 8005b3a:	6d30      	ldr	r0, [r6, #80]	; 0x50
 8005b3c:	4629      	mov	r1, r5
 8005b3e:	3501      	adds	r5, #1
 8005b40:	f000 fe26 	bl	8006790 <WS28xx::SetPixel(unsigned long, unsigned char, unsigned char, unsigned char)>
 8005b44:	7821      	ldrb	r1, [r4, #0]
 8005b46:	78a3      	ldrb	r3, [r4, #2]
 8005b48:	7862      	ldrb	r2, [r4, #1]
 8005b4a:	9100      	str	r1, [sp, #0]
 8005b4c:	6d30      	ldr	r0, [r6, #80]	; 0x50
 8005b4e:	4629      	mov	r1, r5
 8005b50:	3501      	adds	r5, #1
 8005b52:	f000 fe1d 	bl	8006790 <WS28xx::SetPixel(unsigned long, unsigned char, unsigned char, unsigned char)>
 8005b56:	454d      	cmp	r5, r9
 8005b58:	d023      	beq.n	8005ba2 <WS28xxDmx::SetData(unsigned long, unsigned char const*, unsigned long, bool)+0x5ea>
 8005b5a:	7821      	ldrb	r1, [r4, #0]
 8005b5c:	78a3      	ldrb	r3, [r4, #2]
 8005b5e:	7862      	ldrb	r2, [r4, #1]
 8005b60:	9100      	str	r1, [sp, #0]
 8005b62:	6d30      	ldr	r0, [r6, #80]	; 0x50
 8005b64:	4629      	mov	r1, r5
 8005b66:	f000 fe13 	bl	8006790 <WS28xx::SetPixel(unsigned long, unsigned char, unsigned char, unsigned char)>
 8005b6a:	7821      	ldrb	r1, [r4, #0]
 8005b6c:	78a3      	ldrb	r3, [r4, #2]
 8005b6e:	7862      	ldrb	r2, [r4, #1]
 8005b70:	9100      	str	r1, [sp, #0]
 8005b72:	3501      	adds	r5, #1
 8005b74:	4629      	mov	r1, r5
 8005b76:	6d30      	ldr	r0, [r6, #80]	; 0x50
 8005b78:	f000 fe0a 	bl	8006790 <WS28xx::SetPixel(unsigned long, unsigned char, unsigned char, unsigned char)>
 8005b7c:	7821      	ldrb	r1, [r4, #0]
 8005b7e:	78a3      	ldrb	r3, [r4, #2]
 8005b80:	7862      	ldrb	r2, [r4, #1]
 8005b82:	9100      	str	r1, [sp, #0]
 8005b84:	6d30      	ldr	r0, [r6, #80]	; 0x50
 8005b86:	1c69      	adds	r1, r5, #1
 8005b88:	f000 fe02 	bl	8006790 <WS28xx::SetPixel(unsigned long, unsigned char, unsigned char, unsigned char)>
 8005b8c:	7821      	ldrb	r1, [r4, #0]
 8005b8e:	78a3      	ldrb	r3, [r4, #2]
 8005b90:	7862      	ldrb	r2, [r4, #1]
 8005b92:	9100      	str	r1, [sp, #0]
 8005b94:	6d30      	ldr	r0, [r6, #80]	; 0x50
 8005b96:	1ca9      	adds	r1, r5, #2
 8005b98:	3503      	adds	r5, #3
 8005b9a:	f000 fdf9 	bl	8006790 <WS28xx::SetPixel(unsigned long, unsigned char, unsigned char, unsigned char)>
 8005b9e:	454d      	cmp	r5, r9
 8005ba0:	d1db      	bne.n	8005b5a <WS28xxDmx::SetData(unsigned long, unsigned char const*, unsigned long, bool)+0x5a2>
 8005ba2:	4554      	cmp	r4, sl
 8005ba4:	f108 0803 	add.w	r8, r8, #3
 8005ba8:	f43f ada5 	beq.w	80056f6 <WS28xxDmx::SetData(unsigned long, unsigned char const*, unsigned long, bool)+0x13e>
 8005bac:	9b02      	ldr	r3, [sp, #8]
 8005bae:	4543      	cmp	r3, r8
 8005bb0:	445f      	add	r7, fp
 8005bb2:	f104 0403 	add.w	r4, r4, #3
 8005bb6:	44d9      	add	r9, fp
 8005bb8:	d8a5      	bhi.n	8005b06 <WS28xxDmx::SetData(unsigned long, unsigned char const*, unsigned long, bool)+0x54e>
 8005bba:	e59c      	b.n	80056f6 <WS28xxDmx::SetData(unsigned long, unsigned char const*, unsigned long, bool)+0x13e>
 8005bbc:	9b03      	ldr	r3, [sp, #12]
 8005bbe:	429f      	cmp	r7, r3
 8005bc0:	f4bf ad99 	bcs.w	80056f6 <WS28xxDmx::SetData(unsigned long, unsigned char const*, unsigned long, bool)+0x13e>
 8005bc4:	9b02      	ldr	r3, [sp, #8]
 8005bc6:	4598      	cmp	r8, r3
 8005bc8:	f4bf ad95 	bcs.w	80056f6 <WS28xxDmx::SetData(unsigned long, unsigned char const*, unsigned long, bool)+0x13e>
 8005bcc:	9b03      	ldr	r3, [sp, #12]
 8005bce:	eb07 0247 	add.w	r2, r7, r7, lsl #1
 8005bd2:	eb03 0143 	add.w	r1, r3, r3, lsl #1
 8005bd6:	1ee3      	subs	r3, r4, #3
 8005bd8:	1a9b      	subs	r3, r3, r2
 8005bda:	440b      	add	r3, r1
 8005bdc:	fb0b f707 	mul.w	r7, fp, r7
 8005be0:	4444      	add	r4, r8
 8005be2:	eb03 0a08 	add.w	sl, r3, r8
 8005be6:	eb07 090b 	add.w	r9, r7, fp
 8005bea:	f1bb 0f00 	cmp.w	fp, #0
 8005bee:	d04a      	beq.n	8005c86 <WS28xxDmx::SetData(unsigned long, unsigned char const*, unsigned long, bool)+0x6ce>
 8005bf0:	eba9 0307 	sub.w	r3, r9, r7
 8005bf4:	f013 0303 	ands.w	r3, r3, #3
 8005bf8:	463d      	mov	r5, r7
 8005bfa:	d020      	beq.n	8005c3e <WS28xxDmx::SetData(unsigned long, unsigned char const*, unsigned long, bool)+0x686>
 8005bfc:	2b01      	cmp	r3, #1
 8005bfe:	d013      	beq.n	8005c28 <WS28xxDmx::SetData(unsigned long, unsigned char const*, unsigned long, bool)+0x670>
 8005c00:	2b02      	cmp	r3, #2
 8005c02:	d008      	beq.n	8005c16 <WS28xxDmx::SetData(unsigned long, unsigned char const*, unsigned long, bool)+0x65e>
 8005c04:	78a3      	ldrb	r3, [r4, #2]
 8005c06:	7862      	ldrb	r2, [r4, #1]
 8005c08:	9300      	str	r3, [sp, #0]
 8005c0a:	7823      	ldrb	r3, [r4, #0]
 8005c0c:	6d30      	ldr	r0, [r6, #80]	; 0x50
 8005c0e:	4639      	mov	r1, r7
 8005c10:	f000 fdbe 	bl	8006790 <WS28xx::SetPixel(unsigned long, unsigned char, unsigned char, unsigned char)>
 8005c14:	1c7d      	adds	r5, r7, #1
 8005c16:	78a3      	ldrb	r3, [r4, #2]
 8005c18:	7862      	ldrb	r2, [r4, #1]
 8005c1a:	9300      	str	r3, [sp, #0]
 8005c1c:	4629      	mov	r1, r5
 8005c1e:	7823      	ldrb	r3, [r4, #0]
 8005c20:	6d30      	ldr	r0, [r6, #80]	; 0x50
 8005c22:	3501      	adds	r5, #1
 8005c24:	f000 fdb4 	bl	8006790 <WS28xx::SetPixel(unsigned long, unsigned char, unsigned char, unsigned char)>
 8005c28:	78a3      	ldrb	r3, [r4, #2]
 8005c2a:	7862      	ldrb	r2, [r4, #1]
 8005c2c:	9300      	str	r3, [sp, #0]
 8005c2e:	4629      	mov	r1, r5
 8005c30:	7823      	ldrb	r3, [r4, #0]
 8005c32:	6d30      	ldr	r0, [r6, #80]	; 0x50
 8005c34:	3501      	adds	r5, #1
 8005c36:	f000 fdab 	bl	8006790 <WS28xx::SetPixel(unsigned long, unsigned char, unsigned char, unsigned char)>
 8005c3a:	45a9      	cmp	r9, r5
 8005c3c:	d023      	beq.n	8005c86 <WS28xxDmx::SetData(unsigned long, unsigned char const*, unsigned long, bool)+0x6ce>
 8005c3e:	78a3      	ldrb	r3, [r4, #2]
 8005c40:	7862      	ldrb	r2, [r4, #1]
 8005c42:	9300      	str	r3, [sp, #0]
 8005c44:	4629      	mov	r1, r5
 8005c46:	7823      	ldrb	r3, [r4, #0]
 8005c48:	6d30      	ldr	r0, [r6, #80]	; 0x50
 8005c4a:	f000 fda1 	bl	8006790 <WS28xx::SetPixel(unsigned long, unsigned char, unsigned char, unsigned char)>
 8005c4e:	78a3      	ldrb	r3, [r4, #2]
 8005c50:	7862      	ldrb	r2, [r4, #1]
 8005c52:	9300      	str	r3, [sp, #0]
 8005c54:	3501      	adds	r5, #1
 8005c56:	4629      	mov	r1, r5
 8005c58:	7823      	ldrb	r3, [r4, #0]
 8005c5a:	6d30      	ldr	r0, [r6, #80]	; 0x50
 8005c5c:	f000 fd98 	bl	8006790 <WS28xx::SetPixel(unsigned long, unsigned char, unsigned char, unsigned char)>
 8005c60:	78a3      	ldrb	r3, [r4, #2]
 8005c62:	7862      	ldrb	r2, [r4, #1]
 8005c64:	9300      	str	r3, [sp, #0]
 8005c66:	1c69      	adds	r1, r5, #1
 8005c68:	7823      	ldrb	r3, [r4, #0]
 8005c6a:	6d30      	ldr	r0, [r6, #80]	; 0x50
 8005c6c:	f000 fd90 	bl	8006790 <WS28xx::SetPixel(unsigned long, unsigned char, unsigned char, unsigned char)>
 8005c70:	78a3      	ldrb	r3, [r4, #2]
 8005c72:	7862      	ldrb	r2, [r4, #1]
 8005c74:	9300      	str	r3, [sp, #0]
 8005c76:	1ca9      	adds	r1, r5, #2
 8005c78:	7823      	ldrb	r3, [r4, #0]
 8005c7a:	6d30      	ldr	r0, [r6, #80]	; 0x50
 8005c7c:	3503      	adds	r5, #3
 8005c7e:	f000 fd87 	bl	8006790 <WS28xx::SetPixel(unsigned long, unsigned char, unsigned char, unsigned char)>
 8005c82:	45a9      	cmp	r9, r5
 8005c84:	d1db      	bne.n	8005c3e <WS28xxDmx::SetData(unsigned long, unsigned char const*, unsigned long, bool)+0x686>
 8005c86:	45a2      	cmp	sl, r4
 8005c88:	f108 0803 	add.w	r8, r8, #3
 8005c8c:	f43f ad33 	beq.w	80056f6 <WS28xxDmx::SetData(unsigned long, unsigned char const*, unsigned long, bool)+0x13e>
 8005c90:	9b02      	ldr	r3, [sp, #8]
 8005c92:	4543      	cmp	r3, r8
 8005c94:	445f      	add	r7, fp
 8005c96:	f104 0403 	add.w	r4, r4, #3
 8005c9a:	44d9      	add	r9, fp
 8005c9c:	d8a5      	bhi.n	8005bea <WS28xxDmx::SetData(unsigned long, unsigned char const*, unsigned long, bool)+0x632>
 8005c9e:	e52a      	b.n	80056f6 <WS28xxDmx::SetData(unsigned long, unsigned char const*, unsigned long, bool)+0x13e>

08005ca0 <WS28xxDmx::FullOn()>:
 8005ca0:	b510      	push	{r4, lr}
 8005ca2:	4604      	mov	r4, r0
 8005ca4:	f003 fec6 	bl	8009a34 <gd32_spi_dma_tx_is_active()>
 8005ca8:	2800      	cmp	r0, #0
 8005caa:	d1fb      	bne.n	8005ca4 <WS28xxDmx::FullOn()+0x4>
 8005cac:	6d20      	ldr	r0, [r4, #80]	; 0x50
 8005cae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005cb2:	f001 b858 	b.w	8006d66 <WS28xx::FullOn()>
 8005cb6:	bf00      	nop

08005cb8 <WS28xxDmx::Print()>:
 8005cb8:	3004      	adds	r0, #4
 8005cba:	f7ff bc31 	b.w	8005520 <PixelDmxConfiguration::Print()>
 8005cbe:	bf00      	nop

08005cc0 <WS28xxDmx::Start(unsigned long)>:
 8005cc0:	f890 305c 	ldrb.w	r3, [r0, #92]	; 0x5c
 8005cc4:	b943      	cbnz	r3, 8005cd8 <WS28xxDmx::Start(unsigned long)+0x18>
 8005cc6:	6d83      	ldr	r3, [r0, #88]	; 0x58
 8005cc8:	2201      	movs	r2, #1
 8005cca:	f880 205c 	strb.w	r2, [r0, #92]	; 0x5c
 8005cce:	b11b      	cbz	r3, 8005cd8 <WS28xxDmx::Start(unsigned long)+0x18>
 8005cd0:	681a      	ldr	r2, [r3, #0]
 8005cd2:	4618      	mov	r0, r3
 8005cd4:	6893      	ldr	r3, [r2, #8]
 8005cd6:	4718      	bx	r3
 8005cd8:	4770      	bx	lr
 8005cda:	bf00      	nop

08005cdc <WS28xxDmx::Stop(unsigned long)>:
 8005cdc:	f890 305c 	ldrb.w	r3, [r0, #92]	; 0x5c
 8005ce0:	b143      	cbz	r3, 8005cf4 <WS28xxDmx::Stop(unsigned long)+0x18>
 8005ce2:	6d83      	ldr	r3, [r0, #88]	; 0x58
 8005ce4:	2200      	movs	r2, #0
 8005ce6:	f880 205c 	strb.w	r2, [r0, #92]	; 0x5c
 8005cea:	b11b      	cbz	r3, 8005cf4 <WS28xxDmx::Stop(unsigned long)+0x18>
 8005cec:	681a      	ldr	r2, [r3, #0]
 8005cee:	4618      	mov	r0, r3
 8005cf0:	68d3      	ldr	r3, [r2, #12]
 8005cf2:	4718      	bx	r3
 8005cf4:	4770      	bx	lr
 8005cf6:	bf00      	nop

08005cf8 <WS28xxDmx::SetDmxStartAddress(unsigned short)>:
 8005cf8:	f8b0 204c 	ldrh.w	r2, [r0, #76]	; 0x4c
 8005cfc:	428a      	cmp	r2, r1
 8005cfe:	d016      	beq.n	8005d2e <WS28xxDmx::SetDmxStartAddress(unsigned short)+0x36>
 8005d00:	f8b0 204e 	ldrh.w	r2, [r0, #78]	; 0x4e
 8005d04:	440a      	add	r2, r1
 8005d06:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 8005d0a:	b508      	push	{r3, lr}
 8005d0c:	dc03      	bgt.n	8005d16 <WS28xxDmx::SetDmxStartAddress(unsigned short)+0x1e>
 8005d0e:	1e4a      	subs	r2, r1, #1
 8005d10:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 8005d14:	d301      	bcc.n	8005d1a <WS28xxDmx::SetDmxStartAddress(unsigned short)+0x22>
 8005d16:	2000      	movs	r0, #0
 8005d18:	bd08      	pop	{r3, pc}
 8005d1a:	6d42      	ldr	r2, [r0, #84]	; 0x54
 8005d1c:	f8a0 104c 	strh.w	r1, [r0, #76]	; 0x4c
 8005d20:	b11a      	cbz	r2, 8005d2a <WS28xxDmx::SetDmxStartAddress(unsigned short)+0x32>
 8005d22:	6813      	ldr	r3, [r2, #0]
 8005d24:	4610      	mov	r0, r2
 8005d26:	69db      	ldr	r3, [r3, #28]
 8005d28:	4798      	blx	r3
 8005d2a:	2001      	movs	r0, #1
 8005d2c:	bd08      	pop	{r3, pc}
 8005d2e:	2001      	movs	r0, #1
 8005d30:	4770      	bx	lr
 8005d32:	bf00      	nop

08005d34 <WS28xxDmx::GetSlotInfo(unsigned short, lightset::SlotInfo&)>:
 8005d34:	f8b0 304e 	ldrh.w	r3, [r0, #78]	; 0x4e
 8005d38:	428b      	cmp	r3, r1
 8005d3a:	d30c      	bcc.n	8005d56 <WS28xxDmx::GetSlotInfo(unsigned short, lightset::SlotInfo&)+0x22>
 8005d3c:	2300      	movs	r3, #0
 8005d3e:	7093      	strb	r3, [r2, #2]
 8005d40:	6c83      	ldr	r3, [r0, #72]	; 0x48
 8005d42:	fbb1 f0f3 	udiv	r0, r1, r3
 8005d46:	fb03 1110 	mls	r1, r3, r0, r1
 8005d4a:	2903      	cmp	r1, #3
 8005d4c:	d80a      	bhi.n	8005d64 <WS28xxDmx::GetSlotInfo(unsigned short, lightset::SlotInfo&)+0x30>
 8005d4e:	e8df f001 	tbb	[pc, r1]
 8005d52:	0904130e 	stmdbeq	r4, {r1, r2, r3, r8, r9, ip}
 8005d56:	2000      	movs	r0, #0
 8005d58:	4770      	bx	lr
 8005d5a:	f240 2307 	movw	r3, #519	; 0x207
 8005d5e:	8013      	strh	r3, [r2, #0]
 8005d60:	2001      	movs	r0, #1
 8005d62:	4770      	bx	lr
 8005d64:	f240 2312 	movw	r3, #530	; 0x212
 8005d68:	8013      	strh	r3, [r2, #0]
 8005d6a:	2001      	movs	r0, #1
 8005d6c:	4770      	bx	lr
 8005d6e:	f240 2305 	movw	r3, #517	; 0x205
 8005d72:	8013      	strh	r3, [r2, #0]
 8005d74:	2001      	movs	r0, #1
 8005d76:	4770      	bx	lr
 8005d78:	f240 2306 	movw	r3, #518	; 0x206
 8005d7c:	8013      	strh	r3, [r2, #0]
 8005d7e:	2001      	movs	r0, #1
 8005d80:	4770      	bx	lr
 8005d82:	bf00      	nop

08005d84 <WS28xxDmx::~WS28xxDmx()>:
 8005d84:	b538      	push	{r3, r4, r5, lr}
 8005d86:	6d05      	ldr	r5, [r0, #80]	; 0x50
 8005d88:	4b07      	ldr	r3, [pc, #28]	; (8005da8 <WS28xxDmx::~WS28xxDmx()+0x24>)
 8005d8a:	6003      	str	r3, [r0, #0]
 8005d8c:	4604      	mov	r4, r0
 8005d8e:	b12d      	cbz	r5, 8005d9c <WS28xxDmx::~WS28xxDmx()+0x18>
 8005d90:	4628      	mov	r0, r5
 8005d92:	f000 ff23 	bl	8006bdc <WS28xx::~WS28xx()>
 8005d96:	4628      	mov	r0, r5
 8005d98:	f002 fb8d 	bl	80084b6 <operator delete(void*)>
 8005d9c:	4620      	mov	r0, r4
 8005d9e:	f002 fb8a 	bl	80084b6 <operator delete(void*)>
 8005da2:	4620      	mov	r0, r4
 8005da4:	bd38      	pop	{r3, r4, r5, pc}
 8005da6:	bf00      	nop
 8005da8:	0800b074 	stmdaeq	r0, {r2, r4, r5, r6, ip, sp, pc}

08005dac <WS28xxDmx::WS28xxDmx(PixelDmxConfiguration&)>:
 8005dac:	4684      	mov	ip, r0
 8005dae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005db0:	4b1b      	ldr	r3, [pc, #108]	; (8005e20 <WS28xxDmx::WS28xxDmx(PixelDmxConfiguration&)+0x74>)
 8005db2:	f84c 3b04 	str.w	r3, [ip], #4
 8005db6:	468e      	mov	lr, r1
 8005db8:	4604      	mov	r4, r0
 8005dba:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8005dbe:	4666      	mov	r6, ip
 8005dc0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8005dc4:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8005dc8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8005dcc:	e89e 000f 	ldmia.w	lr, {r0, r1, r2, r3}
 8005dd0:	2500      	movs	r5, #0
 8005dd2:	4f14      	ldr	r7, [pc, #80]	; (8005e24 <WS28xxDmx::WS28xxDmx(PixelDmxConfiguration&)+0x78>)
 8005dd4:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
 8005dd8:	f104 0334 	add.w	r3, r4, #52	; 0x34
 8005ddc:	f104 0248 	add.w	r2, r4, #72	; 0x48
 8005de0:	e9c4 5514 	strd	r5, r5, [r4, #80]	; 0x50
 8005de4:	65a5      	str	r5, [r4, #88]	; 0x58
 8005de6:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
 8005dea:	2101      	movs	r1, #1
 8005dec:	4630      	mov	r0, r6
 8005dee:	603c      	str	r4, [r7, #0]
 8005df0:	f7ff fb50 	bl	8005494 <PixelDmxConfiguration::Validate(unsigned long, unsigned long&, pixeldmxconfiguration::PortInfo&)>
 8005df4:	2028      	movs	r0, #40	; 0x28
 8005df6:	f002 fb62 	bl	80084be <operator new(unsigned int)>
 8005dfa:	4631      	mov	r1, r6
 8005dfc:	4605      	mov	r5, r0
 8005dfe:	f000 ff0b 	bl	8006c18 <WS28xx::WS28xx(PixelConfiguration&)>
 8005e02:	4628      	mov	r0, r5
 8005e04:	6525      	str	r5, [r4, #80]	; 0x50
 8005e06:	f000 ff67 	bl	8006cd8 <WS28xx::Blackout()>
 8005e0a:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8005e0c:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8005e0e:	8e22      	ldrh	r2, [r4, #48]	; 0x30
 8005e10:	f8a4 204c 	strh.w	r2, [r4, #76]	; 0x4c
 8005e14:	fb13 f301 	smulbb	r3, r3, r1
 8005e18:	f8a4 304e 	strh.w	r3, [r4, #78]	; 0x4e
 8005e1c:	4620      	mov	r0, r4
 8005e1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005e20:	0800b074 	stmdaeq	r0, {r2, r4, r5, r6, ip, sp, pc}
 8005e24:	200015ec 	andcs	r1, r0, ip, ror #11

08005e28 <PixelDmxParams::PixelDmxParams(PixelDmxParamsStore*)>:
 8005e28:	4a07      	ldr	r2, [pc, #28]	; (8005e48 <PixelDmxParams::PixelDmxParams(PixelDmxParamsStore*)+0x20>)
 8005e2a:	6001      	str	r1, [r0, #0]
 8005e2c:	2100      	movs	r1, #0
 8005e2e:	e9c0 1201 	strd	r1, r2, [r0, #4]
 8005e32:	4a06      	ldr	r2, [pc, #24]	; (8005e4c <PixelDmxParams::PixelDmxParams(PixelDmxParamsStore*)+0x24>)
 8005e34:	4906      	ldr	r1, [pc, #24]	; (8005e50 <PixelDmxParams::PixelDmxParams(PixelDmxParamsStore*)+0x28>)
 8005e36:	f04f 6c10 	mov.w	ip, #150994944	; 0x9000000
 8005e3a:	e9c0 c203 	strd	ip, r2, [r0, #12]
 8005e3e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8005e42:	e9c0 1205 	strd	r1, r2, [r0, #20]
 8005e46:	4770      	bx	lr
 8005e48:	0100aa03 	tsteq	r0, r3, lsl #20
 8005e4c:	01ff003d 	mvnseq	r0, sp, lsr r0
 8005e50:	06000100 	streq	r0, [r0], -r0, lsl #2

08005e54 <PixelDmxParams::Load()>:
 8005e54:	b508      	push	{r3, lr}
 8005e56:	2300      	movs	r3, #0
 8005e58:	4601      	mov	r1, r0
 8005e5a:	6043      	str	r3, [r0, #4]
 8005e5c:	6800      	ldr	r0, [r0, #0]
 8005e5e:	b120      	cbz	r0, 8005e6a <PixelDmxParams::Load()+0x16>
 8005e60:	6803      	ldr	r3, [r0, #0]
 8005e62:	3104      	adds	r1, #4
 8005e64:	68db      	ldr	r3, [r3, #12]
 8005e66:	4798      	blx	r3
 8005e68:	2001      	movs	r0, #1
 8005e6a:	bd08      	pop	{r3, pc}

08005e6c <PixelDmxParams::Set(PixelDmxConfiguration*)>:
 8005e6c:	6843      	ldr	r3, [r0, #4]
 8005e6e:	07da      	lsls	r2, r3, #31
 8005e70:	bf44      	itt	mi
 8005e72:	7a02      	ldrbmi	r2, [r0, #8]
 8005e74:	600a      	strmi	r2, [r1, #0]
 8005e76:	079a      	lsls	r2, r3, #30
 8005e78:	d505      	bpl.n	8005e86 <PixelDmxParams::Set(PixelDmxConfiguration*)+0x1a>
 8005e7a:	f8b0 2009 	ldrh.w	r2, [r0, #9]
 8005e7e:	2a00      	cmp	r2, #0
 8005e80:	bf08      	it	eq
 8005e82:	22aa      	moveq	r2, #170	; 0xaa
 8005e84:	604a      	str	r2, [r1, #4]
 8005e86:	059a      	lsls	r2, r3, #22
 8005e88:	bf44      	itt	mi
 8005e8a:	7dc2      	ldrbmi	r2, [r0, #23]
 8005e8c:	608a      	strmi	r2, [r1, #8]
 8005e8e:	055a      	lsls	r2, r3, #21
 8005e90:	bf44      	itt	mi
 8005e92:	7e02      	ldrbmi	r2, [r0, #24]
 8005e94:	740a      	strbmi	r2, [r1, #16]
 8005e96:	051a      	lsls	r2, r3, #20
 8005e98:	bf44      	itt	mi
 8005e9a:	7e42      	ldrbmi	r2, [r0, #25]
 8005e9c:	744a      	strbmi	r2, [r1, #17]
 8005e9e:	06da      	lsls	r2, r3, #27
 8005ea0:	bf44      	itt	mi
 8005ea2:	f8d0 200e 	ldrmi.w	r2, [r0, #14]
 8005ea6:	60ca      	strmi	r2, [r1, #12]
 8005ea8:	069a      	lsls	r2, r3, #26
 8005eaa:	bf44      	itt	mi
 8005eac:	7c82      	ldrbmi	r2, [r0, #18]
 8005eae:	748a      	strbmi	r2, [r1, #18]
 8005eb0:	061a      	lsls	r2, r3, #24
 8005eb2:	d504      	bpl.n	8005ebe <PixelDmxParams::Set(PixelDmxConfiguration*)+0x52>
 8005eb4:	2201      	movs	r2, #1
 8005eb6:	750a      	strb	r2, [r1, #20]
 8005eb8:	7b42      	ldrb	r2, [r0, #13]
 8005eba:	b102      	cbz	r2, 8005ebe <PixelDmxParams::Set(PixelDmxConfiguration*)+0x52>
 8005ebc:	74ca      	strb	r2, [r1, #19]
 8005ebe:	075a      	lsls	r2, r3, #29
 8005ec0:	d50b      	bpl.n	8005eda <PixelDmxParams::Set(PixelDmxConfiguration*)+0x6e>
 8005ec2:	7ac2      	ldrb	r2, [r0, #11]
 8005ec4:	b510      	push	{r4, lr}
 8005ec6:	7b04      	ldrb	r4, [r0, #12]
 8005ec8:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
 8005ecc:	858a      	strh	r2, [r1, #44]	; 0x2c
 8005ece:	05da      	lsls	r2, r3, #23
 8005ed0:	bf44      	itt	mi
 8005ed2:	f8b0 3015 	ldrhmi.w	r3, [r0, #21]
 8005ed6:	620b      	strmi	r3, [r1, #32]
 8005ed8:	bd10      	pop	{r4, pc}
 8005eda:	05db      	lsls	r3, r3, #23
 8005edc:	bf44      	itt	mi
 8005ede:	f8b0 3015 	ldrhmi.w	r3, [r0, #21]
 8005ee2:	620b      	strmi	r3, [r1, #32]
 8005ee4:	4770      	bx	lr

08005ee6 <PixelDmxParams::Dump()>:
 8005ee6:	4770      	bx	lr

08005ee8 <LightSet::Blackout(bool)>:
 8005ee8:	4770      	bx	lr

08005eea <LightSet::FullOn()>:
 8005eea:	4770      	bx	lr

08005eec <LightSet::Print()>:
 8005eec:	4770      	bx	lr

08005eee <PixelDmxParamsRdm::Sync(unsigned long)>:
 8005eee:	4770      	bx	lr

08005ef0 <PixelDmxParamsRdm::Sync(bool)>:
 8005ef0:	4770      	bx	lr

08005ef2 <PixelDmxParamsRdm::SetDmxStartAddress(unsigned short)>:
 8005ef2:	2000      	movs	r0, #0
 8005ef4:	4770      	bx	lr

08005ef6 <PixelDmxParamsRdm::GetDmxStartAddress()>:
 8005ef6:	2001      	movs	r0, #1
 8005ef8:	4770      	bx	lr

08005efa <PixelDmxParamsRdm::GetDmxFootprint()>:
 8005efa:	2006      	movs	r0, #6
 8005efc:	4770      	bx	lr

08005efe <PixelDmxParamsRdm::Stop(unsigned long)>:
 8005efe:	4770      	bx	lr

08005f00 <PixelDmxParamsRdm::GetSlotInfo(unsigned short, lightset::SlotInfo&)>:
 8005f00:	2905      	cmp	r1, #5
 8005f02:	f04f 0000 	mov.w	r0, #0
 8005f06:	bf9f      	itttt	ls
 8005f08:	f64f 73ff 	movwls	r3, #65535	; 0xffff
 8005f0c:	7090      	strbls	r0, [r2, #2]
 8005f0e:	8013      	strhls	r3, [r2, #0]
 8005f10:	2001      	movls	r0, #1
 8005f12:	4770      	bx	lr

08005f14 <PixelDmxParamsRdm::~PixelDmxParamsRdm()>:
 8005f14:	4770      	bx	lr

08005f16 <PixelDmxParamsRdm::~PixelDmxParamsRdm()>:
 8005f16:	b510      	push	{r4, lr}
 8005f18:	4604      	mov	r4, r0
 8005f1a:	f002 facc 	bl	80084b6 <operator delete(void*)>
 8005f1e:	4620      	mov	r0, r4
 8005f20:	bd10      	pop	{r4, pc}
	...

08005f24 <PixelDmxParamsRdm::PixelDmxParamsRdm(PixelDmxStore*)>:
 8005f24:	4b02      	ldr	r3, [pc, #8]	; (8005f30 <PixelDmxParamsRdm::PixelDmxParamsRdm(PixelDmxStore*)+0xc>)
 8005f26:	6003      	str	r3, [r0, #0]
 8005f28:	4b02      	ldr	r3, [pc, #8]	; (8005f34 <PixelDmxParamsRdm::PixelDmxParamsRdm(PixelDmxStore*)+0x10>)
 8005f2a:	6019      	str	r1, [r3, #0]
 8005f2c:	4770      	bx	lr
 8005f2e:	bf00      	nop
 8005f30:	0800b0b4 	stmdaeq	r0, {r2, r4, r5, r7, ip, sp, pc}
 8005f34:	200015f0 	strdcs	r1, [r0], -r0

08005f38 <PixelDmxParamsRdm::SetData(unsigned long, unsigned char const*, unsigned long, bool)>:
 8005f38:	2b05      	cmp	r3, #5
 8005f3a:	b570      	push	{r4, r5, r6, lr}
 8005f3c:	4606      	mov	r6, r0
 8005f3e:	4614      	mov	r4, r2
 8005f40:	d934      	bls.n	8005fac <PixelDmxParamsRdm::SetData(unsigned long, unsigned char const*, unsigned long, bool)+0x74>
 8005f42:	7953      	ldrb	r3, [r2, #5]
 8005f44:	b933      	cbnz	r3, 8005f54 <PixelDmxParamsRdm::SetData(unsigned long, unsigned char const*, unsigned long, bool)+0x1c>
 8005f46:	4a1a      	ldr	r2, [pc, #104]	; (8005fb0 <PixelDmxParamsRdm::SetData(unsigned long, unsigned char const*, unsigned long, bool)+0x78>)
 8005f48:	7013      	strb	r3, [r2, #0]
 8005f4a:	4621      	mov	r1, r4
 8005f4c:	4630      	mov	r0, r6
 8005f4e:	f7fb f937 	bl	80011c0 <PixelDmxParamsRdm::Display(unsigned char const*)>
 8005f52:	e02b      	b.n	8005fac <PixelDmxParamsRdm::SetData(unsigned long, unsigned char const*, unsigned long, bool)+0x74>
 8005f54:	2bff      	cmp	r3, #255	; 0xff
 8005f56:	d124      	bne.n	8005fa2 <PixelDmxParamsRdm::SetData(unsigned long, unsigned char const*, unsigned long, bool)+0x6a>
 8005f58:	4a15      	ldr	r2, [pc, #84]	; (8005fb0 <PixelDmxParamsRdm::SetData(unsigned long, unsigned char const*, unsigned long, bool)+0x78>)
 8005f5a:	7811      	ldrb	r1, [r2, #0]
 8005f5c:	2900      	cmp	r1, #0
 8005f5e:	d1f4      	bne.n	8005f4a <PixelDmxParamsRdm::SetData(unsigned long, unsigned char const*, unsigned long, bool)+0x12>
 8005f60:	4d14      	ldr	r5, [pc, #80]	; (8005fb4 <PixelDmxParamsRdm::SetData(unsigned long, unsigned char const*, unsigned long, bool)+0x7c>)
 8005f62:	7013      	strb	r3, [r2, #0]
 8005f64:	6828      	ldr	r0, [r5, #0]
 8005f66:	7821      	ldrb	r1, [r4, #0]
 8005f68:	6803      	ldr	r3, [r0, #0]
 8005f6a:	290e      	cmp	r1, #14
 8005f6c:	bf28      	it	cs
 8005f6e:	210e      	movcs	r1, #14
 8005f70:	689b      	ldr	r3, [r3, #8]
 8005f72:	4798      	blx	r3
 8005f74:	6828      	ldr	r0, [r5, #0]
 8005f76:	7861      	ldrb	r1, [r4, #1]
 8005f78:	6803      	ldr	r3, [r0, #0]
 8005f7a:	68db      	ldr	r3, [r3, #12]
 8005f7c:	4798      	blx	r3
 8005f7e:	6828      	ldr	r0, [r5, #0]
 8005f80:	78a1      	ldrb	r1, [r4, #2]
 8005f82:	6803      	ldr	r3, [r0, #0]
 8005f84:	691b      	ldr	r3, [r3, #16]
 8005f86:	4798      	blx	r3
 8005f88:	6828      	ldr	r0, [r5, #0]
 8005f8a:	78e1      	ldrb	r1, [r4, #3]
 8005f8c:	6803      	ldr	r3, [r0, #0]
 8005f8e:	2906      	cmp	r1, #6
 8005f90:	695b      	ldr	r3, [r3, #20]
 8005f92:	bf28      	it	cs
 8005f94:	2106      	movcs	r1, #6
 8005f96:	4798      	blx	r3
 8005f98:	6828      	ldr	r0, [r5, #0]
 8005f9a:	7921      	ldrb	r1, [r4, #4]
 8005f9c:	6803      	ldr	r3, [r0, #0]
 8005f9e:	699b      	ldr	r3, [r3, #24]
 8005fa0:	4798      	blx	r3
 8005fa2:	7963      	ldrb	r3, [r4, #5]
 8005fa4:	3b01      	subs	r3, #1
 8005fa6:	b2db      	uxtb	r3, r3
 8005fa8:	2bfd      	cmp	r3, #253	; 0xfd
 8005faa:	d8ce      	bhi.n	8005f4a <PixelDmxParamsRdm::SetData(unsigned long, unsigned char const*, unsigned long, bool)+0x12>
 8005fac:	bd70      	pop	{r4, r5, r6, pc}
 8005fae:	bf00      	nop
 8005fb0:	200015f4 	strdcs	r1, [r0], -r4
 8005fb4:	200015f0 	strdcs	r1, [r0], -r0

08005fb8 <PixelConfiguration::GetTxH(pixel::Type, unsigned char&, unsigned char&)>:
 8005fb8:	23c0      	movs	r3, #192	; 0xc0
 8005fba:	2803      	cmp	r0, #3
 8005fbc:	700b      	strb	r3, [r1, #0]
 8005fbe:	d006      	beq.n	8005fce <PixelConfiguration::GetTxH(pixel::Type, unsigned char&, unsigned char&)+0x16>
 8005fc0:	3808      	subs	r0, #8
 8005fc2:	2803      	cmp	r0, #3
 8005fc4:	bf34      	ite	cc
 8005fc6:	23fc      	movcc	r3, #252	; 0xfc
 8005fc8:	23f0      	movcs	r3, #240	; 0xf0
 8005fca:	7013      	strb	r3, [r2, #0]
 8005fcc:	4770      	bx	lr
 8005fce:	23f8      	movs	r3, #248	; 0xf8
 8005fd0:	e7fb      	b.n	8005fca <PixelConfiguration::GetTxH(pixel::Type, unsigned char&, unsigned char&)+0x12>
	...

08005fd4 <PixelConfiguration::Validate(unsigned long&)>:
 8005fd4:	b513      	push	{r0, r1, r4, lr}
 8005fd6:	4604      	mov	r4, r0
 8005fd8:	6800      	ldr	r0, [r0, #0]
 8005fda:	6863      	ldr	r3, [r4, #4]
 8005fdc:	68a2      	ldr	r2, [r4, #8]
 8005fde:	2807      	cmp	r0, #7
 8005fe0:	d127      	bne.n	8006032 <PixelConfiguration::Validate(unsigned long&)+0x5e>
 8005fe2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005fe6:	bf28      	it	cs
 8005fe8:	f44f 7300 	movcs.w	r3, #512	; 0x200
 8005fec:	6063      	str	r3, [r4, #4]
 8005fee:	2304      	movs	r3, #4
 8005ff0:	600b      	str	r3, [r1, #0]
 8005ff2:	2301      	movs	r3, #1
 8005ff4:	2a06      	cmp	r2, #6
 8005ff6:	7563      	strb	r3, [r4, #21]
 8005ff8:	d102      	bne.n	8006000 <PixelConfiguration::Validate(unsigned long&)+0x2c>
 8005ffa:	f000 f901 	bl	8006200 <PixelType::GetMap(pixel::Type)>
 8005ffe:	60a0      	str	r0, [r4, #8]
 8006000:	7c63      	ldrb	r3, [r4, #17]
 8006002:	7c22      	ldrb	r2, [r4, #16]
 8006004:	6820      	ldr	r0, [r4, #0]
 8006006:	429a      	cmp	r2, r3
 8006008:	bf24      	itt	cs
 800600a:	2300      	movcs	r3, #0
 800600c:	8223      	strhcs	r3, [r4, #16]
 800600e:	f10d 0207 	add.w	r2, sp, #7
 8006012:	f10d 0106 	add.w	r1, sp, #6
 8006016:	f7ff ffcf 	bl	8005fb8 <PixelConfiguration::GetTxH(pixel::Type, unsigned char&, unsigned char&)>
 800601a:	7c23      	ldrb	r3, [r4, #16]
 800601c:	b913      	cbnz	r3, 8006024 <PixelConfiguration::Validate(unsigned long&)+0x50>
 800601e:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8006022:	7423      	strb	r3, [r4, #16]
 8006024:	7c63      	ldrb	r3, [r4, #17]
 8006026:	b913      	cbnz	r3, 800602e <PixelConfiguration::Validate(unsigned long&)+0x5a>
 8006028:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800602c:	7463      	strb	r3, [r4, #17]
 800602e:	4b2a      	ldr	r3, [pc, #168]	; (80060d8 <PixelConfiguration::Validate(unsigned long&)+0x104>)
 8006030:	e01e      	b.n	8006070 <PixelConfiguration::Validate(unsigned long&)+0x9c>
 8006032:	f5b3 7f2a 	cmp.w	r3, #680	; 0x2a8
 8006036:	bf28      	it	cs
 8006038:	f44f 732a 	movcs.w	r3, #680	; 0x2a8
 800603c:	6063      	str	r3, [r4, #4]
 800603e:	2303      	movs	r3, #3
 8006040:	600b      	str	r3, [r1, #0]
 8006042:	f1a0 030b 	sub.w	r3, r0, #11
 8006046:	2b01      	cmp	r3, #1
 8006048:	d806      	bhi.n	8006058 <PixelConfiguration::Validate(unsigned long&)+0x84>
 800604a:	7ca3      	ldrb	r3, [r4, #18]
 800604c:	2b1f      	cmp	r3, #31
 800604e:	d83d      	bhi.n	80060cc <PixelConfiguration::Validate(unsigned long&)+0xf8>
 8006050:	f043 03e0 	orr.w	r3, r3, #224	; 0xe0
 8006054:	74a3      	strb	r3, [r4, #18]
 8006056:	e001      	b.n	800605c <PixelConfiguration::Validate(unsigned long&)+0x88>
 8006058:	2800      	cmp	r0, #0
 800605a:	d139      	bne.n	80060d0 <PixelConfiguration::Validate(unsigned long&)+0xfc>
 800605c:	2300      	movs	r3, #0
 800605e:	2a06      	cmp	r2, #6
 8006060:	bf08      	it	eq
 8006062:	60a3      	streq	r3, [r4, #8]
 8006064:	280d      	cmp	r0, #13
 8006066:	7563      	strb	r3, [r4, #21]
 8006068:	68e3      	ldr	r3, [r4, #12]
 800606a:	d119      	bne.n	80060a0 <PixelConfiguration::Validate(unsigned long&)+0xcc>
 800606c:	b913      	cbnz	r3, 8006074 <PixelConfiguration::Validate(unsigned long&)+0xa0>
 800606e:	4b1b      	ldr	r3, [pc, #108]	; (80060dc <PixelConfiguration::Validate(unsigned long&)+0x108>)
 8006070:	60e3      	str	r3, [r4, #12]
 8006072:	e003      	b.n	800607c <PixelConfiguration::Validate(unsigned long&)+0xa8>
 8006074:	4a1a      	ldr	r2, [pc, #104]	; (80060e0 <PixelConfiguration::Validate(unsigned long&)+0x10c>)
 8006076:	4293      	cmp	r3, r2
 8006078:	d900      	bls.n	800607c <PixelConfiguration::Validate(unsigned long&)+0xa8>
 800607a:	60e2      	str	r2, [r4, #12]
 800607c:	7d23      	ldrb	r3, [r4, #20]
 800607e:	b31b      	cbz	r3, 80060c8 <PixelConfiguration::Validate(unsigned long&)+0xf4>
 8006080:	7ce3      	ldrb	r3, [r4, #19]
 8006082:	b9ab      	cbnz	r3, 80060b0 <PixelConfiguration::Validate(unsigned long&)+0xdc>
 8006084:	6822      	ldr	r2, [r4, #0]
 8006086:	b17a      	cbz	r2, 80060a8 <PixelConfiguration::Validate(unsigned long&)+0xd4>
 8006088:	f1a2 030b 	sub.w	r3, r2, #11
 800608c:	2b01      	cmp	r3, #1
 800608e:	d90d      	bls.n	80060ac <PixelConfiguration::Validate(unsigned long&)+0xd8>
 8006090:	4b14      	ldr	r3, [pc, #80]	; (80060e4 <PixelConfiguration::Validate(unsigned long&)+0x110>)
 8006092:	4915      	ldr	r1, [pc, #84]	; (80060e8 <PixelConfiguration::Validate(unsigned long&)+0x114>)
 8006094:	2a0d      	cmp	r2, #13
 8006096:	bf08      	it	eq
 8006098:	460b      	moveq	r3, r1
 800609a:	61a3      	str	r3, [r4, #24]
 800609c:	b002      	add	sp, #8
 800609e:	bd10      	pop	{r4, pc}
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	d0e4      	beq.n	800606e <PixelConfiguration::Validate(unsigned long&)+0x9a>
 80060a4:	4a11      	ldr	r2, [pc, #68]	; (80060ec <PixelConfiguration::Validate(unsigned long&)+0x118>)
 80060a6:	e7e6      	b.n	8006076 <PixelConfiguration::Validate(unsigned long&)+0xa2>
 80060a8:	4b11      	ldr	r3, [pc, #68]	; (80060f0 <PixelConfiguration::Validate(unsigned long&)+0x11c>)
 80060aa:	e7f6      	b.n	800609a <PixelConfiguration::Validate(unsigned long&)+0xc6>
 80060ac:	4b11      	ldr	r3, [pc, #68]	; (80060f4 <PixelConfiguration::Validate(unsigned long&)+0x120>)
 80060ae:	e7f4      	b.n	800609a <PixelConfiguration::Validate(unsigned long&)+0xc6>
 80060b0:	f1a3 0214 	sub.w	r2, r3, #20
 80060b4:	2a05      	cmp	r2, #5
 80060b6:	d807      	bhi.n	80060c8 <PixelConfiguration::Validate(unsigned long&)+0xf4>
 80060b8:	3b15      	subs	r3, #21
 80060ba:	2b04      	cmp	r3, #4
 80060bc:	bf96      	itet	ls
 80060be:	4a0e      	ldrls	r2, [pc, #56]	; (80060f8 <PixelConfiguration::Validate(unsigned long&)+0x124>)
 80060c0:	4b0e      	ldrhi	r3, [pc, #56]	; (80060fc <PixelConfiguration::Validate(unsigned long&)+0x128>)
 80060c2:	f852 3023 	ldrls.w	r3, [r2, r3, lsl #2]
 80060c6:	e7e8      	b.n	800609a <PixelConfiguration::Validate(unsigned long&)+0xc6>
 80060c8:	4b07      	ldr	r3, [pc, #28]	; (80060e8 <PixelConfiguration::Validate(unsigned long&)+0x114>)
 80060ca:	e7e6      	b.n	800609a <PixelConfiguration::Validate(unsigned long&)+0xc6>
 80060cc:	23ff      	movs	r3, #255	; 0xff
 80060ce:	e7c1      	b.n	8006054 <PixelConfiguration::Validate(unsigned long&)+0x80>
 80060d0:	280d      	cmp	r0, #13
 80060d2:	d18e      	bne.n	8005ff2 <PixelConfiguration::Validate(unsigned long&)+0x1e>
 80060d4:	e7c2      	b.n	800605c <PixelConfiguration::Validate(unsigned long&)+0x88>
 80060d6:	bf00      	nop
 80060d8:	0061a800 	rsbeq	sl, r1, r0, lsl #16
 80060dc:	003d0900 	eorseq	r0, sp, r0, lsl #18
 80060e0:	00e4e1c0 	rsceq	lr, r4, r0, asr #3
 80060e4:	0800b4c0 	stmdaeq	r0, {r6, r7, sl, ip, sp, pc}
 80060e8:	0800b1c0 	stmdaeq	r0, {r6, r7, r8, ip, sp, pc}
 80060ec:	017d7840 	cmneq	sp, r0, asr #16
 80060f0:	0800b7c0 	stmdaeq	r0, {r6, r7, r8, r9, sl, ip, sp, pc}
 80060f4:	0800b8c0 	stmdaeq	r0, {r6, r7, fp, ip, sp, pc}
 80060f8:	0800b1ac 	stmdaeq	r0, {r2, r3, r5, r7, r8, ip, sp, pc}
 80060fc:	0800b2c0 	stmdaeq	r0, {r6, r7, r9, ip, sp, pc}

08006100 <PixelConfiguration::Print()>:
 8006100:	b513      	push	{r0, r1, r4, lr}
 8006102:	4604      	mov	r4, r0
 8006104:	4827      	ldr	r0, [pc, #156]	; (80061a4 <PixelConfiguration::Print()+0xa4>)
 8006106:	f7fb fdb1 	bl	8001c6c <printf>
 800610a:	6820      	ldr	r0, [r4, #0]
 800610c:	f000 f860 	bl	80061d0 <PixelType::GetType(pixel::Type)>
 8006110:	6822      	ldr	r2, [r4, #0]
 8006112:	4601      	mov	r1, r0
 8006114:	4824      	ldr	r0, [pc, #144]	; (80061a8 <PixelConfiguration::Print()+0xa8>)
 8006116:	f7fb fda9 	bl	8001c6c <printf>
 800611a:	6861      	ldr	r1, [r4, #4]
 800611c:	4823      	ldr	r0, [pc, #140]	; (80061ac <PixelConfiguration::Print()+0xac>)
 800611e:	f7fb fda5 	bl	8001c6c <printf>
 8006122:	7d63      	ldrb	r3, [r4, #21]
 8006124:	2b00      	cmp	r3, #0
 8006126:	d034      	beq.n	8006192 <PixelConfiguration::Print()+0x92>
 8006128:	68a0      	ldr	r0, [r4, #8]
 800612a:	f000 f85d 	bl	80061e8 <PixelType::GetMap(pixel::Map)>
 800612e:	68a2      	ldr	r2, [r4, #8]
 8006130:	4601      	mov	r1, r0
 8006132:	481f      	ldr	r0, [pc, #124]	; (80061b0 <PixelConfiguration::Print()+0xb0>)
 8006134:	f7fb fd9a 	bl	8001c6c <printf>
 8006138:	7c20      	ldrb	r0, [r4, #16]
 800613a:	f000 f86b 	bl	8006214 <PixelType::ConvertTxH(unsigned char)>
 800613e:	ee10 0a10 	vmov	r0, s0
 8006142:	f7fa f9d3 	bl	80004ec <__aeabi_f2d>
 8006146:	460b      	mov	r3, r1
 8006148:	7c21      	ldrb	r1, [r4, #16]
 800614a:	9100      	str	r1, [sp, #0]
 800614c:	4602      	mov	r2, r0
 800614e:	4819      	ldr	r0, [pc, #100]	; (80061b4 <PixelConfiguration::Print()+0xb4>)
 8006150:	f7fb fd8c 	bl	8001c6c <printf>
 8006154:	7c60      	ldrb	r0, [r4, #17]
 8006156:	f000 f85d 	bl	8006214 <PixelType::ConvertTxH(unsigned char)>
 800615a:	ee10 0a10 	vmov	r0, s0
 800615e:	f7fa f9c5 	bl	80004ec <__aeabi_f2d>
 8006162:	460b      	mov	r3, r1
 8006164:	7c61      	ldrb	r1, [r4, #17]
 8006166:	9100      	str	r1, [sp, #0]
 8006168:	4602      	mov	r2, r0
 800616a:	4813      	ldr	r0, [pc, #76]	; (80061b8 <PixelConfiguration::Print()+0xb8>)
 800616c:	f7fb fd7e 	bl	8001c6c <printf>
 8006170:	7d21      	ldrb	r1, [r4, #20]
 8006172:	4a12      	ldr	r2, [pc, #72]	; (80061bc <PixelConfiguration::Print()+0xbc>)
 8006174:	4b12      	ldr	r3, [pc, #72]	; (80061c0 <PixelConfiguration::Print()+0xc0>)
 8006176:	4813      	ldr	r0, [pc, #76]	; (80061c4 <PixelConfiguration::Print()+0xc4>)
 8006178:	2900      	cmp	r1, #0
 800617a:	bf14      	ite	ne
 800617c:	4611      	movne	r1, r2
 800617e:	4619      	moveq	r1, r3
 8006180:	f7fb fd74 	bl	8001c6c <printf>
 8006184:	68e1      	ldr	r1, [r4, #12]
 8006186:	4810      	ldr	r0, [pc, #64]	; (80061c8 <PixelConfiguration::Print()+0xc8>)
 8006188:	b002      	add	sp, #8
 800618a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800618e:	f7fb bd6d 	b.w	8001c6c <printf>
 8006192:	6823      	ldr	r3, [r4, #0]
 8006194:	3b0b      	subs	r3, #11
 8006196:	2b01      	cmp	r3, #1
 8006198:	d8ea      	bhi.n	8006170 <PixelConfiguration::Print()+0x70>
 800619a:	7ca1      	ldrb	r1, [r4, #18]
 800619c:	480b      	ldr	r0, [pc, #44]	; (80061cc <PixelConfiguration::Print()+0xcc>)
 800619e:	f7fb fd65 	bl	8001c6c <printf>
 80061a2:	e7e5      	b.n	8006170 <PixelConfiguration::Print()+0x70>
 80061a4:	0800b0f3 	stmdaeq	r0, {r0, r1, r4, r5, r6, r7, ip, sp, pc}
 80061a8:	0800b108 	stmdaeq	r0, {r3, r8, ip, sp, pc}
 80061ac:	0800b11c 	stmdaeq	r0, {r2, r3, r4, r8, ip, sp, pc}
 80061b0:	0800b12b 	stmdaeq	r0, {r0, r1, r3, r5, r8, ip, sp, pc}
 80061b4:	0800b13f 	stmdaeq	r0, {r0, r1, r2, r3, r4, r5, r8, ip, sp, pc}
 80061b8:	0800b157 	stmdaeq	r0, {r0, r1, r2, r4, r6, r8, ip, sp, pc}
 80061bc:	0800b0ec 	stmdaeq	r0, {r2, r3, r5, r6, r7, ip, sp, pc}
 80061c0:	0800b0f0 	stmdaeq	r0, {r4, r5, r6, r7, ip, sp, pc}
 80061c4:	0800b186 	stmdaeq	r0, {r1, r2, r7, r8, ip, sp, pc}
 80061c8:	0800b19c 	stmdaeq	r0, {r2, r3, r4, r7, r8, ip, sp, pc}
 80061cc:	0800b16f 	stmdaeq	r0, {r0, r1, r2, r3, r5, r6, r8, ip, sp, pc}

080061d0 <PixelType::GetType(pixel::Type)>:
 80061d0:	280d      	cmp	r0, #13
 80061d2:	bfda      	itte	le
 80061d4:	4b02      	ldrle	r3, [pc, #8]	; (80061e0 <PixelType::GetType(pixel::Type)+0x10>)
 80061d6:	eb03 00c0 	addle.w	r0, r3, r0, lsl #3
 80061da:	4802      	ldrgt	r0, [pc, #8]	; (80061e4 <PixelType::GetType(pixel::Type)+0x14>)
 80061dc:	4770      	bx	lr
 80061de:	bf00      	nop
 80061e0:	0800b9ea 	stmdaeq	r0, {r1, r3, r5, r6, r7, r8, fp, ip, sp, pc}
 80061e4:	0800b9c0 	stmdaeq	r0, {r6, r7, r8, fp, ip, sp, pc}

080061e8 <PixelType::GetMap(pixel::Map)>:
 80061e8:	2805      	cmp	r0, #5
 80061ea:	bfda      	itte	le
 80061ec:	4b02      	ldrle	r3, [pc, #8]	; (80061f8 <PixelType::GetMap(pixel::Map)+0x10>)
 80061ee:	eb03 0080 	addle.w	r0, r3, r0, lsl #2
 80061f2:	4802      	ldrgt	r0, [pc, #8]	; (80061fc <PixelType::GetMap(pixel::Map)+0x14>)
 80061f4:	4770      	bx	lr
 80061f6:	bf00      	nop
 80061f8:	0800b9d2 	stmdaeq	r0, {r1, r4, r6, r7, r8, fp, ip, sp, pc}
 80061fc:	0800a2ef 	stmdaeq	r0, {r0, r1, r2, r3, r5, r6, r7, r9, sp, pc}

08006200 <PixelType::GetMap(pixel::Type)>:
 8006200:	3801      	subs	r0, #1
 8006202:	2809      	cmp	r0, #9
 8006204:	bf9a      	itte	ls
 8006206:	4b02      	ldrls	r3, [pc, #8]	; (8006210 <PixelType::GetMap(pixel::Type)+0x10>)
 8006208:	5618      	ldrsbls	r0, [r3, r0]
 800620a:	2002      	movhi	r0, #2
 800620c:	4770      	bx	lr
 800620e:	bf00      	nop
 8006210:	0800b9c8 	stmdaeq	r0, {r3, r6, r7, r8, fp, ip, sp, pc}

08006214 <PixelType::ConvertTxH(unsigned char)>:
 8006214:	28f0      	cmp	r0, #240	; 0xf0
 8006216:	d017      	beq.n	8006248 <PixelType::ConvertTxH(unsigned char)+0x34>
 8006218:	d80c      	bhi.n	8006234 <PixelType::ConvertTxH(unsigned char)+0x20>
 800621a:	28c0      	cmp	r0, #192	; 0xc0
 800621c:	d017      	beq.n	800624e <PixelType::ConvertTxH(unsigned char)+0x3a>
 800621e:	28e0      	cmp	r0, #224	; 0xe0
 8006220:	d018      	beq.n	8006254 <PixelType::ConvertTxH(unsigned char)+0x40>
 8006222:	ed9f 0a11 	vldr	s0, [pc, #68]	; 8006268 <PixelType::ConvertTxH(unsigned char)+0x54>
 8006226:	2880      	cmp	r0, #128	; 0x80
 8006228:	eef4 7a04 	vmov.f32	s15, #68	; 0x3e200000  0.1562500
 800622c:	bf08      	it	eq
 800622e:	eeb0 0a67 	vmoveq.f32	s0, s15
 8006232:	4770      	bx	lr
 8006234:	28fc      	cmp	r0, #252	; 0xfc
 8006236:	d010      	beq.n	800625a <PixelType::ConvertTxH(unsigned char)+0x46>
 8006238:	28fe      	cmp	r0, #254	; 0xfe
 800623a:	d011      	beq.n	8006260 <PixelType::ConvertTxH(unsigned char)+0x4c>
 800623c:	ed9f 0a0a 	vldr	s0, [pc, #40]	; 8006268 <PixelType::ConvertTxH(unsigned char)+0x54>
 8006240:	28f8      	cmp	r0, #248	; 0xf8
 8006242:	eef6 7a09 	vmov.f32	s15, #105	; 0x3f480000  0.7812500
 8006246:	e7f1      	b.n	800622c <PixelType::ConvertTxH(unsigned char)+0x18>
 8006248:	eeb6 0a04 	vmov.f32	s0, #100	; 0x3f200000  0.625
 800624c:	4770      	bx	lr
 800624e:	eeb5 0a04 	vmov.f32	s0, #84	; 0x3ea00000  0.3125000
 8006252:	4770      	bx	lr
 8006254:	eeb5 0a0e 	vmov.f32	s0, #94	; 0x3ef00000  0.4687500
 8006258:	4770      	bx	lr
 800625a:	eeb6 0a0e 	vmov.f32	s0, #110	; 0x3f700000  0.9375000
 800625e:	4770      	bx	lr
 8006260:	ed9f 0a02 	vldr	s0, [pc, #8]	; 800626c <PixelType::ConvertTxH(unsigned char)+0x58>
 8006264:	4770      	bx	lr
 8006266:	bf00      	nop
 8006268:	00000000 	andeq	r0, r0, r0
 800626c:	3f8c0000 	svccc	0x008c0000

08006270 <PixelPatterns::SetPixelColour(unsigned long, unsigned long, unsigned long) [clone .isra.0]>:
 8006270:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006272:	f3c1 2307 	ubfx	r3, r1, #8, #8
 8006276:	f3c1 4207 	ubfx	r2, r1, #16, #8
 800627a:	b2cc      	uxtb	r4, r1
 800627c:	490e      	ldr	r1, [pc, #56]	; (80062b8 <PixelPatterns::SetPixelColour(unsigned long, unsigned long, unsigned long) [clone .isra.0]+0x48>)
 800627e:	4605      	mov	r5, r0
 8006280:	6808      	ldr	r0, [r1, #0]
 8006282:	6801      	ldr	r1, [r0, #0]
 8006284:	2907      	cmp	r1, #7
 8006286:	d005      	beq.n	8006294 <PixelPatterns::SetPixelColour(unsigned long, unsigned long, unsigned long) [clone .isra.0]+0x24>
 8006288:	9400      	str	r4, [sp, #0]
 800628a:	4629      	mov	r1, r5
 800628c:	f000 fa80 	bl	8006790 <WS28xx::SetPixel(unsigned long, unsigned char, unsigned char, unsigned char)>
 8006290:	b003      	add	sp, #12
 8006292:	bd30      	pop	{r4, r5, pc}
 8006294:	429a      	cmp	r2, r3
 8006296:	f04f 0100 	mov.w	r1, #0
 800629a:	d109      	bne.n	80062b0 <PixelPatterns::SetPixelColour(unsigned long, unsigned long, unsigned long) [clone .isra.0]+0x40>
 800629c:	42a2      	cmp	r2, r4
 800629e:	d107      	bne.n	80062b0 <PixelPatterns::SetPixelColour(unsigned long, unsigned long, unsigned long) [clone .isra.0]+0x40>
 80062a0:	e9cd 1200 	strd	r1, r2, [sp]
 80062a4:	460b      	mov	r3, r1
 80062a6:	460a      	mov	r2, r1
 80062a8:	4629      	mov	r1, r5
 80062aa:	f000 fb8b 	bl	80069c4 <WS28xx::SetPixel(unsigned long, unsigned char, unsigned char, unsigned char, unsigned char)>
 80062ae:	e7ef      	b.n	8006290 <PixelPatterns::SetPixelColour(unsigned long, unsigned long, unsigned long) [clone .isra.0]+0x20>
 80062b0:	e9cd 4100 	strd	r4, r1, [sp]
 80062b4:	e7f8      	b.n	80062a8 <PixelPatterns::SetPixelColour(unsigned long, unsigned long, unsigned long) [clone .isra.0]+0x38>
 80062b6:	bf00      	nop
 80062b8:	20001624 	andcs	r1, r0, r4, lsr #12

080062bc <PixelPatterns::Clear(unsigned long) [clone .isra.0]>:
 80062bc:	b538      	push	{r3, r4, r5, lr}
 80062be:	4d06      	ldr	r5, [pc, #24]	; (80062d8 <PixelPatterns::Clear(unsigned long) [clone .isra.0]+0x1c>)
 80062c0:	2400      	movs	r4, #0
 80062c2:	682b      	ldr	r3, [r5, #0]
 80062c4:	429c      	cmp	r4, r3
 80062c6:	d300      	bcc.n	80062ca <PixelPatterns::Clear(unsigned long) [clone .isra.0]+0xe>
 80062c8:	bd38      	pop	{r3, r4, r5, pc}
 80062ca:	4620      	mov	r0, r4
 80062cc:	2100      	movs	r1, #0
 80062ce:	f7ff ffcf 	bl	8006270 <PixelPatterns::SetPixelColour(unsigned long, unsigned long, unsigned long) [clone .isra.0]>
 80062d2:	3401      	adds	r4, #1
 80062d4:	e7f5      	b.n	80062c2 <PixelPatterns::Clear(unsigned long) [clone .isra.0]+0x6>
 80062d6:	bf00      	nop
 80062d8:	20001620 	andcs	r1, r0, r0, lsr #12

080062dc <PixelPatterns::PixelPatterns(unsigned long)>:
 80062dc:	4b09      	ldr	r3, [pc, #36]	; (8006304 <PixelPatterns::PixelPatterns(unsigned long)+0x28>)
 80062de:	4a0a      	ldr	r2, [pc, #40]	; (8006308 <PixelPatterns::PixelPatterns(unsigned long)+0x2c>)
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	6013      	str	r3, [r2, #0]
 80062e4:	2901      	cmp	r1, #1
 80062e6:	4a09      	ldr	r2, [pc, #36]	; (800630c <PixelPatterns::PixelPatterns(unsigned long)+0x30>)
 80062e8:	bf28      	it	cs
 80062ea:	2101      	movcs	r1, #1
 80062ec:	6011      	str	r1, [r2, #0]
 80062ee:	685a      	ldr	r2, [r3, #4]
 80062f0:	4b07      	ldr	r3, [pc, #28]	; (8006310 <PixelPatterns::PixelPatterns(unsigned long)+0x34>)
 80062f2:	601a      	str	r2, [r3, #0]
 80062f4:	4b07      	ldr	r3, [pc, #28]	; (8006314 <PixelPatterns::PixelPatterns(unsigned long)+0x38>)
 80062f6:	6819      	ldr	r1, [r3, #0]
 80062f8:	4b07      	ldr	r3, [pc, #28]	; (8006318 <PixelPatterns::PixelPatterns(unsigned long)+0x3c>)
 80062fa:	2200      	movs	r2, #0
 80062fc:	61da      	str	r2, [r3, #28]
 80062fe:	6019      	str	r1, [r3, #0]
 8006300:	619a      	str	r2, [r3, #24]
 8006302:	4770      	bx	lr
 8006304:	20001634 	andcs	r1, r0, r4, lsr r6
 8006308:	20001624 	andcs	r1, r0, r4, lsr #12
 800630c:	20001618 	andcs	r1, r0, r8, lsl r6
 8006310:	20001620 	andcs	r1, r0, r0, lsr #12
 8006314:	200027ac 	andcs	r2, r0, ip, lsr #15
 8006318:	200015f8 	strdcs	r1, [r0], -r8

0800631c <PixelPatterns::GetName(pixelpatterns::Pattern)>:
 800631c:	2805      	cmp	r0, #5
 800631e:	bfdd      	ittte	le
 8006320:	4b02      	ldrle	r3, [pc, #8]	; (800632c <PixelPatterns::GetName(pixelpatterns::Pattern)+0x10>)
 8006322:	220e      	movle	r2, #14
 8006324:	fb02 3000 	mlale	r0, r2, r0, r3
 8006328:	4801      	ldrgt	r0, [pc, #4]	; (8006330 <PixelPatterns::GetName(pixelpatterns::Pattern)+0x14>)
 800632a:	4770      	bx	lr
 800632c:	0800ba5a 	stmdaeq	r0, {r1, r3, r4, r6, r9, fp, ip, sp, pc}
 8006330:	0800b9c0 	stmdaeq	r0, {r6, r7, r8, fp, ip, sp, pc}

08006334 <PixelPatterns::RainbowCycle(unsigned long, unsigned long, pixelpatterns::Direction)>:
 8006334:	b570      	push	{r4, r5, r6, lr}
 8006336:	460e      	mov	r6, r1
 8006338:	4615      	mov	r5, r2
 800633a:	461c      	mov	r4, r3
 800633c:	f7ff ffbe 	bl	80062bc <PixelPatterns::Clear(unsigned long) [clone .isra.0]>
 8006340:	4905      	ldr	r1, [pc, #20]	; (8006358 <PixelPatterns::RainbowCycle(unsigned long, unsigned long, pixelpatterns::Direction)+0x24>)
 8006342:	eb01 1146 	add.w	r1, r1, r6, lsl #5
 8006346:	2301      	movs	r3, #1
 8006348:	61cb      	str	r3, [r1, #28]
 800634a:	22ff      	movs	r2, #255	; 0xff
 800634c:	2300      	movs	r3, #0
 800634e:	e9c1 2304 	strd	r2, r3, [r1, #16]
 8006352:	604d      	str	r5, [r1, #4]
 8006354:	618c      	str	r4, [r1, #24]
 8006356:	bd70      	pop	{r4, r5, r6, pc}
 8006358:	200015f8 	strdcs	r1, [r0], -r8

0800635c <PixelPatterns::TheaterChase(unsigned long, unsigned long, unsigned long, unsigned long, pixelpatterns::Direction)>:
 800635c:	b570      	push	{r4, r5, r6, lr}
 800635e:	460e      	mov	r6, r1
 8006360:	461c      	mov	r4, r3
 8006362:	4615      	mov	r5, r2
 8006364:	f7ff ffaa 	bl	80062bc <PixelPatterns::Clear(unsigned long) [clone .isra.0]>
 8006368:	4908      	ldr	r1, [pc, #32]	; (800638c <PixelPatterns::TheaterChase(unsigned long, unsigned long, unsigned long, unsigned long, pixelpatterns::Direction)+0x30>)
 800636a:	eb01 1146 	add.w	r1, r1, r6, lsl #5
 800636e:	2302      	movs	r3, #2
 8006370:	61cb      	str	r3, [r1, #28]
 8006372:	9b04      	ldr	r3, [sp, #16]
 8006374:	604b      	str	r3, [r1, #4]
 8006376:	4b06      	ldr	r3, [pc, #24]	; (8006390 <PixelPatterns::TheaterChase(unsigned long, unsigned long, unsigned long, unsigned long, pixelpatterns::Direction)+0x34>)
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	610b      	str	r3, [r1, #16]
 800637c:	2300      	movs	r3, #0
 800637e:	614b      	str	r3, [r1, #20]
 8006380:	9b05      	ldr	r3, [sp, #20]
 8006382:	618b      	str	r3, [r1, #24]
 8006384:	e9c1 5402 	strd	r5, r4, [r1, #8]
 8006388:	bd70      	pop	{r4, r5, r6, pc}
 800638a:	bf00      	nop
 800638c:	200015f8 	strdcs	r1, [r0], -r8
 8006390:	20001620 	andcs	r1, r0, r0, lsr #12

08006394 <PixelPatterns::ColourWipe(unsigned long, unsigned long, unsigned long, pixelpatterns::Direction)>:
 8006394:	b570      	push	{r4, r5, r6, lr}
 8006396:	460e      	mov	r6, r1
 8006398:	461d      	mov	r5, r3
 800639a:	4614      	mov	r4, r2
 800639c:	f7ff ff8e 	bl	80062bc <PixelPatterns::Clear(unsigned long) [clone .isra.0]>
 80063a0:	4907      	ldr	r1, [pc, #28]	; (80063c0 <PixelPatterns::ColourWipe(unsigned long, unsigned long, unsigned long, pixelpatterns::Direction)+0x2c>)
 80063a2:	eb01 1146 	add.w	r1, r1, r6, lsl #5
 80063a6:	2303      	movs	r3, #3
 80063a8:	61cb      	str	r3, [r1, #28]
 80063aa:	4b06      	ldr	r3, [pc, #24]	; (80063c4 <PixelPatterns::ColourWipe(unsigned long, unsigned long, unsigned long, pixelpatterns::Direction)+0x30>)
 80063ac:	604d      	str	r5, [r1, #4]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	610b      	str	r3, [r1, #16]
 80063b2:	2300      	movs	r3, #0
 80063b4:	614b      	str	r3, [r1, #20]
 80063b6:	9b04      	ldr	r3, [sp, #16]
 80063b8:	608c      	str	r4, [r1, #8]
 80063ba:	618b      	str	r3, [r1, #24]
 80063bc:	bd70      	pop	{r4, r5, r6, pc}
 80063be:	bf00      	nop
 80063c0:	200015f8 	strdcs	r1, [r0], -r8
 80063c4:	20001620 	andcs	r1, r0, r0, lsr #12

080063c8 <PixelPatterns::Scanner(unsigned long, unsigned long, unsigned long)>:
 80063c8:	b570      	push	{r4, r5, r6, lr}
 80063ca:	461d      	mov	r5, r3
 80063cc:	460e      	mov	r6, r1
 80063ce:	4614      	mov	r4, r2
 80063d0:	f7ff ff74 	bl	80062bc <PixelPatterns::Clear(unsigned long) [clone .isra.0]>
 80063d4:	4912      	ldr	r1, [pc, #72]	; (8006420 <PixelPatterns::Scanner(unsigned long, unsigned long, unsigned long)+0x58>)
 80063d6:	eb01 1146 	add.w	r1, r1, r6, lsl #5
 80063da:	2304      	movs	r3, #4
 80063dc:	604d      	str	r5, [r1, #4]
 80063de:	4d11      	ldr	r5, [pc, #68]	; (8006424 <PixelPatterns::Scanner(unsigned long, unsigned long, unsigned long)+0x5c>)
 80063e0:	61cb      	str	r3, [r1, #28]
 80063e2:	6828      	ldr	r0, [r5, #0]
 80063e4:	608c      	str	r4, [r1, #8]
 80063e6:	1e43      	subs	r3, r0, #1
 80063e8:	005b      	lsls	r3, r3, #1
 80063ea:	b29b      	uxth	r3, r3
 80063ec:	4c0e      	ldr	r4, [pc, #56]	; (8006428 <PixelPatterns::Scanner(unsigned long, unsigned long, unsigned long)+0x60>)
 80063ee:	610b      	str	r3, [r1, #16]
 80063f0:	2300      	movs	r3, #0
 80063f2:	614b      	str	r3, [r1, #20]
 80063f4:	6823      	ldr	r3, [r4, #0]
 80063f6:	b97b      	cbnz	r3, 8006418 <PixelPatterns::Scanner(unsigned long, unsigned long, unsigned long)+0x50>
 80063f8:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
 80063fc:	4298      	cmp	r0, r3
 80063fe:	bf34      	ite	cc
 8006400:	0080      	lslcc	r0, r0, #2
 8006402:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
 8006406:	f002 f85c 	bl	80084c2 <operator new[](unsigned int)>
 800640a:	682b      	ldr	r3, [r5, #0]
 800640c:	6020      	str	r0, [r4, #0]
 800640e:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8006412:	2200      	movs	r2, #0
 8006414:	4298      	cmp	r0, r3
 8006416:	d100      	bne.n	800641a <PixelPatterns::Scanner(unsigned long, unsigned long, unsigned long)+0x52>
 8006418:	bd70      	pop	{r4, r5, r6, pc}
 800641a:	f840 2b04 	str.w	r2, [r0], #4
 800641e:	e7f9      	b.n	8006414 <PixelPatterns::Scanner(unsigned long, unsigned long, unsigned long)+0x4c>
 8006420:	200015f8 	strdcs	r1, [r0], -r8
 8006424:	20001620 	andcs	r1, r0, r0, lsr #12
 8006428:	2000161c 	andcs	r1, r0, ip, lsl r6

0800642c <PixelPatterns::Fade(unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, pixelpatterns::Direction)>:
 800642c:	b570      	push	{r4, r5, r6, lr}
 800642e:	460e      	mov	r6, r1
 8006430:	461c      	mov	r4, r3
 8006432:	4615      	mov	r5, r2
 8006434:	f7ff ff42 	bl	80062bc <PixelPatterns::Clear(unsigned long) [clone .isra.0]>
 8006438:	4907      	ldr	r1, [pc, #28]	; (8006458 <PixelPatterns::Fade(unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, pixelpatterns::Direction)+0x2c>)
 800643a:	eb01 1146 	add.w	r1, r1, r6, lsl #5
 800643e:	2305      	movs	r3, #5
 8006440:	61cb      	str	r3, [r1, #28]
 8006442:	9b05      	ldr	r3, [sp, #20]
 8006444:	604b      	str	r3, [r1, #4]
 8006446:	9b04      	ldr	r3, [sp, #16]
 8006448:	610b      	str	r3, [r1, #16]
 800644a:	2300      	movs	r3, #0
 800644c:	614b      	str	r3, [r1, #20]
 800644e:	9b06      	ldr	r3, [sp, #24]
 8006450:	618b      	str	r3, [r1, #24]
 8006452:	e9c1 5402 	strd	r5, r4, [r1, #8]
 8006456:	bd70      	pop	{r4, r5, r6, pc}
 8006458:	200015f8 	strdcs	r1, [r0], -r8

0800645c <PixelPatterns::Wheel(unsigned char)>:
 800645c:	43cb      	mvns	r3, r1
 800645e:	b2db      	uxtb	r3, r3
 8006460:	2b54      	cmp	r3, #84	; 0x54
 8006462:	d807      	bhi.n	8006474 <PixelPatterns::Wheel(unsigned char)+0x18>
 8006464:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8006468:	b2db      	uxtb	r3, r3
 800646a:	0418      	lsls	r0, r3, #16
 800646c:	f480 007f 	eor.w	r0, r0, #16711680	; 0xff0000
 8006470:	4318      	orrs	r0, r3
 8006472:	4770      	bx	lr
 8006474:	2ba9      	cmp	r3, #169	; 0xa9
 8006476:	d809      	bhi.n	800648c <PixelPatterns::Wheel(unsigned char)+0x30>
 8006478:	f1c1 01aa 	rsb	r1, r1, #170	; 0xaa
 800647c:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8006480:	b2c9      	uxtb	r1, r1
 8006482:	43c8      	mvns	r0, r1
 8006484:	b2c0      	uxtb	r0, r0
 8006486:	ea40 2001 	orr.w	r0, r0, r1, lsl #8
 800648a:	4770      	bx	lr
 800648c:	f1c1 0155 	rsb	r1, r1, #85	; 0x55
 8006490:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8006494:	b2c9      	uxtb	r1, r1
 8006496:	0208      	lsls	r0, r1, #8
 8006498:	f480 407f 	eor.w	r0, r0, #65280	; 0xff00
 800649c:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80064a0:	4770      	bx	lr
	...

080064a4 <PixelPatterns::Increment(unsigned long)>:
 80064a4:	4a0d      	ldr	r2, [pc, #52]	; (80064dc <PixelPatterns::Increment(unsigned long)+0x38>)
 80064a6:	b510      	push	{r4, lr}
 80064a8:	014c      	lsls	r4, r1, #5
 80064aa:	eb02 1141 	add.w	r1, r2, r1, lsl #5
 80064ae:	e9d1 3005 	ldrd	r3, r0, [r1, #20]
 80064b2:	b930      	cbnz	r0, 80064c2 <PixelPatterns::Increment(unsigned long)+0x1e>
 80064b4:	690a      	ldr	r2, [r1, #16]
 80064b6:	3301      	adds	r3, #1
 80064b8:	4293      	cmp	r3, r2
 80064ba:	bf18      	it	ne
 80064bc:	4618      	movne	r0, r3
 80064be:	6148      	str	r0, [r1, #20]
 80064c0:	bd10      	pop	{r4, pc}
 80064c2:	b92b      	cbnz	r3, 80064d0 <PixelPatterns::Increment(unsigned long)+0x2c>
 80064c4:	4422      	add	r2, r4
 80064c6:	6913      	ldr	r3, [r2, #16]
 80064c8:	3b01      	subs	r3, #1
 80064ca:	b29b      	uxth	r3, r3
 80064cc:	6153      	str	r3, [r2, #20]
 80064ce:	e7f7      	b.n	80064c0 <PixelPatterns::Increment(unsigned long)+0x1c>
 80064d0:	3b01      	subs	r3, #1
 80064d2:	614b      	str	r3, [r1, #20]
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d1f3      	bne.n	80064c0 <PixelPatterns::Increment(unsigned long)+0x1c>
 80064d8:	e7f4      	b.n	80064c4 <PixelPatterns::Increment(unsigned long)+0x20>
 80064da:	bf00      	nop
 80064dc:	200015f8 	strdcs	r1, [r0], -r8

080064e0 <PixelPatterns::RainbowCycleUpdate(unsigned long)>:
 80064e0:	4b10      	ldr	r3, [pc, #64]	; (8006524 <PixelPatterns::RainbowCycleUpdate(unsigned long)+0x44>)
 80064e2:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 80064e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80064ea:	f8d3 8014 	ldr.w	r8, [r3, #20]
 80064ee:	4f0e      	ldr	r7, [pc, #56]	; (8006528 <PixelPatterns::RainbowCycleUpdate(unsigned long)+0x48>)
 80064f0:	4605      	mov	r5, r0
 80064f2:	460e      	mov	r6, r1
 80064f4:	2400      	movs	r4, #0
 80064f6:	683a      	ldr	r2, [r7, #0]
 80064f8:	42a2      	cmp	r2, r4
 80064fa:	d805      	bhi.n	8006508 <PixelPatterns::RainbowCycleUpdate(unsigned long)+0x28>
 80064fc:	4631      	mov	r1, r6
 80064fe:	4628      	mov	r0, r5
 8006500:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006504:	f7ff bfce 	b.w	80064a4 <PixelPatterns::Increment(unsigned long)>
 8006508:	0223      	lsls	r3, r4, #8
 800650a:	fbb3 f3f2 	udiv	r3, r3, r2
 800650e:	4443      	add	r3, r8
 8006510:	b2d9      	uxtb	r1, r3
 8006512:	4628      	mov	r0, r5
 8006514:	f7ff ffa2 	bl	800645c <PixelPatterns::Wheel(unsigned char)>
 8006518:	4601      	mov	r1, r0
 800651a:	4620      	mov	r0, r4
 800651c:	f7ff fea8 	bl	8006270 <PixelPatterns::SetPixelColour(unsigned long, unsigned long, unsigned long) [clone .isra.0]>
 8006520:	3401      	adds	r4, #1
 8006522:	e7e8      	b.n	80064f6 <PixelPatterns::RainbowCycleUpdate(unsigned long)+0x16>
 8006524:	200015f8 	strdcs	r1, [r0], -r8
 8006528:	20001620 	andcs	r1, r0, r0, lsr #12

0800652c <PixelPatterns::TheaterChaseUpdate(unsigned long)>:
 800652c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006530:	4b11      	ldr	r3, [pc, #68]	; (8006578 <PixelPatterns::TheaterChaseUpdate(unsigned long)+0x4c>)
 8006532:	4f12      	ldr	r7, [pc, #72]	; (800657c <PixelPatterns::TheaterChaseUpdate(unsigned long)+0x50>)
 8006534:	f8df b048 	ldr.w	fp, [pc, #72]	; 8006580 <PixelPatterns::TheaterChaseUpdate(unsigned long)+0x54>
 8006538:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800653c:	e9d3 8902 	ldrd	r8, r9, [r3, #8]
 8006540:	f8d3 a014 	ldr.w	sl, [r3, #20]
 8006544:	4606      	mov	r6, r0
 8006546:	460d      	mov	r5, r1
 8006548:	2400      	movs	r4, #0
 800654a:	683b      	ldr	r3, [r7, #0]
 800654c:	42a3      	cmp	r3, r4
 800654e:	d805      	bhi.n	800655c <PixelPatterns::TheaterChaseUpdate(unsigned long)+0x30>
 8006550:	4629      	mov	r1, r5
 8006552:	4630      	mov	r0, r6
 8006554:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006558:	f7ff bfa4 	b.w	80064a4 <PixelPatterns::Increment(unsigned long)>
 800655c:	eb04 030a 	add.w	r3, r4, sl
 8006560:	fb0b f303 	mul.w	r3, fp, r3
 8006564:	f1b3 3f55 	cmp.w	r3, #1431655765	; 0x55555555
 8006568:	4620      	mov	r0, r4
 800656a:	bf94      	ite	ls
 800656c:	4641      	movls	r1, r8
 800656e:	4649      	movhi	r1, r9
 8006570:	f7ff fe7e 	bl	8006270 <PixelPatterns::SetPixelColour(unsigned long, unsigned long, unsigned long) [clone .isra.0]>
 8006574:	3401      	adds	r4, #1
 8006576:	e7e8      	b.n	800654a <PixelPatterns::TheaterChaseUpdate(unsigned long)+0x1e>
 8006578:	200015f8 	strdcs	r1, [r0], -r8
 800657c:	20001620 	andcs	r1, r0, r0, lsr #12
 8006580:	aaaaaaab 	bge	6ab1034 <__heap_size+0x6ab0034>

08006584 <PixelPatterns::ColourWipeUpdate(unsigned long)>:
 8006584:	b538      	push	{r3, r4, r5, lr}
 8006586:	4b07      	ldr	r3, [pc, #28]	; (80065a4 <PixelPatterns::ColourWipeUpdate(unsigned long)+0x20>)
 8006588:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800658c:	4605      	mov	r5, r0
 800658e:	460c      	mov	r4, r1
 8006590:	6958      	ldr	r0, [r3, #20]
 8006592:	6899      	ldr	r1, [r3, #8]
 8006594:	f7ff fe6c 	bl	8006270 <PixelPatterns::SetPixelColour(unsigned long, unsigned long, unsigned long) [clone .isra.0]>
 8006598:	4621      	mov	r1, r4
 800659a:	4628      	mov	r0, r5
 800659c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80065a0:	f7ff bf80 	b.w	80064a4 <PixelPatterns::Increment(unsigned long)>
 80065a4:	200015f8 	strdcs	r1, [r0], -r8

080065a8 <PixelPatterns::ScannerUpdate(unsigned long)>:
 80065a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80065ac:	4b29      	ldr	r3, [pc, #164]	; (8006654 <PixelPatterns::ScannerUpdate(unsigned long)+0xac>)
 80065ae:	f8df b0a8 	ldr.w	fp, [pc, #168]	; 8006658 <PixelPatterns::ScannerUpdate(unsigned long)+0xb0>
 80065b2:	f8df 90a8 	ldr.w	r9, [pc, #168]	; 800665c <PixelPatterns::ScannerUpdate(unsigned long)+0xb4>
 80065b6:	ed2d 8b02 	vpush	{d8}
 80065ba:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 80065be:	b083      	sub	sp, #12
 80065c0:	689f      	ldr	r7, [r3, #8]
 80065c2:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80065c6:	ee08 0a10 	vmov	s16, r0
 80065ca:	460e      	mov	r6, r1
 80065cc:	9301      	str	r3, [sp, #4]
 80065ce:	2400      	movs	r4, #0
 80065d0:	eba2 0803 	sub.w	r8, r2, r3
 80065d4:	f8db 2000 	ldr.w	r2, [fp]
 80065d8:	42a2      	cmp	r2, r4
 80065da:	d809      	bhi.n	80065f0 <PixelPatterns::ScannerUpdate(unsigned long)+0x48>
 80065dc:	ee18 0a10 	vmov	r0, s16
 80065e0:	4631      	mov	r1, r6
 80065e2:	b003      	add	sp, #12
 80065e4:	ecbd 8b02 	vpop	{d8}
 80065e8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80065ec:	f7ff bf5a 	b.w	80064a4 <PixelPatterns::Increment(unsigned long)>
 80065f0:	9b01      	ldr	r3, [sp, #4]
 80065f2:	429c      	cmp	r4, r3
 80065f4:	ea4f 0a84 	mov.w	sl, r4, lsl #2
 80065f8:	d109      	bne.n	800660e <PixelPatterns::ScannerUpdate(unsigned long)+0x66>
 80065fa:	4639      	mov	r1, r7
 80065fc:	4620      	mov	r0, r4
 80065fe:	f7ff fe37 	bl	8006270 <PixelPatterns::SetPixelColour(unsigned long, unsigned long, unsigned long) [clone .isra.0]>
 8006602:	f8d9 2000 	ldr.w	r2, [r9]
 8006606:	f842 7024 	str.w	r7, [r2, r4, lsl #2]
 800660a:	3401      	adds	r4, #1
 800660c:	e7e2      	b.n	80065d4 <PixelPatterns::ScannerUpdate(unsigned long)+0x2c>
 800660e:	45a0      	cmp	r8, r4
 8006610:	d108      	bne.n	8006624 <PixelPatterns::ScannerUpdate(unsigned long)+0x7c>
 8006612:	4639      	mov	r1, r7
 8006614:	4640      	mov	r0, r8
 8006616:	f7ff fe2b 	bl	8006270 <PixelPatterns::SetPixelColour(unsigned long, unsigned long, unsigned long) [clone .isra.0]>
 800661a:	f8d9 1000 	ldr.w	r1, [r9]
 800661e:	f841 700a 	str.w	r7, [r1, sl]
 8006622:	e7f2      	b.n	800660a <PixelPatterns::ScannerUpdate(unsigned long)+0x62>
 8006624:	f8d9 1000 	ldr.w	r1, [r9]
 8006628:	f851 100a 	ldr.w	r1, [r1, sl]
 800662c:	f3c1 2546 	ubfx	r5, r1, #9, #7
 8006630:	f3c1 4046 	ubfx	r0, r1, #17, #7
 8006634:	022d      	lsls	r5, r5, #8
 8006636:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 800663a:	f3c1 0146 	ubfx	r1, r1, #1, #7
 800663e:	430d      	orrs	r5, r1
 8006640:	4629      	mov	r1, r5
 8006642:	4620      	mov	r0, r4
 8006644:	f7ff fe14 	bl	8006270 <PixelPatterns::SetPixelColour(unsigned long, unsigned long, unsigned long) [clone .isra.0]>
 8006648:	f8d9 1000 	ldr.w	r1, [r9]
 800664c:	f841 500a 	str.w	r5, [r1, sl]
 8006650:	e7db      	b.n	800660a <PixelPatterns::ScannerUpdate(unsigned long)+0x62>
 8006652:	bf00      	nop
 8006654:	200015f8 	strdcs	r1, [r0], -r8
 8006658:	20001620 	andcs	r1, r0, r0, lsr #12
 800665c:	2000161c 	andcs	r1, r0, ip, lsl r6

08006660 <PixelPatterns::FadeUpdate(unsigned long)>:
 8006660:	4a21      	ldr	r2, [pc, #132]	; (80066e8 <PixelPatterns::FadeUpdate(unsigned long)+0x88>)
 8006662:	eb02 1241 	add.w	r2, r2, r1, lsl #5
 8006666:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800666a:	460c      	mov	r4, r1
 800666c:	e9d2 1302 	ldrd	r1, r3, [r2, #8]
 8006670:	4605      	mov	r5, r0
 8006672:	e9d2 0704 	ldrd	r0, r7, [r2, #16]
 8006676:	f3c3 2207 	ubfx	r2, r3, #8, #8
 800667a:	1bc6      	subs	r6, r0, r7
 800667c:	f3c1 2c07 	ubfx	ip, r1, #8, #8
 8006680:	437a      	muls	r2, r7
 8006682:	fb06 220c 	mla	r2, r6, ip, r2
 8006686:	fbb2 f2f0 	udiv	r2, r2, r0
 800668a:	0212      	lsls	r2, r2, #8
 800668c:	fa1f fc82 	uxth.w	ip, r2
 8006690:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8006694:	f3c1 4e07 	ubfx	lr, r1, #16, #8
 8006698:	437a      	muls	r2, r7
 800669a:	fb06 220e 	mla	r2, r6, lr, r2
 800669e:	b2db      	uxtb	r3, r3
 80066a0:	fbb2 f2f0 	udiv	r2, r2, r0
 80066a4:	0412      	lsls	r2, r2, #16
 80066a6:	437b      	muls	r3, r7
 80066a8:	f402 027f 	and.w	r2, r2, #16711680	; 0xff0000
 80066ac:	b2c9      	uxtb	r1, r1
 80066ae:	fb06 3301 	mla	r3, r6, r1, r3
 80066b2:	ea4c 0202 	orr.w	r2, ip, r2
 80066b6:	fbb3 f3f0 	udiv	r3, r3, r0
 80066ba:	f8df 8030 	ldr.w	r8, [pc, #48]	; 80066ec <PixelPatterns::FadeUpdate(unsigned long)+0x8c>
 80066be:	b2db      	uxtb	r3, r3
 80066c0:	ea42 0603 	orr.w	r6, r2, r3
 80066c4:	2700      	movs	r7, #0
 80066c6:	f8d8 3000 	ldr.w	r3, [r8]
 80066ca:	429f      	cmp	r7, r3
 80066cc:	d305      	bcc.n	80066da <PixelPatterns::FadeUpdate(unsigned long)+0x7a>
 80066ce:	4621      	mov	r1, r4
 80066d0:	4628      	mov	r0, r5
 80066d2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80066d6:	f7ff bee5 	b.w	80064a4 <PixelPatterns::Increment(unsigned long)>
 80066da:	4638      	mov	r0, r7
 80066dc:	4631      	mov	r1, r6
 80066de:	f7ff fdc7 	bl	8006270 <PixelPatterns::SetPixelColour(unsigned long, unsigned long, unsigned long) [clone .isra.0]>
 80066e2:	3701      	adds	r7, #1
 80066e4:	e7ef      	b.n	80066c6 <PixelPatterns::FadeUpdate(unsigned long)+0x66>
 80066e6:	bf00      	nop
 80066e8:	200015f8 	strdcs	r1, [r0], -r8
 80066ec:	20001620 	andcs	r1, r0, r0, lsr #12

080066f0 <PixelPatterns::PortUpdate(unsigned long, unsigned long)>:
 80066f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80066f2:	4b12      	ldr	r3, [pc, #72]	; (800673c <PixelPatterns::PortUpdate(unsigned long, unsigned long)+0x4c>)
 80066f4:	014e      	lsls	r6, r1, #5
 80066f6:	eb03 1541 	add.w	r5, r3, r1, lsl #5
 80066fa:	599c      	ldr	r4, [r3, r6]
 80066fc:	686f      	ldr	r7, [r5, #4]
 80066fe:	1b14      	subs	r4, r2, r4
 8006700:	42bc      	cmp	r4, r7
 8006702:	d319      	bcc.n	8006738 <PixelPatterns::PortUpdate(unsigned long, unsigned long)+0x48>
 8006704:	519a      	str	r2, [r3, r6]
 8006706:	69eb      	ldr	r3, [r5, #28]
 8006708:	3b01      	subs	r3, #1
 800670a:	2b04      	cmp	r3, #4
 800670c:	d814      	bhi.n	8006738 <PixelPatterns::PortUpdate(unsigned long, unsigned long)+0x48>
 800670e:	e8df f003 	tbb	[pc, r3]
 8006712:	0d0a0703 	stceq	7, cr0, [sl, #-12]
 8006716:	f7ff0010 			; <UNDEFINED> instruction: 0xf7ff0010
 800671a:	fee2 2001 	cdp2	0, 14, cr2, cr2, cr1, {0}
 800671e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006720:	f7ff ff04 	bl	800652c <PixelPatterns::TheaterChaseUpdate(unsigned long)>
 8006724:	e7fa      	b.n	800671c <PixelPatterns::PortUpdate(unsigned long, unsigned long)+0x2c>
 8006726:	f7ff ff2d 	bl	8006584 <PixelPatterns::ColourWipeUpdate(unsigned long)>
 800672a:	e7f7      	b.n	800671c <PixelPatterns::PortUpdate(unsigned long, unsigned long)+0x2c>
 800672c:	f7ff ff3c 	bl	80065a8 <PixelPatterns::ScannerUpdate(unsigned long)>
 8006730:	e7f4      	b.n	800671c <PixelPatterns::PortUpdate(unsigned long, unsigned long)+0x2c>
 8006732:	f7ff ff95 	bl	8006660 <PixelPatterns::FadeUpdate(unsigned long)>
 8006736:	e7f1      	b.n	800671c <PixelPatterns::PortUpdate(unsigned long, unsigned long)+0x2c>
 8006738:	2000      	movs	r0, #0
 800673a:	e7f0      	b.n	800671e <PixelPatterns::PortUpdate(unsigned long, unsigned long)+0x2e>
 800673c:	200015f8 	strdcs	r1, [r0], -r8

08006740 <PixelPatterns::Run()>:
 8006740:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006744:	4606      	mov	r6, r0
 8006746:	f003 f975 	bl	8009a34 <gd32_spi_dma_tx_is_active()>
 800674a:	4604      	mov	r4, r0
 800674c:	b9b8      	cbnz	r0, 800677e <PixelPatterns::Run()+0x3e>
 800674e:	4b0d      	ldr	r3, [pc, #52]	; (8006784 <PixelPatterns::Run()+0x44>)
 8006750:	4f0d      	ldr	r7, [pc, #52]	; (8006788 <PixelPatterns::Run()+0x48>)
 8006752:	f8d3 8000 	ldr.w	r8, [r3]
 8006756:	4605      	mov	r5, r0
 8006758:	683b      	ldr	r3, [r7, #0]
 800675a:	42ab      	cmp	r3, r5
 800675c:	d806      	bhi.n	800676c <PixelPatterns::Run()+0x2c>
 800675e:	b174      	cbz	r4, 800677e <PixelPatterns::Run()+0x3e>
 8006760:	4b0a      	ldr	r3, [pc, #40]	; (800678c <PixelPatterns::Run()+0x4c>)
 8006762:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006766:	6818      	ldr	r0, [r3, #0]
 8006768:	f000 ba9a 	b.w	8006ca0 <WS28xx::Update()>
 800676c:	4629      	mov	r1, r5
 800676e:	4642      	mov	r2, r8
 8006770:	4630      	mov	r0, r6
 8006772:	f7ff ffbd 	bl	80066f0 <PixelPatterns::PortUpdate(unsigned long, unsigned long)>
 8006776:	4304      	orrs	r4, r0
 8006778:	b2e4      	uxtb	r4, r4
 800677a:	3501      	adds	r5, #1
 800677c:	e7ec      	b.n	8006758 <PixelPatterns::Run()+0x18>
 800677e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006782:	bf00      	nop
 8006784:	200027ac 	andcs	r2, r0, ip, lsr #15
 8006788:	20001618 	andcs	r1, r0, r8, lsl r6
 800678c:	20001624 	andcs	r1, r0, r4, lsr #12

08006790 <WS28xx::SetPixel(unsigned long, unsigned char, unsigned char, unsigned char)>:
 8006790:	b570      	push	{r4, r5, r6, lr}
 8006792:	6984      	ldr	r4, [r0, #24]
 8006794:	f89d e010 	ldrb.w	lr, [sp, #16]
 8006798:	f814 c003 	ldrb.w	ip, [r4, r3]
 800679c:	7d43      	ldrb	r3, [r0, #21]
 800679e:	5ca2      	ldrb	r2, [r4, r2]
 80067a0:	f814 e00e 	ldrb.w	lr, [r4, lr]
 80067a4:	bbab      	cbnz	r3, 8006812 <WS28xx::SetPixel(unsigned long, unsigned char, unsigned char, unsigned char)+0x82>
 80067a6:	6803      	ldr	r3, [r0, #0]
 80067a8:	b333      	cbz	r3, 80067f8 <WS28xx::SetPixel(unsigned long, unsigned char, unsigned char, unsigned char)+0x68>
 80067aa:	3b0b      	subs	r3, #11
 80067ac:	2b01      	cmp	r3, #1
 80067ae:	f101 0101 	add.w	r1, r1, #1
 80067b2:	f240 80f4 	bls.w	800699e <WS28xx::SetPixel(unsigned long, unsigned char, unsigned char, unsigned char)+0x20e>
 80067b6:	ea6f 039e 	mvn.w	r3, lr, lsr #2
 80067ba:	f082 04c0 	eor.w	r4, r2, #192	; 0xc0
 80067be:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80067c2:	ea43 1394 	orr.w	r3, r3, r4, lsr #6
 80067c6:	ea6f 141c 	mvn.w	r4, ip, lsr #4
 80067ca:	f004 040c 	and.w	r4, r4, #12
 80067ce:	4323      	orrs	r3, r4
 80067d0:	6a04      	ldr	r4, [r0, #32]
 80067d2:	f063 033f 	orn	r3, r3, #63	; 0x3f
 80067d6:	f804 3021 	strb.w	r3, [r4, r1, lsl #2]
 80067da:	6a03      	ldr	r3, [r0, #32]
 80067dc:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 80067e0:	f883 e001 	strb.w	lr, [r3, #1]
 80067e4:	6a03      	ldr	r3, [r0, #32]
 80067e6:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 80067ea:	f883 c002 	strb.w	ip, [r3, #2]
 80067ee:	6a03      	ldr	r3, [r0, #32]
 80067f0:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 80067f4:	70da      	strb	r2, [r3, #3]
 80067f6:	bd70      	pop	{r4, r5, r6, pc}
 80067f8:	6a03      	ldr	r3, [r0, #32]
 80067fa:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 80067fe:	545a      	strb	r2, [r3, r1]
 8006800:	6a03      	ldr	r3, [r0, #32]
 8006802:	440b      	add	r3, r1
 8006804:	f883 c001 	strb.w	ip, [r3, #1]
 8006808:	6a03      	ldr	r3, [r0, #32]
 800680a:	440b      	add	r3, r1
 800680c:	f883 e002 	strb.w	lr, [r3, #2]
 8006810:	bd70      	pop	{r4, r5, r6, pc}
 8006812:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8006816:	00cb      	lsls	r3, r1, #3
 8006818:	6a05      	ldr	r5, [r0, #32]
 800681a:	7c01      	ldrb	r1, [r0, #16]
 800681c:	7c44      	ldrb	r4, [r0, #17]
 800681e:	1c5e      	adds	r6, r3, #1
 8006820:	f012 0f80 	tst.w	r2, #128	; 0x80
 8006824:	bf14      	ite	ne
 8006826:	55ac      	strbne	r4, [r5, r6]
 8006828:	55a9      	strbeq	r1, [r5, r6]
 800682a:	1c9e      	adds	r6, r3, #2
 800682c:	6a05      	ldr	r5, [r0, #32]
 800682e:	f012 0f40 	tst.w	r2, #64	; 0x40
 8006832:	bf14      	ite	ne
 8006834:	55ac      	strbne	r4, [r5, r6]
 8006836:	55a9      	strbeq	r1, [r5, r6]
 8006838:	1cde      	adds	r6, r3, #3
 800683a:	6a05      	ldr	r5, [r0, #32]
 800683c:	f012 0f20 	tst.w	r2, #32
 8006840:	bf14      	ite	ne
 8006842:	55ac      	strbne	r4, [r5, r6]
 8006844:	55a9      	strbeq	r1, [r5, r6]
 8006846:	1d1e      	adds	r6, r3, #4
 8006848:	6a05      	ldr	r5, [r0, #32]
 800684a:	f012 0f10 	tst.w	r2, #16
 800684e:	bf14      	ite	ne
 8006850:	55ac      	strbne	r4, [r5, r6]
 8006852:	55a9      	strbeq	r1, [r5, r6]
 8006854:	1d5e      	adds	r6, r3, #5
 8006856:	6a05      	ldr	r5, [r0, #32]
 8006858:	f012 0f08 	tst.w	r2, #8
 800685c:	bf14      	ite	ne
 800685e:	55ac      	strbne	r4, [r5, r6]
 8006860:	55a9      	strbeq	r1, [r5, r6]
 8006862:	1d9e      	adds	r6, r3, #6
 8006864:	6a05      	ldr	r5, [r0, #32]
 8006866:	f012 0f04 	tst.w	r2, #4
 800686a:	bf14      	ite	ne
 800686c:	55ac      	strbne	r4, [r5, r6]
 800686e:	55a9      	strbeq	r1, [r5, r6]
 8006870:	1dde      	adds	r6, r3, #7
 8006872:	6a05      	ldr	r5, [r0, #32]
 8006874:	f012 0f02 	tst.w	r2, #2
 8006878:	bf14      	ite	ne
 800687a:	55ac      	strbne	r4, [r5, r6]
 800687c:	55a9      	strbeq	r1, [r5, r6]
 800687e:	f103 0508 	add.w	r5, r3, #8
 8006882:	f012 0f01 	tst.w	r2, #1
 8006886:	6a02      	ldr	r2, [r0, #32]
 8006888:	bf14      	ite	ne
 800688a:	5554      	strbne	r4, [r2, r5]
 800688c:	5551      	strbeq	r1, [r2, r5]
 800688e:	f103 0409 	add.w	r4, r3, #9
 8006892:	6a05      	ldr	r5, [r0, #32]
 8006894:	7c41      	ldrb	r1, [r0, #17]
 8006896:	7c02      	ldrb	r2, [r0, #16]
 8006898:	f01c 0f80 	tst.w	ip, #128	; 0x80
 800689c:	bf0c      	ite	eq
 800689e:	552a      	strbeq	r2, [r5, r4]
 80068a0:	5529      	strbne	r1, [r5, r4]
 80068a2:	f103 040a 	add.w	r4, r3, #10
 80068a6:	6a05      	ldr	r5, [r0, #32]
 80068a8:	f01c 0f40 	tst.w	ip, #64	; 0x40
 80068ac:	bf0c      	ite	eq
 80068ae:	552a      	strbeq	r2, [r5, r4]
 80068b0:	5529      	strbne	r1, [r5, r4]
 80068b2:	f103 040b 	add.w	r4, r3, #11
 80068b6:	6a05      	ldr	r5, [r0, #32]
 80068b8:	f01c 0f20 	tst.w	ip, #32
 80068bc:	bf0c      	ite	eq
 80068be:	552a      	strbeq	r2, [r5, r4]
 80068c0:	5529      	strbne	r1, [r5, r4]
 80068c2:	f103 040c 	add.w	r4, r3, #12
 80068c6:	6a05      	ldr	r5, [r0, #32]
 80068c8:	f01c 0f10 	tst.w	ip, #16
 80068cc:	bf0c      	ite	eq
 80068ce:	552a      	strbeq	r2, [r5, r4]
 80068d0:	5529      	strbne	r1, [r5, r4]
 80068d2:	f103 040d 	add.w	r4, r3, #13
 80068d6:	6a05      	ldr	r5, [r0, #32]
 80068d8:	f01c 0f08 	tst.w	ip, #8
 80068dc:	bf0c      	ite	eq
 80068de:	552a      	strbeq	r2, [r5, r4]
 80068e0:	5529      	strbne	r1, [r5, r4]
 80068e2:	f103 040e 	add.w	r4, r3, #14
 80068e6:	6a05      	ldr	r5, [r0, #32]
 80068e8:	f01c 0f04 	tst.w	ip, #4
 80068ec:	bf0c      	ite	eq
 80068ee:	552a      	strbeq	r2, [r5, r4]
 80068f0:	5529      	strbne	r1, [r5, r4]
 80068f2:	f103 040f 	add.w	r4, r3, #15
 80068f6:	6a05      	ldr	r5, [r0, #32]
 80068f8:	f01c 0f02 	tst.w	ip, #2
 80068fc:	bf0c      	ite	eq
 80068fe:	552a      	strbeq	r2, [r5, r4]
 8006900:	5529      	strbne	r1, [r5, r4]
 8006902:	f01c 0f01 	tst.w	ip, #1
 8006906:	bf14      	ite	ne
 8006908:	6a02      	ldrne	r2, [r0, #32]
 800690a:	6a01      	ldreq	r1, [r0, #32]
 800690c:	f103 0410 	add.w	r4, r3, #16
 8006910:	bf14      	ite	ne
 8006912:	5511      	strbne	r1, [r2, r4]
 8006914:	550a      	strbeq	r2, [r1, r4]
 8006916:	f103 0411 	add.w	r4, r3, #17
 800691a:	6a05      	ldr	r5, [r0, #32]
 800691c:	7c41      	ldrb	r1, [r0, #17]
 800691e:	7c02      	ldrb	r2, [r0, #16]
 8006920:	f01e 0f80 	tst.w	lr, #128	; 0x80
 8006924:	bf0c      	ite	eq
 8006926:	552a      	strbeq	r2, [r5, r4]
 8006928:	5529      	strbne	r1, [r5, r4]
 800692a:	f103 0412 	add.w	r4, r3, #18
 800692e:	6a05      	ldr	r5, [r0, #32]
 8006930:	f01e 0f40 	tst.w	lr, #64	; 0x40
 8006934:	bf0c      	ite	eq
 8006936:	552a      	strbeq	r2, [r5, r4]
 8006938:	5529      	strbne	r1, [r5, r4]
 800693a:	f103 0413 	add.w	r4, r3, #19
 800693e:	6a05      	ldr	r5, [r0, #32]
 8006940:	f01e 0f20 	tst.w	lr, #32
 8006944:	bf0c      	ite	eq
 8006946:	552a      	strbeq	r2, [r5, r4]
 8006948:	5529      	strbne	r1, [r5, r4]
 800694a:	f103 0414 	add.w	r4, r3, #20
 800694e:	6a05      	ldr	r5, [r0, #32]
 8006950:	f01e 0f10 	tst.w	lr, #16
 8006954:	bf0c      	ite	eq
 8006956:	552a      	strbeq	r2, [r5, r4]
 8006958:	5529      	strbne	r1, [r5, r4]
 800695a:	f103 0415 	add.w	r4, r3, #21
 800695e:	6a05      	ldr	r5, [r0, #32]
 8006960:	f01e 0f08 	tst.w	lr, #8
 8006964:	bf0c      	ite	eq
 8006966:	552a      	strbeq	r2, [r5, r4]
 8006968:	5529      	strbne	r1, [r5, r4]
 800696a:	f103 0416 	add.w	r4, r3, #22
 800696e:	6a05      	ldr	r5, [r0, #32]
 8006970:	f01e 0f04 	tst.w	lr, #4
 8006974:	bf0c      	ite	eq
 8006976:	552a      	strbeq	r2, [r5, r4]
 8006978:	5529      	strbne	r1, [r5, r4]
 800697a:	f103 0417 	add.w	r4, r3, #23
 800697e:	6a05      	ldr	r5, [r0, #32]
 8006980:	f01e 0f02 	tst.w	lr, #2
 8006984:	bf0c      	ite	eq
 8006986:	552a      	strbeq	r2, [r5, r4]
 8006988:	5529      	strbne	r1, [r5, r4]
 800698a:	f01e 0f01 	tst.w	lr, #1
 800698e:	f103 0318 	add.w	r3, r3, #24
 8006992:	bf15      	itete	ne
 8006994:	6a02      	ldrne	r2, [r0, #32]
 8006996:	6a01      	ldreq	r1, [r0, #32]
 8006998:	54d1      	strbne	r1, [r2, r3]
 800699a:	54ca      	strbeq	r2, [r1, r3]
 800699c:	bd70      	pop	{r4, r5, r6, pc}
 800699e:	6a03      	ldr	r3, [r0, #32]
 80069a0:	7c84      	ldrb	r4, [r0, #18]
 80069a2:	f803 4021 	strb.w	r4, [r3, r1, lsl #2]
 80069a6:	6a03      	ldr	r3, [r0, #32]
 80069a8:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 80069ac:	705a      	strb	r2, [r3, #1]
 80069ae:	6a03      	ldr	r3, [r0, #32]
 80069b0:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 80069b4:	f883 c002 	strb.w	ip, [r3, #2]
 80069b8:	6a03      	ldr	r3, [r0, #32]
 80069ba:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 80069be:	f883 e003 	strb.w	lr, [r3, #3]
 80069c2:	bd70      	pop	{r4, r5, r6, pc}

080069c4 <WS28xx::SetPixel(unsigned long, unsigned char, unsigned char, unsigned char, unsigned char)>:
 80069c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80069c6:	6984      	ldr	r4, [r0, #24]
 80069c8:	f89d 5014 	ldrb.w	r5, [sp, #20]
 80069cc:	56e6      	ldrsb	r6, [r4, r3]
 80069ce:	f814 e002 	ldrb.w	lr, [r4, r2]
 80069d2:	f89d 2018 	ldrb.w	r2, [sp, #24]
 80069d6:	f814 c005 	ldrb.w	ip, [r4, r5]
 80069da:	5ca2      	ldrb	r2, [r4, r2]
 80069dc:	5ce3      	ldrb	r3, [r4, r3]
 80069de:	7c05      	ldrb	r5, [r0, #16]
 80069e0:	7c44      	ldrb	r4, [r0, #17]
 80069e2:	0149      	lsls	r1, r1, #5
 80069e4:	1c4f      	adds	r7, r1, #1
 80069e6:	2e00      	cmp	r6, #0
 80069e8:	6a06      	ldr	r6, [r0, #32]
 80069ea:	bfac      	ite	ge
 80069ec:	55f5      	strbge	r5, [r6, r7]
 80069ee:	55f4      	strblt	r4, [r6, r7]
 80069f0:	1c8e      	adds	r6, r1, #2
 80069f2:	6a07      	ldr	r7, [r0, #32]
 80069f4:	f013 0f40 	tst.w	r3, #64	; 0x40
 80069f8:	bf0c      	ite	eq
 80069fa:	55bd      	strbeq	r5, [r7, r6]
 80069fc:	55bc      	strbne	r4, [r7, r6]
 80069fe:	1cce      	adds	r6, r1, #3
 8006a00:	6a07      	ldr	r7, [r0, #32]
 8006a02:	f013 0f20 	tst.w	r3, #32
 8006a06:	bf0c      	ite	eq
 8006a08:	55bd      	strbeq	r5, [r7, r6]
 8006a0a:	55bc      	strbne	r4, [r7, r6]
 8006a0c:	1d0e      	adds	r6, r1, #4
 8006a0e:	6a07      	ldr	r7, [r0, #32]
 8006a10:	f013 0f10 	tst.w	r3, #16
 8006a14:	bf0c      	ite	eq
 8006a16:	55bd      	strbeq	r5, [r7, r6]
 8006a18:	55bc      	strbne	r4, [r7, r6]
 8006a1a:	1d4e      	adds	r6, r1, #5
 8006a1c:	6a07      	ldr	r7, [r0, #32]
 8006a1e:	f013 0f08 	tst.w	r3, #8
 8006a22:	bf0c      	ite	eq
 8006a24:	55bd      	strbeq	r5, [r7, r6]
 8006a26:	55bc      	strbne	r4, [r7, r6]
 8006a28:	1d8e      	adds	r6, r1, #6
 8006a2a:	6a07      	ldr	r7, [r0, #32]
 8006a2c:	f013 0f04 	tst.w	r3, #4
 8006a30:	bf0c      	ite	eq
 8006a32:	55bd      	strbeq	r5, [r7, r6]
 8006a34:	55bc      	strbne	r4, [r7, r6]
 8006a36:	1dce      	adds	r6, r1, #7
 8006a38:	6a07      	ldr	r7, [r0, #32]
 8006a3a:	f013 0f02 	tst.w	r3, #2
 8006a3e:	bf0c      	ite	eq
 8006a40:	55bd      	strbeq	r5, [r7, r6]
 8006a42:	55bc      	strbne	r4, [r7, r6]
 8006a44:	f101 0608 	add.w	r6, r1, #8
 8006a48:	f013 0f01 	tst.w	r3, #1
 8006a4c:	6a03      	ldr	r3, [r0, #32]
 8006a4e:	bf14      	ite	ne
 8006a50:	559c      	strbne	r4, [r3, r6]
 8006a52:	559d      	strbeq	r5, [r3, r6]
 8006a54:	f101 0609 	add.w	r6, r1, #9
 8006a58:	6a05      	ldr	r5, [r0, #32]
 8006a5a:	7c03      	ldrb	r3, [r0, #16]
 8006a5c:	7c44      	ldrb	r4, [r0, #17]
 8006a5e:	f01e 0f80 	tst.w	lr, #128	; 0x80
 8006a62:	bf0c      	ite	eq
 8006a64:	55ab      	strbeq	r3, [r5, r6]
 8006a66:	55ac      	strbne	r4, [r5, r6]
 8006a68:	f101 060a 	add.w	r6, r1, #10
 8006a6c:	6a05      	ldr	r5, [r0, #32]
 8006a6e:	f01e 0f40 	tst.w	lr, #64	; 0x40
 8006a72:	bf0c      	ite	eq
 8006a74:	55ab      	strbeq	r3, [r5, r6]
 8006a76:	55ac      	strbne	r4, [r5, r6]
 8006a78:	f101 060b 	add.w	r6, r1, #11
 8006a7c:	6a05      	ldr	r5, [r0, #32]
 8006a7e:	f01e 0f20 	tst.w	lr, #32
 8006a82:	bf0c      	ite	eq
 8006a84:	55ab      	strbeq	r3, [r5, r6]
 8006a86:	55ac      	strbne	r4, [r5, r6]
 8006a88:	f101 060c 	add.w	r6, r1, #12
 8006a8c:	6a05      	ldr	r5, [r0, #32]
 8006a8e:	f01e 0f10 	tst.w	lr, #16
 8006a92:	bf0c      	ite	eq
 8006a94:	55ab      	strbeq	r3, [r5, r6]
 8006a96:	55ac      	strbne	r4, [r5, r6]
 8006a98:	f101 060d 	add.w	r6, r1, #13
 8006a9c:	6a05      	ldr	r5, [r0, #32]
 8006a9e:	f01e 0f08 	tst.w	lr, #8
 8006aa2:	bf0c      	ite	eq
 8006aa4:	55ab      	strbeq	r3, [r5, r6]
 8006aa6:	55ac      	strbne	r4, [r5, r6]
 8006aa8:	f101 060e 	add.w	r6, r1, #14
 8006aac:	6a05      	ldr	r5, [r0, #32]
 8006aae:	f01e 0f04 	tst.w	lr, #4
 8006ab2:	bf0c      	ite	eq
 8006ab4:	55ab      	strbeq	r3, [r5, r6]
 8006ab6:	55ac      	strbne	r4, [r5, r6]
 8006ab8:	f101 060f 	add.w	r6, r1, #15
 8006abc:	6a05      	ldr	r5, [r0, #32]
 8006abe:	f01e 0f02 	tst.w	lr, #2
 8006ac2:	bf0c      	ite	eq
 8006ac4:	55ab      	strbeq	r3, [r5, r6]
 8006ac6:	55ac      	strbne	r4, [r5, r6]
 8006ac8:	f01e 0f01 	tst.w	lr, #1
 8006acc:	bf14      	ite	ne
 8006ace:	6a03      	ldrne	r3, [r0, #32]
 8006ad0:	6a04      	ldreq	r4, [r0, #32]
 8006ad2:	f101 0510 	add.w	r5, r1, #16
 8006ad6:	bf14      	ite	ne
 8006ad8:	555c      	strbne	r4, [r3, r5]
 8006ada:	5563      	strbeq	r3, [r4, r5]
 8006adc:	f101 0511 	add.w	r5, r1, #17
 8006ae0:	7c03      	ldrb	r3, [r0, #16]
 8006ae2:	7c44      	ldrb	r4, [r0, #17]
 8006ae4:	6a06      	ldr	r6, [r0, #32]
 8006ae6:	f01c 0f80 	tst.w	ip, #128	; 0x80
 8006aea:	bf0c      	ite	eq
 8006aec:	5573      	strbeq	r3, [r6, r5]
 8006aee:	5574      	strbne	r4, [r6, r5]
 8006af0:	f101 0512 	add.w	r5, r1, #18
 8006af4:	6a06      	ldr	r6, [r0, #32]
 8006af6:	f01c 0f40 	tst.w	ip, #64	; 0x40
 8006afa:	bf0c      	ite	eq
 8006afc:	5573      	strbeq	r3, [r6, r5]
 8006afe:	5574      	strbne	r4, [r6, r5]
 8006b00:	f101 0513 	add.w	r5, r1, #19
 8006b04:	6a06      	ldr	r6, [r0, #32]
 8006b06:	f01c 0f20 	tst.w	ip, #32
 8006b0a:	bf0c      	ite	eq
 8006b0c:	5573      	strbeq	r3, [r6, r5]
 8006b0e:	5574      	strbne	r4, [r6, r5]
 8006b10:	f101 0514 	add.w	r5, r1, #20
 8006b14:	6a06      	ldr	r6, [r0, #32]
 8006b16:	f01c 0f10 	tst.w	ip, #16
 8006b1a:	bf0c      	ite	eq
 8006b1c:	5573      	strbeq	r3, [r6, r5]
 8006b1e:	5574      	strbne	r4, [r6, r5]
 8006b20:	f101 0515 	add.w	r5, r1, #21
 8006b24:	6a06      	ldr	r6, [r0, #32]
 8006b26:	f01c 0f08 	tst.w	ip, #8
 8006b2a:	bf0c      	ite	eq
 8006b2c:	5573      	strbeq	r3, [r6, r5]
 8006b2e:	5574      	strbne	r4, [r6, r5]
 8006b30:	f101 0516 	add.w	r5, r1, #22
 8006b34:	6a06      	ldr	r6, [r0, #32]
 8006b36:	f01c 0f04 	tst.w	ip, #4
 8006b3a:	bf0c      	ite	eq
 8006b3c:	5573      	strbeq	r3, [r6, r5]
 8006b3e:	5574      	strbne	r4, [r6, r5]
 8006b40:	f101 0517 	add.w	r5, r1, #23
 8006b44:	6a06      	ldr	r6, [r0, #32]
 8006b46:	f01c 0f02 	tst.w	ip, #2
 8006b4a:	bf0c      	ite	eq
 8006b4c:	5573      	strbeq	r3, [r6, r5]
 8006b4e:	5574      	strbne	r4, [r6, r5]
 8006b50:	f01c 0f01 	tst.w	ip, #1
 8006b54:	bf14      	ite	ne
 8006b56:	6a03      	ldrne	r3, [r0, #32]
 8006b58:	6a04      	ldreq	r4, [r0, #32]
 8006b5a:	f101 0518 	add.w	r5, r1, #24
 8006b5e:	bf14      	ite	ne
 8006b60:	555c      	strbne	r4, [r3, r5]
 8006b62:	5563      	strbeq	r3, [r4, r5]
 8006b64:	f101 0519 	add.w	r5, r1, #25
 8006b68:	6a06      	ldr	r6, [r0, #32]
 8006b6a:	7c03      	ldrb	r3, [r0, #16]
 8006b6c:	7c44      	ldrb	r4, [r0, #17]
 8006b6e:	0617      	lsls	r7, r2, #24
 8006b70:	bf54      	ite	pl
 8006b72:	5573      	strbpl	r3, [r6, r5]
 8006b74:	5574      	strbmi	r4, [r6, r5]
 8006b76:	f101 051a 	add.w	r5, r1, #26
 8006b7a:	6a06      	ldr	r6, [r0, #32]
 8006b7c:	0657      	lsls	r7, r2, #25
 8006b7e:	bf54      	ite	pl
 8006b80:	5573      	strbpl	r3, [r6, r5]
 8006b82:	5574      	strbmi	r4, [r6, r5]
 8006b84:	6a06      	ldr	r6, [r0, #32]
 8006b86:	f101 051b 	add.w	r5, r1, #27
 8006b8a:	0697      	lsls	r7, r2, #26
 8006b8c:	bf54      	ite	pl
 8006b8e:	5573      	strbpl	r3, [r6, r5]
 8006b90:	5574      	strbmi	r4, [r6, r5]
 8006b92:	f101 051c 	add.w	r5, r1, #28
 8006b96:	6a06      	ldr	r6, [r0, #32]
 8006b98:	06d7      	lsls	r7, r2, #27
 8006b9a:	bf54      	ite	pl
 8006b9c:	5573      	strbpl	r3, [r6, r5]
 8006b9e:	5574      	strbmi	r4, [r6, r5]
 8006ba0:	f101 051d 	add.w	r5, r1, #29
 8006ba4:	6a06      	ldr	r6, [r0, #32]
 8006ba6:	0717      	lsls	r7, r2, #28
 8006ba8:	bf54      	ite	pl
 8006baa:	5573      	strbpl	r3, [r6, r5]
 8006bac:	5574      	strbmi	r4, [r6, r5]
 8006bae:	f101 051e 	add.w	r5, r1, #30
 8006bb2:	6a06      	ldr	r6, [r0, #32]
 8006bb4:	0757      	lsls	r7, r2, #29
 8006bb6:	bf54      	ite	pl
 8006bb8:	5573      	strbpl	r3, [r6, r5]
 8006bba:	5574      	strbmi	r4, [r6, r5]
 8006bbc:	f101 051f 	add.w	r5, r1, #31
 8006bc0:	6a06      	ldr	r6, [r0, #32]
 8006bc2:	0797      	lsls	r7, r2, #30
 8006bc4:	bf54      	ite	pl
 8006bc6:	5573      	strbpl	r3, [r6, r5]
 8006bc8:	5574      	strbmi	r4, [r6, r5]
 8006bca:	07d2      	lsls	r2, r2, #31
 8006bcc:	f101 0120 	add.w	r1, r1, #32
 8006bd0:	bf4b      	itete	mi
 8006bd2:	6a03      	ldrmi	r3, [r0, #32]
 8006bd4:	6a02      	ldrpl	r2, [r0, #32]
 8006bd6:	545c      	strbmi	r4, [r3, r1]
 8006bd8:	5453      	strbpl	r3, [r2, r1]
 8006bda:	bdf0      	pop	{r4, r5, r6, r7, pc}

08006bdc <WS28xx::~WS28xx()>:
 8006bdc:	4b01      	ldr	r3, [pc, #4]	; (8006be4 <WS28xx::~WS28xx()+0x8>)
 8006bde:	2200      	movs	r2, #0
 8006be0:	601a      	str	r2, [r3, #0]
 8006be2:	4770      	bx	lr
 8006be4:	20001634 	andcs	r1, r0, r4, lsr r6

08006be8 <WS28xx::SetupBuffers()>:
 8006be8:	b513      	push	{r0, r1, r4, lr}
 8006bea:	4604      	mov	r4, r0
 8006bec:	a801      	add	r0, sp, #4
 8006bee:	f002 feff 	bl	80099f0 <gd32_spi_dma_tx_prepare(unsigned long*)>
 8006bf2:	9b01      	ldr	r3, [sp, #4]
 8006bf4:	4a07      	ldr	r2, [pc, #28]	; (8006c14 <WS28xx::SetupBuffers()+0x2c>)
 8006bf6:	6220      	str	r0, [r4, #32]
 8006bf8:	085b      	lsrs	r3, r3, #1
 8006bfa:	f023 0303 	bic.w	r3, r3, #3
 8006bfe:	4418      	add	r0, r3
 8006c00:	69e3      	ldr	r3, [r4, #28]
 8006c02:	6013      	str	r3, [r2, #0]
 8006c04:	3303      	adds	r3, #3
 8006c06:	f023 0303 	bic.w	r3, r3, #3
 8006c0a:	6260      	str	r0, [r4, #36]	; 0x24
 8006c0c:	61e3      	str	r3, [r4, #28]
 8006c0e:	b002      	add	sp, #8
 8006c10:	bd10      	pop	{r4, pc}
 8006c12:	bf00      	nop
 8006c14:	20001630 	andcs	r1, r0, r0, lsr r6

08006c18 <WS28xx::WS28xx(PixelConfiguration&)>:
 8006c18:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006c1a:	23aa      	movs	r3, #170	; 0xaa
 8006c1c:	2203      	movs	r2, #3
 8006c1e:	e9c0 2300 	strd	r2, r3, [r0]
 8006c22:	460f      	mov	r7, r1
 8006c24:	2300      	movs	r3, #0
 8006c26:	2106      	movs	r1, #6
 8006c28:	f44f 027f 	mov.w	r2, #16711680	; 0xff0000
 8006c2c:	6102      	str	r2, [r0, #16]
 8006c2e:	e9c0 1302 	strd	r1, r3, [r0, #8]
 8006c32:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006c36:	8282      	strh	r2, [r0, #20]
 8006c38:	e9c0 3308 	strd	r3, r3, [r0, #32]
 8006c3c:	4a16      	ldr	r2, [pc, #88]	; (8006c98 <WS28xx::WS28xx(PixelConfiguration&)+0x80>)
 8006c3e:	4b17      	ldr	r3, [pc, #92]	; (8006c9c <WS28xx::WS28xx(PixelConfiguration&)+0x84>)
 8006c40:	6182      	str	r2, [r0, #24]
 8006c42:	463e      	mov	r6, r7
 8006c44:	4604      	mov	r4, r0
 8006c46:	6018      	str	r0, [r3, #0]
 8006c48:	4605      	mov	r5, r0
 8006c4a:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8006c4c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006c4e:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 8006c52:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8006c56:	a901      	add	r1, sp, #4
 8006c58:	4638      	mov	r0, r7
 8006c5a:	f7ff f9bb 	bl	8005fd4 <PixelConfiguration::Validate(unsigned long&)>
 8006c5e:	6862      	ldr	r2, [r4, #4]
 8006c60:	9b01      	ldr	r3, [sp, #4]
 8006c62:	7d61      	ldrb	r1, [r4, #21]
 8006c64:	4353      	muls	r3, r2
 8006c66:	61e3      	str	r3, [r4, #28]
 8006c68:	b111      	cbz	r1, 8006c70 <WS28xx::WS28xx(PixelConfiguration&)+0x58>
 8006c6a:	00db      	lsls	r3, r3, #3
 8006c6c:	3301      	adds	r3, #1
 8006c6e:	61e3      	str	r3, [r4, #28]
 8006c70:	6823      	ldr	r3, [r4, #0]
 8006c72:	3b0b      	subs	r3, #11
 8006c74:	2b02      	cmp	r3, #2
 8006c76:	bf9f      	itttt	ls
 8006c78:	69e3      	ldrls	r3, [r4, #28]
 8006c7a:	18d2      	addls	r2, r2, r3
 8006c7c:	3208      	addls	r2, #8
 8006c7e:	61e2      	strls	r2, [r4, #28]
 8006c80:	4620      	mov	r0, r4
 8006c82:	f7ff ffb1 	bl	8006be8 <WS28xx::SetupBuffers()>
 8006c86:	f002 fe2b 	bl	80098e0 <gd32_spi_dma_begin()>
 8006c8a:	68f8      	ldr	r0, [r7, #12]
 8006c8c:	f002 fe9e 	bl	80099cc <gd32_spi_dma_set_speed_hz(unsigned long)>
 8006c90:	4620      	mov	r0, r4
 8006c92:	b003      	add	sp, #12
 8006c94:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006c96:	bf00      	nop
 8006c98:	0800baae 	stmdaeq	r0, {r1, r2, r3, r5, r7, r9, fp, ip, sp, pc}
 8006c9c:	20001634 	andcs	r1, r0, r4, lsr r6

08006ca0 <WS28xx::Update()>:
 8006ca0:	b430      	push	{r4, r5}
 8006ca2:	4b0c      	ldr	r3, [pc, #48]	; (8006cd4 <WS28xx::Update()+0x34>)
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	2200      	movs	r2, #0
 8006ca8:	e9d0 1407 	ldrd	r1, r4, [r0, #28]
 8006cac:	4299      	cmp	r1, r3
 8006cae:	d807      	bhi.n	8006cc0 <WS28xx::Update()+0x20>
 8006cb0:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8006cb2:	084d      	lsrs	r5, r1, #1
 8006cb4:	2300      	movs	r3, #0
 8006cb6:	429d      	cmp	r5, r3
 8006cb8:	d105      	bne.n	8006cc6 <WS28xx::Update()+0x26>
 8006cba:	bc30      	pop	{r4, r5}
 8006cbc:	f002 bea0 	b.w	8009a00 <gd32_spi_dma_tx_start(unsigned char const*, unsigned long)>
 8006cc0:	54e2      	strb	r2, [r4, r3]
 8006cc2:	3301      	adds	r3, #1
 8006cc4:	e7f0      	b.n	8006ca8 <WS28xx::Update()+0x8>
 8006cc6:	f834 2013 	ldrh.w	r2, [r4, r3, lsl #1]
 8006cca:	ba52      	rev16	r2, r2
 8006ccc:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
 8006cd0:	3301      	adds	r3, #1
 8006cd2:	e7f0      	b.n	8006cb6 <WS28xx::Update()+0x16>
 8006cd4:	20001630 	andcs	r1, r0, r0, lsr r6

08006cd8 <WS28xx::Blackout()>:
 8006cd8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8006cdc:	4604      	mov	r4, r0
 8006cde:	f3bf 8f6f 	isb	sy
 8006ce2:	f002 fea7 	bl	8009a34 <gd32_spi_dma_tx_is_active()>
 8006ce6:	2800      	cmp	r0, #0
 8006ce8:	d1f9      	bne.n	8006cde <WS28xx::Blackout()+0x6>
 8006cea:	e9d4 2800 	ldrd	r2, r8, [r4]
 8006cee:	e9d4 6308 	ldrd	r6, r3, [r4, #32]
 8006cf2:	f1a2 070b 	sub.w	r7, r2, #11
 8006cf6:	2f02      	cmp	r7, #2
 8006cf8:	6223      	str	r3, [r4, #32]
 8006cfa:	7018      	strb	r0, [r3, #0]
 8006cfc:	d829      	bhi.n	8006d52 <WS28xx::Blackout()+0x7a>
 8006cfe:	7058      	strb	r0, [r3, #1]
 8006d00:	7098      	strb	r0, [r3, #2]
 8006d02:	70d8      	strb	r0, [r3, #3]
 8006d04:	4605      	mov	r5, r0
 8006d06:	4681      	mov	r9, r0
 8006d08:	4545      	cmp	r5, r8
 8006d0a:	d118      	bne.n	8006d3e <WS28xx::Blackout()+0x66>
 8006d0c:	69e2      	ldr	r2, [r4, #28]
 8006d0e:	6a20      	ldr	r0, [r4, #32]
 8006d10:	3a04      	subs	r2, #4
 8006d12:	1883      	adds	r3, r0, r2
 8006d14:	2f02      	cmp	r7, #2
 8006d16:	bf14      	ite	ne
 8006d18:	21ff      	movne	r1, #255	; 0xff
 8006d1a:	2100      	moveq	r1, #0
 8006d1c:	5481      	strb	r1, [r0, r2]
 8006d1e:	7059      	strb	r1, [r3, #1]
 8006d20:	7099      	strb	r1, [r3, #2]
 8006d22:	70d9      	strb	r1, [r3, #3]
 8006d24:	4620      	mov	r0, r4
 8006d26:	f7ff ffbb 	bl	8006ca0 <WS28xx::Update()>
 8006d2a:	f3bf 8f6f 	isb	sy
 8006d2e:	f002 fe81 	bl	8009a34 <gd32_spi_dma_tx_is_active()>
 8006d32:	2800      	cmp	r0, #0
 8006d34:	d1f9      	bne.n	8006d2a <WS28xx::Blackout()+0x52>
 8006d36:	6226      	str	r6, [r4, #32]
 8006d38:	b003      	add	sp, #12
 8006d3a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006d3e:	2300      	movs	r3, #0
 8006d40:	4629      	mov	r1, r5
 8006d42:	f8cd 9000 	str.w	r9, [sp]
 8006d46:	461a      	mov	r2, r3
 8006d48:	4620      	mov	r0, r4
 8006d4a:	f7ff fd21 	bl	8006790 <WS28xx::SetPixel(unsigned long, unsigned char, unsigned char, unsigned char)>
 8006d4e:	3501      	adds	r5, #1
 8006d50:	e7da      	b.n	8006d08 <WS28xx::Blackout()+0x30>
 8006d52:	6a23      	ldr	r3, [r4, #32]
 8006d54:	b102      	cbz	r2, 8006d58 <WS28xx::Blackout()+0x80>
 8006d56:	7c22      	ldrb	r2, [r4, #16]
 8006d58:	69e1      	ldr	r1, [r4, #28]
 8006d5a:	4419      	add	r1, r3
 8006d5c:	4299      	cmp	r1, r3
 8006d5e:	d0e1      	beq.n	8006d24 <WS28xx::Blackout()+0x4c>
 8006d60:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006d64:	e7fa      	b.n	8006d5c <WS28xx::Blackout()+0x84>

08006d66 <WS28xx::FullOn()>:
 8006d66:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8006d6a:	4604      	mov	r4, r0
 8006d6c:	f3bf 8f6f 	isb	sy
 8006d70:	f002 fe60 	bl	8009a34 <gd32_spi_dma_tx_is_active()>
 8006d74:	2800      	cmp	r0, #0
 8006d76:	d1f9      	bne.n	8006d6c <WS28xx::FullOn()+0x6>
 8006d78:	e9d4 2800 	ldrd	r2, r8, [r4]
 8006d7c:	e9d4 6308 	ldrd	r6, r3, [r4, #32]
 8006d80:	f1a2 070b 	sub.w	r7, r2, #11
 8006d84:	2f02      	cmp	r7, #2
 8006d86:	6223      	str	r3, [r4, #32]
 8006d88:	7018      	strb	r0, [r3, #0]
 8006d8a:	d82a      	bhi.n	8006de2 <WS28xx::FullOn()+0x7c>
 8006d8c:	7058      	strb	r0, [r3, #1]
 8006d8e:	7098      	strb	r0, [r3, #2]
 8006d90:	70d8      	strb	r0, [r3, #3]
 8006d92:	4605      	mov	r5, r0
 8006d94:	f04f 09ff 	mov.w	r9, #255	; 0xff
 8006d98:	4545      	cmp	r5, r8
 8006d9a:	d118      	bne.n	8006dce <WS28xx::FullOn()+0x68>
 8006d9c:	69e2      	ldr	r2, [r4, #28]
 8006d9e:	6a20      	ldr	r0, [r4, #32]
 8006da0:	3a04      	subs	r2, #4
 8006da2:	1883      	adds	r3, r0, r2
 8006da4:	2f02      	cmp	r7, #2
 8006da6:	bf14      	ite	ne
 8006da8:	21ff      	movne	r1, #255	; 0xff
 8006daa:	2100      	moveq	r1, #0
 8006dac:	5481      	strb	r1, [r0, r2]
 8006dae:	7059      	strb	r1, [r3, #1]
 8006db0:	7099      	strb	r1, [r3, #2]
 8006db2:	70d9      	strb	r1, [r3, #3]
 8006db4:	4620      	mov	r0, r4
 8006db6:	f7ff ff73 	bl	8006ca0 <WS28xx::Update()>
 8006dba:	f3bf 8f6f 	isb	sy
 8006dbe:	f002 fe39 	bl	8009a34 <gd32_spi_dma_tx_is_active()>
 8006dc2:	2800      	cmp	r0, #0
 8006dc4:	d1f9      	bne.n	8006dba <WS28xx::FullOn()+0x54>
 8006dc6:	6226      	str	r6, [r4, #32]
 8006dc8:	b003      	add	sp, #12
 8006dca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006dce:	23ff      	movs	r3, #255	; 0xff
 8006dd0:	4629      	mov	r1, r5
 8006dd2:	f8cd 9000 	str.w	r9, [sp]
 8006dd6:	461a      	mov	r2, r3
 8006dd8:	4620      	mov	r0, r4
 8006dda:	f7ff fcd9 	bl	8006790 <WS28xx::SetPixel(unsigned long, unsigned char, unsigned char, unsigned char)>
 8006dde:	3501      	adds	r5, #1
 8006de0:	e7da      	b.n	8006d98 <WS28xx::FullOn()+0x32>
 8006de2:	6a23      	ldr	r3, [r4, #32]
 8006de4:	b13a      	cbz	r2, 8006df6 <WS28xx::FullOn()+0x90>
 8006de6:	7c61      	ldrb	r1, [r4, #17]
 8006de8:	69e2      	ldr	r2, [r4, #28]
 8006dea:	441a      	add	r2, r3
 8006dec:	429a      	cmp	r2, r3
 8006dee:	d0e1      	beq.n	8006db4 <WS28xx::FullOn()+0x4e>
 8006df0:	f803 1f01 	strb.w	r1, [r3, #1]!
 8006df4:	e7fa      	b.n	8006dec <WS28xx::FullOn()+0x86>
 8006df6:	21ff      	movs	r1, #255	; 0xff
 8006df8:	e7f6      	b.n	8006de8 <WS28xx::FullOn()+0x82>
	...

08006dfc <Network::Network()>:
 8006dfc:	4b05      	ldr	r3, [pc, #20]	; (8006e14 <Network::Network()+0x18>)
 8006dfe:	4906      	ldr	r1, [pc, #24]	; (8006e18 <Network::Network()+0x1c>)
 8006e00:	6018      	str	r0, [r3, #0]
 8006e02:	1e42      	subs	r2, r0, #1
 8006e04:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006e08:	f802 3f01 	strb.w	r3, [r2, #1]!
 8006e0c:	2b00      	cmp	r3, #0
 8006e0e:	d1f9      	bne.n	8006e04 <Network::Network()+0x8>
 8006e10:	4770      	bx	lr
 8006e12:	bf00      	nop
 8006e14:	20001638 	andcs	r1, r0, r8, lsr r6
 8006e18:	0800bbae 	stmdaeq	r0, {r1, r2, r3, r5, r7, r8, r9, fp, ip, sp, pc}

08006e1c <Network::MacAddressCopyTo(unsigned char*)>:
 8006e1c:	4608      	mov	r0, r1
 8006e1e:	f002 beeb 	b.w	8009bf8 <mac_address_get(unsigned char*)>

08006e22 <Display::Write(unsigned long, char const*) [clone .isra.0]>:
 8006e22:	b430      	push	{r4, r5}
 8006e24:	b160      	cbz	r0, 8006e40 <Display::Write(unsigned long, char const*) [clone .isra.0]+0x1e>
 8006e26:	6845      	ldr	r5, [r0, #4]
 8006e28:	2300      	movs	r3, #0
 8006e2a:	5cd4      	ldrb	r4, [r2, r3]
 8006e2c:	b11c      	cbz	r4, 8006e36 <Display::Write(unsigned long, char const*) [clone .isra.0]+0x14>
 8006e2e:	1c5c      	adds	r4, r3, #1
 8006e30:	429d      	cmp	r5, r3
 8006e32:	4623      	mov	r3, r4
 8006e34:	d8f9      	bhi.n	8006e2a <Display::Write(unsigned long, char const*) [clone .isra.0]+0x8>
 8006e36:	6804      	ldr	r4, [r0, #0]
 8006e38:	69e4      	ldr	r4, [r4, #28]
 8006e3a:	46a4      	mov	ip, r4
 8006e3c:	bc30      	pop	{r4, r5}
 8006e3e:	4760      	bx	ip
 8006e40:	bc30      	pop	{r4, r5}
 8006e42:	4770      	bx	lr

08006e44 <DisplayUdf::DisplayUdf()>:
 8006e44:	b510      	push	{r4, lr}
 8006e46:	4604      	mov	r4, r0
 8006e48:	f000 fdec 	bl	8007a24 <Display::Display()>
 8006e4c:	4b05      	ldr	r3, [pc, #20]	; (8006e64 <DisplayUdf::DisplayUdf()+0x20>)
 8006e4e:	f104 023f 	add.w	r2, r4, #63	; 0x3f
 8006e52:	601c      	str	r4, [r3, #0]
 8006e54:	2301      	movs	r3, #1
 8006e56:	f802 3f01 	strb.w	r3, [r2, #1]!
 8006e5a:	3301      	adds	r3, #1
 8006e5c:	2b15      	cmp	r3, #21
 8006e5e:	d1fa      	bne.n	8006e56 <DisplayUdf::DisplayUdf()+0x12>
 8006e60:	4620      	mov	r0, r4
 8006e62:	bd10      	pop	{r4, pc}
 8006e64:	2000163c 	andcs	r1, r0, ip, lsr r6

08006e68 <DisplayUdf::SetTitle(char const*, ...)>:
 8006e68:	b40e      	push	{r1, r2, r3}
 8006e6a:	b517      	push	{r0, r1, r2, r4, lr}
 8006e6c:	ab05      	add	r3, sp, #20
 8006e6e:	4604      	mov	r4, r0
 8006e70:	f853 2b04 	ldr.w	r2, [r3], #4
 8006e74:	9301      	str	r3, [sp, #4]
 8006e76:	211f      	movs	r1, #31
 8006e78:	3020      	adds	r0, #32
 8006e7a:	f7fa ff1f 	bl	8001cbc <vsnprintf>
 8006e7e:	4420      	add	r0, r4
 8006e80:	2300      	movs	r3, #0
 8006e82:	f880 3020 	strb.w	r3, [r0, #32]
 8006e86:	b003      	add	sp, #12
 8006e88:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006e8c:	b003      	add	sp, #12
 8006e8e:	4770      	bx	lr

08006e90 <DisplayUdf::Set(unsigned long, displayudf::Labels)>:
 8006e90:	1e4b      	subs	r3, r1, #1
 8006e92:	2b05      	cmp	r3, #5
 8006e94:	b530      	push	{r4, r5, lr}
 8006e96:	d810      	bhi.n	8006eba <DisplayUdf::Set(unsigned long, displayudf::Labels)+0x2a>
 8006e98:	f100 043f 	add.w	r4, r0, #63	; 0x3f
 8006e9c:	2300      	movs	r3, #0
 8006e9e:	b2c9      	uxtb	r1, r1
 8006ea0:	f814 5f01 	ldrb.w	r5, [r4, #1]!
 8006ea4:	428d      	cmp	r5, r1
 8006ea6:	d109      	bne.n	8006ebc <DisplayUdf::Set(unsigned long, displayudf::Labels)+0x2c>
 8006ea8:	1884      	adds	r4, r0, r2
 8006eaa:	4403      	add	r3, r0
 8006eac:	f894 4040 	ldrb.w	r4, [r4, #64]	; 0x40
 8006eb0:	f883 4040 	strb.w	r4, [r3, #64]	; 0x40
 8006eb4:	4402      	add	r2, r0
 8006eb6:	f882 1040 	strb.w	r1, [r2, #64]	; 0x40
 8006eba:	bd30      	pop	{r4, r5, pc}
 8006ebc:	3301      	adds	r3, #1
 8006ebe:	2b14      	cmp	r3, #20
 8006ec0:	d1ee      	bne.n	8006ea0 <DisplayUdf::Set(unsigned long, displayudf::Labels)+0x10>
 8006ec2:	e7f7      	b.n	8006eb4 <DisplayUdf::Set(unsigned long, displayudf::Labels)+0x24>

08006ec4 <DisplayUdf::Show()>:
 8006ec4:	b513      	push	{r0, r1, r4, lr}
 8006ec6:	f100 033f 	add.w	r3, r0, #63	; 0x3f
 8006eca:	4604      	mov	r4, r0
 8006ecc:	f100 0253 	add.w	r2, r0, #83	; 0x53
 8006ed0:	21ff      	movs	r1, #255	; 0xff
 8006ed2:	f813 0f01 	ldrb.w	r0, [r3, #1]!
 8006ed6:	2806      	cmp	r0, #6
 8006ed8:	bf88      	it	hi
 8006eda:	7019      	strbhi	r1, [r3, #0]
 8006edc:	4293      	cmp	r3, r2
 8006ede:	d1f8      	bne.n	8006ed2 <DisplayUdf::Show()+0xe>
 8006ee0:	69e0      	ldr	r0, [r4, #28]
 8006ee2:	b108      	cbz	r0, 8006ee8 <DisplayUdf::Show()+0x24>
 8006ee4:	2301      	movs	r3, #1
 8006ee6:	7303      	strb	r3, [r0, #12]
 8006ee8:	f894 1040 	ldrb.w	r1, [r4, #64]	; 0x40
 8006eec:	f104 0220 	add.w	r2, r4, #32
 8006ef0:	f7ff ff97 	bl	8006e22 <Display::Write(unsigned long, char const*) [clone .isra.0]>
 8006ef4:	69e0      	ldr	r0, [r4, #28]
 8006ef6:	b108      	cbz	r0, 8006efc <DisplayUdf::Show()+0x38>
 8006ef8:	2301      	movs	r3, #1
 8006efa:	7303      	strb	r3, [r0, #12]
 8006efc:	4a15      	ldr	r2, [pc, #84]	; (8006f54 <DisplayUdf::Show()+0x90>)
 8006efe:	f894 1041 	ldrb.w	r1, [r4, #65]	; 0x41
 8006f02:	f7ff ff8e 	bl	8006e22 <Display::Write(unsigned long, char const*) [clone .isra.0]>
 8006f06:	69e3      	ldr	r3, [r4, #28]
 8006f08:	b10b      	cbz	r3, 8006f0e <DisplayUdf::Show()+0x4a>
 8006f0a:	2201      	movs	r2, #1
 8006f0c:	731a      	strb	r2, [r3, #12]
 8006f0e:	4b12      	ldr	r3, [pc, #72]	; (8006f58 <DisplayUdf::Show()+0x94>)
 8006f10:	f894 1043 	ldrb.w	r1, [r4, #67]	; 0x43
 8006f14:	9300      	str	r3, [sp, #0]
 8006f16:	4a11      	ldr	r2, [pc, #68]	; (8006f5c <DisplayUdf::Show()+0x98>)
 8006f18:	2303      	movs	r3, #3
 8006f1a:	4620      	mov	r0, r4
 8006f1c:	f7f9 fe05 	bl	8000b2a <Display::Printf(unsigned long, char const*, ...)>
 8006f20:	4b0f      	ldr	r3, [pc, #60]	; (8006f60 <DisplayUdf::Show()+0x9c>)
 8006f22:	681a      	ldr	r2, [r3, #0]
 8006f24:	f892 1083 	ldrb.w	r1, [r2, #131]	; 0x83
 8006f28:	f892 3084 	ldrb.w	r3, [r2, #132]	; 0x84
 8006f2c:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 8006f30:	f892 107f 	ldrb.w	r1, [r2, #127]	; 0x7f
 8006f34:	f892 2080 	ldrb.w	r2, [r2, #128]	; 0x80
 8006f38:	eb02 2201 	add.w	r2, r2, r1, lsl #8
 8006f3c:	b292      	uxth	r2, r2
 8006f3e:	9200      	str	r2, [sp, #0]
 8006f40:	f894 104d 	ldrb.w	r1, [r4, #77]	; 0x4d
 8006f44:	4a07      	ldr	r2, [pc, #28]	; (8006f64 <DisplayUdf::Show()+0xa0>)
 8006f46:	b29b      	uxth	r3, r3
 8006f48:	4620      	mov	r0, r4
 8006f4a:	f7f9 fdee 	bl	8000b2a <Display::Printf(unsigned long, char const*, ...)>
 8006f4e:	b002      	add	sp, #8
 8006f50:	bd10      	pop	{r4, pc}
 8006f52:	bf00      	nop
 8006f54:	0800a598 	stmdaeq	r0, {r3, r4, r7, r8, sl, sp, pc}
 8006f58:	20002714 	andcs	r2, r0, r4, lsl r7
 8006f5c:	0800bbb1 	stmdaeq	r0, {r0, r4, r5, r7, r8, r9, fp, ip, sp, pc}
 8006f60:	20001190 	mulcs	r0, r0, r1
 8006f64:	0800bbc0 	stmdaeq	r0, {r6, r7, r8, r9, fp, ip, sp, pc}

08006f68 <DisplayUdfParams::DisplayUdfParams(DisplayUdfParamsStore*)>:
 8006f68:	b510      	push	{r4, lr}
 8006f6a:	2220      	movs	r2, #32
 8006f6c:	4604      	mov	r4, r0
 8006f6e:	f840 1b04 	str.w	r1, [r0], #4
 8006f72:	2100      	movs	r1, #0
 8006f74:	f001 fb75 	bl	8008662 <memset>
 8006f78:	f647 7305 	movw	r3, #32517	; 0x7f05
 8006f7c:	84a3      	strh	r3, [r4, #36]	; 0x24
 8006f7e:	4620      	mov	r0, r4
 8006f80:	bd10      	pop	{r4, pc}

08006f82 <DisplayUdfParams::Load()>:
 8006f82:	b508      	push	{r3, lr}
 8006f84:	2300      	movs	r3, #0
 8006f86:	4601      	mov	r1, r0
 8006f88:	6043      	str	r3, [r0, #4]
 8006f8a:	6800      	ldr	r0, [r0, #0]
 8006f8c:	b120      	cbz	r0, 8006f98 <DisplayUdfParams::Load()+0x16>
 8006f8e:	6803      	ldr	r3, [r0, #0]
 8006f90:	3104      	adds	r1, #4
 8006f92:	68db      	ldr	r3, [r3, #12]
 8006f94:	4798      	blx	r3
 8006f96:	2001      	movs	r0, #1
 8006f98:	bd08      	pop	{r3, pc}

08006f9a <DisplayUdfParams::Set(DisplayUdf*)>:
 8006f9a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006f9e:	4604      	mov	r4, r0
 8006fa0:	460d      	mov	r5, r1
 8006fa2:	6863      	ldr	r3, [r4, #4]
 8006fa4:	69c8      	ldr	r0, [r1, #28]
 8006fa6:	009a      	lsls	r2, r3, #2
 8006fa8:	d506      	bpl.n	8006fb8 <DisplayUdfParams::Set(DisplayUdf*)+0x1e>
 8006faa:	f894 1025 	ldrb.w	r1, [r4, #37]	; 0x25
 8006fae:	7629      	strb	r1, [r5, #24]
 8006fb0:	b110      	cbz	r0, 8006fb8 <DisplayUdfParams::Set(DisplayUdf*)+0x1e>
 8006fb2:	6803      	ldr	r3, [r0, #0]
 8006fb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fb6:	4798      	blx	r3
 8006fb8:	6863      	ldr	r3, [r4, #4]
 8006fba:	69e8      	ldr	r0, [r5, #28]
 8006fbc:	00db      	lsls	r3, r3, #3
 8006fbe:	bf41      	itttt	mi
 8006fc0:	f894 3024 	ldrbmi.w	r3, [r4, #36]	; 0x24
 8006fc4:	f64e 2260 	movwmi	r2, #60000	; 0xea60
 8006fc8:	4353      	mulmi	r3, r2
 8006fca:	616b      	strmi	r3, [r5, #20]
 8006fcc:	6861      	ldr	r1, [r4, #4]
 8006fce:	f3c1 7180 	ubfx	r1, r1, #30, #1
 8006fd2:	7669      	strb	r1, [r5, #25]
 8006fd4:	b110      	cbz	r0, 8006fdc <DisplayUdfParams::Set(DisplayUdf*)+0x42>
 8006fd6:	6803      	ldr	r3, [r0, #0]
 8006fd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006fda:	4798      	blx	r3
 8006fdc:	2600      	movs	r6, #0
 8006fde:	2701      	movs	r7, #1
 8006fe0:	f104 0808 	add.w	r8, r4, #8
 8006fe4:	6862      	ldr	r2, [r4, #4]
 8006fe6:	fa07 f306 	lsl.w	r3, r7, r6
 8006fea:	4393      	bics	r3, r2
 8006fec:	d105      	bne.n	8006ffa <DisplayUdfParams::Set(DisplayUdf*)+0x60>
 8006fee:	f818 1006 	ldrb.w	r1, [r8, r6]
 8006ff2:	4632      	mov	r2, r6
 8006ff4:	4628      	mov	r0, r5
 8006ff6:	f7ff ff4b 	bl	8006e90 <DisplayUdf::Set(unsigned long, displayudf::Labels)>
 8006ffa:	3601      	adds	r6, #1
 8006ffc:	2e14      	cmp	r6, #20
 8006ffe:	d1f1      	bne.n	8006fe4 <DisplayUdfParams::Set(DisplayUdf*)+0x4a>
 8007000:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08007004 <DisplayUdfParams::Dump()>:
 8007004:	4770      	bx	lr
	...

08007008 <configstore::delay()>:
 8007008:	4b01      	ldr	r3, [pc, #4]	; (8007010 <configstore::delay()+0x8>)
 800700a:	6818      	ldr	r0, [r3, #0]
 800700c:	f000 b8d8 	b.w	80071c0 <ConfigStore::Delay()>
 8007010:	20002654 	andcs	r2, r0, r4, asr r6

08007014 <ConfigStore::ConfigStore()>:
 8007014:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8007016:	4604      	mov	r4, r0
 8007018:	f000 f964 	bl	80072e4 <StoreDevice::StoreDevice()>
 800701c:	4b22      	ldr	r3, [pc, #136]	; (80070a8 <ConfigStore::ConfigStore()+0x94>)
 800701e:	4e23      	ldr	r6, [pc, #140]	; (80070ac <ConfigStore::ConfigStore()+0x98>)
 8007020:	601c      	str	r4, [r3, #0]
 8007022:	4620      	mov	r0, r4
 8007024:	7863      	ldrb	r3, [r4, #1]
 8007026:	7033      	strb	r3, [r6, #0]
 8007028:	f000 f966 	bl	80072f8 <StoreDevice::GetSectorSize() const>
 800702c:	4605      	mov	r5, r0
 800702e:	4620      	mov	r0, r4
 8007030:	f000 f960 	bl	80072f4 <StoreDevice::GetSize() const>
 8007034:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8007038:	fbb2 f3f5 	udiv	r3, r2, r5
 800703c:	fb05 0113 	mls	r1, r5, r3, r0
 8007040:	4b1b      	ldr	r3, [pc, #108]	; (80070b0 <ConfigStore::ConfigStore()+0x9c>)
 8007042:	6019      	str	r1, [r3, #0]
 8007044:	7833      	ldrb	r3, [r6, #0]
 8007046:	b12b      	cbz	r3, 8007054 <ConfigStore::ConfigStore()+0x40>
 8007048:	ab03      	add	r3, sp, #12
 800704a:	9300      	str	r3, [sp, #0]
 800704c:	4620      	mov	r0, r4
 800704e:	4b19      	ldr	r3, [pc, #100]	; (80070b4 <ConfigStore::ConfigStore()+0xa0>)
 8007050:	f000 f954 	bl	80072fc <StoreDevice::Read(unsigned long, unsigned long, unsigned char*, storedevice::result&)>
 8007054:	4818      	ldr	r0, [pc, #96]	; (80070b8 <ConfigStore::ConfigStore()+0xa4>)
 8007056:	4a17      	ldr	r2, [pc, #92]	; (80070b4 <ConfigStore::ConfigStore()+0xa0>)
 8007058:	2304      	movs	r3, #4
 800705a:	2101      	movs	r1, #1
 800705c:	f810 5b01 	ldrb.w	r5, [r0], #1
 8007060:	f812 6b01 	ldrb.w	r6, [r2], #1
 8007064:	42b5      	cmp	r5, r6
 8007066:	bf1c      	itt	ne
 8007068:	f802 5c01 	strbne.w	r5, [r2, #-1]
 800706c:	2100      	movne	r1, #0
 800706e:	3b01      	subs	r3, #1
 8007070:	d1f4      	bne.n	800705c <ConfigStore::ConfigStore()+0x48>
 8007072:	b941      	cbnz	r1, 8007086 <ConfigStore::ConfigStore()+0x72>
 8007074:	4911      	ldr	r1, [pc, #68]	; (80070bc <ConfigStore::ConfigStore()+0xa8>)
 8007076:	f640 72e1 	movw	r2, #4065	; 0xfe1
 800707a:	4618      	mov	r0, r3
 800707c:	3a01      	subs	r2, #1
 800707e:	d10f      	bne.n	80070a0 <ConfigStore::ConfigStore()+0x8c>
 8007080:	4a0f      	ldr	r2, [pc, #60]	; (80070c0 <ConfigStore::ConfigStore()+0xac>)
 8007082:	2101      	movs	r1, #1
 8007084:	6011      	str	r1, [r2, #0]
 8007086:	490f      	ldr	r1, [pc, #60]	; (80070c4 <ConfigStore::ConfigStore()+0xb0>)
 8007088:	2220      	movs	r2, #32
 800708a:	f851 0b04 	ldr.w	r0, [r1], #4
 800708e:	3301      	adds	r3, #1
 8007090:	2b1a      	cmp	r3, #26
 8007092:	4402      	add	r2, r0
 8007094:	d1f9      	bne.n	800708a <ConfigStore::ConfigStore()+0x76>
 8007096:	4b0c      	ldr	r3, [pc, #48]	; (80070c8 <ConfigStore::ConfigStore()+0xb4>)
 8007098:	4620      	mov	r0, r4
 800709a:	601a      	str	r2, [r3, #0]
 800709c:	b004      	add	sp, #16
 800709e:	bd70      	pop	{r4, r5, r6, pc}
 80070a0:	f801 0b01 	strb.w	r0, [r1], #1
 80070a4:	e7ea      	b.n	800707c <ConfigStore::ConfigStore()+0x68>
 80070a6:	bf00      	nop
 80070a8:	20002654 	andcs	r2, r0, r4, asr r6
 80070ac:	20002648 	andcs	r2, r0, r8, asr #12
 80070b0:	20002644 	andcs	r2, r0, r4, asr #12
 80070b4:	20001644 	andcs	r1, r0, r4, asr #12
 80070b8:	0800bc38 	stmdaeq	r0, {r3, r4, r5, sl, fp, ip, sp, pc}
 80070bc:	20001664 	andcs	r1, r0, r4, ror #12
 80070c0:	20002650 	andcs	r2, r0, r0, asr r6
 80070c4:	0800bbd0 	stmdaeq	r0, {r4, r6, r7, r8, r9, fp, ip, sp, pc}
 80070c8:	2000264c 	andcs	r2, r0, ip, asr #12

080070cc <ConfigStore::GetStoreOffset(configstore::Store)>:
 80070cc:	b510      	push	{r4, lr}
 80070ce:	4a05      	ldr	r2, [pc, #20]	; (80070e4 <ConfigStore::GetStoreOffset(configstore::Store)+0x18>)
 80070d0:	2300      	movs	r3, #0
 80070d2:	2020      	movs	r0, #32
 80070d4:	428b      	cmp	r3, r1
 80070d6:	d100      	bne.n	80070da <ConfigStore::GetStoreOffset(configstore::Store)+0xe>
 80070d8:	bd10      	pop	{r4, pc}
 80070da:	f852 4b04 	ldr.w	r4, [r2], #4
 80070de:	3301      	adds	r3, #1
 80070e0:	4420      	add	r0, r4
 80070e2:	e7f7      	b.n	80070d4 <ConfigStore::GetStoreOffset(configstore::Store)+0x8>
 80070e4:	0800bbd0 	stmdaeq	r0, {r4, r6, r7, r8, r9, fp, ip, sp, pc}

080070e8 <ConfigStore::ResetSetList(configstore::Store)>:
 80070e8:	b508      	push	{r3, lr}
 80070ea:	f7ff ffef 	bl	80070cc <ConfigStore::GetStoreOffset(configstore::Store)>
 80070ee:	4905      	ldr	r1, [pc, #20]	; (8007104 <ConfigStore::ResetSetList(configstore::Store)+0x1c>)
 80070f0:	1842      	adds	r2, r0, r1
 80070f2:	2300      	movs	r3, #0
 80070f4:	540b      	strb	r3, [r1, r0]
 80070f6:	7053      	strb	r3, [r2, #1]
 80070f8:	7093      	strb	r3, [r2, #2]
 80070fa:	70d3      	strb	r3, [r2, #3]
 80070fc:	4b02      	ldr	r3, [pc, #8]	; (8007108 <ConfigStore::ResetSetList(configstore::Store)+0x20>)
 80070fe:	2201      	movs	r2, #1
 8007100:	601a      	str	r2, [r3, #0]
 8007102:	bd08      	pop	{r3, pc}
 8007104:	20001644 	andcs	r1, r0, r4, asr #12
 8007108:	20002650 	andcs	r2, r0, r0, asr r6

0800710c <ConfigStore::Update(configstore::Store, unsigned long, void const*, unsigned long, unsigned long, unsigned long)>:
 800710c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800710e:	4616      	mov	r6, r2
 8007110:	461c      	mov	r4, r3
 8007112:	f7ff ffdb 	bl	80070cc <ConfigStore::GetStoreOffset(configstore::Store)>
 8007116:	4f12      	ldr	r7, [pc, #72]	; (8007160 <ConfigStore::Update(configstore::Store, unsigned long, void const*, unsigned long, unsigned long, unsigned long)+0x54>)
 8007118:	9a06      	ldr	r2, [sp, #24]
 800711a:	9d07      	ldr	r5, [sp, #28]
 800711c:	1981      	adds	r1, r0, r6
 800711e:	4439      	add	r1, r7
 8007120:	1e63      	subs	r3, r4, #1
 8007122:	188c      	adds	r4, r1, r2
 8007124:	2200      	movs	r2, #0
 8007126:	42a1      	cmp	r1, r4
 8007128:	d10b      	bne.n	8007142 <ConfigStore::Update(configstore::Store, unsigned long, void const*, unsigned long, unsigned long, unsigned long)+0x36>
 800712a:	b1ae      	cbz	r6, 8007158 <ConfigStore::Update(configstore::Store, unsigned long, void const*, unsigned long, unsigned long, unsigned long)+0x4c>
 800712c:	b1b2      	cbz	r2, 800715c <ConfigStore::Update(configstore::Store, unsigned long, void const*, unsigned long, unsigned long, unsigned long)+0x50>
 800712e:	b125      	cbz	r5, 800713a <ConfigStore::Update(configstore::Store, unsigned long, void const*, unsigned long, unsigned long, unsigned long)+0x2e>
 8007130:	9b08      	ldr	r3, [sp, #32]
 8007132:	4418      	add	r0, r3
 8007134:	583b      	ldr	r3, [r7, r0]
 8007136:	432b      	orrs	r3, r5
 8007138:	503b      	str	r3, [r7, r0]
 800713a:	4b0a      	ldr	r3, [pc, #40]	; (8007164 <ConfigStore::Update(configstore::Store, unsigned long, void const*, unsigned long, unsigned long, unsigned long)+0x58>)
 800713c:	2201      	movs	r2, #1
 800713e:	601a      	str	r2, [r3, #0]
 8007140:	e00c      	b.n	800715c <ConfigStore::Update(configstore::Store, unsigned long, void const*, unsigned long, unsigned long, unsigned long)+0x50>
 8007142:	f891 e000 	ldrb.w	lr, [r1]
 8007146:	f813 cf01 	ldrb.w	ip, [r3, #1]!
 800714a:	45e6      	cmp	lr, ip
 800714c:	bf1c      	itt	ne
 800714e:	f881 c000 	strbne.w	ip, [r1]
 8007152:	2201      	movne	r2, #1
 8007154:	3101      	adds	r1, #1
 8007156:	e7e6      	b.n	8007126 <ConfigStore::Update(configstore::Store, unsigned long, void const*, unsigned long, unsigned long, unsigned long)+0x1a>
 8007158:	2a00      	cmp	r2, #0
 800715a:	d1ee      	bne.n	800713a <ConfigStore::Update(configstore::Store, unsigned long, void const*, unsigned long, unsigned long, unsigned long)+0x2e>
 800715c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800715e:	bf00      	nop
 8007160:	20001644 	andcs	r1, r0, r4, asr #12
 8007164:	20002650 	andcs	r2, r0, r0, asr r6

08007168 <ConfigStore::Copy(configstore::Store, void*, unsigned long, unsigned long)>:
 8007168:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 800716c:	461e      	mov	r6, r3
 800716e:	4615      	mov	r5, r2
 8007170:	4607      	mov	r7, r0
 8007172:	f7ff ffab 	bl	80070cc <ConfigStore::GetStoreOffset(configstore::Store)>
 8007176:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007178:	18c4      	adds	r4, r0, r3
 800717a:	4b10      	ldr	r3, [pc, #64]	; (80071bc <ConfigStore::Copy(configstore::Store, void*, unsigned long, unsigned long)+0x54>)
 800717c:	441c      	add	r4, r3
 800717e:	4688      	mov	r8, r1
 8007180:	4623      	mov	r3, r4
 8007182:	1932      	adds	r2, r6, r4
 8007184:	4293      	cmp	r3, r2
 8007186:	d109      	bne.n	800719c <ConfigStore::Copy(configstore::Store, void*, unsigned long, unsigned long)+0x34>
 8007188:	2200      	movs	r2, #0
 800718a:	e9cd 2201 	strd	r2, r2, [sp, #4]
 800718e:	9600      	str	r6, [sp, #0]
 8007190:	462b      	mov	r3, r5
 8007192:	4641      	mov	r1, r8
 8007194:	4638      	mov	r0, r7
 8007196:	f7ff ffb9 	bl	800710c <ConfigStore::Update(configstore::Store, unsigned long, void const*, unsigned long, unsigned long, unsigned long)>
 800719a:	e006      	b.n	80071aa <ConfigStore::Copy(configstore::Store, void*, unsigned long, unsigned long)+0x42>
 800719c:	f813 1b01 	ldrb.w	r1, [r3], #1
 80071a0:	2900      	cmp	r1, #0
 80071a2:	d0ef      	beq.n	8007184 <ConfigStore::Copy(configstore::Store, void*, unsigned long, unsigned long)+0x1c>
 80071a4:	3d01      	subs	r5, #1
 80071a6:	4294      	cmp	r4, r2
 80071a8:	d102      	bne.n	80071b0 <ConfigStore::Copy(configstore::Store, void*, unsigned long, unsigned long)+0x48>
 80071aa:	b004      	add	sp, #16
 80071ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80071b0:	f814 3b01 	ldrb.w	r3, [r4], #1
 80071b4:	f805 3f01 	strb.w	r3, [r5, #1]!
 80071b8:	e7f5      	b.n	80071a6 <ConfigStore::Copy(configstore::Store, void*, unsigned long, unsigned long)+0x3e>
 80071ba:	bf00      	nop
 80071bc:	20001644 	andcs	r1, r0, r4, asr #12

080071c0 <ConfigStore::Delay()>:
 80071c0:	4b02      	ldr	r3, [pc, #8]	; (80071cc <ConfigStore::Delay()+0xc>)
 80071c2:	681a      	ldr	r2, [r3, #0]
 80071c4:	b10a      	cbz	r2, 80071ca <ConfigStore::Delay()+0xa>
 80071c6:	2201      	movs	r2, #1
 80071c8:	601a      	str	r2, [r3, #0]
 80071ca:	4770      	bx	lr
 80071cc:	20002650 	andcs	r2, r0, r0, asr r6

080071d0 <ConfigStore::Flash()>:
 80071d0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80071d2:	4c24      	ldr	r4, [pc, #144]	; (8007264 <ConfigStore::Flash()+0x94>)
 80071d4:	6823      	ldr	r3, [r4, #0]
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	d041      	beq.n	800725e <ConfigStore::Flash()+0x8e>
 80071da:	3b01      	subs	r3, #1
 80071dc:	2b05      	cmp	r3, #5
 80071de:	d82f      	bhi.n	8007240 <ConfigStore::Flash()+0x70>
 80071e0:	e8df f003 	tbb	[pc, r3]
 80071e4:	2c140b03 			; <UNDEFINED> instruction: 0x2c140b03
 80071e8:	4b1f2e23 	blmi	87d2a7c <_sidata+0x7c690c>
 80071ec:	681a      	ldr	r2, [r3, #0]
 80071ee:	4b1f      	ldr	r3, [pc, #124]	; (800726c <ConfigStore::Flash()+0x9c>)
 80071f0:	601a      	str	r2, [r3, #0]
 80071f2:	2302      	movs	r3, #2
 80071f4:	6023      	str	r3, [r4, #0]
 80071f6:	2001      	movs	r0, #1
 80071f8:	e02f      	b.n	800725a <ConfigStore::Flash()+0x8a>
 80071fa:	4b1b      	ldr	r3, [pc, #108]	; (8007268 <ConfigStore::Flash()+0x98>)
 80071fc:	4a1b      	ldr	r2, [pc, #108]	; (800726c <ConfigStore::Flash()+0x9c>)
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	6812      	ldr	r2, [r2, #0]
 8007202:	1a9b      	subs	r3, r3, r2
 8007204:	2b63      	cmp	r3, #99	; 0x63
 8007206:	d9f6      	bls.n	80071f6 <ConfigStore::Flash()+0x26>
 8007208:	2303      	movs	r3, #3
 800720a:	e7f3      	b.n	80071f4 <ConfigStore::Flash()+0x24>
 800720c:	4918      	ldr	r1, [pc, #96]	; (8007270 <ConfigStore::Flash()+0xa0>)
 800720e:	ab03      	add	r3, sp, #12
 8007210:	6809      	ldr	r1, [r1, #0]
 8007212:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8007216:	f000 f87b 	bl	8007310 <StoreDevice::Erase(unsigned long, unsigned long, storedevice::result&)>
 800721a:	2800      	cmp	r0, #0
 800721c:	d0eb      	beq.n	80071f6 <ConfigStore::Flash()+0x26>
 800721e:	4b12      	ldr	r3, [pc, #72]	; (8007268 <ConfigStore::Flash()+0x98>)
 8007220:	681a      	ldr	r2, [r3, #0]
 8007222:	4b12      	ldr	r3, [pc, #72]	; (800726c <ConfigStore::Flash()+0x9c>)
 8007224:	601a      	str	r2, [r3, #0]
 8007226:	2305      	movs	r3, #5
 8007228:	e7e4      	b.n	80071f4 <ConfigStore::Flash()+0x24>
 800722a:	4b0f      	ldr	r3, [pc, #60]	; (8007268 <ConfigStore::Flash()+0x98>)
 800722c:	4a0f      	ldr	r2, [pc, #60]	; (800726c <ConfigStore::Flash()+0x9c>)
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	6812      	ldr	r2, [r2, #0]
 8007232:	1a9b      	subs	r3, r3, r2
 8007234:	2b63      	cmp	r3, #99	; 0x63
 8007236:	d9de      	bls.n	80071f6 <ConfigStore::Flash()+0x26>
 8007238:	2304      	movs	r3, #4
 800723a:	e7db      	b.n	80071f4 <ConfigStore::Flash()+0x24>
 800723c:	2306      	movs	r3, #6
 800723e:	e7d9      	b.n	80071f4 <ConfigStore::Flash()+0x24>
 8007240:	ab03      	add	r3, sp, #12
 8007242:	4a0c      	ldr	r2, [pc, #48]	; (8007274 <ConfigStore::Flash()+0xa4>)
 8007244:	490a      	ldr	r1, [pc, #40]	; (8007270 <ConfigStore::Flash()+0xa0>)
 8007246:	9300      	str	r3, [sp, #0]
 8007248:	6812      	ldr	r2, [r2, #0]
 800724a:	4b0b      	ldr	r3, [pc, #44]	; (8007278 <ConfigStore::Flash()+0xa8>)
 800724c:	6809      	ldr	r1, [r1, #0]
 800724e:	f000 f868 	bl	8007322 <StoreDevice::Write(unsigned long, unsigned long, unsigned char const*, storedevice::result&)>
 8007252:	2800      	cmp	r0, #0
 8007254:	d0cf      	beq.n	80071f6 <ConfigStore::Flash()+0x26>
 8007256:	2000      	movs	r0, #0
 8007258:	6020      	str	r0, [r4, #0]
 800725a:	b004      	add	sp, #16
 800725c:	bd10      	pop	{r4, pc}
 800725e:	4618      	mov	r0, r3
 8007260:	e7fb      	b.n	800725a <ConfigStore::Flash()+0x8a>
 8007262:	bf00      	nop
 8007264:	20002650 	andcs	r2, r0, r0, asr r6
 8007268:	200027ac 	andcs	r2, r0, ip, lsr #15
 800726c:	20001640 	andcs	r1, r0, r0, asr #12
 8007270:	20002644 	andcs	r2, r0, r4, asr #12
 8007274:	2000264c 	andcs	r2, r0, ip, asr #12
 8007278:	20001644 	andcs	r1, r0, r4, asr #12

0800727c <StoreDisplayUdf::~StoreDisplayUdf()>:
 800727c:	4770      	bx	lr
	...

08007280 <StoreDisplayUdf::Copy(displayudfparams::Params*)>:
 8007280:	b507      	push	{r0, r1, r2, lr}
 8007282:	2300      	movs	r3, #0
 8007284:	4805      	ldr	r0, [pc, #20]	; (800729c <StoreDisplayUdf::Copy(displayudfparams::Params*)+0x1c>)
 8007286:	9300      	str	r3, [sp, #0]
 8007288:	460a      	mov	r2, r1
 800728a:	6800      	ldr	r0, [r0, #0]
 800728c:	2322      	movs	r3, #34	; 0x22
 800728e:	210d      	movs	r1, #13
 8007290:	f7ff ff6a 	bl	8007168 <ConfigStore::Copy(configstore::Store, void*, unsigned long, unsigned long)>
 8007294:	b003      	add	sp, #12
 8007296:	f85d fb04 	ldr.w	pc, [sp], #4
 800729a:	bf00      	nop
 800729c:	20002654 	andcs	r2, r0, r4, asr r6

080072a0 <StoreDisplayUdf::Update(displayudfparams::Params const*)>:
 80072a0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80072a2:	2200      	movs	r2, #0
 80072a4:	e9cd 2201 	strd	r2, r2, [sp, #4]
 80072a8:	460b      	mov	r3, r1
 80072aa:	4805      	ldr	r0, [pc, #20]	; (80072c0 <StoreDisplayUdf::Update(displayudfparams::Params const*)+0x20>)
 80072ac:	2122      	movs	r1, #34	; 0x22
 80072ae:	9100      	str	r1, [sp, #0]
 80072b0:	6800      	ldr	r0, [r0, #0]
 80072b2:	210d      	movs	r1, #13
 80072b4:	f7ff ff2a 	bl	800710c <ConfigStore::Update(configstore::Store, unsigned long, void const*, unsigned long, unsigned long, unsigned long)>
 80072b8:	b005      	add	sp, #20
 80072ba:	f85d fb04 	ldr.w	pc, [sp], #4
 80072be:	bf00      	nop
 80072c0:	20002654 	andcs	r2, r0, r4, asr r6

080072c4 <StoreDisplayUdf::~StoreDisplayUdf()>:
 80072c4:	b510      	push	{r4, lr}
 80072c6:	4604      	mov	r4, r0
 80072c8:	f001 f8f5 	bl	80084b6 <operator delete(void*)>
 80072cc:	4620      	mov	r0, r4
 80072ce:	bd10      	pop	{r4, pc}

080072d0 <StoreDisplayUdf::StoreDisplayUdf()>:
 80072d0:	4a02      	ldr	r2, [pc, #8]	; (80072dc <StoreDisplayUdf::StoreDisplayUdf()+0xc>)
 80072d2:	6002      	str	r2, [r0, #0]
 80072d4:	4a02      	ldr	r2, [pc, #8]	; (80072e0 <StoreDisplayUdf::StoreDisplayUdf()+0x10>)
 80072d6:	6010      	str	r0, [r2, #0]
 80072d8:	4770      	bx	lr
 80072da:	bf00      	nop
 80072dc:	0800bc44 	stmdaeq	r0, {r2, r6, sl, fp, ip, sp, pc}
 80072e0:	20002658 	andcs	r2, r0, r8, asr r6

080072e4 <StoreDevice::StoreDevice()>:
 80072e4:	b510      	push	{r4, lr}
 80072e6:	4604      	mov	r4, r0
 80072e8:	f000 f9b2 	bl	8007650 <FlashCode::FlashCode()>
 80072ec:	7823      	ldrb	r3, [r4, #0]
 80072ee:	7063      	strb	r3, [r4, #1]
 80072f0:	4620      	mov	r0, r4
 80072f2:	bd10      	pop	{r4, pc}

080072f4 <StoreDevice::GetSize() const>:
 80072f4:	f000 b9c8 	b.w	8007688 <FlashCode::GetSize() const>

080072f8 <StoreDevice::GetSectorSize() const>:
 80072f8:	f000 b9ce 	b.w	8007698 <FlashCode::GetSectorSize() const>

080072fc <StoreDevice::Read(unsigned long, unsigned long, unsigned char*, storedevice::result&)>:
 80072fc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80072fe:	ac03      	add	r4, sp, #12
 8007300:	9400      	str	r4, [sp, #0]
 8007302:	f000 f9cc 	bl	800769e <FlashCode::Read(unsigned long, unsigned long, unsigned char*, flashcode::result&)>
 8007306:	9b06      	ldr	r3, [sp, #24]
 8007308:	9a03      	ldr	r2, [sp, #12]
 800730a:	601a      	str	r2, [r3, #0]
 800730c:	b004      	add	sp, #16
 800730e:	bd10      	pop	{r4, pc}

08007310 <StoreDevice::Erase(unsigned long, unsigned long, storedevice::result&)>:
 8007310:	b513      	push	{r0, r1, r4, lr}
 8007312:	461c      	mov	r4, r3
 8007314:	ab01      	add	r3, sp, #4
 8007316:	f000 f9d1 	bl	80076bc <FlashCode::Erase(unsigned long, unsigned long, flashcode::result&)>
 800731a:	9b01      	ldr	r3, [sp, #4]
 800731c:	6023      	str	r3, [r4, #0]
 800731e:	b002      	add	sp, #8
 8007320:	bd10      	pop	{r4, pc}

08007322 <StoreDevice::Write(unsigned long, unsigned long, unsigned char const*, storedevice::result&)>:
 8007322:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007324:	ac03      	add	r4, sp, #12
 8007326:	9400      	str	r4, [sp, #0]
 8007328:	f000 fa68 	bl	80077fc <FlashCode::Write(unsigned long, unsigned long, unsigned char const*, flashcode::result&)>
 800732c:	9b06      	ldr	r3, [sp, #24]
 800732e:	9a03      	ldr	r2, [sp, #12]
 8007330:	601a      	str	r2, [r3, #0]
 8007332:	b004      	add	sp, #16
 8007334:	bd10      	pop	{r4, pc}

08007336 <StorePixelDmx::~StorePixelDmx()>:
 8007336:	4770      	bx	lr

08007338 <non-virtual thunk to StorePixelDmx::~StorePixelDmx()>:
 8007338:	3804      	subs	r0, #4
 800733a:	4770      	bx	lr

0800733c <StorePixelDmx::Update(pixeldmxparams::Params const*)>:
 800733c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800733e:	2200      	movs	r2, #0
 8007340:	e9cd 2201 	strd	r2, r2, [sp, #4]
 8007344:	460b      	mov	r3, r1
 8007346:	4805      	ldr	r0, [pc, #20]	; (800735c <StorePixelDmx::Update(pixeldmxparams::Params const*)+0x20>)
 8007348:	2118      	movs	r1, #24
 800734a:	9100      	str	r1, [sp, #0]
 800734c:	6800      	ldr	r0, [r0, #0]
 800734e:	2102      	movs	r1, #2
 8007350:	f7ff fedc 	bl	800710c <ConfigStore::Update(configstore::Store, unsigned long, void const*, unsigned long, unsigned long, unsigned long)>
 8007354:	b005      	add	sp, #20
 8007356:	f85d fb04 	ldr.w	pc, [sp], #4
 800735a:	bf00      	nop
 800735c:	20002654 	andcs	r2, r0, r4, asr r6

08007360 <StorePixelDmx::SaveDmxStartAddress(unsigned short)>:
 8007360:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8007362:	2304      	movs	r3, #4
 8007364:	2200      	movs	r2, #0
 8007366:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800736a:	f8ad 1016 	strh.w	r1, [sp, #22]
 800736e:	4806      	ldr	r0, [pc, #24]	; (8007388 <StorePixelDmx::SaveDmxStartAddress(unsigned short)+0x28>)
 8007370:	2102      	movs	r1, #2
 8007372:	9100      	str	r1, [sp, #0]
 8007374:	6800      	ldr	r0, [r0, #0]
 8007376:	f10d 0316 	add.w	r3, sp, #22
 800737a:	2207      	movs	r2, #7
 800737c:	f7ff fec6 	bl	800710c <ConfigStore::Update(configstore::Store, unsigned long, void const*, unsigned long, unsigned long, unsigned long)>
 8007380:	b007      	add	sp, #28
 8007382:	f85d fb04 	ldr.w	pc, [sp], #4
 8007386:	bf00      	nop
 8007388:	20002654 	andcs	r2, r0, r4, asr r6

0800738c <non-virtual thunk to StorePixelDmx::SaveDmxStartAddress(unsigned short)>:
 800738c:	f1a0 0004 	sub.w	r0, r0, #4
 8007390:	e7e6      	b.n	8007360 <StorePixelDmx::SaveDmxStartAddress(unsigned short)>
 8007392:	bf00      	nop

08007394 <StorePixelDmx::SaveTestPattern(unsigned char)>:
 8007394:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8007396:	2308      	movs	r3, #8
 8007398:	2200      	movs	r2, #0
 800739a:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800739e:	4807      	ldr	r0, [pc, #28]	; (80073bc <StorePixelDmx::SaveTestPattern(unsigned char)+0x28>)
 80073a0:	f88d 1017 	strb.w	r1, [sp, #23]
 80073a4:	2301      	movs	r3, #1
 80073a6:	9300      	str	r3, [sp, #0]
 80073a8:	6800      	ldr	r0, [r0, #0]
 80073aa:	f10d 0317 	add.w	r3, sp, #23
 80073ae:	2210      	movs	r2, #16
 80073b0:	2102      	movs	r1, #2
 80073b2:	f7ff feab 	bl	800710c <ConfigStore::Update(configstore::Store, unsigned long, void const*, unsigned long, unsigned long, unsigned long)>
 80073b6:	b007      	add	sp, #28
 80073b8:	f85d fb04 	ldr.w	pc, [sp], #4
 80073bc:	20002654 	andcs	r2, r0, r4, asr r6

080073c0 <non-virtual thunk to StorePixelDmx::SaveTestPattern(unsigned char)>:
 80073c0:	f1a0 0004 	sub.w	r0, r0, #4
 80073c4:	e7e6      	b.n	8007394 <StorePixelDmx::SaveTestPattern(unsigned char)>
 80073c6:	bf00      	nop

080073c8 <StorePixelDmx::SaveMap(unsigned char)>:
 80073c8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 80073ca:	f44f 7300 	mov.w	r3, #512	; 0x200
 80073ce:	2200      	movs	r2, #0
 80073d0:	e9cd 3201 	strd	r3, r2, [sp, #4]
 80073d4:	4807      	ldr	r0, [pc, #28]	; (80073f4 <StorePixelDmx::SaveMap(unsigned char)+0x2c>)
 80073d6:	f88d 1017 	strb.w	r1, [sp, #23]
 80073da:	2301      	movs	r3, #1
 80073dc:	9300      	str	r3, [sp, #0]
 80073de:	6800      	ldr	r0, [r0, #0]
 80073e0:	f10d 0317 	add.w	r3, sp, #23
 80073e4:	2213      	movs	r2, #19
 80073e6:	2102      	movs	r1, #2
 80073e8:	f7ff fe90 	bl	800710c <ConfigStore::Update(configstore::Store, unsigned long, void const*, unsigned long, unsigned long, unsigned long)>
 80073ec:	b007      	add	sp, #28
 80073ee:	f85d fb04 	ldr.w	pc, [sp], #4
 80073f2:	bf00      	nop
 80073f4:	20002654 	andcs	r2, r0, r4, asr r6

080073f8 <non-virtual thunk to StorePixelDmx::SaveMap(unsigned char)>:
 80073f8:	f1a0 0004 	sub.w	r0, r0, #4
 80073fc:	e7e4      	b.n	80073c8 <StorePixelDmx::SaveMap(unsigned char)>
 80073fe:	bf00      	nop

08007400 <StorePixelDmx::SaveGroupingCount(unsigned short)>:
 8007400:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8007402:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007406:	2200      	movs	r2, #0
 8007408:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800740c:	f8ad 1016 	strh.w	r1, [sp, #22]
 8007410:	4805      	ldr	r0, [pc, #20]	; (8007428 <StorePixelDmx::SaveGroupingCount(unsigned short)+0x28>)
 8007412:	2102      	movs	r1, #2
 8007414:	9100      	str	r1, [sp, #0]
 8007416:	6800      	ldr	r0, [r0, #0]
 8007418:	f10d 0316 	add.w	r3, sp, #22
 800741c:	2211      	movs	r2, #17
 800741e:	f7ff fe75 	bl	800710c <ConfigStore::Update(configstore::Store, unsigned long, void const*, unsigned long, unsigned long, unsigned long)>
 8007422:	b007      	add	sp, #28
 8007424:	f85d fb04 	ldr.w	pc, [sp], #4
 8007428:	20002654 	andcs	r2, r0, r4, asr r6

0800742c <non-virtual thunk to StorePixelDmx::SaveGroupingCount(unsigned short)>:
 800742c:	f1a0 0004 	sub.w	r0, r0, #4
 8007430:	e7e6      	b.n	8007400 <StorePixelDmx::SaveGroupingCount(unsigned short)>
 8007432:	bf00      	nop

08007434 <StorePixelDmx::SaveCount(unsigned short)>:
 8007434:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8007436:	2300      	movs	r3, #0
 8007438:	f8ad 1016 	strh.w	r1, [sp, #22]
 800743c:	2102      	movs	r1, #2
 800743e:	e9cd 1301 	strd	r1, r3, [sp, #4]
 8007442:	4805      	ldr	r0, [pc, #20]	; (8007458 <StorePixelDmx::SaveCount(unsigned short)+0x24>)
 8007444:	9100      	str	r1, [sp, #0]
 8007446:	6800      	ldr	r0, [r0, #0]
 8007448:	f10d 0316 	add.w	r3, sp, #22
 800744c:	2205      	movs	r2, #5
 800744e:	f7ff fe5d 	bl	800710c <ConfigStore::Update(configstore::Store, unsigned long, void const*, unsigned long, unsigned long, unsigned long)>
 8007452:	b007      	add	sp, #28
 8007454:	f85d fb04 	ldr.w	pc, [sp], #4
 8007458:	20002654 	andcs	r2, r0, r4, asr r6

0800745c <non-virtual thunk to StorePixelDmx::SaveCount(unsigned short)>:
 800745c:	f1a0 0004 	sub.w	r0, r0, #4
 8007460:	e7e8      	b.n	8007434 <StorePixelDmx::SaveCount(unsigned short)>
 8007462:	bf00      	nop

08007464 <StorePixelDmx::SaveType(unsigned char)>:
 8007464:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8007466:	2301      	movs	r3, #1
 8007468:	2200      	movs	r2, #0
 800746a:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800746e:	4807      	ldr	r0, [pc, #28]	; (800748c <StorePixelDmx::SaveType(unsigned char)+0x28>)
 8007470:	9300      	str	r3, [sp, #0]
 8007472:	f88d 1017 	strb.w	r1, [sp, #23]
 8007476:	6800      	ldr	r0, [r0, #0]
 8007478:	f10d 0317 	add.w	r3, sp, #23
 800747c:	2204      	movs	r2, #4
 800747e:	2102      	movs	r1, #2
 8007480:	f7ff fe44 	bl	800710c <ConfigStore::Update(configstore::Store, unsigned long, void const*, unsigned long, unsigned long, unsigned long)>
 8007484:	b007      	add	sp, #28
 8007486:	f85d fb04 	ldr.w	pc, [sp], #4
 800748a:	bf00      	nop
 800748c:	20002654 	andcs	r2, r0, r4, asr r6

08007490 <non-virtual thunk to StorePixelDmx::SaveType(unsigned char)>:
 8007490:	f1a0 0004 	sub.w	r0, r0, #4
 8007494:	e7e6      	b.n	8007464 <StorePixelDmx::SaveType(unsigned char)>
 8007496:	bf00      	nop

08007498 <StorePixelDmx::~StorePixelDmx()>:
 8007498:	b510      	push	{r4, lr}
 800749a:	4604      	mov	r4, r0
 800749c:	f001 f80b 	bl	80084b6 <operator delete(void*)>
 80074a0:	4620      	mov	r0, r4
 80074a2:	bd10      	pop	{r4, pc}

080074a4 <non-virtual thunk to StorePixelDmx::~StorePixelDmx()>:
 80074a4:	f1a0 0004 	sub.w	r0, r0, #4
 80074a8:	e7f6      	b.n	8007498 <StorePixelDmx::~StorePixelDmx()>
	...

080074ac <StorePixelDmx::Copy(pixeldmxparams::Params*)>:
 80074ac:	b507      	push	{r0, r1, r2, lr}
 80074ae:	2300      	movs	r3, #0
 80074b0:	4805      	ldr	r0, [pc, #20]	; (80074c8 <StorePixelDmx::Copy(pixeldmxparams::Params*)+0x1c>)
 80074b2:	9300      	str	r3, [sp, #0]
 80074b4:	460a      	mov	r2, r1
 80074b6:	6800      	ldr	r0, [r0, #0]
 80074b8:	2318      	movs	r3, #24
 80074ba:	2102      	movs	r1, #2
 80074bc:	f7ff fe54 	bl	8007168 <ConfigStore::Copy(configstore::Store, void*, unsigned long, unsigned long)>
 80074c0:	b003      	add	sp, #12
 80074c2:	f85d fb04 	ldr.w	pc, [sp], #4
 80074c6:	bf00      	nop
 80074c8:	20002654 	andcs	r2, r0, r4, asr r6

080074cc <StorePixelDmx::StorePixelDmx()>:
 80074cc:	4a03      	ldr	r2, [pc, #12]	; (80074dc <StorePixelDmx::StorePixelDmx()+0x10>)
 80074ce:	6002      	str	r2, [r0, #0]
 80074d0:	3230      	adds	r2, #48	; 0x30
 80074d2:	6042      	str	r2, [r0, #4]
 80074d4:	4a02      	ldr	r2, [pc, #8]	; (80074e0 <StorePixelDmx::StorePixelDmx()+0x14>)
 80074d6:	6010      	str	r0, [r2, #0]
 80074d8:	4770      	bx	lr
 80074da:	bf00      	nop
 80074dc:	0800bc5c 	stmdaeq	r0, {r2, r3, r4, r6, sl, fp, ip, sp, pc}
 80074e0:	2000265c 	andcs	r2, r0, ip, asr r6

080074e4 <StoreRDMDevice::~StoreRDMDevice()>:
 80074e4:	4770      	bx	lr

080074e6 <non-virtual thunk to StoreRDMDevice::~StoreRDMDevice()>:
 80074e6:	3804      	subs	r0, #4
 80074e8:	4770      	bx	lr
	...

080074ec <StoreRDMDevice::Update(rdm::deviceparams::Params const*)>:
 80074ec:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80074ee:	2200      	movs	r2, #0
 80074f0:	e9cd 2201 	strd	r2, r2, [sp, #4]
 80074f4:	460b      	mov	r3, r1
 80074f6:	4805      	ldr	r0, [pc, #20]	; (800750c <StoreRDMDevice::Update(rdm::deviceparams::Params const*)+0x20>)
 80074f8:	2129      	movs	r1, #41	; 0x29
 80074fa:	9100      	str	r1, [sp, #0]
 80074fc:	6800      	ldr	r0, [r0, #0]
 80074fe:	2109      	movs	r1, #9
 8007500:	f7ff fe04 	bl	800710c <ConfigStore::Update(configstore::Store, unsigned long, void const*, unsigned long, unsigned long, unsigned long)>
 8007504:	b005      	add	sp, #20
 8007506:	f85d fb04 	ldr.w	pc, [sp], #4
 800750a:	bf00      	nop
 800750c:	20002654 	andcs	r2, r0, r4, asr r6

08007510 <StoreRDMDevice::SaveLabel(char const*, unsigned char)>:
 8007510:	b570      	push	{r4, r5, r6, lr}
 8007512:	4d0d      	ldr	r5, [pc, #52]	; (8007548 <StoreRDMDevice::SaveLabel(char const*, unsigned char)+0x38>)
 8007514:	b086      	sub	sp, #24
 8007516:	2401      	movs	r4, #1
 8007518:	2600      	movs	r6, #0
 800751a:	6828      	ldr	r0, [r5, #0]
 800751c:	f88d 2017 	strb.w	r2, [sp, #23]
 8007520:	460b      	mov	r3, r1
 8007522:	9200      	str	r2, [sp, #0]
 8007524:	e9cd 4601 	strd	r4, r6, [sp, #4]
 8007528:	2204      	movs	r2, #4
 800752a:	2109      	movs	r1, #9
 800752c:	f7ff fdee 	bl	800710c <ConfigStore::Update(configstore::Store, unsigned long, void const*, unsigned long, unsigned long, unsigned long)>
 8007530:	e9cd 4601 	strd	r4, r6, [sp, #4]
 8007534:	6828      	ldr	r0, [r5, #0]
 8007536:	9400      	str	r4, [sp, #0]
 8007538:	f10d 0317 	add.w	r3, sp, #23
 800753c:	2224      	movs	r2, #36	; 0x24
 800753e:	2109      	movs	r1, #9
 8007540:	f7ff fde4 	bl	800710c <ConfigStore::Update(configstore::Store, unsigned long, void const*, unsigned long, unsigned long, unsigned long)>
 8007544:	b006      	add	sp, #24
 8007546:	bd70      	pop	{r4, r5, r6, pc}
 8007548:	20002654 	andcs	r2, r0, r4, asr r6

0800754c <non-virtual thunk to StoreRDMDevice::SaveLabel(char const*, unsigned char)>:
 800754c:	f1a0 0004 	sub.w	r0, r0, #4
 8007550:	e7de      	b.n	8007510 <StoreRDMDevice::SaveLabel(char const*, unsigned char)>
 8007552:	bf00      	nop

08007554 <StoreRDMDevice::~StoreRDMDevice()>:
 8007554:	b510      	push	{r4, lr}
 8007556:	4604      	mov	r4, r0
 8007558:	f000 ffad 	bl	80084b6 <operator delete(void*)>
 800755c:	4620      	mov	r0, r4
 800755e:	bd10      	pop	{r4, pc}

08007560 <non-virtual thunk to StoreRDMDevice::~StoreRDMDevice()>:
 8007560:	f1a0 0004 	sub.w	r0, r0, #4
 8007564:	e7f6      	b.n	8007554 <StoreRDMDevice::~StoreRDMDevice()>
	...

08007568 <StoreRDMDevice::Copy(rdm::deviceparams::Params*)>:
 8007568:	b507      	push	{r0, r1, r2, lr}
 800756a:	2300      	movs	r3, #0
 800756c:	4805      	ldr	r0, [pc, #20]	; (8007584 <StoreRDMDevice::Copy(rdm::deviceparams::Params*)+0x1c>)
 800756e:	9300      	str	r3, [sp, #0]
 8007570:	460a      	mov	r2, r1
 8007572:	6800      	ldr	r0, [r0, #0]
 8007574:	2329      	movs	r3, #41	; 0x29
 8007576:	2109      	movs	r1, #9
 8007578:	f7ff fdf6 	bl	8007168 <ConfigStore::Copy(configstore::Store, void*, unsigned long, unsigned long)>
 800757c:	b003      	add	sp, #12
 800757e:	f85d fb04 	ldr.w	pc, [sp], #4
 8007582:	bf00      	nop
 8007584:	20002654 	andcs	r2, r0, r4, asr r6

08007588 <StoreRDMDevice::StoreRDMDevice()>:
 8007588:	4a03      	ldr	r2, [pc, #12]	; (8007598 <StoreRDMDevice::StoreRDMDevice()+0x10>)
 800758a:	6002      	str	r2, [r0, #0]
 800758c:	321c      	adds	r2, #28
 800758e:	6042      	str	r2, [r0, #4]
 8007590:	4a02      	ldr	r2, [pc, #8]	; (800759c <StoreRDMDevice::StoreRDMDevice()+0x14>)
 8007592:	6010      	str	r0, [r2, #0]
 8007594:	4770      	bx	lr
 8007596:	bf00      	nop
 8007598:	0800bcb4 	stmdaeq	r0, {r2, r4, r5, r7, sl, fp, ip, sp, pc}
 800759c:	20002660 	andcs	r2, r0, r0, ror #12

080075a0 <StoreRDMSensors::~StoreRDMSensors()>:
 80075a0:	4770      	bx	lr

080075a2 <non-virtual thunk to StoreRDMSensors::~StoreRDMSensors()>:
 80075a2:	3804      	subs	r0, #4
 80075a4:	4770      	bx	lr
	...

080075a8 <StoreRDMSensors::Update(rdm::sensorsparams::Params const*)>:
 80075a8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80075aa:	2200      	movs	r2, #0
 80075ac:	e9cd 2201 	strd	r2, r2, [sp, #4]
 80075b0:	460b      	mov	r3, r1
 80075b2:	4805      	ldr	r0, [pc, #20]	; (80075c8 <StoreRDMSensors::Update(rdm::sensorsparams::Params const*)+0x20>)
 80075b4:	213c      	movs	r1, #60	; 0x3c
 80075b6:	9100      	str	r1, [sp, #0]
 80075b8:	6800      	ldr	r0, [r0, #0]
 80075ba:	2115      	movs	r1, #21
 80075bc:	f7ff fda6 	bl	800710c <ConfigStore::Update(configstore::Store, unsigned long, void const*, unsigned long, unsigned long, unsigned long)>
 80075c0:	b005      	add	sp, #20
 80075c2:	f85d fb04 	ldr.w	pc, [sp], #4
 80075c6:	bf00      	nop
 80075c8:	20002654 	andcs	r2, r0, r4, asr r6

080075cc <StoreRDMSensors::SaveCalibration(unsigned long, long)>:
 80075cc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 80075ce:	2300      	movs	r3, #0
 80075d0:	e9cd 3301 	strd	r3, r3, [sp, #4]
 80075d4:	4808      	ldr	r0, [pc, #32]	; (80075f8 <StoreRDMSensors::SaveCalibration(unsigned long, long)+0x2c>)
 80075d6:	f8ad 2016 	strh.w	r2, [sp, #22]
 80075da:	2302      	movs	r3, #2
 80075dc:	9300      	str	r3, [sp, #0]
 80075de:	f101 020e 	add.w	r2, r1, #14
 80075e2:	6800      	ldr	r0, [r0, #0]
 80075e4:	f10d 0316 	add.w	r3, sp, #22
 80075e8:	0052      	lsls	r2, r2, #1
 80075ea:	2115      	movs	r1, #21
 80075ec:	f7ff fd8e 	bl	800710c <ConfigStore::Update(configstore::Store, unsigned long, void const*, unsigned long, unsigned long, unsigned long)>
 80075f0:	b007      	add	sp, #28
 80075f2:	f85d fb04 	ldr.w	pc, [sp], #4
 80075f6:	bf00      	nop
 80075f8:	20002654 	andcs	r2, r0, r4, asr r6

080075fc <non-virtual thunk to StoreRDMSensors::SaveCalibration(unsigned long, long)>:
 80075fc:	f1a0 0004 	sub.w	r0, r0, #4
 8007600:	e7e4      	b.n	80075cc <StoreRDMSensors::SaveCalibration(unsigned long, long)>
 8007602:	bf00      	nop

08007604 <StoreRDMSensors::~StoreRDMSensors()>:
 8007604:	b510      	push	{r4, lr}
 8007606:	4604      	mov	r4, r0
 8007608:	f000 ff55 	bl	80084b6 <operator delete(void*)>
 800760c:	4620      	mov	r0, r4
 800760e:	bd10      	pop	{r4, pc}

08007610 <non-virtual thunk to StoreRDMSensors::~StoreRDMSensors()>:
 8007610:	f1a0 0004 	sub.w	r0, r0, #4
 8007614:	e7f6      	b.n	8007604 <StoreRDMSensors::~StoreRDMSensors()>
	...

08007618 <StoreRDMSensors::Copy(rdm::sensorsparams::Params*)>:
 8007618:	b507      	push	{r0, r1, r2, lr}
 800761a:	2300      	movs	r3, #0
 800761c:	4805      	ldr	r0, [pc, #20]	; (8007634 <StoreRDMSensors::Copy(rdm::sensorsparams::Params*)+0x1c>)
 800761e:	9300      	str	r3, [sp, #0]
 8007620:	460a      	mov	r2, r1
 8007622:	6800      	ldr	r0, [r0, #0]
 8007624:	233c      	movs	r3, #60	; 0x3c
 8007626:	2115      	movs	r1, #21
 8007628:	f7ff fd9e 	bl	8007168 <ConfigStore::Copy(configstore::Store, void*, unsigned long, unsigned long)>
 800762c:	b003      	add	sp, #12
 800762e:	f85d fb04 	ldr.w	pc, [sp], #4
 8007632:	bf00      	nop
 8007634:	20002654 	andcs	r2, r0, r4, asr r6

08007638 <StoreRDMSensors::StoreRDMSensors()>:
 8007638:	4a03      	ldr	r2, [pc, #12]	; (8007648 <StoreRDMSensors::StoreRDMSensors()+0x10>)
 800763a:	6002      	str	r2, [r0, #0]
 800763c:	321c      	adds	r2, #28
 800763e:	6042      	str	r2, [r0, #4]
 8007640:	4a02      	ldr	r2, [pc, #8]	; (800764c <StoreRDMSensors::StoreRDMSensors()+0x14>)
 8007642:	6010      	str	r0, [r2, #0]
 8007644:	4770      	bx	lr
 8007646:	bf00      	nop
 8007648:	0800bce4 	stmdaeq	r0, {r2, r5, r6, r7, sl, fp, ip, sp, pc}
 800764c:	20002664 	andcs	r2, r0, r4, ror #12

08007650 <FlashCode::FlashCode()>:
 8007650:	4b0a      	ldr	r3, [pc, #40]	; (800767c <FlashCode::FlashCode()+0x2c>)
 8007652:	b513      	push	{r0, r1, r4, lr}
 8007654:	6018      	str	r0, [r3, #0]
 8007656:	2301      	movs	r3, #1
 8007658:	7003      	strb	r3, [r0, #0]
 800765a:	4604      	mov	r4, r0
 800765c:	f000 f814 	bl	8007688 <FlashCode::GetSize() const>
 8007660:	9001      	str	r0, [sp, #4]
 8007662:	4620      	mov	r0, r4
 8007664:	f000 f810 	bl	8007688 <FlashCode::GetSize() const>
 8007668:	9a01      	ldr	r2, [sp, #4]
 800766a:	4905      	ldr	r1, [pc, #20]	; (8007680 <FlashCode::FlashCode()+0x30>)
 800766c:	0a83      	lsrs	r3, r0, #10
 800766e:	4805      	ldr	r0, [pc, #20]	; (8007684 <FlashCode::FlashCode()+0x34>)
 8007670:	f7fa fafc 	bl	8001c6c <printf>
 8007674:	4620      	mov	r0, r4
 8007676:	b002      	add	sp, #8
 8007678:	bd10      	pop	{r4, pc}
 800767a:	bf00      	nop
 800767c:	20002668 	andcs	r2, r0, r8, ror #12
 8007680:	0800a598 	stmdaeq	r0, {r3, r4, r7, r8, sl, sp, pc}
 8007684:	0800bd0c 	stmdaeq	r0, {r2, r3, r8, sl, fp, ip, sp, pc}

08007688 <FlashCode::GetSize() const>:
 8007688:	4b02      	ldr	r3, [pc, #8]	; (8007694 <FlashCode::GetSize() const+0xc>)
 800768a:	f8b3 00e0 	ldrh.w	r0, [r3, #224]	; 0xe0
 800768e:	0280      	lsls	r0, r0, #10
 8007690:	4770      	bx	lr
 8007692:	bf00      	nop
 8007694:	1ffff700 	svcne	0x00fff700

08007698 <FlashCode::GetSectorSize() const>:
 8007698:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800769c:	4770      	bx	lr

0800769e <FlashCode::Read(unsigned long, unsigned long, unsigned char*, flashcode::result&)>:
 800769e:	f101 6100 	add.w	r1, r1, #134217728	; 0x8000000
 80076a2:	441a      	add	r2, r3
 80076a4:	4293      	cmp	r3, r2
 80076a6:	d104      	bne.n	80076b2 <FlashCode::Read(unsigned long, unsigned long, unsigned char*, flashcode::result&)+0x14>
 80076a8:	9b00      	ldr	r3, [sp, #0]
 80076aa:	2200      	movs	r2, #0
 80076ac:	601a      	str	r2, [r3, #0]
 80076ae:	2001      	movs	r0, #1
 80076b0:	4770      	bx	lr
 80076b2:	f851 0b04 	ldr.w	r0, [r1], #4
 80076b6:	f843 0b04 	str.w	r0, [r3], #4
 80076ba:	e7f3      	b.n	80076a4 <FlashCode::Read(unsigned long, unsigned long, unsigned char*, flashcode::result&)+0x6>

080076bc <FlashCode::Erase(unsigned long, unsigned long, flashcode::result&)>:
 80076bc:	b538      	push	{r3, r4, r5, lr}
 80076be:	4c48      	ldr	r4, [pc, #288]	; (80077e0 <FlashCode::Erase(unsigned long, unsigned long, flashcode::result&)+0x124>)
 80076c0:	2000      	movs	r0, #0
 80076c2:	6018      	str	r0, [r3, #0]
 80076c4:	6823      	ldr	r3, [r4, #0]
 80076c6:	2b04      	cmp	r3, #4
 80076c8:	f200 8082 	bhi.w	80077d0 <FlashCode::Erase(unsigned long, unsigned long, flashcode::result&)+0x114>
 80076cc:	e8df f003 	tbb	[pc, r3]
 80076d0:	78452003 	stmdavc	r5, {r0, r1, sp}^
 80076d4:	4b430080 	blmi	90c78dc <_sidata+0x10bb76c>
 80076d8:	f101 6100 	add.w	r1, r1, #134217728	; 0x8000000
 80076dc:	6019      	str	r1, [r3, #0]
 80076de:	4b42      	ldr	r3, [pc, #264]	; (80077e8 <FlashCode::Erase(unsigned long, unsigned long, flashcode::result&)+0x12c>)
 80076e0:	601a      	str	r2, [r3, #0]
 80076e2:	4b42      	ldr	r3, [pc, #264]	; (80077ec <FlashCode::Erase(unsigned long, unsigned long, flashcode::result&)+0x130>)
 80076e4:	f8b3 30e0 	ldrh.w	r3, [r3, #224]	; 0xe0
 80076e8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80076ec:	4b40      	ldr	r3, [pc, #256]	; (80077f0 <FlashCode::Erase(unsigned long, unsigned long, flashcode::result&)+0x134>)
 80076ee:	d807      	bhi.n	8007700 <FlashCode::Erase(unsigned long, unsigned long, flashcode::result&)+0x44>
 80076f0:	2201      	movs	r2, #1
 80076f2:	701a      	strb	r2, [r3, #0]
 80076f4:	f001 fa94 	bl	8008c20 <fmc_bank0_unlock>
 80076f8:	2301      	movs	r3, #1
 80076fa:	6023      	str	r3, [r4, #0]
 80076fc:	2000      	movs	r0, #0
 80076fe:	e026      	b.n	800774e <FlashCode::Erase(unsigned long, unsigned long, flashcode::result&)+0x92>
 8007700:	4a3c      	ldr	r2, [pc, #240]	; (80077f4 <FlashCode::Erase(unsigned long, unsigned long, flashcode::result&)+0x138>)
 8007702:	4291      	cmp	r1, r2
 8007704:	d3f4      	bcc.n	80076f0 <FlashCode::Erase(unsigned long, unsigned long, flashcode::result&)+0x34>
 8007706:	2200      	movs	r2, #0
 8007708:	701a      	strb	r2, [r3, #0]
 800770a:	f001 fa97 	bl	8008c3c <fmc_bank1_unlock>
 800770e:	e7f3      	b.n	80076f8 <FlashCode::Erase(unsigned long, unsigned long, flashcode::result&)+0x3c>
 8007710:	4d37      	ldr	r5, [pc, #220]	; (80077f0 <FlashCode::Erase(unsigned long, unsigned long, flashcode::result&)+0x134>)
 8007712:	782b      	ldrb	r3, [r5, #0]
 8007714:	b15b      	cbz	r3, 800772e <FlashCode::Erase(unsigned long, unsigned long, flashcode::result&)+0x72>
 8007716:	f001 faaf 	bl	8008c78 <fmc_bank0_state_get>
 800771a:	2801      	cmp	r0, #1
 800771c:	d0ee      	beq.n	80076fc <FlashCode::Erase(unsigned long, unsigned long, flashcode::result&)+0x40>
 800771e:	7829      	ldrb	r1, [r5, #0]
 8007720:	4b35      	ldr	r3, [pc, #212]	; (80077f8 <FlashCode::Erase(unsigned long, unsigned long, flashcode::result&)+0x13c>)
 8007722:	b939      	cbnz	r1, 8007734 <FlashCode::Erase(unsigned long, unsigned long, flashcode::result&)+0x78>
 8007724:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007726:	f022 0202 	bic.w	r2, r2, #2
 800772a:	651a      	str	r2, [r3, #80]	; 0x50
 800772c:	e006      	b.n	800773c <FlashCode::Erase(unsigned long, unsigned long, flashcode::result&)+0x80>
 800772e:	f001 fab5 	bl	8008c9c <fmc_bank1_state_get>
 8007732:	e7f2      	b.n	800771a <FlashCode::Erase(unsigned long, unsigned long, flashcode::result&)+0x5e>
 8007734:	691a      	ldr	r2, [r3, #16]
 8007736:	f022 0202 	bic.w	r2, r2, #2
 800773a:	611a      	str	r2, [r3, #16]
 800773c:	4b2a      	ldr	r3, [pc, #168]	; (80077e8 <FlashCode::Erase(unsigned long, unsigned long, flashcode::result&)+0x12c>)
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	b94b      	cbnz	r3, 8007756 <FlashCode::Erase(unsigned long, unsigned long, flashcode::result&)+0x9a>
 8007742:	b129      	cbz	r1, 8007750 <FlashCode::Erase(unsigned long, unsigned long, flashcode::result&)+0x94>
 8007744:	f001 fa88 	bl	8008c58 <fmc_bank0_lock>
 8007748:	2300      	movs	r3, #0
 800774a:	6023      	str	r3, [r4, #0]
 800774c:	2001      	movs	r0, #1
 800774e:	bd38      	pop	{r3, r4, r5, pc}
 8007750:	f001 fa8a 	bl	8008c68 <fmc_bank1_lock>
 8007754:	e7f8      	b.n	8007748 <FlashCode::Erase(unsigned long, unsigned long, flashcode::result&)+0x8c>
 8007756:	2302      	movs	r3, #2
 8007758:	e7cf      	b.n	80076fa <FlashCode::Erase(unsigned long, unsigned long, flashcode::result&)+0x3e>
 800775a:	4923      	ldr	r1, [pc, #140]	; (80077e8 <FlashCode::Erase(unsigned long, unsigned long, flashcode::result&)+0x12c>)
 800775c:	680b      	ldr	r3, [r1, #0]
 800775e:	2b00      	cmp	r3, #0
 8007760:	d0ca      	beq.n	80076f8 <FlashCode::Erase(unsigned long, unsigned long, flashcode::result&)+0x3c>
 8007762:	4b23      	ldr	r3, [pc, #140]	; (80077f0 <FlashCode::Erase(unsigned long, unsigned long, flashcode::result&)+0x134>)
 8007764:	4a1f      	ldr	r2, [pc, #124]	; (80077e4 <FlashCode::Erase(unsigned long, unsigned long, flashcode::result&)+0x128>)
 8007766:	7818      	ldrb	r0, [r3, #0]
 8007768:	4b23      	ldr	r3, [pc, #140]	; (80077f8 <FlashCode::Erase(unsigned long, unsigned long, flashcode::result&)+0x13c>)
 800776a:	b190      	cbz	r0, 8007792 <FlashCode::Erase(unsigned long, unsigned long, flashcode::result&)+0xd6>
 800776c:	6918      	ldr	r0, [r3, #16]
 800776e:	f040 0002 	orr.w	r0, r0, #2
 8007772:	6118      	str	r0, [r3, #16]
 8007774:	6810      	ldr	r0, [r2, #0]
 8007776:	6158      	str	r0, [r3, #20]
 8007778:	6918      	ldr	r0, [r3, #16]
 800777a:	f040 0040 	orr.w	r0, r0, #64	; 0x40
 800777e:	6118      	str	r0, [r3, #16]
 8007780:	680b      	ldr	r3, [r1, #0]
 8007782:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 8007786:	600b      	str	r3, [r1, #0]
 8007788:	6813      	ldr	r3, [r2, #0]
 800778a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800778e:	6013      	str	r3, [r2, #0]
 8007790:	e7b2      	b.n	80076f8 <FlashCode::Erase(unsigned long, unsigned long, flashcode::result&)+0x3c>
 8007792:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8007794:	f040 0002 	orr.w	r0, r0, #2
 8007798:	6518      	str	r0, [r3, #80]	; 0x50
 800779a:	6810      	ldr	r0, [r2, #0]
 800779c:	6558      	str	r0, [r3, #84]	; 0x54
 800779e:	69dd      	ldr	r5, [r3, #28]
 80077a0:	07ad      	lsls	r5, r5, #30
 80077a2:	bf48      	it	mi
 80077a4:	6158      	strmi	r0, [r3, #20]
 80077a6:	4814      	ldr	r0, [pc, #80]	; (80077f8 <FlashCode::Erase(unsigned long, unsigned long, flashcode::result&)+0x13c>)
 80077a8:	6d03      	ldr	r3, [r0, #80]	; 0x50
 80077aa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80077ae:	6503      	str	r3, [r0, #80]	; 0x50
 80077b0:	680b      	ldr	r3, [r1, #0]
 80077b2:	f5a3 5380 	sub.w	r3, r3, #4096	; 0x1000
 80077b6:	600b      	str	r3, [r1, #0]
 80077b8:	6813      	ldr	r3, [r2, #0]
 80077ba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80077be:	e7e6      	b.n	800778e <FlashCode::Erase(unsigned long, unsigned long, flashcode::result&)+0xd2>
 80077c0:	4b0b      	ldr	r3, [pc, #44]	; (80077f0 <FlashCode::Erase(unsigned long, unsigned long, flashcode::result&)+0x134>)
 80077c2:	781a      	ldrb	r2, [r3, #0]
 80077c4:	4b0c      	ldr	r3, [pc, #48]	; (80077f8 <FlashCode::Erase(unsigned long, unsigned long, flashcode::result&)+0x13c>)
 80077c6:	b132      	cbz	r2, 80077d6 <FlashCode::Erase(unsigned long, unsigned long, flashcode::result&)+0x11a>
 80077c8:	691a      	ldr	r2, [r3, #16]
 80077ca:	f022 0201 	bic.w	r2, r2, #1
 80077ce:	611a      	str	r2, [r3, #16]
 80077d0:	2000      	movs	r0, #0
 80077d2:	6020      	str	r0, [r4, #0]
 80077d4:	e7bb      	b.n	800774e <FlashCode::Erase(unsigned long, unsigned long, flashcode::result&)+0x92>
 80077d6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80077d8:	f022 0201 	bic.w	r2, r2, #1
 80077dc:	651a      	str	r2, [r3, #80]	; 0x50
 80077de:	e7f7      	b.n	80077d0 <FlashCode::Erase(unsigned long, unsigned long, flashcode::result&)+0x114>
 80077e0:	20002670 	andcs	r2, r0, r0, ror r6
 80077e4:	20002674 	andcs	r2, r0, r4, ror r6
 80077e8:	20002680 	andcs	r2, r0, r0, lsl #13
 80077ec:	1ffff700 	svcne	0x00fff700
 80077f0:	2000267c 	andcs	r2, r0, ip, ror r6
 80077f4:	0807ffff 	stmdaeq	r7, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, sp, lr, pc}
 80077f8:	40022000 	andmi	r2, r2, r0

080077fc <FlashCode::Write(unsigned long, unsigned long, unsigned char const*, flashcode::result&)>:
 80077fc:	b570      	push	{r4, r5, r6, lr}
 80077fe:	9804      	ldr	r0, [sp, #16]
 8007800:	2400      	movs	r4, #0
 8007802:	6004      	str	r4, [r0, #0]
 8007804:	4c48      	ldr	r4, [pc, #288]	; (8007928 <FlashCode::Write(unsigned long, unsigned long, unsigned char const*, flashcode::result&)+0x12c>)
 8007806:	6820      	ldr	r0, [r4, #0]
 8007808:	2804      	cmp	r0, #4
 800780a:	d848      	bhi.n	800789e <FlashCode::Write(unsigned long, unsigned long, unsigned char const*, flashcode::result&)+0xa2>
 800780c:	e8df f000 	tbb	[pc, r0]
 8007810:	22847c03 	addcs	r7, r4, #768	; 0x300
 8007814:	48450047 	stmdami	r5, {r0, r1, r2, r6}^
 8007818:	f101 6100 	add.w	r1, r1, #134217728	; 0x8000000
 800781c:	6001      	str	r1, [r0, #0]
 800781e:	4844      	ldr	r0, [pc, #272]	; (8007930 <FlashCode::Write(unsigned long, unsigned long, unsigned char const*, flashcode::result&)+0x134>)
 8007820:	6003      	str	r3, [r0, #0]
 8007822:	4b44      	ldr	r3, [pc, #272]	; (8007934 <FlashCode::Write(unsigned long, unsigned long, unsigned char const*, flashcode::result&)+0x138>)
 8007824:	601a      	str	r2, [r3, #0]
 8007826:	4b44      	ldr	r3, [pc, #272]	; (8007938 <FlashCode::Write(unsigned long, unsigned long, unsigned char const*, flashcode::result&)+0x13c>)
 8007828:	f8b3 30e0 	ldrh.w	r3, [r3, #224]	; 0xe0
 800782c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007830:	4b42      	ldr	r3, [pc, #264]	; (800793c <FlashCode::Write(unsigned long, unsigned long, unsigned char const*, flashcode::result&)+0x140>)
 8007832:	d807      	bhi.n	8007844 <FlashCode::Write(unsigned long, unsigned long, unsigned char const*, flashcode::result&)+0x48>
 8007834:	2201      	movs	r2, #1
 8007836:	701a      	strb	r2, [r3, #0]
 8007838:	f001 f9f2 	bl	8008c20 <fmc_bank0_unlock>
 800783c:	2303      	movs	r3, #3
 800783e:	6023      	str	r3, [r4, #0]
 8007840:	2000      	movs	r0, #0
 8007842:	e026      	b.n	8007892 <FlashCode::Write(unsigned long, unsigned long, unsigned char const*, flashcode::result&)+0x96>
 8007844:	4a3e      	ldr	r2, [pc, #248]	; (8007940 <FlashCode::Write(unsigned long, unsigned long, unsigned char const*, flashcode::result&)+0x144>)
 8007846:	4291      	cmp	r1, r2
 8007848:	d3f4      	bcc.n	8007834 <FlashCode::Write(unsigned long, unsigned long, unsigned char const*, flashcode::result&)+0x38>
 800784a:	2200      	movs	r2, #0
 800784c:	701a      	strb	r2, [r3, #0]
 800784e:	f001 f9f5 	bl	8008c3c <fmc_bank1_unlock>
 8007852:	e7f3      	b.n	800783c <FlashCode::Write(unsigned long, unsigned long, unsigned char const*, flashcode::result&)+0x40>
 8007854:	4d39      	ldr	r5, [pc, #228]	; (800793c <FlashCode::Write(unsigned long, unsigned long, unsigned char const*, flashcode::result&)+0x140>)
 8007856:	782b      	ldrb	r3, [r5, #0]
 8007858:	b15b      	cbz	r3, 8007872 <FlashCode::Write(unsigned long, unsigned long, unsigned char const*, flashcode::result&)+0x76>
 800785a:	f001 fa0d 	bl	8008c78 <fmc_bank0_state_get>
 800785e:	2801      	cmp	r0, #1
 8007860:	d0ee      	beq.n	8007840 <FlashCode::Write(unsigned long, unsigned long, unsigned char const*, flashcode::result&)+0x44>
 8007862:	7829      	ldrb	r1, [r5, #0]
 8007864:	4b37      	ldr	r3, [pc, #220]	; (8007944 <FlashCode::Write(unsigned long, unsigned long, unsigned char const*, flashcode::result&)+0x148>)
 8007866:	b939      	cbnz	r1, 8007878 <FlashCode::Write(unsigned long, unsigned long, unsigned char const*, flashcode::result&)+0x7c>
 8007868:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800786a:	f022 0201 	bic.w	r2, r2, #1
 800786e:	651a      	str	r2, [r3, #80]	; 0x50
 8007870:	e006      	b.n	8007880 <FlashCode::Write(unsigned long, unsigned long, unsigned char const*, flashcode::result&)+0x84>
 8007872:	f001 fa13 	bl	8008c9c <fmc_bank1_state_get>
 8007876:	e7f2      	b.n	800785e <FlashCode::Write(unsigned long, unsigned long, unsigned char const*, flashcode::result&)+0x62>
 8007878:	691a      	ldr	r2, [r3, #16]
 800787a:	f022 0201 	bic.w	r2, r2, #1
 800787e:	611a      	str	r2, [r3, #16]
 8007880:	4b2c      	ldr	r3, [pc, #176]	; (8007934 <FlashCode::Write(unsigned long, unsigned long, unsigned char const*, flashcode::result&)+0x138>)
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	b94b      	cbnz	r3, 800789a <FlashCode::Write(unsigned long, unsigned long, unsigned char const*, flashcode::result&)+0x9e>
 8007886:	b129      	cbz	r1, 8007894 <FlashCode::Write(unsigned long, unsigned long, unsigned char const*, flashcode::result&)+0x98>
 8007888:	f001 f9e6 	bl	8008c58 <fmc_bank0_lock>
 800788c:	2300      	movs	r3, #0
 800788e:	6023      	str	r3, [r4, #0]
 8007890:	2001      	movs	r0, #1
 8007892:	bd70      	pop	{r4, r5, r6, pc}
 8007894:	f001 f9e8 	bl	8008c68 <fmc_bank1_lock>
 8007898:	e7f8      	b.n	800788c <FlashCode::Write(unsigned long, unsigned long, unsigned char const*, flashcode::result&)+0x90>
 800789a:	2304      	movs	r3, #4
 800789c:	e7cf      	b.n	800783e <FlashCode::Write(unsigned long, unsigned long, unsigned char const*, flashcode::result&)+0x42>
 800789e:	4a25      	ldr	r2, [pc, #148]	; (8007934 <FlashCode::Write(unsigned long, unsigned long, unsigned char const*, flashcode::result&)+0x138>)
 80078a0:	6813      	ldr	r3, [r2, #0]
 80078a2:	2b03      	cmp	r3, #3
 80078a4:	d91a      	bls.n	80078dc <FlashCode::Write(unsigned long, unsigned long, unsigned char const*, flashcode::result&)+0xe0>
 80078a6:	4b25      	ldr	r3, [pc, #148]	; (800793c <FlashCode::Write(unsigned long, unsigned long, unsigned char const*, flashcode::result&)+0x140>)
 80078a8:	7819      	ldrb	r1, [r3, #0]
 80078aa:	4b26      	ldr	r3, [pc, #152]	; (8007944 <FlashCode::Write(unsigned long, unsigned long, unsigned char const*, flashcode::result&)+0x148>)
 80078ac:	b189      	cbz	r1, 80078d2 <FlashCode::Write(unsigned long, unsigned long, unsigned char const*, flashcode::result&)+0xd6>
 80078ae:	6919      	ldr	r1, [r3, #16]
 80078b0:	f041 0101 	orr.w	r1, r1, #1
 80078b4:	6119      	str	r1, [r3, #16]
 80078b6:	4d1e      	ldr	r5, [pc, #120]	; (8007930 <FlashCode::Write(unsigned long, unsigned long, unsigned char const*, flashcode::result&)+0x134>)
 80078b8:	481c      	ldr	r0, [pc, #112]	; (800792c <FlashCode::Write(unsigned long, unsigned long, unsigned char const*, flashcode::result&)+0x130>)
 80078ba:	6829      	ldr	r1, [r5, #0]
 80078bc:	6803      	ldr	r3, [r0, #0]
 80078be:	f851 6b04 	ldr.w	r6, [r1], #4
 80078c2:	f843 6b04 	str.w	r6, [r3], #4
 80078c6:	6003      	str	r3, [r0, #0]
 80078c8:	6813      	ldr	r3, [r2, #0]
 80078ca:	6029      	str	r1, [r5, #0]
 80078cc:	3b04      	subs	r3, #4
 80078ce:	6013      	str	r3, [r2, #0]
 80078d0:	e7b4      	b.n	800783c <FlashCode::Write(unsigned long, unsigned long, unsigned char const*, flashcode::result&)+0x40>
 80078d2:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80078d4:	f041 0101 	orr.w	r1, r1, #1
 80078d8:	6519      	str	r1, [r3, #80]	; 0x50
 80078da:	e7ec      	b.n	80078b6 <FlashCode::Write(unsigned long, unsigned long, unsigned char const*, flashcode::result&)+0xba>
 80078dc:	2b00      	cmp	r3, #0
 80078de:	d0ad      	beq.n	800783c <FlashCode::Write(unsigned long, unsigned long, unsigned char const*, flashcode::result&)+0x40>
 80078e0:	4b16      	ldr	r3, [pc, #88]	; (800793c <FlashCode::Write(unsigned long, unsigned long, unsigned char const*, flashcode::result&)+0x140>)
 80078e2:	781a      	ldrb	r2, [r3, #0]
 80078e4:	4b17      	ldr	r3, [pc, #92]	; (8007944 <FlashCode::Write(unsigned long, unsigned long, unsigned char const*, flashcode::result&)+0x148>)
 80078e6:	b152      	cbz	r2, 80078fe <FlashCode::Write(unsigned long, unsigned long, unsigned char const*, flashcode::result&)+0x102>
 80078e8:	691a      	ldr	r2, [r3, #16]
 80078ea:	f042 0201 	orr.w	r2, r2, #1
 80078ee:	611a      	str	r2, [r3, #16]
 80078f0:	4a0f      	ldr	r2, [pc, #60]	; (8007930 <FlashCode::Write(unsigned long, unsigned long, unsigned char const*, flashcode::result&)+0x134>)
 80078f2:	4b0e      	ldr	r3, [pc, #56]	; (800792c <FlashCode::Write(unsigned long, unsigned long, unsigned char const*, flashcode::result&)+0x130>)
 80078f4:	6812      	ldr	r2, [r2, #0]
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	6812      	ldr	r2, [r2, #0]
 80078fa:	601a      	str	r2, [r3, #0]
 80078fc:	e79e      	b.n	800783c <FlashCode::Write(unsigned long, unsigned long, unsigned char const*, flashcode::result&)+0x40>
 80078fe:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007900:	f042 0201 	orr.w	r2, r2, #1
 8007904:	651a      	str	r2, [r3, #80]	; 0x50
 8007906:	e7f3      	b.n	80078f0 <FlashCode::Write(unsigned long, unsigned long, unsigned char const*, flashcode::result&)+0xf4>
 8007908:	4b0c      	ldr	r3, [pc, #48]	; (800793c <FlashCode::Write(unsigned long, unsigned long, unsigned char const*, flashcode::result&)+0x140>)
 800790a:	781a      	ldrb	r2, [r3, #0]
 800790c:	4b0d      	ldr	r3, [pc, #52]	; (8007944 <FlashCode::Write(unsigned long, unsigned long, unsigned char const*, flashcode::result&)+0x148>)
 800790e:	b132      	cbz	r2, 800791e <FlashCode::Write(unsigned long, unsigned long, unsigned char const*, flashcode::result&)+0x122>
 8007910:	691a      	ldr	r2, [r3, #16]
 8007912:	f022 0202 	bic.w	r2, r2, #2
 8007916:	611a      	str	r2, [r3, #16]
 8007918:	2000      	movs	r0, #0
 800791a:	6020      	str	r0, [r4, #0]
 800791c:	e7b9      	b.n	8007892 <FlashCode::Write(unsigned long, unsigned long, unsigned char const*, flashcode::result&)+0x96>
 800791e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007920:	f022 0202 	bic.w	r2, r2, #2
 8007924:	651a      	str	r2, [r3, #80]	; 0x50
 8007926:	e7f7      	b.n	8007918 <FlashCode::Write(unsigned long, unsigned long, unsigned char const*, flashcode::result&)+0x11c>
 8007928:	20002670 	andcs	r2, r0, r0, ror r6
 800792c:	2000266c 	andcs	r2, r0, ip, ror #12
 8007930:	20002678 	andcs	r2, r0, r8, ror r6
 8007934:	20002680 	andcs	r2, r0, r0, lsl #13
 8007938:	1ffff700 	svcne	0x00fff700
 800793c:	2000267c 	andcs	r2, r0, ip, ror r6
 8007940:	0807ffff 	stmdaeq	r7, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, sp, lr, pc}
 8007944:	40022000 	andmi	r2, r2, r0

08007948 <Display::PrintInfo() [clone .isra.0]>:
 8007948:	b910      	cbnz	r0, 8007950 <Display::PrintInfo() [clone .isra.0]+0x8>
 800794a:	4803      	ldr	r0, [pc, #12]	; (8007958 <Display::PrintInfo() [clone .isra.0]+0x10>)
 800794c:	f7fa b9c6 	b.w	8001cdc <puts>
 8007950:	6803      	ldr	r3, [r0, #0]
 8007952:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007954:	4718      	bx	r3
 8007956:	bf00      	nop
 8007958:	0800bd3a 	stmdaeq	r0, {r1, r3, r4, r5, r8, sl, fp, ip, sp, pc}

0800795c <HAL_I2C::IsConnected_(unsigned char, unsigned long)>:
 800795c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800795e:	460d      	mov	r5, r1
 8007960:	4604      	mov	r4, r0
 8007962:	f001 fead 	bl	80096c0 <gd32_i2c_set_address>
 8007966:	4628      	mov	r0, r5
 8007968:	f001 fea2 	bl	80096b0 <gd32_i2c_set_baudrate>
 800796c:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8007970:	2b07      	cmp	r3, #7
 8007972:	d902      	bls.n	800797a <HAL_I2C::IsConnected_(unsigned char, unsigned long)+0x1e>
 8007974:	3c50      	subs	r4, #80	; 0x50
 8007976:	2c0f      	cmp	r4, #15
 8007978:	d809      	bhi.n	800798e <HAL_I2C::IsConnected_(unsigned char, unsigned long)+0x32>
 800797a:	2101      	movs	r1, #1
 800797c:	f10d 0007 	add.w	r0, sp, #7
 8007980:	f001 ff0a 	bl	8009798 <gd32_i2c_read>
 8007984:	fab0 f080 	clz	r0, r0
 8007988:	0940      	lsrs	r0, r0, #5
 800798a:	b003      	add	sp, #12
 800798c:	bd30      	pop	{r4, r5, pc}
 800798e:	2100      	movs	r1, #0
 8007990:	4608      	mov	r0, r1
 8007992:	f001 fe9b 	bl	80096cc <gd32_i2c_write>
 8007996:	e7f5      	b.n	8007984 <HAL_I2C::IsConnected_(unsigned char, unsigned long)+0x28>

08007998 <Display::Detect7Segment()>:
 8007998:	b513      	push	{r0, r1, r4, lr}
 800799a:	68c1      	ldr	r1, [r0, #12]
 800799c:	4604      	mov	r4, r0
 800799e:	7a00      	ldrb	r0, [r0, #8]
 80079a0:	f7ff ffdc 	bl	800795c <HAL_I2C::IsConnected_(unsigned char, unsigned long)>
 80079a4:	7460      	strb	r0, [r4, #17]
 80079a6:	b170      	cbz	r0, 80079c6 <Display::Detect7Segment()+0x2e>
 80079a8:	2200      	movs	r2, #0
 80079aa:	f104 0008 	add.w	r0, r4, #8
 80079ae:	4611      	mov	r1, r2
 80079b0:	9001      	str	r0, [sp, #4]
 80079b2:	f7fb f8fb 	bl	8002bac <HAL_I2C::WriteRegister(unsigned char, unsigned short)>
 80079b6:	7c63      	ldrb	r3, [r4, #17]
 80079b8:	9801      	ldr	r0, [sp, #4]
 80079ba:	b123      	cbz	r3, 80079c6 <Display::Detect7Segment()+0x2e>
 80079bc:	f24c 02ff 	movw	r2, #49407	; 0xc0ff
 80079c0:	2112      	movs	r1, #18
 80079c2:	f7fb f8f3 	bl	8002bac <HAL_I2C::WriteRegister(unsigned char, unsigned short)>
 80079c6:	b002      	add	sp, #8
 80079c8:	bd10      	pop	{r4, pc}

080079ca <Display::Detect(display::Type)>:
 80079ca:	2902      	cmp	r1, #2
 80079cc:	b538      	push	{r3, r4, r5, lr}
 80079ce:	4604      	mov	r4, r0
 80079d0:	d014      	beq.n	80079fc <Display::Detect(display::Type)+0x32>
 80079d2:	2904      	cmp	r1, #4
 80079d4:	d01b      	beq.n	8007a0e <Display::Detect(display::Type)+0x44>
 80079d6:	69e0      	ldr	r0, [r4, #28]
 80079d8:	b168      	cbz	r0, 80079f6 <Display::Detect(display::Type)+0x2c>
 80079da:	6803      	ldr	r3, [r0, #0]
 80079dc:	689b      	ldr	r3, [r3, #8]
 80079de:	4798      	blx	r3
 80079e0:	69e3      	ldr	r3, [r4, #28]
 80079e2:	b9b0      	cbnz	r0, 8007a12 <Display::Detect(display::Type)+0x48>
 80079e4:	b11b      	cbz	r3, 80079ee <Display::Detect(display::Type)+0x24>
 80079e6:	681a      	ldr	r2, [r3, #0]
 80079e8:	4618      	mov	r0, r3
 80079ea:	6852      	ldr	r2, [r2, #4]
 80079ec:	4790      	blx	r2
 80079ee:	2300      	movs	r3, #0
 80079f0:	61e3      	str	r3, [r4, #28]
 80079f2:	2304      	movs	r3, #4
 80079f4:	6023      	str	r3, [r4, #0]
 80079f6:	2300      	movs	r3, #0
 80079f8:	6163      	str	r3, [r4, #20]
 80079fa:	e011      	b.n	8007a20 <Display::Detect(display::Type)+0x56>
 80079fc:	2028      	movs	r0, #40	; 0x28
 80079fe:	f000 fd5e 	bl	80084be <operator new(unsigned int)>
 8007a02:	2100      	movs	r1, #0
 8007a04:	4605      	mov	r5, r0
 8007a06:	f000 f8d7 	bl	8007bb8 <Ssd1306::Ssd1306(TOledPanel)>
 8007a0a:	61e5      	str	r5, [r4, #28]
 8007a0c:	e7e3      	b.n	80079d6 <Display::Detect(display::Type)+0xc>
 8007a0e:	6001      	str	r1, [r0, #0]
 8007a10:	e7e1      	b.n	80079d6 <Display::Detect(display::Type)+0xc>
 8007a12:	681a      	ldr	r2, [r3, #0]
 8007a14:	4618      	mov	r0, r3
 8007a16:	68d2      	ldr	r2, [r2, #12]
 8007a18:	4790      	blx	r2
 8007a1a:	69e3      	ldr	r3, [r4, #28]
 8007a1c:	2b00      	cmp	r3, #0
 8007a1e:	d0ea      	beq.n	80079f6 <Display::Detect(display::Type)+0x2c>
 8007a20:	bd38      	pop	{r3, r4, r5, pc}
	...

08007a24 <Display::Display()>:
 8007a24:	2304      	movs	r3, #4
 8007a26:	b510      	push	{r4, lr}
 8007a28:	6003      	str	r3, [r0, #0]
 8007a2a:	4b10      	ldr	r3, [pc, #64]	; (8007a6c <Display::Display()+0x48>)
 8007a2c:	4a10      	ldr	r2, [pc, #64]	; (8007a70 <Display::Display()+0x4c>)
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	6043      	str	r3, [r0, #4]
 8007a32:	2321      	movs	r3, #33	; 0x21
 8007a34:	7203      	strb	r3, [r0, #8]
 8007a36:	4b0f      	ldr	r3, [pc, #60]	; (8007a74 <Display::Display()+0x50>)
 8007a38:	60c3      	str	r3, [r0, #12]
 8007a3a:	2300      	movs	r3, #0
 8007a3c:	8203      	strh	r3, [r0, #16]
 8007a3e:	6142      	str	r2, [r0, #20]
 8007a40:	61c3      	str	r3, [r0, #28]
 8007a42:	227f      	movs	r2, #127	; 0x7f
 8007a44:	4b0c      	ldr	r3, [pc, #48]	; (8007a78 <Display::Display()+0x54>)
 8007a46:	8302      	strh	r2, [r0, #24]
 8007a48:	4604      	mov	r4, r0
 8007a4a:	2102      	movs	r1, #2
 8007a4c:	6018      	str	r0, [r3, #0]
 8007a4e:	f7ff ffbc 	bl	80079ca <Display::Detect(display::Type)>
 8007a52:	4620      	mov	r0, r4
 8007a54:	f7ff ffa0 	bl	8007998 <Display::Detect7Segment()>
 8007a58:	69e3      	ldr	r3, [r4, #28]
 8007a5a:	b10b      	cbz	r3, 8007a60 <Display::Display()+0x3c>
 8007a5c:	f7f9 f8b6 	bl	8000bcc <display::timeout::gpio_init()>
 8007a60:	69e0      	ldr	r0, [r4, #28]
 8007a62:	f7ff ff71 	bl	8007948 <Display::PrintInfo() [clone .isra.0]>
 8007a66:	4620      	mov	r0, r4
 8007a68:	bd10      	pop	{r4, pc}
 8007a6a:	bf00      	nop
 8007a6c:	200027ac 	andcs	r2, r0, ip, lsr #15
 8007a70:	000493e0 	andeq	r9, r4, r0, ror #7
 8007a74:	00061a80 	andeq	r1, r6, r0, lsl #21
 8007a78:	20002684 	andcs	r2, r0, r4, lsl #13

08007a7c <Ssd1306::~Ssd1306()>:
 8007a7c:	4770      	bx	lr

08007a7e <Ssd1306::SetCursor(unsigned long)>:
 8007a7e:	4770      	bx	lr

08007a80 <Ssd1306::PrintInfo()>:
 8007a80:	b410      	push	{r4}
 8007a82:	e9d0 3201 	ldrd	r3, r2, [r0, #4]
 8007a86:	7e44      	ldrb	r4, [r0, #25]
 8007a88:	4904      	ldr	r1, [pc, #16]	; (8007a9c <Ssd1306::PrintInfo()+0x1c>)
 8007a8a:	4805      	ldr	r0, [pc, #20]	; (8007aa0 <Ssd1306::PrintInfo()+0x20>)
 8007a8c:	2c00      	cmp	r4, #0
 8007a8e:	bf08      	it	eq
 8007a90:	4601      	moveq	r1, r0
 8007a92:	4804      	ldr	r0, [pc, #16]	; (8007aa4 <Ssd1306::PrintInfo()+0x24>)
 8007a94:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007a98:	f7fa b8e8 	b.w	8001c6c <printf>
 8007a9c:	0800bd4b 	stmdaeq	r0, {r0, r1, r3, r6, r8, sl, fp, ip, sp, pc}
 8007aa0:	0800bd52 	stmdaeq	r0, {r1, r4, r6, r8, sl, fp, ip, sp, pc}
 8007aa4:	0800bd5a 	stmdaeq	r0, {r1, r3, r4, r6, r8, sl, fp, ip, sp, pc}

08007aa8 <Ssd1306::~Ssd1306()>:
 8007aa8:	b510      	push	{r4, lr}
 8007aaa:	4604      	mov	r4, r0
 8007aac:	f000 fd03 	bl	80084b6 <operator delete(void*)>
 8007ab0:	4620      	mov	r0, r4
 8007ab2:	bd10      	pop	{r4, pc}

08007ab4 <HAL_I2C::Setup()>:
 8007ab4:	b510      	push	{r4, lr}
 8007ab6:	4604      	mov	r4, r0
 8007ab8:	7800      	ldrb	r0, [r0, #0]
 8007aba:	f001 fe01 	bl	80096c0 <gd32_i2c_set_address>
 8007abe:	6860      	ldr	r0, [r4, #4]
 8007ac0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007ac4:	f001 bdf4 	b.w	80096b0 <gd32_i2c_set_baudrate>

08007ac8 <Ssd1306::PutChar(int)>:
 8007ac8:	b538      	push	{r3, r4, r5, lr}
 8007aca:	e9d0 2308 	ldrd	r2, r3, [r0, #32]
 8007ace:	f1a1 0420 	sub.w	r4, r1, #32
 8007ad2:	2c5f      	cmp	r4, #95	; 0x5f
 8007ad4:	bf88      	it	hi
 8007ad6:	2120      	movhi	r1, #32
 8007ad8:	f103 0501 	add.w	r5, r3, #1
 8007adc:	6245      	str	r5, [r0, #36]	; 0x24
 8007ade:	54d1      	strb	r1, [r2, r3]
 8007ae0:	f100 0010 	add.w	r0, r0, #16
 8007ae4:	bf88      	it	hi
 8007ae6:	2400      	movhi	r4, #0
 8007ae8:	f7ff ffe4 	bl	8007ab4 <HAL_I2C::Setup()>
 8007aec:	4804      	ldr	r0, [pc, #16]	; (8007b00 <Ssd1306::PutChar(int)+0x38>)
 8007aee:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
 8007af2:	4420      	add	r0, r4
 8007af4:	2107      	movs	r1, #7
 8007af6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007afa:	f001 bde7 	b.w	80096cc <gd32_i2c_write>
 8007afe:	bf00      	nop
 8007b00:	0800bd6c 	stmdaeq	r0, {r2, r3, r5, r6, r8, sl, fp, ip, sp, pc}

08007b04 <Ssd1306::PutString(char const*)>:
 8007b04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b06:	4604      	mov	r4, r0
 8007b08:	460e      	mov	r6, r1
 8007b0a:	460f      	mov	r7, r1
 8007b0c:	463d      	mov	r5, r7
 8007b0e:	f817 1b01 	ldrb.w	r1, [r7], #1
 8007b12:	b939      	cbnz	r1, 8007b24 <Ssd1306::PutString(char const*)+0x20>
 8007b14:	7b23      	ldrb	r3, [r4, #12]
 8007b16:	b123      	cbz	r3, 8007b22 <Ssd1306::PutString(char const*)+0x1e>
 8007b18:	7321      	strb	r1, [r4, #12]
 8007b1a:	1bad      	subs	r5, r5, r6
 8007b1c:	6863      	ldr	r3, [r4, #4]
 8007b1e:	42ab      	cmp	r3, r5
 8007b20:	d804      	bhi.n	8007b2c <Ssd1306::PutString(char const*)+0x28>
 8007b22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007b24:	4620      	mov	r0, r4
 8007b26:	f7ff ffcf 	bl	8007ac8 <Ssd1306::PutChar(int)>
 8007b2a:	e7ef      	b.n	8007b0c <Ssd1306::PutString(char const*)+0x8>
 8007b2c:	2120      	movs	r1, #32
 8007b2e:	4620      	mov	r0, r4
 8007b30:	f7ff ffca 	bl	8007ac8 <Ssd1306::PutChar(int)>
 8007b34:	3501      	adds	r5, #1
 8007b36:	e7f1      	b.n	8007b1c <Ssd1306::PutString(char const*)+0x18>

08007b38 <Ssd1306::Text(char const*, unsigned long)>:
 8007b38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b3a:	6843      	ldr	r3, [r0, #4]
 8007b3c:	429a      	cmp	r2, r3
 8007b3e:	bf28      	it	cs
 8007b40:	461a      	movcs	r2, r3
 8007b42:	4604      	mov	r4, r0
 8007b44:	4615      	mov	r5, r2
 8007b46:	460e      	mov	r6, r1
 8007b48:	188f      	adds	r7, r1, r2
 8007b4a:	42be      	cmp	r6, r7
 8007b4c:	d107      	bne.n	8007b5e <Ssd1306::Text(char const*, unsigned long)+0x26>
 8007b4e:	7b23      	ldrb	r3, [r4, #12]
 8007b50:	b123      	cbz	r3, 8007b5c <Ssd1306::Text(char const*, unsigned long)+0x24>
 8007b52:	2300      	movs	r3, #0
 8007b54:	7323      	strb	r3, [r4, #12]
 8007b56:	6863      	ldr	r3, [r4, #4]
 8007b58:	42ab      	cmp	r3, r5
 8007b5a:	d806      	bhi.n	8007b6a <Ssd1306::Text(char const*, unsigned long)+0x32>
 8007b5c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007b5e:	f816 1b01 	ldrb.w	r1, [r6], #1
 8007b62:	4620      	mov	r0, r4
 8007b64:	f7ff ffb0 	bl	8007ac8 <Ssd1306::PutChar(int)>
 8007b68:	e7ef      	b.n	8007b4a <Ssd1306::Text(char const*, unsigned long)+0x12>
 8007b6a:	2120      	movs	r1, #32
 8007b6c:	4620      	mov	r0, r4
 8007b6e:	f7ff ffab 	bl	8007ac8 <Ssd1306::PutChar(int)>
 8007b72:	3501      	adds	r5, #1
 8007b74:	e7ef      	b.n	8007b56 <Ssd1306::Text(char const*, unsigned long)+0x1e>

08007b76 <Ssd1306::InitMembers()>:
 8007b76:	b538      	push	{r3, r4, r5, lr}
 8007b78:	2315      	movs	r3, #21
 8007b7a:	6043      	str	r3, [r0, #4]
 8007b7c:	7e03      	ldrb	r3, [r0, #24]
 8007b7e:	4604      	mov	r4, r0
 8007b80:	b193      	cbz	r3, 8007ba8 <Ssd1306::InitMembers()+0x32>
 8007b82:	3b01      	subs	r3, #1
 8007b84:	2b01      	cmp	r3, #1
 8007b86:	d912      	bls.n	8007bae <Ssd1306::InitMembers()+0x38>
 8007b88:	2008      	movs	r0, #8
 8007b8a:	2304      	movs	r3, #4
 8007b8c:	2515      	movs	r5, #21
 8007b8e:	60a0      	str	r0, [r4, #8]
 8007b90:	61e3      	str	r3, [r4, #28]
 8007b92:	4368      	muls	r0, r5
 8007b94:	f000 fc95 	bl	80084c2 <operator new[](unsigned int)>
 8007b98:	68a3      	ldr	r3, [r4, #8]
 8007b9a:	6220      	str	r0, [r4, #32]
 8007b9c:	fb05 0303 	mla	r3, r5, r3, r0
 8007ba0:	2220      	movs	r2, #32
 8007ba2:	4283      	cmp	r3, r0
 8007ba4:	d105      	bne.n	8007bb2 <Ssd1306::InitMembers()+0x3c>
 8007ba6:	bd38      	pop	{r3, r4, r5, pc}
 8007ba8:	2008      	movs	r0, #8
 8007baa:	4603      	mov	r3, r0
 8007bac:	e7ee      	b.n	8007b8c <Ssd1306::InitMembers()+0x16>
 8007bae:	2004      	movs	r0, #4
 8007bb0:	e7fb      	b.n	8007baa <Ssd1306::InitMembers()+0x34>
 8007bb2:	f800 2b01 	strb.w	r2, [r0], #1
 8007bb6:	e7f4      	b.n	8007ba2 <Ssd1306::InitMembers()+0x2c>

08007bb8 <Ssd1306::Ssd1306(TOledPanel)>:
 8007bb8:	b510      	push	{r4, lr}
 8007bba:	4a09      	ldr	r2, [pc, #36]	; (8007be0 <Ssd1306::Ssd1306(TOledPanel)+0x28>)
 8007bbc:	6002      	str	r2, [r0, #0]
 8007bbe:	2300      	movs	r3, #0
 8007bc0:	223c      	movs	r2, #60	; 0x3c
 8007bc2:	e9c0 3308 	strd	r3, r3, [r0, #32]
 8007bc6:	7303      	strb	r3, [r0, #12]
 8007bc8:	7402      	strb	r2, [r0, #16]
 8007bca:	7643      	strb	r3, [r0, #25]
 8007bcc:	4a05      	ldr	r2, [pc, #20]	; (8007be4 <Ssd1306::Ssd1306(TOledPanel)+0x2c>)
 8007bce:	4b06      	ldr	r3, [pc, #24]	; (8007be8 <Ssd1306::Ssd1306(TOledPanel)+0x30>)
 8007bd0:	6142      	str	r2, [r0, #20]
 8007bd2:	4604      	mov	r4, r0
 8007bd4:	7601      	strb	r1, [r0, #24]
 8007bd6:	6018      	str	r0, [r3, #0]
 8007bd8:	f7ff ffcd 	bl	8007b76 <Ssd1306::InitMembers()>
 8007bdc:	4620      	mov	r0, r4
 8007bde:	bd10      	pop	{r4, pc}
 8007be0:	0800c044 	stmdaeq	r0, {r2, r6, lr, pc}
 8007be4:	00061a80 	andeq	r1, r6, r0, lsl #21
 8007be8:	20002710 	andcs	r2, r0, r0, lsl r7

08007bec <Ssd1306::SendCommand(unsigned char)>:
 8007bec:	b507      	push	{r0, r1, r2, lr}
 8007bee:	2300      	movs	r3, #0
 8007bf0:	3010      	adds	r0, #16
 8007bf2:	f88d 3004 	strb.w	r3, [sp, #4]
 8007bf6:	f88d 1005 	strb.w	r1, [sp, #5]
 8007bfa:	f7ff ff5b 	bl	8007ab4 <HAL_I2C::Setup()>
 8007bfe:	2102      	movs	r1, #2
 8007c00:	a801      	add	r0, sp, #4
 8007c02:	f001 fd63 	bl	80096cc <gd32_i2c_write>
 8007c06:	b003      	add	sp, #12
 8007c08:	f85d fb04 	ldr.w	pc, [sp], #4

08007c0c <Ssd1306::SetCursorPos(unsigned long, unsigned long)>:
 8007c0c:	2914      	cmp	r1, #20
 8007c0e:	b570      	push	{r4, r5, r6, lr}
 8007c10:	4606      	mov	r6, r0
 8007c12:	4615      	mov	r5, r2
 8007c14:	d825      	bhi.n	8007c62 <Ssd1306::SetCursorPos(unsigned long, unsigned long)+0x56>
 8007c16:	6883      	ldr	r3, [r0, #8]
 8007c18:	4293      	cmp	r3, r2
 8007c1a:	d922      	bls.n	8007c62 <Ssd1306::SetCursorPos(unsigned long, unsigned long)+0x56>
 8007c1c:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8007c20:	7e43      	ldrb	r3, [r0, #25]
 8007c22:	004c      	lsls	r4, r1, #1
 8007c24:	b2e4      	uxtb	r4, r4
 8007c26:	b10b      	cbz	r3, 8007c2c <Ssd1306::SetCursorPos(unsigned long, unsigned long)+0x20>
 8007c28:	3404      	adds	r4, #4
 8007c2a:	b2e4      	uxtb	r4, r4
 8007c2c:	f004 010e 	and.w	r1, r4, #14
 8007c30:	4630      	mov	r0, r6
 8007c32:	f7ff ffdb 	bl	8007bec <Ssd1306::SendCommand(unsigned char)>
 8007c36:	0921      	lsrs	r1, r4, #4
 8007c38:	f041 0110 	orr.w	r1, r1, #16
 8007c3c:	4630      	mov	r0, r6
 8007c3e:	f7ff ffd5 	bl	8007bec <Ssd1306::SendCommand(unsigned char)>
 8007c42:	f065 014f 	orn	r1, r5, #79	; 0x4f
 8007c46:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007c4a:	b2c9      	uxtb	r1, r1
 8007c4c:	4630      	mov	r0, r6
 8007c4e:	ebc5 05c5 	rsb	r5, r5, r5, lsl #3
 8007c52:	f7ff ffcb 	bl	8007bec <Ssd1306::SendCommand(unsigned char)>
 8007c56:	2306      	movs	r3, #6
 8007c58:	fbb4 f4f3 	udiv	r4, r4, r3
 8007c5c:	4425      	add	r5, r4
 8007c5e:	b2ad      	uxth	r5, r5
 8007c60:	6275      	str	r5, [r6, #36]	; 0x24
 8007c62:	bd70      	pop	{r4, r5, r6, pc}

08007c64 <Ssd1306::TextLine(unsigned long, char const*, unsigned long)>:
 8007c64:	b5e0      	push	{r5, r6, r7, lr}
 8007c66:	461f      	mov	r7, r3
 8007c68:	6883      	ldr	r3, [r0, #8]
 8007c6a:	428b      	cmp	r3, r1
 8007c6c:	4605      	mov	r5, r0
 8007c6e:	4616      	mov	r6, r2
 8007c70:	d30b      	bcc.n	8007c8a <Ssd1306::TextLine(unsigned long, char const*, unsigned long)+0x26>
 8007c72:	1e4a      	subs	r2, r1, #1
 8007c74:	b2d2      	uxtb	r2, r2
 8007c76:	2100      	movs	r1, #0
 8007c78:	f7ff ffc8 	bl	8007c0c <Ssd1306::SetCursorPos(unsigned long, unsigned long)>
 8007c7c:	463a      	mov	r2, r7
 8007c7e:	4631      	mov	r1, r6
 8007c80:	4628      	mov	r0, r5
 8007c82:	e8bd 40e0 	ldmia.w	sp!, {r5, r6, r7, lr}
 8007c86:	f7ff bf57 	b.w	8007b38 <Ssd1306::Text(char const*, unsigned long)>
 8007c8a:	bde0      	pop	{r5, r6, r7, pc}

08007c8c <Ssd1306::ClearLine(unsigned long)>:
 8007c8c:	6883      	ldr	r3, [r0, #8]
 8007c8e:	428b      	cmp	r3, r1
 8007c90:	b513      	push	{r0, r1, r4, lr}
 8007c92:	4604      	mov	r4, r0
 8007c94:	d31a      	bcc.n	8007ccc <Ssd1306::ClearLine(unsigned long)+0x40>
 8007c96:	1e4a      	subs	r2, r1, #1
 8007c98:	b2d2      	uxtb	r2, r2
 8007c9a:	2100      	movs	r1, #0
 8007c9c:	9201      	str	r2, [sp, #4]
 8007c9e:	f7ff ffb5 	bl	8007c0c <Ssd1306::SetCursorPos(unsigned long, unsigned long)>
 8007ca2:	f104 0010 	add.w	r0, r4, #16
 8007ca6:	f7ff ff05 	bl	8007ab4 <HAL_I2C::Setup()>
 8007caa:	2181      	movs	r1, #129	; 0x81
 8007cac:	480a      	ldr	r0, [pc, #40]	; (8007cd8 <Ssd1306::ClearLine(unsigned long)+0x4c>)
 8007cae:	f001 fd0d 	bl	80096cc <gd32_i2c_write>
 8007cb2:	9a01      	ldr	r2, [sp, #4]
 8007cb4:	2100      	movs	r1, #0
 8007cb6:	4620      	mov	r0, r4
 8007cb8:	f7ff ffa8 	bl	8007c0c <Ssd1306::SetCursorPos(unsigned long, unsigned long)>
 8007cbc:	e9d4 3208 	ldrd	r3, r2, [r4, #32]
 8007cc0:	4413      	add	r3, r2
 8007cc2:	f103 0215 	add.w	r2, r3, #21
 8007cc6:	2120      	movs	r1, #32
 8007cc8:	429a      	cmp	r2, r3
 8007cca:	d101      	bne.n	8007cd0 <Ssd1306::ClearLine(unsigned long)+0x44>
 8007ccc:	b002      	add	sp, #8
 8007cce:	bd10      	pop	{r4, pc}
 8007cd0:	f803 1b01 	strb.w	r1, [r3], #1
 8007cd4:	e7f8      	b.n	8007cc8 <Ssd1306::ClearLine(unsigned long)+0x3c>
 8007cd6:	bf00      	nop
 8007cd8:	20002688 	andcs	r2, r0, r8, lsl #13

08007cdc <Ssd1306::SetSleep(bool)>:
 8007cdc:	b111      	cbz	r1, 8007ce4 <Ssd1306::SetSleep(bool)+0x8>
 8007cde:	21ae      	movs	r1, #174	; 0xae
 8007ce0:	f7ff bf84 	b.w	8007bec <Ssd1306::SendCommand(unsigned char)>
 8007ce4:	21af      	movs	r1, #175	; 0xaf
 8007ce6:	e7fb      	b.n	8007ce0 <Ssd1306::SetSleep(bool)+0x4>

08007ce8 <Ssd1306::SetContrast(unsigned char)>:
 8007ce8:	b538      	push	{r3, r4, r5, lr}
 8007cea:	4604      	mov	r4, r0
 8007cec:	460d      	mov	r5, r1
 8007cee:	2181      	movs	r1, #129	; 0x81
 8007cf0:	f7ff ff7c 	bl	8007bec <Ssd1306::SendCommand(unsigned char)>
 8007cf4:	4629      	mov	r1, r5
 8007cf6:	4620      	mov	r0, r4
 8007cf8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007cfc:	f7ff bf76 	b.w	8007bec <Ssd1306::SendCommand(unsigned char)>

08007d00 <Ssd1306::CheckSH1106()>:
 8007d00:	b530      	push	{r4, r5, lr}
 8007d02:	2100      	movs	r1, #0
 8007d04:	b087      	sub	sp, #28
 8007d06:	4604      	mov	r4, r0
 8007d08:	f7ff ff70 	bl	8007bec <Ssd1306::SendCommand(unsigned char)>
 8007d0c:	2190      	movs	r1, #144	; 0x90
 8007d0e:	4620      	mov	r0, r4
 8007d10:	f7ff ff6c 	bl	8007bec <Ssd1306::SendCommand(unsigned char)>
 8007d14:	21b0      	movs	r1, #176	; 0xb0
 8007d16:	4620      	mov	r0, r4
 8007d18:	f7ff ff68 	bl	8007bec <Ssd1306::SendCommand(unsigned char)>
 8007d1c:	4b21      	ldr	r3, [pc, #132]	; (8007da4 <Ssd1306::CheckSH1106()+0xa4>)
 8007d1e:	f104 0510 	add.w	r5, r4, #16
 8007d22:	6818      	ldr	r0, [r3, #0]
 8007d24:	9002      	str	r0, [sp, #8]
 8007d26:	791b      	ldrb	r3, [r3, #4]
 8007d28:	f88d 300c 	strb.w	r3, [sp, #12]
 8007d2c:	4628      	mov	r0, r5
 8007d2e:	f7ff fec1 	bl	8007ab4 <HAL_I2C::Setup()>
 8007d32:	2105      	movs	r1, #5
 8007d34:	a802      	add	r0, sp, #8
 8007d36:	f001 fcc9 	bl	80096cc <gd32_i2c_write>
 8007d3a:	2100      	movs	r1, #0
 8007d3c:	4620      	mov	r0, r4
 8007d3e:	f7ff ff55 	bl	8007bec <Ssd1306::SendCommand(unsigned char)>
 8007d42:	2190      	movs	r1, #144	; 0x90
 8007d44:	4620      	mov	r0, r4
 8007d46:	f7ff ff51 	bl	8007bec <Ssd1306::SendCommand(unsigned char)>
 8007d4a:	21b0      	movs	r1, #176	; 0xb0
 8007d4c:	4620      	mov	r0, r4
 8007d4e:	f7ff ff4d 	bl	8007bec <Ssd1306::SendCommand(unsigned char)>
 8007d52:	2300      	movs	r3, #0
 8007d54:	4628      	mov	r0, r5
 8007d56:	9304      	str	r3, [sp, #16]
 8007d58:	f88d 3014 	strb.w	r3, [sp, #20]
 8007d5c:	f7ff feaa 	bl	8007ab4 <HAL_I2C::Setup()>
 8007d60:	2340      	movs	r3, #64	; 0x40
 8007d62:	2101      	movs	r1, #1
 8007d64:	a801      	add	r0, sp, #4
 8007d66:	f88d 3004 	strb.w	r3, [sp, #4]
 8007d6a:	f001 fcaf 	bl	80096cc <gd32_i2c_write>
 8007d6e:	4628      	mov	r0, r5
 8007d70:	f7ff fea0 	bl	8007ab4 <HAL_I2C::Setup()>
 8007d74:	2105      	movs	r1, #5
 8007d76:	a804      	add	r0, sp, #16
 8007d78:	f001 fd0e 	bl	8009798 <gd32_i2c_read>
 8007d7c:	aa02      	add	r2, sp, #8
 8007d7e:	a904      	add	r1, sp, #16
 8007d80:	2004      	movs	r0, #4
 8007d82:	3801      	subs	r0, #1
 8007d84:	d201      	bcs.n	8007d8a <Ssd1306::CheckSH1106()+0x8a>
 8007d86:	2300      	movs	r3, #0
 8007d88:	e006      	b.n	8007d98 <Ssd1306::CheckSH1106()+0x98>
 8007d8a:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 8007d8e:	f811 5f01 	ldrb.w	r5, [r1, #1]!
 8007d92:	42ab      	cmp	r3, r5
 8007d94:	d0f5      	beq.n	8007d82 <Ssd1306::CheckSH1106()+0x82>
 8007d96:	1b5b      	subs	r3, r3, r5
 8007d98:	fab3 f383 	clz	r3, r3
 8007d9c:	095b      	lsrs	r3, r3, #5
 8007d9e:	7663      	strb	r3, [r4, #25]
 8007da0:	b007      	add	sp, #28
 8007da2:	bd30      	pop	{r4, r5, pc}
 8007da4:	0800bd66 	stmdaeq	r0, {r1, r2, r5, r6, r8, sl, fp, ip, sp, pc}

08007da8 <Ssd1306::Cls()>:
 8007da8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007dac:	7e46      	ldrb	r6, [r0, #25]
 8007dae:	f8df 9078 	ldr.w	r9, [pc, #120]	; 8007e28 <Ssd1306::Cls()+0x80>
 8007db2:	00b6      	lsls	r6, r6, #2
 8007db4:	b2f7      	uxtb	r7, r6
 8007db6:	4604      	mov	r4, r0
 8007db8:	2500      	movs	r5, #0
 8007dba:	f047 0810 	orr.w	r8, r7, #16
 8007dbe:	69e3      	ldr	r3, [r4, #28]
 8007dc0:	42ab      	cmp	r3, r5
 8007dc2:	4639      	mov	r1, r7
 8007dc4:	4620      	mov	r0, r4
 8007dc6:	d815      	bhi.n	8007df4 <Ssd1306::Cls()+0x4c>
 8007dc8:	f7ff ff10 	bl	8007bec <Ssd1306::SendCommand(unsigned char)>
 8007dcc:	4641      	mov	r1, r8
 8007dce:	4620      	mov	r0, r4
 8007dd0:	f7ff ff0c 	bl	8007bec <Ssd1306::SendCommand(unsigned char)>
 8007dd4:	21b0      	movs	r1, #176	; 0xb0
 8007dd6:	4620      	mov	r0, r4
 8007dd8:	f7ff ff08 	bl	8007bec <Ssd1306::SendCommand(unsigned char)>
 8007ddc:	2300      	movs	r3, #0
 8007dde:	68a2      	ldr	r2, [r4, #8]
 8007de0:	6263      	str	r3, [r4, #36]	; 0x24
 8007de2:	6a23      	ldr	r3, [r4, #32]
 8007de4:	2115      	movs	r1, #21
 8007de6:	fb01 3202 	mla	r2, r1, r2, r3
 8007dea:	2120      	movs	r1, #32
 8007dec:	429a      	cmp	r2, r3
 8007dee:	d118      	bne.n	8007e22 <Ssd1306::Cls()+0x7a>
 8007df0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007df4:	f7ff fefa 	bl	8007bec <Ssd1306::SendCommand(unsigned char)>
 8007df8:	4641      	mov	r1, r8
 8007dfa:	4620      	mov	r0, r4
 8007dfc:	f7ff fef6 	bl	8007bec <Ssd1306::SendCommand(unsigned char)>
 8007e00:	f065 014f 	orn	r1, r5, #79	; 0x4f
 8007e04:	b2c9      	uxtb	r1, r1
 8007e06:	4620      	mov	r0, r4
 8007e08:	f7ff fef0 	bl	8007bec <Ssd1306::SendCommand(unsigned char)>
 8007e0c:	f104 0010 	add.w	r0, r4, #16
 8007e10:	f7ff fe50 	bl	8007ab4 <HAL_I2C::Setup()>
 8007e14:	f106 0181 	add.w	r1, r6, #129	; 0x81
 8007e18:	4648      	mov	r0, r9
 8007e1a:	f001 fc57 	bl	80096cc <gd32_i2c_write>
 8007e1e:	3501      	adds	r5, #1
 8007e20:	e7cd      	b.n	8007dbe <Ssd1306::Cls()+0x16>
 8007e22:	f803 1b01 	strb.w	r1, [r3], #1
 8007e26:	e7e1      	b.n	8007dec <Ssd1306::Cls()+0x44>
 8007e28:	20002688 	andcs	r2, r0, r8, lsl #13

08007e2c <Ssd1306::Start()>:
 8007e2c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007e2e:	7c04      	ldrb	r4, [r0, #16]
 8007e30:	6946      	ldr	r6, [r0, #20]
 8007e32:	4605      	mov	r5, r0
 8007e34:	4620      	mov	r0, r4
 8007e36:	f001 fc43 	bl	80096c0 <gd32_i2c_set_address>
 8007e3a:	4630      	mov	r0, r6
 8007e3c:	f001 fc38 	bl	80096b0 <gd32_i2c_set_baudrate>
 8007e40:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8007e44:	2b07      	cmp	r3, #7
 8007e46:	d902      	bls.n	8007e4e <Ssd1306::Start()+0x22>
 8007e48:	3c50      	subs	r4, #80	; 0x50
 8007e4a:	2c0f      	cmp	r4, #15
 8007e4c:	d80f      	bhi.n	8007e6e <Ssd1306::Start()+0x42>
 8007e4e:	2101      	movs	r1, #1
 8007e50:	f10d 0007 	add.w	r0, sp, #7
 8007e54:	f001 fca0 	bl	8009798 <gd32_i2c_read>
 8007e58:	fab0 f480 	clz	r4, r0
 8007e5c:	0964      	lsrs	r4, r4, #5
 8007e5e:	b34c      	cbz	r4, 8007eb4 <Ssd1306::Start()+0x88>
 8007e60:	7e2e      	ldrb	r6, [r5, #24]
 8007e62:	b14e      	cbz	r6, 8007e78 <Ssd1306::Start()+0x4c>
 8007e64:	3e01      	subs	r6, #1
 8007e66:	2e01      	cmp	r6, #1
 8007e68:	d927      	bls.n	8007eba <Ssd1306::Start()+0x8e>
 8007e6a:	2400      	movs	r4, #0
 8007e6c:	e022      	b.n	8007eb4 <Ssd1306::Start()+0x88>
 8007e6e:	2100      	movs	r1, #0
 8007e70:	4608      	mov	r0, r1
 8007e72:	f001 fc2b 	bl	80096cc <gd32_i2c_write>
 8007e76:	e7ef      	b.n	8007e58 <Ssd1306::Start()+0x2c>
 8007e78:	4f15      	ldr	r7, [pc, #84]	; (8007ed0 <Ssd1306::Start()+0xa4>)
 8007e7a:	f817 1b01 	ldrb.w	r1, [r7], #1
 8007e7e:	4628      	mov	r0, r5
 8007e80:	3601      	adds	r6, #1
 8007e82:	f7ff feb3 	bl	8007bec <Ssd1306::SendCommand(unsigned char)>
 8007e86:	2e18      	cmp	r6, #24
 8007e88:	d1f7      	bne.n	8007e7a <Ssd1306::Start()+0x4e>
 8007e8a:	4a12      	ldr	r2, [pc, #72]	; (8007ed4 <Ssd1306::Start()+0xa8>)
 8007e8c:	2300      	movs	r3, #0
 8007e8e:	4611      	mov	r1, r2
 8007e90:	4618      	mov	r0, r3
 8007e92:	3301      	adds	r3, #1
 8007e94:	2b86      	cmp	r3, #134	; 0x86
 8007e96:	f802 0b01 	strb.w	r0, [r2], #1
 8007e9a:	d1fa      	bne.n	8007e92 <Ssd1306::Start()+0x66>
 8007e9c:	2340      	movs	r3, #64	; 0x40
 8007e9e:	700b      	strb	r3, [r1, #0]
 8007ea0:	4628      	mov	r0, r5
 8007ea2:	f7ff ff2d 	bl	8007d00 <Ssd1306::CheckSH1106()>
 8007ea6:	4628      	mov	r0, r5
 8007ea8:	f7ff ff7e 	bl	8007da8 <Ssd1306::Cls()>
 8007eac:	21af      	movs	r1, #175	; 0xaf
 8007eae:	4628      	mov	r0, r5
 8007eb0:	f7ff fe9c 	bl	8007bec <Ssd1306::SendCommand(unsigned char)>
 8007eb4:	4620      	mov	r0, r4
 8007eb6:	b003      	add	sp, #12
 8007eb8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007eba:	4f07      	ldr	r7, [pc, #28]	; (8007ed8 <Ssd1306::Start()+0xac>)
 8007ebc:	2600      	movs	r6, #0
 8007ebe:	f817 1b01 	ldrb.w	r1, [r7], #1
 8007ec2:	4628      	mov	r0, r5
 8007ec4:	3601      	adds	r6, #1
 8007ec6:	f7ff fe91 	bl	8007bec <Ssd1306::SendCommand(unsigned char)>
 8007eca:	2e18      	cmp	r6, #24
 8007ecc:	d1f7      	bne.n	8007ebe <Ssd1306::Start()+0x92>
 8007ece:	e7dc      	b.n	8007e8a <Ssd1306::Start()+0x5e>
 8007ed0:	0800c024 	stmdaeq	r0, {r2, r5, lr, pc}
 8007ed4:	20002688 	andcs	r2, r0, r8, lsl #13
 8007ed8:	0800c00c 	stmdaeq	r0, {r2, r3, lr, pc}

08007edc <Ssd1306::SetFlipVertically(bool)>:
 8007edc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ee0:	4604      	mov	r4, r0
 8007ee2:	b181      	cbz	r1, 8007f06 <Ssd1306::SetFlipVertically(bool)+0x2a>
 8007ee4:	21a0      	movs	r1, #160	; 0xa0
 8007ee6:	f7ff fe81 	bl	8007bec <Ssd1306::SendCommand(unsigned char)>
 8007eea:	21c0      	movs	r1, #192	; 0xc0
 8007eec:	4620      	mov	r0, r4
 8007eee:	f7ff fe7d 	bl	8007bec <Ssd1306::SendCommand(unsigned char)>
 8007ef2:	f8df 905c 	ldr.w	r9, [pc, #92]	; 8007f50 <Ssd1306::SetFlipVertically(bool)+0x74>
 8007ef6:	2600      	movs	r6, #0
 8007ef8:	f04f 0815 	mov.w	r8, #21
 8007efc:	68a3      	ldr	r3, [r4, #8]
 8007efe:	42b3      	cmp	r3, r6
 8007f00:	d806      	bhi.n	8007f10 <Ssd1306::SetFlipVertically(bool)+0x34>
 8007f02:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007f06:	21a1      	movs	r1, #161	; 0xa1
 8007f08:	f7ff fe70 	bl	8007bec <Ssd1306::SendCommand(unsigned char)>
 8007f0c:	21c8      	movs	r1, #200	; 0xc8
 8007f0e:	e7ed      	b.n	8007eec <Ssd1306::SetFlipVertically(bool)+0x10>
 8007f10:	b2f2      	uxtb	r2, r6
 8007f12:	2100      	movs	r1, #0
 8007f14:	4620      	mov	r0, r4
 8007f16:	f7ff fe79 	bl	8007c0c <Ssd1306::SetCursorPos(unsigned long, unsigned long)>
 8007f1a:	fb08 fb06 	mul.w	fp, r8, r6
 8007f1e:	2700      	movs	r7, #0
 8007f20:	f104 0a10 	add.w	sl, r4, #16
 8007f24:	6a23      	ldr	r3, [r4, #32]
 8007f26:	443b      	add	r3, r7
 8007f28:	3701      	adds	r7, #1
 8007f2a:	f813 000b 	ldrb.w	r0, [r3, fp]
 8007f2e:	3820      	subs	r0, #32
 8007f30:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
 8007f34:	eb09 0500 	add.w	r5, r9, r0
 8007f38:	4650      	mov	r0, sl
 8007f3a:	f7ff fdbb 	bl	8007ab4 <HAL_I2C::Setup()>
 8007f3e:	2107      	movs	r1, #7
 8007f40:	4628      	mov	r0, r5
 8007f42:	f001 fbc3 	bl	80096cc <gd32_i2c_write>
 8007f46:	2f15      	cmp	r7, #21
 8007f48:	d1ec      	bne.n	8007f24 <Ssd1306::SetFlipVertically(bool)+0x48>
 8007f4a:	3601      	adds	r6, #1
 8007f4c:	e7d6      	b.n	8007efc <Ssd1306::SetFlipVertically(bool)+0x20>
 8007f4e:	bf00      	nop
 8007f50:	0800bd6c 	stmdaeq	r0, {r2, r3, r5, r6, r8, sl, fp, ip, sp, pc}

08007f54 <console_putc>:
 8007f54:	f001 bac6 	b.w	80094e4 <uart0_putc>

08007f58 <console_puts>:
 8007f58:	f000 bca7 	b.w	80088aa <uart0_puts>

08007f5c <console_error>:
 8007f5c:	b510      	push	{r4, lr}
 8007f5e:	4604      	mov	r4, r0
 8007f60:	4805      	ldr	r0, [pc, #20]	; (8007f78 <console_error+0x1c>)
 8007f62:	f000 fca2 	bl	80088aa <uart0_puts>
 8007f66:	4620      	mov	r0, r4
 8007f68:	f000 fc9f 	bl	80088aa <uart0_puts>
 8007f6c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007f70:	4802      	ldr	r0, [pc, #8]	; (8007f7c <console_error+0x20>)
 8007f72:	f000 bc9a 	b.w	80088aa <uart0_puts>
 8007f76:	bf00      	nop
 8007f78:	0800c08e 	stmdaeq	r0, {r1, r2, r3, r7, lr, pc}
 8007f7c:	0800c07c 	stmdaeq	r0, {r2, r3, r4, r5, r6, lr, pc}

08007f80 <FirmwareVersion::FirmwareVersion(char const*, char const*, char const*)>:
 8007f80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007f84:	4d15      	ldr	r5, [pc, #84]	; (8007fdc <FirmwareVersion::FirmwareVersion(char const*, char const*, char const*)+0x5c>)
 8007f86:	461e      	mov	r6, r3
 8007f88:	4b15      	ldr	r3, [pc, #84]	; (8007fe0 <FirmwareVersion::FirmwareVersion(char const*, char const*, char const*)+0x60>)
 8007f8a:	b086      	sub	sp, #24
 8007f8c:	6018      	str	r0, [r3, #0]
 8007f8e:	4604      	mov	r4, r0
 8007f90:	4617      	mov	r7, r2
 8007f92:	f105 0803 	add.w	r8, r5, #3
 8007f96:	2203      	movs	r2, #3
 8007f98:	4628      	mov	r0, r5
 8007f9a:	f000 fb4b 	bl	8008634 <memmove>
 8007f9e:	4639      	mov	r1, r7
 8007fa0:	220b      	movs	r2, #11
 8007fa2:	4640      	mov	r0, r8
 8007fa4:	f000 fb46 	bl	8008634 <memmove>
 8007fa8:	f105 030e 	add.w	r3, r5, #14
 8007fac:	4631      	mov	r1, r6
 8007fae:	2208      	movs	r2, #8
 8007fb0:	4618      	mov	r0, r3
 8007fb2:	f000 fb3f 	bl	8008634 <memmove>
 8007fb6:	2308      	movs	r3, #8
 8007fb8:	e9cd 8303 	strd	r8, r3, [sp, #12]
 8007fbc:	230b      	movs	r3, #11
 8007fbe:	9302      	str	r3, [sp, #8]
 8007fc0:	4b08      	ldr	r3, [pc, #32]	; (8007fe4 <FirmwareVersion::FirmwareVersion(char const*, char const*, char const*)+0x64>)
 8007fc2:	9005      	str	r0, [sp, #20]
 8007fc4:	e9cd 5300 	strd	r5, r3, [sp]
 8007fc8:	4a07      	ldr	r2, [pc, #28]	; (8007fe8 <FirmwareVersion::FirmwareVersion(char const*, char const*, char const*)+0x68>)
 8007fca:	4808      	ldr	r0, [pc, #32]	; (8007fec <FirmwareVersion::FirmwareVersion(char const*, char const*, char const*)+0x6c>)
 8007fcc:	2303      	movs	r3, #3
 8007fce:	213f      	movs	r1, #63	; 0x3f
 8007fd0:	f7f9 fe5c 	bl	8001c8c <snprintf>
 8007fd4:	4620      	mov	r0, r4
 8007fd6:	b006      	add	sp, #24
 8007fd8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007fdc:	20002714 	andcs	r2, r0, r4, lsl r7
 8007fe0:	2000276c 	andcs	r2, r0, ip, ror #14
 8007fe4:	0800a598 	stmdaeq	r0, {r3, r4, r7, r8, sl, sp, pc}
 8007fe8:	0800c0a6 	stmdaeq	r0, {r1, r2, r5, r7, lr, pc}
 8007fec:	2000272a 	andcs	r2, r0, sl, lsr #14

08007ff0 <hardware::ledblink::display(unsigned long)>:
 8007ff0:	4770      	bx	lr

08007ff2 <Hardware::SetMode(hardware::ledblink::Mode)>:
 8007ff2:	b508      	push	{r3, lr}
 8007ff4:	7d03      	ldrb	r3, [r0, #20]
 8007ff6:	b9ab      	cbnz	r3, 8008024 <Hardware::SetMode(hardware::ledblink::Mode)+0x32>
 8007ff8:	6903      	ldr	r3, [r0, #16]
 8007ffa:	428b      	cmp	r3, r1
 8007ffc:	d012      	beq.n	8008024 <Hardware::SetMode(hardware::ledblink::Mode)+0x32>
 8007ffe:	6101      	str	r1, [r0, #16]
 8008000:	2905      	cmp	r1, #5
 8008002:	d81b      	bhi.n	800803c <Hardware::SetMode(hardware::ledblink::Mode)+0x4a>
 8008004:	e8df f001 	tbb	[pc, r1]
 8008008:	130f031a 	movwne	r0, #62234	; 0xf31a
 800800c:	23001816 	movwcs	r1, #2070	; 0x816
 8008010:	6183      	str	r3, [r0, #24]
 8008012:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8008016:	f503 3388 	add.w	r3, r3, #69632	; 0x11000
 800801a:	2201      	movs	r2, #1
 800801c:	611a      	str	r2, [r3, #16]
 800801e:	4608      	mov	r0, r1
 8008020:	f7ff ffe6 	bl	8007ff0 <hardware::ledblink::display(unsigned long)>
 8008024:	bd08      	pop	{r3, pc}
 8008026:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800802a:	6183      	str	r3, [r0, #24]
 800802c:	e7f7      	b.n	800801e <Hardware::SetMode(hardware::ledblink::Mode)+0x2c>
 800802e:	f240 134d 	movw	r3, #333	; 0x14d
 8008032:	e7fa      	b.n	800802a <Hardware::SetMode(hardware::ledblink::Mode)+0x38>
 8008034:	23c8      	movs	r3, #200	; 0xc8
 8008036:	e7f8      	b.n	800802a <Hardware::SetMode(hardware::ledblink::Mode)+0x38>
 8008038:	237d      	movs	r3, #125	; 0x7d
 800803a:	e7f6      	b.n	800802a <Hardware::SetMode(hardware::ledblink::Mode)+0x38>
 800803c:	2300      	movs	r3, #0
 800803e:	6183      	str	r3, [r0, #24]
 8008040:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8008044:	f503 3388 	add.w	r3, r3, #69632	; 0x11000
 8008048:	2201      	movs	r2, #1
 800804a:	615a      	str	r2, [r3, #20]
 800804c:	e7e7      	b.n	800801e <Hardware::SetMode(hardware::ledblink::Mode)+0x2c>

0800804e <Hardware::SetModeWithLock(hardware::ledblink::Mode, bool)>:
 800804e:	b538      	push	{r3, r4, r5, lr}
 8008050:	4604      	mov	r4, r0
 8008052:	2300      	movs	r3, #0
 8008054:	4615      	mov	r5, r2
 8008056:	7503      	strb	r3, [r0, #20]
 8008058:	f7ff ffcb 	bl	8007ff2 <Hardware::SetMode(hardware::ledblink::Mode)>
 800805c:	7525      	strb	r5, [r4, #20]
 800805e:	bd38      	pop	{r3, r4, r5, pc}

08008060 <Hardware::Hardware()>:
 8008060:	b530      	push	{r4, r5, lr}
 8008062:	4604      	mov	r4, r0
 8008064:	b091      	sub	sp, #68	; 0x44
 8008066:	f000 f8e7 	bl	8008238 <HwClock::HwClock()>
 800806a:	2306      	movs	r3, #6
 800806c:	2500      	movs	r5, #0
 800806e:	6123      	str	r3, [r4, #16]
 8008070:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8008074:	e9c4 3506 	strd	r3, r5, [r4, #24]
 8008078:	4b30      	ldr	r3, [pc, #192]	; (800813c <Hardware::Hardware()+0xdc>)
 800807a:	7325      	strb	r5, [r4, #12]
 800807c:	7525      	strb	r5, [r4, #20]
 800807e:	6225      	str	r5, [r4, #32]
 8008080:	601c      	str	r4, [r3, #0]
 8008082:	f7f8 f855 	bl	8000130 <console_init>
 8008086:	f000 fa1f 	bl	80084c8 <__libc_init_array>
 800808a:	f000 fc1d 	bl	80088c8 <systick_config>
 800808e:	f001 fdc5 	bl	8009c1c <udelay_init()>
 8008092:	f001 fa47 	bl	8009524 <gd32_adc_init()>
 8008096:	f001 fad7 	bl	8009648 <gd32_i2c_begin>
 800809a:	f240 7004 	movw	r0, #1796	; 0x704
 800809e:	f000 fed7 	bl	8008e50 <rcu_periph_clock_enable>
 80080a2:	4827      	ldr	r0, [pc, #156]	; (8008140 <Hardware::Hardware()+0xe0>)
 80080a4:	f001 f862 	bl	800916c <timer_deinit>
 80080a8:	2377      	movs	r3, #119	; 0x77
 80080aa:	a903      	add	r1, sp, #12
 80080ac:	f8ad 300c 	strh.w	r3, [sp, #12]
 80080b0:	4823      	ldr	r0, [pc, #140]	; (8008140 <Hardware::Hardware()+0xe0>)
 80080b2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80080b6:	9305      	str	r3, [sp, #20]
 80080b8:	f001 f8ba 	bl	8009230 <timer_init>
 80080bc:	4820      	ldr	r0, [pc, #128]	; (8008140 <Hardware::Hardware()+0xe0>)
 80080be:	f001 f8f5 	bl	80092ac <timer_enable>
 80080c2:	f240 701b 	movw	r0, #1819	; 0x71b
 80080c6:	f000 fec3 	bl	8008e50 <rcu_periph_clock_enable>
 80080ca:	f240 701c 	movw	r0, #1820	; 0x71c
 80080ce:	f000 febf 	bl	8008e50 <rcu_periph_clock_enable>
 80080d2:	f000 feb5 	bl	8008e40 <pmu_backup_write_enable>
 80080d6:	4629      	mov	r1, r5
 80080d8:	2002      	movs	r0, #2
 80080da:	f000 fca9 	bl	8008a30 <bkp_write_data>
 80080de:	2208      	movs	r2, #8
 80080e0:	2309      	movs	r3, #9
 80080e2:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80080e6:	a807      	add	r0, sp, #28
 80080e8:	237b      	movs	r3, #123	; 0x7b
 80080ea:	930c      	str	r3, [sp, #48]	; 0x30
 80080ec:	e9cd 5508 	strd	r5, r5, [sp, #32]
 80080f0:	9507      	str	r5, [sp, #28]
 80080f2:	950f      	str	r5, [sp, #60]	; 0x3c
 80080f4:	f000 fb40 	bl	8008778 <mktime>
 80080f8:	4629      	mov	r1, r5
 80080fa:	e9cd 0501 	strd	r0, r5, [sp, #4]
 80080fe:	a801      	add	r0, sp, #4
 8008100:	f000 fbb0 	bl	8008864 <settimeofday>
 8008104:	4620      	mov	r0, r4
 8008106:	f000 f98f 	bl	8008428 <HwClock::RtcProbe()>
 800810a:	4620      	mov	r0, r4
 800810c:	f000 f8a0 	bl	8008250 <HwClock::Print()>
 8008110:	f105 4580 	add.w	r5, r5, #1073741824	; 0x40000000
 8008114:	4620      	mov	r0, r4
 8008116:	f000 f8cf 	bl	80082b8 <HwClock::HcToSys()>
 800811a:	f505 3588 	add.w	r5, r5, #69632	; 0x11000
 800811e:	f240 6004 	movw	r0, #1540	; 0x604
 8008122:	f000 fe95 	bl	8008e50 <rcu_periph_clock_enable>
 8008126:	4628      	mov	r0, r5
 8008128:	2301      	movs	r3, #1
 800812a:	2203      	movs	r2, #3
 800812c:	2110      	movs	r1, #16
 800812e:	f000 fe01 	bl	8008d34 <gpio_init>
 8008132:	2301      	movs	r3, #1
 8008134:	4620      	mov	r0, r4
 8008136:	616b      	str	r3, [r5, #20]
 8008138:	b011      	add	sp, #68	; 0x44
 800813a:	bd30      	pop	{r4, r5, pc}
 800813c:	20002770 	andcs	r2, r0, r0, ror r7
 8008140:	40001000 	andmi	r1, r0, r0

08008144 <Hardware::SetTime(tm const*)>:
 8008144:	b500      	push	{lr}
 8008146:	b08b      	sub	sp, #44	; 0x2c
 8008148:	680b      	ldr	r3, [r1, #0]
 800814a:	9301      	str	r3, [sp, #4]
 800814c:	684b      	ldr	r3, [r1, #4]
 800814e:	9302      	str	r3, [sp, #8]
 8008150:	688b      	ldr	r3, [r1, #8]
 8008152:	9303      	str	r3, [sp, #12]
 8008154:	68cb      	ldr	r3, [r1, #12]
 8008156:	9304      	str	r3, [sp, #16]
 8008158:	690b      	ldr	r3, [r1, #16]
 800815a:	9305      	str	r3, [sp, #20]
 800815c:	694b      	ldr	r3, [r1, #20]
 800815e:	9306      	str	r3, [sp, #24]
 8008160:	a901      	add	r1, sp, #4
 8008162:	f000 f909 	bl	8008378 <HwClock::Set(rtc_time const*)>
 8008166:	2001      	movs	r0, #1
 8008168:	b00b      	add	sp, #44	; 0x2c
 800816a:	f85d fb04 	ldr.w	pc, [sp], #4

0800816e <Hardware::GetTime(tm*)>:
 800816e:	b513      	push	{r0, r1, r4, lr}
 8008170:	2000      	movs	r0, #0
 8008172:	460c      	mov	r4, r1
 8008174:	f000 fb8e 	bl	8008894 <time>
 8008178:	9001      	str	r0, [sp, #4]
 800817a:	a801      	add	r0, sp, #4
 800817c:	f000 fab8 	bl	80086f0 <localtime>
 8008180:	6943      	ldr	r3, [r0, #20]
 8008182:	6163      	str	r3, [r4, #20]
 8008184:	6903      	ldr	r3, [r0, #16]
 8008186:	6123      	str	r3, [r4, #16]
 8008188:	68c3      	ldr	r3, [r0, #12]
 800818a:	60e3      	str	r3, [r4, #12]
 800818c:	6883      	ldr	r3, [r0, #8]
 800818e:	60a3      	str	r3, [r4, #8]
 8008190:	6843      	ldr	r3, [r0, #4]
 8008192:	6063      	str	r3, [r4, #4]
 8008194:	6803      	ldr	r3, [r0, #0]
 8008196:	6023      	str	r3, [r4, #0]
 8008198:	b002      	add	sp, #8
 800819a:	bd10      	pop	{r4, pc}

0800819c <Hardware::Reboot()>:
 800819c:	b508      	push	{r3, lr}
 800819e:	4604      	mov	r4, r0
 80081a0:	4819      	ldr	r0, [pc, #100]	; (8008208 <Hardware::Reboot()+0x6c>)
 80081a2:	f7f9 fd63 	bl	8001c6c <printf>
 80081a6:	2300      	movs	r3, #0
 80081a8:	7323      	strb	r3, [r4, #12]
 80081aa:	2104      	movs	r1, #4
 80081ac:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80081b0:	f000 fd96 	bl	8008ce0 <fwdgt_config>
 80081b4:	4620      	mov	r0, r4
 80081b6:	f7f8 fd39 	bl	8000c2c <Hardware::RebootHandler()>
 80081ba:	2102      	movs	r1, #2
 80081bc:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80081c0:	f000 fd8e 	bl	8008ce0 <fwdgt_config>
 80081c4:	2801      	cmp	r0, #1
 80081c6:	bf0c      	ite	eq
 80081c8:	2301      	moveq	r3, #1
 80081ca:	2300      	movne	r3, #0
 80081cc:	7323      	strb	r3, [r4, #12]
 80081ce:	d101      	bne.n	80081d4 <Hardware::Reboot()+0x38>
 80081d0:	f000 fd76 	bl	8008cc0 <fwdgt_enable>
 80081d4:	2105      	movs	r1, #5
 80081d6:	4620      	mov	r0, r4
 80081d8:	f7ff ff0b 	bl	8007ff2 <Hardware::SetMode(hardware::ledblink::Mode)>
 80081dc:	490b      	ldr	r1, [pc, #44]	; (800820c <Hardware::Reboot()+0x70>)
 80081de:	4a0c      	ldr	r2, [pc, #48]	; (8008210 <Hardware::Reboot()+0x74>)
 80081e0:	2501      	movs	r5, #1
 80081e2:	69a0      	ldr	r0, [r4, #24]
 80081e4:	b900      	cbnz	r0, 80081e8 <Hardware::Reboot()+0x4c>
 80081e6:	e7fe      	b.n	80081e6 <Hardware::Reboot()+0x4a>
 80081e8:	680b      	ldr	r3, [r1, #0]
 80081ea:	6a26      	ldr	r6, [r4, #32]
 80081ec:	1b9b      	subs	r3, r3, r6
 80081ee:	4298      	cmp	r0, r3
 80081f0:	d8f8      	bhi.n	80081e4 <Hardware::Reboot()+0x48>
 80081f2:	680b      	ldr	r3, [r1, #0]
 80081f4:	6223      	str	r3, [r4, #32]
 80081f6:	69e3      	ldr	r3, [r4, #28]
 80081f8:	2b01      	cmp	r3, #1
 80081fa:	f083 0001 	eor.w	r0, r3, #1
 80081fe:	61e0      	str	r0, [r4, #28]
 8008200:	bf14      	ite	ne
 8008202:	6115      	strne	r5, [r2, #16]
 8008204:	6153      	streq	r3, [r2, #20]
 8008206:	e7ec      	b.n	80081e2 <Hardware::Reboot()+0x46>
 8008208:	0800c0ca 	stmdaeq	r0, {r1, r3, r6, r7, lr, pc}
 800820c:	200027ac 	andcs	r2, r0, ip, lsr #15
 8008210:	40011000 	andmi	r1, r1, r0

08008214 <Hardware::WatchdogInit()>:
 8008214:	b510      	push	{r4, lr}
 8008216:	2102      	movs	r1, #2
 8008218:	4604      	mov	r4, r0
 800821a:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800821e:	f000 fd5f 	bl	8008ce0 <fwdgt_config>
 8008222:	2801      	cmp	r0, #1
 8008224:	bf0c      	ite	eq
 8008226:	2301      	moveq	r3, #1
 8008228:	2300      	movne	r3, #0
 800822a:	7323      	strb	r3, [r4, #12]
 800822c:	d103      	bne.n	8008236 <Hardware::WatchdogInit()+0x22>
 800822e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008232:	f000 bd45 	b.w	8008cc0 <fwdgt_enable>
 8008236:	bd10      	pop	{r4, pc}

08008238 <HwClock::HwClock()>:
 8008238:	2200      	movs	r2, #0
 800823a:	e9c0 2200 	strd	r2, r2, [r0]
 800823e:	7282      	strb	r2, [r0, #10]
 8008240:	4a02      	ldr	r2, [pc, #8]	; (800824c <HwClock::HwClock()+0x14>)
 8008242:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8008246:	8101      	strh	r1, [r0, #8]
 8008248:	6010      	str	r0, [r2, #0]
 800824a:	4770      	bx	lr
 800824c:	20002774 	andcs	r2, r0, r4, ror r7

08008250 <HwClock::Print()>:
 8008250:	b510      	push	{r4, lr}
 8008252:	7a83      	ldrb	r3, [r0, #10]
 8008254:	b08e      	sub	sp, #56	; 0x38
 8008256:	4604      	mov	r4, r0
 8008258:	b92b      	cbnz	r3, 8008266 <HwClock::Print()+0x16>
 800825a:	4812      	ldr	r0, [pc, #72]	; (80082a4 <HwClock::Print()+0x54>)
 800825c:	b00e      	add	sp, #56	; 0x38
 800825e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008262:	f7f9 bd3b 	b.w	8001cdc <puts>
 8008266:	7a43      	ldrb	r3, [r0, #9]
 8008268:	480f      	ldr	r0, [pc, #60]	; (80082a8 <HwClock::Print()+0x58>)
 800826a:	2b03      	cmp	r3, #3
 800826c:	bf96      	itet	ls
 800826e:	4a0f      	ldrls	r2, [pc, #60]	; (80082ac <HwClock::Print()+0x5c>)
 8008270:	490f      	ldrhi	r1, [pc, #60]	; (80082b0 <HwClock::Print()+0x60>)
 8008272:	f852 1023 	ldrls.w	r1, [r2, r3, lsl #2]
 8008276:	f7f9 fcf9 	bl	8001c6c <printf>
 800827a:	a905      	add	r1, sp, #20
 800827c:	4620      	mov	r0, r4
 800827e:	f000 f905 	bl	800848c <HwClock::RtcGet(rtc_time*)>
 8008282:	9b05      	ldr	r3, [sp, #20]
 8008284:	9302      	str	r3, [sp, #8]
 8008286:	9b06      	ldr	r3, [sp, #24]
 8008288:	9301      	str	r3, [sp, #4]
 800828a:	9b07      	ldr	r3, [sp, #28]
 800828c:	9300      	str	r3, [sp, #0]
 800828e:	e9dd 3208 	ldrd	r3, r2, [sp, #32]
 8008292:	990a      	ldr	r1, [sp, #40]	; 0x28
 8008294:	4807      	ldr	r0, [pc, #28]	; (80082b4 <HwClock::Print()+0x64>)
 8008296:	3201      	adds	r2, #1
 8008298:	f201 716c 	addw	r1, r1, #1900	; 0x76c
 800829c:	f7f9 fce6 	bl	8001c6c <printf>
 80082a0:	b00e      	add	sp, #56	; 0x38
 80082a2:	bd10      	pop	{r4, pc}
 80082a4:	0800c0d9 	stmdaeq	r0, {r0, r3, r4, r6, r7, lr, pc}
 80082a8:	0800b198 	stmdaeq	r0, {r3, r4, r7, r8, ip, sp, pc}
 80082ac:	0800c130 	stmdaeq	r0, {r4, r5, r8, lr, pc}
 80082b0:	0800b9c0 	stmdaeq	r0, {r6, r7, r8, fp, ip, sp, pc}
 80082b4:	0800c0ea 	stmdaeq	r0, {r1, r3, r5, r6, r7, lr, pc}

080082b8 <HwClock::HcToSys()>:
 80082b8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80082bc:	7a83      	ldrb	r3, [r0, #10]
 80082be:	b0a3      	sub	sp, #140	; 0x8c
 80082c0:	4604      	mov	r4, r0
 80082c2:	2b00      	cmp	r3, #0
 80082c4:	d04c      	beq.n	8008360 <HwClock::HcToSys()+0xa8>
 80082c6:	4f2a      	ldr	r7, [pc, #168]	; (8008370 <HwClock::HcToSys()+0xb8>)
 80082c8:	683b      	ldr	r3, [r7, #0]
 80082ca:	7b1e      	ldrb	r6, [r3, #12]
 80082cc:	b136      	cbz	r6, 80082dc <HwClock::HcToSys()+0x24>
 80082ce:	2200      	movs	r2, #0
 80082d0:	731a      	strb	r2, [r3, #12]
 80082d2:	2104      	movs	r1, #4
 80082d4:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80082d8:	f000 fd02 	bl	8008ce0 <fwdgt_config>
 80082dc:	a907      	add	r1, sp, #28
 80082de:	4620      	mov	r0, r4
 80082e0:	f000 f8d4 	bl	800848c <HwClock::RtcGet(rtc_time*)>
 80082e4:	2100      	movs	r1, #0
 80082e6:	a801      	add	r0, sp, #4
 80082e8:	f000 fa92 	bl	8008810 <gettimeofday>
 80082ec:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 80082f0:	f04f 083c 	mov.w	r8, #60	; 0x3c
 80082f4:	e9cd 2319 	strd	r2, r3, [sp, #100]	; 0x64
 80082f8:	fb08 2903 	mla	r9, r8, r3, r2
 80082fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80082fe:	931b      	str	r3, [sp, #108]	; 0x6c
 8008300:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008302:	931c      	str	r3, [sp, #112]	; 0x70
 8008304:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008306:	931d      	str	r3, [sp, #116]	; 0x74
 8008308:	a819      	add	r0, sp, #100	; 0x64
 800830a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800830c:	931e      	str	r3, [sp, #120]	; 0x78
 800830e:	f000 fa33 	bl	8008778 <mktime>
 8008312:	4605      	mov	r5, r0
 8008314:	a910      	add	r1, sp, #64	; 0x40
 8008316:	4620      	mov	r0, r4
 8008318:	f000 f8b8 	bl	800848c <HwClock::RtcGet(rtc_time*)>
 800831c:	e9dd 3210 	ldrd	r3, r2, [sp, #64]	; 0x40
 8008320:	fb08 3302 	mla	r3, r8, r2, r3
 8008324:	4599      	cmp	r9, r3
 8008326:	d0f5      	beq.n	8008314 <HwClock::HcToSys()+0x5c>
 8008328:	2100      	movs	r1, #0
 800832a:	a803      	add	r0, sp, #12
 800832c:	f000 fa70 	bl	8008810 <gettimeofday>
 8008330:	9b01      	ldr	r3, [sp, #4]
 8008332:	9a03      	ldr	r2, [sp, #12]
 8008334:	9902      	ldr	r1, [sp, #8]
 8008336:	9505      	str	r5, [sp, #20]
 8008338:	429a      	cmp	r2, r3
 800833a:	9b04      	ldr	r3, [sp, #16]
 800833c:	d113      	bne.n	8008366 <HwClock::HcToSys()+0xae>
 800833e:	1a5b      	subs	r3, r3, r1
 8008340:	f5c3 2274 	rsb	r2, r3, #999424	; 0xf4000
 8008344:	f502 7210 	add.w	r2, r2, #576	; 0x240
 8008348:	2100      	movs	r1, #0
 800834a:	a805      	add	r0, sp, #20
 800834c:	9206      	str	r2, [sp, #24]
 800834e:	f000 fa89 	bl	8008864 <settimeofday>
 8008352:	4b08      	ldr	r3, [pc, #32]	; (8008374 <HwClock::HcToSys()+0xbc>)
 8008354:	6838      	ldr	r0, [r7, #0]
 8008356:	681b      	ldr	r3, [r3, #0]
 8008358:	6063      	str	r3, [r4, #4]
 800835a:	b10e      	cbz	r6, 8008360 <HwClock::HcToSys()+0xa8>
 800835c:	f7ff ff5a 	bl	8008214 <Hardware::WatchdogInit()>
 8008360:	b023      	add	sp, #140	; 0x8c
 8008362:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008366:	1a5a      	subs	r2, r3, r1
 8008368:	bf48      	it	mi
 800836a:	1aca      	submi	r2, r1, r3
 800836c:	e7ec      	b.n	8008348 <HwClock::HcToSys()+0x90>
 800836e:	bf00      	nop
 8008370:	20002770 	andcs	r2, r0, r0, ror r7
 8008374:	200027ac 	andcs	r2, r0, ip, lsr #15

08008378 <HwClock::Set(rtc_time const*)>:
 8008378:	b570      	push	{r4, r5, r6, lr}
 800837a:	7a86      	ldrb	r6, [r0, #10]
 800837c:	b090      	sub	sp, #64	; 0x40
 800837e:	4605      	mov	r5, r0
 8008380:	460c      	mov	r4, r1
 8008382:	2e00      	cmp	r6, #0
 8008384:	d02b      	beq.n	80083de <HwClock::Set(rtc_time const*)+0x66>
 8008386:	2100      	movs	r1, #0
 8008388:	a801      	add	r0, sp, #4
 800838a:	f000 fa41 	bl	8008810 <gettimeofday>
 800838e:	4621      	mov	r1, r4
 8008390:	4628      	mov	r0, r5
 8008392:	f000 f873 	bl	800847c <HwClock::RtcSet(rtc_time const*)>
 8008396:	6823      	ldr	r3, [r4, #0]
 8008398:	9307      	str	r3, [sp, #28]
 800839a:	6863      	ldr	r3, [r4, #4]
 800839c:	9308      	str	r3, [sp, #32]
 800839e:	68a3      	ldr	r3, [r4, #8]
 80083a0:	9309      	str	r3, [sp, #36]	; 0x24
 80083a2:	68e3      	ldr	r3, [r4, #12]
 80083a4:	930a      	str	r3, [sp, #40]	; 0x28
 80083a6:	6923      	ldr	r3, [r4, #16]
 80083a8:	930b      	str	r3, [sp, #44]	; 0x2c
 80083aa:	a807      	add	r0, sp, #28
 80083ac:	6963      	ldr	r3, [r4, #20]
 80083ae:	930c      	str	r3, [sp, #48]	; 0x30
 80083b0:	2400      	movs	r4, #0
 80083b2:	940f      	str	r4, [sp, #60]	; 0x3c
 80083b4:	f000 f9e0 	bl	8008778 <mktime>
 80083b8:	4621      	mov	r1, r4
 80083ba:	9003      	str	r0, [sp, #12]
 80083bc:	a805      	add	r0, sp, #20
 80083be:	f000 fa27 	bl	8008810 <gettimeofday>
 80083c2:	9906      	ldr	r1, [sp, #24]
 80083c4:	9b02      	ldr	r3, [sp, #8]
 80083c6:	1aca      	subs	r2, r1, r3
 80083c8:	bf42      	ittt	mi
 80083ca:	1a5b      	submi	r3, r3, r1
 80083cc:	f5c3 2274 	rsbmi	r2, r3, #999424	; 0xf4000
 80083d0:	f502 7210 	addmi.w	r2, r2, #576	; 0x240
 80083d4:	2100      	movs	r1, #0
 80083d6:	a803      	add	r0, sp, #12
 80083d8:	9204      	str	r2, [sp, #16]
 80083da:	f000 fa43 	bl	8008864 <settimeofday>
 80083de:	4630      	mov	r0, r6
 80083e0:	b010      	add	sp, #64	; 0x40
 80083e2:	bd70      	pop	{r4, r5, r6, pc}

080083e4 <rtc_configuration()>:
 80083e4:	b510      	push	{r4, lr}
 80083e6:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80083ea:	f000 fdf1 	bl	8008fd0 <rcu_osci_on>
 80083ee:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80083f2:	f000 fd93 	bl	8008f1c <rcu_osci_stab_wait>
 80083f6:	2801      	cmp	r0, #1
 80083f8:	4604      	mov	r4, r0
 80083fa:	d113      	bne.n	8008424 <rtc_configuration()+0x40>
 80083fc:	f44f 7080 	mov.w	r0, #256	; 0x100
 8008400:	f000 fd74 	bl	8008eec <rcu_rtc_clock_config>
 8008404:	f640 000f 	movw	r0, #2063	; 0x80f
 8008408:	f000 fd22 	bl	8008e50 <rcu_periph_clock_enable>
 800840c:	f000 fe74 	bl	80090f8 <rtc_register_sync_wait>
 8008410:	f000 fe6a 	bl	80090e8 <rtc_lwoff_wait>
 8008414:	f647 70ff 	movw	r0, #32767	; 0x7fff
 8008418:	f000 fe96 	bl	8009148 <rtc_prescaler_set>
 800841c:	f000 fe64 	bl	80090e8 <rtc_lwoff_wait>
 8008420:	4620      	mov	r0, r4
 8008422:	bd10      	pop	{r4, pc}
 8008424:	2000      	movs	r0, #0
 8008426:	e7fc      	b.n	8008422 <rtc_configuration()+0x3e>

08008428 <HwClock::RtcProbe()>:
 8008428:	b538      	push	{r3, r4, r5, lr}
 800842a:	4604      	mov	r4, r0
 800842c:	2001      	movs	r0, #1
 800842e:	f000 fb15 	bl	8008a5c <bkp_read_data>
 8008432:	f24a 55a5 	movw	r5, #42405	; 0xa5a5
 8008436:	42a8      	cmp	r0, r5
 8008438:	d019      	beq.n	800846e <HwClock::RtcProbe()+0x46>
 800843a:	f7ff ffd3 	bl	80083e4 <rtc_configuration()>
 800843e:	b908      	cbnz	r0, 8008444 <HwClock::RtcProbe()+0x1c>
 8008440:	72a0      	strb	r0, [r4, #10]
 8008442:	bd38      	pop	{r3, r4, r5, pc}
 8008444:	f000 fe50 	bl	80090e8 <rtc_lwoff_wait>
 8008448:	2000      	movs	r0, #0
 800844a:	f000 fa23 	bl	8008894 <time>
 800844e:	f000 fe6b 	bl	8009128 <rtc_counter_set>
 8008452:	f000 fe49 	bl	80090e8 <rtc_lwoff_wait>
 8008456:	4629      	mov	r1, r5
 8008458:	2001      	movs	r0, #1
 800845a:	f000 fae9 	bl	8008a30 <bkp_write_data>
 800845e:	2303      	movs	r3, #3
 8008460:	7263      	strb	r3, [r4, #9]
 8008462:	2301      	movs	r3, #1
 8008464:	72a3      	strb	r3, [r4, #10]
 8008466:	4b04      	ldr	r3, [pc, #16]	; (8008478 <HwClock::RtcProbe()+0x50>)
 8008468:	681b      	ldr	r3, [r3, #0]
 800846a:	6063      	str	r3, [r4, #4]
 800846c:	e7e9      	b.n	8008442 <HwClock::RtcProbe()+0x1a>
 800846e:	f000 fe43 	bl	80090f8 <rtc_register_sync_wait>
 8008472:	f000 fe39 	bl	80090e8 <rtc_lwoff_wait>
 8008476:	e7f2      	b.n	800845e <HwClock::RtcProbe()+0x36>
 8008478:	200027ac 	andcs	r2, r0, ip, lsr #15

0800847c <HwClock::RtcSet(rtc_time const*)>:
 800847c:	b508      	push	{r3, lr}
 800847e:	4608      	mov	r0, r1
 8008480:	f000 f97a 	bl	8008778 <mktime>
 8008484:	f000 fe50 	bl	8009128 <rtc_counter_set>
 8008488:	2001      	movs	r0, #1
 800848a:	bd08      	pop	{r3, pc}

0800848c <HwClock::RtcGet(rtc_time*)>:
 800848c:	b513      	push	{r0, r1, r4, lr}
 800848e:	460c      	mov	r4, r1
 8008490:	f000 fe40 	bl	8009114 <rtc_counter_get>
 8008494:	9001      	str	r0, [sp, #4]
 8008496:	a801      	add	r0, sp, #4
 8008498:	f000 f92a 	bl	80086f0 <localtime>
 800849c:	1e61      	subs	r1, r4, #1
 800849e:	f100 0324 	add.w	r3, r0, #36	; 0x24
 80084a2:	4298      	cmp	r0, r3
 80084a4:	d102      	bne.n	80084ac <HwClock::RtcGet(rtc_time*)+0x20>
 80084a6:	2001      	movs	r0, #1
 80084a8:	b002      	add	sp, #8
 80084aa:	bd10      	pop	{r4, pc}
 80084ac:	f810 2b01 	ldrb.w	r2, [r0], #1
 80084b0:	f801 2f01 	strb.w	r2, [r1, #1]!
 80084b4:	e7f5      	b.n	80084a2 <HwClock::RtcGet(rtc_time*)+0x16>

080084b6 <operator delete(void*)>:
 80084b6:	f000 b8a3 	b.w	8008600 <free>

080084ba <operator delete[](void*)>:
 80084ba:	f000 b8a1 	b.w	8008600 <free>

080084be <operator new(unsigned int)>:
 80084be:	f000 b871 	b.w	80085a4 <malloc>

080084c2 <operator new[](unsigned int)>:
 80084c2:	f000 b86f 	b.w	80085a4 <malloc>
	...

080084c8 <__libc_init_array>:
 80084c8:	b570      	push	{r4, r5, r6, lr}
 80084ca:	4d0c      	ldr	r5, [pc, #48]	; (80084fc <__libc_init_array+0x34>)
 80084cc:	4c0c      	ldr	r4, [pc, #48]	; (8008500 <__libc_init_array+0x38>)
 80084ce:	1b64      	subs	r4, r4, r5
 80084d0:	10a4      	asrs	r4, r4, #2
 80084d2:	2600      	movs	r6, #0
 80084d4:	42a6      	cmp	r6, r4
 80084d6:	d107      	bne.n	80084e8 <__libc_init_array+0x20>
 80084d8:	4d0a      	ldr	r5, [pc, #40]	; (8008504 <__libc_init_array+0x3c>)
 80084da:	4c0b      	ldr	r4, [pc, #44]	; (8008508 <__libc_init_array+0x40>)
 80084dc:	1b64      	subs	r4, r4, r5
 80084de:	10a4      	asrs	r4, r4, #2
 80084e0:	2600      	movs	r6, #0
 80084e2:	42a6      	cmp	r6, r4
 80084e4:	d105      	bne.n	80084f2 <__libc_init_array+0x2a>
 80084e6:	bd70      	pop	{r4, r5, r6, pc}
 80084e8:	f855 3b04 	ldr.w	r3, [r5], #4
 80084ec:	4798      	blx	r3
 80084ee:	3601      	adds	r6, #1
 80084f0:	e7f0      	b.n	80084d4 <__libc_init_array+0xc>
 80084f2:	f855 3b04 	ldr.w	r3, [r5], #4
 80084f6:	4798      	blx	r3
 80084f8:	3601      	adds	r6, #1
 80084fa:	e7f2      	b.n	80084e2 <__libc_init_array+0x1a>
 80084fc:	0800a088 	stmdaeq	r0, {r3, r7, sp, pc}
 8008500:	0800a088 	stmdaeq	r0, {r3, r7, sp, pc}
 8008504:	0800a088 	stmdaeq	r0, {r3, r7, sp, pc}
 8008508:	0800a088 	stmdaeq	r0, {r3, r7, sp, pc}

0800850c <log2f>:
 800850c:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8008510:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008514:	d027      	beq.n	8008566 <log2f+0x5a>
 8008516:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800851a:	eeb4 0a67 	vcmp.f32	s0, s15
 800851e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008522:	d023      	beq.n	800856c <log2f+0x60>
 8008524:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8008528:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800852c:	d421      	bmi.n	8008572 <log2f+0x66>
 800852e:	ee10 3a10 	vmov	r3, s0
 8008532:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8008536:	3a80      	subs	r2, #128	; 0x80
 8008538:	ee07 2a90 	vmov	s15, r2
 800853c:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8008540:	f103 537e 	add.w	r3, r3, #1065353216	; 0x3f800000
 8008544:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8008548:	ed9f 6a0b 	vldr	s12, [pc, #44]	; 8008578 <log2f+0x6c>
 800854c:	eddf 6a0b 	vldr	s13, [pc, #44]	; 800857c <log2f+0x70>
 8008550:	ed9f 0a0b 	vldr	s0, [pc, #44]	; 8008580 <log2f+0x74>
 8008554:	ee07 3a90 	vmov	s15, r3
 8008558:	eee7 6a86 	vfma.f32	s13, s15, s12
 800855c:	eea7 0aa6 	vfma.f32	s0, s15, s13
 8008560:	ee30 0a07 	vadd.f32	s0, s0, s14
 8008564:	4770      	bx	lr
 8008566:	ed9f 0a07 	vldr	s0, [pc, #28]	; 8008584 <log2f+0x78>
 800856a:	4770      	bx	lr
 800856c:	ed9f 0a06 	vldr	s0, [pc, #24]	; 8008588 <log2f+0x7c>
 8008570:	4770      	bx	lr
 8008572:	ed9f 0a06 	vldr	s0, [pc, #24]	; 800858c <log2f+0x80>
 8008576:	4770      	bx	lr
 8008578:	beb08ff9 	mrclt	15, 5, r8, cr0, cr9, {7}
 800857c:	40019420 	andmi	r9, r1, r0, lsr #8
 8008580:	bf2cc4c7 	svclt	0x002cc4c7
 8008584:	ff800000 			; <UNDEFINED> instruction: 0xff800000
 8008588:	00000000 	andeq	r0, r0, r0
 800858c:	7f800001 	svcvc	0x00800001

08008590 <logf>:
 8008590:	b508      	push	{r3, lr}
 8008592:	f7ff ffbb 	bl	800850c <log2f>
 8008596:	eddf 7a02 	vldr	s15, [pc, #8]	; 80085a0 <logf+0x10>
 800859a:	ee20 0a27 	vmul.f32	s0, s0, s15
 800859e:	bd08      	pop	{r3, pc}
 80085a0:	3f317218 	svccc	0x00317218

080085a4 <malloc>:
 80085a4:	b510      	push	{r4, lr}
 80085a6:	b1d8      	cbz	r0, 80085e0 <malloc+0x3c>
 80085a8:	4a11      	ldr	r2, [pc, #68]	; (80085f0 <malloc+0x4c>)
 80085aa:	6811      	ldr	r1, [r2, #0]
 80085ac:	b971      	cbnz	r1, 80085cc <malloc+0x28>
 80085ae:	4911      	ldr	r1, [pc, #68]	; (80085f4 <malloc+0x50>)
 80085b0:	4c11      	ldr	r4, [pc, #68]	; (80085f8 <malloc+0x54>)
 80085b2:	680b      	ldr	r3, [r1, #0]
 80085b4:	f100 021b 	add.w	r2, r0, #27
 80085b8:	f022 020f 	bic.w	r2, r2, #15
 80085bc:	441a      	add	r2, r3
 80085be:	42a2      	cmp	r2, r4
 80085c0:	d80f      	bhi.n	80085e2 <malloc+0x3e>
 80085c2:	600a      	str	r2, [r1, #0]
 80085c4:	4a0d      	ldr	r2, [pc, #52]	; (80085fc <malloc+0x58>)
 80085c6:	e9c3 2000 	strd	r2, r0, [r3]
 80085ca:	e005      	b.n	80085d8 <malloc+0x34>
 80085cc:	4288      	cmp	r0, r1
 80085ce:	d90a      	bls.n	80085e6 <malloc+0x42>
 80085d0:	3208      	adds	r2, #8
 80085d2:	e7ea      	b.n	80085aa <malloc+0x6>
 80085d4:	6899      	ldr	r1, [r3, #8]
 80085d6:	6051      	str	r1, [r2, #4]
 80085d8:	2200      	movs	r2, #0
 80085da:	609a      	str	r2, [r3, #8]
 80085dc:	f103 000c 	add.w	r0, r3, #12
 80085e0:	bd10      	pop	{r4, pc}
 80085e2:	2000      	movs	r0, #0
 80085e4:	e7fc      	b.n	80085e0 <malloc+0x3c>
 80085e6:	6853      	ldr	r3, [r2, #4]
 80085e8:	2b00      	cmp	r3, #0
 80085ea:	d1f3      	bne.n	80085d4 <malloc+0x30>
 80085ec:	4608      	mov	r0, r1
 80085ee:	e7de      	b.n	80085ae <malloc+0xa>
 80085f0:	20001010 	andcs	r1, r0, r0, lsl r0
 80085f4:	2000100c 	andcs	r1, r0, ip
 80085f8:	200097b4 			; <UNDEFINED> instruction: 0x200097b4
 80085fc:	424c4d43 	submi	r4, ip, #4288	; 0x10c0

08008600 <free>:
 8008600:	b138      	cbz	r0, 8008612 <free+0x12>
 8008602:	f850 2c0c 	ldr.w	r2, [r0, #-12]
 8008606:	4b09      	ldr	r3, [pc, #36]	; (800862c <free+0x2c>)
 8008608:	429a      	cmp	r2, r3
 800860a:	d102      	bne.n	8008612 <free+0x12>
 800860c:	4b08      	ldr	r3, [pc, #32]	; (8008630 <free+0x30>)
 800860e:	681a      	ldr	r2, [r3, #0]
 8008610:	b902      	cbnz	r2, 8008614 <free+0x14>
 8008612:	4770      	bx	lr
 8008614:	f850 1c08 	ldr.w	r1, [r0, #-8]
 8008618:	4291      	cmp	r1, r2
 800861a:	d105      	bne.n	8008628 <free+0x28>
 800861c:	685a      	ldr	r2, [r3, #4]
 800861e:	f840 2c04 	str.w	r2, [r0, #-4]
 8008622:	380c      	subs	r0, #12
 8008624:	6058      	str	r0, [r3, #4]
 8008626:	4770      	bx	lr
 8008628:	3308      	adds	r3, #8
 800862a:	e7f0      	b.n	800860e <free+0xe>
 800862c:	424c4d43 	submi	r4, ip, #4288	; 0x10c0
 8008630:	20001010 	andcs	r1, r0, r0, lsl r0

08008634 <memmove>:
 8008634:	4288      	cmp	r0, r1
 8008636:	b510      	push	{r4, lr}
 8008638:	eb01 0302 	add.w	r3, r1, r2
 800863c:	d208      	bcs.n	8008650 <memmove+0x1c>
 800863e:	1e42      	subs	r2, r0, #1
 8008640:	4299      	cmp	r1, r3
 8008642:	d100      	bne.n	8008646 <memmove+0x12>
 8008644:	bd10      	pop	{r4, pc}
 8008646:	f811 4b01 	ldrb.w	r4, [r1], #1
 800864a:	f802 4f01 	strb.w	r4, [r2, #1]!
 800864e:	e7f7      	b.n	8008640 <memmove+0xc>
 8008650:	4402      	add	r2, r0
 8008652:	4601      	mov	r1, r0
 8008654:	428a      	cmp	r2, r1
 8008656:	d0f5      	beq.n	8008644 <memmove+0x10>
 8008658:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800865c:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008660:	e7f8      	b.n	8008654 <memmove+0x20>

08008662 <memset>:
 8008662:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008664:	b1c2      	cbz	r2, 8008698 <memset+0x36>
 8008666:	b2c9      	uxtb	r1, r1
 8008668:	4603      	mov	r3, r0
 800866a:	075c      	lsls	r4, r3, #29
 800866c:	d110      	bne.n	8008690 <memset+0x2e>
 800866e:	ea41 2401 	orr.w	r4, r1, r1, lsl #8
 8008672:	ea44 4704 	orr.w	r7, r4, r4, lsl #16
 8008676:	f022 0407 	bic.w	r4, r2, #7
 800867a:	463d      	mov	r5, r7
 800867c:	441c      	add	r4, r3
 800867e:	461e      	mov	r6, r3
 8008680:	42a6      	cmp	r6, r4
 8008682:	d10a      	bne.n	800869a <memset+0x38>
 8008684:	441a      	add	r2, r3
 8008686:	4294      	cmp	r4, r2
 8008688:	d006      	beq.n	8008698 <memset+0x36>
 800868a:	f804 1b01 	strb.w	r1, [r4], #1
 800868e:	e7fa      	b.n	8008686 <memset+0x24>
 8008690:	3a01      	subs	r2, #1
 8008692:	f803 1b01 	strb.w	r1, [r3], #1
 8008696:	d1e8      	bne.n	800866a <memset+0x8>
 8008698:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800869a:	f846 7b08 	str.w	r7, [r6], #8
 800869e:	f846 5c04 	str.w	r5, [r6, #-4]
 80086a2:	e7ed      	b.n	8008680 <memset+0x1e>

080086a4 <isleapyear>:
 80086a4:	2264      	movs	r2, #100	; 0x64
 80086a6:	fb90 f3f2 	sdiv	r3, r0, r2
 80086aa:	fb02 0313 	mls	r3, r2, r3, r0
 80086ae:	b94b      	cbnz	r3, 80086c4 <isleapyear+0x20>
 80086b0:	f44f 73c8 	mov.w	r3, #400	; 0x190
 80086b4:	fb90 f2f3 	sdiv	r2, r0, r3
 80086b8:	fb03 0012 	mls	r0, r3, r2, r0
 80086bc:	fab0 f080 	clz	r0, r0
 80086c0:	0940      	lsrs	r0, r0, #5
 80086c2:	4770      	bx	lr
 80086c4:	f010 0f03 	tst.w	r0, #3
 80086c8:	bf0c      	ite	eq
 80086ca:	2001      	moveq	r0, #1
 80086cc:	2000      	movne	r0, #0
 80086ce:	4770      	bx	lr

080086d0 <getdaysofmonth>:
 80086d0:	b510      	push	{r4, lr}
 80086d2:	4604      	mov	r4, r0
 80086d4:	2c01      	cmp	r4, #1
 80086d6:	4608      	mov	r0, r1
 80086d8:	d102      	bne.n	80086e0 <getdaysofmonth+0x10>
 80086da:	f7ff ffe3 	bl	80086a4 <isleapyear>
 80086de:	b918      	cbnz	r0, 80086e8 <getdaysofmonth+0x18>
 80086e0:	4b02      	ldr	r3, [pc, #8]	; (80086ec <getdaysofmonth+0x1c>)
 80086e2:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 80086e6:	bd10      	pop	{r4, pc}
 80086e8:	201d      	movs	r0, #29
 80086ea:	e7fc      	b.n	80086e6 <getdaysofmonth+0x16>
 80086ec:	0800c140 	stmdaeq	r0, {r6, r8, lr, pc}

080086f0 <localtime>:
 80086f0:	b570      	push	{r4, r5, r6, lr}
 80086f2:	2800      	cmp	r0, #0
 80086f4:	d03c      	beq.n	8008770 <localtime+0x80>
 80086f6:	6803      	ldr	r3, [r0, #0]
 80086f8:	4d1e      	ldr	r5, [pc, #120]	; (8008774 <localtime+0x84>)
 80086fa:	213c      	movs	r1, #60	; 0x3c
 80086fc:	fb93 f2f1 	sdiv	r2, r3, r1
 8008700:	fb01 3312 	mls	r3, r1, r2, r3
 8008704:	602b      	str	r3, [r5, #0]
 8008706:	fb92 f3f1 	sdiv	r3, r2, r1
 800870a:	fb01 2213 	mls	r2, r1, r3, r2
 800870e:	606a      	str	r2, [r5, #4]
 8008710:	2218      	movs	r2, #24
 8008712:	fb93 f4f2 	sdiv	r4, r3, r2
 8008716:	fb02 3314 	mls	r3, r2, r4, r3
 800871a:	60ab      	str	r3, [r5, #8]
 800871c:	1d22      	adds	r2, r4, #4
 800871e:	2307      	movs	r3, #7
 8008720:	fb92 f3f3 	sdiv	r3, r2, r3
 8008724:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8008728:	1ad2      	subs	r2, r2, r3
 800872a:	61aa      	str	r2, [r5, #24]
 800872c:	f240 71b2 	movw	r1, #1970	; 0x7b2
 8008730:	f240 166d 	movw	r6, #365	; 0x16d
 8008734:	4608      	mov	r0, r1
 8008736:	f7ff ffb5 	bl	80086a4 <isleapyear>
 800873a:	2800      	cmp	r0, #0
 800873c:	bf14      	ite	ne
 800873e:	f44f 73b7 	movne.w	r3, #366	; 0x16e
 8008742:	4633      	moveq	r3, r6
 8008744:	429c      	cmp	r4, r3
 8008746:	db02      	blt.n	800874e <localtime+0x5e>
 8008748:	1ae4      	subs	r4, r4, r3
 800874a:	3101      	adds	r1, #1
 800874c:	e7f2      	b.n	8008734 <localtime+0x44>
 800874e:	f2a1 736c 	subw	r3, r1, #1900	; 0x76c
 8008752:	616b      	str	r3, [r5, #20]
 8008754:	61ec      	str	r4, [r5, #28]
 8008756:	2600      	movs	r6, #0
 8008758:	4630      	mov	r0, r6
 800875a:	f7ff ffb9 	bl	80086d0 <getdaysofmonth>
 800875e:	4284      	cmp	r4, r0
 8008760:	db02      	blt.n	8008768 <localtime+0x78>
 8008762:	1a24      	subs	r4, r4, r0
 8008764:	3601      	adds	r6, #1
 8008766:	e7f7      	b.n	8008758 <localtime+0x68>
 8008768:	3401      	adds	r4, #1
 800876a:	4802      	ldr	r0, [pc, #8]	; (8008774 <localtime+0x84>)
 800876c:	612e      	str	r6, [r5, #16]
 800876e:	60ec      	str	r4, [r5, #12]
 8008770:	bd70      	pop	{r4, r5, r6, pc}
 8008772:	bf00      	nop
 8008774:	20002778 	andcs	r2, r0, r8, ror r7

08008778 <mktime>:
 8008778:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800877c:	4604      	mov	r4, r0
 800877e:	2800      	cmp	r0, #0
 8008780:	d043      	beq.n	800880a <mktime+0x92>
 8008782:	6941      	ldr	r1, [r0, #20]
 8008784:	f1a1 0346 	sub.w	r3, r1, #70	; 0x46
 8008788:	2b45      	cmp	r3, #69	; 0x45
 800878a:	d83e      	bhi.n	800880a <mktime+0x92>
 800878c:	2600      	movs	r6, #0
 800878e:	f240 75b2 	movw	r5, #1970	; 0x7b2
 8008792:	f201 776b 	addw	r7, r1, #1899	; 0x76b
 8008796:	f240 186d 	movw	r8, #365	; 0x16d
 800879a:	42af      	cmp	r7, r5
 800879c:	da24      	bge.n	80087e8 <mktime+0x70>
 800879e:	6927      	ldr	r7, [r4, #16]
 80087a0:	2f0b      	cmp	r7, #11
 80087a2:	d832      	bhi.n	800880a <mktime+0x92>
 80087a4:	2500      	movs	r5, #0
 80087a6:	42af      	cmp	r7, r5
 80087a8:	d129      	bne.n	80087fe <mktime+0x86>
 80087aa:	68e5      	ldr	r5, [r4, #12]
 80087ac:	2d00      	cmp	r5, #0
 80087ae:	dd2c      	ble.n	800880a <mktime+0x92>
 80087b0:	4638      	mov	r0, r7
 80087b2:	f7ff ff8d 	bl	80086d0 <getdaysofmonth>
 80087b6:	4285      	cmp	r5, r0
 80087b8:	dc27      	bgt.n	800880a <mktime+0x92>
 80087ba:	3d01      	subs	r5, #1
 80087bc:	2318      	movs	r3, #24
 80087be:	4435      	add	r5, r6
 80087c0:	435d      	muls	r5, r3
 80087c2:	68a3      	ldr	r3, [r4, #8]
 80087c4:	2b17      	cmp	r3, #23
 80087c6:	d820      	bhi.n	800880a <mktime+0x92>
 80087c8:	442b      	add	r3, r5
 80087ca:	213c      	movs	r1, #60	; 0x3c
 80087cc:	fb01 f203 	mul.w	r2, r1, r3
 80087d0:	6863      	ldr	r3, [r4, #4]
 80087d2:	2b3b      	cmp	r3, #59	; 0x3b
 80087d4:	d819      	bhi.n	800880a <mktime+0x92>
 80087d6:	6820      	ldr	r0, [r4, #0]
 80087d8:	4413      	add	r3, r2
 80087da:	283b      	cmp	r0, #59	; 0x3b
 80087dc:	fb01 f303 	mul.w	r3, r1, r3
 80087e0:	d813      	bhi.n	800880a <mktime+0x92>
 80087e2:	4418      	add	r0, r3
 80087e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80087e8:	4628      	mov	r0, r5
 80087ea:	f7ff ff5b 	bl	80086a4 <isleapyear>
 80087ee:	2800      	cmp	r0, #0
 80087f0:	bf14      	ite	ne
 80087f2:	f44f 73b7 	movne.w	r3, #366	; 0x16e
 80087f6:	4643      	moveq	r3, r8
 80087f8:	441e      	add	r6, r3
 80087fa:	3501      	adds	r5, #1
 80087fc:	e7cd      	b.n	800879a <mktime+0x22>
 80087fe:	4628      	mov	r0, r5
 8008800:	f7ff ff66 	bl	80086d0 <getdaysofmonth>
 8008804:	3501      	adds	r5, #1
 8008806:	4406      	add	r6, r0
 8008808:	e7cd      	b.n	80087a6 <mktime+0x2e>
 800880a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800880e:	e7e9      	b.n	80087e4 <mktime+0x6c>

08008810 <gettimeofday>:
 8008810:	b538      	push	{r3, r4, r5, lr}
 8008812:	4a10      	ldr	r2, [pc, #64]	; (8008854 <gettimeofday+0x44>)
 8008814:	4b10      	ldr	r3, [pc, #64]	; (8008858 <gettimeofday+0x48>)
 8008816:	6814      	ldr	r4, [r2, #0]
 8008818:	681b      	ldr	r3, [r3, #0]
 800881a:	6013      	str	r3, [r2, #0]
 800881c:	429c      	cmp	r4, r3
 800881e:	bf2c      	ite	cs
 8008820:	1ae4      	subcs	r4, r4, r3
 8008822:	1b1c      	subcc	r4, r3, r4
 8008824:	4b0d      	ldr	r3, [pc, #52]	; (800885c <gettimeofday+0x4c>)
 8008826:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800882a:	4354      	muls	r4, r2
 800882c:	e9d3 2100 	ldrd	r2, r1, [r3]
 8008830:	18a4      	adds	r4, r4, r2
 8008832:	f141 0100 	adc.w	r1, r1, #0
 8008836:	4605      	mov	r5, r0
 8008838:	e9c3 4100 	strd	r4, r1, [r3]
 800883c:	4a08      	ldr	r2, [pc, #32]	; (8008860 <gettimeofday+0x50>)
 800883e:	2300      	movs	r3, #0
 8008840:	4620      	mov	r0, r4
 8008842:	f7f7 fcd5 	bl	80001f0 <__aeabi_uldivmod>
 8008846:	4b06      	ldr	r3, [pc, #24]	; (8008860 <gettimeofday+0x50>)
 8008848:	6028      	str	r0, [r5, #0]
 800884a:	fb03 4410 	mls	r4, r3, r0, r4
 800884e:	606c      	str	r4, [r5, #4]
 8008850:	2000      	movs	r0, #0
 8008852:	bd38      	pop	{r3, r4, r5, pc}
 8008854:	200027a8 	andcs	r2, r0, r8, lsr #15
 8008858:	200027ac 	andcs	r2, r0, ip, lsr #15
 800885c:	200027a0 	andcs	r2, r0, r0, lsr #15
 8008860:	000f4240 	andeq	r4, pc, r0, asr #4

08008864 <settimeofday>:
 8008864:	4b07      	ldr	r3, [pc, #28]	; (8008884 <settimeofday+0x20>)
 8008866:	4908      	ldr	r1, [pc, #32]	; (8008888 <settimeofday+0x24>)
 8008868:	681a      	ldr	r2, [r3, #0]
 800886a:	4b08      	ldr	r3, [pc, #32]	; (800888c <settimeofday+0x28>)
 800886c:	b510      	push	{r4, lr}
 800886e:	601a      	str	r2, [r3, #0]
 8008870:	6843      	ldr	r3, [r0, #4]
 8008872:	6804      	ldr	r4, [r0, #0]
 8008874:	4806      	ldr	r0, [pc, #24]	; (8008890 <settimeofday+0x2c>)
 8008876:	17da      	asrs	r2, r3, #31
 8008878:	fbc4 3200 	smlal	r3, r2, r4, r0
 800887c:	e9c1 3200 	strd	r3, r2, [r1]
 8008880:	2000      	movs	r0, #0
 8008882:	bd10      	pop	{r4, pc}
 8008884:	200027ac 	andcs	r2, r0, ip, lsr #15
 8008888:	200027a0 	andcs	r2, r0, r0, lsr #15
 800888c:	200027a8 	andcs	r2, r0, r8, lsr #15
 8008890:	000f4240 	andeq	r4, pc, r0, asr #4

08008894 <time>:
 8008894:	b513      	push	{r0, r1, r4, lr}
 8008896:	4604      	mov	r4, r0
 8008898:	2100      	movs	r1, #0
 800889a:	4668      	mov	r0, sp
 800889c:	f7ff ffb8 	bl	8008810 <gettimeofday>
 80088a0:	9800      	ldr	r0, [sp, #0]
 80088a2:	b104      	cbz	r4, 80088a6 <time+0x12>
 80088a4:	6020      	str	r0, [r4, #0]
 80088a6:	b002      	add	sp, #8
 80088a8:	bd10      	pop	{r4, pc}

080088aa <uart0_puts>:
 80088aa:	b510      	push	{r4, lr}
 80088ac:	1e44      	subs	r4, r0, #1
 80088ae:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 80088b2:	b903      	cbnz	r3, 80088b6 <uart0_puts+0xc>
 80088b4:	bd10      	pop	{r4, pc}
 80088b6:	2b0a      	cmp	r3, #10
 80088b8:	d102      	bne.n	80088c0 <uart0_puts+0x16>
 80088ba:	200d      	movs	r0, #13
 80088bc:	f000 fe12 	bl	80094e4 <uart0_putc>
 80088c0:	7820      	ldrb	r0, [r4, #0]
 80088c2:	f000 fe0f 	bl	80094e4 <uart0_putc>
 80088c6:	e7f2      	b.n	80088ae <uart0_puts+0x4>

080088c8 <systick_config>:
 80088c8:	4b0c      	ldr	r3, [pc, #48]	; (80088fc <systick_config+0x34>)
 80088ca:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80088ce:	681b      	ldr	r3, [r3, #0]
 80088d0:	fbb3 f3f2 	udiv	r3, r3, r2
 80088d4:	3b01      	subs	r3, #1
 80088d6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80088da:	d20d      	bcs.n	80088f8 <systick_config+0x30>
 80088dc:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
 80088e0:	21f0      	movs	r1, #240	; 0xf0
 80088e2:	6153      	str	r3, [r2, #20]
 80088e4:	4b06      	ldr	r3, [pc, #24]	; (8008900 <systick_config+0x38>)
 80088e6:	2007      	movs	r0, #7
 80088e8:	f883 1023 	strb.w	r1, [r3, #35]	; 0x23
 80088ec:	2100      	movs	r1, #0
 80088ee:	6191      	str	r1, [r2, #24]
 80088f0:	6110      	str	r0, [r2, #16]
 80088f2:	f883 1023 	strb.w	r1, [r3, #35]	; 0x23
 80088f6:	4770      	bx	lr
 80088f8:	e7fe      	b.n	80088f8 <systick_config+0x30>
 80088fa:	bf00      	nop
 80088fc:	20001078 	andcs	r1, r0, r8, ror r0
 8008900:	e000ed00 	and	lr, r0, r0, lsl #26

08008904 <SysTick_Handler>:
 8008904:	4a02      	ldr	r2, [pc, #8]	; (8008910 <SysTick_Handler+0xc>)
 8008906:	6813      	ldr	r3, [r2, #0]
 8008908:	3301      	adds	r3, #1
 800890a:	6013      	str	r3, [r2, #0]
 800890c:	4770      	bx	lr
 800890e:	bf00      	nop
 8008910:	200027ac 	andcs	r2, r0, ip, lsr #15

08008914 <SystemInit>:
 8008914:	4a43      	ldr	r2, [pc, #268]	; (8008a24 <SystemInit+0x110>)
 8008916:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 800891a:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800891e:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 8008922:	4b41      	ldr	r3, [pc, #260]	; (8008a28 <SystemInit+0x114>)
 8008924:	681a      	ldr	r2, [r3, #0]
 8008926:	f042 0201 	orr.w	r2, r2, #1
 800892a:	601a      	str	r2, [r3, #0]
 800892c:	685a      	ldr	r2, [r3, #4]
 800892e:	b082      	sub	sp, #8
 8008930:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8008934:	605a      	str	r2, [r3, #4]
 8008936:	2200      	movs	r2, #0
 8008938:	9201      	str	r2, [sp, #4]
 800893a:	f644 611f 	movw	r1, #19999	; 0x4e1f
 800893e:	9a01      	ldr	r2, [sp, #4]
 8008940:	428a      	cmp	r2, r1
 8008942:	d922      	bls.n	800898a <SystemInit+0x76>
 8008944:	685a      	ldr	r2, [r3, #4]
 8008946:	f022 0203 	bic.w	r2, r2, #3
 800894a:	605a      	str	r2, [r3, #4]
 800894c:	681a      	ldr	r2, [r3, #0]
 800894e:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8008952:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8008956:	601a      	str	r2, [r3, #0]
 8008958:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 800895c:	609a      	str	r2, [r3, #8]
 800895e:	681a      	ldr	r2, [r3, #0]
 8008960:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8008964:	601a      	str	r2, [r3, #0]
 8008966:	2200      	movs	r2, #0
 8008968:	605a      	str	r2, [r3, #4]
 800896a:	62da      	str	r2, [r3, #44]	; 0x2c
 800896c:	681a      	ldr	r2, [r3, #0]
 800896e:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8008972:	601a      	str	r2, [r3, #0]
 8008974:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008978:	6819      	ldr	r1, [r3, #0]
 800897a:	0388      	lsls	r0, r1, #14
 800897c:	d401      	bmi.n	8008982 <SystemInit+0x6e>
 800897e:	3a01      	subs	r2, #1
 8008980:	d1fa      	bne.n	8008978 <SystemInit+0x64>
 8008982:	681a      	ldr	r2, [r3, #0]
 8008984:	0391      	lsls	r1, r2, #14
 8008986:	d404      	bmi.n	8008992 <SystemInit+0x7e>
 8008988:	e7fe      	b.n	8008988 <SystemInit+0x74>
 800898a:	9a01      	ldr	r2, [sp, #4]
 800898c:	3201      	adds	r2, #1
 800898e:	9201      	str	r2, [sp, #4]
 8008990:	e7d5      	b.n	800893e <SystemInit+0x2a>
 8008992:	69da      	ldr	r2, [r3, #28]
 8008994:	4925      	ldr	r1, [pc, #148]	; (8008a2c <SystemInit+0x118>)
 8008996:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800899a:	61da      	str	r2, [r3, #28]
 800899c:	680a      	ldr	r2, [r1, #0]
 800899e:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 80089a2:	600a      	str	r2, [r1, #0]
 80089a4:	685a      	ldr	r2, [r3, #4]
 80089a6:	605a      	str	r2, [r3, #4]
 80089a8:	685a      	ldr	r2, [r3, #4]
 80089aa:	605a      	str	r2, [r3, #4]
 80089ac:	685a      	ldr	r2, [r3, #4]
 80089ae:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80089b2:	605a      	str	r2, [r3, #4]
 80089b4:	685a      	ldr	r2, [r3, #4]
 80089b6:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 80089ba:	605a      	str	r2, [r3, #4]
 80089bc:	685a      	ldr	r2, [r3, #4]
 80089be:	f442 3240 	orr.w	r2, r2, #196608	; 0x30000
 80089c2:	605a      	str	r2, [r3, #4]
 80089c4:	685a      	ldr	r2, [r3, #4]
 80089c6:	f022 4290 	bic.w	r2, r2, #1207959552	; 0x48000000
 80089ca:	f422 1270 	bic.w	r2, r2, #3932160	; 0x3c0000
 80089ce:	605a      	str	r2, [r3, #4]
 80089d0:	685a      	ldr	r2, [r3, #4]
 80089d2:	f042 6203 	orr.w	r2, r2, #137363456	; 0x8300000
 80089d6:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80089da:	605a      	str	r2, [r3, #4]
 80089dc:	681a      	ldr	r2, [r3, #0]
 80089de:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 80089e2:	601a      	str	r2, [r3, #0]
 80089e4:	681a      	ldr	r2, [r3, #0]
 80089e6:	0192      	lsls	r2, r2, #6
 80089e8:	d5fc      	bpl.n	80089e4 <SystemInit+0xd0>
 80089ea:	680a      	ldr	r2, [r1, #0]
 80089ec:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80089f0:	600a      	str	r2, [r1, #0]
 80089f2:	4a0e      	ldr	r2, [pc, #56]	; (8008a2c <SystemInit+0x118>)
 80089f4:	6851      	ldr	r1, [r2, #4]
 80089f6:	03c8      	lsls	r0, r1, #15
 80089f8:	d5fc      	bpl.n	80089f4 <SystemInit+0xe0>
 80089fa:	6811      	ldr	r1, [r2, #0]
 80089fc:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
 8008a00:	6011      	str	r1, [r2, #0]
 8008a02:	6851      	ldr	r1, [r2, #4]
 8008a04:	0389      	lsls	r1, r1, #14
 8008a06:	d5fc      	bpl.n	8008a02 <SystemInit+0xee>
 8008a08:	685a      	ldr	r2, [r3, #4]
 8008a0a:	f022 0203 	bic.w	r2, r2, #3
 8008a0e:	605a      	str	r2, [r3, #4]
 8008a10:	685a      	ldr	r2, [r3, #4]
 8008a12:	f042 0202 	orr.w	r2, r2, #2
 8008a16:	605a      	str	r2, [r3, #4]
 8008a18:	685a      	ldr	r2, [r3, #4]
 8008a1a:	0712      	lsls	r2, r2, #28
 8008a1c:	d5fc      	bpl.n	8008a18 <SystemInit+0x104>
 8008a1e:	b002      	add	sp, #8
 8008a20:	4770      	bx	lr
 8008a22:	bf00      	nop
 8008a24:	e000ed00 	and	lr, r0, r0, lsl #26
 8008a28:	40021000 	andmi	r1, r2, r0
 8008a2c:	40007000 	andmi	r7, r0, r0

08008a30 <bkp_write_data>:
 8008a30:	f1a0 030b 	sub.w	r3, r0, #11
 8008a34:	2b1f      	cmp	r3, #31
 8008a36:	d804      	bhi.n	8008a42 <bkp_write_data+0x12>
 8008a38:	4b07      	ldr	r3, [pc, #28]	; (8008a58 <bkp_write_data+0x28>)
 8008a3a:	4403      	add	r3, r0
 8008a3c:	009b      	lsls	r3, r3, #2
 8008a3e:	8019      	strh	r1, [r3, #0]
 8008a40:	4770      	bx	lr
 8008a42:	1e43      	subs	r3, r0, #1
 8008a44:	2b09      	cmp	r3, #9
 8008a46:	bf9f      	itttt	ls
 8008a48:	f100 5080 	addls.w	r0, r0, #268435456	; 0x10000000
 8008a4c:	f500 50d8 	addls.w	r0, r0, #6912	; 0x1b00
 8008a50:	0080      	lslls	r0, r0, #2
 8008a52:	8001      	strhls	r1, [r0, #0]
 8008a54:	4770      	bx	lr
 8008a56:	bf00      	nop
 8008a58:	10001b05 	andne	r1, r0, r5, lsl #22

08008a5c <bkp_read_data>:
 8008a5c:	f1a0 030b 	sub.w	r3, r0, #11
 8008a60:	2b1f      	cmp	r3, #31
 8008a62:	d805      	bhi.n	8008a70 <bkp_read_data+0x14>
 8008a64:	4b08      	ldr	r3, [pc, #32]	; (8008a88 <bkp_read_data+0x2c>)
 8008a66:	4403      	add	r3, r0
 8008a68:	009b      	lsls	r3, r3, #2
 8008a6a:	8818      	ldrh	r0, [r3, #0]
 8008a6c:	b280      	uxth	r0, r0
 8008a6e:	4770      	bx	lr
 8008a70:	1e43      	subs	r3, r0, #1
 8008a72:	2b09      	cmp	r3, #9
 8008a74:	d806      	bhi.n	8008a84 <bkp_read_data+0x28>
 8008a76:	f100 5080 	add.w	r0, r0, #268435456	; 0x10000000
 8008a7a:	f500 50d8 	add.w	r0, r0, #6912	; 0x1b00
 8008a7e:	0080      	lsls	r0, r0, #2
 8008a80:	8800      	ldrh	r0, [r0, #0]
 8008a82:	e7f3      	b.n	8008a6c <bkp_read_data+0x10>
 8008a84:	2000      	movs	r0, #0
 8008a86:	4770      	bx	lr
 8008a88:	10001b05 	andne	r1, r0, r5, lsl #22

08008a8c <dma_deinit>:
 8008a8c:	4b0c      	ldr	r3, [pc, #48]	; (8008ac0 <dma_deinit+0x34>)
 8008a8e:	4298      	cmp	r0, r3
 8008a90:	d102      	bne.n	8008a98 <dma_deinit+0xc>
 8008a92:	2904      	cmp	r1, #4
 8008a94:	d900      	bls.n	8008a98 <dma_deinit+0xc>
 8008a96:	e7fe      	b.n	8008a96 <dma_deinit+0xa>
 8008a98:	2314      	movs	r3, #20
 8008a9a:	fb03 0301 	mla	r3, r3, r1, r0
 8008a9e:	0089      	lsls	r1, r1, #2
 8008aa0:	689a      	ldr	r2, [r3, #8]
 8008aa2:	f022 0201 	bic.w	r2, r2, #1
 8008aa6:	609a      	str	r2, [r3, #8]
 8008aa8:	2200      	movs	r2, #0
 8008aaa:	609a      	str	r2, [r3, #8]
 8008aac:	60da      	str	r2, [r3, #12]
 8008aae:	611a      	str	r2, [r3, #16]
 8008ab0:	615a      	str	r2, [r3, #20]
 8008ab2:	6842      	ldr	r2, [r0, #4]
 8008ab4:	230f      	movs	r3, #15
 8008ab6:	408b      	lsls	r3, r1
 8008ab8:	4313      	orrs	r3, r2
 8008aba:	6043      	str	r3, [r0, #4]
 8008abc:	4770      	bx	lr
 8008abe:	bf00      	nop
 8008ac0:	40020400 	andmi	r0, r2, r0, lsl #8

08008ac4 <dma_struct_para_init>:
 8008ac4:	b900      	cbnz	r0, 8008ac8 <dma_struct_para_init+0x4>
 8008ac6:	e7fe      	b.n	8008ac6 <dma_struct_para_init+0x2>
 8008ac8:	2300      	movs	r3, #0
 8008aca:	e9c0 3300 	strd	r3, r3, [r0]
 8008ace:	e9c0 3302 	strd	r3, r3, [r0, #8]
 8008ad2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008ad6:	8303      	strh	r3, [r0, #24]
 8008ad8:	7683      	strb	r3, [r0, #26]
 8008ada:	4770      	bx	lr

08008adc <dma_init>:
 8008adc:	4b1b      	ldr	r3, [pc, #108]	; (8008b4c <dma_init+0x70>)
 8008ade:	4298      	cmp	r0, r3
 8008ae0:	b510      	push	{r4, lr}
 8008ae2:	d102      	bne.n	8008aea <dma_init+0xe>
 8008ae4:	2904      	cmp	r1, #4
 8008ae6:	d900      	bls.n	8008aea <dma_init+0xe>
 8008ae8:	e7fe      	b.n	8008ae8 <dma_init+0xc>
 8008aea:	2314      	movs	r3, #20
 8008aec:	fb03 0101 	mla	r1, r3, r1, r0
 8008af0:	6813      	ldr	r3, [r2, #0]
 8008af2:	610b      	str	r3, [r1, #16]
 8008af4:	6893      	ldr	r3, [r2, #8]
 8008af6:	614b      	str	r3, [r1, #20]
 8008af8:	8a13      	ldrh	r3, [r2, #16]
 8008afa:	60cb      	str	r3, [r1, #12]
 8008afc:	68d4      	ldr	r4, [r2, #12]
 8008afe:	6853      	ldr	r3, [r2, #4]
 8008b00:	6888      	ldr	r0, [r1, #8]
 8008b02:	4323      	orrs	r3, r4
 8008b04:	6954      	ldr	r4, [r2, #20]
 8008b06:	f420 507c 	bic.w	r0, r0, #16128	; 0x3f00
 8008b0a:	4323      	orrs	r3, r4
 8008b0c:	4303      	orrs	r3, r0
 8008b0e:	608b      	str	r3, [r1, #8]
 8008b10:	7e13      	ldrb	r3, [r2, #24]
 8008b12:	2b01      	cmp	r3, #1
 8008b14:	688b      	ldr	r3, [r1, #8]
 8008b16:	bf0c      	ite	eq
 8008b18:	f043 0340 	orreq.w	r3, r3, #64	; 0x40
 8008b1c:	f023 0340 	bicne.w	r3, r3, #64	; 0x40
 8008b20:	608b      	str	r3, [r1, #8]
 8008b22:	7e53      	ldrb	r3, [r2, #25]
 8008b24:	2b01      	cmp	r3, #1
 8008b26:	688b      	ldr	r3, [r1, #8]
 8008b28:	bf0c      	ite	eq
 8008b2a:	f043 0380 	orreq.w	r3, r3, #128	; 0x80
 8008b2e:	f023 0380 	bicne.w	r3, r3, #128	; 0x80
 8008b32:	608b      	str	r3, [r1, #8]
 8008b34:	7e93      	ldrb	r3, [r2, #26]
 8008b36:	b923      	cbnz	r3, 8008b42 <dma_init+0x66>
 8008b38:	688b      	ldr	r3, [r1, #8]
 8008b3a:	f023 0310 	bic.w	r3, r3, #16
 8008b3e:	608b      	str	r3, [r1, #8]
 8008b40:	bd10      	pop	{r4, pc}
 8008b42:	688b      	ldr	r3, [r1, #8]
 8008b44:	f043 0310 	orr.w	r3, r3, #16
 8008b48:	e7f9      	b.n	8008b3e <dma_init+0x62>
 8008b4a:	bf00      	nop
 8008b4c:	40020400 	andmi	r0, r2, r0, lsl #8

08008b50 <dma_circulation_disable>:
 8008b50:	4b06      	ldr	r3, [pc, #24]	; (8008b6c <dma_circulation_disable+0x1c>)
 8008b52:	4298      	cmp	r0, r3
 8008b54:	d102      	bne.n	8008b5c <dma_circulation_disable+0xc>
 8008b56:	2904      	cmp	r1, #4
 8008b58:	d900      	bls.n	8008b5c <dma_circulation_disable+0xc>
 8008b5a:	e7fe      	b.n	8008b5a <dma_circulation_disable+0xa>
 8008b5c:	2314      	movs	r3, #20
 8008b5e:	4359      	muls	r1, r3
 8008b60:	3008      	adds	r0, #8
 8008b62:	580b      	ldr	r3, [r1, r0]
 8008b64:	f023 0320 	bic.w	r3, r3, #32
 8008b68:	500b      	str	r3, [r1, r0]
 8008b6a:	4770      	bx	lr
 8008b6c:	40020400 	andmi	r0, r2, r0, lsl #8

08008b70 <dma_memory_to_memory_disable>:
 8008b70:	4b06      	ldr	r3, [pc, #24]	; (8008b8c <dma_memory_to_memory_disable+0x1c>)
 8008b72:	4298      	cmp	r0, r3
 8008b74:	d102      	bne.n	8008b7c <dma_memory_to_memory_disable+0xc>
 8008b76:	2904      	cmp	r1, #4
 8008b78:	d900      	bls.n	8008b7c <dma_memory_to_memory_disable+0xc>
 8008b7a:	e7fe      	b.n	8008b7a <dma_memory_to_memory_disable+0xa>
 8008b7c:	2314      	movs	r3, #20
 8008b7e:	4359      	muls	r1, r3
 8008b80:	3008      	adds	r0, #8
 8008b82:	580b      	ldr	r3, [r1, r0]
 8008b84:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008b88:	500b      	str	r3, [r1, r0]
 8008b8a:	4770      	bx	lr
 8008b8c:	40020400 	andmi	r0, r2, r0, lsl #8

08008b90 <dma_flag_clear>:
 8008b90:	6843      	ldr	r3, [r0, #4]
 8008b92:	0089      	lsls	r1, r1, #2
 8008b94:	408a      	lsls	r2, r1
 8008b96:	431a      	orrs	r2, r3
 8008b98:	6042      	str	r2, [r0, #4]
 8008b9a:	4770      	bx	lr

08008b9c <dma_interrupt_flag_get>:
 8008b9c:	2a04      	cmp	r2, #4
 8008b9e:	b510      	push	{r4, lr}
 8008ba0:	d012      	beq.n	8008bc8 <dma_interrupt_flag_get+0x2c>
 8008ba2:	2a08      	cmp	r2, #8
 8008ba4:	d01b      	beq.n	8008bde <dma_interrupt_flag_get+0x42>
 8008ba6:	2a02      	cmp	r2, #2
 8008ba8:	d124      	bne.n	8008bf4 <dma_interrupt_flag_get+0x58>
 8008baa:	6803      	ldr	r3, [r0, #0]
 8008bac:	008c      	lsls	r4, r1, #2
 8008bae:	40a2      	lsls	r2, r4
 8008bb0:	401a      	ands	r2, r3
 8008bb2:	2314      	movs	r3, #20
 8008bb4:	fb03 0301 	mla	r3, r3, r1, r0
 8008bb8:	689b      	ldr	r3, [r3, #8]
 8008bba:	f003 0302 	and.w	r3, r3, #2
 8008bbe:	b1d2      	cbz	r2, 8008bf6 <dma_interrupt_flag_get+0x5a>
 8008bc0:	1e18      	subs	r0, r3, #0
 8008bc2:	bf18      	it	ne
 8008bc4:	2001      	movne	r0, #1
 8008bc6:	bd10      	pop	{r4, pc}
 8008bc8:	6803      	ldr	r3, [r0, #0]
 8008bca:	008c      	lsls	r4, r1, #2
 8008bcc:	40a2      	lsls	r2, r4
 8008bce:	401a      	ands	r2, r3
 8008bd0:	2314      	movs	r3, #20
 8008bd2:	fb03 0301 	mla	r3, r3, r1, r0
 8008bd6:	689b      	ldr	r3, [r3, #8]
 8008bd8:	f003 0304 	and.w	r3, r3, #4
 8008bdc:	e7ef      	b.n	8008bbe <dma_interrupt_flag_get+0x22>
 8008bde:	6803      	ldr	r3, [r0, #0]
 8008be0:	008c      	lsls	r4, r1, #2
 8008be2:	40a2      	lsls	r2, r4
 8008be4:	401a      	ands	r2, r3
 8008be6:	2314      	movs	r3, #20
 8008be8:	fb03 0101 	mla	r1, r3, r1, r0
 8008bec:	688b      	ldr	r3, [r1, #8]
 8008bee:	f003 0308 	and.w	r3, r3, #8
 8008bf2:	e7e4      	b.n	8008bbe <dma_interrupt_flag_get+0x22>
 8008bf4:	e7fe      	b.n	8008bf4 <dma_interrupt_flag_get+0x58>
 8008bf6:	4610      	mov	r0, r2
 8008bf8:	e7e5      	b.n	8008bc6 <dma_interrupt_flag_get+0x2a>

08008bfa <dma_interrupt_flag_clear>:
 8008bfa:	f7ff bfc9 	b.w	8008b90 <dma_flag_clear>
	...

08008c00 <dma_interrupt_disable>:
 8008c00:	4b06      	ldr	r3, [pc, #24]	; (8008c1c <dma_interrupt_disable+0x1c>)
 8008c02:	4298      	cmp	r0, r3
 8008c04:	d102      	bne.n	8008c0c <dma_interrupt_disable+0xc>
 8008c06:	2904      	cmp	r1, #4
 8008c08:	d900      	bls.n	8008c0c <dma_interrupt_disable+0xc>
 8008c0a:	e7fe      	b.n	8008c0a <dma_interrupt_disable+0xa>
 8008c0c:	2314      	movs	r3, #20
 8008c0e:	4359      	muls	r1, r3
 8008c10:	3008      	adds	r0, #8
 8008c12:	580b      	ldr	r3, [r1, r0]
 8008c14:	ea23 0202 	bic.w	r2, r3, r2
 8008c18:	500a      	str	r2, [r1, r0]
 8008c1a:	4770      	bx	lr
 8008c1c:	40020400 	andmi	r0, r2, r0, lsl #8

08008c20 <fmc_bank0_unlock>:
 8008c20:	4b04      	ldr	r3, [pc, #16]	; (8008c34 <fmc_bank0_unlock+0x14>)
 8008c22:	691a      	ldr	r2, [r3, #16]
 8008c24:	0612      	lsls	r2, r2, #24
 8008c26:	bf41      	itttt	mi
 8008c28:	4a03      	ldrmi	r2, [pc, #12]	; (8008c38 <fmc_bank0_unlock+0x18>)
 8008c2a:	605a      	strmi	r2, [r3, #4]
 8008c2c:	f102 3288 	addmi.w	r2, r2, #2290649224	; 0x88888888
 8008c30:	605a      	strmi	r2, [r3, #4]
 8008c32:	4770      	bx	lr
 8008c34:	40022000 	andmi	r2, r2, r0
 8008c38:	45670123 	strbmi	r0, [r7, #-291]!	; 0xfffffedd

08008c3c <fmc_bank1_unlock>:
 8008c3c:	4b04      	ldr	r3, [pc, #16]	; (8008c50 <fmc_bank1_unlock+0x14>)
 8008c3e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008c40:	0612      	lsls	r2, r2, #24
 8008c42:	bf41      	itttt	mi
 8008c44:	4a03      	ldrmi	r2, [pc, #12]	; (8008c54 <fmc_bank1_unlock+0x18>)
 8008c46:	645a      	strmi	r2, [r3, #68]	; 0x44
 8008c48:	f102 3288 	addmi.w	r2, r2, #2290649224	; 0x88888888
 8008c4c:	645a      	strmi	r2, [r3, #68]	; 0x44
 8008c4e:	4770      	bx	lr
 8008c50:	40022000 	andmi	r2, r2, r0
 8008c54:	45670123 	strbmi	r0, [r7, #-291]!	; 0xfffffedd

08008c58 <fmc_bank0_lock>:
 8008c58:	4a02      	ldr	r2, [pc, #8]	; (8008c64 <fmc_bank0_lock+0xc>)
 8008c5a:	6913      	ldr	r3, [r2, #16]
 8008c5c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008c60:	6113      	str	r3, [r2, #16]
 8008c62:	4770      	bx	lr
 8008c64:	40022000 	andmi	r2, r2, r0

08008c68 <fmc_bank1_lock>:
 8008c68:	4a02      	ldr	r2, [pc, #8]	; (8008c74 <fmc_bank1_lock+0xc>)
 8008c6a:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8008c6c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008c70:	6513      	str	r3, [r2, #80]	; 0x50
 8008c72:	4770      	bx	lr
 8008c74:	40022000 	andmi	r2, r2, r0

08008c78 <fmc_bank0_state_get>:
 8008c78:	4b07      	ldr	r3, [pc, #28]	; (8008c98 <fmc_bank0_state_get+0x20>)
 8008c7a:	68da      	ldr	r2, [r3, #12]
 8008c7c:	07d1      	lsls	r1, r2, #31
 8008c7e:	d407      	bmi.n	8008c90 <fmc_bank0_state_get+0x18>
 8008c80:	68da      	ldr	r2, [r3, #12]
 8008c82:	06d2      	lsls	r2, r2, #27
 8008c84:	d406      	bmi.n	8008c94 <fmc_bank0_state_get+0x1c>
 8008c86:	68d8      	ldr	r0, [r3, #12]
 8008c88:	f3c0 0080 	ubfx	r0, r0, #2, #1
 8008c8c:	0040      	lsls	r0, r0, #1
 8008c8e:	4770      	bx	lr
 8008c90:	2001      	movs	r0, #1
 8008c92:	4770      	bx	lr
 8008c94:	2003      	movs	r0, #3
 8008c96:	4770      	bx	lr
 8008c98:	40022000 	andmi	r2, r2, r0

08008c9c <fmc_bank1_state_get>:
 8008c9c:	4b07      	ldr	r3, [pc, #28]	; (8008cbc <fmc_bank1_state_get+0x20>)
 8008c9e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008ca0:	07d1      	lsls	r1, r2, #31
 8008ca2:	d407      	bmi.n	8008cb4 <fmc_bank1_state_get+0x18>
 8008ca4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008ca6:	06d2      	lsls	r2, r2, #27
 8008ca8:	d406      	bmi.n	8008cb8 <fmc_bank1_state_get+0x1c>
 8008caa:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8008cac:	f3c0 0080 	ubfx	r0, r0, #2, #1
 8008cb0:	0040      	lsls	r0, r0, #1
 8008cb2:	4770      	bx	lr
 8008cb4:	2001      	movs	r0, #1
 8008cb6:	4770      	bx	lr
 8008cb8:	2003      	movs	r0, #3
 8008cba:	4770      	bx	lr
 8008cbc:	40022000 	andmi	r2, r2, r0

08008cc0 <fwdgt_enable>:
 8008cc0:	4b02      	ldr	r3, [pc, #8]	; (8008ccc <fwdgt_enable+0xc>)
 8008cc2:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 8008cc6:	601a      	str	r2, [r3, #0]
 8008cc8:	4770      	bx	lr
 8008cca:	bf00      	nop
 8008ccc:	40003000 	andmi	r3, r0, r0

08008cd0 <fwdgt_counter_reload>:
 8008cd0:	4b02      	ldr	r3, [pc, #8]	; (8008cdc <fwdgt_counter_reload+0xc>)
 8008cd2:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8008cd6:	601a      	str	r2, [r3, #0]
 8008cd8:	4770      	bx	lr
 8008cda:	bf00      	nop
 8008cdc:	40003000 	andmi	r3, r0, r0

08008ce0 <fwdgt_config>:
 8008ce0:	4a12      	ldr	r2, [pc, #72]	; (8008d2c <fwdgt_config+0x4c>)
 8008ce2:	b510      	push	{r4, lr}
 8008ce4:	f245 5355 	movw	r3, #21845	; 0x5555
 8008ce8:	4c11      	ldr	r4, [pc, #68]	; (8008d30 <fwdgt_config+0x50>)
 8008cea:	6013      	str	r3, [r2, #0]
 8008cec:	68d3      	ldr	r3, [r2, #12]
 8008cee:	3c01      	subs	r4, #1
 8008cf0:	f003 0301 	and.w	r3, r3, #1
 8008cf4:	d013      	beq.n	8008d1e <fwdgt_config+0x3e>
 8008cf6:	2b00      	cmp	r3, #0
 8008cf8:	d1f8      	bne.n	8008cec <fwdgt_config+0xc>
 8008cfa:	6051      	str	r1, [r2, #4]
 8008cfc:	490c      	ldr	r1, [pc, #48]	; (8008d30 <fwdgt_config+0x50>)
 8008cfe:	4a0b      	ldr	r2, [pc, #44]	; (8008d2c <fwdgt_config+0x4c>)
 8008d00:	68d3      	ldr	r3, [r2, #12]
 8008d02:	3901      	subs	r1, #1
 8008d04:	f003 0302 	and.w	r3, r3, #2
 8008d08:	d00d      	beq.n	8008d26 <fwdgt_config+0x46>
 8008d0a:	2b00      	cmp	r3, #0
 8008d0c:	d1f8      	bne.n	8008d00 <fwdgt_config+0x20>
 8008d0e:	f3c0 000b 	ubfx	r0, r0, #0, #12
 8008d12:	f64a 23aa 	movw	r3, #43690	; 0xaaaa
 8008d16:	6090      	str	r0, [r2, #8]
 8008d18:	6013      	str	r3, [r2, #0]
 8008d1a:	2001      	movs	r0, #1
 8008d1c:	e002      	b.n	8008d24 <fwdgt_config+0x44>
 8008d1e:	2b00      	cmp	r3, #0
 8008d20:	d0eb      	beq.n	8008cfa <fwdgt_config+0x1a>
 8008d22:	2000      	movs	r0, #0
 8008d24:	bd10      	pop	{r4, pc}
 8008d26:	2b00      	cmp	r3, #0
 8008d28:	d1fb      	bne.n	8008d22 <fwdgt_config+0x42>
 8008d2a:	e7f0      	b.n	8008d0e <fwdgt_config+0x2e>
 8008d2c:	40003000 	andmi	r3, r0, r0
 8008d30:	000fffff 	strdeq	pc, [pc], -pc	; <UNPREDICTABLE>

08008d34 <gpio_init>:
 8008d34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008d38:	06cd      	lsls	r5, r1, #27
 8008d3a:	f001 040f 	and.w	r4, r1, #15
 8008d3e:	d508      	bpl.n	8008d52 <gpio_init+0x1e>
 8008d40:	2a04      	cmp	r2, #4
 8008d42:	bf01      	itttt	eq
 8008d44:	6bc2      	ldreq	r2, [r0, #60]	; 0x3c
 8008d46:	431a      	orreq	r2, r3
 8008d48:	f044 0403 	orreq.w	r4, r4, #3
 8008d4c:	63c2      	streq	r2, [r0, #60]	; 0x3c
 8008d4e:	bf18      	it	ne
 8008d50:	4314      	orrne	r4, r2
 8008d52:	2500      	movs	r5, #0
 8008d54:	f04f 0c01 	mov.w	ip, #1
 8008d58:	f04f 0e0f 	mov.w	lr, #15
 8008d5c:	fa0c f605 	lsl.w	r6, ip, r5
 8008d60:	401e      	ands	r6, r3
 8008d62:	d00d      	beq.n	8008d80 <gpio_init+0x4c>
 8008d64:	00aa      	lsls	r2, r5, #2
 8008d66:	6807      	ldr	r7, [r0, #0]
 8008d68:	fa0e f802 	lsl.w	r8, lr, r2
 8008d6c:	ea27 0708 	bic.w	r7, r7, r8
 8008d70:	fa04 f202 	lsl.w	r2, r4, r2
 8008d74:	2928      	cmp	r1, #40	; 0x28
 8008d76:	ea42 0207 	orr.w	r2, r2, r7
 8008d7a:	d122      	bne.n	8008dc2 <gpio_init+0x8e>
 8008d7c:	6146      	str	r6, [r0, #20]
 8008d7e:	6002      	str	r2, [r0, #0]
 8008d80:	3501      	adds	r5, #1
 8008d82:	2d08      	cmp	r5, #8
 8008d84:	d1ea      	bne.n	8008d5c <gpio_init+0x28>
 8008d86:	2600      	movs	r6, #0
 8008d88:	f04f 0c01 	mov.w	ip, #1
 8008d8c:	f04f 0e0f 	mov.w	lr, #15
 8008d90:	f106 0208 	add.w	r2, r6, #8
 8008d94:	fa0c f202 	lsl.w	r2, ip, r2
 8008d98:	401a      	ands	r2, r3
 8008d9a:	d00d      	beq.n	8008db8 <gpio_init+0x84>
 8008d9c:	00b5      	lsls	r5, r6, #2
 8008d9e:	6847      	ldr	r7, [r0, #4]
 8008da0:	fa0e f805 	lsl.w	r8, lr, r5
 8008da4:	ea27 0708 	bic.w	r7, r7, r8
 8008da8:	fa04 f505 	lsl.w	r5, r4, r5
 8008dac:	2928      	cmp	r1, #40	; 0x28
 8008dae:	ea45 0507 	orr.w	r5, r5, r7
 8008db2:	d10a      	bne.n	8008dca <gpio_init+0x96>
 8008db4:	6142      	str	r2, [r0, #20]
 8008db6:	6045      	str	r5, [r0, #4]
 8008db8:	3601      	adds	r6, #1
 8008dba:	2e08      	cmp	r6, #8
 8008dbc:	d1e8      	bne.n	8008d90 <gpio_init+0x5c>
 8008dbe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008dc2:	2948      	cmp	r1, #72	; 0x48
 8008dc4:	bf08      	it	eq
 8008dc6:	6106      	streq	r6, [r0, #16]
 8008dc8:	e7d9      	b.n	8008d7e <gpio_init+0x4a>
 8008dca:	2948      	cmp	r1, #72	; 0x48
 8008dcc:	bf08      	it	eq
 8008dce:	6102      	streq	r2, [r0, #16]
 8008dd0:	e7f1      	b.n	8008db6 <gpio_init+0x82>

08008dd2 <gpio_input_bit_get>:
 8008dd2:	6883      	ldr	r3, [r0, #8]
 8008dd4:	420b      	tst	r3, r1
 8008dd6:	bf14      	ite	ne
 8008dd8:	2001      	movne	r0, #1
 8008dda:	2000      	moveq	r0, #0
 8008ddc:	4770      	bx	lr
	...

08008de0 <gpio_pin_remap_config>:
 8008de0:	2800      	cmp	r0, #0
 8008de2:	4a16      	ldr	r2, [pc, #88]	; (8008e3c <gpio_pin_remap_config+0x5c>)
 8008de4:	b530      	push	{r4, r5, lr}
 8008de6:	f400 1540 	and.w	r5, r0, #3145728	; 0x300000
 8008dea:	bfb4      	ite	lt
 8008dec:	69d3      	ldrlt	r3, [r2, #28]
 8008dee:	6853      	ldrge	r3, [r2, #4]
 8008df0:	f5b5 1f40 	cmp.w	r5, #3145728	; 0x300000
 8008df4:	b284      	uxth	r4, r0
 8008df6:	d110      	bne.n	8008e1a <gpio_pin_remap_config+0x3a>
 8008df8:	6855      	ldr	r5, [r2, #4]
 8008dfa:	f025 65e0 	bic.w	r5, r5, #117440512	; 0x7000000
 8008dfe:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8008e02:	6055      	str	r5, [r2, #4]
 8008e04:	b119      	cbz	r1, 8008e0e <gpio_pin_remap_config+0x2e>
 8008e06:	0d42      	lsrs	r2, r0, #21
 8008e08:	0112      	lsls	r2, r2, #4
 8008e0a:	4094      	lsls	r4, r2
 8008e0c:	4323      	orrs	r3, r4
 8008e0e:	4a0b      	ldr	r2, [pc, #44]	; (8008e3c <gpio_pin_remap_config+0x5c>)
 8008e10:	2800      	cmp	r0, #0
 8008e12:	bfb4      	ite	lt
 8008e14:	61d3      	strlt	r3, [r2, #28]
 8008e16:	6053      	strge	r3, [r2, #4]
 8008e18:	bd30      	pop	{r4, r5, pc}
 8008e1a:	02c2      	lsls	r2, r0, #11
 8008e1c:	bf55      	itete	pl
 8008e1e:	0d42      	lsrpl	r2, r0, #21
 8008e20:	2203      	movmi	r2, #3
 8008e22:	0112      	lslpl	r2, r2, #4
 8008e24:	f3c0 4503 	ubfxmi	r5, r0, #16, #4
 8008e28:	bf4c      	ite	mi
 8008e2a:	40aa      	lslmi	r2, r5
 8008e2c:	fa04 f202 	lslpl.w	r2, r4, r2
 8008e30:	ea23 0302 	bic.w	r3, r3, r2
 8008e34:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8008e38:	e7e4      	b.n	8008e04 <gpio_pin_remap_config+0x24>
 8008e3a:	bf00      	nop
 8008e3c:	40010000 	andmi	r0, r1, r0

08008e40 <pmu_backup_write_enable>:
 8008e40:	4a02      	ldr	r2, [pc, #8]	; (8008e4c <pmu_backup_write_enable+0xc>)
 8008e42:	6813      	ldr	r3, [r2, #0]
 8008e44:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008e48:	6013      	str	r3, [r2, #0]
 8008e4a:	4770      	bx	lr
 8008e4c:	40007000 	andmi	r7, r0, r0

08008e50 <rcu_periph_clock_enable>:
 8008e50:	0983      	lsrs	r3, r0, #6
 8008e52:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8008e56:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8008e5a:	f000 001f 	and.w	r0, r0, #31
 8008e5e:	6819      	ldr	r1, [r3, #0]
 8008e60:	2201      	movs	r2, #1
 8008e62:	4082      	lsls	r2, r0
 8008e64:	430a      	orrs	r2, r1
 8008e66:	601a      	str	r2, [r3, #0]
 8008e68:	4770      	bx	lr

08008e6a <rcu_periph_clock_disable>:
 8008e6a:	0983      	lsrs	r3, r0, #6
 8008e6c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8008e70:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8008e74:	f000 001f 	and.w	r0, r0, #31
 8008e78:	681a      	ldr	r2, [r3, #0]
 8008e7a:	2101      	movs	r1, #1
 8008e7c:	4081      	lsls	r1, r0
 8008e7e:	ea22 0201 	bic.w	r2, r2, r1
 8008e82:	601a      	str	r2, [r3, #0]
 8008e84:	4770      	bx	lr

08008e86 <rcu_periph_reset_enable>:
 8008e86:	f7ff bfe3 	b.w	8008e50 <rcu_periph_clock_enable>

08008e8a <rcu_periph_reset_disable>:
 8008e8a:	f7ff bfee 	b.w	8008e6a <rcu_periph_clock_disable>
	...

08008e90 <rcu_adc_clock_config>:
 8008e90:	4913      	ldr	r1, [pc, #76]	; (8008ee0 <rcu_adc_clock_config+0x50>)
 8008e92:	684b      	ldr	r3, [r1, #4]
 8008e94:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8008e96:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008e9a:	b510      	push	{r4, lr}
 8008e9c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8008ea0:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 8008ea4:	280b      	cmp	r0, #11
 8008ea6:	d809      	bhi.n	8008ebc <rcu_adc_clock_config+0x2c>
 8008ea8:	e8df f000 	tbb	[pc, r0]
 8008eac:	06060606 	streq	r0, [r6], -r6, lsl #12
 8008eb0:	0b080b08 	bleq	820bad8 <_sidata+0x1ff968>
 8008eb4:	12121212 	andsne	r1, r2, #536870913	; 0x20000001
 8008eb8:	ea43 3380 	orr.w	r3, r3, r0, lsl #14
 8008ebc:	604b      	str	r3, [r1, #4]
 8008ebe:	62ca      	str	r2, [r1, #44]	; 0x2c
 8008ec0:	bd10      	pop	{r4, pc}
 8008ec2:	4c08      	ldr	r4, [pc, #32]	; (8008ee4 <rcu_adc_clock_config+0x54>)
 8008ec4:	ea04 3080 	and.w	r0, r4, r0, lsl #14
 8008ec8:	4303      	orrs	r3, r0
 8008eca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008ece:	e7f5      	b.n	8008ebc <rcu_adc_clock_config+0x2c>
 8008ed0:	4c05      	ldr	r4, [pc, #20]	; (8008ee8 <rcu_adc_clock_config+0x58>)
 8008ed2:	ea04 3080 	and.w	r0, r4, r0, lsl #14
 8008ed6:	4303      	orrs	r3, r0
 8008ed8:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8008edc:	e7ee      	b.n	8008ebc <rcu_adc_clock_config+0x2c>
 8008ede:	bf00      	nop
 8008ee0:	40021000 	andmi	r1, r2, r0
 8008ee4:	fffec000 			; <UNDEFINED> instruction: 0xfffec000
 8008ee8:	fffcc000 			; <UNDEFINED> instruction: 0xfffcc000

08008eec <rcu_rtc_clock_config>:
 8008eec:	4a03      	ldr	r2, [pc, #12]	; (8008efc <rcu_rtc_clock_config+0x10>)
 8008eee:	6a13      	ldr	r3, [r2, #32]
 8008ef0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008ef4:	4318      	orrs	r0, r3
 8008ef6:	6210      	str	r0, [r2, #32]
 8008ef8:	4770      	bx	lr
 8008efa:	bf00      	nop
 8008efc:	40021000 	andmi	r1, r2, r0

08008f00 <rcu_flag_get>:
 8008f00:	0983      	lsrs	r3, r0, #6
 8008f02:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8008f06:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8008f0a:	f000 001f 	and.w	r0, r0, #31
 8008f0e:	681b      	ldr	r3, [r3, #0]
 8008f10:	fa23 f000 	lsr.w	r0, r3, r0
 8008f14:	f000 0001 	and.w	r0, r0, #1
 8008f18:	4770      	bx	lr
	...

08008f1c <rcu_osci_stab_wait>:
 8008f1c:	f5b0 6f00 	cmp.w	r0, #2048	; 0x800
 8008f20:	b508      	push	{r3, lr}
 8008f22:	d028      	beq.n	8008f76 <rcu_osci_stab_wait+0x5a>
 8008f24:	d806      	bhi.n	8008f34 <rcu_osci_stab_wait+0x18>
 8008f26:	2810      	cmp	r0, #16
 8008f28:	d016      	beq.n	8008f58 <rcu_osci_stab_wait+0x3c>
 8008f2a:	2818      	cmp	r0, #24
 8008f2c:	d044      	beq.n	8008fb8 <rcu_osci_stab_wait+0x9c>
 8008f2e:	b370      	cbz	r0, 8008f8e <rcu_osci_stab_wait+0x72>
 8008f30:	2000      	movs	r0, #0
 8008f32:	bd08      	pop	{r3, pc}
 8008f34:	f5b0 6f10 	cmp.w	r0, #2304	; 0x900
 8008f38:	d033      	beq.n	8008fa2 <rcu_osci_stab_wait+0x86>
 8008f3a:	f243 0310 	movw	r3, #12304	; 0x3010
 8008f3e:	4298      	cmp	r0, r3
 8008f40:	d1f6      	bne.n	8008f30 <rcu_osci_stab_wait+0x14>
 8008f42:	4a22      	ldr	r2, [pc, #136]	; (8008fcc <rcu_osci_stab_wait+0xb0>)
 8008f44:	f243 0011 	movw	r0, #12305	; 0x3011
 8008f48:	f7ff ffda 	bl	8008f00 <rcu_flag_get>
 8008f4c:	b908      	cbnz	r0, 8008f52 <rcu_osci_stab_wait+0x36>
 8008f4e:	3a01      	subs	r2, #1
 8008f50:	d1f8      	bne.n	8008f44 <rcu_osci_stab_wait+0x28>
 8008f52:	f243 0011 	movw	r0, #12305	; 0x3011
 8008f56:	e008      	b.n	8008f6a <rcu_osci_stab_wait+0x4e>
 8008f58:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008f5c:	2011      	movs	r0, #17
 8008f5e:	f7ff ffcf 	bl	8008f00 <rcu_flag_get>
 8008f62:	b908      	cbnz	r0, 8008f68 <rcu_osci_stab_wait+0x4c>
 8008f64:	3a01      	subs	r2, #1
 8008f66:	d1f9      	bne.n	8008f5c <rcu_osci_stab_wait+0x40>
 8008f68:	2011      	movs	r0, #17
 8008f6a:	f7ff ffc9 	bl	8008f00 <rcu_flag_get>
 8008f6e:	3800      	subs	r0, #0
 8008f70:	bf18      	it	ne
 8008f72:	2001      	movne	r0, #1
 8008f74:	e7dd      	b.n	8008f32 <rcu_osci_stab_wait+0x16>
 8008f76:	f06f 427c 	mvn.w	r2, #4227858432	; 0xfc000000
 8008f7a:	f640 0001 	movw	r0, #2049	; 0x801
 8008f7e:	f7ff ffbf 	bl	8008f00 <rcu_flag_get>
 8008f82:	b908      	cbnz	r0, 8008f88 <rcu_osci_stab_wait+0x6c>
 8008f84:	3a01      	subs	r2, #1
 8008f86:	d1f8      	bne.n	8008f7a <rcu_osci_stab_wait+0x5e>
 8008f88:	f640 0001 	movw	r0, #2049	; 0x801
 8008f8c:	e7ed      	b.n	8008f6a <rcu_osci_stab_wait+0x4e>
 8008f8e:	f44f 62a0 	mov.w	r2, #1280	; 0x500
 8008f92:	2001      	movs	r0, #1
 8008f94:	f7ff ffb4 	bl	8008f00 <rcu_flag_get>
 8008f98:	b908      	cbnz	r0, 8008f9e <rcu_osci_stab_wait+0x82>
 8008f9a:	3a01      	subs	r2, #1
 8008f9c:	d1f9      	bne.n	8008f92 <rcu_osci_stab_wait+0x76>
 8008f9e:	2001      	movs	r0, #1
 8008fa0:	e7e3      	b.n	8008f6a <rcu_osci_stab_wait+0x4e>
 8008fa2:	4a0a      	ldr	r2, [pc, #40]	; (8008fcc <rcu_osci_stab_wait+0xb0>)
 8008fa4:	f640 1001 	movw	r0, #2305	; 0x901
 8008fa8:	f7ff ffaa 	bl	8008f00 <rcu_flag_get>
 8008fac:	b908      	cbnz	r0, 8008fb2 <rcu_osci_stab_wait+0x96>
 8008fae:	3a01      	subs	r2, #1
 8008fb0:	d1f8      	bne.n	8008fa4 <rcu_osci_stab_wait+0x88>
 8008fb2:	f640 1001 	movw	r0, #2305	; 0x901
 8008fb6:	e7d8      	b.n	8008f6a <rcu_osci_stab_wait+0x4e>
 8008fb8:	4a04      	ldr	r2, [pc, #16]	; (8008fcc <rcu_osci_stab_wait+0xb0>)
 8008fba:	2019      	movs	r0, #25
 8008fbc:	f7ff ffa0 	bl	8008f00 <rcu_flag_get>
 8008fc0:	b908      	cbnz	r0, 8008fc6 <rcu_osci_stab_wait+0xaa>
 8008fc2:	3a01      	subs	r2, #1
 8008fc4:	d1f9      	bne.n	8008fba <rcu_osci_stab_wait+0x9e>
 8008fc6:	2019      	movs	r0, #25
 8008fc8:	e7cf      	b.n	8008f6a <rcu_osci_stab_wait+0x4e>
 8008fca:	bf00      	nop
 8008fcc:	000fffff 	strdeq	pc, [pc], -pc	; <UNPREDICTABLE>

08008fd0 <rcu_osci_on>:
 8008fd0:	f7ff bf3e 	b.w	8008e50 <rcu_periph_clock_enable>

08008fd4 <rcu_clock_freq_get>:
 8008fd4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008fd6:	4b35      	ldr	r3, [pc, #212]	; (80090ac <rcu_clock_freq_get+0xd8>)
 8008fd8:	b089      	sub	sp, #36	; 0x24
 8008fda:	4604      	mov	r4, r0
 8008fdc:	ad04      	add	r5, sp, #16
 8008fde:	f103 0610 	add.w	r6, r3, #16
 8008fe2:	461f      	mov	r7, r3
 8008fe4:	6818      	ldr	r0, [r3, #0]
 8008fe6:	6859      	ldr	r1, [r3, #4]
 8008fe8:	462a      	mov	r2, r5
 8008fea:	c203      	stmia	r2!, {r0, r1}
 8008fec:	3308      	adds	r3, #8
 8008fee:	42b3      	cmp	r3, r6
 8008ff0:	4615      	mov	r5, r2
 8008ff2:	d1f7      	bne.n	8008fe4 <rcu_clock_freq_get+0x10>
 8008ff4:	6938      	ldr	r0, [r7, #16]
 8008ff6:	6871      	ldr	r1, [r6, #4]
 8008ff8:	4a2d      	ldr	r2, [pc, #180]	; (80090b0 <rcu_clock_freq_get+0xdc>)
 8008ffa:	466b      	mov	r3, sp
 8008ffc:	c303      	stmia	r3!, {r0, r1}
 8008ffe:	c303      	stmia	r3!, {r0, r1}
 8009000:	6853      	ldr	r3, [r2, #4]
 8009002:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8009006:	2b02      	cmp	r3, #2
 8009008:	d143      	bne.n	8009092 <rcu_clock_freq_get+0xbe>
 800900a:	6853      	ldr	r3, [r2, #4]
 800900c:	03df      	lsls	r7, r3, #15
 800900e:	d538      	bpl.n	8009082 <rcu_clock_freq_get+0xae>
 8009010:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8009012:	4928      	ldr	r1, [pc, #160]	; (80090b4 <rcu_clock_freq_get+0xe0>)
 8009014:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8009018:	4b27      	ldr	r3, [pc, #156]	; (80090b8 <rcu_clock_freq_get+0xe4>)
 800901a:	bf18      	it	ne
 800901c:	4619      	movne	r1, r3
 800901e:	6853      	ldr	r3, [r2, #4]
 8009020:	039e      	lsls	r6, r3, #14
 8009022:	d500      	bpl.n	8009026 <rcu_clock_freq_get+0x52>
 8009024:	0849      	lsrs	r1, r1, #1
 8009026:	6853      	ldr	r3, [r2, #4]
 8009028:	6850      	ldr	r0, [r2, #4]
 800902a:	0105      	lsls	r5, r0, #4
 800902c:	6850      	ldr	r0, [r2, #4]
 800902e:	f3c3 4383 	ubfx	r3, r3, #18, #4
 8009032:	bf48      	it	mi
 8009034:	f043 0310 	orrmi.w	r3, r3, #16
 8009038:	0040      	lsls	r0, r0, #1
 800903a:	d524      	bpl.n	8009086 <rcu_clock_freq_get+0xb2>
 800903c:	f043 0320 	orr.w	r3, r3, #32
 8009040:	2b3f      	cmp	r3, #63	; 0x3f
 8009042:	d124      	bne.n	800908e <rcu_clock_freq_get+0xba>
 8009044:	fb01 f003 	mul.w	r0, r1, r3
 8009048:	6853      	ldr	r3, [r2, #4]
 800904a:	6851      	ldr	r1, [r2, #4]
 800904c:	6852      	ldr	r2, [r2, #4]
 800904e:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8009052:	3320      	adds	r3, #32
 8009054:	446b      	add	r3, sp
 8009056:	f3c1 2102 	ubfx	r1, r1, #8, #3
 800905a:	f3c2 22c2 	ubfx	r2, r2, #11, #3
 800905e:	3120      	adds	r1, #32
 8009060:	3220      	adds	r2, #32
 8009062:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8009066:	4469      	add	r1, sp
 8009068:	446a      	add	r2, sp
 800906a:	f811 1c20 	ldrb.w	r1, [r1, #-32]
 800906e:	f812 2c18 	ldrb.w	r2, [r2, #-24]
 8009072:	fa20 f303 	lsr.w	r3, r0, r3
 8009076:	2c03      	cmp	r4, #3
 8009078:	d816      	bhi.n	80090a8 <rcu_clock_freq_get+0xd4>
 800907a:	e8df f004 	tbb	[pc, r4]
 800907e:	120f0c0d 	andne	r0, pc, #3328	; 0xd00
 8009082:	490e      	ldr	r1, [pc, #56]	; (80090bc <rcu_clock_freq_get+0xe8>)
 8009084:	e7cf      	b.n	8009026 <rcu_clock_freq_get+0x52>
 8009086:	2b0e      	cmp	r3, #14
 8009088:	d801      	bhi.n	800908e <rcu_clock_freq_get+0xba>
 800908a:	3302      	adds	r3, #2
 800908c:	e7da      	b.n	8009044 <rcu_clock_freq_get+0x70>
 800908e:	3301      	adds	r3, #1
 8009090:	e7d8      	b.n	8009044 <rcu_clock_freq_get+0x70>
 8009092:	4808      	ldr	r0, [pc, #32]	; (80090b4 <rcu_clock_freq_get+0xe0>)
 8009094:	e7d8      	b.n	8009048 <rcu_clock_freq_get+0x74>
 8009096:	4618      	mov	r0, r3
 8009098:	b009      	add	sp, #36	; 0x24
 800909a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800909c:	fa23 f001 	lsr.w	r0, r3, r1
 80090a0:	e7fa      	b.n	8009098 <rcu_clock_freq_get+0xc4>
 80090a2:	fa23 f002 	lsr.w	r0, r3, r2
 80090a6:	e7f7      	b.n	8009098 <rcu_clock_freq_get+0xc4>
 80090a8:	2000      	movs	r0, #0
 80090aa:	e7f5      	b.n	8009098 <rcu_clock_freq_get+0xc4>
 80090ac:	0800a099 	stmdaeq	r0, {r0, r3, r4, r7, sp, pc}
 80090b0:	40021000 	andmi	r1, r2, r0
 80090b4:	007a1200 	rsbseq	r1, sl, r0, lsl #4
 80090b8:	02dc6c00 	sbcseq	r6, ip, #0, 24
 80090bc:	003d0900 	eorseq	r0, sp, r0, lsl #18

080090c0 <rtc_configuration_mode_enter>:
 80090c0:	4a03      	ldr	r2, [pc, #12]	; (80090d0 <rtc_configuration_mode_enter+0x10>)
 80090c2:	f8d2 3804 	ldr.w	r3, [r2, #2052]	; 0x804
 80090c6:	f043 0310 	orr.w	r3, r3, #16
 80090ca:	f8c2 3804 	str.w	r3, [r2, #2052]	; 0x804
 80090ce:	4770      	bx	lr
 80090d0:	40002000 	andmi	r2, r0, r0

080090d4 <rtc_configuration_mode_exit>:
 80090d4:	4a03      	ldr	r2, [pc, #12]	; (80090e4 <rtc_configuration_mode_exit+0x10>)
 80090d6:	f8d2 3804 	ldr.w	r3, [r2, #2052]	; 0x804
 80090da:	f023 0310 	bic.w	r3, r3, #16
 80090de:	f8c2 3804 	str.w	r3, [r2, #2052]	; 0x804
 80090e2:	4770      	bx	lr
 80090e4:	40002000 	andmi	r2, r0, r0

080090e8 <rtc_lwoff_wait>:
 80090e8:	4a02      	ldr	r2, [pc, #8]	; (80090f4 <rtc_lwoff_wait+0xc>)
 80090ea:	f8d2 3804 	ldr.w	r3, [r2, #2052]	; 0x804
 80090ee:	069b      	lsls	r3, r3, #26
 80090f0:	d5fb      	bpl.n	80090ea <rtc_lwoff_wait+0x2>
 80090f2:	4770      	bx	lr
 80090f4:	40002000 	andmi	r2, r0, r0

080090f8 <rtc_register_sync_wait>:
 80090f8:	4b05      	ldr	r3, [pc, #20]	; (8009110 <rtc_register_sync_wait+0x18>)
 80090fa:	f8d3 2804 	ldr.w	r2, [r3, #2052]	; 0x804
 80090fe:	f022 0208 	bic.w	r2, r2, #8
 8009102:	f8c3 2804 	str.w	r2, [r3, #2052]	; 0x804
 8009106:	f8d3 2804 	ldr.w	r2, [r3, #2052]	; 0x804
 800910a:	0712      	lsls	r2, r2, #28
 800910c:	d5fb      	bpl.n	8009106 <rtc_register_sync_wait+0xe>
 800910e:	4770      	bx	lr
 8009110:	40002000 	andmi	r2, r0, r0

08009114 <rtc_counter_get>:
 8009114:	4b03      	ldr	r3, [pc, #12]	; (8009124 <rtc_counter_get+0x10>)
 8009116:	f8d3 281c 	ldr.w	r2, [r3, #2076]	; 0x81c
 800911a:	f8d3 0818 	ldr.w	r0, [r3, #2072]	; 0x818
 800911e:	ea42 4000 	orr.w	r0, r2, r0, lsl #16
 8009122:	4770      	bx	lr
 8009124:	40002000 	andmi	r2, r0, r0

08009128 <rtc_counter_set>:
 8009128:	b508      	push	{r3, lr}
 800912a:	f7ff ffc9 	bl	80090c0 <rtc_configuration_mode_enter>
 800912e:	4b05      	ldr	r3, [pc, #20]	; (8009144 <rtc_counter_set+0x1c>)
 8009130:	0c02      	lsrs	r2, r0, #16
 8009132:	b280      	uxth	r0, r0
 8009134:	f8c3 2818 	str.w	r2, [r3, #2072]	; 0x818
 8009138:	f8c3 081c 	str.w	r0, [r3, #2076]	; 0x81c
 800913c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8009140:	f7ff bfc8 	b.w	80090d4 <rtc_configuration_mode_exit>
 8009144:	40002000 	andmi	r2, r0, r0

08009148 <rtc_prescaler_set>:
 8009148:	b508      	push	{r3, lr}
 800914a:	f7ff ffb9 	bl	80090c0 <rtc_configuration_mode_enter>
 800914e:	4b06      	ldr	r3, [pc, #24]	; (8009168 <rtc_prescaler_set+0x20>)
 8009150:	f3c0 4203 	ubfx	r2, r0, #16, #4
 8009154:	b280      	uxth	r0, r0
 8009156:	f8c3 2808 	str.w	r2, [r3, #2056]	; 0x808
 800915a:	f8c3 080c 	str.w	r0, [r3, #2060]	; 0x80c
 800915e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8009162:	f7ff bfb7 	b.w	80090d4 <rtc_configuration_mode_exit>
 8009166:	bf00      	nop
 8009168:	40002000 	andmi	r2, r0, r0

0800916c <timer_deinit>:
 800916c:	b508      	push	{r3, lr}
 800916e:	4b2d      	ldr	r3, [pc, #180]	; (8009224 <timer_deinit+0xb8>)
 8009170:	4298      	cmp	r0, r3
 8009172:	d048      	beq.n	8009206 <timer_deinit+0x9a>
 8009174:	d816      	bhi.n	80091a4 <timer_deinit+0x38>
 8009176:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 800917a:	4298      	cmp	r0, r3
 800917c:	d03c      	beq.n	80091f8 <timer_deinit+0x8c>
 800917e:	d807      	bhi.n	8009190 <timer_deinit+0x24>
 8009180:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8009184:	d02a      	beq.n	80091dc <timer_deinit+0x70>
 8009186:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 800918a:	4298      	cmp	r0, r3
 800918c:	d02d      	beq.n	80091ea <timer_deinit+0x7e>
 800918e:	bd08      	pop	{r3, pc}
 8009190:	4b25      	ldr	r3, [pc, #148]	; (8009228 <timer_deinit+0xbc>)
 8009192:	4298      	cmp	r0, r3
 8009194:	d1fb      	bne.n	800918e <timer_deinit+0x22>
 8009196:	f240 4003 	movw	r0, #1027	; 0x403
 800919a:	f7ff fe74 	bl	8008e86 <rcu_periph_reset_enable>
 800919e:	f240 4003 	movw	r0, #1027	; 0x403
 80091a2:	e017      	b.n	80091d4 <timer_deinit+0x68>
 80091a4:	4b21      	ldr	r3, [pc, #132]	; (800922c <timer_deinit+0xc0>)
 80091a6:	4298      	cmp	r0, r3
 80091a8:	d00e      	beq.n	80091c8 <timer_deinit+0x5c>
 80091aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80091ae:	4298      	cmp	r0, r3
 80091b0:	d030      	beq.n	8009214 <timer_deinit+0xa8>
 80091b2:	f5a3 3390 	sub.w	r3, r3, #73728	; 0x12000
 80091b6:	4298      	cmp	r0, r3
 80091b8:	d1e9      	bne.n	800918e <timer_deinit+0x22>
 80091ba:	f240 4005 	movw	r0, #1029	; 0x405
 80091be:	f7ff fe62 	bl	8008e86 <rcu_periph_reset_enable>
 80091c2:	f240 4005 	movw	r0, #1029	; 0x405
 80091c6:	e005      	b.n	80091d4 <timer_deinit+0x68>
 80091c8:	f240 300b 	movw	r0, #779	; 0x30b
 80091cc:	f7ff fe5b 	bl	8008e86 <rcu_periph_reset_enable>
 80091d0:	f240 300b 	movw	r0, #779	; 0x30b
 80091d4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80091d8:	f7ff be57 	b.w	8008e8a <rcu_periph_reset_disable>
 80091dc:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80091e0:	f7ff fe51 	bl	8008e86 <rcu_periph_reset_enable>
 80091e4:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80091e8:	e7f4      	b.n	80091d4 <timer_deinit+0x68>
 80091ea:	f240 4001 	movw	r0, #1025	; 0x401
 80091ee:	f7ff fe4a 	bl	8008e86 <rcu_periph_reset_enable>
 80091f2:	f240 4001 	movw	r0, #1025	; 0x401
 80091f6:	e7ed      	b.n	80091d4 <timer_deinit+0x68>
 80091f8:	f240 4002 	movw	r0, #1026	; 0x402
 80091fc:	f7ff fe43 	bl	8008e86 <rcu_periph_reset_enable>
 8009200:	f240 4002 	movw	r0, #1026	; 0x402
 8009204:	e7e6      	b.n	80091d4 <timer_deinit+0x68>
 8009206:	f240 4004 	movw	r0, #1028	; 0x404
 800920a:	f7ff fe3c 	bl	8008e86 <rcu_periph_reset_enable>
 800920e:	f240 4004 	movw	r0, #1028	; 0x404
 8009212:	e7df      	b.n	80091d4 <timer_deinit+0x68>
 8009214:	f240 300d 	movw	r0, #781	; 0x30d
 8009218:	f7ff fe35 	bl	8008e86 <rcu_periph_reset_enable>
 800921c:	f240 300d 	movw	r0, #781	; 0x30d
 8009220:	e7d8      	b.n	80091d4 <timer_deinit+0x68>
 8009222:	bf00      	nop
 8009224:	40001000 	andmi	r1, r0, r0
 8009228:	40000c00 	andmi	r0, r0, r0, lsl #24
 800922c:	40012c00 	andmi	r2, r1, r0, lsl #24

08009230 <timer_init>:
 8009230:	880b      	ldrh	r3, [r1, #0]
 8009232:	6283      	str	r3, [r0, #40]	; 0x28
 8009234:	4b1a      	ldr	r3, [pc, #104]	; (80092a0 <timer_init+0x70>)
 8009236:	4298      	cmp	r0, r3
 8009238:	d007      	beq.n	800924a <timer_init+0x1a>
 800923a:	f420 6340 	bic.w	r3, r0, #3072	; 0xc00
 800923e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009242:	d002      	beq.n	800924a <timer_init+0x1a>
 8009244:	4b17      	ldr	r3, [pc, #92]	; (80092a4 <timer_init+0x74>)
 8009246:	4298      	cmp	r0, r3
 8009248:	d10b      	bne.n	8009262 <timer_init+0x32>
 800924a:	6803      	ldr	r3, [r0, #0]
 800924c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009250:	6003      	str	r3, [r0, #0]
 8009252:	6802      	ldr	r2, [r0, #0]
 8009254:	884b      	ldrh	r3, [r1, #2]
 8009256:	4313      	orrs	r3, r2
 8009258:	6003      	str	r3, [r0, #0]
 800925a:	6802      	ldr	r2, [r0, #0]
 800925c:	888b      	ldrh	r3, [r1, #4]
 800925e:	4313      	orrs	r3, r2
 8009260:	6003      	str	r3, [r0, #0]
 8009262:	688b      	ldr	r3, [r1, #8]
 8009264:	62c3      	str	r3, [r0, #44]	; 0x2c
 8009266:	4b10      	ldr	r3, [pc, #64]	; (80092a8 <timer_init+0x78>)
 8009268:	4298      	cmp	r0, r3
 800926a:	d003      	beq.n	8009274 <timer_init+0x44>
 800926c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009270:	4298      	cmp	r0, r3
 8009272:	d104      	bne.n	800927e <timer_init+0x4e>
 8009274:	6943      	ldr	r3, [r0, #20]
 8009276:	f043 0301 	orr.w	r3, r3, #1
 800927a:	6143      	str	r3, [r0, #20]
 800927c:	4770      	bx	lr
 800927e:	6803      	ldr	r3, [r0, #0]
 8009280:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009284:	6003      	str	r3, [r0, #0]
 8009286:	6802      	ldr	r2, [r0, #0]
 8009288:	88cb      	ldrh	r3, [r1, #6]
 800928a:	4313      	orrs	r3, r2
 800928c:	6003      	str	r3, [r0, #0]
 800928e:	4b04      	ldr	r3, [pc, #16]	; (80092a0 <timer_init+0x70>)
 8009290:	4298      	cmp	r0, r3
 8009292:	d002      	beq.n	800929a <timer_init+0x6a>
 8009294:	4b03      	ldr	r3, [pc, #12]	; (80092a4 <timer_init+0x74>)
 8009296:	4298      	cmp	r0, r3
 8009298:	d1ec      	bne.n	8009274 <timer_init+0x44>
 800929a:	7b0b      	ldrb	r3, [r1, #12]
 800929c:	6303      	str	r3, [r0, #48]	; 0x30
 800929e:	e7e9      	b.n	8009274 <timer_init+0x44>
 80092a0:	40012c00 	andmi	r2, r1, r0, lsl #24
 80092a4:	40013400 	andmi	r3, r1, r0, lsl #8
 80092a8:	40001000 	andmi	r1, r0, r0

080092ac <timer_enable>:
 80092ac:	6803      	ldr	r3, [r0, #0]
 80092ae:	f043 0301 	orr.w	r3, r3, #1
 80092b2:	6003      	str	r3, [r0, #0]
 80092b4:	4770      	bx	lr

080092b6 <timer_interrupt_enable>:
 80092b6:	68c3      	ldr	r3, [r0, #12]
 80092b8:	4319      	orrs	r1, r3
 80092ba:	60c1      	str	r1, [r0, #12]
 80092bc:	4770      	bx	lr

080092be <timer_interrupt_flag_clear>:
 80092be:	43c9      	mvns	r1, r1
 80092c0:	6101      	str	r1, [r0, #16]
 80092c2:	4770      	bx	lr

080092c4 <timer_flag_clear>:
 80092c4:	43c9      	mvns	r1, r1
 80092c6:	6101      	str	r1, [r0, #16]
 80092c8:	4770      	bx	lr

080092ca <timer_channel_output_mode_config>:
 80092ca:	2903      	cmp	r1, #3
 80092cc:	d81a      	bhi.n	8009304 <timer_channel_output_mode_config+0x3a>
 80092ce:	e8df f001 	tbb	[pc, r1]
 80092d2:	1a120a02 	bne	848bae2 <_sidata+0x47f972>
 80092d6:	6983      	ldr	r3, [r0, #24]
 80092d8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80092dc:	6183      	str	r3, [r0, #24]
 80092de:	6983      	ldr	r3, [r0, #24]
 80092e0:	4313      	orrs	r3, r2
 80092e2:	6183      	str	r3, [r0, #24]
 80092e4:	4770      	bx	lr
 80092e6:	6983      	ldr	r3, [r0, #24]
 80092e8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80092ec:	6183      	str	r3, [r0, #24]
 80092ee:	6983      	ldr	r3, [r0, #24]
 80092f0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80092f4:	e7f5      	b.n	80092e2 <timer_channel_output_mode_config+0x18>
 80092f6:	69c3      	ldr	r3, [r0, #28]
 80092f8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80092fc:	61c3      	str	r3, [r0, #28]
 80092fe:	69c3      	ldr	r3, [r0, #28]
 8009300:	4313      	orrs	r3, r2
 8009302:	61c3      	str	r3, [r0, #28]
 8009304:	4770      	bx	lr
 8009306:	69c3      	ldr	r3, [r0, #28]
 8009308:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800930c:	61c3      	str	r3, [r0, #28]
 800930e:	69c3      	ldr	r3, [r0, #28]
 8009310:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8009314:	e7f5      	b.n	8009302 <timer_channel_output_mode_config+0x38>

08009316 <timer_channel_output_pulse_value_config>:
 8009316:	2903      	cmp	r1, #3
 8009318:	d80a      	bhi.n	8009330 <timer_channel_output_pulse_value_config+0x1a>
 800931a:	e8df f001 	tbb	[pc, r1]
 800931e:	08060402 	stmdaeq	r6, {r1, sl}
 8009322:	6342      	str	r2, [r0, #52]	; 0x34
 8009324:	4770      	bx	lr
 8009326:	6382      	str	r2, [r0, #56]	; 0x38
 8009328:	4770      	bx	lr
 800932a:	63c2      	str	r2, [r0, #60]	; 0x3c
 800932c:	4770      	bx	lr
 800932e:	6402      	str	r2, [r0, #64]	; 0x40
 8009330:	4770      	bx	lr
	...

08009334 <usart_deinit>:
 8009334:	b508      	push	{r3, lr}
 8009336:	4b1d      	ldr	r3, [pc, #116]	; (80093ac <usart_deinit+0x78>)
 8009338:	4298      	cmp	r0, r3
 800933a:	d028      	beq.n	800938e <usart_deinit+0x5a>
 800933c:	d808      	bhi.n	8009350 <usart_deinit+0x1c>
 800933e:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 8009342:	4298      	cmp	r0, r3
 8009344:	d015      	beq.n	8009372 <usart_deinit+0x3e>
 8009346:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800934a:	4298      	cmp	r0, r3
 800934c:	d018      	beq.n	8009380 <usart_deinit+0x4c>
 800934e:	bd08      	pop	{r3, pc}
 8009350:	4b17      	ldr	r3, [pc, #92]	; (80093b0 <usart_deinit+0x7c>)
 8009352:	4298      	cmp	r0, r3
 8009354:	d022      	beq.n	800939c <usart_deinit+0x68>
 8009356:	f503 4368 	add.w	r3, r3, #59392	; 0xe800
 800935a:	4298      	cmp	r0, r3
 800935c:	d1f7      	bne.n	800934e <usart_deinit+0x1a>
 800935e:	f240 300e 	movw	r0, #782	; 0x30e
 8009362:	f7ff fd90 	bl	8008e86 <rcu_periph_reset_enable>
 8009366:	f240 300e 	movw	r0, #782	; 0x30e
 800936a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800936e:	f7ff bd8c 	b.w	8008e8a <rcu_periph_reset_disable>
 8009372:	f240 4011 	movw	r0, #1041	; 0x411
 8009376:	f7ff fd86 	bl	8008e86 <rcu_periph_reset_enable>
 800937a:	f240 4011 	movw	r0, #1041	; 0x411
 800937e:	e7f4      	b.n	800936a <usart_deinit+0x36>
 8009380:	f240 4012 	movw	r0, #1042	; 0x412
 8009384:	f7ff fd7f 	bl	8008e86 <rcu_periph_reset_enable>
 8009388:	f240 4012 	movw	r0, #1042	; 0x412
 800938c:	e7ed      	b.n	800936a <usart_deinit+0x36>
 800938e:	f240 4013 	movw	r0, #1043	; 0x413
 8009392:	f7ff fd78 	bl	8008e86 <rcu_periph_reset_enable>
 8009396:	f240 4013 	movw	r0, #1043	; 0x413
 800939a:	e7e6      	b.n	800936a <usart_deinit+0x36>
 800939c:	f240 4014 	movw	r0, #1044	; 0x414
 80093a0:	f7ff fd71 	bl	8008e86 <rcu_periph_reset_enable>
 80093a4:	f240 4014 	movw	r0, #1044	; 0x414
 80093a8:	e7df      	b.n	800936a <usart_deinit+0x36>
 80093aa:	bf00      	nop
 80093ac:	40004c00 	andmi	r4, r0, r0, lsl #24
 80093b0:	40005000 	andmi	r5, r0, r0

080093b4 <usart_baudrate_set>:
 80093b4:	b538      	push	{r3, r4, r5, lr}
 80093b6:	4b11      	ldr	r3, [pc, #68]	; (80093fc <usart_baudrate_set+0x48>)
 80093b8:	4298      	cmp	r0, r3
 80093ba:	4604      	mov	r4, r0
 80093bc:	460d      	mov	r5, r1
 80093be:	d01b      	beq.n	80093f8 <usart_baudrate_set+0x44>
 80093c0:	d809      	bhi.n	80093d6 <usart_baudrate_set+0x22>
 80093c2:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 80093c6:	4298      	cmp	r0, r3
 80093c8:	d016      	beq.n	80093f8 <usart_baudrate_set+0x44>
 80093ca:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80093ce:	4298      	cmp	r0, r3
 80093d0:	d012      	beq.n	80093f8 <usart_baudrate_set+0x44>
 80093d2:	2000      	movs	r0, #0
 80093d4:	e009      	b.n	80093ea <usart_baudrate_set+0x36>
 80093d6:	4b0a      	ldr	r3, [pc, #40]	; (8009400 <usart_baudrate_set+0x4c>)
 80093d8:	4298      	cmp	r0, r3
 80093da:	d00d      	beq.n	80093f8 <usart_baudrate_set+0x44>
 80093dc:	f503 4368 	add.w	r3, r3, #59392	; 0xe800
 80093e0:	4298      	cmp	r0, r3
 80093e2:	d1f6      	bne.n	80093d2 <usart_baudrate_set+0x1e>
 80093e4:	2003      	movs	r0, #3
 80093e6:	f7ff fdf5 	bl	8008fd4 <rcu_clock_freq_get>
 80093ea:	eb00 0355 	add.w	r3, r0, r5, lsr #1
 80093ee:	fbb3 f1f5 	udiv	r1, r3, r5
 80093f2:	b289      	uxth	r1, r1
 80093f4:	60a1      	str	r1, [r4, #8]
 80093f6:	bd38      	pop	{r3, r4, r5, pc}
 80093f8:	2002      	movs	r0, #2
 80093fa:	e7f4      	b.n	80093e6 <usart_baudrate_set+0x32>
 80093fc:	40004c00 	andmi	r4, r0, r0, lsl #24
 8009400:	40005000 	andmi	r5, r0, r0

08009404 <usart_parity_config>:
 8009404:	68c3      	ldr	r3, [r0, #12]
 8009406:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800940a:	60c3      	str	r3, [r0, #12]
 800940c:	68c3      	ldr	r3, [r0, #12]
 800940e:	4319      	orrs	r1, r3
 8009410:	60c1      	str	r1, [r0, #12]
 8009412:	4770      	bx	lr

08009414 <usart_word_length_set>:
 8009414:	68c3      	ldr	r3, [r0, #12]
 8009416:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800941a:	60c3      	str	r3, [r0, #12]
 800941c:	68c3      	ldr	r3, [r0, #12]
 800941e:	4319      	orrs	r1, r3
 8009420:	60c1      	str	r1, [r0, #12]
 8009422:	4770      	bx	lr

08009424 <usart_stop_bit_set>:
 8009424:	6903      	ldr	r3, [r0, #16]
 8009426:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800942a:	6103      	str	r3, [r0, #16]
 800942c:	6903      	ldr	r3, [r0, #16]
 800942e:	4319      	orrs	r1, r3
 8009430:	6101      	str	r1, [r0, #16]
 8009432:	4770      	bx	lr

08009434 <usart_transmit_config>:
 8009434:	68c3      	ldr	r3, [r0, #12]
 8009436:	f023 0308 	bic.w	r3, r3, #8
 800943a:	4319      	orrs	r1, r3
 800943c:	60c1      	str	r1, [r0, #12]
 800943e:	4770      	bx	lr

08009440 <usart_receive_config>:
 8009440:	68c3      	ldr	r3, [r0, #12]
 8009442:	f023 0304 	bic.w	r3, r3, #4
 8009446:	4319      	orrs	r1, r3
 8009448:	60c1      	str	r1, [r0, #12]
 800944a:	4770      	bx	lr

0800944c <usart_hardware_flow_rts_config>:
 800944c:	6943      	ldr	r3, [r0, #20]
 800944e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009452:	4319      	orrs	r1, r3
 8009454:	6141      	str	r1, [r0, #20]
 8009456:	4770      	bx	lr

08009458 <usart_hardware_flow_cts_config>:
 8009458:	6943      	ldr	r3, [r0, #20]
 800945a:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800945e:	4319      	orrs	r1, r3
 8009460:	6141      	str	r1, [r0, #20]
 8009462:	4770      	bx	lr

08009464 <usart_dma_transmit_config>:
 8009464:	6943      	ldr	r3, [r0, #20]
 8009466:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800946a:	4319      	orrs	r1, r3
 800946c:	6141      	str	r1, [r0, #20]
 800946e:	4770      	bx	lr

08009470 <usart_flag_get>:
 8009470:	098b      	lsrs	r3, r1, #6
 8009472:	f001 011f 	and.w	r1, r1, #31
 8009476:	5818      	ldr	r0, [r3, r0]
 8009478:	40c8      	lsrs	r0, r1
 800947a:	f000 0001 	and.w	r0, r0, #1
 800947e:	4770      	bx	lr

08009480 <usart_flag_clear>:
 8009480:	b510      	push	{r4, lr}
 8009482:	098c      	lsrs	r4, r1, #6
 8009484:	2201      	movs	r2, #1
 8009486:	5823      	ldr	r3, [r4, r0]
 8009488:	f001 011f 	and.w	r1, r1, #31
 800948c:	408a      	lsls	r2, r1
 800948e:	ea23 0302 	bic.w	r3, r3, r2
 8009492:	5023      	str	r3, [r4, r0]
 8009494:	bd10      	pop	{r4, pc}

08009496 <usart_interrupt_enable>:
 8009496:	098a      	lsrs	r2, r1, #6
 8009498:	b510      	push	{r4, lr}
 800949a:	f001 011f 	and.w	r1, r1, #31
 800949e:	5814      	ldr	r4, [r2, r0]
 80094a0:	2301      	movs	r3, #1
 80094a2:	408b      	lsls	r3, r1
 80094a4:	4323      	orrs	r3, r4
 80094a6:	5013      	str	r3, [r2, r0]
 80094a8:	bd10      	pop	{r4, pc}

080094aa <usart_interrupt_disable>:
 80094aa:	f7ff bfe9 	b.w	8009480 <usart_flag_clear>

080094ae <usart_interrupt_flag_clear>:
 80094ae:	b510      	push	{r4, lr}
 80094b0:	0d8c      	lsrs	r4, r1, #22
 80094b2:	2201      	movs	r2, #1
 80094b4:	5823      	ldr	r3, [r4, r0]
 80094b6:	f3c1 4104 	ubfx	r1, r1, #16, #5
 80094ba:	408a      	lsls	r2, r1
 80094bc:	ea23 0302 	bic.w	r3, r3, r2
 80094c0:	5023      	str	r3, [r4, r0]
 80094c2:	bd10      	pop	{r4, pc}

080094c4 <uart0_init>:
 80094c4:	b507      	push	{r0, r1, r2, lr}
 80094c6:	2301      	movs	r3, #1
 80094c8:	9300      	str	r3, [sp, #0]
 80094ca:	4805      	ldr	r0, [pc, #20]	; (80094e0 <uart0_init+0x1c>)
 80094cc:	2300      	movs	r3, #0
 80094ce:	2208      	movs	r2, #8
 80094d0:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
 80094d4:	f000 fab8 	bl	8009a48 <gd32_uart_begin>
 80094d8:	b003      	add	sp, #12
 80094da:	f85d fb04 	ldr.w	pc, [sp], #4
 80094de:	bf00      	nop
 80094e0:	40013800 	andmi	r3, r1, r0, lsl #16

080094e4 <uart0_putc>:
 80094e4:	280a      	cmp	r0, #10
 80094e6:	b538      	push	{r3, r4, r5, lr}
 80094e8:	4604      	mov	r4, r0
 80094ea:	d10a      	bne.n	8009502 <uart0_putc+0x1e>
 80094ec:	4d0b      	ldr	r5, [pc, #44]	; (800951c <uart0_putc+0x38>)
 80094ee:	2107      	movs	r1, #7
 80094f0:	4628      	mov	r0, r5
 80094f2:	f7ff ffbd 	bl	8009470 <usart_flag_get>
 80094f6:	2800      	cmp	r0, #0
 80094f8:	d0f9      	beq.n	80094ee <uart0_putc+0xa>
 80094fa:	4b09      	ldr	r3, [pc, #36]	; (8009520 <uart0_putc+0x3c>)
 80094fc:	220d      	movs	r2, #13
 80094fe:	f8c3 2804 	str.w	r2, [r3, #2052]	; 0x804
 8009502:	4d06      	ldr	r5, [pc, #24]	; (800951c <uart0_putc+0x38>)
 8009504:	2107      	movs	r1, #7
 8009506:	4628      	mov	r0, r5
 8009508:	f7ff ffb2 	bl	8009470 <usart_flag_get>
 800950c:	2800      	cmp	r0, #0
 800950e:	d0f9      	beq.n	8009504 <uart0_putc+0x20>
 8009510:	4b03      	ldr	r3, [pc, #12]	; (8009520 <uart0_putc+0x3c>)
 8009512:	b2e4      	uxtb	r4, r4
 8009514:	f8c3 4804 	str.w	r4, [r3, #2052]	; 0x804
 8009518:	bd38      	pop	{r3, r4, r5, pc}
 800951a:	bf00      	nop
 800951c:	40013800 	andmi	r3, r1, r0, lsl #16
 8009520:	40013000 	andmi	r3, r1, r0

08009524 <gd32_adc_init()>:
 8009524:	b510      	push	{r4, lr}
 8009526:	f240 6009 	movw	r0, #1545	; 0x609
 800952a:	4c21      	ldr	r4, [pc, #132]	; (80095b0 <gd32_adc_init()+0x8c>)
 800952c:	f7ff fc90 	bl	8008e50 <rcu_periph_clock_enable>
 8009530:	2005      	movs	r0, #5
 8009532:	f7ff fcad 	bl	8008e90 <rcu_adc_clock_config>
 8009536:	4620      	mov	r0, r4
 8009538:	2201      	movs	r2, #1
 800953a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800953e:	f000 fbcd 	bl	8009cdc <adc_special_function_config>
 8009542:	f44f 42e0 	mov.w	r2, #28672	; 0x7000
 8009546:	4620      	mov	r0, r4
 8009548:	2102      	movs	r1, #2
 800954a:	f000 fc5e 	bl	8009e0a <adc_external_trigger_source_config>
 800954e:	2100      	movs	r1, #0
 8009550:	4620      	mov	r0, r4
 8009552:	f000 fbeb 	bl	8009d2c <adc_data_alignment_config>
 8009556:	2000      	movs	r0, #0
 8009558:	f000 fbb0 	bl	8009cbc <adc_mode_config>
 800955c:	2202      	movs	r2, #2
 800955e:	4611      	mov	r1, r2
 8009560:	4620      	mov	r0, r4
 8009562:	f000 fbec 	bl	8009d3e <adc_channel_length_config>
 8009566:	4620      	mov	r0, r4
 8009568:	2307      	movs	r3, #7
 800956a:	2210      	movs	r2, #16
 800956c:	2100      	movs	r1, #0
 800956e:	f000 fc03 	bl	8009d78 <adc_inserted_channel_config>
 8009572:	2307      	movs	r3, #7
 8009574:	4620      	mov	r0, r4
 8009576:	2211      	movs	r2, #17
 8009578:	2101      	movs	r1, #1
 800957a:	f000 fbfd 	bl	8009d78 <adc_inserted_channel_config>
 800957e:	2201      	movs	r2, #1
 8009580:	2102      	movs	r1, #2
 8009582:	4620      	mov	r0, r4
 8009584:	f000 fc26 	bl	8009dd4 <adc_external_trigger_config>
 8009588:	f000 fb8e 	bl	8009ca8 <adc_tempsensor_vrefint_enable>
 800958c:	4620      	mov	r0, r4
 800958e:	f000 fb71 	bl	8009c74 <adc_enable>
 8009592:	2100      	movs	r1, #0
 8009594:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8009598:	f000 fb54 	bl	8009c44 <udelay(unsigned long, unsigned long)>
 800959c:	4620      	mov	r0, r4
 800959e:	f000 fb71 	bl	8009c84 <adc_calibration_enable>
 80095a2:	4620      	mov	r0, r4
 80095a4:	2102      	movs	r1, #2
 80095a6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80095aa:	f000 bc3f 	b.w	8009e2c <adc_software_trigger_enable>
 80095ae:	bf00      	nop
 80095b0:	40012400 	andmi	r2, r1, r0, lsl #8

080095b4 <gd32_adc_gettemp()>:
 80095b4:	b508      	push	{r3, lr}
 80095b6:	4b14      	ldr	r3, [pc, #80]	; (8009608 <gd32_adc_gettemp()+0x54>)
 80095b8:	ed9f 7a14 	vldr	s14, [pc, #80]	; 800960c <gd32_adc_gettemp()+0x58>
 80095bc:	eddf 6a14 	vldr	s13, [pc, #80]	; 8009610 <gd32_adc_gettemp()+0x5c>
 80095c0:	4814      	ldr	r0, [pc, #80]	; (8009614 <gd32_adc_gettemp()+0x60>)
 80095c2:	f203 433c 	addw	r3, r3, #1084	; 0x43c
 80095c6:	edd3 7a00 	vldr	s15, [r3]
 80095ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80095ce:	ed2d 8b02 	vpush	{d8}
 80095d2:	ee27 7a67 	vnmul.f32	s14, s14, s15
 80095d6:	eddf 7a10 	vldr	s15, [pc, #64]	; 8009618 <gd32_adc_gettemp()+0x64>
 80095da:	eee7 7a26 	vfma.f32	s15, s14, s13
 80095de:	2102      	movs	r1, #2
 80095e0:	eeb0 8a67 	vmov.f32	s16, s15
 80095e4:	f000 fc22 	bl	8009e2c <adc_software_trigger_enable>
 80095e8:	eddf 7a0c 	vldr	s15, [pc, #48]	; 800961c <gd32_adc_gettemp()+0x68>
 80095ec:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8009620 <gd32_adc_gettemp()+0x6c>
 80095f0:	ee68 7a27 	vmul.f32	s15, s16, s15
 80095f4:	ecbd 8b02 	vpop	{d8}
 80095f8:	ee87 0a87 	vdiv.f32	s0, s15, s14
 80095fc:	eef3 7a09 	vmov.f32	s15, #57	; 0x41c80000  25.0
 8009600:	ee30 0a27 	vadd.f32	s0, s0, s15
 8009604:	bd08      	pop	{r3, pc}
 8009606:	bf00      	nop
 8009608:	40012000 	andmi	r2, r1, r0
 800960c:	40533333 	subsmi	r3, r3, r3, lsr r3
 8009610:	39800000 	stmibcc	r0, {}	; <UNPREDICTABLE>
 8009614:	40012400 	andmi	r2, r1, r0, lsl #8
 8009618:	3fb70a3d 	svccc	0x00b70a3d
 800961c:	447a0000 	ldrbtmi	r0, [sl], #-0
 8009620:	4089999a 	umullmi	r9, r9, sl, r9	; <UNPREDICTABLE>

08009624 <_stop() [clone .isra.0]>:
 8009624:	b508      	push	{r3, lr}
 8009626:	4806      	ldr	r0, [pc, #24]	; (8009640 <_stop() [clone .isra.0]+0x1c>)
 8009628:	f000 fcb6 	bl	8009f98 <i2c_stop_on_bus>
 800962c:	4905      	ldr	r1, [pc, #20]	; (8009644 <_stop() [clone .isra.0]+0x20>)
 800962e:	f640 73ff 	movw	r3, #4095	; 0xfff
 8009632:	f8d1 2400 	ldr.w	r2, [r1, #1024]	; 0x400
 8009636:	0592      	lsls	r2, r2, #22
 8009638:	d501      	bpl.n	800963e <_stop() [clone .isra.0]+0x1a>
 800963a:	3b01      	subs	r3, #1
 800963c:	d1f9      	bne.n	8009632 <_stop() [clone .isra.0]+0xe>
 800963e:	bd08      	pop	{r3, pc}
 8009640:	40005400 	andmi	r5, r0, r0, lsl #8
 8009644:	40005000 	andmi	r5, r0, r0

08009648 <gd32_i2c_begin>:
 8009648:	b508      	push	{r3, lr}
 800964a:	f240 7015 	movw	r0, #1813	; 0x715
 800964e:	f7ff fbff 	bl	8008e50 <rcu_periph_clock_enable>
 8009652:	f240 6003 	movw	r0, #1539	; 0x603
 8009656:	f7ff fbfb 	bl	8008e50 <rcu_periph_clock_enable>
 800965a:	f240 6003 	movw	r0, #1539	; 0x603
 800965e:	f7ff fbf7 	bl	8008e50 <rcu_periph_clock_enable>
 8009662:	4810      	ldr	r0, [pc, #64]	; (80096a4 <gd32_i2c_begin+0x5c>)
 8009664:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009668:	2203      	movs	r2, #3
 800966a:	211c      	movs	r1, #28
 800966c:	f7ff fb62 	bl	8008d34 <gpio_init>
 8009670:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009674:	2203      	movs	r2, #3
 8009676:	480b      	ldr	r0, [pc, #44]	; (80096a4 <gd32_i2c_begin+0x5c>)
 8009678:	211c      	movs	r1, #28
 800967a:	f7ff fb5b 	bl	8008d34 <gpio_init>
 800967e:	2101      	movs	r1, #1
 8009680:	2002      	movs	r0, #2
 8009682:	f7ff fbad 	bl	8008de0 <gpio_pin_remap_config>
 8009686:	4908      	ldr	r1, [pc, #32]	; (80096a8 <gd32_i2c_begin+0x60>)
 8009688:	4808      	ldr	r0, [pc, #32]	; (80096ac <gd32_i2c_begin+0x64>)
 800968a:	2200      	movs	r2, #0
 800968c:	f000 fbdc 	bl	8009e48 <i2c_clock_config>
 8009690:	4806      	ldr	r0, [pc, #24]	; (80096ac <gd32_i2c_begin+0x64>)
 8009692:	f000 fc77 	bl	8009f84 <i2c_enable>
 8009696:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800969a:	4804      	ldr	r0, [pc, #16]	; (80096ac <gd32_i2c_begin+0x64>)
 800969c:	2101      	movs	r1, #1
 800969e:	f000 bc57 	b.w	8009f50 <i2c_ack_config>
 80096a2:	bf00      	nop
 80096a4:	40010c00 	andmi	r0, r1, r0, lsl #24
 80096a8:	00061a80 	andeq	r1, r6, r0, lsl #21
 80096ac:	40005400 	andmi	r5, r0, r0, lsl #8

080096b0 <gd32_i2c_set_baudrate>:
 80096b0:	4601      	mov	r1, r0
 80096b2:	2200      	movs	r2, #0
 80096b4:	4801      	ldr	r0, [pc, #4]	; (80096bc <gd32_i2c_set_baudrate+0xc>)
 80096b6:	f000 bbc7 	b.w	8009e48 <i2c_clock_config>
 80096ba:	bf00      	nop
 80096bc:	40005400 	andmi	r5, r0, r0, lsl #8

080096c0 <gd32_i2c_set_address>:
 80096c0:	4b01      	ldr	r3, [pc, #4]	; (80096c8 <gd32_i2c_set_address+0x8>)
 80096c2:	0040      	lsls	r0, r0, #1
 80096c4:	7018      	strb	r0, [r3, #0]
 80096c6:	4770      	bx	lr
 80096c8:	200027b0 			; <UNDEFINED> instruction: 0x200027b0

080096cc <gd32_i2c_write>:
 80096cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80096ce:	4e30      	ldr	r6, [pc, #192]	; (8009790 <gd32_i2c_write+0xc4>)
 80096d0:	4604      	mov	r4, r0
 80096d2:	460f      	mov	r7, r1
 80096d4:	f640 75ff 	movw	r5, #4095	; 0xfff
 80096d8:	f240 6101 	movw	r1, #1537	; 0x601
 80096dc:	4630      	mov	r0, r6
 80096de:	f000 fc65 	bl	8009fac <i2c_flag_get>
 80096e2:	b9b0      	cbnz	r0, 8009712 <gd32_i2c_write+0x46>
 80096e4:	482a      	ldr	r0, [pc, #168]	; (8009790 <gd32_i2c_write+0xc4>)
 80096e6:	4e2a      	ldr	r6, [pc, #168]	; (8009790 <gd32_i2c_write+0xc4>)
 80096e8:	f000 fc51 	bl	8009f8e <i2c_start_on_bus>
 80096ec:	f640 75ff 	movw	r5, #4095	; 0xfff
 80096f0:	f44f 61a0 	mov.w	r1, #1280	; 0x500
 80096f4:	4630      	mov	r0, r6
 80096f6:	f000 fc59 	bl	8009fac <i2c_flag_get>
 80096fa:	b190      	cbz	r0, 8009722 <gd32_i2c_write+0x56>
 80096fc:	4b25      	ldr	r3, [pc, #148]	; (8009794 <gd32_i2c_write+0xc8>)
 80096fe:	4824      	ldr	r0, [pc, #144]	; (8009790 <gd32_i2c_write+0xc4>)
 8009700:	7819      	ldrb	r1, [r3, #0]
 8009702:	4e23      	ldr	r6, [pc, #140]	; (8009790 <gd32_i2c_write+0xc4>)
 8009704:	f06f 0201 	mvn.w	r2, #1
 8009708:	f000 fc34 	bl	8009f74 <i2c_master_addressing>
 800970c:	f640 75ff 	movw	r5, #4095	; 0xfff
 8009710:	e00c      	b.n	800972c <gd32_i2c_write+0x60>
 8009712:	3d01      	subs	r5, #1
 8009714:	d1e0      	bne.n	80096d8 <gd32_i2c_write+0xc>
 8009716:	f7ff ff85 	bl	8009624 <_stop() [clone .isra.0]>
 800971a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800971e:	4240      	negs	r0, r0
 8009720:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009722:	3d01      	subs	r5, #1
 8009724:	d1e4      	bne.n	80096f0 <gd32_i2c_write+0x24>
 8009726:	e7f6      	b.n	8009716 <gd32_i2c_write+0x4a>
 8009728:	3d01      	subs	r5, #1
 800972a:	d0f4      	beq.n	8009716 <gd32_i2c_write+0x4a>
 800972c:	f240 5101 	movw	r1, #1281	; 0x501
 8009730:	4630      	mov	r0, r6
 8009732:	f000 fc3b 	bl	8009fac <i2c_flag_get>
 8009736:	2800      	cmp	r0, #0
 8009738:	d0f6      	beq.n	8009728 <gd32_i2c_write+0x5c>
 800973a:	4815      	ldr	r0, [pc, #84]	; (8009790 <gd32_i2c_write+0xc4>)
 800973c:	4e14      	ldr	r6, [pc, #80]	; (8009790 <gd32_i2c_write+0xc4>)
 800973e:	f240 5101 	movw	r1, #1281	; 0x501
 8009742:	f000 fc3b 	bl	8009fbc <i2c_flag_clear>
 8009746:	f640 75ff 	movw	r5, #4095	; 0xfff
 800974a:	f240 5107 	movw	r1, #1287	; 0x507
 800974e:	4630      	mov	r0, r6
 8009750:	f000 fc2c 	bl	8009fac <i2c_flag_get>
 8009754:	2801      	cmp	r0, #1
 8009756:	d107      	bne.n	8009768 <gd32_i2c_write+0x9c>
 8009758:	4e0d      	ldr	r6, [pc, #52]	; (8009790 <gd32_i2c_write+0xc4>)
 800975a:	4427      	add	r7, r4
 800975c:	42a7      	cmp	r7, r4
 800975e:	d106      	bne.n	800976e <gd32_i2c_write+0xa2>
 8009760:	f7ff ff60 	bl	8009624 <_stop() [clone .isra.0]>
 8009764:	2000      	movs	r0, #0
 8009766:	e7da      	b.n	800971e <gd32_i2c_write+0x52>
 8009768:	3d01      	subs	r5, #1
 800976a:	d1ee      	bne.n	800974a <gd32_i2c_write+0x7e>
 800976c:	e7d3      	b.n	8009716 <gd32_i2c_write+0x4a>
 800976e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009772:	4630      	mov	r0, r6
 8009774:	f000 fc15 	bl	8009fa2 <i2c_data_transmit>
 8009778:	f640 75ff 	movw	r5, #4095	; 0xfff
 800977c:	f240 5102 	movw	r1, #1282	; 0x502
 8009780:	4630      	mov	r0, r6
 8009782:	f000 fc13 	bl	8009fac <i2c_flag_get>
 8009786:	2800      	cmp	r0, #0
 8009788:	d1e8      	bne.n	800975c <gd32_i2c_write+0x90>
 800978a:	3d01      	subs	r5, #1
 800978c:	d1f6      	bne.n	800977c <gd32_i2c_write+0xb0>
 800978e:	e7c2      	b.n	8009716 <gd32_i2c_write+0x4a>
 8009790:	40005400 	andmi	r5, r0, r0, lsl #8
 8009794:	200027b0 			; <UNDEFINED> instruction: 0x200027b0

08009798 <gd32_i2c_read>:
 8009798:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800979c:	4f4d      	ldr	r7, [pc, #308]	; (80098d4 <gd32_i2c_read+0x13c>)
 800979e:	4680      	mov	r8, r0
 80097a0:	460c      	mov	r4, r1
 80097a2:	f640 76ff 	movw	r6, #4095	; 0xfff
 80097a6:	f240 6101 	movw	r1, #1537	; 0x601
 80097aa:	4638      	mov	r0, r7
 80097ac:	f000 fbfe 	bl	8009fac <i2c_flag_get>
 80097b0:	4605      	mov	r5, r0
 80097b2:	bb08      	cbnz	r0, 80097f8 <gd32_i2c_read+0x60>
 80097b4:	2c02      	cmp	r4, #2
 80097b6:	d103      	bne.n	80097c0 <gd32_i2c_read+0x28>
 80097b8:	4601      	mov	r1, r0
 80097ba:	4846      	ldr	r0, [pc, #280]	; (80098d4 <gd32_i2c_read+0x13c>)
 80097bc:	f000 fbd1 	bl	8009f62 <i2c_ackpos_config>
 80097c0:	4844      	ldr	r0, [pc, #272]	; (80098d4 <gd32_i2c_read+0x13c>)
 80097c2:	4f44      	ldr	r7, [pc, #272]	; (80098d4 <gd32_i2c_read+0x13c>)
 80097c4:	f000 fbe3 	bl	8009f8e <i2c_start_on_bus>
 80097c8:	f640 76ff 	movw	r6, #4095	; 0xfff
 80097cc:	f44f 61a0 	mov.w	r1, #1280	; 0x500
 80097d0:	4638      	mov	r0, r7
 80097d2:	f000 fbeb 	bl	8009fac <i2c_flag_get>
 80097d6:	b1a8      	cbz	r0, 8009804 <gd32_i2c_read+0x6c>
 80097d8:	4b3f      	ldr	r3, [pc, #252]	; (80098d8 <gd32_i2c_read+0x140>)
 80097da:	483e      	ldr	r0, [pc, #248]	; (80098d4 <gd32_i2c_read+0x13c>)
 80097dc:	7819      	ldrb	r1, [r3, #0]
 80097de:	2201      	movs	r2, #1
 80097e0:	f000 fbc8 	bl	8009f74 <i2c_master_addressing>
 80097e4:	2c02      	cmp	r4, #2
 80097e6:	d803      	bhi.n	80097f0 <gd32_i2c_read+0x58>
 80097e8:	483a      	ldr	r0, [pc, #232]	; (80098d4 <gd32_i2c_read+0x13c>)
 80097ea:	2100      	movs	r1, #0
 80097ec:	f000 fbb0 	bl	8009f50 <i2c_ack_config>
 80097f0:	4f38      	ldr	r7, [pc, #224]	; (80098d4 <gd32_i2c_read+0x13c>)
 80097f2:	f640 76ff 	movw	r6, #4095	; 0xfff
 80097f6:	e00a      	b.n	800980e <gd32_i2c_read+0x76>
 80097f8:	3e01      	subs	r6, #1
 80097fa:	d1d4      	bne.n	80097a6 <gd32_i2c_read+0xe>
 80097fc:	f7ff ff12 	bl	8009624 <_stop() [clone .isra.0]>
 8009800:	2504      	movs	r5, #4
 8009802:	e04d      	b.n	80098a0 <gd32_i2c_read+0x108>
 8009804:	3e01      	subs	r6, #1
 8009806:	d1e1      	bne.n	80097cc <gd32_i2c_read+0x34>
 8009808:	e7f8      	b.n	80097fc <gd32_i2c_read+0x64>
 800980a:	3e01      	subs	r6, #1
 800980c:	d0f6      	beq.n	80097fc <gd32_i2c_read+0x64>
 800980e:	f240 5101 	movw	r1, #1281	; 0x501
 8009812:	4638      	mov	r0, r7
 8009814:	f000 fbca 	bl	8009fac <i2c_flag_get>
 8009818:	2800      	cmp	r0, #0
 800981a:	d0f6      	beq.n	800980a <gd32_i2c_read+0x72>
 800981c:	482d      	ldr	r0, [pc, #180]	; (80098d4 <gd32_i2c_read+0x13c>)
 800981e:	f240 5101 	movw	r1, #1281	; 0x501
 8009822:	f000 fbcb 	bl	8009fbc <i2c_flag_clear>
 8009826:	2c01      	cmp	r4, #1
 8009828:	d102      	bne.n	8009830 <gd32_i2c_read+0x98>
 800982a:	482a      	ldr	r0, [pc, #168]	; (80098d4 <gd32_i2c_read+0x13c>)
 800982c:	f000 fbb4 	bl	8009f98 <i2c_stop_on_bus>
 8009830:	4e28      	ldr	r6, [pc, #160]	; (80098d4 <gd32_i2c_read+0x13c>)
 8009832:	f640 77ff 	movw	r7, #4095	; 0xfff
 8009836:	e022      	b.n	800987e <gd32_i2c_read+0xe6>
 8009838:	2c03      	cmp	r4, #3
 800983a:	d134      	bne.n	80098a6 <gd32_i2c_read+0x10e>
 800983c:	f640 79ff 	movw	r9, #4095	; 0xfff
 8009840:	e002      	b.n	8009848 <gd32_i2c_read+0xb0>
 8009842:	f1b9 0901 	subs.w	r9, r9, #1
 8009846:	d0d9      	beq.n	80097fc <gd32_i2c_read+0x64>
 8009848:	f240 5102 	movw	r1, #1282	; 0x502
 800984c:	4630      	mov	r0, r6
 800984e:	f000 fbad 	bl	8009fac <i2c_flag_get>
 8009852:	2800      	cmp	r0, #0
 8009854:	d0f5      	beq.n	8009842 <gd32_i2c_read+0xaa>
 8009856:	2100      	movs	r1, #0
 8009858:	4630      	mov	r0, r6
 800985a:	f000 fb79 	bl	8009f50 <i2c_ack_config>
 800985e:	f240 5106 	movw	r1, #1286	; 0x506
 8009862:	4630      	mov	r0, r6
 8009864:	f000 fba2 	bl	8009fac <i2c_flag_get>
 8009868:	b138      	cbz	r0, 800987a <gd32_i2c_read+0xe2>
 800986a:	4630      	mov	r0, r6
 800986c:	f000 fb9b 	bl	8009fa6 <i2c_data_receive>
 8009870:	f808 0b01 	strb.w	r0, [r8], #1
 8009874:	3c01      	subs	r4, #1
 8009876:	f640 77ff 	movw	r7, #4095	; 0xfff
 800987a:	3f01      	subs	r7, #1
 800987c:	d0be      	beq.n	80097fc <gd32_i2c_read+0x64>
 800987e:	2c00      	cmp	r4, #0
 8009880:	d1da      	bne.n	8009838 <gd32_i2c_read+0xa0>
 8009882:	4916      	ldr	r1, [pc, #88]	; (80098dc <gd32_i2c_read+0x144>)
 8009884:	f640 73ff 	movw	r3, #4095	; 0xfff
 8009888:	f8d1 2400 	ldr.w	r2, [r1, #1024]	; 0x400
 800988c:	0592      	lsls	r2, r2, #22
 800988e:	d41d      	bmi.n	80098cc <gd32_i2c_read+0x134>
 8009890:	4810      	ldr	r0, [pc, #64]	; (80098d4 <gd32_i2c_read+0x13c>)
 8009892:	2101      	movs	r1, #1
 8009894:	f000 fb5c 	bl	8009f50 <i2c_ack_config>
 8009898:	480e      	ldr	r0, [pc, #56]	; (80098d4 <gd32_i2c_read+0x13c>)
 800989a:	2101      	movs	r1, #1
 800989c:	f000 fb61 	bl	8009f62 <i2c_ackpos_config>
 80098a0:	4628      	mov	r0, r5
 80098a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80098a6:	2c02      	cmp	r4, #2
 80098a8:	d1d9      	bne.n	800985e <gd32_i2c_read+0xc6>
 80098aa:	f640 79ff 	movw	r9, #4095	; 0xfff
 80098ae:	e002      	b.n	80098b6 <gd32_i2c_read+0x11e>
 80098b0:	f1b9 0901 	subs.w	r9, r9, #1
 80098b4:	d0a2      	beq.n	80097fc <gd32_i2c_read+0x64>
 80098b6:	f240 5102 	movw	r1, #1282	; 0x502
 80098ba:	4630      	mov	r0, r6
 80098bc:	f000 fb76 	bl	8009fac <i2c_flag_get>
 80098c0:	2800      	cmp	r0, #0
 80098c2:	d0f5      	beq.n	80098b0 <gd32_i2c_read+0x118>
 80098c4:	4630      	mov	r0, r6
 80098c6:	f000 fb67 	bl	8009f98 <i2c_stop_on_bus>
 80098ca:	e7c8      	b.n	800985e <gd32_i2c_read+0xc6>
 80098cc:	3b01      	subs	r3, #1
 80098ce:	d1db      	bne.n	8009888 <gd32_i2c_read+0xf0>
 80098d0:	e796      	b.n	8009800 <gd32_i2c_read+0x68>
 80098d2:	bf00      	nop
 80098d4:	40005400 	andmi	r5, r0, r0, lsl #8
 80098d8:	200027b0 			; <UNDEFINED> instruction: 0x200027b0
 80098dc:	40005000 	andmi	r5, r0, r0

080098e0 <gd32_spi_dma_begin()>:
 80098e0:	b530      	push	{r4, r5, lr}
 80098e2:	f240 6002 	movw	r0, #1538	; 0x602
 80098e6:	b089      	sub	sp, #36	; 0x24
 80098e8:	f7ff fab2 	bl	8008e50 <rcu_periph_clock_enable>
 80098ec:	f240 6003 	movw	r0, #1539	; 0x603
 80098f0:	f7ff faae 	bl	8008e50 <rcu_periph_clock_enable>
 80098f4:	f240 700f 	movw	r0, #1807	; 0x70f
 80098f8:	f7ff faaa 	bl	8008e50 <rcu_periph_clock_enable>
 80098fc:	f44f 60c0 	mov.w	r0, #1536	; 0x600
 8009900:	f7ff faa6 	bl	8008e50 <rcu_periph_clock_enable>
 8009904:	4829      	ldr	r0, [pc, #164]	; (80099ac <gd32_spi_dma_begin()+0xcc>)
 8009906:	4c2a      	ldr	r4, [pc, #168]	; (80099b0 <gd32_spi_dma_begin()+0xd0>)
 8009908:	2338      	movs	r3, #56	; 0x38
 800990a:	2203      	movs	r2, #3
 800990c:	2118      	movs	r1, #24
 800990e:	f7ff fa11 	bl	8008d34 <gpio_init>
 8009912:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009916:	2203      	movs	r2, #3
 8009918:	4826      	ldr	r0, [pc, #152]	; (80099b4 <gd32_spi_dma_begin()+0xd4>)
 800991a:	2118      	movs	r1, #24
 800991c:	f7ff fa0a 	bl	8008d34 <gpio_init>
 8009920:	2101      	movs	r1, #1
 8009922:	4825      	ldr	r0, [pc, #148]	; (80099b8 <gd32_spi_dma_begin()+0xd8>)
 8009924:	f7ff fa5c 	bl	8008de0 <gpio_pin_remap_config>
 8009928:	4824      	ldr	r0, [pc, #144]	; (80099bc <gd32_spi_dma_begin()+0xdc>)
 800992a:	f000 fb9f 	bl	800a06c <i2s_disable>
 800992e:	2300      	movs	r3, #0
 8009930:	461a      	mov	r2, r3
 8009932:	4923      	ldr	r1, [pc, #140]	; (80099c0 <gd32_spi_dma_begin()+0xe0>)
 8009934:	4821      	ldr	r0, [pc, #132]	; (80099bc <gd32_spi_dma_begin()+0xdc>)
 8009936:	f000 fb62 	bl	8009ffe <i2s_psc_config>
 800993a:	2300      	movs	r3, #0
 800993c:	2210      	movs	r2, #16
 800993e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8009942:	481e      	ldr	r0, [pc, #120]	; (80099bc <gd32_spi_dma_begin()+0xdc>)
 8009944:	f000 fb4c 	bl	8009fe0 <i2s_init>
 8009948:	481c      	ldr	r0, [pc, #112]	; (80099bc <gd32_spi_dma_begin()+0xdc>)
 800994a:	f000 fb8a 	bl	800a062 <i2s_enable>
 800994e:	f240 5001 	movw	r0, #1281	; 0x501
 8009952:	f7ff fa7d 	bl	8008e50 <rcu_periph_clock_enable>
 8009956:	2101      	movs	r1, #1
 8009958:	4620      	mov	r0, r4
 800995a:	f7ff f897 	bl	8008a8c <dma_deinit>
 800995e:	a801      	add	r0, sp, #4
 8009960:	f7ff f8b0 	bl	8008ac4 <dma_struct_para_init>
 8009964:	4917      	ldr	r1, [pc, #92]	; (80099c4 <gd32_spi_dma_begin()+0xe4>)
 8009966:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800996a:	2501      	movs	r5, #1
 800996c:	9304      	str	r3, [sp, #16]
 800996e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8009972:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009976:	e9cd 1301 	strd	r1, r3, [sp, #4]
 800997a:	9206      	str	r2, [sp, #24]
 800997c:	4629      	mov	r1, r5
 800997e:	aa01      	add	r2, sp, #4
 8009980:	4620      	mov	r0, r4
 8009982:	f8ad 301c 	strh.w	r3, [sp, #28]
 8009986:	f88d 501e 	strb.w	r5, [sp, #30]
 800998a:	f7ff f8a7 	bl	8008adc <dma_init>
 800998e:	4629      	mov	r1, r5
 8009990:	4620      	mov	r0, r4
 8009992:	f7ff f8dd 	bl	8008b50 <dma_circulation_disable>
 8009996:	4629      	mov	r1, r5
 8009998:	4620      	mov	r0, r4
 800999a:	f7ff f8e9 	bl	8008b70 <dma_memory_to_memory_disable>
 800999e:	4b0a      	ldr	r3, [pc, #40]	; (80099c8 <gd32_spi_dma_begin()+0xe8>)
 80099a0:	2200      	movs	r2, #0
 80099a2:	f8c3 2420 	str.w	r2, [r3, #1056]	; 0x420
 80099a6:	b009      	add	sp, #36	; 0x24
 80099a8:	bd30      	pop	{r4, r5, pc}
 80099aa:	bf00      	nop
 80099ac:	40010c00 	andmi	r0, r1, r0, lsl #24
 80099b0:	40020400 	andmi	r0, r2, r0, lsl #8
 80099b4:	40010800 	andmi	r0, r1, r0, lsl #16
 80099b8:	00300400 	eorseq	r0, r0, r0, lsl #8
 80099bc:	40003c00 	andmi	r3, r0, r0, lsl #24
 80099c0:	00030d40 	andeq	r0, r3, r0, asr #26
 80099c4:	40003c0c 	andmi	r3, r0, ip, lsl #24
 80099c8:	40020000 	andmi	r0, r2, r0

080099cc <gd32_spi_dma_set_speed_hz(unsigned long)>:
 80099cc:	b510      	push	{r4, lr}
 80099ce:	4604      	mov	r4, r0
 80099d0:	4806      	ldr	r0, [pc, #24]	; (80099ec <gd32_spi_dma_set_speed_hz(unsigned long)+0x20>)
 80099d2:	f000 fb4b 	bl	800a06c <i2s_disable>
 80099d6:	2300      	movs	r3, #0
 80099d8:	4804      	ldr	r0, [pc, #16]	; (80099ec <gd32_spi_dma_set_speed_hz(unsigned long)+0x20>)
 80099da:	0961      	lsrs	r1, r4, #5
 80099dc:	461a      	mov	r2, r3
 80099de:	f000 fb0e 	bl	8009ffe <i2s_psc_config>
 80099e2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80099e6:	4801      	ldr	r0, [pc, #4]	; (80099ec <gd32_spi_dma_set_speed_hz(unsigned long)+0x20>)
 80099e8:	f000 bb3b 	b.w	800a062 <i2s_enable>
 80099ec:	40003c00 	andmi	r3, r0, r0, lsl #24

080099f0 <gd32_spi_dma_tx_prepare(unsigned long*)>:
 80099f0:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 80099f4:	6003      	str	r3, [r0, #0]
 80099f6:	4801      	ldr	r0, [pc, #4]	; (80099fc <gd32_spi_dma_tx_prepare(unsigned long*)+0xc>)
 80099f8:	4770      	bx	lr
 80099fa:	bf00      	nop
 80099fc:	200027b4 			; <UNDEFINED> instruction: 0x200027b4

08009a00 <gd32_spi_dma_tx_start(unsigned char const*, unsigned long)>:
 8009a00:	4a0a      	ldr	r2, [pc, #40]	; (8009a2c <gd32_spi_dma_tx_start(unsigned char const*, unsigned long)+0x2c>)
 8009a02:	f8d2 341c 	ldr.w	r3, [r2, #1052]	; 0x41c
 8009a06:	3101      	adds	r1, #1
 8009a08:	f023 0301 	bic.w	r3, r3, #1
 8009a0c:	f8c2 341c 	str.w	r3, [r2, #1052]	; 0x41c
 8009a10:	f3c1 014f 	ubfx	r1, r1, #1, #16
 8009a14:	f043 0301 	orr.w	r3, r3, #1
 8009a18:	f8c2 0428 	str.w	r0, [r2, #1064]	; 0x428
 8009a1c:	f8c2 1420 	str.w	r1, [r2, #1056]	; 0x420
 8009a20:	4803      	ldr	r0, [pc, #12]	; (8009a30 <gd32_spi_dma_tx_start(unsigned char const*, unsigned long)+0x30>)
 8009a22:	f8c2 341c 	str.w	r3, [r2, #1052]	; 0x41c
 8009a26:	2100      	movs	r1, #0
 8009a28:	f000 bb25 	b.w	800a076 <spi_dma_enable>
 8009a2c:	40020000 	andmi	r0, r2, r0
 8009a30:	40003c00 	andmi	r3, r0, r0, lsl #24

08009a34 <gd32_spi_dma_tx_is_active()>:
 8009a34:	4b03      	ldr	r3, [pc, #12]	; (8009a44 <gd32_spi_dma_tx_is_active()+0x10>)
 8009a36:	f8d3 0420 	ldr.w	r0, [r3, #1056]	; 0x420
 8009a3a:	3800      	subs	r0, #0
 8009a3c:	bf18      	it	ne
 8009a3e:	2001      	movne	r0, #1
 8009a40:	4770      	bx	lr
 8009a42:	bf00      	nop
 8009a44:	40020000 	andmi	r0, r2, r0

08009a48 <gd32_uart_begin>:
 8009a48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009a4a:	461e      	mov	r6, r3
 8009a4c:	4b63      	ldr	r3, [pc, #396]	; (8009bdc <gd32_uart_begin+0x194>)
 8009a4e:	4298      	cmp	r0, r3
 8009a50:	4604      	mov	r4, r0
 8009a52:	460f      	mov	r7, r1
 8009a54:	4615      	mov	r5, r2
 8009a56:	d03b      	beq.n	8009ad0 <gd32_uart_begin+0x88>
 8009a58:	d80a      	bhi.n	8009a70 <gd32_uart_begin+0x28>
 8009a5a:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 8009a5e:	4298      	cmp	r0, r3
 8009a60:	d02f      	beq.n	8009ac2 <gd32_uart_begin+0x7a>
 8009a62:	f240 7012 	movw	r0, #1810	; 0x712
 8009a66:	f7ff f9f3 	bl	8008e50 <rcu_periph_clock_enable>
 8009a6a:	f240 6004 	movw	r0, #1540	; 0x604
 8009a6e:	e008      	b.n	8009a82 <gd32_uart_begin+0x3a>
 8009a70:	4b5b      	ldr	r3, [pc, #364]	; (8009be0 <gd32_uart_begin+0x198>)
 8009a72:	4298      	cmp	r0, r3
 8009a74:	d02f      	beq.n	8009ad6 <gd32_uart_begin+0x8e>
 8009a76:	f240 600e 	movw	r0, #1550	; 0x60e
 8009a7a:	f7ff f9e9 	bl	8008e50 <rcu_periph_clock_enable>
 8009a7e:	f240 6003 	movw	r0, #1539	; 0x603
 8009a82:	f7ff f9e5 	bl	8008e50 <rcu_periph_clock_enable>
 8009a86:	f44f 60c0 	mov.w	r0, #1536	; 0x600
 8009a8a:	f7ff f9e1 	bl	8008e50 <rcu_periph_clock_enable>
 8009a8e:	4b53      	ldr	r3, [pc, #332]	; (8009bdc <gd32_uart_begin+0x194>)
 8009a90:	429c      	cmp	r4, r3
 8009a92:	f000 8084 	beq.w	8009b9e <gd32_uart_begin+0x156>
 8009a96:	d829      	bhi.n	8009aec <gd32_uart_begin+0xa4>
 8009a98:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 8009a9c:	429c      	cmp	r4, r3
 8009a9e:	d071      	beq.n	8009b84 <gd32_uart_begin+0x13c>
 8009aa0:	4850      	ldr	r0, [pc, #320]	; (8009be4 <gd32_uart_begin+0x19c>)
 8009aa2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009aa6:	2203      	movs	r2, #3
 8009aa8:	2118      	movs	r1, #24
 8009aaa:	f7ff f943 	bl	8008d34 <gpio_init>
 8009aae:	484d      	ldr	r0, [pc, #308]	; (8009be4 <gd32_uart_begin+0x19c>)
 8009ab0:	2104      	movs	r1, #4
 8009ab2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009ab6:	2203      	movs	r2, #3
 8009ab8:	f7ff f93c 	bl	8008d34 <gpio_init>
 8009abc:	484a      	ldr	r0, [pc, #296]	; (8009be8 <gd32_uart_begin+0x1a0>)
 8009abe:	2101      	movs	r1, #1
 8009ac0:	e025      	b.n	8009b0e <gd32_uart_begin+0xc6>
 8009ac2:	f240 7011 	movw	r0, #1809	; 0x711
 8009ac6:	f7ff f9c3 	bl	8008e50 <rcu_periph_clock_enable>
 8009aca:	f240 6002 	movw	r0, #1538	; 0x602
 8009ace:	e7d8      	b.n	8009a82 <gd32_uart_begin+0x3a>
 8009ad0:	f240 7013 	movw	r0, #1811	; 0x713
 8009ad4:	e7c7      	b.n	8009a66 <gd32_uart_begin+0x1e>
 8009ad6:	f240 7014 	movw	r0, #1812	; 0x714
 8009ada:	f7ff f9b9 	bl	8008e50 <rcu_periph_clock_enable>
 8009ade:	f240 6004 	movw	r0, #1540	; 0x604
 8009ae2:	f7ff f9b5 	bl	8008e50 <rcu_periph_clock_enable>
 8009ae6:	f240 6005 	movw	r0, #1541	; 0x605
 8009aea:	e7ca      	b.n	8009a82 <gd32_uart_begin+0x3a>
 8009aec:	4b3c      	ldr	r3, [pc, #240]	; (8009be0 <gd32_uart_begin+0x198>)
 8009aee:	429c      	cmp	r4, r3
 8009af0:	d062      	beq.n	8009bb8 <gd32_uart_begin+0x170>
 8009af2:	483e      	ldr	r0, [pc, #248]	; (8009bec <gd32_uart_begin+0x1a4>)
 8009af4:	2340      	movs	r3, #64	; 0x40
 8009af6:	2203      	movs	r2, #3
 8009af8:	2118      	movs	r1, #24
 8009afa:	f7ff f91b 	bl	8008d34 <gpio_init>
 8009afe:	483b      	ldr	r0, [pc, #236]	; (8009bec <gd32_uart_begin+0x1a4>)
 8009b00:	2104      	movs	r1, #4
 8009b02:	2380      	movs	r3, #128	; 0x80
 8009b04:	2203      	movs	r2, #3
 8009b06:	f7ff f915 	bl	8008d34 <gpio_init>
 8009b0a:	2101      	movs	r1, #1
 8009b0c:	2004      	movs	r0, #4
 8009b0e:	f7ff f967 	bl	8008de0 <gpio_pin_remap_config>
 8009b12:	4620      	mov	r0, r4
 8009b14:	f7ff fc0e 	bl	8009334 <usart_deinit>
 8009b18:	68e3      	ldr	r3, [r4, #12]
 8009b1a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009b1e:	60e3      	str	r3, [r4, #12]
 8009b20:	4639      	mov	r1, r7
 8009b22:	4620      	mov	r0, r4
 8009b24:	f7ff fc46 	bl	80093b4 <usart_baudrate_set>
 8009b28:	f1a5 0309 	sub.w	r3, r5, #9
 8009b2c:	4259      	negs	r1, r3
 8009b2e:	4159      	adcs	r1, r3
 8009b30:	0309      	lsls	r1, r1, #12
 8009b32:	4620      	mov	r0, r4
 8009b34:	f7ff fc6e 	bl	8009414 <usart_word_length_set>
 8009b38:	9906      	ldr	r1, [sp, #24]
 8009b3a:	1e8a      	subs	r2, r1, #2
 8009b3c:	4251      	negs	r1, r2
 8009b3e:	4151      	adcs	r1, r2
 8009b40:	0349      	lsls	r1, r1, #13
 8009b42:	4620      	mov	r0, r4
 8009b44:	f7ff fc6e 	bl	8009424 <usart_stop_bit_set>
 8009b48:	2e01      	cmp	r6, #1
 8009b4a:	d041      	beq.n	8009bd0 <gd32_uart_begin+0x188>
 8009b4c:	2e02      	cmp	r6, #2
 8009b4e:	d142      	bne.n	8009bd6 <gd32_uart_begin+0x18e>
 8009b50:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8009b54:	4620      	mov	r0, r4
 8009b56:	f7ff fc55 	bl	8009404 <usart_parity_config>
 8009b5a:	2100      	movs	r1, #0
 8009b5c:	4620      	mov	r0, r4
 8009b5e:	f7ff fc75 	bl	800944c <usart_hardware_flow_rts_config>
 8009b62:	2100      	movs	r1, #0
 8009b64:	4620      	mov	r0, r4
 8009b66:	f7ff fc77 	bl	8009458 <usart_hardware_flow_cts_config>
 8009b6a:	2104      	movs	r1, #4
 8009b6c:	4620      	mov	r0, r4
 8009b6e:	f7ff fc67 	bl	8009440 <usart_receive_config>
 8009b72:	2108      	movs	r1, #8
 8009b74:	4620      	mov	r0, r4
 8009b76:	f7ff fc5d 	bl	8009434 <usart_transmit_config>
 8009b7a:	68e3      	ldr	r3, [r4, #12]
 8009b7c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8009b80:	60e3      	str	r3, [r4, #12]
 8009b82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009b84:	481a      	ldr	r0, [pc, #104]	; (8009bf0 <gd32_uart_begin+0x1a8>)
 8009b86:	2304      	movs	r3, #4
 8009b88:	2203      	movs	r2, #3
 8009b8a:	2118      	movs	r1, #24
 8009b8c:	f7ff f8d2 	bl	8008d34 <gpio_init>
 8009b90:	4817      	ldr	r0, [pc, #92]	; (8009bf0 <gd32_uart_begin+0x1a8>)
 8009b92:	2308      	movs	r3, #8
 8009b94:	2203      	movs	r2, #3
 8009b96:	2104      	movs	r1, #4
 8009b98:	f7ff f8cc 	bl	8008d34 <gpio_init>
 8009b9c:	e7b9      	b.n	8009b12 <gd32_uart_begin+0xca>
 8009b9e:	4811      	ldr	r0, [pc, #68]	; (8009be4 <gd32_uart_begin+0x19c>)
 8009ba0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009ba4:	2203      	movs	r2, #3
 8009ba6:	2118      	movs	r1, #24
 8009ba8:	f7ff f8c4 	bl	8008d34 <gpio_init>
 8009bac:	480d      	ldr	r0, [pc, #52]	; (8009be4 <gd32_uart_begin+0x19c>)
 8009bae:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009bb2:	2203      	movs	r2, #3
 8009bb4:	2104      	movs	r1, #4
 8009bb6:	e7ef      	b.n	8009b98 <gd32_uart_begin+0x150>
 8009bb8:	480a      	ldr	r0, [pc, #40]	; (8009be4 <gd32_uart_begin+0x19c>)
 8009bba:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009bbe:	2203      	movs	r2, #3
 8009bc0:	2118      	movs	r1, #24
 8009bc2:	f7ff f8b7 	bl	8008d34 <gpio_init>
 8009bc6:	2304      	movs	r3, #4
 8009bc8:	480a      	ldr	r0, [pc, #40]	; (8009bf4 <gd32_uart_begin+0x1ac>)
 8009bca:	2203      	movs	r2, #3
 8009bcc:	4619      	mov	r1, r3
 8009bce:	e7e3      	b.n	8009b98 <gd32_uart_begin+0x150>
 8009bd0:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8009bd4:	e7be      	b.n	8009b54 <gd32_uart_begin+0x10c>
 8009bd6:	2100      	movs	r1, #0
 8009bd8:	e7bc      	b.n	8009b54 <gd32_uart_begin+0x10c>
 8009bda:	bf00      	nop
 8009bdc:	40004c00 	andmi	r4, r0, r0, lsl #24
 8009be0:	40005000 	andmi	r5, r0, r0
 8009be4:	40011000 	andmi	r1, r1, r0
 8009be8:	00140010 	andseq	r0, r4, r0, lsl r0
 8009bec:	40010c00 	andmi	r0, r1, r0, lsl #24
 8009bf0:	40010800 	andmi	r0, r1, r0, lsl #16
 8009bf4:	40011400 	andmi	r1, r1, r0, lsl #8

08009bf8 <mac_address_get(unsigned char*)>:
 8009bf8:	4a07      	ldr	r2, [pc, #28]	; (8009c18 <mac_address_get(unsigned char*)+0x20>)
 8009bfa:	f8d2 37e8 	ldr.w	r3, [r2, #2024]	; 0x7e8
 8009bfe:	f8d2 27ec 	ldr.w	r2, [r2, #2028]	; 0x7ec
 8009c02:	7042      	strb	r2, [r0, #1]
 8009c04:	0e1a      	lsrs	r2, r3, #24
 8009c06:	7082      	strb	r2, [r0, #2]
 8009c08:	0c1a      	lsrs	r2, r3, #16
 8009c0a:	2102      	movs	r1, #2
 8009c0c:	70c2      	strb	r2, [r0, #3]
 8009c0e:	0a1a      	lsrs	r2, r3, #8
 8009c10:	7001      	strb	r1, [r0, #0]
 8009c12:	7102      	strb	r2, [r0, #4]
 8009c14:	7143      	strb	r3, [r0, #5]
 8009c16:	4770      	bx	lr
 8009c18:	1ffff000 	svcne	0x00fff000

08009c1c <udelay_init()>:
 8009c1c:	4a07      	ldr	r2, [pc, #28]	; (8009c3c <udelay_init()+0x20>)
 8009c1e:	f8d2 30fc 	ldr.w	r3, [r2, #252]	; 0xfc
 8009c22:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8009c26:	f8c2 30fc 	str.w	r3, [r2, #252]	; 0xfc
 8009c2a:	4b05      	ldr	r3, [pc, #20]	; (8009c40 <udelay_init()+0x24>)
 8009c2c:	2200      	movs	r2, #0
 8009c2e:	605a      	str	r2, [r3, #4]
 8009c30:	681a      	ldr	r2, [r3, #0]
 8009c32:	f042 0201 	orr.w	r2, r2, #1
 8009c36:	601a      	str	r2, [r3, #0]
 8009c38:	4770      	bx	lr
 8009c3a:	bf00      	nop
 8009c3c:	e000ed00 	and	lr, r0, r0, lsl #26
 8009c40:	e0001000 	and	r1, r0, r0

08009c44 <udelay(unsigned long, unsigned long)>:
 8009c44:	2378      	movs	r3, #120	; 0x78
 8009c46:	b530      	push	{r4, r5, lr}
 8009c48:	4358      	muls	r0, r3
 8009c4a:	b909      	cbnz	r1, 8009c50 <udelay(unsigned long, unsigned long)+0xc>
 8009c4c:	4b08      	ldr	r3, [pc, #32]	; (8009c70 <udelay(unsigned long, unsigned long)+0x2c>)
 8009c4e:	6859      	ldr	r1, [r3, #4]
 8009c50:	4c07      	ldr	r4, [pc, #28]	; (8009c70 <udelay(unsigned long, unsigned long)+0x2c>)
 8009c52:	2300      	movs	r3, #0
 8009c54:	6862      	ldr	r2, [r4, #4]
 8009c56:	4291      	cmp	r1, r2
 8009c58:	d0fc      	beq.n	8009c54 <udelay(unsigned long, unsigned long)+0x10>
 8009c5a:	bf2a      	itet	cs
 8009c5c:	f102 35ff 	addcs.w	r5, r2, #4294967295	; 0xffffffff
 8009c60:	189b      	addcc	r3, r3, r2
 8009c62:	195b      	addcs	r3, r3, r5
 8009c64:	1a5b      	subs	r3, r3, r1
 8009c66:	4283      	cmp	r3, r0
 8009c68:	d300      	bcc.n	8009c6c <udelay(unsigned long, unsigned long)+0x28>
 8009c6a:	bd30      	pop	{r4, r5, pc}
 8009c6c:	4611      	mov	r1, r2
 8009c6e:	e7f1      	b.n	8009c54 <udelay(unsigned long, unsigned long)+0x10>
 8009c70:	e0001000 	and	r1, r0, r0

08009c74 <adc_enable>:
 8009c74:	6883      	ldr	r3, [r0, #8]
 8009c76:	07db      	lsls	r3, r3, #31
 8009c78:	bf5e      	ittt	pl
 8009c7a:	6883      	ldrpl	r3, [r0, #8]
 8009c7c:	f043 0301 	orrpl.w	r3, r3, #1
 8009c80:	6083      	strpl	r3, [r0, #8]
 8009c82:	4770      	bx	lr

08009c84 <adc_calibration_enable>:
 8009c84:	6883      	ldr	r3, [r0, #8]
 8009c86:	f043 0308 	orr.w	r3, r3, #8
 8009c8a:	f100 0208 	add.w	r2, r0, #8
 8009c8e:	6083      	str	r3, [r0, #8]
 8009c90:	6813      	ldr	r3, [r2, #0]
 8009c92:	0719      	lsls	r1, r3, #28
 8009c94:	d4fc      	bmi.n	8009c90 <adc_calibration_enable+0xc>
 8009c96:	6883      	ldr	r3, [r0, #8]
 8009c98:	f043 0304 	orr.w	r3, r3, #4
 8009c9c:	6083      	str	r3, [r0, #8]
 8009c9e:	6813      	ldr	r3, [r2, #0]
 8009ca0:	075b      	lsls	r3, r3, #29
 8009ca2:	d4fc      	bmi.n	8009c9e <adc_calibration_enable+0x1a>
 8009ca4:	4770      	bx	lr
	...

08009ca8 <adc_tempsensor_vrefint_enable>:
 8009ca8:	4a03      	ldr	r2, [pc, #12]	; (8009cb8 <adc_tempsensor_vrefint_enable+0x10>)
 8009caa:	f8d2 3408 	ldr.w	r3, [r2, #1032]	; 0x408
 8009cae:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8009cb2:	f8c2 3408 	str.w	r3, [r2, #1032]	; 0x408
 8009cb6:	4770      	bx	lr
 8009cb8:	40012000 	andmi	r2, r1, r0

08009cbc <adc_mode_config>:
 8009cbc:	4b06      	ldr	r3, [pc, #24]	; (8009cd8 <adc_mode_config+0x1c>)
 8009cbe:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8009cc2:	f422 2270 	bic.w	r2, r2, #983040	; 0xf0000
 8009cc6:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
 8009cca:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8009cce:	4310      	orrs	r0, r2
 8009cd0:	f8c3 0404 	str.w	r0, [r3, #1028]	; 0x404
 8009cd4:	4770      	bx	lr
 8009cd6:	bf00      	nop
 8009cd8:	40012000 	andmi	r2, r1, r0

08009cdc <adc_special_function_config>:
 8009cdc:	b510      	push	{r4, lr}
 8009cde:	f401 7380 	and.w	r3, r1, #256	; 0x100
 8009ce2:	f401 6480 	and.w	r4, r1, #1024	; 0x400
 8009ce6:	f001 0102 	and.w	r1, r1, #2
 8009cea:	b17a      	cbz	r2, 8009d0c <adc_special_function_config+0x30>
 8009cec:	b11b      	cbz	r3, 8009cf6 <adc_special_function_config+0x1a>
 8009cee:	6843      	ldr	r3, [r0, #4]
 8009cf0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009cf4:	6043      	str	r3, [r0, #4]
 8009cf6:	b11c      	cbz	r4, 8009d00 <adc_special_function_config+0x24>
 8009cf8:	6843      	ldr	r3, [r0, #4]
 8009cfa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8009cfe:	6043      	str	r3, [r0, #4]
 8009d00:	b119      	cbz	r1, 8009d0a <adc_special_function_config+0x2e>
 8009d02:	6883      	ldr	r3, [r0, #8]
 8009d04:	f043 0302 	orr.w	r3, r3, #2
 8009d08:	6083      	str	r3, [r0, #8]
 8009d0a:	bd10      	pop	{r4, pc}
 8009d0c:	b11b      	cbz	r3, 8009d16 <adc_special_function_config+0x3a>
 8009d0e:	6843      	ldr	r3, [r0, #4]
 8009d10:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009d14:	6043      	str	r3, [r0, #4]
 8009d16:	b11c      	cbz	r4, 8009d20 <adc_special_function_config+0x44>
 8009d18:	6843      	ldr	r3, [r0, #4]
 8009d1a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009d1e:	6043      	str	r3, [r0, #4]
 8009d20:	2900      	cmp	r1, #0
 8009d22:	d0f2      	beq.n	8009d0a <adc_special_function_config+0x2e>
 8009d24:	6883      	ldr	r3, [r0, #8]
 8009d26:	f023 0302 	bic.w	r3, r3, #2
 8009d2a:	e7ed      	b.n	8009d08 <adc_special_function_config+0x2c>

08009d2c <adc_data_alignment_config>:
 8009d2c:	6883      	ldr	r3, [r0, #8]
 8009d2e:	b119      	cbz	r1, 8009d38 <adc_data_alignment_config+0xc>
 8009d30:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8009d34:	6083      	str	r3, [r0, #8]
 8009d36:	4770      	bx	lr
 8009d38:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009d3c:	e7fa      	b.n	8009d34 <adc_data_alignment_config+0x8>

08009d3e <adc_channel_length_config>:
 8009d3e:	2901      	cmp	r1, #1
 8009d40:	d002      	beq.n	8009d48 <adc_channel_length_config+0xa>
 8009d42:	2902      	cmp	r1, #2
 8009d44:	d00c      	beq.n	8009d60 <adc_channel_length_config+0x22>
 8009d46:	4770      	bx	lr
 8009d48:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8009d4a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8009d4e:	62c3      	str	r3, [r0, #44]	; 0x2c
 8009d50:	3a01      	subs	r2, #1
 8009d52:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8009d54:	0512      	lsls	r2, r2, #20
 8009d56:	f402 0270 	and.w	r2, r2, #15728640	; 0xf00000
 8009d5a:	431a      	orrs	r2, r3
 8009d5c:	62c2      	str	r2, [r0, #44]	; 0x2c
 8009d5e:	4770      	bx	lr
 8009d60:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8009d62:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8009d66:	6383      	str	r3, [r0, #56]	; 0x38
 8009d68:	3a01      	subs	r2, #1
 8009d6a:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8009d6c:	0512      	lsls	r2, r2, #20
 8009d6e:	f402 1240 	and.w	r2, r2, #3145728	; 0x300000
 8009d72:	431a      	orrs	r2, r3
 8009d74:	6382      	str	r2, [r0, #56]	; 0x38
 8009d76:	4770      	bx	lr

08009d78 <adc_inserted_channel_config>:
 8009d78:	b530      	push	{r4, r5, lr}
 8009d7a:	6b85      	ldr	r5, [r0, #56]	; 0x38
 8009d7c:	6b84      	ldr	r4, [r0, #56]	; 0x38
 8009d7e:	f3c5 5501 	ubfx	r5, r5, #20, #2
 8009d82:	3103      	adds	r1, #3
 8009d84:	1b49      	subs	r1, r1, r5
 8009d86:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8009d8a:	251f      	movs	r5, #31
 8009d8c:	408d      	lsls	r5, r1
 8009d8e:	ea24 0405 	bic.w	r4, r4, r5
 8009d92:	fa02 f101 	lsl.w	r1, r2, r1
 8009d96:	4321      	orrs	r1, r4
 8009d98:	2a09      	cmp	r2, #9
 8009d9a:	6381      	str	r1, [r0, #56]	; 0x38
 8009d9c:	d80a      	bhi.n	8009db4 <adc_inserted_channel_config+0x3c>
 8009d9e:	6901      	ldr	r1, [r0, #16]
 8009da0:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8009da4:	2407      	movs	r4, #7
 8009da6:	4094      	lsls	r4, r2
 8009da8:	ea21 0104 	bic.w	r1, r1, r4
 8009dac:	4093      	lsls	r3, r2
 8009dae:	430b      	orrs	r3, r1
 8009db0:	6103      	str	r3, [r0, #16]
 8009db2:	bd30      	pop	{r4, r5, pc}
 8009db4:	2a11      	cmp	r2, #17
 8009db6:	d8fc      	bhi.n	8009db2 <adc_inserted_channel_config+0x3a>
 8009db8:	2103      	movs	r1, #3
 8009dba:	f06f 051d 	mvn.w	r5, #29
 8009dbe:	fb11 5202 	smlabb	r2, r1, r2, r5
 8009dc2:	68c4      	ldr	r4, [r0, #12]
 8009dc4:	2107      	movs	r1, #7
 8009dc6:	4091      	lsls	r1, r2
 8009dc8:	ea24 0101 	bic.w	r1, r4, r1
 8009dcc:	4093      	lsls	r3, r2
 8009dce:	430b      	orrs	r3, r1
 8009dd0:	60c3      	str	r3, [r0, #12]
 8009dd2:	e7ee      	b.n	8009db2 <adc_inserted_channel_config+0x3a>

08009dd4 <adc_external_trigger_config>:
 8009dd4:	f001 0301 	and.w	r3, r1, #1
 8009dd8:	f001 0102 	and.w	r1, r1, #2
 8009ddc:	b152      	cbz	r2, 8009df4 <adc_external_trigger_config+0x20>
 8009dde:	b11b      	cbz	r3, 8009de8 <adc_external_trigger_config+0x14>
 8009de0:	6883      	ldr	r3, [r0, #8]
 8009de2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009de6:	6083      	str	r3, [r0, #8]
 8009de8:	b119      	cbz	r1, 8009df2 <adc_external_trigger_config+0x1e>
 8009dea:	6883      	ldr	r3, [r0, #8]
 8009dec:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009df0:	6083      	str	r3, [r0, #8]
 8009df2:	4770      	bx	lr
 8009df4:	b11b      	cbz	r3, 8009dfe <adc_external_trigger_config+0x2a>
 8009df6:	6883      	ldr	r3, [r0, #8]
 8009df8:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8009dfc:	6083      	str	r3, [r0, #8]
 8009dfe:	2900      	cmp	r1, #0
 8009e00:	d0f7      	beq.n	8009df2 <adc_external_trigger_config+0x1e>
 8009e02:	6883      	ldr	r3, [r0, #8]
 8009e04:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8009e08:	e7f2      	b.n	8009df0 <adc_external_trigger_config+0x1c>

08009e0a <adc_external_trigger_source_config>:
 8009e0a:	2901      	cmp	r1, #1
 8009e0c:	d002      	beq.n	8009e14 <adc_external_trigger_source_config+0xa>
 8009e0e:	2902      	cmp	r1, #2
 8009e10:	d008      	beq.n	8009e24 <adc_external_trigger_source_config+0x1a>
 8009e12:	4770      	bx	lr
 8009e14:	6883      	ldr	r3, [r0, #8]
 8009e16:	f423 2360 	bic.w	r3, r3, #917504	; 0xe0000
 8009e1a:	6083      	str	r3, [r0, #8]
 8009e1c:	6883      	ldr	r3, [r0, #8]
 8009e1e:	4313      	orrs	r3, r2
 8009e20:	6083      	str	r3, [r0, #8]
 8009e22:	4770      	bx	lr
 8009e24:	6883      	ldr	r3, [r0, #8]
 8009e26:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009e2a:	e7f6      	b.n	8009e1a <adc_external_trigger_source_config+0x10>

08009e2c <adc_software_trigger_enable>:
 8009e2c:	07ca      	lsls	r2, r1, #31
 8009e2e:	bf42      	ittt	mi
 8009e30:	6883      	ldrmi	r3, [r0, #8]
 8009e32:	f443 0380 	orrmi.w	r3, r3, #4194304	; 0x400000
 8009e36:	6083      	strmi	r3, [r0, #8]
 8009e38:	078b      	lsls	r3, r1, #30
 8009e3a:	bf42      	ittt	mi
 8009e3c:	6883      	ldrmi	r3, [r0, #8]
 8009e3e:	f443 1300 	orrmi.w	r3, r3, #2097152	; 0x200000
 8009e42:	6083      	strmi	r3, [r0, #8]
 8009e44:	4770      	bx	lr
	...

08009e48 <i2c_clock_config>:
 8009e48:	b570      	push	{r4, r5, r6, lr}
 8009e4a:	4604      	mov	r4, r0
 8009e4c:	4616      	mov	r6, r2
 8009e4e:	460d      	mov	r5, r1
 8009e50:	b901      	cbnz	r1, 8009e54 <i2c_clock_config+0xc>
 8009e52:	e7fe      	b.n	8009e52 <i2c_clock_config+0xa>
 8009e54:	2002      	movs	r0, #2
 8009e56:	f7ff f8bd 	bl	8008fd4 <rcu_clock_freq_get>
 8009e5a:	4a39      	ldr	r2, [pc, #228]	; (8009f40 <i2c_clock_config+0xf8>)
 8009e5c:	4939      	ldr	r1, [pc, #228]	; (8009f44 <i2c_clock_config+0xfc>)
 8009e5e:	fbb0 f1f1 	udiv	r1, r0, r1
 8009e62:	4290      	cmp	r0, r2
 8009e64:	bf34      	ite	cc
 8009e66:	460b      	movcc	r3, r1
 8009e68:	233c      	movcs	r3, #60	; 0x3c
 8009e6a:	6862      	ldr	r2, [r4, #4]
 8009e6c:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
 8009e70:	431a      	orrs	r2, r3
 8009e72:	6062      	str	r2, [r4, #4]
 8009e74:	4a34      	ldr	r2, [pc, #208]	; (8009f48 <i2c_clock_config+0x100>)
 8009e76:	4295      	cmp	r5, r2
 8009e78:	d816      	bhi.n	8009ea8 <i2c_clock_config+0x60>
 8009e7a:	3101      	adds	r1, #1
 8009e7c:	293b      	cmp	r1, #59	; 0x3b
 8009e7e:	d90d      	bls.n	8009e9c <i2c_clock_config+0x54>
 8009e80:	233c      	movs	r3, #60	; 0x3c
 8009e82:	6223      	str	r3, [r4, #32]
 8009e84:	006d      	lsls	r5, r5, #1
 8009e86:	fbb0 f0f5 	udiv	r0, r0, r5
 8009e8a:	2804      	cmp	r0, #4
 8009e8c:	69e3      	ldr	r3, [r4, #28]
 8009e8e:	bf38      	it	cc
 8009e90:	2004      	movcc	r0, #4
 8009e92:	f3c0 000b 	ubfx	r0, r0, #0, #12
 8009e96:	4318      	orrs	r0, r3
 8009e98:	61e0      	str	r0, [r4, #28]
 8009e9a:	bd70      	pop	{r4, r5, r6, pc}
 8009e9c:	2902      	cmp	r1, #2
 8009e9e:	d801      	bhi.n	8009ea4 <i2c_clock_config+0x5c>
 8009ea0:	2302      	movs	r3, #2
 8009ea2:	e7ee      	b.n	8009e82 <i2c_clock_config+0x3a>
 8009ea4:	6221      	str	r1, [r4, #32]
 8009ea6:	e7ed      	b.n	8009e84 <i2c_clock_config+0x3c>
 8009ea8:	4a28      	ldr	r2, [pc, #160]	; (8009f4c <i2c_clock_config+0x104>)
 8009eaa:	4295      	cmp	r5, r2
 8009eac:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8009eb0:	d824      	bhi.n	8009efc <i2c_clock_config+0xb4>
 8009eb2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8009eb6:	4353      	muls	r3, r2
 8009eb8:	fbb3 f3f1 	udiv	r3, r3, r1
 8009ebc:	3301      	adds	r3, #1
 8009ebe:	6223      	str	r3, [r4, #32]
 8009ec0:	b9a6      	cbnz	r6, 8009eec <i2c_clock_config+0xa4>
 8009ec2:	eb05 0345 	add.w	r3, r5, r5, lsl #1
 8009ec6:	fbb0 f0f3 	udiv	r0, r0, r3
 8009eca:	69e3      	ldr	r3, [r4, #28]
 8009ecc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009ed0:	61e3      	str	r3, [r4, #28]
 8009ed2:	f3c0 030b 	ubfx	r3, r0, #0, #12
 8009ed6:	b90b      	cbnz	r3, 8009edc <i2c_clock_config+0x94>
 8009ed8:	f040 0001 	orr.w	r0, r0, #1
 8009edc:	69e3      	ldr	r3, [r4, #28]
 8009ede:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009ee2:	61e3      	str	r3, [r4, #28]
 8009ee4:	69e3      	ldr	r3, [r4, #28]
 8009ee6:	4303      	orrs	r3, r0
 8009ee8:	61e3      	str	r3, [r4, #28]
 8009eea:	e7d6      	b.n	8009e9a <i2c_clock_config+0x52>
 8009eec:	2319      	movs	r3, #25
 8009eee:	436b      	muls	r3, r5
 8009ef0:	fbb0 f0f3 	udiv	r0, r0, r3
 8009ef4:	69e3      	ldr	r3, [r4, #28]
 8009ef6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8009efa:	e7e9      	b.n	8009ed0 <i2c_clock_config+0x88>
 8009efc:	2278      	movs	r2, #120	; 0x78
 8009efe:	4353      	muls	r3, r2
 8009f00:	fbb3 f3f1 	udiv	r3, r3, r1
 8009f04:	3301      	adds	r3, #1
 8009f06:	6223      	str	r3, [r4, #32]
 8009f08:	b996      	cbnz	r6, 8009f30 <i2c_clock_config+0xe8>
 8009f0a:	69e3      	ldr	r3, [r4, #28]
 8009f0c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009f10:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009f14:	fbb0 f0f5 	udiv	r0, r0, r5
 8009f18:	61e3      	str	r3, [r4, #28]
 8009f1a:	69e3      	ldr	r3, [r4, #28]
 8009f1c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009f20:	61e3      	str	r3, [r4, #28]
 8009f22:	69e3      	ldr	r3, [r4, #28]
 8009f24:	4303      	orrs	r3, r0
 8009f26:	61e3      	str	r3, [r4, #28]
 8009f28:	2301      	movs	r3, #1
 8009f2a:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
 8009f2e:	e7b4      	b.n	8009e9a <i2c_clock_config+0x52>
 8009f30:	2319      	movs	r3, #25
 8009f32:	435d      	muls	r5, r3
 8009f34:	69e3      	ldr	r3, [r4, #28]
 8009f36:	fbb0 f0f5 	udiv	r0, r0, r5
 8009f3a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8009f3e:	e7eb      	b.n	8009f18 <i2c_clock_config+0xd0>
 8009f40:	03938700 	orrseq	r8, r3, #0, 14
 8009f44:	000f4240 	andeq	r4, pc, r0, asr #4
 8009f48:	000186a0 	andeq	r8, r1, r0, lsr #13
 8009f4c:	00061a80 	andeq	r1, r6, r0, lsl #21

08009f50 <i2c_ack_config>:
 8009f50:	6803      	ldr	r3, [r0, #0]
 8009f52:	2901      	cmp	r1, #1
 8009f54:	bf0c      	ite	eq
 8009f56:	f443 6380 	orreq.w	r3, r3, #1024	; 0x400
 8009f5a:	f423 6380 	bicne.w	r3, r3, #1024	; 0x400
 8009f5e:	6003      	str	r3, [r0, #0]
 8009f60:	4770      	bx	lr

08009f62 <i2c_ackpos_config>:
 8009f62:	6803      	ldr	r3, [r0, #0]
 8009f64:	b919      	cbnz	r1, 8009f6e <i2c_ackpos_config+0xc>
 8009f66:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8009f6a:	6003      	str	r3, [r0, #0]
 8009f6c:	4770      	bx	lr
 8009f6e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009f72:	e7fa      	b.n	8009f6a <i2c_ackpos_config+0x8>

08009f74 <i2c_master_addressing>:
 8009f74:	3202      	adds	r2, #2
 8009f76:	bf0c      	ite	eq
 8009f78:	f021 0101 	biceq.w	r1, r1, #1
 8009f7c:	f041 0101 	orrne.w	r1, r1, #1
 8009f80:	6101      	str	r1, [r0, #16]
 8009f82:	4770      	bx	lr

08009f84 <i2c_enable>:
 8009f84:	6803      	ldr	r3, [r0, #0]
 8009f86:	f043 0301 	orr.w	r3, r3, #1
 8009f8a:	6003      	str	r3, [r0, #0]
 8009f8c:	4770      	bx	lr

08009f8e <i2c_start_on_bus>:
 8009f8e:	6803      	ldr	r3, [r0, #0]
 8009f90:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009f94:	6003      	str	r3, [r0, #0]
 8009f96:	4770      	bx	lr

08009f98 <i2c_stop_on_bus>:
 8009f98:	6803      	ldr	r3, [r0, #0]
 8009f9a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8009f9e:	6003      	str	r3, [r0, #0]
 8009fa0:	4770      	bx	lr

08009fa2 <i2c_data_transmit>:
 8009fa2:	6101      	str	r1, [r0, #16]
 8009fa4:	4770      	bx	lr

08009fa6 <i2c_data_receive>:
 8009fa6:	6900      	ldr	r0, [r0, #16]
 8009fa8:	b2c0      	uxtb	r0, r0
 8009faa:	4770      	bx	lr

08009fac <i2c_flag_get>:
 8009fac:	098b      	lsrs	r3, r1, #6
 8009fae:	f001 011f 	and.w	r1, r1, #31
 8009fb2:	5818      	ldr	r0, [r3, r0]
 8009fb4:	40c8      	lsrs	r0, r1
 8009fb6:	f000 0001 	and.w	r0, r0, #1
 8009fba:	4770      	bx	lr

08009fbc <i2c_flag_clear>:
 8009fbc:	f240 5301 	movw	r3, #1281	; 0x501
 8009fc0:	4299      	cmp	r1, r3
 8009fc2:	b510      	push	{r4, lr}
 8009fc4:	d102      	bne.n	8009fcc <i2c_flag_clear+0x10>
 8009fc6:	6943      	ldr	r3, [r0, #20]
 8009fc8:	6983      	ldr	r3, [r0, #24]
 8009fca:	bd10      	pop	{r4, pc}
 8009fcc:	098c      	lsrs	r4, r1, #6
 8009fce:	2201      	movs	r2, #1
 8009fd0:	5823      	ldr	r3, [r4, r0]
 8009fd2:	f001 011f 	and.w	r1, r1, #31
 8009fd6:	408a      	lsls	r2, r1
 8009fd8:	ea23 0302 	bic.w	r3, r3, r2
 8009fdc:	5023      	str	r3, [r4, r0]
 8009fde:	e7f4      	b.n	8009fca <i2c_flag_clear+0xe>

08009fe0 <i2s_init>:
 8009fe0:	b510      	push	{r4, lr}
 8009fe2:	69c4      	ldr	r4, [r0, #28]
 8009fe4:	f424 647b 	bic.w	r4, r4, #4016	; 0xfb0
 8009fe8:	f024 0408 	bic.w	r4, r4, #8
 8009fec:	0424      	lsls	r4, r4, #16
 8009fee:	0c24      	lsrs	r4, r4, #16
 8009ff0:	4323      	orrs	r3, r4
 8009ff2:	431a      	orrs	r2, r3
 8009ff4:	4311      	orrs	r1, r2
 8009ff6:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
 8009ffa:	61c1      	str	r1, [r0, #28]
 8009ffc:	bd10      	pop	{r4, pc}

08009ffe <i2s_psc_config>:
 8009ffe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a000:	4605      	mov	r5, r0
 800a002:	4616      	mov	r6, r2
 800a004:	461f      	mov	r7, r3
 800a006:	460c      	mov	r4, r1
 800a008:	b901      	cbnz	r1, 800a00c <i2s_psc_config+0xe>
 800a00a:	e7fe      	b.n	800a00a <i2s_psc_config+0xc>
 800a00c:	2302      	movs	r3, #2
 800a00e:	6203      	str	r3, [r0, #32]
 800a010:	2000      	movs	r0, #0
 800a012:	f7fe ffdf 	bl	8008fd4 <rcu_clock_freq_get>
 800a016:	f5b7 7f00 	cmp.w	r7, #512	; 0x200
 800a01a:	f04f 030a 	mov.w	r3, #10
 800a01e:	d11b      	bne.n	800a058 <i2s_psc_config+0x5a>
 800a020:	0a00      	lsrs	r0, r0, #8
 800a022:	4358      	muls	r0, r3
 800a024:	230a      	movs	r3, #10
 800a026:	fbb0 f4f4 	udiv	r4, r0, r4
 800a02a:	3405      	adds	r4, #5
 800a02c:	fbb4 f4f3 	udiv	r4, r4, r3
 800a030:	f004 0301 	and.w	r3, r4, #1
 800a034:	0864      	lsrs	r4, r4, #1
 800a036:	1ea2      	subs	r2, r4, #2
 800a038:	2afd      	cmp	r2, #253	; 0xfd
 800a03a:	bf92      	itee	ls
 800a03c:	021b      	lslls	r3, r3, #8
 800a03e:	2300      	movhi	r3, #0
 800a040:	2402      	movhi	r4, #2
 800a042:	431c      	orrs	r4, r3
 800a044:	433c      	orrs	r4, r7
 800a046:	622c      	str	r4, [r5, #32]
 800a048:	69eb      	ldr	r3, [r5, #28]
 800a04a:	f023 0307 	bic.w	r3, r3, #7
 800a04e:	61eb      	str	r3, [r5, #28]
 800a050:	69eb      	ldr	r3, [r5, #28]
 800a052:	4333      	orrs	r3, r6
 800a054:	61eb      	str	r3, [r5, #28]
 800a056:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a058:	b90e      	cbnz	r6, 800a05e <i2s_psc_config+0x60>
 800a05a:	0940      	lsrs	r0, r0, #5
 800a05c:	e7e1      	b.n	800a022 <i2s_psc_config+0x24>
 800a05e:	0980      	lsrs	r0, r0, #6
 800a060:	e7df      	b.n	800a022 <i2s_psc_config+0x24>

0800a062 <i2s_enable>:
 800a062:	69c3      	ldr	r3, [r0, #28]
 800a064:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800a068:	61c3      	str	r3, [r0, #28]
 800a06a:	4770      	bx	lr

0800a06c <i2s_disable>:
 800a06c:	69c3      	ldr	r3, [r0, #28]
 800a06e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800a072:	61c3      	str	r3, [r0, #28]
 800a074:	4770      	bx	lr

0800a076 <spi_dma_enable>:
 800a076:	6843      	ldr	r3, [r0, #4]
 800a078:	b919      	cbnz	r1, 800a082 <spi_dma_enable+0xc>
 800a07a:	f043 0302 	orr.w	r3, r3, #2
 800a07e:	6043      	str	r3, [r0, #4]
 800a080:	4770      	bx	lr
 800a082:	f043 0301 	orr.w	r3, r3, #1
 800a086:	e7fa      	b.n	800a07e <spi_dma_enable+0x8>

Disassembly of section .rodata:

0800a088 <vtable for RDMResponder-0xe0>:
 800a088:	00000000 	andeq	r0, r0, r0
 800a08c:	18002000 	stmdane	r0, {sp}
 800a090:	00180400 	andseq	r0, r8, r0, lsl #8
 800a094:	00000007 	andeq	r0, r0, r7
	...
 800a0a0:	03020100 	movweq	r0, #8448	; 0x2100
 800a0a4:	08070604 	stmdaeq	r7, {r2, r9, sl}
 800a0a8:	00000009 	andeq	r0, r0, r9
 800a0ac:	03020100 	movweq	r0, #8448	; 0x2100
 800a0b0:	73696404 	cmnvc	r9, #4, 8	; 0x4000000
 800a0b4:	656c6261 	strbvs	r6, [ip, #-609]!	; 0xfffffd9f
 800a0b8:	6e650064 	cdpvs	0, 6, cr0, cr5, cr4, {3}
 800a0bc:	656c6261 	strbvs	r6, [ip, #-609]!	; 0xfffffd9f
 800a0c0:	6f430064 	svcvs	0x00430064
 800a0c4:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
 800a0c8:	646f4d20 	strbtvs	r4, [pc], #-3360	; 800a0d0 <_etext+0x48>
 800a0cc:	31310065 	teqcc	r1, r5, rrx
 800a0d0:	3a35323a 	bcc	8d569c0 <_sidata+0xd4a850>
 800a0d4:	4f003934 	svcmi	0x00003934
 800a0d8:	20207463 	eorcs	r7, r0, r3, ror #8
 800a0dc:	30322038 	eorscc	r2, r2, r8, lsr r0
 800a0e0:	52003332 	andpl	r3, r0, #-939524096	; 0xc8000000
 800a0e4:	52204d44 	eorpl	r4, r0, #68, 26	; 0x1100
 800a0e8:	6f707365 	svcvs	0x00707365
 800a0ec:	7265646e 	rsbvc	r6, r5, #1845493760	; 0x6e000000
 800a0f0:	335b1b00 	cmpcc	fp, #0, 22
 800a0f4:	73256d32 			; <UNDEFINED> instruction: 0x73256d32
 800a0f8:	6d305b1b 	fldmdbxvs	r0!, {d5-d17}	;@ Deprecated
 800a0fc:	7325000a 			; <UNDEFINED> instruction: 0x7325000a
 800a100:	2075253a 	rsbscs	r2, r5, sl, lsr r5
 800a104:	20752547 	rsbscs	r2, r5, r7, asr #10
 800a108:	5d73255b 	cfldr64pl	mvdx2, [r3, #-364]!	; 0xfffffe94
 800a10c:	6e6f4300 	cdpvs	3, 6, cr4, cr15, cr0, {0}
 800a110:	20676966 	rsbcs	r6, r7, r6, ror #18
 800a114:	65646f6d 	strbvs	r6, [r4, #-3949]!	; 0xfffff093
 800a118:	754f2000 	strbvc	r2, [pc, #-0]	; 800a120 <_etext+0x98>
 800a11c:	74757074 	ldrbtvc	r7, [r5], #-116	; 0xffffff8c
 800a120:	0a732520 	beq	9cd35a8 <_sidata+0x1cc7438>
 800a124:	73655400 	cmnvc	r5, #0, 8
 800a128:	61702074 	cmnvs	r0, r4, ror r0
 800a12c:	72657474 	rsbvc	r7, r5, #116, 8	; 0x74000000
 800a130:	203a206e 	eorscs	r2, sl, lr, rrx
 800a134:	5b207325 	blpl	8826dd0 <_sidata+0x81ac60>
 800a138:	0a5d7525 	beq	97675d4 <_sidata+0x175b464>
 800a13c:	4d445200 	sfmmi	f5, 2, [r4, #-0]
 800a140:	73655220 	cmnvc	r5, #32, 4
 800a144:	646e6f70 	strbtvs	r6, [lr], #-3952	; 0xfffff090
 800a148:	50207265 	eorpl	r7, r0, r5, ror #4
 800a14c:	6c657869 	stclvs	8, cr7, [r5], #-420	; 0xfffffe5c
 800a150:	25003120 	strcs	r3, [r0, #-288]	; 0xfffffee0
 800a154:	64253a73 	strtvs	r3, [r5], #-2675	; 0xfffff58d
 800a158:	64254720 	strtvs	r4, [r5], #-1824	; 0xfffff8e0
 800a15c:	00732520 	rsbseq	r2, r3, r0, lsr #10
 800a160:	253a7325 	ldrcs	r7, [sl, #-805]!	; 0xfffffcdb
 800a164:	00000075 	andeq	r0, r0, r5, ror r0

0800a168 <vtable for RDMResponder>:
	...
 800a170:	08000ad1 	stmdaeq	r0, {r0, r4, r6, r7, r9, fp}
 800a174:	08000b19 	stmdaeq	r0, {r0, r3, r4, r8, r9, fp}
 800a178:	08000a7d 	stmdaeq	r0, {r0, r2, r3, r4, r5, r6, r9, fp}
 800a17c:	08000ab1 	stmdaeq	r0, {r0, r4, r5, r7, r9, fp}

0800a180 <vtable for PixelDmxStartStop>:
	...
 800a188:	08000a57 	stmdaeq	r0, {r0, r1, r2, r4, r6, r9, fp}
 800a18c:	08000a71 	stmdaeq	r0, {r0, r4, r5, r6, r9, fp}
 800a190:	08000a59 	stmdaeq	r0, {r0, r3, r4, r6, r9, fp}
 800a194:	08000a65 	stmdaeq	r0, {r0, r2, r5, r6, r9, fp}

0800a198 <SOFTWARE_VERSION>:
 800a198:	00302e32 	eorseq	r2, r0, r2, lsr lr

0800a19c <gamma10_0>:
 800a19c:	03020100 	movweq	r0, #8448	; 0x2100
 800a1a0:	07060504 	streq	r0, [r6, -r4, lsl #10]
 800a1a4:	0b0a0908 	bleq	828c5cc <_sidata+0x28045c>
 800a1a8:	0f0e0d0c 	svceq	0x000e0d0c
 800a1ac:	13121110 	tstne	r2, #16, 2
 800a1b0:	17161514 			; <UNDEFINED> instruction: 0x17161514
 800a1b4:	1b1a1918 	blne	869061c <_sidata+0x6844ac>
 800a1b8:	1f1e1d1c 	svcne	0x001e1d1c
 800a1bc:	23222120 			; <UNDEFINED> instruction: 0x23222120
 800a1c0:	27262524 	strcs	r2, [r6, -r4, lsr #10]!
 800a1c4:	2b2a2928 	blcs	8a9466c <_sidata+0xa884fc>
 800a1c8:	2f2e2d2c 	svccs	0x002e2d2c
 800a1cc:	33323130 	teqcc	r2, #48, 2
 800a1d0:	37363534 			; <UNDEFINED> instruction: 0x37363534
 800a1d4:	3b3a3938 	blcc	8e986bc <_sidata+0xe8c54c>
 800a1d8:	3f3e3d3c 	svccc	0x003e3d3c
 800a1dc:	43424140 	movtmi	r4, #8512	; 0x2140
 800a1e0:	47464544 	strbmi	r4, [r6, -r4, asr #10]
 800a1e4:	4b4a4948 	blmi	929c70c <_sidata+0x129059c>
 800a1e8:	4f4e4d4c 	svcmi	0x004e4d4c
 800a1ec:	53525150 	cmppl	r2, #80, 2
 800a1f0:	57565554 			; <UNDEFINED> instruction: 0x57565554
 800a1f4:	5b5a5958 	blpl	96a075c <_sidata+0x16945ec>
 800a1f8:	5f5e5d5c 	svcpl	0x005e5d5c
 800a1fc:	63626160 	cmnvs	r2, #96, 2
 800a200:	67666564 	strbvs	r6, [r6, -r4, ror #10]!
 800a204:	6b6a6968 	blvs	9aa47ac <_sidata+0x1a9863c>
 800a208:	6f6e6d6c 	svcvs	0x006e6d6c
 800a20c:	73727170 	cmnvc	r2, #112, 2
 800a210:	77767574 			; <UNDEFINED> instruction: 0x77767574
 800a214:	7b7a7978 	blvc	9ea87fc <_sidata+0x1e9c68c>
 800a218:	7f7e7d7c 	svcvc	0x007e7d7c
 800a21c:	83828180 	orrhi	r8, r2, #128, 2
 800a220:	87868584 	strhi	r8, [r6, r4, lsl #11]
 800a224:	8b8a8988 	blhi	62ac84c <__heap_size+0x62ab84c>
 800a228:	8f8e8d8c 	svchi	0x008e8d8c
 800a22c:	93929190 	orrsls	r9, r2, #144, 2	; 0x24
 800a230:	97969594 			; <UNDEFINED> instruction: 0x97969594
 800a234:	9b9a9998 	blls	66b089c <__heap_size+0x66af89c>
 800a238:	9f9e9d9c 	svcls	0x009e9d9c
 800a23c:	a3a2a1a0 			; <UNDEFINED> instruction: 0xa3a2a1a0
 800a240:	a7a6a5a4 	strge	sl, [r6, r4, lsr #11]!
 800a244:	abaaa9a8 	blge	6ab48ec <__heap_size+0x6ab38ec>
 800a248:	afaeadac 	svcge	0x00aeadac
 800a24c:	b3b2b1b0 			; <UNDEFINED> instruction: 0xb3b2b1b0
 800a250:	b7b6b5b4 			; <UNDEFINED> instruction: 0xb7b6b5b4
 800a254:	bbbab9b8 	bllt	6eb893c <__heap_size+0x6eb793c>
 800a258:	bfbebdbc 	svclt	0x00bebdbc
 800a25c:	c3c2c1c0 	bicgt	ip, r2, #192, 2	; 0x30
 800a260:	c7c6c5c4 	strbgt	ip, [r6, r4, asr #11]
 800a264:	cbcac9c8 	blgt	72bc98c <__heap_size+0x72bb98c>
 800a268:	cfcecdcc 	svcgt	0x00cecdcc
 800a26c:	d3d2d1d0 	bicsle	sp, r2, #208, 2	; 0x34
 800a270:	d7d6d5d4 			; <UNDEFINED> instruction: 0xd7d6d5d4
 800a274:	dbdad9d8 	blle	76c09dc <__heap_size+0x76bf9dc>
 800a278:	dfdedddc 	svcle	0x00dedddc
 800a27c:	e3e2e1e0 	mvn	lr, #224, 2	; 0x38
 800a280:	e7e6e5e4 	strb	lr, [r6, r4, ror #11]!
 800a284:	ebeae9e8 	bl	7ac4a2c <__heap_size+0x7ac3a2c>
 800a288:	efeeedec 	svc	0x00eeedec
 800a28c:	f3f2f1f0 	vsra.u64	<illegal reg q15.5>, q8, #14
 800a290:	f7f6f5f4 			; <UNDEFINED> instruction: 0xf7f6f5f4
 800a294:	fbfaf9f8 	blx	7ec8a7e <__heap_size+0x7ec7a7e>
 800a298:	fffefdfc 			; <UNDEFINED> instruction: 0xfffefdfc
 800a29c:	30322d25 	eorscc	r2, r2, r5, lsr #26
 800a2a0:	2d250073 	stccs	0, cr0, [r5, #-460]!	; 0xfffffe34
 800a2a4:	25207338 	strcs	r7, [r0, #-824]!	; 0xfffffcc8
 800a2a8:	2064322d 	rsbcs	r3, r4, sp, lsr #4
 800a2ac:	322d2547 	eorcc	r2, sp, #297795584	; 0x11c00000
 800a2b0:	2d252064 	stccs	0, cr2, [r5, #-400]!	; 0xfffffe70
 800a2b4:	50007335 	andpl	r7, r0, r5, lsr r3
 800a2b8:	72676f72 	rsbvc	r6, r7, #456	; 0x1c8
 800a2bc:	656d6d61 	strbvs	r6, [sp, #-3425]!	; 0xfffff29f
 800a2c0:	79540064 	ldmdbvc	r4, {r2, r5, r6}^
 800a2c4:	47006570 	smlsdxmi	r0, r0, r5, r6
 800a2c8:	70756f72 	rsbsvc	r6, r5, r2, ror pc
 800a2cc:	20676e69 	rsbcs	r6, r7, r9, ror #28
 800a2d0:	6e756f43 	cdpvs	15, 7, cr6, cr5, cr3, {2}
 800a2d4:	614d0074 	hvcvs	53252	; 0xd004
 800a2d8:	65540070 	ldrbvs	r0, [r4, #-112]	; 0xffffff90
 800a2dc:	50207473 	eorpl	r7, r0, r3, ror r4
 800a2e0:	65747461 	ldrbvs	r7, [r4, #-1121]!	; 0xfffffb9f
 800a2e4:	50006e72 	andpl	r6, r0, r2, ror lr
 800a2e8:	72676f72 	rsbvc	r6, r7, #456	; 0x1c8
 800a2ec:	55006d61 	strpl	r6, [r0, #-3425]	; 0xfffff29f
 800a2f0:	6665646e 	strbtvs	r6, [r5], -lr, ror #8
 800a2f4:	64656e69 	strbtvs	r6, [r5], #-3689	; 0xfffff197
	...

0800a2f9 <SOFTWARE_VERSION>:
 800a2f9:	00302e32 	eorseq	r2, r0, r2, lsr lr
 800a2fd:	00555043 	subseq	r5, r5, r3, asr #32
 800a301:	 	andeq	r0, r0, r0

0800a304 <vtable for CpuTemperature>:
	...
 800a30c:	08002129 	stmdaeq	r0, {r0, r3, r5, r8, sp}
 800a310:	0800213d 	stmdaeq	r0, {r0, r2, r3, r4, r5, r8, sp}
 800a314:	08002125 	stmdaeq	r0, {r0, r2, r5, r8, sp}
 800a318:	0800212b 	stmdaeq	r0, {r0, r1, r3, r5, r8, sp}

0800a31c <vtable for RDMSensorBH170>:
	...
 800a324:	08002499 	stmdaeq	r0, {r0, r3, r4, r7, sl, sp}
 800a328:	0800249b 	stmdaeq	r0, {r0, r1, r3, r4, r7, sl, sp}
 800a32c:	08002261 	stmdaeq	r0, {r0, r5, r6, r9, sp}
 800a330:	0800240d 	stmdaeq	r0, {r0, r2, r3, sl, sp}

0800a334 <vtable for RDMSensorMCP9808>:
	...
 800a33c:	0800248b 	stmdaeq	r0, {r0, r1, r3, r7, sl, sp}
 800a340:	0800248d 	stmdaeq	r0, {r0, r2, r3, r7, sl, sp}
 800a344:	08002267 	stmdaeq	r0, {r0, r1, r2, r5, r6, r9, sp}
 800a348:	080023f9 	stmdaeq	r0, {r0, r3, r4, r5, r6, r7, r8, r9, sp}

0800a34c <vtable for RDMSensorHTU21DHumidity>:
	...
 800a354:	0800247d 	stmdaeq	r0, {r0, r2, r3, r4, r5, r6, sl, sp}
 800a358:	0800247f 	stmdaeq	r0, {r0, r1, r2, r3, r4, r5, r6, sl, sp}
 800a35c:	0800226d 	stmdaeq	r0, {r0, r2, r3, r5, r6, r9, sp}
 800a360:	080023e5 	stmdaeq	r0, {r0, r2, r5, r6, r7, r8, r9, sp}

0800a364 <vtable for RDMSensorHTU21DTemperature>:
	...
 800a36c:	0800246f 	stmdaeq	r0, {r0, r1, r2, r3, r5, r6, sl, sp}
 800a370:	08002471 	stmdaeq	r0, {r0, r4, r5, r6, sl, sp}
 800a374:	08002273 	stmdaeq	r0, {r0, r1, r4, r5, r6, r9, sp}
 800a378:	080023d1 	stmdaeq	r0, {r0, r4, r6, r7, r8, r9, sp}

0800a37c <vtable for RDMSensorINA219Current>:
	...
 800a384:	08002461 	stmdaeq	r0, {r0, r5, r6, sl, sp}
 800a388:	08002463 	stmdaeq	r0, {r0, r1, r5, r6, sl, sp}
 800a38c:	08002279 	stmdaeq	r0, {r0, r3, r4, r5, r6, r9, sp}
 800a390:	080023b1 	stmdaeq	r0, {r0, r4, r5, r7, r8, r9, sp}

0800a394 <vtable for RDMSensorINA219Power>:
	...
 800a39c:	08002453 	stmdaeq	r0, {r0, r1, r4, r6, sl, sp}
 800a3a0:	08002455 	stmdaeq	r0, {r0, r2, r4, r6, sl, sp}
 800a3a4:	0800227f 	stmdaeq	r0, {r0, r1, r2, r3, r4, r5, r6, r9, sp}
 800a3a8:	0800239d 	stmdaeq	r0, {r0, r2, r3, r4, r7, r8, r9, sp}

0800a3ac <vtable for RDMSensorINA219Voltage>:
	...
 800a3b4:	08002445 	stmdaeq	r0, {r0, r2, r6, sl, sp}
 800a3b8:	08002447 	stmdaeq	r0, {r0, r1, r2, r6, sl, sp}
 800a3bc:	08002285 	stmdaeq	r0, {r0, r2, r7, r9, sp}
 800a3c0:	0800237d 	stmdaeq	r0, {r0, r2, r3, r4, r5, r6, r8, r9, sp}

0800a3c4 <vtable for RDMSensorSI7021Humidity>:
	...
 800a3cc:	08002437 	stmdaeq	r0, {r0, r1, r2, r4, r5, sl, sp}
 800a3d0:	08002439 	stmdaeq	r0, {r0, r3, r4, r5, sl, sp}
 800a3d4:	0800228b 	stmdaeq	r0, {r0, r1, r3, r7, r9, sp}
 800a3d8:	08002369 	stmdaeq	r0, {r0, r3, r5, r6, r8, r9, sp}

0800a3dc <vtable for RDMSensorSI7021Temperature>:
	...
 800a3e4:	08002429 	stmdaeq	r0, {r0, r3, r5, sl, sp}
 800a3e8:	0800242b 	stmdaeq	r0, {r0, r1, r3, r5, sl, sp}
 800a3ec:	08002291 	stmdaeq	r0, {r0, r4, r7, r9, sp}
 800a3f0:	08002355 	stmdaeq	r0, {r0, r2, r4, r6, r8, r9, sp}

0800a3f4 <vtable for RDMSensorThermistor>:
	...
 800a3fc:	0800241b 	stmdaeq	r0, {r0, r1, r3, r4, sl, sp}
 800a400:	0800241d 	stmdaeq	r0, {r0, r2, r3, r4, sl, sp}
 800a404:	08002297 	stmdaeq	r0, {r0, r1, r2, r4, r7, r9, sp}
 800a408:	080022a1 	stmdaeq	r0, {r0, r5, r7, r9, sp}

0800a40c <sensor::thermistor::DESCRIPTION>:
 800a40c:	69626d41 	stmdbvs	r2!, {r0, r6, r8, sl, fp, sp, lr}^
 800a410:	20746e65 	rsbscs	r6, r4, r5, ror #28
 800a414:	706d6554 	rsbvc	r6, sp, r4, asr r5
 800a418:	74617265 	strbtvc	r7, [r1], #-613	; 0xfffffd9b
 800a41c:	00657275 	rsbeq	r7, r5, r5, ror r2

0800a420 <sensor::bh1750::DESCRIPTION>:
 800a420:	69626d41 	stmdbvs	r2!, {r0, r6, r8, sl, fp, sp, lr}^
 800a424:	20746e65 	rsbscs	r6, r4, r5, ror #28
 800a428:	6867694c 	stmdavs	r7!, {r2, r3, r6, r8, fp, sp, lr}^
 800a42c:	 	stclvs	0, cr0, [r1, #-464]	; 0xfffffe30

0800a42e <sensor::htu21d::temperature::DESCRIPTION>:
 800a42e:	69626d41 	stmdbvs	r2!, {r0, r6, r8, sl, fp, sp, lr}^
 800a432:	20746e65 	rsbscs	r6, r4, r5, ror #28
 800a436:	706d6554 	rsbvc	r6, sp, r4, asr r5
 800a43a:	74617265 	strbtvc	r7, [r1], #-613	; 0xfffffd9b
 800a43e:	00657275 	rsbeq	r7, r5, r5, ror r2

0800a442 <sensor::htu21d::humidity::DESCRIPTION>:
 800a442:	616c6552 	cmnvs	ip, r2, asr r5
 800a446:	65766974 	ldrbvs	r6, [r6, #-2420]!	; 0xfffff68c
 800a44a:	6d754820 	ldclvs	8, cr4, [r5, #-128]!	; 0xffffff80
 800a44e:	74696469 	strbtvc	r6, [r9], #-1129	; 0xfffffb97
 800a452:	 	svcvs	0x00500079

0800a454 <sensor::ina219::power::DESCRIPTION>:
 800a454:	65776f50 	ldrbvs	r6, [r7, #-3920]!	; 0xfffff0b0
 800a458:	 	strbvc	r0, [r3, #-114]	; 0xffffff8e

0800a45a <sensor::ina219::current::DESCRIPTION>:
 800a45a:	72727543 	rsbsvc	r7, r2, #281018368	; 0x10c00000
 800a45e:	00746e65 	rsbseq	r6, r4, r5, ror #28

0800a462 <sensor::ina219::voltage::DESCRIPTION>:
 800a462:	746c6f56 	strbtvc	r6, [ip], #-3926	; 0xfffff0aa
 800a466:	00656761 	rsbeq	r6, r5, r1, ror #14

0800a46a <sensor::si7021::temperature::DESCRIPTION>:
 800a46a:	69626d41 	stmdbvs	r2!, {r0, r6, r8, sl, fp, sp, lr}^
 800a46e:	20746e65 	rsbscs	r6, r4, r5, ror #28
 800a472:	706d6554 	rsbvc	r6, sp, r4, asr r5
 800a476:	74617265 	strbtvc	r7, [r1], #-613	; 0xfffffd9b
 800a47a:	00657275 	rsbeq	r7, r5, r5, ror r2

0800a47e <sensor::si7021::humidity::DESCRIPTION>:
 800a47e:	616c6552 	cmnvs	ip, r2, asr r5
 800a482:	65766974 	ldrbvs	r6, [r6, #-2420]!	; 0xfffff68c
 800a486:	6d754820 	ldclvs	8, cr4, [r5, #-128]!	; 0xffffff80
 800a48a:	74696469 	strbtvc	r6, [r9], #-1129	; 0xfffffb97
 800a48e:	 	stclvs	0, cr0, [r1, #-484]	; 0xfffffe1c

0800a490 <sensor::mcp9808::DESCRIPTION>:
 800a490:	69626d41 	stmdbvs	r2!, {r0, r6, r8, sl, fp, sp, lr}^
 800a494:	20746e65 	rsbscs	r6, r4, r5, ror #28
 800a498:	706d6554 	rsbvc	r6, sp, r4, asr r5
 800a49c:	74617265 	strbtvc	r7, [r1], #-613	; 0xfffffd9b
 800a4a0:	00657275 	rsbeq	r7, r5, r5, ror r2

0800a4a4 <vtable for RDMSensor>:
	...
 800a4bc:	44584d44 	ldrbmi	r4, [r8], #-3396	; 0xfffff2bc
 800a4c0:	3a415441 	bcc	905f5cc <_sidata+0x105345c>
 800a4c4:	52415355 	subpl	r5, r1, #1409286145	; 0x54000001
 800a4c8:	52003254 	andpl	r3, r0, #84, 4	; 0x40000005
 800a4cc:	52204d44 	eorpl	r4, r0, #68, 26	; 0x1100
 800a4d0:	6f707365 	svcvs	0x00707365
 800a4d4:	7265646e 	rsbvc	r6, r5, #1845493760	; 0x6e000000
 800a4d8:	6e6f6320 	cdpvs	3, 6, cr6, cr15, cr0, {1}
 800a4dc:	75676966 	strbvc	r6, [r7, #-2406]!	; 0xfffff69a
 800a4e0:	69746172 	ldmdbvs	r4!, {r1, r4, r5, r6, r8, sp, lr}^
 800a4e4:	000a6e6f 	andeq	r6, sl, pc, ror #28
 800a4e8:	6f725020 	svcvs	0x00725020
 800a4ec:	6f636f74 	svcvs	0x00636f74
 800a4f0:	6556206c 	ldrbvs	r2, [r6, #-108]	; 0xffffff94
 800a4f4:	6f697372 	svcvs	0x00697372
 800a4f8:	6425206e 	strtvs	r2, [r5], #-110	; 0xffffff92
 800a4fc:	0a64252e 	beq	99139bc <_sidata+0x190784c>
 800a500:	4d442000 	stclmi	0, cr2, [r4, #-0]
 800a504:	64412058 	strbvs	r2, [r1], #-88	; 0xffffffa8
 800a508:	73657264 	cmnvc	r5, #100, 4	; 0x40000006
 800a50c:	20202073 	eorcs	r2, r0, r3, ror r0
 800a510:	3a202020 	bcc	8812598 <_sidata+0x806428>
 800a514:	0a642520 	beq	991399c <_sidata+0x190782c>
 800a518:	4d442000 	stclmi	0, cr2, [r4, #-0]
 800a51c:	6f462058 	svcvs	0x00462058
 800a520:	7270746f 	rsbsvc	r7, r0, #1862270976	; 0x6f000000
 800a524:	20746e69 	rsbscs	r6, r4, r9, ror #28
 800a528:	3a202020 	bcc	88125b0 <_sidata+0x806440>
 800a52c:	0a642520 	beq	99139b4 <_sidata+0x1907844>
 800a530:	65502000 	ldrbvs	r2, [r0, #-0]
 800a534:	6e6f7372 	mcrvs	3, 3, r7, cr15, cr2, {3}
 800a538:	74696c61 	strbtvc	r6, [r9], #-3169	; 0xfffff39f
 800a53c:	64252079 	strtvs	r2, [r5], #-121	; 0xffffff87
 800a540:	20666f20 	rsbcs	r6, r6, r0, lsr #30
 800a544:	5b206425 	blpl	88235e0 <_sidata+0x817470>
 800a548:	732a2e25 			; <UNDEFINED> instruction: 0x732a2e25
 800a54c:	20000a5d 	andcs	r0, r0, sp, asr sl
 800a550:	20627553 	rsbcs	r7, r2, r3, asr r5
 800a554:	69766544 	ldmdbvs	r6!, {r2, r6, r8, sl, sp, lr}^
 800a558:	20736563 	rsbscs	r6, r3, r3, ror #10
 800a55c:	20202020 	eorcs	r2, r0, r0, lsr #32
 800a560:	25203a20 	strcs	r3, [r0, #-2592]!	; 0xfffff5e0
 800a564:	20000a64 	andcs	r0, r0, r4, ror #20
 800a568:	736e6553 	cmnvc	lr, #348127232	; 0x14c00000
 800a56c:	2073726f 	rsbscs	r7, r3, pc, ror #4
 800a570:	20202020 	eorcs	r2, r0, r0, lsr #32
 800a574:	20202020 	eorcs	r2, r0, r0, lsr #32
 800a578:	25203a20 	strcs	r3, [r0, #-2592]!	; 0xfffff5e0
 800a57c:	00000a64 	andeq	r0, r0, r4, ror #20

0800a580 <vtable for RDMDeviceResponder>:
	...
 800a588:	08003f1d 	stmdaeq	r0, {r0, r2, r3, r4, r8, r9, sl, fp, ip, sp}
 800a58c:	08003f3d 	stmdaeq	r0, {r0, r2, r3, r4, r5, r8, r9, sl, fp, ip, sp}
 800a590:	08003f19 	stmdaeq	r0, {r0, r3, r4, r8, r9, sl, fp, ip, sp}
 800a594:	08003f1b 	stmdaeq	r0, {r0, r1, r3, r4, r8, r9, sl, fp, ip, sp}
 800a598:	32334447 	eorscc	r4, r3, #1191182336	; 0x47000000
 800a59c:	33303346 	teqcc	r0, #402653185	; 0x18000001
 800a5a0:	45004352 	strmi	r4, [r0, #-850]	; 0xfffffcae
 800a5a4:	6465626d 	strbtvs	r6, [r5], #-621	; 0xfffffd93
 800a5a8:	00646564 	rsbeq	r6, r4, r4, ror #10

0800a5ac <UID_ALL>:
 800a5ac:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 800a5b0:	0000ffff 	strdeq	pc, [r0], -pc	; <UNPREDICTABLE>

0800a5b4 <RDMHandler::PID_DEFINITIONS>:
 800a5b4:	00000060 	andeq	r0, r0, r0, rrx
 800a5b8:	0800444d 	stmdaeq	r0, {r0, r2, r3, r6, sl, lr}
	...
 800a5c8:	01010000 	mrseq	r0, (UNDEF: 1)
 800a5cc:	00000080 	andeq	r0, r0, r0, lsl #1
 800a5d0:	08004551 	stmdaeq	r0, {r0, r4, r6, r8, sl, lr}
	...
 800a5e0:	01010100 	mrseq	r0, (UNDEF: 17)
 800a5e4:	00000081 	andeq	r0, r0, r1, lsl #1
 800a5e8:	08004745 	stmdaeq	r0, {r0, r2, r6, r8, r9, sl, lr}
	...
 800a5f8:	01010100 	mrseq	r0, (UNDEF: 17)
 800a5fc:	00000082 	andeq	r0, r0, r2, lsl #1
 800a600:	0800456d 	stmdaeq	r0, {r0, r2, r3, r5, r6, r8, sl, lr}
 800a604:	00000000 	andeq	r0, r0, r0
 800a608:	08004f85 	stmdaeq	r0, {r0, r2, r7, r8, r9, sl, fp, lr}
 800a60c:	00000000 	andeq	r0, r0, r0
 800a610:	01010100 	mrseq	r0, (UNDEF: 17)
 800a614:	00000090 	muleq	r0, r0, r0
 800a618:	080044b5 	stmdaeq	r0, {r0, r2, r4, r5, r7, sl, lr}
 800a61c:	00000000 	andeq	r0, r0, r0
 800a620:	08004ed1 	stmdaeq	r0, {r0, r4, r6, r7, r9, sl, fp, lr}
 800a624:	00000000 	andeq	r0, r0, r0
 800a628:	01010100 	mrseq	r0, (UNDEF: 17)
 800a62c:	00001000 	andeq	r1, r0, r0
 800a630:	080045c9 	stmdaeq	r0, {r0, r3, r6, r7, r8, sl, lr}
 800a634:	00000000 	andeq	r0, r0, r0
 800a638:	08004871 	stmdaeq	r0, {r0, r4, r5, r6, fp, lr}
 800a63c:	00000000 	andeq	r0, r0, r0
 800a640:	01010000 	mrseq	r0, (UNDEF: 1)
 800a644:	00001001 	andeq	r1, r0, r1
	...
 800a650:	08004829 	stmdaeq	r0, {r0, r3, r5, fp, lr}
 800a654:	00000000 	andeq	r0, r0, r0
 800a658:	01010100 	mrseq	r0, (UNDEF: 17)
 800a65c:	00000050 	andeq	r0, r0, r0, asr r0
 800a660:	080043ed 	stmdaeq	r0, {r0, r2, r3, r5, r6, r7, r8, r9, lr}
	...
 800a670:	00010000 	andeq	r0, r1, r0
 800a674:	00000070 	andeq	r0, r0, r0, ror r0
 800a678:	08004535 	stmdaeq	r0, {r0, r2, r4, r5, r8, sl, lr}
	...
 800a688:	00010100 	andeq	r0, r1, r0, lsl #2
 800a68c:	000000a0 	andeq	r0, r0, r0, lsr #1
 800a690:	080045dd 	stmdaeq	r0, {r0, r2, r3, r4, r6, r7, r8, sl, lr}
	...
 800a6a0:	00010100 	andeq	r0, r1, r0, lsl #2
 800a6a4:	000000b0 	strheq	r0, [r0], -r0	; <UNPREDICTABLE>
 800a6a8:	080045dd 	stmdaeq	r0, {r0, r2, r3, r4, r6, r7, r8, sl, lr}
 800a6ac:	00000000 	andeq	r0, r0, r0
 800a6b0:	080048ed 	stmdaeq	r0, {r0, r2, r3, r5, r6, r7, fp, lr}
 800a6b4:	00000000 	andeq	r0, r0, r0
 800a6b8:	00010100 	andeq	r0, r1, r0, lsl #2
 800a6bc:	000000c0 	andeq	r0, r0, r0, asr #1
 800a6c0:	080045a9 	stmdaeq	r0, {r0, r3, r5, r7, r8, sl, lr}
	...
 800a6d0:	00010000 	andeq	r0, r1, r0
 800a6d4:	000000c1 	andeq	r0, r0, r1, asr #1
 800a6d8:	08004935 	stmdaeq	r0, {r0, r2, r4, r5, r8, fp, lr}
	...
 800a6e8:	00010100 	andeq	r0, r1, r0, lsl #2
 800a6ec:	000000c2 	andeq	r0, r0, r2, asr #1
 800a6f0:	08004775 	stmdaeq	r0, {r0, r2, r4, r5, r6, r8, r9, sl, lr}
	...
 800a700:	00010100 	andeq	r0, r1, r0, lsl #2
 800a704:	000000e0 	andeq	r0, r0, r0, ror #1
 800a708:	080045fd 	stmdaeq	r0, {r0, r2, r3, r4, r5, r6, r7, r8, sl, lr}
 800a70c:	00000000 	andeq	r0, r0, r0
 800a710:	08004955 	stmdaeq	r0, {r0, r2, r4, r6, r8, fp, lr}
 800a714:	00000000 	andeq	r0, r0, r0
 800a718:	00010100 	andeq	r0, r1, r0, lsl #2
 800a71c:	000000e1 	andeq	r0, r0, r1, ror #1
 800a720:	080049a9 	stmdaeq	r0, {r0, r3, r5, r7, r8, fp, lr}
	...
 800a730:	00010101 	andeq	r0, r1, r1, lsl #2
 800a734:	000000f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
 800a738:	08004639 	stmdaeq	r0, {r0, r3, r4, r5, r9, sl, lr}
 800a73c:	00000000 	andeq	r0, r0, r0
 800a740:	08004a2d 	stmdaeq	r0, {r0, r2, r3, r5, r9, fp, lr}
 800a744:	00000000 	andeq	r0, r0, r0
 800a748:	00010000 	andeq	r0, r1, r0
 800a74c:	00000120 	andeq	r0, r0, r0, lsr #2
 800a750:	08004791 	stmdaeq	r0, {r0, r4, r7, r8, r9, sl, lr}
	...
 800a760:	00010100 	andeq	r0, r1, r0, lsl #2
 800a764:	00000121 	andeq	r0, r0, r1, lsr #2
 800a768:	08004e59 	stmdaeq	r0, {r0, r3, r4, r6, r9, sl, fp, lr}
	...
 800a778:	00010102 	andeq	r0, r1, r2, lsl #2
 800a77c:	00000200 	andeq	r0, r0, r0, lsl #4
 800a780:	08004a7d 	stmdaeq	r0, {r0, r2, r3, r4, r5, r6, r9, fp, lr}
	...
 800a790:	00010101 	andeq	r0, r1, r1, lsl #2
 800a794:	00000201 	andeq	r0, r0, r1, lsl #4
 800a798:	08004b25 	stmdaeq	r0, {r0, r2, r5, r8, r9, fp, lr}
 800a79c:	00000000 	andeq	r0, r0, r0
 800a7a0:	08004ba5 	stmdaeq	r0, {r0, r2, r5, r7, r8, r9, fp, lr}
 800a7a4:	00000000 	andeq	r0, r0, r0
 800a7a8:	00010101 	andeq	r0, r1, r1, lsl #2
 800a7ac:	00000202 	andeq	r0, r0, r2, lsl #4
	...
 800a7b8:	08004c59 	stmdaeq	r0, {r0, r3, r4, r6, sl, fp, lr}
 800a7bc:	00000000 	andeq	r0, r0, r0
 800a7c0:	00010100 	andeq	r0, r1, r0, lsl #2
 800a7c4:	00000400 	andeq	r0, r0, r0, lsl #8
 800a7c8:	08004675 	stmdaeq	r0, {r0, r2, r4, r5, r6, r9, sl, lr}
 800a7cc:	00000000 	andeq	r0, r0, r0
 800a7d0:	08004ca5 	stmdaeq	r0, {r0, r2, r5, r7, sl, fp, lr}
 800a7d4:	00000000 	andeq	r0, r0, r0
 800a7d8:	00010100 	andeq	r0, r1, r0, lsl #2
 800a7dc:	00000500 	andeq	r0, r0, r0, lsl #10
 800a7e0:	0800469d 	stmdaeq	r0, {r0, r2, r3, r4, r7, r9, sl, lr}
 800a7e4:	00000000 	andeq	r0, r0, r0
 800a7e8:	08004cad 	stmdaeq	r0, {r0, r2, r3, r5, r7, sl, fp, lr}
 800a7ec:	00000000 	andeq	r0, r0, r0
 800a7f0:	00010100 	andeq	r0, r1, r0, lsl #2
 800a7f4:	00000501 	andeq	r0, r0, r1, lsl #10
 800a7f8:	080046b5 	stmdaeq	r0, {r0, r2, r4, r5, r7, r9, sl, lr}
 800a7fc:	00000000 	andeq	r0, r0, r0
 800a800:	08004cf9 	stmdaeq	r0, {r0, r3, r4, r5, r6, r7, sl, fp, lr}
 800a804:	00000000 	andeq	r0, r0, r0
 800a808:	00010100 	andeq	r0, r1, r0, lsl #2
 800a80c:	00000603 	andeq	r0, r0, r3, lsl #12
 800a810:	080046cd 	stmdaeq	r0, {r0, r2, r3, r6, r7, r9, sl, lr}
 800a814:	00000000 	andeq	r0, r0, r0
 800a818:	08004d41 	stmdaeq	r0, {r0, r6, r8, sl, fp, lr}
 800a81c:	00000000 	andeq	r0, r0, r0
 800a820:	00010100 	andeq	r0, r1, r0, lsl #2
 800a824:	00001010 	andeq	r1, r0, r0, lsl r0
 800a828:	08004715 	stmdaeq	r0, {r0, r2, r4, r8, r9, sl, lr}
 800a82c:	00000000 	andeq	r0, r0, r0
 800a830:	08004da9 	stmdaeq	r0, {r0, r3, r5, r7, r8, sl, fp, lr}
 800a834:	00000000 	andeq	r0, r0, r0
 800a838:	00010100 	andeq	r0, r1, r0, lsl #2
 800a83c:	00001020 	andeq	r1, r0, r0, lsr #32
 800a840:	08004723 	stmdaeq	r0, {r0, r1, r5, r8, r9, sl, lr}
 800a844:	00000000 	andeq	r0, r0, r0
 800a848:	08004dd7 	stmdaeq	r0, {r0, r1, r2, r4, r6, r7, r8, sl, fp, lr}
 800a84c:	00000000 	andeq	r0, r0, r0
 800a850:	00010100 	andeq	r0, r1, r0, lsl #2
 800a854:	00001021 	andeq	r1, r0, r1, lsr #32
 800a858:	08004e0b 	stmdaeq	r0, {r0, r1, r3, r9, sl, fp, lr}
	...
 800a868:	00010101 	andeq	r0, r1, r1, lsl #2
 800a86c:	00001040 	andeq	r1, r0, r0, asr #32
 800a870:	08005261 	stmdaeq	r0, {r0, r5, r6, r9, ip, lr}
 800a874:	00000000 	andeq	r0, r0, r0
 800a878:	08005275 	stmdaeq	r0, {r0, r2, r4, r5, r6, r9, ip, lr}
 800a87c:	00000000 	andeq	r0, r0, r0
 800a880:	00010100 	andeq	r0, r1, r0, lsl #2

0800a884 <RDMHandler::PID_DEFINITIONS_SUB_DEVICES>:
 800a884:	00000060 	andeq	r0, r0, r0, rrx
 800a888:	0800444d 	stmdaeq	r0, {r0, r2, r3, r6, sl, lr}
	...
 800a898:	00010100 	andeq	r0, r1, r0, lsl #2
 800a89c:	000000c0 	andeq	r0, r0, r0, asr #1
 800a8a0:	080045a9 	stmdaeq	r0, {r0, r3, r5, r7, r8, sl, lr}
	...
 800a8b0:	00010100 	andeq	r0, r1, r0, lsl #2
 800a8b4:	00001000 	andeq	r1, r0, r0
 800a8b8:	080045c9 	stmdaeq	r0, {r0, r3, r6, r7, r8, sl, lr}
 800a8bc:	00000000 	andeq	r0, r0, r0
 800a8c0:	08004871 	stmdaeq	r0, {r0, r4, r5, r6, fp, lr}
 800a8c4:	00000000 	andeq	r0, r0, r0
 800a8c8:	00010100 	andeq	r0, r1, r0, lsl #2
 800a8cc:	00000050 	andeq	r0, r0, r0, asr r0
 800a8d0:	080043ed 	stmdaeq	r0, {r0, r2, r3, r5, r6, r7, r8, r9, lr}
	...
 800a8e0:	00010100 	andeq	r0, r1, r0, lsl #2
 800a8e4:	00000070 	andeq	r0, r0, r0, ror r0
 800a8e8:	08004535 	stmdaeq	r0, {r0, r2, r4, r5, r8, sl, lr}
	...
 800a8f8:	00010100 	andeq	r0, r1, r0, lsl #2
 800a8fc:	000000e0 	andeq	r0, r0, r0, ror #1
 800a900:	080045fd 	stmdaeq	r0, {r0, r2, r3, r4, r5, r6, r7, r8, sl, lr}
 800a904:	00000000 	andeq	r0, r0, r0
 800a908:	08004955 	stmdaeq	r0, {r0, r2, r4, r6, r8, fp, lr}
 800a90c:	00000000 	andeq	r0, r0, r0
 800a910:	00010100 	andeq	r0, r1, r0, lsl #2
 800a914:	000000e1 	andeq	r0, r0, r1, ror #1
 800a918:	080049a9 	stmdaeq	r0, {r0, r3, r5, r7, r8, fp, lr}
	...
 800a928:	00010101 	andeq	r0, r1, r1, lsl #2
 800a92c:	000000f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
 800a930:	08004639 	stmdaeq	r0, {r0, r3, r4, r5, r9, sl, lr}
 800a934:	00000000 	andeq	r0, r0, r0
 800a938:	08004a2d 	stmdaeq	r0, {r0, r2, r3, r5, r9, fp, lr}
 800a93c:	00000000 	andeq	r0, r0, r0
 800a940:	00010100 	andeq	r0, r1, r0, lsl #2
 800a944:	64206f4e 	strtvs	r6, [r0], #-3918	; 0xfffff0b2
 800a948:	6e696665 	cdpvs	6, 6, cr6, cr9, cr5, {3}
 800a94c:	6f697469 	svcvs	0x00697469
 800a950:	6e49006e 	cdpvs	0, 4, cr0, cr9, cr14, {3}
 800a954:	736e6574 	cmnvc	lr, #116, 10	; 0x1d000000
 800a958:	00797469 	rsbseq	r7, r9, r9, ror #8
 800a95c:	65746e49 	ldrbvs	r6, [r4, #-3657]!	; 0xfffff1b7
 800a960:	7469736e 	strbtvc	r7, [r9], #-878	; 0xfffffc92
 800a964:	614d2079 	hvcvs	53769	; 0xd209
 800a968:	72657473 	rsbvc	r7, r5, #1929379840	; 0x73000000
 800a96c:	6e615000 	cdpvs	0, 6, cr5, cr1, cr0, {0}
 800a970:	6c695400 	cfstrdvs	mvd5, [r9], #-0
 800a974:	6f430074 	svcvs	0x00430074
 800a978:	20726f6c 	rsbscs	r6, r2, ip, ror #30
 800a97c:	65656857 	strbvs	r6, [r5, #-2135]!	; 0xfffff7a9
 800a980:	7553006c 	ldrbvc	r0, [r3, #-108]	; 0xffffff94
 800a984:	61727462 	cmnvs	r2, r2, ror #8
 800a988:	76697463 	strbtvc	r7, [r9], -r3, ror #8
 800a98c:	6f432065 	svcvs	0x00432065
 800a990:	20726f6c 	rsbscs	r6, r2, ip, ror #30
 800a994:	6578694d 	ldrbvs	r6, [r8, #-2381]!	; 0xfffff6b3
 800a998:	80e22072 	rschi	r2, r2, r2, ror r0
 800a99c:	79432093 	stmdbvc	r3, {r0, r1, r4, r7, sp}^
 800a9a0:	422f6e61 	eormi	r6, pc, #1552	; 0x610
 800a9a4:	0065756c 	rsbeq	r7, r5, ip, ror #10
 800a9a8:	74627553 	strbtvc	r7, [r2], #-1363	; 0xfffffaad
 800a9ac:	74636172 	strbtvc	r6, [r3], #-370	; 0xfffffe8e
 800a9b0:	20657669 	rsbcs	r7, r5, r9, ror #12
 800a9b4:	6f6c6f43 	svcvs	0x006c6f43
 800a9b8:	694d2072 	stmdbvs	sp, {r1, r4, r5, r6, sp}^
 800a9bc:	20726578 	rsbscs	r6, r2, r8, ror r5
 800a9c0:	209380e2 	addscs	r8, r3, r2, ror #1
 800a9c4:	6c6c6559 	cfstr64vs	mvdx6, [ip], #-356	; 0xfffffe9c
 800a9c8:	412f776f 			; <UNDEFINED> instruction: 0x412f776f
 800a9cc:	7265626d 	rsbvc	r6, r5, #-805306362	; 0xd0000006
 800a9d0:	62755300 	rsbsvs	r5, r5, #0, 6
 800a9d4:	63617274 	cmnvs	r1, #116, 4	; 0x40000007
 800a9d8:	65766974 	ldrbvs	r6, [r6, #-2420]!	; 0xfffff68c
 800a9dc:	6c6f4320 	stclvs	3, cr4, [pc], #-128	; 800a964 <RDMHandler::PID_DEFINITIONS_SUB_DEVICES+0xe0>
 800a9e0:	4d20726f 	sfmmi	f7, 4, [r0, #-444]!	; 0xfffffe44
 800a9e4:	72657869 	rsbvc	r7, r5, #6881280	; 0x690000
 800a9e8:	4d202d20 	stcmi	13, cr2, [r0, #-128]!	; 0xffffff80
 800a9ec:	6e656761 	cdpvs	7, 6, cr6, cr5, cr1, {3}
 800a9f0:	41006174 	tstmi	r0, r4, ror r1
 800a9f4:	74696464 	strbtvc	r6, [r9], #-1124	; 0xfffffb9c
 800a9f8:	20657669 	rsbcs	r7, r5, r9, ror #12
 800a9fc:	6f6c6f43 	svcvs	0x006c6f43
 800aa00:	694d2072 	stmdbvs	sp, {r1, r4, r5, r6, sp}^
 800aa04:	20726578 	rsbscs	r6, r2, r8, ror r5
 800aa08:	6552202d 	ldrbvs	r2, [r2, #-45]	; 0xffffffd3
 800aa0c:	64410064 	strbvs	r0, [r1], #-100	; 0xffffff9c
 800aa10:	69746964 	ldmdbvs	r4!, {r2, r5, r6, r8, fp, sp, lr}^
 800aa14:	43206576 			; <UNDEFINED> instruction: 0x43206576
 800aa18:	726f6c6f 	rsbvc	r6, pc, #28416	; 0x6f00
 800aa1c:	78694d20 	stmdavc	r9!, {r5, r8, sl, fp, lr}^
 800aa20:	2d207265 	sfmcs	f7, 4, [r0, #-404]!	; 0xfffffe6c
 800aa24:	65724720 	ldrbvs	r4, [r2, #-1824]!	; 0xfffff8e0
 800aa28:	41006e65 	tstmi	r0, r5, ror #28
 800aa2c:	74696464 	strbtvc	r6, [r9], #-1124	; 0xfffffb9c
 800aa30:	20657669 	rsbcs	r7, r5, r9, ror #12
 800aa34:	6f6c6f43 	svcvs	0x006c6f43
 800aa38:	694d2072 	stmdbvs	sp, {r1, r4, r5, r6, sp}^
 800aa3c:	20726578 	rsbscs	r6, r2, r8, ror r5
 800aa40:	6c42202d 	mcrrvs	0, 2, r2, r2, cr13
 800aa44:	43006575 	movwmi	r6, #1397	; 0x575
 800aa48:	726f6c6f 	rsbvc	r6, pc, #28416	; 0x6f00
 800aa4c:	6d655420 	cfstrdvs	mvd5, [r5, #-128]!	; 0xffffff80
 800aa50:	61726570 	cmnvs	r2, r0, ror r5
 800aa54:	65727574 	ldrbvs	r7, [r2, #-1396]!	; 0xfffffa8c
 800aa58:	726f4320 	rsbvc	r4, pc, #32, 6	; 0x80000000
 800aa5c:	74636572 	strbtvc	r6, [r3], #-1394	; 0xfffffa8e
 800aa60:	006e6f69 	rsbeq	r6, lr, r9, ror #30
 800aa64:	69646441 	stmdbvs	r4!, {r0, r6, sl, sp, lr}^
 800aa68:	65766974 	ldrbvs	r6, [r6, #-2420]!	; 0xfffff68c
 800aa6c:	6c6f4320 	stclvs	3, cr4, [pc], #-128	; 800a9f4 <RDMHandler::PID_DEFINITIONS_SUB_DEVICES+0x170>
 800aa70:	4d20726f 	sfmmi	f7, 4, [r0, #-444]!	; 0xfffffe44
 800aa74:	72657869 	rsbvc	r7, r5, #6881280	; 0x690000
 800aa78:	41202d20 			; <UNDEFINED> instruction: 0x41202d20
 800aa7c:	7265626d 	rsbvc	r6, r5, #-805306362	; 0xd0000006
 800aa80:	64644100 	strbtvs	r4, [r4], #-256	; 0xffffff00
 800aa84:	76697469 	strbtvc	r7, [r9], -r9, ror #8
 800aa88:	6f432065 	svcvs	0x00432065
 800aa8c:	20726f6c 	rsbscs	r6, r2, ip, ror #30
 800aa90:	6578694d 	ldrbvs	r6, [r8, #-2381]!	; 0xfffff6b3
 800aa94:	202d2072 	eorcs	r2, sp, r2, ror r0
 800aa98:	74696857 	strbtvc	r6, [r9], #-2135	; 0xfffff7a9
 800aa9c:	64410065 	strbvs	r0, [r1], #-101	; 0xffffff9b
 800aaa0:	69746964 	ldmdbvs	r4!, {r2, r5, r6, r8, fp, sp, lr}^
 800aaa4:	43206576 			; <UNDEFINED> instruction: 0x43206576
 800aaa8:	726f6c6f 	rsbvc	r6, pc, #28416	; 0x6f00
 800aaac:	78694d20 	stmdavc	r9!, {r5, r8, sl, fp, lr}^
 800aab0:	2d207265 	sfmcs	f7, 4, [r0, #-404]!	; 0xfffffe6c
 800aab4:	72615720 	rsbvc	r5, r1, #32, 14	; 0x800000
 800aab8:	6857206d 	ldmdavs	r7, {r0, r2, r3, r5, r6, sp}^
 800aabc:	00657469 	rsbeq	r7, r5, r9, ror #8
 800aac0:	69646441 	stmdbvs	r4!, {r0, r6, sl, sp, lr}^
 800aac4:	65766974 	ldrbvs	r6, [r6, #-2420]!	; 0xfffff68c
 800aac8:	6c6f4320 	stclvs	3, cr4, [pc], #-128	; 800aa50 <RDMHandler::PID_DEFINITIONS_SUB_DEVICES+0x1cc>
 800aacc:	4d20726f 	sfmmi	f7, 4, [r0, #-444]!	; 0xfffffe44
 800aad0:	72657869 	rsbvc	r7, r5, #6881280	; 0x690000
 800aad4:	43202d20 			; <UNDEFINED> instruction: 0x43202d20
 800aad8:	206c6f6f 	rsbcs	r6, ip, pc, ror #30
 800aadc:	74696857 	strbtvc	r6, [r9], #-2135	; 0xfffff7a9
 800aae0:	75530065 	ldrbvc	r0, [r3, #-101]	; 0xffffff9b
 800aae4:	61727462 	cmnvs	r2, r2, ror #8
 800aae8:	76697463 	strbtvc	r7, [r9], -r3, ror #8
 800aaec:	6f432065 	svcvs	0x00432065
 800aaf0:	20726f6c 	rsbscs	r6, r2, ip, ror #30
 800aaf4:	6578694d 	ldrbvs	r6, [r8, #-2381]!	; 0xfffff6b3
 800aaf8:	202d2072 	eorcs	r2, sp, r2, ror r0
 800aafc:	48005655 	stmdami	r0, {r0, r2, r4, r6, r9, sl, ip, lr}
 800ab00:	53006575 	movwpl	r6, #1397	; 0x575
 800ab04:	72757461 	rsbsvc	r7, r5, #1627389952	; 0x61000000
 800ab08:	6f697461 	svcvs	0x00697461
 800ab0c:	7453006e 	ldrbvc	r0, [r3], #-110	; 0xffffff92
 800ab10:	63697461 	cmnvs	r9, #1627389952	; 0x61000000
 800ab14:	626f6720 	rsbvs	r6, pc, #32, 14	; 0x800000
 800ab18:	6877206f 	ldmdavs	r7!, {r0, r1, r2, r3, r5, r6, sp}^
 800ab1c:	006c6565 	rsbeq	r6, ip, r5, ror #10
 800ab20:	61746f52 	cmnvs	r4, r2, asr pc
 800ab24:	676e6974 			; <UNDEFINED> instruction: 0x676e6974
 800ab28:	626f6720 	rsbvs	r6, pc, #32, 14	; 0x800000
 800ab2c:	6877206f 	ldmdavs	r7!, {r0, r1, r2, r3, r5, r6, sp}^
 800ab30:	006c6565 	rsbeq	r6, ip, r5, ror #10
 800ab34:	73697250 	cmnvc	r9, #80, 4
 800ab38:	6877206d 	ldmdavs	r7!, {r0, r2, r3, r5, r6, sp}^
 800ab3c:	006c6565 	rsbeq	r6, ip, r5, ror #10
 800ab40:	65666645 	strbvs	r6, [r6, #-1605]!	; 0xfffff9bb
 800ab44:	20737463 	rsbscs	r7, r3, r3, ror #8
 800ab48:	65656877 	strbvs	r6, [r5, #-2167]!	; 0xfffff789
 800ab4c:	6542006c 	strbvs	r0, [r2, #-108]	; 0xffffff94
 800ab50:	73206d61 			; <UNDEFINED> instruction: 0x73206d61
 800ab54:	20657a69 	rsbcs	r7, r5, r9, ror #20
 800ab58:	73697269 	cmnvc	r9, #-1879048186	; 0x90000006
 800ab5c:	67644500 	strbvs	r4, [r4, -r0, lsl #10]!
 800ab60:	654c2f65 	strbvs	r2, [ip, #-3941]	; 0xfffff09b
 800ab64:	6620736e 	strtvs	r7, [r0], -lr, ror #6
 800ab68:	7375636f 	cmnvc	r5, #-1140850687	; 0xbc000001
 800ab6c:	6f724600 	svcvs	0x00724600
 800ab70:	442f7473 	strtmi	r7, [pc], #-1139	; 800ab78 <RDMHandler::PID_DEFINITIONS_SUB_DEVICES+0x2f4>
 800ab74:	75666669 	strbvc	r6, [r6, #-1641]!	; 0xfffff997
 800ab78:	6e6f6973 			; <UNDEFINED> instruction: 0x6e6f6973
 800ab7c:	72745300 	rsbsvc	r5, r4, #0, 6
 800ab80:	2f65626f 	svccs	0x0065626f
 800ab84:	74756853 	ldrbtvc	r6, [r5], #-2131	; 0xfffff7ad
 800ab88:	00726574 	rsbseq	r6, r2, r4, ror r5
 800ab8c:	6d6f6f5a 	stclvs	15, cr6, [pc, #-360]!	; 800aa2c <RDMHandler::PID_DEFINITIONS_SUB_DEVICES+0x1a8>
 800ab90:	6e656c20 	cdpvs	12, 6, cr6, cr5, cr0, {1}
 800ab94:	72460073 	subvc	r0, r6, #115	; 0x73
 800ab98:	6e696d61 	cdpvs	13, 6, cr6, cr9, cr1, {3}
 800ab9c:	68732067 	ldmdavs	r3!, {r0, r1, r2, r5, r6, sp}^
 800aba0:	65747475 	ldrbvs	r7, [r4, #-1141]!	; 0xfffffb8b
 800aba4:	72460072 	subvc	r0, r6, #114	; 0x72
 800aba8:	6e696d61 	cdpvs	13, 6, cr6, cr9, cr1, {3}
 800abac:	68732067 	ldmdavs	r3!, {r0, r1, r2, r5, r6, sp}^
 800abb0:	65747475 	ldrbvs	r7, [r4, #-1141]!	; 0xfffffb8b
 800abb4:	6f722072 	svcvs	0x00722072
 800abb8:	69746174 	ldmdbvs	r4!, {r2, r4, r5, r6, r8, sp, lr}^
 800abbc:	44006e6f 	strmi	r6, [r0], #-3695	; 0xfffff191
 800abc0:	6573756f 	ldrbvs	r7, [r3, #-1391]!	; 0xfffffa91
 800abc4:	61420072 	hvcvs	8194	; 0x2002
 800abc8:	44206e72 	strtmi	r6, [r0], #-3698	; 0xfffff18e
 800abcc:	00726f6f 	rsbseq	r6, r2, pc, ror #30
 800abd0:	706d614c 	rsbvc	r6, sp, ip, asr #2
 800abd4:	6e6f6320 	cdpvs	3, 6, cr6, cr15, cr0, {1}
 800abd8:	6c6f7274 	sfmvs	f7, 2, [pc], #-464	; 800aa10 <RDMHandler::PID_DEFINITIONS_SUB_DEVICES+0x18c>
 800abdc:	6e756620 	cdpvs	6, 7, cr6, cr5, cr0, {1}
 800abe0:	6f697463 	svcvs	0x00697463
 800abe4:	4600736e 	strmi	r7, [r0], -lr, ror #6
 800abe8:	75747869 	ldrbvc	r7, [r4, #-2153]!	; 0xfffff797
 800abec:	63206572 			; <UNDEFINED> instruction: 0x63206572
 800abf0:	72746e6f 	rsbsvc	r6, r4, #1776	; 0x6f0
 800abf4:	63206c6f 			; <UNDEFINED> instruction: 0x63206c6f
 800abf8:	6e6e6168 	powvsez	f6, f6, #0.0
 800abfc:	4d006c65 	stcmi	12, cr6, [r0, #-404]	; 0xfffffe6c
 800ac00:	6f726361 	svcvs	0x00726361
 800ac04:	6e6f6320 	cdpvs	3, 6, cr6, cr15, cr0, {1}
 800ac08:	6c6f7274 	sfmvs	f7, 2, [pc], #-464	; 800aa40 <RDMHandler::PID_DEFINITIONS_SUB_DEVICES+0x1bc>
 800ac0c:	6c655200 	sfmvs	f5, 2, [r5], #-0
 800ac10:	6f207961 	svcvs	0x00207961
 800ac14:	6f702072 	svcvs	0x00702072
 800ac18:	20726577 	rsbscs	r6, r2, r7, ror r5
 800ac1c:	746e6f63 	strbtvc	r6, [lr], #-3939	; 0xfffff09d
 800ac20:	006c6f72 	rsbeq	r6, ip, r2, ror pc
 800ac24:	206e6146 	rsbcs	r6, lr, r6, asr #2
 800ac28:	746e6f63 	strbtvc	r6, [lr], #-3939	; 0xfffff09d
 800ac2c:	006c6f72 	rsbeq	r6, ip, r2, ror pc
 800ac30:	74616548 	strbtvc	r6, [r1], #-1352	; 0xfffffab8
 800ac34:	63207265 			; <UNDEFINED> instruction: 0x63207265
 800ac38:	72746e6f 	rsbsvc	r6, r4, #1776	; 0x6f0
 800ac3c:	46006c6f 	strmi	r6, [r0], -pc, ror #24
 800ac40:	746e756f 	strbtvc	r7, [lr], #-1391	; 0xfffffa91
 800ac44:	206e6961 	rsbcs	r6, lr, r1, ror #18
 800ac48:	65746177 	ldrbvs	r6, [r4, #-375]!	; 0xfffffe89
 800ac4c:	75702072 	ldrbvc	r2, [r0, #-114]!	; 0xffffff8e
 800ac50:	6320706d 			; <UNDEFINED> instruction: 0x6320706d
 800ac54:	72746e6f 	rsbsvc	r6, r4, #1776	; 0x6f0
 800ac58:	00206c6f 	eoreq	r6, r0, pc, ror #24
 800ac5c:	746f6c53 	strbtvc	r6, [pc], #-3155	; 800ac64 <RDMHandler::PID_DEFINITIONS_SUB_DEVICES+0x3e0>
 800ac60:	72696420 	rsbvc	r6, r9, #32, 8	; 0x20000000
 800ac64:	6c746365 	ldclvs	3, cr6, [r4], #-404	; 0xfffffe6c
 800ac68:	6f632079 	svcvs	0x00632079
 800ac6c:	6f72746e 	svcvs	0x0072746e
 800ac70:	7020736c 	eorvc	r7, r0, ip, ror #6
 800ac74:	6d617261 	sfmvs	f7, 2, [r1, #-388]!	; 0xfffffe7c
 800ac78:	72657465 	rsbvc	r7, r5, #1694498816	; 0x65000000
 800ac7c:	65722820 	ldrbvs	r2, [r2, #-2080]!	; 0xfffff7e0
 800ac80:	73657270 	cmnvc	r5, #112, 4
 800ac84:	73746e65 	cmnvc	r4, #1616	; 0x650
 800ac88:	616f4320 	cmnvs	pc, r0, lsr #6
 800ac8c:	20657372 	rsbcs	r7, r5, r2, ror r3
 800ac90:	20726f66 	rsbscs	r6, r2, r6, ror #30
 800ac94:	622d3631 	eorvs	r3, sp, #51380224	; 0x3100000
 800ac98:	70207469 	eorvc	r7, r0, r9, ror #8
 800ac9c:	6d617261 	sfmvs	f7, 2, [r1, #-388]!	; 0xfffffe7c
 800aca0:	72657465 	rsbvc	r7, r5, #1694498816	; 0x65000000
 800aca4:	46002973 			; <UNDEFINED> instruction: 0x46002973
 800aca8:	2c656e69 	stclcs	14, cr6, [r5], #-420	; 0xfffffe5c
 800acac:	726f6620 	rsbvc	r6, pc, #32, 12	; 0x2000000
 800acb0:	2d363120 	ldfcss	f3, [r6, #-128]!	; 0xffffff80
 800acb4:	20746962 	rsbscs	r6, r4, r2, ror #18
 800acb8:	61726170 	cmnvs	r2, r0, ror r1
 800acbc:	6574656d 	ldrbvs	r6, [r4, #-1389]!	; 0xfffffa93
 800acc0:	53007372 	movwpl	r7, #882	; 0x372
 800acc4:	20746f6c 	rsbscs	r6, r4, ip, ror #30
 800acc8:	73746573 	cmnvc	r4, #482344960	; 0x1cc00000
 800accc:	6d697420 	cfstrdvs	mvd7, [r9, #-128]!	; 0xffffff80
 800acd0:	20676e69 	rsbcs	r6, r7, r9, ror #28
 800acd4:	756c6176 	strbvc	r6, [ip, #-374]!	; 0xfffffe8a
 800acd8:	6f662065 	svcvs	0x00662065
 800acdc:	73612072 	cmnvc	r1, #114	; 0x72
 800ace0:	69636f73 	stmdbvs	r3!, {r0, r1, r4, r5, r6, r8, r9, sl, fp, sp, lr}^
 800ace4:	64657461 	strbtvs	r7, [r5], #-1121	; 0xfffffb9f
 800ace8:	72617020 	rsbvc	r7, r1, #32
 800acec:	74656d61 	strbtvc	r6, [r5], #-3425	; 0xfffff29f
 800acf0:	53007265 	movwpl	r7, #613	; 0x265
 800acf4:	20746f6c 	rsbscs	r6, r4, ip, ror #30
 800acf8:	73746573 	cmnvc	r4, #482344960	; 0x1cc00000
 800acfc:	65707320 	ldrbvs	r7, [r0, #-800]!	; 0xfffffce0
 800ad00:	762f6465 	strtvc	r6, [pc], -r5, ror #8
 800ad04:	636f6c65 	cmnvs	pc, #25856	; 0x6500
 800ad08:	20797469 	rsbscs	r7, r9, r9, ror #8
 800ad0c:	20726f66 	rsbscs	r6, r2, r6, ror #30
 800ad10:	6f737361 	svcvs	0x00737361
 800ad14:	74616963 	strbtvc	r6, [r1], #-2403	; 0xfffff69d
 800ad18:	70206465 	eorvc	r6, r0, r5, ror #8
 800ad1c:	6d617261 	sfmvs	f7, 2, [r1, #-388]!	; 0xfffffe7c
 800ad20:	72657465 	rsbvc	r7, r5, #1694498816	; 0x65000000
 800ad24:	6f6c5300 	svcvs	0x006c5300
 800ad28:	72702074 	rsbsvc	r2, r0, #116	; 0x74
 800ad2c:	6469766f 	strbtvs	r7, [r9], #-1647	; 0xfffff991
 800ad30:	63207365 			; <UNDEFINED> instruction: 0x63207365
 800ad34:	72746e6f 	rsbsvc	r6, r4, #1776	; 0x6f0
 800ad38:	6d2f6c6f 	stcvs	12, cr6, [pc, #-444]!	; 800ab84 <RDMHandler::PID_DEFINITIONS_SUB_DEVICES+0x300>
 800ad3c:	2065646f 	rsbcs	r6, r5, pc, ror #8
 800ad40:	6f666e69 	svcvs	0x00666e69
 800ad44:	726f6620 	rsbvc	r6, pc, #32, 12	; 0x2000000
 800ad48:	72617020 	rsbvc	r7, r1, #32
 800ad4c:	74656d61 	strbtvc	r6, [r5], #-3425	; 0xfffff29f
 800ad50:	53007265 	movwpl	r7, #613	; 0x265
 800ad54:	20746f6c 	rsbscs	r6, r4, ip, ror #30
 800ad58:	73746573 	cmnvc	r4, #482344960	; 0x1cc00000
 800ad5c:	646e6920 	strbtvs	r6, [lr], #-2336	; 0xfffff6e0
 800ad60:	70207865 	eorvc	r7, r0, r5, ror #16
 800ad64:	7469736f 	strbtvc	r7, [r9], #-879	; 0xfffffc91
 800ad68:	206e6f69 	rsbcs	r6, lr, r9, ror #30
 800ad6c:	20726f66 	rsbscs	r6, r2, r6, ror #30
 800ad70:	6f737361 	svcvs	0x00737361
 800ad74:	74616963 	strbtvc	r6, [r1], #-2403	; 0xfffff69d
 800ad78:	70206465 	eorvc	r6, r0, r5, ror #8
 800ad7c:	6d617261 	sfmvs	f7, 2, [r1, #-388]!	; 0xfffffe7c
 800ad80:	72657465 	rsbvc	r7, r5, #1694498816	; 0x65000000
 800ad84:	6f6c5300 	svcvs	0x006c5300
 800ad88:	65732074 	ldrbvs	r2, [r3, #-116]!	; 0xffffff8c
 800ad8c:	72207374 	eorvc	r7, r0, #116, 6	; 0xd0000001
 800ad90:	7461746f 	strbtvc	r7, [r1], #-1135	; 0xfffffb91
 800ad94:	206e6f69 	rsbcs	r6, lr, r9, ror #30
 800ad98:	65657073 	strbvs	r7, [r5, #-115]!	; 0xffffff8d
 800ad9c:	6f662064 	svcvs	0x00662064
 800ada0:	73612072 	cmnvc	r1, #114	; 0x72
 800ada4:	69636f73 	stmdbvs	r3!, {r0, r1, r4, r5, r6, r8, r9, sl, fp, sp, lr}^
 800ada8:	64657461 	strbtvs	r7, [r5], #-1121	; 0xfffffb9f
 800adac:	72617020 	rsbvc	r7, r1, #32
 800adb0:	74656d61 	strbtvc	r6, [r5], #-3425	; 0xfffff29f
 800adb4:	43007265 	movwmi	r7, #613	; 0x265
 800adb8:	69626d6f 	stmdbvs	r2!, {r0, r1, r2, r3, r5, r6, r8, sl, fp, sp, lr}^
 800adbc:	2064656e 	rsbcs	r6, r4, lr, ror #10
 800adc0:	65646e69 	strbvs	r6, [r4, #-3689]!	; 0xfffff197
 800adc4:	6f722f78 	svcvs	0x00722f78
 800adc8:	69746174 	ldmdbvs	r4!, {r2, r4, r5, r6, r8, sp, lr}^
 800adcc:	63206e6f 			; <UNDEFINED> instruction: 0x63206e6f
 800add0:	72746e6f 	rsbsvc	r6, r4, #1776	; 0x6f0
 800add4:	00006c6f 	andeq	r6, r0, pc, ror #24

0800add8 <s_tTableC2>:
 800add8:	00000001 	andeq	r0, r0, r1
 800addc:	0800a952 	stmdaeq	r0, {r1, r4, r6, r8, fp, sp, pc}
 800ade0:	00000002 	andeq	r0, r0, r2
 800ade4:	0800a95c 	stmdaeq	r0, {r2, r3, r4, r6, r8, fp, sp, pc}
 800ade8:	00000101 	andeq	r0, r0, r1, lsl #2
 800adec:	0800a96d 	stmdaeq	r0, {r0, r2, r3, r5, r6, r8, fp, sp, pc}
 800adf0:	00000102 	andeq	r0, r0, r2, lsl #2
 800adf4:	0800a971 	stmdaeq	r0, {r0, r4, r5, r6, r8, fp, sp, pc}
 800adf8:	00000201 	andeq	r0, r0, r1, lsl #4
 800adfc:	0800a976 	stmdaeq	r0, {r1, r2, r4, r5, r6, r8, fp, sp, pc}
 800ae00:	00000202 	andeq	r0, r0, r2, lsl #4
 800ae04:	0800a982 	stmdaeq	r0, {r1, r7, r8, fp, sp, pc}
 800ae08:	00000203 	andeq	r0, r0, r3, lsl #4
 800ae0c:	0800a9a8 	stmdaeq	r0, {r3, r5, r7, r8, fp, sp, pc}
 800ae10:	00000204 	andeq	r0, r0, r4, lsl #4
 800ae14:	0800a9d1 	stmdaeq	r0, {r0, r4, r6, r7, r8, fp, sp, pc}
 800ae18:	00000205 	andeq	r0, r0, r5, lsl #4
 800ae1c:	0800a9f3 	stmdaeq	r0, {r0, r1, r4, r5, r6, r7, r8, fp, sp, pc}
 800ae20:	00000206 	andeq	r0, r0, r6, lsl #4
 800ae24:	0800aa0e 	stmdaeq	r0, {r1, r2, r3, r9, fp, sp, pc}
 800ae28:	00000207 	andeq	r0, r0, r7, lsl #4
 800ae2c:	0800aa2b 	stmdaeq	r0, {r0, r1, r3, r5, r9, fp, sp, pc}
 800ae30:	00000208 	andeq	r0, r0, r8, lsl #4
 800ae34:	0800aa47 	stmdaeq	r0, {r0, r1, r2, r6, r9, fp, sp, pc}
 800ae38:	00000211 	andeq	r0, r0, r1, lsl r2
 800ae3c:	0800aa64 	stmdaeq	r0, {r2, r5, r6, r9, fp, sp, pc}
 800ae40:	00000212 	andeq	r0, r0, r2, lsl r2
 800ae44:	0800aa81 	stmdaeq	r0, {r0, r7, r9, fp, sp, pc}
 800ae48:	00000213 	andeq	r0, r0, r3, lsl r2
 800ae4c:	0800aa9e 	stmdaeq	r0, {r1, r2, r3, r4, r7, r9, fp, sp, pc}
 800ae50:	00000214 	andeq	r0, r0, r4, lsl r2
 800ae54:	0800aac0 	stmdaeq	r0, {r6, r7, r9, fp, sp, pc}
 800ae58:	00000215 	andeq	r0, r0, r5, lsl r2
 800ae5c:	0800aae2 	stmdaeq	r0, {r1, r5, r6, r7, r9, fp, sp, pc}
 800ae60:	00000216 	andeq	r0, r0, r6, lsl r2
 800ae64:	0800aaff 	stmdaeq	r0, {r0, r1, r2, r3, r4, r5, r6, r7, r9, fp, sp, pc}
 800ae68:	00000217 	andeq	r0, r0, r7, lsl r2
 800ae6c:	0800ab03 	stmdaeq	r0, {r0, r1, r8, r9, fp, sp, pc}
 800ae70:	00000301 	andeq	r0, r0, r1, lsl #6
 800ae74:	0800ab0e 	stmdaeq	r0, {r1, r2, r3, r8, r9, fp, sp, pc}
 800ae78:	00000302 	andeq	r0, r0, r2, lsl #6
 800ae7c:	0800ab20 	stmdaeq	r0, {r5, r8, r9, fp, sp, pc}
 800ae80:	00000303 	andeq	r0, r0, r3, lsl #6
 800ae84:	0800ab34 	stmdaeq	r0, {r2, r4, r5, r8, r9, fp, sp, pc}
 800ae88:	00000304 	andeq	r0, r0, r4, lsl #6
 800ae8c:	0800ab40 	stmdaeq	r0, {r6, r8, r9, fp, sp, pc}
 800ae90:	00000401 	andeq	r0, r0, r1, lsl #8
 800ae94:	0800ab4e 	stmdaeq	r0, {r1, r2, r3, r6, r8, r9, fp, sp, pc}
 800ae98:	00000402 	andeq	r0, r0, r2, lsl #8
 800ae9c:	0800ab5d 	stmdaeq	r0, {r0, r2, r3, r4, r6, r8, r9, fp, sp, pc}
 800aea0:	00000403 	andeq	r0, r0, r3, lsl #8
 800aea4:	0800ab6d 	stmdaeq	r0, {r0, r2, r3, r5, r6, r8, r9, fp, sp, pc}
 800aea8:	00000404 	andeq	r0, r0, r4, lsl #8
 800aeac:	0800ab7d 	stmdaeq	r0, {r0, r2, r3, r4, r5, r6, r8, r9, fp, sp, pc}
 800aeb0:	00000405 	andeq	r0, r0, r5, lsl #8
 800aeb4:	0800ab8c 	stmdaeq	r0, {r2, r3, r7, r8, r9, fp, sp, pc}
 800aeb8:	00000406 	andeq	r0, r0, r6, lsl #8
 800aebc:	0800ab96 	stmdaeq	r0, {r1, r2, r4, r7, r8, r9, fp, sp, pc}
 800aec0:	00000407 	andeq	r0, r0, r7, lsl #8
 800aec4:	0800aba6 	stmdaeq	r0, {r1, r2, r5, r7, r8, r9, fp, sp, pc}
 800aec8:	00000408 	andeq	r0, r0, r8, lsl #8
 800aecc:	0800abbf 	stmdaeq	r0, {r0, r1, r2, r3, r4, r5, r7, r8, r9, fp, sp, pc}
 800aed0:	00000409 	andeq	r0, r0, r9, lsl #8
 800aed4:	0800abc6 	stmdaeq	r0, {r1, r2, r6, r7, r8, r9, fp, sp, pc}
 800aed8:	00000501 	andeq	r0, r0, r1, lsl #10
 800aedc:	0800abd0 	stmdaeq	r0, {r4, r6, r7, r8, r9, fp, sp, pc}
 800aee0:	00000502 	andeq	r0, r0, r2, lsl #10
 800aee4:	0800abe7 	stmdaeq	r0, {r0, r1, r2, r5, r6, r7, r8, r9, fp, sp, pc}
 800aee8:	00000504 	andeq	r0, r0, r4, lsl #10
 800aeec:	0800abff 	stmdaeq	r0, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, fp, sp, pc}
 800aef0:	00000505 	andeq	r0, r0, r5, lsl #10
 800aef4:	0800ac0d 	stmdaeq	r0, {r0, r2, r3, sl, fp, sp, pc}
 800aef8:	00000506 	andeq	r0, r0, r6, lsl #10
 800aefc:	0800ac24 	stmdaeq	r0, {r2, r5, sl, fp, sp, pc}
 800af00:	00000507 	andeq	r0, r0, r7, lsl #10
 800af04:	0800ac30 	stmdaeq	r0, {r4, r5, sl, fp, sp, pc}
 800af08:	00000508 	andeq	r0, r0, r8, lsl #10
 800af0c:	0800ac3f 	stmdaeq	r0, {r0, r1, r2, r3, r4, r5, sl, fp, sp, pc}
 800af10:	0000ffff 	strdeq	pc, [r0], -pc	; <UNPREDICTABLE>
 800af14:	0800a944 	stmdaeq	r0, {r2, r6, r8, fp, sp, pc}

0800af18 <RDMConst::MANUFACTURER_ID>:
 800af18:	 	strbtvc	r0, [r8], #-80	; 0xffffffb0

0800af1a <RDMConst::MANUFACTURER_NAME>:
 800af1a:	70747468 	rsbsvc	r7, r4, r8, ror #8
 800af1e:	772f2f3a 			; <UNDEFINED> instruction: 0x772f2f3a
 800af22:	6f2e7777 	svcvs	0x002e7777
 800af26:	676e6172 			; <UNDEFINED> instruction: 0x676e6172
 800af2a:	2d697065 	stclcs	0, cr7, [r9, #-404]!	; 0xfffffe6c
 800af2e:	2e786d64 	cdpcs	13, 7, cr6, cr8, cr4, {3}
 800af32:	0067726f 	rsbeq	r7, r7, pc, ror #4
 800af36:	204d4452 	subcs	r4, sp, r2, asr r4
 800af3a:	69766544 	ldmdbvs	r6!, {r2, r6, r8, sl, sp, lr}^
 800af3e:	63206563 			; <UNDEFINED> instruction: 0x63206563
 800af42:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
 800af46:	61727567 	cmnvs	r2, r7, ror #10
 800af4a:	6e6f6974 			; <UNDEFINED> instruction: 0x6e6f6974
 800af4e:	4d20000a 	stcmi	0, cr0, [r0, #-40]!	; 0xffffffd8
 800af52:	66756e61 	ldrbtvs	r6, [r5], -r1, ror #28
 800af56:	75746361 	ldrbvc	r6, [r4, #-865]!	; 0xfffffc9f
 800af5a:	20726572 	rsbscs	r6, r2, r2, ror r5
 800af5e:	656d614e 	strbvs	r6, [sp, #-334]!	; 0xfffffeb2
 800af62:	25203a20 	strcs	r3, [r0, #-2592]!	; 0xfffff5e0
 800af66:	0a732a2e 	beq	9cd5826 <_sidata+0x1cc96b6>
 800af6a:	614d2000 	mrsvs	r2, (UNDEF: 77)
 800af6e:	6166756e 	cmnvs	r6, lr, ror #10
 800af72:	72757463 	rsbsvc	r7, r5, #1660944384	; 0x63000000
 800af76:	49207265 	stmdbmi	r0!, {r0, r2, r5, r6, r9, ip, sp, lr}
 800af7a:	20202044 	eorcs	r2, r0, r4, asr #32
 800af7e:	2e25203a 	mcrcs	0, 1, r2, cr5, cr10, {1}
 800af82:	2e255832 	mcrcs	8, 1, r5, cr5, cr2, {1}
 800af86:	000a5832 	andeq	r5, sl, r2, lsr r8
 800af8a:	72655320 	rsbvc	r5, r5, #32, 6	; 0x80000000
 800af8e:	206c6169 	rsbcs	r6, ip, r9, ror #2
 800af92:	626d754e 	rsbvs	r7, sp, #327155712	; 0x13800000
 800af96:	20207265 	eorcs	r7, r0, r5, ror #4
 800af9a:	3a202020 	bcc	8813022 <_sidata+0x806eb2>
 800af9e:	322e2520 	eorcc	r2, lr, #32, 10	; 0x8000000
 800afa2:	322e2558 	eorcc	r2, lr, #88, 10	; 0x16000000
 800afa6:	322e2558 	eorcc	r2, lr, #88, 10	; 0x16000000
 800afaa:	322e2558 	eorcc	r2, lr, #88, 10	; 0x16000000
 800afae:	20000a58 	andcs	r0, r0, r8, asr sl
 800afb2:	746f6f52 	strbtvc	r6, [pc], #-3922	; 800afba <RDMConst::MANUFACTURER_NAME+0xa0>
 800afb6:	62616c20 	rsbvs	r6, r1, #32, 24	; 0x2000
 800afba:	20206c65 	eorcs	r6, r0, r5, ror #24
 800afbe:	20202020 	eorcs	r2, r0, r0, lsr #32
 800afc2:	203a2020 	eorscs	r2, sl, r0, lsr #32
 800afc6:	732a2e25 			; <UNDEFINED> instruction: 0x732a2e25
 800afca:	5020000a 	eorpl	r0, r0, sl
 800afce:	75646f72 	strbvc	r6, [r4, #-3954]!	; 0xfffff08e
 800afd2:	43207463 			; <UNDEFINED> instruction: 0x43207463
 800afd6:	67657461 	strbvs	r7, [r5, -r1, ror #8]!
 800afda:	2079726f 	rsbscs	r7, r9, pc, ror #4
 800afde:	25203a20 	strcs	r3, [r0, #-2592]!	; 0xfffff5e0
 800afe2:	2558322e 	ldrbcs	r3, [r8, #-558]	; 0xfffffdd2
 800afe6:	0a58322e 	beq	96178a6 <_sidata+0x160b736>
 800afea:	72502000 	subsvc	r2, r0, #0
 800afee:	6375646f 	cmnvs	r5, #1862270976	; 0x6f000000
 800aff2:	65442074 	strbvs	r2, [r4, #-116]	; 0xffffff8c
 800aff6:	6c696174 	stfvse	f6, [r9], #-464	; 0xfffffe30
 800affa:	20202020 	eorcs	r2, r0, r0, lsr #32
 800affe:	2e25203a 	mcrcs	0, 1, r2, cr5, cr10, {1}
 800b002:	2e255832 	mcrcs	8, 1, r5, cr5, cr2, {1}
 800b006:	000a5832 	andeq	r5, sl, r2, lsr r8

0800b00a <DEVICE_LABEL>:
 800b00a:	32334447 	eorscc	r4, r3, #1191182336	; 0x47000000
 800b00e:	33303346 	teqcc	r0, #402653185	; 0x18000001
 800b012:	52204352 	eorpl	r4, r0, #1207959553	; 0x48000001
 800b016:	44204d44 	strtmi	r4, [r0], #-3396	; 0xfffff2bc
 800b01a:	63697665 	cmnvs	r9, #105906176	; 0x6500000
 800b01e:	69500065 	ldmdbvs	r0, {r0, r2, r5, r6}^
 800b022:	206c6578 	rsbcs	r6, ip, r8, ror r5
 800b026:	20584d44 	subscs	r4, r8, r4, asr #26
 800b02a:	666e6f63 	strbtvs	r6, [lr], -r3, ror #30
 800b02e:	72756769 	rsbsvc	r6, r5, #27525120	; 0x1a40000
 800b032:	6f697461 	svcvs	0x00697461
 800b036:	20000a6e 	andcs	r0, r0, lr, ror #20
 800b03a:	7074754f 	rsbsvc	r7, r4, pc, asr #10
 800b03e:	20737475 	rsbscs	r7, r3, r5, ror r4
 800b042:	6425203a 	strtvs	r2, [r5], #-58	; 0xffffffc6
 800b046:	4720000a 	strmi	r0, [r0, -sl]!
 800b04a:	70756f72 	rsbsvc	r6, r5, r2, ror pc
 800b04e:	20676e69 	rsbcs	r6, r7, r9, ror #28
 800b052:	6e756f63 	cdpvs	15, 7, cr6, cr5, cr3, {3}
 800b056:	203a2074 	eorscs	r2, sl, r4, ror r0
 800b05a:	5b206425 	blpl	88240f6 <_sidata+0x817f86>
 800b05e:	756f7247 	strbvc	r7, [pc, #-583]!	; 800ae1f <s_tTableC2+0x47>
 800b062:	3a207370 	bcc	8827e2a <_sidata+0x81bcba>
 800b066:	5d642520 	cfstr64pl	mvdx2, [r4, #-128]!	; 0xffffff80
 800b06a:	 	andeq	r0, r0, sl

0800b06c <vtable for WS28xxDmx>:
	...
 800b074:	08005565 	stmdaeq	r0, {r0, r2, r5, r6, r8, sl, ip, lr}
 800b078:	08005d85 	stmdaeq	r0, {r0, r2, r7, r8, sl, fp, ip, lr}
 800b07c:	08005cc1 	stmdaeq	r0, {r0, r6, r7, sl, fp, ip, lr}
 800b080:	08005cdd 	stmdaeq	r0, {r0, r2, r3, r4, r6, r7, sl, fp, ip, lr}
 800b084:	080055b9 	stmdaeq	r0, {r0, r3, r4, r5, r7, r8, sl, ip, lr}
 800b088:	08005551 	stmdaeq	r0, {r0, r4, r6, r8, sl, ip, lr}
 800b08c:	08005585 	stmdaeq	r0, {r0, r2, r7, r8, sl, ip, lr}
 800b090:	08005591 	stmdaeq	r0, {r0, r4, r7, r8, sl, ip, lr}
 800b094:	08005ca1 	stmdaeq	r0, {r0, r5, r7, sl, fp, ip, lr}
 800b098:	08005cb9 	stmdaeq	r0, {r0, r3, r4, r5, r7, sl, fp, ip, lr}
 800b09c:	08005cf9 	stmdaeq	r0, {r0, r3, r4, r5, r6, r7, sl, fp, ip, lr}
 800b0a0:	08005555 	stmdaeq	r0, {r0, r2, r4, r6, r8, sl, ip, lr}
 800b0a4:	0800555d 	stmdaeq	r0, {r0, r2, r3, r4, r6, r8, sl, ip, lr}
 800b0a8:	08005d35 	stmdaeq	r0, {r0, r2, r4, r5, r8, sl, fp, ip, lr}

0800b0ac <vtable for PixelDmxParamsRdm>:
	...
 800b0b4:	08005f15 	stmdaeq	r0, {r0, r2, r4, r8, r9, sl, fp, ip, lr}
 800b0b8:	08005f17 	stmdaeq	r0, {r0, r1, r2, r4, r8, r9, sl, fp, ip, lr}
 800b0bc:	08005eff 	stmdaeq	r0, {r0, r1, r2, r3, r4, r5, r6, r7, r9, sl, fp, ip, lr}
 800b0c0:	08005eff 	stmdaeq	r0, {r0, r1, r2, r3, r4, r5, r6, r7, r9, sl, fp, ip, lr}
 800b0c4:	08005f39 	stmdaeq	r0, {r0, r3, r4, r5, r8, r9, sl, fp, ip, lr}
 800b0c8:	08005eef 	stmdaeq	r0, {r0, r1, r2, r3, r5, r6, r7, r9, sl, fp, ip, lr}
 800b0cc:	08005ef1 	stmdaeq	r0, {r0, r4, r5, r6, r7, r9, sl, fp, ip, lr}
 800b0d0:	08005ee9 	stmdaeq	r0, {r0, r3, r5, r6, r7, r9, sl, fp, ip, lr}
 800b0d4:	08005eeb 	stmdaeq	r0, {r0, r1, r3, r5, r6, r7, r9, sl, fp, ip, lr}
 800b0d8:	08005eed 	stmdaeq	r0, {r0, r2, r3, r5, r6, r7, r9, sl, fp, ip, lr}
 800b0dc:	08005ef3 	stmdaeq	r0, {r0, r1, r4, r5, r6, r7, r9, sl, fp, ip, lr}
 800b0e0:	08005ef7 	stmdaeq	r0, {r0, r1, r2, r4, r5, r6, r7, r9, sl, fp, ip, lr}
 800b0e4:	08005efb 	stmdaeq	r0, {r0, r1, r3, r4, r5, r6, r7, r9, sl, fp, ip, lr}
 800b0e8:	08005f01 	stmdaeq	r0, {r0, r8, r9, sl, fp, ip, lr}
 800b0ec:	00736559 	rsbseq	r6, r3, r9, asr r5
 800b0f0:	50006f4e 	andpl	r6, r0, lr, asr #30
 800b0f4:	6c657869 	stclvs	8, cr7, [r5], #-420	; 0xfffffe5c
 800b0f8:	6e6f6320 	cdpvs	3, 6, cr6, cr15, cr0, {1}
 800b0fc:	75676966 	strbvc	r6, [r7, #-2406]!	; 0xfffff69a
 800b100:	69746172 	ldmdbvs	r4!, {r1, r4, r5, r6, r8, sp, lr}^
 800b104:	000a6e6f 	andeq	r6, sl, pc, ror #28
 800b108:	70795420 	rsbsvc	r5, r9, r0, lsr #8
 800b10c:	20202065 	eorcs	r2, r0, r5, rrx
 800b110:	25203a20 	strcs	r3, [r0, #-2592]!	; 0xfffff5e0
 800b114:	255b2073 	ldrbcs	r2, [fp, #-115]	; 0xffffff8d
 800b118:	000a5d64 	andeq	r5, sl, r4, ror #26
 800b11c:	756f4320 	strbvc	r4, [pc, #-800]!	; 800ae04 <s_tTableC2+0x2c>
 800b120:	2020746e 	eorcs	r7, r0, lr, ror #8
 800b124:	25203a20 	strcs	r3, [r0, #-2592]!	; 0xfffff5e0
 800b128:	20000a64 	andcs	r0, r0, r4, ror #20
 800b12c:	7070614d 	rsbsvc	r6, r0, sp, asr #2
 800b130:	20676e69 	rsbcs	r6, r7, r9, ror #28
 800b134:	7325203a 			; <UNDEFINED> instruction: 0x7325203a
 800b138:	64255b20 	strtvs	r5, [r5], #-2848	; 0xfffff4e0
 800b13c:	20000a5d 	andcs	r0, r0, sp, asr sl
 800b140:	20483054 	subcs	r3, r8, r4, asr r0
 800b144:	20202020 	eorcs	r2, r0, r0, lsr #32
 800b148:	2e25203a 	mcrcs	0, 1, r2, cr5, cr10, {1}
 800b14c:	5b206632 	blpl	8824a1c <_sidata+0x8188ac>
 800b150:	58257830 	stmdapl	r5!, {r4, r5, fp, ip, sp, lr}
 800b154:	20000a5d 	andcs	r0, r0, sp, asr sl
 800b158:	20483154 	subcs	r3, r8, r4, asr r1
 800b15c:	20202020 	eorcs	r2, r0, r0, lsr #32
 800b160:	2e25203a 	mcrcs	0, 1, r2, cr5, cr10, {1}
 800b164:	5b206632 	blpl	8824a34 <_sidata+0x8188c4>
 800b168:	58257830 	stmdapl	r5!, {r4, r5, fp, ip, sp, lr}
 800b16c:	20000a5d 	andcs	r0, r0, sp, asr sl
 800b170:	626f6c47 	rsbvs	r6, pc, #18176	; 0x4700
 800b174:	72426c61 	subvc	r6, r2, #24832	; 0x6100
 800b178:	74686769 	strbtvc	r6, [r8], #-1897	; 0xfffff897
 800b17c:	7373656e 	cmnvc	r3, #461373440	; 0x1b800000
 800b180:	7525203a 	strvc	r2, [r5, #-58]!	; 0xffffffc6
 800b184:	4720000a 	strmi	r0, [r0, -sl]!
 800b188:	616d6d61 	cmnvs	sp, r1, ror #26
 800b18c:	726f6320 	rsbvc	r6, pc, #32, 6	; 0x80000000
 800b190:	74636572 	strbtvc	r6, [r3], #-1394	; 0xfffffa8e
 800b194:	206e6f69 	rsbcs	r6, lr, r9, ror #30
 800b198:	000a7325 	andeq	r7, sl, r5, lsr #6
 800b19c:	6f6c4320 	svcvs	0x006c4320
 800b1a0:	203a6b63 	eorscs	r6, sl, r3, ror #22
 800b1a4:	48207525 	stmdami	r0!, {r0, r2, r5, r8, sl, ip, sp, lr}
 800b1a8:	00000a7a 	andeq	r0, r0, sl, ror sl

0800b1ac <CSWTCH.9>:
 800b1ac:	0800b3c0 	stmdaeq	r0, {r6, r7, r8, r9, ip, sp, pc}
 800b1b0:	0800b4c0 	stmdaeq	r0, {r6, r7, sl, ip, sp, pc}
 800b1b4:	0800b5c0 	stmdaeq	r0, {r6, r7, r8, sl, ip, sp, pc}
 800b1b8:	0800b6c0 	stmdaeq	r0, {r6, r7, r9, sl, ip, sp, pc}
 800b1bc:	0800b7c0 	stmdaeq	r0, {r6, r7, r8, r9, sl, ip, sp, pc}

0800b1c0 <gamma10_0>:
 800b1c0:	03020100 	movweq	r0, #8448	; 0x2100
 800b1c4:	07060504 	streq	r0, [r6, -r4, lsl #10]
 800b1c8:	0b0a0908 	bleq	828d5f0 <_sidata+0x281480>
 800b1cc:	0f0e0d0c 	svceq	0x000e0d0c
 800b1d0:	13121110 	tstne	r2, #16, 2
 800b1d4:	17161514 			; <UNDEFINED> instruction: 0x17161514
 800b1d8:	1b1a1918 	blne	8691640 <_sidata+0x6854d0>
 800b1dc:	1f1e1d1c 	svcne	0x001e1d1c
 800b1e0:	23222120 			; <UNDEFINED> instruction: 0x23222120
 800b1e4:	27262524 	strcs	r2, [r6, -r4, lsr #10]!
 800b1e8:	2b2a2928 	blcs	8a95690 <_sidata+0xa89520>
 800b1ec:	2f2e2d2c 	svccs	0x002e2d2c
 800b1f0:	33323130 	teqcc	r2, #48, 2
 800b1f4:	37363534 			; <UNDEFINED> instruction: 0x37363534
 800b1f8:	3b3a3938 	blcc	8e996e0 <_sidata+0xe8d570>
 800b1fc:	3f3e3d3c 	svccc	0x003e3d3c
 800b200:	43424140 	movtmi	r4, #8512	; 0x2140
 800b204:	47464544 	strbmi	r4, [r6, -r4, asr #10]
 800b208:	4b4a4948 	blmi	929d730 <_sidata+0x12915c0>
 800b20c:	4f4e4d4c 	svcmi	0x004e4d4c
 800b210:	53525150 	cmppl	r2, #80, 2
 800b214:	57565554 			; <UNDEFINED> instruction: 0x57565554
 800b218:	5b5a5958 	blpl	96a1780 <_sidata+0x1695610>
 800b21c:	5f5e5d5c 	svcpl	0x005e5d5c
 800b220:	63626160 	cmnvs	r2, #96, 2
 800b224:	67666564 	strbvs	r6, [r6, -r4, ror #10]!
 800b228:	6b6a6968 	blvs	9aa57d0 <_sidata+0x1a99660>
 800b22c:	6f6e6d6c 	svcvs	0x006e6d6c
 800b230:	73727170 	cmnvc	r2, #112, 2
 800b234:	77767574 			; <UNDEFINED> instruction: 0x77767574
 800b238:	7b7a7978 	blvc	9ea9820 <_sidata+0x1e9d6b0>
 800b23c:	7f7e7d7c 	svcvc	0x007e7d7c
 800b240:	83828180 	orrhi	r8, r2, #128, 2
 800b244:	87868584 	strhi	r8, [r6, r4, lsl #11]
 800b248:	8b8a8988 	blhi	62ad870 <__heap_size+0x62ac870>
 800b24c:	8f8e8d8c 	svchi	0x008e8d8c
 800b250:	93929190 	orrsls	r9, r2, #144, 2	; 0x24
 800b254:	97969594 			; <UNDEFINED> instruction: 0x97969594
 800b258:	9b9a9998 	blls	66b18c0 <__heap_size+0x66b08c0>
 800b25c:	9f9e9d9c 	svcls	0x009e9d9c
 800b260:	a3a2a1a0 			; <UNDEFINED> instruction: 0xa3a2a1a0
 800b264:	a7a6a5a4 	strge	sl, [r6, r4, lsr #11]!
 800b268:	abaaa9a8 	blge	6ab5910 <__heap_size+0x6ab4910>
 800b26c:	afaeadac 	svcge	0x00aeadac
 800b270:	b3b2b1b0 			; <UNDEFINED> instruction: 0xb3b2b1b0
 800b274:	b7b6b5b4 			; <UNDEFINED> instruction: 0xb7b6b5b4
 800b278:	bbbab9b8 	bllt	6eb9960 <__heap_size+0x6eb8960>
 800b27c:	bfbebdbc 	svclt	0x00bebdbc
 800b280:	c3c2c1c0 	bicgt	ip, r2, #192, 2	; 0x30
 800b284:	c7c6c5c4 	strbgt	ip, [r6, r4, asr #11]
 800b288:	cbcac9c8 	blgt	72bd9b0 <__heap_size+0x72bc9b0>
 800b28c:	cfcecdcc 	svcgt	0x00cecdcc
 800b290:	d3d2d1d0 	bicsle	sp, r2, #208, 2	; 0x34
 800b294:	d7d6d5d4 			; <UNDEFINED> instruction: 0xd7d6d5d4
 800b298:	dbdad9d8 	blle	76c1a00 <__heap_size+0x76c0a00>
 800b29c:	dfdedddc 	svcle	0x00dedddc
 800b2a0:	e3e2e1e0 	mvn	lr, #224, 2	; 0x38
 800b2a4:	e7e6e5e4 	strb	lr, [r6, r4, ror #11]!
 800b2a8:	ebeae9e8 	bl	7ac5a50 <__heap_size+0x7ac4a50>
 800b2ac:	efeeedec 	svc	0x00eeedec
 800b2b0:	f3f2f1f0 	vsra.u64	<illegal reg q15.5>, q8, #14
 800b2b4:	f7f6f5f4 			; <UNDEFINED> instruction: 0xf7f6f5f4
 800b2b8:	fbfaf9f8 	blx	7ec9aa2 <__heap_size+0x7ec8aa2>
 800b2bc:	fffefdfc 			; <UNDEFINED> instruction: 0xfffefdfc

0800b2c0 <gamma20_0>:
	...
 800b2cc:	01010101 	tsteq	r1, r1, lsl #2
 800b2d0:	01010101 	tsteq	r1, r1, lsl #2
 800b2d4:	02020202 	andeq	r0, r2, #536870912	; 0x20000000
 800b2d8:	03030202 	movweq	r0, #12802	; 0x3202
 800b2dc:	04040303 	streq	r0, [r4], #-771	; 0xfffffcfd
 800b2e0:	05050404 	streq	r0, [r5, #-1028]	; 0xfffffbfc
 800b2e4:	06060505 	streq	r0, [r6], -r5, lsl #10
 800b2e8:	07070706 	streq	r0, [r7, -r6, lsl #14]
 800b2ec:	09080808 	stmdbeq	r8, {r3, fp}
 800b2f0:	0a0a0909 	beq	828d71c <_sidata+0x2815ac>
 800b2f4:	0c0b0b0b 			; <UNDEFINED> instruction: 0x0c0b0b0b
 800b2f8:	0e0d0d0c 	cdpeq	13, 0, cr0, cr13, cr12, {0}
 800b2fc:	100f0f0e 	andne	r0, pc, lr, lsl #30
 800b300:	12111110 	andsne	r1, r1, #16, 2
 800b304:	14131312 	ldrne	r1, [r3], #-786	; 0xfffffcee
 800b308:	16151514 			; <UNDEFINED> instruction: 0x16151514
 800b30c:	18181717 	ldmdane	r8, {r0, r1, r2, r4, r8, r9, sl, ip}
 800b310:	1b1a1a19 	blne	8691b7c <_sidata+0x685a0c>
 800b314:	1e1d1c1c 	mrcne	12, 0, r1, cr13, cr12, {0}
 800b318:	20201f1e 	eorcs	r1, r0, lr, lsl pc
 800b31c:	23232221 			; <UNDEFINED> instruction: 0x23232221
 800b320:	26262524 	strtcs	r2, [r6], -r4, lsr #10
 800b324:	2a292827 	bcs	8a553c8 <_sidata+0xa49258>
 800b328:	2d2c2b2a 	vstmdbcs	ip!, {d2-d22}
 800b32c:	302f2f2e 	eorcc	r2, pc, lr, lsr #30
 800b330:	34333231 	ldrtcc	r3, [r3], #-561	; 0xfffffdcf
 800b334:	38373635 	ldmdacc	r7!, {r0, r2, r4, r5, r9, sl, ip, sp}
 800b338:	3b3a3938 	blcc	8e99820 <_sidata+0xe8d6b0>
 800b33c:	3f3e3d3c 	svccc	0x003e3d3c
 800b340:	43424140 	movtmi	r4, #8512	; 0x2140
 800b344:	47464544 	strbmi	r4, [r6, -r4, asr #10]
 800b348:	4c4b4a49 	mcrrmi	10, 4, r4, fp, cr9
 800b34c:	504f4e4d 	subpl	r4, pc, sp, asr #28
 800b350:	55545251 	ldrbpl	r5, [r4, #-593]	; 0xfffffdaf
 800b354:	59585756 	ldmdbpl	r8, {r1, r2, r4, r6, r8, r9, sl, ip, lr}^
 800b358:	5e5d5c5b 	mrcpl	12, 2, r5, cr13, cr11, {2}
 800b35c:	6362615f 	cmnvs	r2, #-1073741801	; 0xc0000017
 800b360:	68676664 	stmdavs	r7!, {r2, r5, r6, r9, sl, sp, lr}^
 800b364:	6d6c6b69 	fstmdbxvs	ip!, {d22-d73}	;@ Deprecated
 800b368:	7371706f 	cmnvc	r1, #111	; 0x6f
 800b36c:	78777574 	ldmdavc	r7!, {r2, r4, r5, r6, r8, sl, ip, sp, lr}^
 800b370:	7e7c7b79 	vmovvc.s8	r7, d12[7]
 800b374:	8382807f 	orrhi	r8, r2, #127	; 0x7f
 800b378:	89888685 	stmibhi	r8, {r0, r2, r7, r9, sl, pc}
 800b37c:	8f8e8c8b 	svchi	0x008e8c8b
 800b380:	95949291 	ldrls	r9, [r4, #657]	; 0x291
 800b384:	9b9a9897 	blls	66b15e8 <__heap_size+0x66b05e8>
 800b388:	a2a09e9d 	adcge	r9, r0, #2512	; 0x9d0
 800b38c:	a8a6a5a3 	stmiage	r6!, {r0, r1, r5, r7, r8, sl, sp, pc}
 800b390:	afadabaa 	svcge	0x00adabaa
 800b394:	b5b4b2b0 	ldrlt	fp, [r4, #688]!	; 0x2b0
 800b398:	bcbab9b7 			; <UNDEFINED> instruction: 0xbcbab9b7
 800b39c:	c3c1c0be 	bicgt	ip, r1, #190	; 0xbe
 800b3a0:	cac8c7c5 	bgt	723d2bc <__heap_size+0x723c2bc>
 800b3a4:	d1cfcecc 	bicle	ip, pc, ip, asr #29
 800b3a8:	d9d7d5d3 	ldmible	r7, {r0, r1, r4, r6, r7, r8, sl, ip, lr, pc}^
 800b3ac:	e0dedcda 	ldrsb	sp, [lr], #202	; 0xca
 800b3b0:	e8e6e4e2 	stmia	r6!, {r1, r5, r6, r7, sl, sp, lr, pc}^
 800b3b4:	efedebe9 	svc	0x00edebe9
 800b3b8:	f7f5f3f1 			; <UNDEFINED> instruction: 0xf7f5f3f1
 800b3bc:	fffdfbf9 			; <UNDEFINED> instruction: 0xfffdfbf9

0800b3c0 <gamma21_0>:
	...
 800b3cc:	01010000 	mrseq	r0, (UNDEF: 1)
 800b3d0:	01010101 	tsteq	r1, r1, lsl #2
 800b3d4:	02010101 	andeq	r0, r1, #1073741824	; 0x40000000
 800b3d8:	02020202 	andeq	r0, r2, #536870912	; 0x20000000
 800b3dc:	03030302 	movweq	r0, #13058	; 0x3302
 800b3e0:	04040303 	streq	r0, [r4], #-771	; 0xfffffcfd
 800b3e4:	05050404 	streq	r0, [r5, #-1028]	; 0xfffffbfc
 800b3e8:	06060505 	streq	r0, [r6], -r5, lsl #10
 800b3ec:	07070706 	streq	r0, [r7, -r6, lsl #14]
 800b3f0:	09080808 	stmdbeq	r8, {r3, fp}
 800b3f4:	0a0a0909 	beq	828d820 <_sidata+0x2816b0>
 800b3f8:	0c0b0b0b 			; <UNDEFINED> instruction: 0x0c0b0b0b
 800b3fc:	0e0d0d0c 	cdpeq	13, 0, cr0, cr13, cr12, {0}
 800b400:	0f0f0e0e 	svceq	0x000f0e0e
 800b404:	11111010 	tstne	r1, r0, lsl r0
 800b408:	14131212 	ldrne	r1, [r3], #-530	; 0xfffffdee
 800b40c:	16151514 			; <UNDEFINED> instruction: 0x16151514
 800b410:	18181716 	ldmdane	r8, {r1, r2, r4, r8, r9, sl, ip}
 800b414:	1b1a1919 	blne	8691880 <_sidata+0x685710>
 800b418:	1d1d1c1b 	ldcne	12, cr1, [sp, #-108]	; 0xffffff94
 800b41c:	201f1f1e 	andscs	r1, pc, lr, lsl pc	; <UNPREDICTABLE>
 800b420:	23222121 			; <UNDEFINED> instruction: 0x23222121
 800b424:	26252424 	strtcs	r2, [r5], -r4, lsr #8
 800b428:	29282827 	stmdbcs	r8!, {r0, r1, r2, r5, fp, sp}
 800b42c:	2c2c2b2a 			; <UNDEFINED> instruction: 0x2c2c2b2a
 800b430:	302f2e2d 	eorcc	r2, pc, sp, lsr #28
 800b434:	33333231 	teqcc	r3, #268435459	; 0x10000003
 800b438:	37363534 			; <UNDEFINED> instruction: 0x37363534
 800b43c:	3b3a3938 	blcc	8e99924 <_sidata+0xe8d7b4>
 800b440:	3f3e3d3c 	svccc	0x003e3d3c
 800b444:	43424140 	movtmi	r4, #8512	; 0x2140
 800b448:	47464544 	strbmi	r4, [r6, -r4, asr #10]
 800b44c:	4c4b4948 	mcrrmi	9, 4, r4, fp, cr8	; <UNPREDICTABLE>
 800b450:	504f4e4d 	subpl	r4, pc, sp, asr #28
 800b454:	55545351 	ldrbpl	r5, [r4, #-849]	; 0xfffffcaf
 800b458:	5a585756 	bpl	96211b8 <_sidata+0x1615048>
 800b45c:	5f5d5c5b 	svcpl	0x005d5c5b
 800b460:	64626160 	strbtvs	r6, [r2], #-352	; 0xfffffea0
 800b464:	69686665 	stmdbvs	r8!, {r0, r2, r5, r6, r9, sl, sp, lr}^
 800b468:	6e6d6b6a 	vnmulvs.f64	d22, d13, d26
 800b46c:	74727170 	ldrbtvc	r7, [r2], #-368	; 0xfffffe90
 800b470:	79787675 	ldmdbvc	r8!, {r0, r2, r4, r5, r6, r9, sl, ip, sp, lr}^
 800b474:	7f7e7c7b 	svcvc	0x007e7c7b
 800b478:	85838281 	strhi	r8, [r3, #641]	; 0x281
 800b47c:	8b898886 	blhi	626d69c <__heap_size+0x626c69c>
 800b480:	91908e8d 	orrsls	r8, r0, sp, lsl #29
 800b484:	97969493 			; <UNDEFINED> instruction: 0x97969493
 800b488:	9e9c9b99 	vmovls.32	r9, d28[0]
 800b48c:	a5a3a1a0 	strge	sl, [r3, #416]!	; 0x1a0
 800b490:	abaaa8a6 	blge	6ab5730 <__heap_size+0x6ab4730>
 800b494:	b2b0afad 	adcslt	sl, r0, #692	; 0x2b4
 800b498:	b9b7b6b4 	ldmiblt	r7!, {r2, r4, r5, r7, r9, sl, ip, sp, pc}
 800b49c:	c0bfbdbb 	ldrhtgt	fp, [pc], fp
 800b4a0:	c8c6c4c2 	stmiagt	r6, {r1, r6, r7, sl, lr, pc}^
 800b4a4:	cfcdcbca 	svcgt	0x00cdcbca
 800b4a8:	d7d5d3d1 			; <UNDEFINED> instruction: 0xd7d5d3d1
 800b4ac:	dfdddbd9 	svcle	0x00dddbd9
 800b4b0:	e6e4e2e1 	strbt	lr, [r4], r1, ror #5
 800b4b4:	eeeceae8 	vfms.f32	s29, s25, s17
 800b4b8:	f7f5f3f1 			; <UNDEFINED> instruction: 0xf7f5f3f1
 800b4bc:	fffdfbf9 			; <UNDEFINED> instruction: 0xfffdfbf9

0800b4c0 <gamma22_0>:
	...
 800b4cc:	01000000 	mrseq	r0, (UNDEF: 0)
 800b4d0:	01010101 	tsteq	r1, r1, lsl #2
 800b4d4:	01010101 	tsteq	r1, r1, lsl #2
 800b4d8:	02020201 	andeq	r0, r2, #268435456	; 0x10000000
 800b4dc:	02020202 	andeq	r0, r2, #536870912	; 0x20000000
 800b4e0:	03030303 	movweq	r0, #13059	; 0x3303
 800b4e4:	04040403 	streq	r0, [r4], #-1027	; 0xfffffbfd
 800b4e8:	05050504 	streq	r0, [r5, #-1284]	; 0xfffffafc
 800b4ec:	06060605 	streq	r0, [r6], -r5, lsl #12
 800b4f0:	07070706 	streq	r0, [r7, -r6, lsl #14]
 800b4f4:	09080808 	stmdbeq	r8, {r3, fp}
 800b4f8:	0a0a0909 	beq	828d924 <_sidata+0x2817b4>
 800b4fc:	0c0b0b0b 			; <UNDEFINED> instruction: 0x0c0b0b0b
 800b500:	0d0d0d0c 	stceq	13, cr0, [sp, #-48]	; 0xffffffd0
 800b504:	0f0f0e0e 	svceq	0x000f0e0e
 800b508:	11111010 	tstne	r1, r0, lsl r0
 800b50c:	13131212 	tstne	r3, #536870913	; 0x20000001
 800b510:	16151414 			; <UNDEFINED> instruction: 0x16151414
 800b514:	18171716 	ldmdane	r7, {r1, r2, r4, r8, r9, sl, ip}
 800b518:	1a1a1919 	bne	8691984 <_sidata+0x685814>
 800b51c:	1d1c1c1b 	ldcne	12, cr1, [ip, #-108]	; 0xffffff94
 800b520:	201f1e1e 	andscs	r1, pc, lr, lsl lr	; <UNPREDICTABLE>
 800b524:	23222121 			; <UNDEFINED> instruction: 0x23222121
 800b528:	26252423 	strtcs	r2, [r5], -r3, lsr #8
 800b52c:	29282727 	stmdbcs	r8!, {r0, r1, r2, r5, r8, r9, sl, sp}
 800b530:	2c2b2b2a 			; <UNDEFINED> instruction: 0x2c2b2b2a
 800b534:	302f2e2d 	eorcc	r2, pc, sp, lsr #28
 800b538:	33323131 	teqcc	r2, #1073741836	; 0x4000000c
 800b53c:	37363534 			; <UNDEFINED> instruction: 0x37363534
 800b540:	3b3a3938 	blcc	8e99a28 <_sidata+0xe8d8b8>
 800b544:	3f3e3d3c 	svccc	0x003e3d3c
 800b548:	43424140 	movtmi	r4, #8512	; 0x2140
 800b54c:	47464544 	strbmi	r4, [r6, -r4, asr #10]
 800b550:	4c4b4a49 	mcrrmi	10, 4, r4, fp, cr9
 800b554:	514f4e4d 	cmppl	pc, sp, asr #28
 800b558:	55545352 	ldrbpl	r5, [r4, #-850]	; 0xfffffcae
 800b55c:	5a595857 	bpl	96616c0 <_sidata+0x1655550>
 800b560:	5f5e5d5b 	svcpl	0x005e5d5b
 800b564:	64636261 	strbtvs	r6, [r3], #-609	; 0xfffffd9f
 800b568:	6a696766 	bvs	9a65308 <_sidata+0x1a59198>
 800b56c:	6f6e6d6b 	svcvs	0x006e6d6b
 800b570:	75747271 	ldrbvc	r7, [r4, #-625]!	; 0xfffffd8f
 800b574:	7b797877 	blvc	9e69758 <_sidata+0x1e5d5e8>
 800b578:	817f7e7c 	cmnhi	pc, ip, ror lr	; <UNPREDICTABLE>
 800b57c:	87858482 	strhi	r8, [r5, r2, lsl #9]
 800b580:	8d8c8a89 	vstrhi	s16, [ip, #548]	; 0x224
 800b584:	9492918f 	ldrls	r9, [r2], #399	; 0x18f
 800b588:	9a999795 	bls	66713e4 <__heap_size+0x66703e4>
 800b58c:	a19f9e9c 			; <UNDEFINED> instruction: 0xa19f9e9c
 800b590:	a8a6a5a3 	stmiage	r6!, {r0, r1, r5, r7, r8, sl, sp, pc}
 800b594:	afadacaa 	svcge	0x00adacaa
 800b598:	b6b5b3b1 			; <UNDEFINED> instruction: 0xb6b5b3b1
 800b59c:	bebcbab8 			; <UNDEFINED> instruction: 0xbebcbab8
 800b5a0:	c5c4c2c0 	strbgt	ip, [r4, #704]	; 0x2c0
 800b5a4:	cdcbc9c7 	vstrgt.16	s25, [fp, #398]	; 0x18e	; <UNPREDICTABLE>
 800b5a8:	d5d3d1cf 	ldrble	sp, [r3, #463]	; 0x1cf
 800b5ac:	dddbd9d7 	vldrle.16	s27, [fp, #430]	; 0x1ae	; <UNPREDICTABLE>
 800b5b0:	e5e3e1df 	strb	lr, [r3, #479]!	; 0x1df
 800b5b4:	eeeceae7 	vfms.f32	s29, s25, s15
 800b5b8:	f6f4f2f0 			; <UNDEFINED> instruction: 0xf6f4f2f0
 800b5bc:	fffdfbf8 			; <UNDEFINED> instruction: 0xfffdfbf8

0800b5c0 <gamma23_0>:
	...
 800b5d0:	01010100 	mrseq	r0, (UNDEF: 17)
 800b5d4:	01010101 	tsteq	r1, r1, lsl #2
 800b5d8:	01010101 	tsteq	r1, r1, lsl #2
 800b5dc:	02020202 	andeq	r0, r2, #536870912	; 0x20000000
 800b5e0:	03020202 	movweq	r0, #8706	; 0x2202
 800b5e4:	03030303 	movweq	r0, #13059	; 0x3303
 800b5e8:	04040404 	streq	r0, [r4], #-1028	; 0xfffffbfc
 800b5ec:	05050504 	streq	r0, [r5, #-1284]	; 0xfffffafc
 800b5f0:	06060605 	streq	r0, [r6], -r5, lsl #12
 800b5f4:	07070707 	streq	r0, [r7, -r7, lsl #14]
 800b5f8:	09080808 	stmdbeq	r8, {r3, fp}
 800b5fc:	0a0a0a09 	beq	828de28 <_sidata+0x281cb8>
 800b600:	0c0b0b0b 			; <UNDEFINED> instruction: 0x0c0b0b0b
 800b604:	0d0d0d0c 	stceq	13, cr0, [sp, #-48]	; 0xffffffd0
 800b608:	0f0f0e0e 	svceq	0x000f0e0e
 800b60c:	11111010 	tstne	r1, r0, lsl r0
 800b610:	13131212 	tstne	r3, #536870913	; 0x20000001
 800b614:	15151414 	ldrne	r1, [r5, #-1044]	; 0xfffffbec
 800b618:	18171716 	ldmdane	r7, {r1, r2, r4, r8, r9, sl, ip}
 800b61c:	1a1a1918 	bne	8691a84 <_sidata+0x685914>
 800b620:	1d1c1c1b 	ldcne	12, cr1, [ip, #-108]	; 0xffffff94
 800b624:	201f1e1e 	andscs	r1, pc, lr, lsl lr	; <UNPREDICTABLE>
 800b628:	23222120 			; <UNDEFINED> instruction: 0x23222120
 800b62c:	26252423 	strtcs	r2, [r5], -r3, lsr #8
 800b630:	29282726 	stmdbcs	r8!, {r1, r2, r5, r8, r9, sl, sp}
 800b634:	2c2b2a2a 			; <UNDEFINED> instruction: 0x2c2b2a2a
 800b638:	302f2e2d 	eorcc	r2, pc, sp, lsr #28
 800b63c:	33323131 	teqcc	r2, #1073741836	; 0x4000000c
 800b640:	37363534 			; <UNDEFINED> instruction: 0x37363534
 800b644:	3b3a3938 	blcc	8e99b2c <_sidata+0xe8d9bc>
 800b648:	3f3e3d3c 	svccc	0x003e3d3c
 800b64c:	43424140 	movtmi	r4, #8512	; 0x2140
 800b650:	48474645 	stmdami	r7, {r0, r2, r6, r9, sl, lr}^
 800b654:	4c4b4a49 	mcrrmi	10, 4, r4, fp, cr9
 800b658:	51504f4e 	cmppl	r0, lr, asr #30
 800b65c:	56555452 			; <UNDEFINED> instruction: 0x56555452
 800b660:	5b5a5957 	blpl	96a1bc4 <_sidata+0x1695a54>
 800b664:	605f5e5c 	subsvs	r5, pc, ip, asr lr	; <UNPREDICTABLE>
 800b668:	66646362 	strbtvs	r6, [r4], -r2, ror #6
 800b66c:	6b6a6867 	blvs	9aa5810 <_sidata+0x1a996a0>
 800b670:	71706e6d 	cmnvc	r0, sp, ror #28
 800b674:	77757472 			; <UNDEFINED> instruction: 0x77757472
 800b678:	7d7b7a78 	vldmdbvc	fp!, {s15-s134}
 800b67c:	8382807e 	orrhi	r8, r2, #126	; 0x7e
 800b680:	8a888685 	bhi	622d09c <__heap_size+0x622c09c>
 800b684:	908f8d8b 	addls	r8, pc, fp, lsl #27
 800b688:	97959492 			; <UNDEFINED> instruction: 0x97959492
 800b68c:	9e9c9a99 			; <UNDEFINED> instruction: 0x9e9c9a99
 800b690:	a5a3a1a0 	strge	sl, [r3, #416]!	; 0x1a0
 800b694:	acaaa9a7 			; <UNDEFINED> instruction: 0xacaaa9a7
 800b698:	b4b2b0ae 	ldrtlt	fp, [r2], #174	; 0xae
 800b69c:	bbb9b7b6 	bllt	6e7957c <__heap_size+0x6e7857c>
 800b6a0:	c3c1bfbd 	bicgt	fp, r1, #756	; 0x2f4
 800b6a4:	cbc9c7c5 	blgt	727d5c0 <__heap_size+0x727c5c0>
 800b6a8:	d3d1cfcd 	bicsle	ip, r1, #820	; 0x334
 800b6ac:	dcdad7d5 	ldclle	7, cr13, [sl], {213}	; 0xd5
 800b6b0:	e4e2e0de 	strbt	lr, [r2], #222	; 0xde
 800b6b4:	edebe9e6 			; <UNDEFINED> instruction: 0xedebe9e6
 800b6b8:	f6f4f1ef 			; <UNDEFINED> instruction: 0xf6f4f1ef
 800b6bc:	fffdfaf8 			; <UNDEFINED> instruction: 0xfffdfaf8

0800b6c0 <gamma24_0>:
	...
 800b6d0:	01000000 	mrseq	r0, (UNDEF: 0)
 800b6d4:	01010101 	tsteq	r1, r1, lsl #2
 800b6d8:	01010101 	tsteq	r1, r1, lsl #2
 800b6dc:	02010101 	andeq	r0, r1, #1073741824	; 0x40000000
 800b6e0:	02020202 	andeq	r0, r2, #536870912	; 0x20000000
 800b6e4:	03030202 	movweq	r0, #12802	; 0x3202
 800b6e8:	04030303 	streq	r0, [r3], #-771	; 0xfffffcfd
 800b6ec:	04040404 	streq	r0, [r4], #-1028	; 0xfffffbfc
 800b6f0:	05050505 	streq	r0, [r5, #-1285]	; 0xfffffafb
 800b6f4:	06060606 	streq	r0, [r6], -r6, lsl #12
 800b6f8:	08070707 	stmdaeq	r7, {r0, r1, r2, r8, r9, sl}
 800b6fc:	09090808 	stmdbeq	r9, {r3, fp}
 800b700:	0a0a0a09 	beq	828df2c <_sidata+0x281dbc>
 800b704:	0c0b0b0b 			; <UNDEFINED> instruction: 0x0c0b0b0b
 800b708:	0e0d0d0c 	cdpeq	13, 0, cr0, cr13, cr12, {0}
 800b70c:	0f0f0e0e 	svceq	0x000f0e0e
 800b710:	11111010 	tstne	r1, r0, lsl r0
 800b714:	13131212 	tstne	r3, #536870913	; 0x20000001
 800b718:	16151414 			; <UNDEFINED> instruction: 0x16151414
 800b71c:	18171716 	ldmdane	r7, {r1, r2, r4, r8, r9, sl, ip}
 800b720:	1a1a1918 	bne	8691b88 <_sidata+0x685a18>
 800b724:	1d1c1c1b 	ldcne	12, cr1, [ip, #-108]	; 0xffffff94
 800b728:	201f1e1e 	andscs	r1, pc, lr, lsl lr	; <UNPREDICTABLE>
 800b72c:	23222120 			; <UNDEFINED> instruction: 0x23222120
 800b730:	26252423 	strtcs	r2, [r5], -r3, lsr #8
 800b734:	29282727 	stmdbcs	r8!, {r0, r1, r2, r5, r8, r9, sl, sp}
 800b738:	2c2b2b2a 			; <UNDEFINED> instruction: 0x2c2b2b2a
 800b73c:	302f2e2d 	eorcc	r2, pc, sp, lsr #28
 800b740:	34333231 	ldrtcc	r3, [r3], #-561	; 0xfffffdcf
 800b744:	37363535 			; <UNDEFINED> instruction: 0x37363535
 800b748:	3b3a3938 	blcc	8e99c30 <_sidata+0xe8dac0>
 800b74c:	403f3e3c 	eorsmi	r3, pc, ip, lsr lr	; <UNPREDICTABLE>
 800b750:	44434241 	strbmi	r4, [r3], #-577	; 0xfffffdbf
 800b754:	49474645 	stmdbmi	r7, {r0, r2, r6, r9, sl, lr}^
 800b758:	4d4c4b4a 	vstrmi	d20, [ip, #-296]	; 0xfffffed8
 800b75c:	5251504e 	subspl	r5, r1, #78	; 0x4e
 800b760:	57565553 			; <UNDEFINED> instruction: 0x57565553
 800b764:	5c5b5a58 	mrrcpl	10, 5, r5, fp, cr8
 800b768:	62605f5e 	rsbvs	r5, r0, #376	; 0x178
 800b76c:	67666463 	strbvs	r6, [r6, -r3, ror #8]!
 800b770:	6d6c6a69 	vstmdbvs	ip!, {s13-s117}
 800b774:	7372706f 	cmnvc	r2, #111	; 0x6f
 800b778:	79787675 	ldmdbvc	r8!, {r0, r2, r4, r5, r6, r9, sl, ip, sp, lr}^
 800b77c:	7f7e7c7b 	svcvc	0x007e7c7b
 800b780:	86848381 	strhi	r8, [r4], r1, lsl #7
 800b784:	8d8b8988 	vstrhi.16	s16, [fp, #272]	; 0x110	; <UNPREDICTABLE>
 800b788:	9492908e 	ldrls	r9, [r2], #142	; 0x8e
 800b78c:	9b999795 	blls	66715e8 <__heap_size+0x66705e8>
 800b790:	a2a09e9c 	adcge	r9, r0, #156, 28	; 0x9c0
 800b794:	a9a7a6a4 	stmibge	r7!, {r2, r5, r7, r9, sl, sp, pc}
 800b798:	b1afadab 			; <UNDEFINED> instruction: 0xb1afadab
 800b79c:	b9b7b5b3 	ldmiblt	r7!, {r0, r1, r4, r5, r7, r8, sl, ip, sp, pc}
 800b7a0:	c1bfbdbb 			; <UNDEFINED> instruction: 0xc1bfbdbb
 800b7a4:	c9c7c5c3 	stmibgt	r7, {r0, r1, r6, r7, r8, sl, lr, pc}^
 800b7a8:	d2cfcdcb 	sbcle	ip, pc, #12992	; 0x32c0
 800b7ac:	dad8d6d4 	ble	7641304 <__heap_size+0x7640304>
 800b7b0:	e3e1dfdc 	mvn	sp, #220, 30	; 0x370
 800b7b4:	eceae8e5 	stcl	8, cr14, [sl], #916	; 0x394
 800b7b8:	f6f3f1ef 			; <UNDEFINED> instruction: 0xf6f3f1ef
 800b7bc:	fffdfaf8 			; <UNDEFINED> instruction: 0xfffdfaf8

0800b7c0 <gamma25_0>:
	...
 800b7d4:	01010000 	mrseq	r0, (UNDEF: 1)
 800b7d8:	01010101 	tsteq	r1, r1, lsl #2
 800b7dc:	01010101 	tsteq	r1, r1, lsl #2
 800b7e0:	02020201 	andeq	r0, r2, #268435456	; 0x10000000
 800b7e4:	02020202 	andeq	r0, r2, #536870912	; 0x20000000
 800b7e8:	03030302 	movweq	r0, #13058	; 0x3302
 800b7ec:	04040303 	streq	r0, [r4], #-771	; 0xfffffcfd
 800b7f0:	05040404 	streq	r0, [r4, #-1028]	; 0xfffffbfc
 800b7f4:	06050505 	streq	r0, [r5], -r5, lsl #10
 800b7f8:	07060606 	streq	r0, [r6, -r6, lsl #12]
 800b7fc:	08070707 	stmdaeq	r7, {r0, r1, r2, r8, r9, sl}
 800b800:	09090808 	stmdbeq	r9, {r3, fp}
 800b804:	0a0a0a09 	beq	828e030 <_sidata+0x281ec0>
 800b808:	0c0c0b0b 			; <UNDEFINED> instruction: 0x0c0c0b0b
 800b80c:	0e0d0d0c 	cdpeq	13, 0, cr0, cr13, cr12, {0}
 800b810:	0f0f0f0e 	svceq	0x000f0f0e
 800b814:	11111010 	tstne	r1, r0, lsl r0
 800b818:	13131212 	tstne	r3, #536870913	; 0x20000001
 800b81c:	16151414 			; <UNDEFINED> instruction: 0x16151414
 800b820:	18171716 	ldmdane	r7, {r1, r2, r4, r8, r9, sl, ip}
 800b824:	1a1a1919 	bne	8691c90 <_sidata+0x685b20>
 800b828:	1d1c1c1b 	ldcne	12, cr1, [ip, #-108]	; 0xffffff94
 800b82c:	201f1e1e 	andscs	r1, pc, lr, lsl lr	; <UNPREDICTABLE>
 800b830:	23222121 			; <UNDEFINED> instruction: 0x23222121
 800b834:	26252424 	strtcs	r2, [r5], -r4, lsr #8
 800b838:	29282827 	stmdbcs	r8!, {r0, r1, r2, r5, fp, sp}
 800b83c:	2d2c2b2a 	vstmdbcs	ip!, {d2-d22}
 800b840:	302f2e2e 	eorcc	r2, pc, lr, lsr #28
 800b844:	34333231 	ldrtcc	r3, [r3], #-561	; 0xfffffdcf
 800b848:	38373635 	ldmdacc	r7!, {r0, r2, r4, r5, r9, sl, ip, sp}
 800b84c:	3c3b3a39 			; <UNDEFINED> instruction: 0x3c3b3a39
 800b850:	403f3e3d 	eorsmi	r3, pc, sp, lsr lr	; <UNPREDICTABLE>
 800b854:	45444341 	strbmi	r4, [r4, #-833]	; 0xfffffcbf
 800b858:	49484746 	stmdbmi	r8, {r1, r2, r6, r8, r9, sl, lr}^
 800b85c:	4e4d4c4b 	cdpmi	12, 4, cr4, cr13, cr11, {2}
 800b860:	53525150 	cmppl	r2, #80, 2
 800b864:	59575655 	ldmdbpl	r7, {r0, r2, r4, r6, r9, sl, ip, lr}^
 800b868:	5e5d5b5a 	vmovpl.s8	r5, d13[2]
 800b86c:	6362615f 	cmnvs	r2, #-1073741801	; 0xc0000017
 800b870:	69686665 	stmdbvs	r8!, {r0, r2, r5, r6, r9, sl, sp, lr}^
 800b874:	6f6e6c6b 	svcvs	0x006e6c6b
 800b878:	75747271 	ldrbvc	r7, [r4, #-625]!	; 0xfffffd8f
 800b87c:	7c7a7977 			; <UNDEFINED> instruction: 0x7c7a7977
 800b880:	82817f7d 	addhi	r7, r1, #500	; 0x1f4
 800b884:	89878684 	stmibhi	r7, {r2, r7, r9, sl, pc}
 800b888:	908e8d8b 	addls	r8, lr, fp, lsl #27
 800b88c:	97969492 			; <UNDEFINED> instruction: 0x97969492
 800b890:	9f9d9b99 	svcls	0x009d9b99
 800b894:	a6a5a3a1 	strtge	sl, [r5], r1, lsr #7
 800b898:	aeacaaa8 	vfmage.f32	s20, s25, s17
 800b89c:	b6b4b2b0 			; <UNDEFINED> instruction: 0xb6b4b2b0
 800b8a0:	bfbdbab8 	svclt	0x00bdbab8
 800b8a4:	c7c5c3c1 	strbgt	ip, [r5, r1, asr #7]
 800b8a8:	d0ceccc9 	sbcle	ip, lr, r9, asr #25
 800b8ac:	d9d7d4d2 	ldmible	r7, {r1, r4, r6, r7, sl, ip, lr, pc}^
 800b8b0:	e2e0dddb 	rsc	sp, r0, #14016	; 0x36c0
 800b8b4:	ebe9e7e4 	bl	7a8584c <__heap_size+0x7a8484c>
 800b8b8:	f5f3f0ee 			; <UNDEFINED> instruction: 0xf5f3f0ee
 800b8bc:	fffdfaf8 			; <UNDEFINED> instruction: 0xfffdfaf8

0800b8c0 <gamma25_5>:
 800b8c0:	01010100 	mrseq	r0, (UNDEF: 17)
 800b8c4:	01010101 	tsteq	r1, r1, lsl #2
 800b8c8:	01010101 	tsteq	r1, r1, lsl #2
 800b8cc:	01010101 	tsteq	r1, r1, lsl #2
 800b8d0:	01010101 	tsteq	r1, r1, lsl #2
 800b8d4:	01010101 	tsteq	r1, r1, lsl #2
 800b8d8:	01010101 	tsteq	r1, r1, lsl #2
 800b8dc:	02020202 	andeq	r0, r2, #536870912	; 0x20000000
 800b8e0:	02020202 	andeq	r0, r2, #536870912	; 0x20000000
 800b8e4:	03030302 	movweq	r0, #13058	; 0x3302
 800b8e8:	03030303 	movweq	r0, #13059	; 0x3303
 800b8ec:	04040404 	streq	r0, [r4], #-1028	; 0xfffffbfc
 800b8f0:	05050504 	streq	r0, [r5, #-1284]	; 0xfffffafc
 800b8f4:	06060605 	streq	r0, [r6], -r5, lsl #12
 800b8f8:	07070706 	streq	r0, [r7, -r6, lsl #14]
 800b8fc:	08080807 	stmdaeq	r8, {r0, r1, r2, fp}
 800b900:	0a090909 	beq	824dd2c <_sidata+0x241bbc>
 800b904:	0b0b0a0a 	bleq	82ce134 <_sidata+0x2c1fc4>
 800b908:	0c0c0c0b 	stceq	12, cr0, [ip], {11}
 800b90c:	0e0e0d0d 	cdpeq	13, 0, cr0, cr14, cr13, {0}
 800b910:	100f0f0f 	andne	r0, pc, pc, lsl #30
 800b914:	12111110 	andsne	r1, r1, #16, 2
 800b918:	14131312 	ldrne	r1, [r3], #-786	; 0xfffffcee
 800b91c:	16161514 			; <UNDEFINED> instruction: 0x16161514
 800b920:	18181717 	ldmdane	r8, {r0, r1, r2, r4, r8, r9, sl, ip}
 800b924:	1b1a1a19 	blne	8692190 <_sidata+0x686020>
 800b928:	1e1d1c1c 	mrcne	12, 0, r1, cr13, cr12, {0}
 800b92c:	20201f1e 	eorcs	r1, r0, lr, lsl pc
 800b930:	23232221 			; <UNDEFINED> instruction: 0x23232221
 800b934:	26262524 	strtcs	r2, [r6], -r4, lsr #10
 800b938:	2a292827 	bcs	8a559dc <_sidata+0xa4986c>
 800b93c:	2d2c2b2b 	fstmdbxcs	ip!, {d2-d22}	;@ Deprecated
 800b940:	31302f2e 	teqcc	r0, lr, lsr #30
 800b944:	35343332 	ldrcc	r3, [r4, #-818]!	; 0xfffffcce
 800b948:	38373635 	ldmdacc	r7!, {r0, r2, r4, r5, r9, sl, ip, sp}
 800b94c:	3d3c3a39 	vldmdbcc	ip!, {s6-s62}
 800b950:	41403f3e 	cmpmi	r0, lr, lsr pc
 800b954:	45444342 	strbmi	r4, [r4, #-834]	; 0xfffffcbe
 800b958:	4a494846 	bmi	925da78 <_sidata+0x1251908>
 800b95c:	4f4e4c4b 	svcmi	0x004e4c4b
 800b960:	54535150 	ldrbpl	r5, [r3], #-336	; 0xfffffeb0
 800b964:	59585655 	ldmdbpl	r8, {r0, r2, r4, r6, r9, sl, ip, lr}^
 800b968:	5e5d5c5a 	mrcpl	12, 2, r5, cr13, cr10, {2}
 800b96c:	64636160 	strbtvs	r6, [r3], #-352	; 0xfffffea0
 800b970:	6a686765 	bvs	9a2570c <_sidata+0x1a1959c>
 800b974:	706e6d6b 	rsbvc	r6, lr, fp, ror #26
 800b978:	76747371 			; <UNDEFINED> instruction: 0x76747371
 800b97c:	7c7b7978 			; <UNDEFINED> instruction: 0x7c7b7978
 800b980:	8381807e 	orrhi	r8, r1, #126	; 0x7e
 800b984:	8a888685 	bhi	622d3a0 <__heap_size+0x622c3a0>
 800b988:	918f8d8b 	orrls	r8, pc, fp, lsl #27
 800b98c:	98969492 	ldmls	r6, {r1, r4, r7, sl, ip, pc}
 800b990:	9f9d9c9a 	svcls	0x009d9c9a
 800b994:	a7a5a3a1 	strge	sl, [r5, r1, lsr #7]!
 800b998:	afadaba9 	svcge	0x00adaba9
 800b99c:	b7b5b3b1 			; <UNDEFINED> instruction: 0xb7b5b3b1
 800b9a0:	bfbdbbb9 	svclt	0x00bdbbb9
 800b9a4:	c8c6c3c1 	stmiagt	r6, {r0, r6, r7, r8, r9, lr, pc}^
 800b9a8:	d0ceccca 	sbcle	ip, lr, sl, asr #25
 800b9ac:	d9d7d5d3 	ldmible	r7, {r0, r1, r4, r6, r7, r8, sl, ip, lr, pc}^
 800b9b0:	e3e0dedc 	mvn	sp, #220, 28	; 0xdc0
 800b9b4:	eceae7e5 	stcl	7, cr14, [sl], #916	; 0x394
 800b9b8:	f6f3f1ee 			; <UNDEFINED> instruction: 0xf6f3f1ee
 800b9bc:	fffdfbf8 			; <UNDEFINED> instruction: 0xfffdfbf8
 800b9c0:	6e6b6e55 	mcrvs	14, 3, r6, cr11, cr5, {2}
 800b9c4:	006e776f 	rsbeq	r7, lr, pc, ror #14

0800b9c8 <CSWTCH.18>:
 800b9c8:	02020200 	andeq	r0, r2, #0, 4
 800b9cc:	04020202 	streq	r0, [r2], #-514	; 0xfffffdfe
 800b9d0:	 	ldrbmi	r0, [r2, -r0, lsl #10]

0800b9d2 <PixelType::MAPS>:
 800b9d2:	00424752 	subeq	r4, r2, r2, asr r7
 800b9d6:	00474252 	subeq	r4, r7, r2, asr r2
 800b9da:	00425247 	subeq	r5, r2, r7, asr #4
 800b9de:	00524247 	subseq	r4, r2, r7, asr #4
 800b9e2:	00475242 	subeq	r5, r7, r2, asr #4
 800b9e6:	00524742 	subseq	r4, r2, r2, asr #14

0800b9ea <PixelType::TYPES>:
 800b9ea:	38325357 	ldmdacc	r2!, {r0, r1, r2, r4, r6, r8, r9, ip, lr}
 800b9ee:	00003130 	andeq	r3, r0, r0, lsr r1
 800b9f2:	38325357 	ldmdacc	r2!, {r0, r1, r2, r4, r6, r8, r9, ip, lr}
 800b9f6:	00003131 	andeq	r3, r0, r1, lsr r1
 800b9fa:	38325357 	ldmdacc	r2!, {r0, r1, r2, r4, r6, r8, r9, ip, lr}
 800b9fe:	00003231 	andeq	r3, r0, r1, lsr r2
 800ba02:	38325357 	ldmdacc	r2!, {r0, r1, r2, r4, r6, r8, r9, ip, lr}
 800ba06:	00423231 	subeq	r3, r2, r1, lsr r2
 800ba0a:	38325357 	ldmdacc	r2!, {r0, r1, r2, r4, r6, r8, r9, ip, lr}
 800ba0e:	00003331 	andeq	r3, r0, r1, lsr r3
 800ba12:	38325357 	ldmdacc	r2!, {r0, r1, r2, r4, r6, r8, r9, ip, lr}
 800ba16:	00003531 	andeq	r3, r0, r1, lsr r5
 800ba1a:	38364b53 	ldmdacc	r6!, {r0, r1, r4, r6, r8, r9, fp, lr}
 800ba1e:	00003231 	andeq	r3, r0, r1, lsr r2
 800ba22:	38364b53 	ldmdacc	r6!, {r0, r1, r4, r6, r8, r9, fp, lr}
 800ba26:	00573231 	subseq	r3, r7, r1, lsr r2
 800ba2a:	31534355 	cmpcc	r3, r5, asr r3
 800ba2e:	00333039 	eorseq	r3, r3, r9, lsr r0
 800ba32:	32534355 	subscc	r4, r3, #1409286145	; 0x54000001
 800ba36:	00333039 	eorseq	r3, r3, r9, lsr r0
 800ba3a:	38385343 	ldmdacc	r8!, {r0, r1, r6, r8, r9, ip, lr}
 800ba3e:	00003231 	andeq	r3, r0, r1, lsr r2
 800ba42:	31415041 	cmpcc	r1, r1, asr #32
 800ba46:	00003230 	andeq	r3, r0, r0, lsr r2
 800ba4a:	38394b53 	ldmdacc	r9!, {r0, r1, r4, r6, r8, r9, fp, lr}
 800ba4e:	00003232 	andeq	r3, r0, r2, lsr r2
 800ba52:	31383950 	teqcc	r8, r0, asr r9
 800ba56:	00000033 	andeq	r0, r0, r3, lsr r0

0800ba5a <s_patternName>:
 800ba5a:	656e6f4e 	strbvs	r6, [lr, #-3918]!	; 0xfffff0b2
	...
 800ba66:	61520000 	cmpvs	r2, r0
 800ba6a:	6f626e69 	svcvs	0x00626e69
 800ba6e:	79632077 	stmdbvc	r3!, {r0, r1, r2, r4, r5, r6, sp}^
 800ba72:	00656c63 	rsbeq	r6, r5, r3, ror #24
 800ba76:	61656854 	cmnvs	r5, r4, asr r8
 800ba7a:	20726574 	rsbscs	r6, r2, r4, ror r5
 800ba7e:	73616863 	cmnvc	r1, #6488064	; 0x630000
 800ba82:	6f430065 	svcvs	0x00430065
 800ba86:	72756f6c 	rsbsvc	r6, r5, #108, 30	; 0x1b0
 800ba8a:	70697720 	rsbvc	r7, r9, r0, lsr #14
 800ba8e:	00000065 	andeq	r0, r0, r5, rrx
 800ba92:	6e616353 	mcrvs	3, 3, r6, cr1, cr3, {2}
 800ba96:	0072656e 	rsbseq	r6, r2, lr, ror #10
 800ba9a:	00000000 	andeq	r0, r0, r0
 800ba9e:	61460000 	mrsvs	r0, (UNDEF: 70)
 800baa2:	00006564 	andeq	r6, r0, r4, ror #10
	...

0800baae <gamma10_0>:
 800baae:	03020100 	movweq	r0, #8448	; 0x2100
 800bab2:	07060504 	streq	r0, [r6, -r4, lsl #10]
 800bab6:	0b0a0908 	bleq	828dede <_sidata+0x281d6e>
 800baba:	0f0e0d0c 	svceq	0x000e0d0c
 800babe:	13121110 	tstne	r2, #16, 2
 800bac2:	17161514 			; <UNDEFINED> instruction: 0x17161514
 800bac6:	1b1a1918 	blne	8691f2e <_sidata+0x685dbe>
 800baca:	1f1e1d1c 	svcne	0x001e1d1c
 800bace:	23222120 			; <UNDEFINED> instruction: 0x23222120
 800bad2:	27262524 	strcs	r2, [r6, -r4, lsr #10]!
 800bad6:	2b2a2928 	blcs	8a95f7e <_sidata+0xa89e0e>
 800bada:	2f2e2d2c 	svccs	0x002e2d2c
 800bade:	33323130 	teqcc	r2, #48, 2
 800bae2:	37363534 			; <UNDEFINED> instruction: 0x37363534
 800bae6:	3b3a3938 	blcc	8e99fce <_sidata+0xe8de5e>
 800baea:	3f3e3d3c 	svccc	0x003e3d3c
 800baee:	43424140 	movtmi	r4, #8512	; 0x2140
 800baf2:	47464544 	strbmi	r4, [r6, -r4, asr #10]
 800baf6:	4b4a4948 	blmi	929e01e <_sidata+0x1291eae>
 800bafa:	4f4e4d4c 	svcmi	0x004e4d4c
 800bafe:	53525150 	cmppl	r2, #80, 2
 800bb02:	57565554 			; <UNDEFINED> instruction: 0x57565554
 800bb06:	5b5a5958 	blpl	96a206e <_sidata+0x1695efe>
 800bb0a:	5f5e5d5c 	svcpl	0x005e5d5c
 800bb0e:	63626160 	cmnvs	r2, #96, 2
 800bb12:	67666564 	strbvs	r6, [r6, -r4, ror #10]!
 800bb16:	6b6a6968 	blvs	9aa60be <_sidata+0x1a99f4e>
 800bb1a:	6f6e6d6c 	svcvs	0x006e6d6c
 800bb1e:	73727170 	cmnvc	r2, #112, 2
 800bb22:	77767574 			; <UNDEFINED> instruction: 0x77767574
 800bb26:	7b7a7978 	blvc	9eaa10e <_sidata+0x1e9df9e>
 800bb2a:	7f7e7d7c 	svcvc	0x007e7d7c
 800bb2e:	83828180 	orrhi	r8, r2, #128, 2
 800bb32:	87868584 	strhi	r8, [r6, r4, lsl #11]
 800bb36:	8b8a8988 	blhi	62ae15e <__heap_size+0x62ad15e>
 800bb3a:	8f8e8d8c 	svchi	0x008e8d8c
 800bb3e:	93929190 	orrsls	r9, r2, #144, 2	; 0x24
 800bb42:	97969594 			; <UNDEFINED> instruction: 0x97969594
 800bb46:	9b9a9998 	blls	66b21ae <__heap_size+0x66b11ae>
 800bb4a:	9f9e9d9c 	svcls	0x009e9d9c
 800bb4e:	a3a2a1a0 			; <UNDEFINED> instruction: 0xa3a2a1a0
 800bb52:	a7a6a5a4 	strge	sl, [r6, r4, lsr #11]!
 800bb56:	abaaa9a8 	blge	6ab61fe <__heap_size+0x6ab51fe>
 800bb5a:	afaeadac 	svcge	0x00aeadac
 800bb5e:	b3b2b1b0 			; <UNDEFINED> instruction: 0xb3b2b1b0
 800bb62:	b7b6b5b4 			; <UNDEFINED> instruction: 0xb7b6b5b4
 800bb66:	bbbab9b8 	bllt	6eba24e <__heap_size+0x6eb924e>
 800bb6a:	bfbebdbc 	svclt	0x00bebdbc
 800bb6e:	c3c2c1c0 	bicgt	ip, r2, #192, 2	; 0x30
 800bb72:	c7c6c5c4 	strbgt	ip, [r6, r4, asr #11]
 800bb76:	cbcac9c8 	blgt	72be29e <__heap_size+0x72bd29e>
 800bb7a:	cfcecdcc 	svcgt	0x00cecdcc
 800bb7e:	d3d2d1d0 	bicsle	sp, r2, #208, 2	; 0x34
 800bb82:	d7d6d5d4 			; <UNDEFINED> instruction: 0xd7d6d5d4
 800bb86:	dbdad9d8 	blle	76c22ee <__heap_size+0x76c12ee>
 800bb8a:	dfdedddc 	svcle	0x00dedddc
 800bb8e:	e3e2e1e0 	mvn	lr, #224, 2	; 0x38
 800bb92:	e7e6e5e4 	strb	lr, [r6, r4, ror #11]!
 800bb96:	ebeae9e8 	bl	7ac633e <__heap_size+0x7ac533e>
 800bb9a:	efeeedec 	svc	0x00eeedec
 800bb9e:	f3f2f1f0 	vsra.u64	<illegal reg q15.5>, q8, #14
 800bba2:	f7f6f5f4 			; <UNDEFINED> instruction: 0xf7f6f5f4
 800bba6:	fbfaf9f8 	blx	7eca390 <__heap_size+0x7ec9390>
 800bbaa:	fffefdfc 			; <UNDEFINED> instruction: 0xfffefdfc
 800bbae:	46006f6c 	strmi	r6, [r0], -ip, ror #30
 800bbb2:	776d7269 	strbvc	r7, [sp, -r9, ror #4]!
 800bbb6:	20657261 	rsbcs	r7, r5, r1, ror #4
 800bbba:	2a2e2556 	bcs	8b9511a <_sidata+0xb88faa>
 800bbbe:	4d440073 	stclmi	0, cr0, [r4, #-460]	; 0xfffffe34
 800bbc2:	3a532058 	bcc	94d3d2a <_sidata+0x14c7bba>
 800bbc6:	20753325 	rsbscs	r3, r5, r5, lsr #6
 800bbca:	33253a46 			; <UNDEFINED> instruction: 0x33253a46
 800bbce:	 	rsbeq	r0, r0, r5, ror r0

0800bbd0 <s_aStorSize>:
 800bbd0:	00000060 	andeq	r0, r0, r0, rrx
 800bbd4:	00000020 	andeq	r0, r0, r0, lsr #32
 800bbd8:	00000040 	andeq	r0, r0, r0, asr #32
 800bbdc:	00000040 	andeq	r0, r0, r0, asr #32
 800bbe0:	00000020 	andeq	r0, r0, r0, lsr #32
 800bbe4:	00000020 	andeq	r0, r0, r0, lsr #32
 800bbe8:	000001e0 	andeq	r0, r0, r0, ror #3
 800bbec:	00000040 	andeq	r0, r0, r0, asr #32
 800bbf0:	00000020 	andeq	r0, r0, r0, lsr #32
 800bbf4:	00000060 	andeq	r0, r0, r0, rrx
 800bbf8:	00000030 	andeq	r0, r0, r0, lsr r0
 800bbfc:	00000020 	andeq	r0, r0, r0, lsr #32
 800bc00:	000003b0 			; <UNDEFINED> instruction: 0x000003b0
 800bc04:	00000030 	andeq	r0, r0, r0, lsr r0
 800bc08:	00000040 	andeq	r0, r0, r0, asr #32
 800bc0c:	00000020 	andeq	r0, r0, r0, lsr #32
 800bc10:	00000060 	andeq	r0, r0, r0, rrx
 800bc14:	00000020 	andeq	r0, r0, r0, lsr #32
 800bc18:	00000400 	andeq	r0, r0, r0, lsl #8
 800bc1c:	00000020 	andeq	r0, r0, r0, lsr #32
 800bc20:	00000020 	andeq	r0, r0, r0, lsr #32
 800bc24:	00000040 	andeq	r0, r0, r0, asr #32
 800bc28:	00000060 	andeq	r0, r0, r0, rrx
 800bc2c:	00000020 	andeq	r0, r0, r0, lsr #32
 800bc30:	00000020 	andeq	r0, r0, r0, lsr #32
 800bc34:	00000140 	andeq	r0, r0, r0, asr #2

0800bc38 <s_aSignature>:
 800bc38:	01567641 	cmpeq	r6, r1, asr #12

0800bc3c <vtable for StoreDisplayUdf>:
	...
 800bc44:	0800727d 	stmdaeq	r0, {r0, r2, r3, r4, r5, r6, r9, ip, sp, lr}
 800bc48:	080072c5 	stmdaeq	r0, {r0, r2, r6, r7, r9, ip, sp, lr}
 800bc4c:	080072a1 	stmdaeq	r0, {r0, r5, r7, r9, ip, sp, lr}
 800bc50:	08007281 	stmdaeq	r0, {r0, r7, r9, ip, sp, lr}

0800bc54 <vtable for StorePixelDmx>:
	...
 800bc5c:	08007337 	stmdaeq	r0, {r0, r1, r2, r4, r5, r8, r9, ip, sp, lr}
 800bc60:	08007499 	stmdaeq	r0, {r0, r3, r4, r7, sl, ip, sp, lr}
 800bc64:	0800733d 	stmdaeq	r0, {r0, r2, r3, r4, r5, r8, r9, ip, sp, lr}
 800bc68:	080074ad 	stmdaeq	r0, {r0, r2, r3, r5, r7, sl, ip, sp, lr}
 800bc6c:	08007465 	stmdaeq	r0, {r0, r2, r5, r6, sl, ip, sp, lr}
 800bc70:	08007435 	stmdaeq	r0, {r0, r2, r4, r5, sl, ip, sp, lr}
 800bc74:	08007401 	stmdaeq	r0, {r0, sl, ip, sp, lr}
 800bc78:	080073c9 	stmdaeq	r0, {r0, r3, r6, r7, r8, r9, ip, sp, lr}
 800bc7c:	08007395 	stmdaeq	r0, {r0, r2, r4, r7, r8, r9, ip, sp, lr}
 800bc80:	08007361 	stmdaeq	r0, {r0, r5, r6, r8, r9, ip, sp, lr}
 800bc84:	fffffffc 			; <UNDEFINED> instruction: 0xfffffffc
 800bc88:	00000000 	andeq	r0, r0, r0
 800bc8c:	08007339 	stmdaeq	r0, {r0, r3, r4, r5, r8, r9, ip, sp, lr}
 800bc90:	080074a5 	stmdaeq	r0, {r0, r2, r5, r7, sl, ip, sp, lr}
 800bc94:	08007491 	stmdaeq	r0, {r0, r4, r7, sl, ip, sp, lr}
 800bc98:	0800745d 	stmdaeq	r0, {r0, r2, r3, r4, r6, sl, ip, sp, lr}
 800bc9c:	0800742d 	stmdaeq	r0, {r0, r2, r3, r5, sl, ip, sp, lr}
 800bca0:	080073f9 	stmdaeq	r0, {r0, r3, r4, r5, r6, r7, r8, r9, ip, sp, lr}
 800bca4:	080073c1 	stmdaeq	r0, {r0, r6, r7, r8, r9, ip, sp, lr}
 800bca8:	0800738d 	stmdaeq	r0, {r0, r2, r3, r7, r8, r9, ip, sp, lr}

0800bcac <vtable for StoreRDMDevice>:
	...
 800bcb4:	080074e5 	stmdaeq	r0, {r0, r2, r5, r6, r7, sl, ip, sp, lr}
 800bcb8:	08007555 	stmdaeq	r0, {r0, r2, r4, r6, r8, sl, ip, sp, lr}
 800bcbc:	080074ed 	stmdaeq	r0, {r0, r2, r3, r5, r6, r7, sl, ip, sp, lr}
 800bcc0:	08007569 	stmdaeq	r0, {r0, r3, r5, r6, r8, sl, ip, sp, lr}
 800bcc4:	08007511 	stmdaeq	r0, {r0, r4, r8, sl, ip, sp, lr}
 800bcc8:	fffffffc 			; <UNDEFINED> instruction: 0xfffffffc
 800bccc:	00000000 	andeq	r0, r0, r0
 800bcd0:	080074e7 	stmdaeq	r0, {r0, r1, r2, r5, r6, r7, sl, ip, sp, lr}
 800bcd4:	08007561 	stmdaeq	r0, {r0, r5, r6, r8, sl, ip, sp, lr}
 800bcd8:	0800754d 	stmdaeq	r0, {r0, r2, r3, r6, r8, sl, ip, sp, lr}

0800bcdc <vtable for StoreRDMSensors>:
	...
 800bce4:	080075a1 	stmdaeq	r0, {r0, r5, r7, r8, sl, ip, sp, lr}
 800bce8:	08007605 	stmdaeq	r0, {r0, r2, r9, sl, ip, sp, lr}
 800bcec:	080075a9 	stmdaeq	r0, {r0, r3, r5, r7, r8, sl, ip, sp, lr}
 800bcf0:	08007619 	stmdaeq	r0, {r0, r3, r4, r9, sl, ip, sp, lr}
 800bcf4:	080075cd 	stmdaeq	r0, {r0, r2, r3, r6, r7, r8, sl, ip, sp, lr}
 800bcf8:	fffffffc 			; <UNDEFINED> instruction: 0xfffffffc
 800bcfc:	00000000 	andeq	r0, r0, r0
 800bd00:	080075a3 	stmdaeq	r0, {r0, r1, r5, r7, r8, sl, ip, sp, lr}
 800bd04:	08007611 	stmdaeq	r0, {r0, r4, r9, sl, ip, sp, lr}
 800bd08:	080075fd 	stmdaeq	r0, {r0, r2, r3, r4, r5, r6, r7, r8, sl, ip, sp, lr}
 800bd0c:	3a434d46 	bcc	90df22c <_sidata+0x10d30bc>
 800bd10:	74654420 	strbtvc	r4, [r5], #-1056	; 0xfffffbe0
 800bd14:	65746365 	ldrbvs	r6, [r4, #-869]!	; 0xfffffc9b
 800bd18:	73252064 			; <UNDEFINED> instruction: 0x73252064
 800bd1c:	74697720 	strbtvc	r7, [r9], #-1824	; 0xfffff8e0
 800bd20:	6f742068 	svcvs	0x00742068
 800bd24:	206c6174 	rsbcs	r6, ip, r4, ror r1
 800bd28:	62206425 	eorvs	r6, r0, #620756992	; 0x25000000
 800bd2c:	73657479 	cmnvc	r5, #2030043136	; 0x79000000
 800bd30:	64255b20 	strtvs	r5, [r5], #-2848	; 0xfffff4e0
 800bd34:	5d426b20 	vstrpl	d22, [r2, #-128]	; 0xffffff80
 800bd38:	6f4e000a 	svcvs	0x004e000a
 800bd3c:	73696420 	cmnvc	r9, #32, 8	; 0x20000000
 800bd40:	79616c70 	stmdbvc	r1!, {r4, r5, r6, sl, fp, sp, lr}^
 800bd44:	756f6620 	strbvc	r6, [pc, #-1568]!	; 800b72c <gamma24_0+0x6c>
 800bd48:	5300646e 	movwpl	r6, #1134	; 0x46e
 800bd4c:	30313148 	eorscc	r3, r1, r8, asr #2
 800bd50:	53530036 	cmppl	r3, #54	; 0x36
 800bd54:	30333144 	eorscc	r3, r3, r4, asr #2
 800bd58:	73250036 			; <UNDEFINED> instruction: 0x73250036
 800bd5c:	64252820 	strtvs	r2, [r5], #-2080	; 0xfffff7e0
 800bd60:	2964252c 	stmdbcs	r4!, {r2, r3, r5, r8, sl, sp}^
 800bd64:	aa40000a 	bge	900bd94 <_sidata+0xfffc24>
 800bd68:	00eeaaee 	rsceq	sl, lr, lr, ror #21

0800bd6c <_OledFont8x6>:
 800bd6c:	00000040 	andeq	r0, r0, r0, asr #32
 800bd70:	40000000 	andmi	r0, r0, r0
 800bd74:	005f0000 	subseq	r0, pc, r0
 800bd78:	00400000 	subeq	r0, r0, r0
 800bd7c:	00070007 	andeq	r0, r7, r7
 800bd80:	7f144000 	svcvc	0x00144000
 800bd84:	00147f14 	andseq	r7, r4, r4, lsl pc
 800bd88:	7f2a2440 	svcvc	0x002a2440
 800bd8c:	4000122a 	andmi	r1, r0, sl, lsr #4
 800bd90:	64081323 	strvs	r1, [r8], #-803	; 0xfffffcdd
 800bd94:	36400062 	strbcc	r0, [r0], -r2, rrx
 800bd98:	50205649 	eorpl	r5, r0, r9, asr #12
 800bd9c:	08004000 	stmdaeq	r0, {lr}
 800bda0:	00000307 	andeq	r0, r0, r7, lsl #6
 800bda4:	221c0040 	andscs	r0, ip, #64	; 0x40
 800bda8:	40000041 	andmi	r0, r0, r1, asr #32
 800bdac:	1c224100 	stfnes	f4, [r2], #-0
 800bdb0:	2a400000 	bcs	900bdb8 <_sidata+0xfffc48>
 800bdb4:	2a1c7f1c 	bcs	872ba2c <_sidata+0x71f8bc>
 800bdb8:	08084000 	stmdaeq	r8, {lr}
 800bdbc:	0008083e 	andeq	r0, r8, lr, lsr r8
 800bdc0:	70800040 	addvc	r0, r0, r0, asr #32
 800bdc4:	40000030 	andmi	r0, r0, r0, lsr r0
 800bdc8:	08080808 	stmdaeq	r8, {r3, fp}
 800bdcc:	00400008 	subeq	r0, r0, r8
 800bdd0:	00606000 	rsbeq	r6, r0, r0
 800bdd4:	10204000 	eorne	r4, r0, r0
 800bdd8:	00020408 	andeq	r0, r2, r8, lsl #8
 800bddc:	49513e40 	ldmdbmi	r1, {r6, r9, sl, fp, ip, sp}^
 800bde0:	40003e45 	andmi	r3, r0, r5, asr #28
 800bde4:	407f4200 	rsbsmi	r4, pc, r0, lsl #4
 800bde8:	72400000 	subvc	r0, r0, #0
 800bdec:	46494949 	strbmi	r4, [r9], -r9, asr #18
 800bdf0:	41214000 			; <UNDEFINED> instruction: 0x41214000
 800bdf4:	00334d49 	eorseq	r4, r3, r9, asr #26
 800bdf8:	12141840 	andsne	r1, r4, #64, 16	; 0x400000
 800bdfc:	4000107f 	andmi	r1, r0, pc, ror r0
 800be00:	45454527 	strbmi	r4, [r5, #-1319]	; 0xfffffad9
 800be04:	3c400039 	mcrrcc	0, 3, r0, r0, cr9
 800be08:	3149494a 	cmpcc	r9, sl, asr #18
 800be0c:	21414000 	mrscs	r4, (UNDEF: 65)
 800be10:	00070911 	andeq	r0, r7, r1, lsl r9
 800be14:	49493640 	stmdbmi	r9, {r6, r9, sl, ip, sp}^
 800be18:	40003649 	andmi	r3, r0, r9, asr #12
 800be1c:	29494946 	stmdbcs	r9, {r1, r2, r6, r8, fp, lr}^
 800be20:	0040001e 	subeq	r0, r0, lr, lsl r0
 800be24:	00001400 	andeq	r1, r0, r0, lsl #8
 800be28:	40004000 	andmi	r4, r0, r0
 800be2c:	00000034 	andeq	r0, r0, r4, lsr r0
 800be30:	14080040 	strne	r0, [r8], #-64	; 0xffffffc0
 800be34:	40004122 	andmi	r4, r0, r2, lsr #2
 800be38:	14141414 	ldrne	r1, [r4], #-1044	; 0xfffffbec
 800be3c:	00400014 	subeq	r0, r0, r4, lsl r0
 800be40:	08142241 	ldmdaeq	r4, {r0, r6, r9, sp}
 800be44:	01024000 	mrseq	r4, (UNDEF: 2)
 800be48:	00060959 	andeq	r0, r6, r9, asr r9
 800be4c:	5d413e40 	stclpl	14, cr3, [r1, #-256]	; 0xffffff00
 800be50:	40004e59 	andmi	r4, r0, r9, asr lr
 800be54:	1211127c 	andsne	r1, r1, #124, 4	; 0xc0000007
 800be58:	7f40007c 	svcvc	0x0040007c
 800be5c:	36494949 	strbcc	r4, [r9], -r9, asr #18
 800be60:	413e4000 	teqmi	lr, r0
 800be64:	00224141 	eoreq	r4, r2, r1, asr #2
 800be68:	41417f40 	cmpmi	r1, r0, asr #30
 800be6c:	40003e41 	andmi	r3, r0, r1, asr #28
 800be70:	4949497f 	stmdbmi	r9, {r0, r1, r2, r3, r4, r5, r6, r8, fp, lr}^
 800be74:	7f400041 	svcvc	0x00400041
 800be78:	01090909 	tsteq	r9, r9, lsl #18
 800be7c:	413e4000 	teqmi	lr, r0
 800be80:	00735141 	rsbseq	r5, r3, r1, asr #2
 800be84:	08087f40 	stmdaeq	r8, {r6, r8, r9, sl, fp, ip, sp, lr}
 800be88:	40007f08 	andmi	r7, r0, r8, lsl #30
 800be8c:	417f4100 	cmnmi	pc, r0, lsl #2
 800be90:	20400000 	subcs	r0, r0, r0
 800be94:	013f4140 	teqeq	pc, r0, asr #2
 800be98:	087f4000 	ldmdaeq	pc!, {lr}^	; <UNPREDICTABLE>
 800be9c:	00412214 	subeq	r2, r1, r4, lsl r2
 800bea0:	40407f40 	submi	r7, r0, r0, asr #30
 800bea4:	40004040 	andmi	r4, r0, r0, asr #32
 800bea8:	021c027f 	andseq	r0, ip, #-268435449	; 0xf0000007
 800beac:	7f40007f 	svcvc	0x0040007f
 800beb0:	7f100804 	svcvc	0x00100804
 800beb4:	413e4000 	teqmi	lr, r0
 800beb8:	003e4141 	eorseq	r4, lr, r1, asr #2
 800bebc:	09097f40 	stmdbeq	r9, {r6, r8, r9, sl, fp, ip, sp, lr}
 800bec0:	40000609 	andmi	r0, r0, r9, lsl #12
 800bec4:	2151413e 	cmpcs	r1, lr, lsr r1
 800bec8:	7f40005e 	svcvc	0x0040005e
 800becc:	46291909 	strtmi	r1, [r9], -r9, lsl #18
 800bed0:	49264000 	stmdbmi	r6!, {lr}
 800bed4:	00324949 	eorseq	r4, r2, r9, asr #18
 800bed8:	7f010340 	svcvc	0x00010340
 800bedc:	40000301 	andmi	r0, r0, r1, lsl #6
 800bee0:	4040403f 	submi	r4, r0, pc, lsr r0
 800bee4:	1f40003f 	svcne	0x0040003f
 800bee8:	1f204020 	svcne	0x00204020
 800beec:	403f4000 	eorsmi	r4, pc, r0
 800bef0:	003f4038 	eorseq	r4, pc, r8, lsr r0	; <UNPREDICTABLE>
 800bef4:	08146340 	ldmdaeq	r4, {r6, r8, r9, sp, lr}
 800bef8:	40006314 	andmi	r6, r0, r4, lsl r3
 800befc:	04780403 	ldrbteq	r0, [r8], #-1027	; 0xfffffbfd
 800bf00:	61400003 	cmpvs	r0, r3
 800bf04:	434d4959 	movtmi	r4, #55641	; 0xd959
 800bf08:	7f004000 	svcvc	0x00004000
 800bf0c:	00414141 	subeq	r4, r1, r1, asr #2
 800bf10:	08040240 	stmdaeq	r4, {r6, r9}
 800bf14:	40002010 	andmi	r2, r0, r0, lsl r0
 800bf18:	41414100 	mrsmi	r4, (UNDEF: 81)
 800bf1c:	0440007f 	strbeq	r0, [r0], #-127	; 0xffffff81
 800bf20:	04020102 	streq	r0, [r2], #-258	; 0xfffffefe
 800bf24:	40404000 	submi	r4, r0, r0
 800bf28:	00404040 	subeq	r4, r0, r0, asr #32
 800bf2c:	07030040 	streq	r0, [r3, -r0, asr #32]
 800bf30:	40000008 	andmi	r0, r0, r8
 800bf34:	78545420 	ldmdavc	r4, {r5, sl, ip, lr}^
 800bf38:	7f400040 	svcvc	0x00400040
 800bf3c:	38444428 	stmdacc	r4, {r3, r5, sl, lr}^
 800bf40:	44384000 	ldrtmi	r4, [r8], #-0
 800bf44:	00284444 	eoreq	r4, r8, r4, asr #8
 800bf48:	44443840 	strbmi	r3, [r4], #-2112	; 0xfffff7c0
 800bf4c:	40007f28 	andmi	r7, r0, r8, lsr #30
 800bf50:	54545438 	ldrbpl	r5, [r4], #-1080	; 0xfffffbc8
 800bf54:	00400018 	subeq	r0, r0, r8, lsl r0
 800bf58:	02097e08 	andeq	r7, r9, #8, 28	; 0x80
 800bf5c:	a4184000 	ldrge	r4, [r8], #-0
 800bf60:	00789ca4 	rsbseq	r9, r8, r4, lsr #25
 800bf64:	04087f40 	streq	r7, [r8], #-3904	; 0xfffff0c0
 800bf68:	40007804 	andmi	r7, r0, r4, lsl #16
 800bf6c:	407d4400 	rsbsmi	r4, sp, r0, lsl #8
 800bf70:	20400000 	subcs	r0, r0, r0
 800bf74:	003d4040 	eorseq	r4, sp, r0, asr #32
 800bf78:	107f4000 	rsbsne	r4, pc, r0
 800bf7c:	00004428 	andeq	r4, r0, r8, lsr #8
 800bf80:	7f410040 	svcvc	0x00410040
 800bf84:	40000040 	andmi	r0, r0, r0, asr #32
 800bf88:	0478047c 	ldrbteq	r0, [r8], #-1148	; 0xfffffb84
 800bf8c:	7c400078 	mcrrvc	0, 7, r0, r0, cr8
 800bf90:	78040408 	stmdavc	r4, {r3, sl}
 800bf94:	44384000 	ldrtmi	r4, [r8], #-0
 800bf98:	00384444 	eorseq	r4, r8, r4, asr #8
 800bf9c:	2418fc40 	ldrcs	pc, [r8], #-3136	; 0xfffff3c0
 800bfa0:	40001824 	andmi	r1, r0, r4, lsr #16
 800bfa4:	18242418 	stmdane	r4!, {r3, r4, sl, sp}
 800bfa8:	7c4000fc 	mcrrvc	0, 15, r0, r0, cr12
 800bfac:	08040408 	stmdaeq	r4, {r3, sl}
 800bfb0:	54484000 	strbpl	r4, [r8], #-0
 800bfb4:	00245454 	eoreq	r5, r4, r4, asr r4
 800bfb8:	3f040440 	svccc	0x00040440
 800bfbc:	40002444 	andmi	r2, r0, r4, asr #8
 800bfc0:	2040403c 	subcs	r4, r0, ip, lsr r0
 800bfc4:	1c40007c 	mcrrne	0, 7, r0, r0, cr12
 800bfc8:	1c204020 	stcne	0, cr4, [r0], #-128	; 0xffffff80
 800bfcc:	403c4000 	eorsmi	r4, ip, r0
 800bfd0:	003c4030 	eorseq	r4, ip, r0, lsr r0
 800bfd4:	10284440 	eorne	r4, r8, r0, asr #8
 800bfd8:	40004428 	andmi	r4, r0, r8, lsr #8
 800bfdc:	9090904c 	addsls	r9, r0, ip, asr #32
 800bfe0:	4440007c 	strbmi	r0, [r0], #-124	; 0xffffff84
 800bfe4:	444c5464 	strbmi	r5, [ip], #-1124	; 0xfffffb9c
 800bfe8:	08004000 	stmdaeq	r0, {lr}
 800bfec:	00004136 	andeq	r4, r0, r6, lsr r1
 800bff0:	77000040 	strvc	r0, [r0, -r0, asr #32]
 800bff4:	40000000 	andmi	r0, r0, r0
 800bff8:	08364100 	ldmdaeq	r6!, {r8, lr}
 800bffc:	02400000 	subeq	r0, r0, #0
 800c000:	02040201 	andeq	r0, r4, #268435456	; 0x10000000
 800c004:	263c4000 	ldrtcs	r4, [ip], -r0
 800c008:	003c2623 	eorseq	r2, ip, r3, lsr #12

0800c00c <oled_128x32_init>:
 800c00c:	a880d5ae 	stmge	r0, {r1, r2, r3, r5, r7, r8, sl, ip, lr, pc}
 800c010:	4000d31f 	andmi	sp, r0, pc, lsl r3
 800c014:	0020148d 	eoreq	r1, r0, sp, lsl #9
 800c018:	02dac8a1 	sbcseq	ip, sl, #10551296	; 0xa10000
 800c01c:	f1d97f81 			; <UNDEFINED> instruction: 0xf1d97f81
 800c020:	a6a440db 	ssatge	r4, #5, fp, asr #1

0800c024 <oled_128x64_init>:
 800c024:	a880d5ae 	stmge	r0, {r1, r2, r3, r5, r7, r8, sl, ip, lr, pc}
 800c028:	4000d33f 	andmi	sp, r0, pc, lsr r3
 800c02c:	0020148d 	eoreq	r1, r0, sp, lsl #9
 800c030:	12dac8a1 	sbcsne	ip, sl, #10551296	; 0xa10000
 800c034:	f1d97f81 			; <UNDEFINED> instruction: 0xf1d97f81
 800c038:	a6a440db 	ssatge	r4, #5, fp, asr #1

0800c03c <vtable for Ssd1306>:
	...
 800c044:	08007a7d 	stmdaeq	r0, {r0, r2, r3, r4, r5, r6, r9, fp, ip, sp, lr}
 800c048:	08007aa9 	stmdaeq	r0, {r0, r3, r5, r7, r9, fp, ip, sp, lr}
 800c04c:	08007e2d 	stmdaeq	r0, {r0, r2, r3, r5, r9, sl, fp, ip, sp, lr}
 800c050:	08007da9 	stmdaeq	r0, {r0, r3, r5, r7, r8, sl, fp, ip, sp, lr}
 800c054:	08007c8d 	stmdaeq	r0, {r0, r2, r3, r7, sl, fp, ip, sp, lr}
 800c058:	08007ac9 	stmdaeq	r0, {r0, r3, r6, r7, r9, fp, ip, sp, lr}
 800c05c:	08007b05 	stmdaeq	r0, {r0, r2, r8, r9, fp, ip, sp, lr}
 800c060:	08007c65 	stmdaeq	r0, {r0, r2, r5, r6, sl, fp, ip, sp, lr}
 800c064:	08007c0d 	stmdaeq	r0, {r0, r2, r3, sl, fp, ip, sp, lr}
 800c068:	08007a7f 	stmdaeq	r0, {r0, r1, r2, r3, r4, r5, r6, r9, fp, ip, sp, lr}
 800c06c:	08007cdd 	stmdaeq	r0, {r0, r2, r3, r4, r6, r7, sl, fp, ip, sp, lr}
 800c070:	08007ce9 	stmdaeq	r0, {r0, r3, r5, r6, r7, sl, fp, ip, sp, lr}
 800c074:	08007edd 	stmdaeq	r0, {r0, r2, r3, r4, r6, r7, r9, sl, fp, ip, sp, lr}
 800c078:	08007a81 	stmdaeq	r0, {r0, r7, r9, fp, ip, sp, lr}
 800c07c:	37335b1b 			; <UNDEFINED> instruction: 0x37335b1b
 800c080:	5b1b006d 	blpl	86cc23c <_sidata+0x6c00cc>
 800c084:	006d3034 	rsbeq	r3, sp, r4, lsr r0
 800c088:	30335b1b 	eorscc	r5, r3, fp, lsl fp
 800c08c:	5b1b006d 	blpl	86cc248 <_sidata+0x6c00d8>
 800c090:	006d3133 	rsbeq	r3, sp, r3, lsr r1
 800c094:	32335b1b 	eorscc	r5, r3, #27648	; 0x6c00
 800c098:	5b1b006d 	blpl	86cc254 <_sidata+0x6c00e4>
 800c09c:	006d3333 	rsbeq	r3, sp, r3, lsr r3
 800c0a0:	39335b1b 	ldmdbcc	r3!, {r0, r1, r3, r4, r8, r9, fp, ip, lr}
 800c0a4:	565b006d 	ldrbpl	r0, [fp], -sp, rrx
 800c0a8:	732a2e25 			; <UNDEFINED> instruction: 0x732a2e25
 800c0ac:	7325205d 			; <UNDEFINED> instruction: 0x7325205d
 800c0b0:	6d6f4320 	stclvs	3, cr4, [pc, #-128]!	; 800c038 <oled_128x64_init+0x14>
 800c0b4:	656c6970 	strbvs	r6, [ip, #-2416]!	; 0xfffff690
 800c0b8:	6e6f2064 	cdpvs	0, 6, cr2, cr15, cr4, {3}
 800c0bc:	2a2e2520 	bcs	8b95544 <_sidata+0xb893d4>
 800c0c0:	74612073 	strbtvc	r2, [r1], #-115	; 0xffffff8d
 800c0c4:	2a2e2520 	bcs	8b9554c <_sidata+0xb893dc>
 800c0c8:	65520073 	ldrbvs	r0, [r2, #-115]	; 0xffffff8d
 800c0cc:	746f6f62 	strbtvc	r6, [pc], #-3938	; 800c0d4 <vtable for Ssd1306+0x98>
 800c0d0:	20676e69 	rsbcs	r6, r7, r9, ror #28
 800c0d4:	0a2e2e2e 	beq	8b97994 <_sidata+0xb8b824>
 800c0d8:	206f4e00 	rsbcs	r4, pc, r0, lsl #28
 800c0dc:	20435452 	subcs	r5, r3, r2, asr r4
 800c0e0:	6e6e6f63 	cdpvs	15, 6, cr6, cr14, cr3, {3}
 800c0e4:	65746365 	ldrbvs	r6, [r4, #-869]!	; 0xfffffc9b
 800c0e8:	2e250064 	cdpcs	0, 2, cr0, cr5, cr4, {3}
 800c0ec:	252f6434 	strcs	r6, [pc, #-1076]!	; 800bcc0 <vtable for StoreRDMDevice+0x14>
 800c0f0:	2f64322e 	svccs	0x0064322e
 800c0f4:	64322e25 	ldrtvs	r2, [r2], #-3621	; 0xfffff1db
 800c0f8:	322e2520 	eorcc	r2, lr, #32, 10	; 0x8000000
 800c0fc:	2e253a64 	vnmulcs.f32	s6, s10, s9
 800c100:	253a6432 	ldrcs	r6, [sl, #-1074]!	; 0xfffffbce
 800c104:	0a64322e 	beq	99189c4 <_sidata+0x190c854>
 800c108:	50434d00 	subpl	r4, r3, r0, lsl #26
 800c10c:	31343937 	teqcc	r4, r7, lsr r9
 800c110:	53440058 	movtpl	r0, #16472	; 0x4058
 800c114:	31333233 	teqcc	r3, r3, lsr r2
 800c118:	46435000 	strbmi	r5, [r3], -r0
 800c11c:	33363538 	teqcc	r6, #56, 10	; 0xe000000
 800c120:	434f5300 	movtmi	r5, #62208	; 0xf300
 800c124:	544e495f 	strbpl	r4, [lr], #-2399	; 0xfffff6a1
 800c128:	414e5245 	cmpmi	lr, r5, asr #4
 800c12c:	0000004c 	andeq	r0, r0, ip, asr #32

0800c130 <CSWTCH.7>:
 800c130:	0800c109 	stmdaeq	r0, {r0, r3, r8, lr, pc}
 800c134:	0800c112 	stmdaeq	r0, {r1, r4, r8, lr, pc}
 800c138:	0800c119 	stmdaeq	r0, {r0, r3, r4, r8, lr, pc}
 800c13c:	0800c121 	stmdaeq	r0, {r0, r5, r8, lr, pc}

0800c140 <days_of_month>:
 800c140:	0000001f 	andeq	r0, r0, pc, lsl r0
 800c144:	0000001c 	andeq	r0, r0, ip, lsl r0
 800c148:	0000001f 	andeq	r0, r0, pc, lsl r0
 800c14c:	0000001e 	andeq	r0, r0, lr, lsl r0
 800c150:	0000001f 	andeq	r0, r0, pc, lsl r0
 800c154:	0000001e 	andeq	r0, r0, lr, lsl r0
 800c158:	0000001f 	andeq	r0, r0, pc, lsl r0
 800c15c:	0000001f 	andeq	r0, r0, pc, lsl r0
 800c160:	0000001e 	andeq	r0, r0, lr, lsl r0
 800c164:	0000001f 	andeq	r0, r0, pc, lsl r0
 800c168:	0000001e 	andeq	r0, r0, lr, lsl r0
 800c16c:	0000001f 	andeq	r0, r0, pc, lsl r0

Disassembly of section .stack:

20000000 <_sp-0x1000>:
	...

Disassembly of section .data:

20001000 <s_nDmxTransmitMabTime>:
20001000:	0000000c 	andeq	r0, r0, ip

20001004 <s_nDmxTransmitBreakTime>:
20001004:	000000b0 	strheq	r0, [r0], -r0	; <UNPREDICTABLE>

20001008 <s_nDmxTransmitInterTime>:
20001008:	000008c0 	andeq	r0, r0, r0, asr #17

2000100c <next_block>:
2000100c:	200087b4 			; <UNDEFINED> instruction: 0x200087b4

20001010 <s_block_bucket>:
20001010:	00000010 	andeq	r0, r0, r0, lsl r0
20001014:	00000000 	andeq	r0, r0, r0
20001018:	00000020 	andeq	r0, r0, r0, lsr #32
2000101c:	00000000 	andeq	r0, r0, r0
20001020:	00000040 	andeq	r0, r0, r0, asr #32
20001024:	00000000 	andeq	r0, r0, r0
20001028:	00000060 	andeq	r0, r0, r0, rrx
2000102c:	00000000 	andeq	r0, r0, r0
20001030:	00000080 	andeq	r0, r0, r0, lsl #1
20001034:	00000000 	andeq	r0, r0, r0
20001038:	00000100 	andeq	r0, r0, r0, lsl #2
2000103c:	00000000 	andeq	r0, r0, r0
20001040:	00000140 	andeq	r0, r0, r0, asr #2
20001044:	00000000 	andeq	r0, r0, r0
20001048:	00000180 	andeq	r0, r0, r0, lsl #3
2000104c:	00000000 	andeq	r0, r0, r0
20001050:	00000200 	andeq	r0, r0, r0, lsl #4
20001054:	00000000 	andeq	r0, r0, r0
20001058:	00000300 	andeq	r0, r0, r0, lsl #6
2000105c:	00000000 	andeq	r0, r0, r0
20001060:	00000400 	andeq	r0, r0, r0, lsl #8
20001064:	00000000 	andeq	r0, r0, r0
20001068:	00000500 	andeq	r0, r0, r0, lsl #10
	...

20001078 <SystemCoreClock>:
20001078:	07270e00 	streq	r0, [r7, -r0, lsl #28]!

Disassembly of section .bss:

20001080 <s_IsProgrammed>:
	...

20001081 <s_isOn>:
20001081:	 	andeq	r0, r0, r0

20001084 <s_Pattern>:
20001084:	00000000 	andeq	r0, r0, r0

20001088 <outptr>:
20001088:	00000000 	andeq	r0, r0, r0

2000108c <RDMResponder::s_RdmCommand>:
	...

2000118d <RDMResponder::m_IsSubDeviceActive>:
2000118d:	 	andeq	r0, r0, r0

20001190 <RDMResponder::s_pThis>:
20001190:	00000000 	andeq	r0, r0, r0

20001194 <RDMSensors::s_pThis>:
20001194:	00000000 	andeq	r0, r0, r0

20001198 <RDMSubDevices::s_pThis>:
20001198:	00000000 	andeq	r0, r0, r0

2000119c <DMXReceiver::s_IsActive>:
2000119c:	00000000 	andeq	r0, r0, r0

200011a0 <DMXReceiver::s_pLightSet>:
200011a0:	00000000 	andeq	r0, r0, r0

200011a4 <DMXReceiver::s_bDisableOutput>:
200011a4:	00000000 	andeq	r0, r0, r0

200011a8 <s_RxBuffer>:
	...

200013b8 <s_TxBuffer>:
	...

200015c4 <sv_PortState>:
200015c4:	00000000 	andeq	r0, r0, r0

200015c8 <sv_nRxDmxPackets>:
	...

200015d8 <Dmx::s_pThis>:
200015d8:	00000000 	andeq	r0, r0, r0

200015dc <gv_RdmDataReceiveEnd>:
200015dc:	00000000 	andeq	r0, r0, r0

200015e0 <RDMDeviceResponder::s_pThis>:
200015e0:	00000000 	andeq	r0, r0, r0

200015e4 <RDMIdentify::m_bIsEnabled>:
	...

200015e5 <RDMIdentify::m_nMode>:
200015e5:	 	andeq	r0, r0, r0

200015e8 <RDMIdentify::s_pThis>:
200015e8:	00000000 	andeq	r0, r0, r0

200015ec <WS28xxDmx::s_pThis>:
200015ec:	00000000 	andeq	r0, r0, r0

200015f0 <PixelDmxParamsRdm::s_pWS28xxDmxStore>:
200015f0:	00000000 	andeq	r0, r0, r0

200015f4 <PixelDmxParamsRdm::s_Data>:
200015f4:	00000000 	andeq	r0, r0, r0

200015f8 <PixelPatterns::m_PortConfig>:
	...

20001618 <PixelPatterns::m_nActivePorts>:
20001618:	00000000 	andeq	r0, r0, r0

2000161c <PixelPatterns::m_pScannerColours>:
2000161c:	00000000 	andeq	r0, r0, r0

20001620 <PixelPatterns::m_nCount>:
20001620:	00000000 	andeq	r0, r0, r0

20001624 <PixelPatterns::m_pOutput>:
20001624:	00000000 	andeq	r0, r0, r0

20001628 <PixelTestPattern::s_pThis>:
20001628:	00000000 	andeq	r0, r0, r0

2000162c <PixelTestPattern::s_Pattern>:
2000162c:	00000000 	andeq	r0, r0, r0

20001630 <s_tmp>:
20001630:	00000000 	andeq	r0, r0, r0

20001634 <WS28xx::s_pThis>:
20001634:	00000000 	andeq	r0, r0, r0

20001638 <Network::s_pThis>:
20001638:	00000000 	andeq	r0, r0, r0

2000163c <DisplayUdf::s_pThis>:
2000163c:	00000000 	andeq	r0, r0, r0

20001640 <ConfigStore::s_nWaitMillis>:
20001640:	00000000 	andeq	r0, r0, r0

20001644 <ConfigStore::s_SpiFlashData>:
	...

20002644 <ConfigStore::s_nStartAddress>:
20002644:	00000000 	andeq	r0, r0, r0

20002648 <ConfigStore::s_bHaveFlashChip>:
20002648:	00000000 	andeq	r0, r0, r0

2000264c <ConfigStore::s_nSpiFlashStoreSize>:
2000264c:	00000000 	andeq	r0, r0, r0

20002650 <ConfigStore::s_State>:
20002650:	00000000 	andeq	r0, r0, r0

20002654 <ConfigStore::s_pThis>:
20002654:	00000000 	andeq	r0, r0, r0

20002658 <StoreDisplayUdf::s_pThis>:
20002658:	00000000 	andeq	r0, r0, r0

2000265c <StorePixelDmx::s_pThis>:
2000265c:	00000000 	andeq	r0, r0, r0

20002660 <StoreRDMDevice::s_pThis>:
20002660:	00000000 	andeq	r0, r0, r0

20002664 <StoreRDMSensors::s_pThis>:
20002664:	00000000 	andeq	r0, r0, r0

20002668 <FlashCode::s_pThis>:
20002668:	00000000 	andeq	r0, r0, r0

2000266c <flashcode::s_nAddress>:
2000266c:	00000000 	andeq	r0, r0, r0

20002670 <flashcode::s_State>:
20002670:	00000000 	andeq	r0, r0, r0

20002674 <flashcode::s_nPage>:
20002674:	00000000 	andeq	r0, r0, r0

20002678 <flashcode::s_pData>:
20002678:	00000000 	andeq	r0, r0, r0

2000267c <flashcode::s_isBank0>:
2000267c:	00000000 	andeq	r0, r0, r0

20002680 <flashcode::s_nLength>:
20002680:	00000000 	andeq	r0, r0, r0

20002684 <Display::s_pThis>:
20002684:	00000000 	andeq	r0, r0, r0

20002688 <_ClearBuffer>:
	...

20002710 <Ssd1306::s_pThis>:
20002710:	00000000 	andeq	r0, r0, r0

20002714 <FirmwareVersion::s_FirmwareVersion>:
	...

2000272a <FirmwareVersion::s_Print>:
	...

2000276c <FirmwareVersion::s_pThis>:
2000276c:	00000000 	andeq	r0, r0, r0

20002770 <Hardware::s_pThis>:
20002770:	00000000 	andeq	r0, r0, r0

20002774 <HwClock::s_pThis>:
20002774:	00000000 	andeq	r0, r0, r0

20002778 <Tm>:
	...

200027a0 <s_micros>:
	...

200027a8 <set_timer>:
200027a8:	00000000 	andeq	r0, r0, r0

200027ac <s_nSysTickMillis>:
200027ac:	00000000 	andeq	r0, r0, r0

200027b0 <s_nAddress>:
200027b0:	00000000 	andeq	r0, r0, r0

200027b4 <s_TxBuffer>:
	...

Disassembly of section .heap:

200087b4 <heap_low>:
	...
